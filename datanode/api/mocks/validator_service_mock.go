// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/api (interfaces: ValidatorService)

// Package mocks is a generated GoMock package.
package mocks

import (
	vega "code.vegaprotocol.io/vega/protos/vega"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidatorService is a mock of ValidatorService interface
type MockValidatorService struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorServiceMockRecorder
}

// MockValidatorServiceMockRecorder is the mock recorder for MockValidatorService
type MockValidatorServiceMockRecorder struct {
	mock *MockValidatorService
}

// NewMockValidatorService creates a new mock instance
func NewMockValidatorService(ctrl *gomock.Controller) *MockValidatorService {
	mock := &MockValidatorService{ctrl: ctrl}
	mock.recorder = &MockValidatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorService) EXPECT() *MockValidatorServiceMockRecorder {
	return m.recorder
}

// GetEpoch mocks base method
func (m *MockValidatorService) GetEpoch(arg0 context.Context) (*vega.Epoch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpoch", arg0)
	ret0, _ := ret[0].(*vega.Epoch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpoch indicates an expected call of GetEpoch
func (mr *MockValidatorServiceMockRecorder) GetEpoch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockValidatorService)(nil).GetEpoch), arg0)
}

// GetEpochByID mocks base method
func (m *MockValidatorService) GetEpochByID(arg0 context.Context, arg1 uint64) (*vega.Epoch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochByID", arg0, arg1)
	ret0, _ := ret[0].(*vega.Epoch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpochByID indicates an expected call of GetEpochByID
func (mr *MockValidatorServiceMockRecorder) GetEpochByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochByID", reflect.TypeOf((*MockValidatorService)(nil).GetEpochByID), arg0, arg1)
}

// GetNodeByID mocks base method
func (m *MockValidatorService) GetNodeByID(arg0 context.Context, arg1 string) (*vega.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByID", arg0, arg1)
	ret0, _ := ret[0].(*vega.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByID indicates an expected call of GetNodeByID
func (mr *MockValidatorServiceMockRecorder) GetNodeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByID", reflect.TypeOf((*MockValidatorService)(nil).GetNodeByID), arg0, arg1)
}

// GetNodeData mocks base method
func (m *MockValidatorService) GetNodeData(arg0 context.Context) (*vega.NodeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeData", arg0)
	ret0, _ := ret[0].(*vega.NodeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeData indicates an expected call of GetNodeData
func (mr *MockValidatorServiceMockRecorder) GetNodeData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeData", reflect.TypeOf((*MockValidatorService)(nil).GetNodeData), arg0)
}

// GetNodes mocks base method
func (m *MockValidatorService) GetNodes(arg0 context.Context) ([]*vega.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", arg0)
	ret0, _ := ret[0].([]*vega.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockValidatorServiceMockRecorder) GetNodes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockValidatorService)(nil).GetNodes), arg0)
}
