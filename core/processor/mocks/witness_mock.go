// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/processor (interfaces: Witness)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "code.vegaprotocol.io/protos/vega/commands/v1"
	crypto "code.vegaprotocol.io/vega/core/crypto"
	gomock "github.com/golang/mock/gomock"
)

// MockWitness is a mock of Witness interface.
type MockWitness struct {
	ctrl     *gomock.Controller
	recorder *MockWitnessMockRecorder
}

// MockWitnessMockRecorder is the mock recorder for MockWitness.
type MockWitnessMockRecorder struct {
	mock *MockWitness
}

// NewMockWitness creates a new mock instance.
func NewMockWitness(ctrl *gomock.Controller) *MockWitness {
	mock := &MockWitness{ctrl: ctrl}
	mock.recorder = &MockWitnessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWitness) EXPECT() *MockWitnessMockRecorder {
	return m.recorder
}

// AddNodeCheck mocks base method.
func (m *MockWitness) AddNodeCheck(arg0 context.Context, arg1 *v1.NodeVote, arg2 crypto.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNodeCheck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNodeCheck indicates an expected call of AddNodeCheck.
func (mr *MockWitnessMockRecorder) AddNodeCheck(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeCheck", reflect.TypeOf((*MockWitness)(nil).AddNodeCheck), arg0, arg1, arg2)
}
