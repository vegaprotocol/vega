// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/processor (interfaces: DelegationEngine)

// Package mocks is a generated GoMock package.
package mocks

import (
	types "code.vegaprotocol.io/vega/types"
	num "code.vegaprotocol.io/vega/types/num"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDelegationEngine is a mock of DelegationEngine interface
type MockDelegationEngine struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationEngineMockRecorder
}

// MockDelegationEngineMockRecorder is the mock recorder for MockDelegationEngine
type MockDelegationEngineMockRecorder struct {
	mock *MockDelegationEngine
}

// NewMockDelegationEngine creates a new mock instance
func NewMockDelegationEngine(ctrl *gomock.Controller) *MockDelegationEngine {
	mock := &MockDelegationEngine{ctrl: ctrl}
	mock.recorder = &MockDelegationEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelegationEngine) EXPECT() *MockDelegationEngineMockRecorder {
	return m.recorder
}

// Delegate mocks base method
func (m *MockDelegationEngine) Delegate(arg0 context.Context, arg1, arg2 string, arg3 *num.Uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delegate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delegate indicates an expected call of Delegate
func (mr *MockDelegationEngineMockRecorder) Delegate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegate", reflect.TypeOf((*MockDelegationEngine)(nil).Delegate), arg0, arg1, arg2, arg3)
}

// Hash mocks base method
func (m *MockDelegationEngine) Hash() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Hash indicates an expected call of Hash
func (mr *MockDelegationEngineMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockDelegationEngine)(nil).Hash))
}

// ProcessEpochDelegations mocks base method
func (m *MockDelegationEngine) ProcessEpochDelegations(arg0 context.Context, arg1 types.Epoch) []*types.ValidatorData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEpochDelegations", arg0, arg1)
	ret0, _ := ret[0].([]*types.ValidatorData)
	return ret0
}

// ProcessEpochDelegations indicates an expected call of ProcessEpochDelegations
func (mr *MockDelegationEngineMockRecorder) ProcessEpochDelegations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEpochDelegations", reflect.TypeOf((*MockDelegationEngine)(nil).ProcessEpochDelegations), arg0, arg1)
}

// UndelegateAtEndOfEpoch mocks base method
func (m *MockDelegationEngine) UndelegateAtEndOfEpoch(arg0 context.Context, arg1, arg2 string, arg3 *num.Uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndelegateAtEndOfEpoch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndelegateAtEndOfEpoch indicates an expected call of UndelegateAtEndOfEpoch
func (mr *MockDelegationEngineMockRecorder) UndelegateAtEndOfEpoch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndelegateAtEndOfEpoch", reflect.TypeOf((*MockDelegationEngine)(nil).UndelegateAtEndOfEpoch), arg0, arg1, arg2, arg3)
}

// UndelegateNow mocks base method
func (m *MockDelegationEngine) UndelegateNow(arg0 context.Context, arg1, arg2 string, arg3 *num.Uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndelegateNow", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndelegateNow indicates an expected call of UndelegateNow
func (mr *MockDelegationEngineMockRecorder) UndelegateNow(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndelegateNow", reflect.TypeOf((*MockDelegationEngine)(nil).UndelegateNow), arg0, arg1, arg2, arg3)
}
