---
image: registry.gitlab.com/vega-protocol/devops-infra/cipipeline:1.11.5

variables:
  CGO_ENABLED: "0"
  GO111MODULE: "on"
  GOOS: linux
  GOARCH: amd64
  GOPATH: "${CI_PROJECT_DIR}/go"  # Can only cache files inside ${CI_PROJECT_DIR}
  # There's no recursive expansion of vars.
  BIN_DIR: "${CI_PROJECT_DIR}/go/bin"
  SRC_DIR: "${CI_PROJECT_DIR}/go/src"
  PKGMOD_DIR: "${CI_PROJECT_DIR}/go/pkg/mod"
  VENDOR_DIR: "${CI_PROJECT_DIR}/vendor"

cache:
  key: ${CI_COMMIT_REF_SLUG}  # one cache per branch
  paths:
    - ${PKGMOD_DIR}
    - ${VENDOR_DIR}

stages:
  - build
  - test
  - deploy

before_script:
  - mkdir -p "${BIN_DIR}" "${PKGMOD_DIR}" "${SRC_DIR}" "${VENDOR_DIR}"
  - for d in ${PKGMOD_DIR} ${VENDOR_DIR} ; do echo "There are $(find "$d" | wc -l) files/dirs in $d" ; done
  - find -maxdepth 1 -not -name . -and -not -name go -exec mv '{}' "${SRC_DIR}/" ';'
  - cd "${SRC_DIR}" || exit 1
  # The following git+ssh config enables accessing the quant repo.
  - git config --global url."git@gitlab.com:".insteadOf "https://gitlab.com/"
  - eval "$(ssh-agent -s)" ; mkdir -p ~/.ssh ; chmod 0700 ~/.ssh
  - if ! echo "${GITLAB_DEPLOY_SSH_PRIVATE_KEY}" | grep -q "BEGIN RSA PRIVATE KEY" ; then
      echo "Need env var GITLAB_DEPLOY_SSH_PRIVATE_KEY to have an RSA private key" ; exit 1 ; fi
  - if ! echo "${GITLAB_DEPLOY_SSH_KNOWN_HOSTS}" | grep -q "^gitlab.com ssh-rsa" ; then
      echo "Need env var GITLAB_DEPLOY_SSH_KNOWN_HOSTS to have one or more host keys" ; exit 1 ; fi
  - echo "${GITLAB_DEPLOY_SSH_PRIVATE_KEY}" >~/.ssh/id_rsa ; chmod 0600 ~/.ssh/id_rsa
  - echo "${GITLAB_DEPLOY_SSH_KNOWN_HOSTS}" >~/.ssh/known_hosts ; chmod 0644 ~/.ssh/known_hosts

after_script:
  - cd "${CI_PROJECT_DIR}" || exit 1
  - find "${SRC_DIR}" -maxdepth 1 -not -name src -exec mv '{}' ./ ';'
  - rmdir "${SRC_DIR}"
  - for d in ${PKGMOD_DIR} ${VENDOR_DIR} ; do echo "There are $(find "$d" | wc -l) files/dirs in $d" ; done
  - rm -rf ~/.ssh

build_vega:
  stage: build
  script:
    - make deps
    - make install
  artifacts:
    paths:
      - ${BIN_DIR}
    expire_in: 2 weeks

unit_tests:
  stage: test
  script:
    - make test

race_detector:
  stage: test
  script:
    - make race
  only:
    - /^(master$|develop$|release/|v[0-9])/

memory_sanitizer:
  stage: test
  script:
    - make msan
  only:
    - /^(master$|develop$|release/|v[0-9])/

code_coverage:
  stage: test
  script:
    - make coveragehtml
  only:
    - /^(master$|develop$|release/|v[0-9])/

lint_code:
  stage: test
  script:
    - export PATH="${PATH}:${BIN_DIR}"
    - make lint || true  # Ignore lint failure for now (see #196)
  only:
    - /^(master$|develop$|release/|v[0-9])/

autogen_checks:
  stage: test
  script:
    - code=0
    - make deps
    - make rest_check || code=1
    - make proto_check || code=1
    - make gqlgen_check || code=1
    - bash script/diff_graphqlschema.sh || code=1
    - exit "$code"

vet:
  stage: test
  script:
    - make vet
  only:
    - /^(master$|develop$|release/|v[0-9])/

push_to_devnet:
  stage: deploy
  script:
    - ./script/deploy.sh devnet vega
        "${BIN_DIR}/vega:/home/vega/current/:0755"
        "${BIN_DIR}/vegabench:/home/vega/current/:0755"
        "${BIN_DIR}/vegaccount:/home/vega/current/:0755"
        "${BIN_DIR}/vegastream:/home/vega/current/:0755"
    # Nasty auth hack. Single quotes to avoid yaml k:v pair.
    - 'for u in $VEGANET_USERS ; do
        echo -e "\n== $u ==" ;
        ${BIN_DIR}/vegaccount -addr geo.d.vega.xyz:3002 -traderid "$u" ;
        curl -s -XPOST -H "Content-type: application/json" -H "Authorization: Bearer $VEGA_AUTH_MASTERTOKEN"
          -d "{\"id\": \"$u\", \"password\": \"123\"}" https://auth.d.vega.xyz ;
        echo ;
      done'
  only:
    - /^develop$/  # VERY IMPORTANT: Only the develop branch should be deployed to devnet.

publish-docker:
  image: registry.gitlab.com/vega-protocol/devops-infra/cipipeline-docker:stable
  services:
    - docker:dind
  stage: deploy
  script:
    - 'for app in dummyriskmodel vega vegabench vegaccount vegastream ; do
        f="${BIN_DIR}/$app" ;
        if ! test -f "$f" ; then echo "Failed to find: $f" ; exit 1 ; fi ;
        cp -a "$f" . || exit 1 ;
      done'
    # Ignore docker fails (devops-infra#26)
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" registry.gitlab.com || exit 0
    - docker build -t "registry.gitlab.com/vega-protocol/trading-core:${CI_COMMIT_REF_SLUG}" -f Dockerfile.quick . || exit 0
    - docker push "registry.gitlab.com/vega-protocol/trading-core:${CI_COMMIT_REF_SLUG}" || exit 0
    - for app in vega vegabench ; do rm -f "./$app"; done
  only:
    - /^(master$|develop$|release/v[0-9])/
