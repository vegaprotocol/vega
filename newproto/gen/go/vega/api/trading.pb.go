// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: vega/api/trading.proto

package api

import (
	proto "code.vegaprotocol.io/vega/proto"
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubmitTransactionRequest_Type int32

const (
	SubmitTransactionRequest_TYPE_UNSPECIFIED SubmitTransactionRequest_Type = 0
	// The transaction will be submitted without waiting for response.
	SubmitTransactionRequest_TYPE_ASYNC SubmitTransactionRequest_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response.
	SubmitTransactionRequest_TYPE_SYNC SubmitTransactionRequest_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block.
	SubmitTransactionRequest_TYPE_COMMIT SubmitTransactionRequest_Type = 3
)

// Enum value maps for SubmitTransactionRequest_Type.
var (
	SubmitTransactionRequest_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_ASYNC",
		2: "TYPE_SYNC",
		3: "TYPE_COMMIT",
	}
	SubmitTransactionRequest_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_ASYNC":       1,
		"TYPE_SYNC":        2,
		"TYPE_COMMIT":      3,
	}
)

func (x SubmitTransactionRequest_Type) Enum() *SubmitTransactionRequest_Type {
	p := new(SubmitTransactionRequest_Type)
	*p = x
	return p
}

func (x SubmitTransactionRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitTransactionRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_api_trading_proto_enumTypes[0].Descriptor()
}

func (SubmitTransactionRequest_Type) Type() protoreflect.EnumType {
	return &file_vega_api_trading_proto_enumTypes[0]
}

func (x SubmitTransactionRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitTransactionRequest_Type.Descriptor instead.
func (SubmitTransactionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{2, 0}
}

// Request for a new event sent by the blockchain queue to be propagated on Vega.
type PropagateChainEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain event.
	Evt *proto.ChainEvent `protobuf:"bytes,1,opt,name=evt,proto3" json:"evt,omitempty"`
	// Public key.
	PubKey string `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	// Signature.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PropagateChainEventRequest) Reset() {
	*x = PropagateChainEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagateChainEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagateChainEventRequest) ProtoMessage() {}

func (x *PropagateChainEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagateChainEventRequest.ProtoReflect.Descriptor instead.
func (*PropagateChainEventRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{0}
}

func (x *PropagateChainEventRequest) GetEvt() *proto.ChainEvent {
	if x != nil {
		return x.Evt
	}
	return nil
}

func (x *PropagateChainEventRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *PropagateChainEventRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Response for a new event sent by the blockchain queue to be propagated on Vega.
type PropagateChainEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the event was accepted by the node.
	// Important - success does not mean that the event is confirmed by consensus.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PropagateChainEventResponse) Reset() {
	*x = PropagateChainEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagateChainEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagateChainEventResponse) ProtoMessage() {}

func (x *PropagateChainEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagateChainEventResponse.ProtoReflect.Descriptor instead.
func (*PropagateChainEventResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{1}
}

func (x *PropagateChainEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request for submitting a transaction on Vega.
type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain.
	Tx   *proto.SignedBundle           `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Type SubmitTransactionRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=api.SubmitTransactionRequest_Type" json:"type,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitTransactionRequest) GetTx() *proto.SignedBundle {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SubmitTransactionRequest) GetType() SubmitTransactionRequest_Type {
	if x != nil {
		return x.Type
	}
	return SubmitTransactionRequest_TYPE_UNSPECIFIED
}

// Response for submitting a transaction on Vega.
type SubmitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the transaction was accepted by the node.
	// Important - success does not mean that the transaction is confirmed by consensus.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SubmitTransactionResponse) Reset() {
	*x = SubmitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionResponse) ProtoMessage() {}

func (x *SubmitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitTransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request for preparing a withdrawal.
type PrepareWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An asset withdrawal.
	Withdraw *proto.WithdrawSubmission `protobuf:"bytes,1,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
}

func (x *PrepareWithdrawRequest) Reset() {
	*x = PrepareWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareWithdrawRequest) ProtoMessage() {}

func (x *PrepareWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareWithdrawRequest.ProtoReflect.Descriptor instead.
func (*PrepareWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{4}
}

func (x *PrepareWithdrawRequest) GetWithdraw() *proto.WithdrawSubmission {
	if x != nil {
		return x.Withdraw
	}
	return nil
}

// Response for preparing a withdrawal.
type PrepareWithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blob is an encoded representation of the withdrawal ready to sign using the Vega Wallet and then submit as a transaction.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *PrepareWithdrawResponse) Reset() {
	*x = PrepareWithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareWithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareWithdrawResponse) ProtoMessage() {}

func (x *PrepareWithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareWithdrawResponse.ProtoReflect.Descriptor instead.
func (*PrepareWithdrawResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{5}
}

func (x *PrepareWithdrawResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Response for preparing an order submission.
type PrepareSubmitOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blob is an encoded representation of the order submission ready to sign using the Vega Wallet and then submit as a transaction.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// Submission identifier (order reference).
	SubmitID string `protobuf:"bytes,2,opt,name=submitID,proto3" json:"submitID,omitempty"`
}

func (x *PrepareSubmitOrderResponse) Reset() {
	*x = PrepareSubmitOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareSubmitOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSubmitOrderResponse) ProtoMessage() {}

func (x *PrepareSubmitOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSubmitOrderResponse.ProtoReflect.Descriptor instead.
func (*PrepareSubmitOrderResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{6}
}

func (x *PrepareSubmitOrderResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *PrepareSubmitOrderResponse) GetSubmitID() string {
	if x != nil {
		return x.SubmitID
	}
	return ""
}

// Response for preparing an order cancellation.
type PrepareCancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blob is an encoded representation of the order cancellation ready to sign using the Vega Wallet and then submit as a transaction.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *PrepareCancelOrderResponse) Reset() {
	*x = PrepareCancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareCancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCancelOrderResponse) ProtoMessage() {}

func (x *PrepareCancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCancelOrderResponse.ProtoReflect.Descriptor instead.
func (*PrepareCancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{7}
}

func (x *PrepareCancelOrderResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Response for preparing an order amendment.
type PrepareAmendOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blob is an encoded representation of the order amendment ready to sign using the Vega Wallet and then submit as a transaction.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *PrepareAmendOrderResponse) Reset() {
	*x = PrepareAmendOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareAmendOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareAmendOrderResponse) ProtoMessage() {}

func (x *PrepareAmendOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareAmendOrderResponse.ProtoReflect.Descriptor instead.
func (*PrepareAmendOrderResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{8}
}

func (x *PrepareAmendOrderResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Request to submit a new order.
type SubmitOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order submission.
	Submission *proto.OrderSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *SubmitOrderRequest) Reset() {
	*x = SubmitOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOrderRequest) ProtoMessage() {}

func (x *SubmitOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOrderRequest.ProtoReflect.Descriptor instead.
func (*SubmitOrderRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitOrderRequest) GetSubmission() *proto.OrderSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

// Request to cancel an existing order.
type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order cancellation.
	Cancellation *proto.OrderCancellation `protobuf:"bytes,1,opt,name=cancellation,proto3" json:"cancellation,omitempty"`
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{10}
}

func (x *CancelOrderRequest) GetCancellation() *proto.OrderCancellation {
	if x != nil {
		return x.Cancellation
	}
	return nil
}

// Request to amend an existing order.
type AmendOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order amendment.
	Amendment *proto.OrderAmendment `protobuf:"bytes,1,opt,name=amendment,proto3" json:"amendment,omitempty"`
}

func (x *AmendOrderRequest) Reset() {
	*x = AmendOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendOrderRequest) ProtoMessage() {}

func (x *AmendOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendOrderRequest.ProtoReflect.Descriptor instead.
func (*AmendOrderRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{11}
}

func (x *AmendOrderRequest) GetAmendment() *proto.OrderAmendment {
	if x != nil {
		return x.Amendment
	}
	return nil
}

// Request for a list of all assets enabled on Vega.
type AssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssetsRequest) Reset() {
	*x = AssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsRequest) ProtoMessage() {}

func (x *AssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsRequest.ProtoReflect.Descriptor instead.
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{12}
}

// Response for a list of all assets enabled on Vega.
type AssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more assets.
	Assets []*proto.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *AssetsResponse) Reset() {
	*x = AssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsResponse) ProtoMessage() {}

func (x *AssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsResponse.ProtoReflect.Descriptor instead.
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{13}
}

func (x *AssetsResponse) GetAssets() []*proto.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

// Request for an asset given an asset identifier.
type AssetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier. Required field.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *AssetByIDRequest) Reset() {
	*x = AssetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetByIDRequest) ProtoMessage() {}

func (x *AssetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetByIDRequest.ProtoReflect.Descriptor instead.
func (*AssetByIDRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{14}
}

func (x *AssetByIDRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// Response for an asset given an asset identifier.
type AssetByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An asset record, if found.
	Asset *proto.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *AssetByIDResponse) Reset() {
	*x = AssetByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetByIDResponse) ProtoMessage() {}

func (x *AssetByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetByIDResponse.ProtoReflect.Descriptor instead.
func (*AssetByIDResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{15}
}

func (x *AssetByIDResponse) GetAsset() *proto.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

// Request to specify the identifier of the resource we want to retrieve aggregated signatures for.
type GetNodeSignaturesAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource identifier. Required field.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetNodeSignaturesAggregateRequest) Reset() {
	*x = GetNodeSignaturesAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSignaturesAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSignaturesAggregateRequest) ProtoMessage() {}

func (x *GetNodeSignaturesAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSignaturesAggregateRequest.ProtoReflect.Descriptor instead.
func (*GetNodeSignaturesAggregateRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{16}
}

func (x *GetNodeSignaturesAggregateRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// Response to specify the identifier of the resource we want to retrieve aggregated signatures for.
type GetNodeSignaturesAggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more signatures.
	Signatures []*proto.NodeSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *GetNodeSignaturesAggregateResponse) Reset() {
	*x = GetNodeSignaturesAggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSignaturesAggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSignaturesAggregateResponse) ProtoMessage() {}

func (x *GetNodeSignaturesAggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSignaturesAggregateResponse.ProtoReflect.Descriptor instead.
func (*GetNodeSignaturesAggregateResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{17}
}

func (x *GetNodeSignaturesAggregateResponse) GetSignatures() []*proto.NodeSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Optional proposal state.
type OptionalProposalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal state value.
	Value proto.Proposal_State `protobuf:"varint,1,opt,name=value,proto3,enum=vega.Proposal_State" json:"value,omitempty"`
}

func (x *OptionalProposalState) Reset() {
	*x = OptionalProposalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalProposalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalProposalState) ProtoMessage() {}

func (x *OptionalProposalState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalProposalState.ProtoReflect.Descriptor instead.
func (*OptionalProposalState) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{18}
}

func (x *OptionalProposalState) GetValue() proto.Proposal_State {
	if x != nil {
		return x.Value
	}
	return proto.Proposal_STATE_UNSPECIFIED
}

// Request for a list of proposals.
type GetProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state.
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=selectInState,proto3" json:"selectInState,omitempty"`
}

func (x *GetProposalsRequest) Reset() {
	*x = GetProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsRequest) ProtoMessage() {}

func (x *GetProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetProposalsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{19}
}

func (x *GetProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of proposals.
type GetProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data.
	Data []*proto.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalsResponse) Reset() {
	*x = GetProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsResponse) ProtoMessage() {}

func (x *GetProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetProposalsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{20}
}

func (x *GetProposalsResponse) GetData() []*proto.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of proposals for a party.
type GetProposalsByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Optional proposal state.
	SelectInState *OptionalProposalState `protobuf:"bytes,2,opt,name=selectInState,proto3" json:"selectInState,omitempty"`
}

func (x *GetProposalsByPartyRequest) Reset() {
	*x = GetProposalsByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsByPartyRequest) ProtoMessage() {}

func (x *GetProposalsByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsByPartyRequest.ProtoReflect.Descriptor instead.
func (*GetProposalsByPartyRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{21}
}

func (x *GetProposalsByPartyRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *GetProposalsByPartyRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of proposals for a party.
type GetProposalsByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data.
	Data []*proto.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalsByPartyResponse) Reset() {
	*x = GetProposalsByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsByPartyResponse) ProtoMessage() {}

func (x *GetProposalsByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsByPartyResponse.ProtoReflect.Descriptor instead.
func (*GetProposalsByPartyResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{22}
}

func (x *GetProposalsByPartyResponse) GetData() []*proto.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of votes for a party.
type GetVotesByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *GetVotesByPartyRequest) Reset() {
	*x = GetVotesByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVotesByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesByPartyRequest) ProtoMessage() {}

func (x *GetVotesByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesByPartyRequest.ProtoReflect.Descriptor instead.
func (*GetVotesByPartyRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{23}
}

func (x *GetVotesByPartyRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// Response for a list of votes for a party.
type GetVotesByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more votes.
	Votes []*proto.Vote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *GetVotesByPartyResponse) Reset() {
	*x = GetVotesByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVotesByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesByPartyResponse) ProtoMessage() {}

func (x *GetVotesByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesByPartyResponse.ProtoReflect.Descriptor instead.
func (*GetVotesByPartyResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{24}
}

func (x *GetVotesByPartyResponse) GetVotes() []*proto.Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

// Request for a list of new market proposals.
type GetNewMarketProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state.
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=selectInState,proto3" json:"selectInState,omitempty"`
}

func (x *GetNewMarketProposalsRequest) Reset() {
	*x = GetNewMarketProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewMarketProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewMarketProposalsRequest) ProtoMessage() {}

func (x *GetNewMarketProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewMarketProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNewMarketProposalsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{25}
}

func (x *GetNewMarketProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of new market proposals.
type GetNewMarketProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data.
	Data []*proto.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNewMarketProposalsResponse) Reset() {
	*x = GetNewMarketProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewMarketProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewMarketProposalsResponse) ProtoMessage() {}

func (x *GetNewMarketProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewMarketProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNewMarketProposalsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{26}
}

func (x *GetNewMarketProposalsResponse) GetData() []*proto.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of update market proposals.
type GetUpdateMarketProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Proposal state.
	SelectInState *OptionalProposalState `protobuf:"bytes,2,opt,name=selectInState,proto3" json:"selectInState,omitempty"`
}

func (x *GetUpdateMarketProposalsRequest) Reset() {
	*x = GetUpdateMarketProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateMarketProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateMarketProposalsRequest) ProtoMessage() {}

func (x *GetUpdateMarketProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateMarketProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetUpdateMarketProposalsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{27}
}

func (x *GetUpdateMarketProposalsRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *GetUpdateMarketProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of update market proposals.
type GetUpdateMarketProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data.
	Data []*proto.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUpdateMarketProposalsResponse) Reset() {
	*x = GetUpdateMarketProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateMarketProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateMarketProposalsResponse) ProtoMessage() {}

func (x *GetUpdateMarketProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateMarketProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetUpdateMarketProposalsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{28}
}

func (x *GetUpdateMarketProposalsResponse) GetData() []*proto.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of network parameter proposals.
type GetNetworkParametersProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state.
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=selectInState,proto3" json:"selectInState,omitempty"`
}

func (x *GetNetworkParametersProposalsRequest) Reset() {
	*x = GetNetworkParametersProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkParametersProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkParametersProposalsRequest) ProtoMessage() {}

func (x *GetNetworkParametersProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkParametersProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkParametersProposalsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{29}
}

func (x *GetNetworkParametersProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of network parameter proposals.
type GetNetworkParametersProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data.
	Data []*proto.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNetworkParametersProposalsResponse) Reset() {
	*x = GetNetworkParametersProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkParametersProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkParametersProposalsResponse) ProtoMessage() {}

func (x *GetNetworkParametersProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkParametersProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkParametersProposalsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{30}
}

func (x *GetNetworkParametersProposalsResponse) GetData() []*proto.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of new asset proposals.
type GetNewAssetProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state.
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=selectInState,proto3" json:"selectInState,omitempty"`
}

func (x *GetNewAssetProposalsRequest) Reset() {
	*x = GetNewAssetProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAssetProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAssetProposalsRequest) ProtoMessage() {}

func (x *GetNewAssetProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAssetProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNewAssetProposalsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{31}
}

func (x *GetNewAssetProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of new asset proposals.
type GetNewAssetProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data.
	Data []*proto.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNewAssetProposalsResponse) Reset() {
	*x = GetNewAssetProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAssetProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAssetProposalsResponse) ProtoMessage() {}

func (x *GetNewAssetProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAssetProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNewAssetProposalsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{32}
}

func (x *GetNewAssetProposalsResponse) GetData() []*proto.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a governance proposal given a proposal identifier.
type GetProposalByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal identifier. Required field.
	ProposalID string `protobuf:"bytes,1,opt,name=proposalID,proto3" json:"proposalID,omitempty"`
}

func (x *GetProposalByIDRequest) Reset() {
	*x = GetProposalByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByIDRequest) ProtoMessage() {}

func (x *GetProposalByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByIDRequest.ProtoReflect.Descriptor instead.
func (*GetProposalByIDRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{33}
}

func (x *GetProposalByIDRequest) GetProposalID() string {
	if x != nil {
		return x.ProposalID
	}
	return ""
}

// Response for a governance proposal given a proposal identifier.
type GetProposalByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Governance data, if found.
	Data *proto.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalByIDResponse) Reset() {
	*x = GetProposalByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByIDResponse) ProtoMessage() {}

func (x *GetProposalByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByIDResponse.ProtoReflect.Descriptor instead.
func (*GetProposalByIDResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{34}
}

func (x *GetProposalByIDResponse) GetData() *proto.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a governance proposal given a proposal reference.
type GetProposalByReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal reference. Required field.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *GetProposalByReferenceRequest) Reset() {
	*x = GetProposalByReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByReferenceRequest) ProtoMessage() {}

func (x *GetProposalByReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetProposalByReferenceRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{35}
}

func (x *GetProposalByReferenceRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Response for a governance proposal given a proposal reference.
type GetProposalByReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Governance data, if found.
	Data *proto.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalByReferenceResponse) Reset() {
	*x = GetProposalByReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByReferenceResponse) ProtoMessage() {}

func (x *GetProposalByReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetProposalByReferenceResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{36}
}

func (x *GetProposalByReferenceResponse) GetData() *proto.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to subscribe to a stream of governance proposals for a party.
type ObservePartyProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *ObservePartyProposalsRequest) Reset() {
	*x = ObservePartyProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyProposalsRequest) ProtoMessage() {}

func (x *ObservePartyProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyProposalsRequest.ProtoReflect.Descriptor instead.
func (*ObservePartyProposalsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{37}
}

func (x *ObservePartyProposalsRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// Request to subscribe to a stream of governance votes for a proposal.
type ObserveProposalVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal identifier. Required field.
	ProposalID string `protobuf:"bytes,1,opt,name=proposalID,proto3" json:"proposalID,omitempty"`
}

func (x *ObserveProposalVotesRequest) Reset() {
	*x = ObserveProposalVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveProposalVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveProposalVotesRequest) ProtoMessage() {}

func (x *ObserveProposalVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveProposalVotesRequest.ProtoReflect.Descriptor instead.
func (*ObserveProposalVotesRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{38}
}

func (x *ObserveProposalVotesRequest) GetProposalID() string {
	if x != nil {
		return x.ProposalID
	}
	return ""
}

// Request to subscribe to a stream of governance votes for a party.
type ObservePartyVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *ObservePartyVotesRequest) Reset() {
	*x = ObservePartyVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyVotesRequest) ProtoMessage() {}

func (x *ObservePartyVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyVotesRequest.ProtoReflect.Descriptor instead.
func (*ObservePartyVotesRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{39}
}

func (x *ObservePartyVotesRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// Request to subscribe to a stream of MarginLevels data matching the given party identifier.
// Optionally, the list can be additionally filtered by market.
type MarginLevelsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *MarginLevelsSubscribeRequest) Reset() {
	*x = MarginLevelsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsSubscribeRequest) ProtoMessage() {}

func (x *MarginLevelsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarginLevelsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{40}
}

func (x *MarginLevelsSubscribeRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *MarginLevelsSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Request for margin levels for a party.
type MarginLevelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *MarginLevelsRequest) Reset() {
	*x = MarginLevelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsRequest) ProtoMessage() {}

func (x *MarginLevelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsRequest.ProtoReflect.Descriptor instead.
func (*MarginLevelsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{41}
}

func (x *MarginLevelsRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *MarginLevelsRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Response for margin levels for a party.
type MarginLevelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more margin levels.
	MarginLevels []*proto.MarginLevels `protobuf:"bytes,1,rep,name=marginLevels,proto3" json:"marginLevels,omitempty"`
}

func (x *MarginLevelsResponse) Reset() {
	*x = MarginLevelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsResponse) ProtoMessage() {}

func (x *MarginLevelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsResponse.ProtoReflect.Descriptor instead.
func (*MarginLevelsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{42}
}

func (x *MarginLevelsResponse) GetMarginLevels() []*proto.MarginLevels {
	if x != nil {
		return x.MarginLevels
	}
	return nil
}

// Request to subscribe to a stream of MarketsData.
// Optionally, the list can be additionally filtered by market.
type MarketsDataSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *MarketsDataSubscribeRequest) Reset() {
	*x = MarketsDataSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataSubscribeRequest) ProtoMessage() {}

func (x *MarketsDataSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketsDataSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{43}
}

func (x *MarketsDataSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Request for market data for a market.
type MarketDataByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *MarketDataByIDRequest) Reset() {
	*x = MarketDataByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataByIDRequest) ProtoMessage() {}

func (x *MarketDataByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataByIDRequest.ProtoReflect.Descriptor instead.
func (*MarketDataByIDRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{44}
}

func (x *MarketDataByIDRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Response for market data for a market.
type MarketDataByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market data, if found.
	MarketData *proto.MarketData `protobuf:"bytes,1,opt,name=marketData,proto3" json:"marketData,omitempty"`
}

func (x *MarketDataByIDResponse) Reset() {
	*x = MarketDataByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataByIDResponse) ProtoMessage() {}

func (x *MarketDataByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataByIDResponse.ProtoReflect.Descriptor instead.
func (*MarketDataByIDResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{45}
}

func (x *MarketDataByIDResponse) GetMarketData() *proto.MarketData {
	if x != nil {
		return x.MarketData
	}
	return nil
}

// Response for market data.
type MarketsDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more market data.
	MarketsData []*proto.MarketData `protobuf:"bytes,1,rep,name=marketsData,proto3" json:"marketsData,omitempty"`
}

func (x *MarketsDataResponse) Reset() {
	*x = MarketsDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataResponse) ProtoMessage() {}

func (x *MarketsDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataResponse.ProtoReflect.Descriptor instead.
func (*MarketsDataResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{46}
}

func (x *MarketsDataResponse) GetMarketsData() []*proto.MarketData {
	if x != nil {
		return x.MarketsData
	}
	return nil
}

// Request for the latest trade that occurred on Vega for a given market.
type LastTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *LastTradeRequest) Reset() {
	*x = LastTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastTradeRequest) ProtoMessage() {}

func (x *LastTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastTradeRequest.ProtoReflect.Descriptor instead.
func (*LastTradeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{47}
}

func (x *LastTradeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Response for the latest trade that occurred on Vega for a given market.
type LastTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A trade, if found.
	Trade *proto.Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *LastTradeResponse) Reset() {
	*x = LastTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastTradeResponse) ProtoMessage() {}

func (x *LastTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastTradeResponse.ProtoReflect.Descriptor instead.
func (*LastTradeResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{48}
}

func (x *LastTradeResponse) GetTrade() *proto.Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

// Request for a market given a market identifier.
type MarketByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *MarketByIDRequest) Reset() {
	*x = MarketByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByIDRequest) ProtoMessage() {}

func (x *MarketByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByIDRequest.ProtoReflect.Descriptor instead.
func (*MarketByIDRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{49}
}

func (x *MarketByIDRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Response for a market given a market identifier.
type MarketByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A market, if found.
	Market *proto.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *MarketByIDResponse) Reset() {
	*x = MarketByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByIDResponse) ProtoMessage() {}

func (x *MarketByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByIDResponse.ProtoReflect.Descriptor instead.
func (*MarketByIDResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{50}
}

func (x *MarketByIDResponse) GetMarket() *proto.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

// Request for a party given a party identifier.
type PartyByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *PartyByIDRequest) Reset() {
	*x = PartyByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyByIDRequest) ProtoMessage() {}

func (x *PartyByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyByIDRequest.ProtoReflect.Descriptor instead.
func (*PartyByIDRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{51}
}

func (x *PartyByIDRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// Response for a party given a party identifier.
type PartyByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A party, if found.
	Party *proto.Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *PartyByIDResponse) Reset() {
	*x = PartyByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyByIDResponse) ProtoMessage() {}

func (x *PartyByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyByIDResponse.ProtoReflect.Descriptor instead.
func (*PartyByIDResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{52}
}

func (x *PartyByIDResponse) GetParty() *proto.Party {
	if x != nil {
		return x.Party
	}
	return nil
}

// Response to a request for a list of parties.
type PartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more parties.
	Parties []*proto.Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *PartiesResponse) Reset() {
	*x = PartiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiesResponse) ProtoMessage() {}

func (x *PartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiesResponse.ProtoReflect.Descriptor instead.
func (*PartiesResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{53}
}

func (x *PartiesResponse) GetParties() []*proto.Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

// Request for a list of trades relating to the given party.
// Optionally, the list can be additionally filtered for trades by market.
type TradesByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Pagination controls.
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *TradesByPartyRequest) Reset() {
	*x = TradesByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByPartyRequest) ProtoMessage() {}

func (x *TradesByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByPartyRequest.ProtoReflect.Descriptor instead.
func (*TradesByPartyRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{54}
}

func (x *TradesByPartyRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *TradesByPartyRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *TradesByPartyRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of trades relating to a party.
type TradesByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades.
	Trades []*proto.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByPartyResponse) Reset() {
	*x = TradesByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByPartyResponse) ProtoMessage() {}

func (x *TradesByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByPartyResponse.ProtoReflect.Descriptor instead.
func (*TradesByPartyResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{55}
}

func (x *TradesByPartyResponse) GetTrades() []*proto.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request for a list of trades related to an order.
type TradesByOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier. Required field.
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *TradesByOrderRequest) Reset() {
	*x = TradesByOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByOrderRequest) ProtoMessage() {}

func (x *TradesByOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByOrderRequest.ProtoReflect.Descriptor instead.
func (*TradesByOrderRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{56}
}

func (x *TradesByOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

// Response for a list of trades related to an order.
type TradesByOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades.
	Trades []*proto.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByOrderResponse) Reset() {
	*x = TradesByOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByOrderResponse) ProtoMessage() {}

func (x *TradesByOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByOrderResponse.ProtoReflect.Descriptor instead.
func (*TradesByOrderResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{57}
}

func (x *TradesByOrderResponse) GetTrades() []*proto.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request to subscribe to a stream of (Accounts)[#vega.Account].
type AccountsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier.
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Asset identifier.
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// Account type to subscribe to. Required field.
	Type proto.AccountType `protobuf:"varint,4,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
}

func (x *AccountsSubscribeRequest) Reset() {
	*x = AccountsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsSubscribeRequest) ProtoMessage() {}

func (x *AccountsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*AccountsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{58}
}

func (x *AccountsSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetType() proto.AccountType {
	if x != nil {
		return x.Type
	}
	return proto.AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

// Request to subscribe to a stream of (Orders)[#vega.Order].
type OrdersSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier.
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *OrdersSubscribeRequest) Reset() {
	*x = OrdersSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersSubscribeRequest) ProtoMessage() {}

func (x *OrdersSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersSubscribeRequest.ProtoReflect.Descriptor instead.
func (*OrdersSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{59}
}

func (x *OrdersSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *OrdersSubscribeRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// Request to subscribe to a stream of (Trades)[#vega.Trade].
type TradesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier.
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *TradesSubscribeRequest) Reset() {
	*x = TradesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesSubscribeRequest) ProtoMessage() {}

func (x *TradesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*TradesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{60}
}

func (x *TradesSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *TradesSubscribeRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// Request to subscribe to a stream of (Candles)[#vega.Candle].
type CandlesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Time interval for the candles. Required field.
	Interval proto.Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
}

func (x *CandlesSubscribeRequest) Reset() {
	*x = CandlesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesSubscribeRequest) ProtoMessage() {}

func (x *CandlesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*CandlesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{61}
}

func (x *CandlesSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *CandlesSubscribeRequest) GetInterval() proto.Interval {
	if x != nil {
		return x.Interval
	}
	return proto.Interval_INTERVAL_UNSPECIFIED
}

// Request to subscribe to a stream of (MarketDepth)[#vega.MarketDepth] data.
type MarketDepthSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *MarketDepthSubscribeRequest) Reset() {
	*x = MarketDepthSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthSubscribeRequest) ProtoMessage() {}

func (x *MarketDepthSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{62}
}

func (x *MarketDepthSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Request to subscribe to a stream of (MarketDepth Update)[#vega.MarketDepthUpdate] data.
type MarketDepthUpdatesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *MarketDepthUpdatesSubscribeRequest) Reset() {
	*x = MarketDepthUpdatesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdatesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdatesSubscribeRequest) ProtoMessage() {}

func (x *MarketDepthUpdatesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdatesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdatesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{63}
}

func (x *MarketDepthUpdatesSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Request to subscribe to a stream of (Positions)[#vega.Position].
type PositionsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Optional field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier. Optional field.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *PositionsSubscribeRequest) Reset() {
	*x = PositionsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSubscribeRequest) ProtoMessage() {}

func (x *PositionsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*PositionsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{64}
}

func (x *PositionsSubscribeRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *PositionsSubscribeRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Request for a list of orders for a market.
type OrdersByMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Optional pagination controls.
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrdersByMarketRequest) Reset() {
	*x = OrdersByMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByMarketRequest) ProtoMessage() {}

func (x *OrdersByMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByMarketRequest.ProtoReflect.Descriptor instead.
func (*OrdersByMarketRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{65}
}

func (x *OrdersByMarketRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *OrdersByMarketRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of orders for a market.
type OrdersByMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders.
	Orders []*proto.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersByMarketResponse) Reset() {
	*x = OrdersByMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByMarketResponse) ProtoMessage() {}

func (x *OrdersByMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByMarketResponse.ProtoReflect.Descriptor instead.
func (*OrdersByMarketResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{66}
}

func (x *OrdersByMarketResponse) GetOrders() []*proto.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request for a list of orders for a party.
type OrdersByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Pagination controls.
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrdersByPartyRequest) Reset() {
	*x = OrdersByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByPartyRequest) ProtoMessage() {}

func (x *OrdersByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByPartyRequest.ProtoReflect.Descriptor instead.
func (*OrdersByPartyRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{67}
}

func (x *OrdersByPartyRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *OrdersByPartyRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of orders for a party.
type OrdersByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders.
	Orders []*proto.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersByPartyResponse) Reset() {
	*x = OrdersByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByPartyResponse) ProtoMessage() {}

func (x *OrdersByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByPartyResponse.ProtoReflect.Descriptor instead.
func (*OrdersByPartyResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{68}
}

func (x *OrdersByPartyResponse) GetOrders() []*proto.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request for an order on a market given an order identifier.
type OrderByMarketAndIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Order identifier. Required field.
	OrderID string `protobuf:"bytes,2,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *OrderByMarketAndIdRequest) Reset() {
	*x = OrderByMarketAndIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByMarketAndIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByMarketAndIdRequest) ProtoMessage() {}

func (x *OrderByMarketAndIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByMarketAndIdRequest.ProtoReflect.Descriptor instead.
func (*OrderByMarketAndIdRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{69}
}

func (x *OrderByMarketAndIdRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *OrderByMarketAndIdRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

// Response for an order on a market given an order identifier.
type OrderByMarketAndIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order, if found.
	Order *proto.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderByMarketAndIdResponse) Reset() {
	*x = OrderByMarketAndIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByMarketAndIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByMarketAndIdResponse) ProtoMessage() {}

func (x *OrderByMarketAndIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByMarketAndIdResponse.ProtoReflect.Descriptor instead.
func (*OrderByMarketAndIdResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{70}
}

func (x *OrderByMarketAndIdResponse) GetOrder() *proto.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Request for an order given an order reference.
type OrderByReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique reference. Required field.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *OrderByReferenceRequest) Reset() {
	*x = OrderByReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByReferenceRequest) ProtoMessage() {}

func (x *OrderByReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByReferenceRequest.ProtoReflect.Descriptor instead.
func (*OrderByReferenceRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{71}
}

func (x *OrderByReferenceRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Response for an order given an order reference.
type OrderByReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order, if found.
	Order *proto.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderByReferenceResponse) Reset() {
	*x = OrderByReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByReferenceResponse) ProtoMessage() {}

func (x *OrderByReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByReferenceResponse.ProtoReflect.Descriptor instead.
func (*OrderByReferenceResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{72}
}

func (x *OrderByReferenceResponse) GetOrder() *proto.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Response for a list of markets on Vega.
type MarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more markets.
	Markets []*proto.Market `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *MarketsResponse) Reset() {
	*x = MarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsResponse) ProtoMessage() {}

func (x *MarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsResponse.ProtoReflect.Descriptor instead.
func (*MarketsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{73}
}

func (x *MarketsResponse) GetMarkets() []*proto.Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

// Request for a list of candles for a market at an interval.
type CandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Timestamp to retrieve candles since, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`. Required field.
	SinceTimestamp int64 `protobuf:"varint,2,opt,name=sinceTimestamp,proto3" json:"sinceTimestamp,omitempty"`
	// Time interval for the candles. Required field.
	Interval proto.Interval `protobuf:"varint,3,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
}

func (x *CandlesRequest) Reset() {
	*x = CandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesRequest) ProtoMessage() {}

func (x *CandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesRequest.ProtoReflect.Descriptor instead.
func (*CandlesRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{74}
}

func (x *CandlesRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *CandlesRequest) GetSinceTimestamp() int64 {
	if x != nil {
		return x.SinceTimestamp
	}
	return 0
}

func (x *CandlesRequest) GetInterval() proto.Interval {
	if x != nil {
		return x.Interval
	}
	return proto.Interval_INTERVAL_UNSPECIFIED
}

// Response for a list of candles for a market at an interval.
type CandlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more candles.
	Candles []*proto.Candle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
}

func (x *CandlesResponse) Reset() {
	*x = CandlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesResponse) ProtoMessage() {}

func (x *CandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesResponse.ProtoReflect.Descriptor instead.
func (*CandlesResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{75}
}

func (x *CandlesResponse) GetCandles() []*proto.Candle {
	if x != nil {
		return x.Candles
	}
	return nil
}

// Request for the market depth/order book price levels on a market.
// Optionally, a maximum depth can be set to limit the number of levels returned.
type MarketDepthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Max depth limits the number of levels returned. Default is 0, which returns all levels.
	MaxDepth uint64 `protobuf:"varint,2,opt,name=maxDepth,proto3" json:"maxDepth,omitempty"`
}

func (x *MarketDepthRequest) Reset() {
	*x = MarketDepthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthRequest) ProtoMessage() {}

func (x *MarketDepthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{76}
}

func (x *MarketDepthRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *MarketDepthRequest) GetMaxDepth() uint64 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

// Response for the market depth/order book price levels on a market.
type MarketDepthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Zero or more price levels for the buy side of the market depth data.
	Buy []*proto.PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Zero or more price levels for the sell side of the market depth data.
	Sell []*proto.PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Last trade recorded on Vega at the time of retrieving the `MarketDepthResponse`.
	LastTrade *proto.Trade `protobuf:"bytes,4,opt,name=lastTrade,proto3" json:"lastTrade,omitempty"`
	// Sequence number incremented after each update
	SequenceNumber uint64 `protobuf:"varint,5,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
}

func (x *MarketDepthResponse) Reset() {
	*x = MarketDepthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthResponse) ProtoMessage() {}

func (x *MarketDepthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthResponse.ProtoReflect.Descriptor instead.
func (*MarketDepthResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{77}
}

func (x *MarketDepthResponse) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *MarketDepthResponse) GetBuy() []*proto.PriceLevel {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *MarketDepthResponse) GetSell() []*proto.PriceLevel {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *MarketDepthResponse) GetLastTrade() *proto.Trade {
	if x != nil {
		return x.LastTrade
	}
	return nil
}

func (x *MarketDepthResponse) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Request for a list of trades on a market.
type TradesByMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Pagination controls.
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *TradesByMarketRequest) Reset() {
	*x = TradesByMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByMarketRequest) ProtoMessage() {}

func (x *TradesByMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByMarketRequest.ProtoReflect.Descriptor instead.
func (*TradesByMarketRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{78}
}

func (x *TradesByMarketRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *TradesByMarketRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of trades on a market.
type TradesByMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades.
	Trades []*proto.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByMarketResponse) Reset() {
	*x = TradesByMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByMarketResponse) ProtoMessage() {}

func (x *TradesByMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByMarketResponse.ProtoReflect.Descriptor instead.
func (*TradesByMarketResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{79}
}

func (x *TradesByMarketResponse) GetTrades() []*proto.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request for a list of positions for a party.
// Optionally, if a market identifier is set, the results will be filtered for that market only.
type PositionsByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
}

func (x *PositionsByPartyRequest) Reset() {
	*x = PositionsByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsByPartyRequest) ProtoMessage() {}

func (x *PositionsByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsByPartyRequest.ProtoReflect.Descriptor instead.
func (*PositionsByPartyRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{80}
}

func (x *PositionsByPartyRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *PositionsByPartyRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

// Response for a list of positions for a party.
type PositionsByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more positions.
	Positions []*proto.Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *PositionsByPartyResponse) Reset() {
	*x = PositionsByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsByPartyResponse) ProtoMessage() {}

func (x *PositionsByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsByPartyResponse.ProtoReflect.Descriptor instead.
func (*PositionsByPartyResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{81}
}

func (x *PositionsByPartyResponse) GetPositions() []*proto.Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime".
type VegaTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp representation of current VegaTime.
	// Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *VegaTimeResponse) Reset() {
	*x = VegaTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VegaTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VegaTimeResponse) ProtoMessage() {}

func (x *VegaTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VegaTimeResponse.ProtoReflect.Descriptor instead.
func (*VegaTimeResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{82}
}

func (x *VegaTimeResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Pagination controls.
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skip the number of records specified. Default is 0.
	Skip uint64 `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit the number of returned records to the value specified. Default is 50.
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Descending reverses the order of the records returned.
	// Default is true, if false the results will be returned in ascending order.
	Descending bool `protobuf:"varint,3,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{83}
}

func (x *Pagination) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *Pagination) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

// A stream of orders.
type OrdersStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders.
	Orders []*proto.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersStream) Reset() {
	*x = OrdersStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersStream) ProtoMessage() {}

func (x *OrdersStream) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersStream.ProtoReflect.Descriptor instead.
func (*OrdersStream) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{84}
}

func (x *OrdersStream) GetOrders() []*proto.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// A stream of trades.
type TradesStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades.
	Trades []*proto.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesStream) Reset() {
	*x = TradesStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesStream) ProtoMessage() {}

func (x *TradesStream) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesStream.ProtoReflect.Descriptor instead.
func (*TradesStream) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{85}
}

func (x *TradesStream) GetTrades() []*proto.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request for a list of accounts for a party.
type PartyAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Account type. Required field.
	Type proto.AccountType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	// Asset identifier.
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *PartyAccountsRequest) Reset() {
	*x = PartyAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAccountsRequest) ProtoMessage() {}

func (x *PartyAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAccountsRequest.ProtoReflect.Descriptor instead.
func (*PartyAccountsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{86}
}

func (x *PartyAccountsRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *PartyAccountsRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *PartyAccountsRequest) GetType() proto.AccountType {
	if x != nil {
		return x.Type
	}
	return proto.AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *PartyAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of accounts for a party.
type PartyAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more accounts.
	Accounts []*proto.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *PartyAccountsResponse) Reset() {
	*x = PartyAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAccountsResponse) ProtoMessage() {}

func (x *PartyAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAccountsResponse.ProtoReflect.Descriptor instead.
func (*PartyAccountsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{87}
}

func (x *PartyAccountsResponse) GetAccounts() []*proto.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request for a list of accounts for a market.
type MarketAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Asset identifier.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *MarketAccountsRequest) Reset() {
	*x = MarketAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketAccountsRequest) ProtoMessage() {}

func (x *MarketAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketAccountsRequest.ProtoReflect.Descriptor instead.
func (*MarketAccountsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{88}
}

func (x *MarketAccountsRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *MarketAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of accounts for a market.
type MarketAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more accounts.
	Accounts []*proto.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *MarketAccountsResponse) Reset() {
	*x = MarketAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketAccountsResponse) ProtoMessage() {}

func (x *MarketAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketAccountsResponse.ProtoReflect.Descriptor instead.
func (*MarketAccountsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{89}
}

func (x *MarketAccountsResponse) GetAccounts() []*proto.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request for a list of infrastructure fee accounts.
type FeeInfrastructureAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier. Required field.
	// Set to an empty string to return all accounts.
	// Set to an asset ID to return a single infrastructure fee account for a given asset.
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *FeeInfrastructureAccountsRequest) Reset() {
	*x = FeeInfrastructureAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfrastructureAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfrastructureAccountsRequest) ProtoMessage() {}

func (x *FeeInfrastructureAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfrastructureAccountsRequest.ProtoReflect.Descriptor instead.
func (*FeeInfrastructureAccountsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{90}
}

func (x *FeeInfrastructureAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of infrastructure fee accounts.
type FeeInfrastructureAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more infrastructure fee accounts.
	Accounts []*proto.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *FeeInfrastructureAccountsResponse) Reset() {
	*x = FeeInfrastructureAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfrastructureAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfrastructureAccountsResponse) ProtoMessage() {}

func (x *FeeInfrastructureAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfrastructureAccountsResponse.ProtoReflect.Descriptor instead.
func (*FeeInfrastructureAccountsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{91}
}

func (x *FeeInfrastructureAccountsResponse) GetAccounts() []*proto.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request to prepare a governance proposal.
type PrepareProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field.
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Unique reference.
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	// Proposal terms. Required field.
	Proposal *proto.ProposalTerms `protobuf:"bytes,3,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *PrepareProposalRequest) Reset() {
	*x = PrepareProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareProposalRequest) ProtoMessage() {}

func (x *PrepareProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareProposalRequest.ProtoReflect.Descriptor instead.
func (*PrepareProposalRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{92}
}

func (x *PrepareProposalRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *PrepareProposalRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PrepareProposalRequest) GetProposal() *proto.ProposalTerms {
	if x != nil {
		return x.Proposal
	}
	return nil
}

// Response to prepare a governance proposal.
type PrepareProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blob is an encoded representation of the proposal ready to sign using the Vega Wallet and then submit as a transaction.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// A copy of the prepared proposal.
	PendingProposal *proto.Proposal `protobuf:"bytes,2,opt,name=pendingProposal,proto3" json:"pendingProposal,omitempty"`
}

func (x *PrepareProposalResponse) Reset() {
	*x = PrepareProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareProposalResponse) ProtoMessage() {}

func (x *PrepareProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareProposalResponse.ProtoReflect.Descriptor instead.
func (*PrepareProposalResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{93}
}

func (x *PrepareProposalResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *PrepareProposalResponse) GetPendingProposal() *proto.Proposal {
	if x != nil {
		return x.PendingProposal
	}
	return nil
}

// Request to prepare a governance vote.
type PrepareVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vote. Required field.
	Vote *proto.Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *PrepareVoteRequest) Reset() {
	*x = PrepareVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareVoteRequest) ProtoMessage() {}

func (x *PrepareVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareVoteRequest.ProtoReflect.Descriptor instead.
func (*PrepareVoteRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{94}
}

func (x *PrepareVoteRequest) GetVote() *proto.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// Response to prepare a governance vote.
type PrepareVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// blob is an encoded representation of the vote ready to sign using the Vega Wallet and then submit as a transaction.
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	// A copy of the prepared vote.
	Vote *proto.Vote `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *PrepareVoteResponse) Reset() {
	*x = PrepareVoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareVoteResponse) ProtoMessage() {}

func (x *PrepareVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareVoteResponse.ProtoReflect.Descriptor instead.
func (*PrepareVoteResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{95}
}

func (x *PrepareVoteResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *PrepareVoteResponse) GetVote() *proto.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

type PrepareLiquidityProvisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submission *proto.LiquidityProvisionSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
}

func (x *PrepareLiquidityProvisionRequest) Reset() {
	*x = PrepareLiquidityProvisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareLiquidityProvisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLiquidityProvisionRequest) ProtoMessage() {}

func (x *PrepareLiquidityProvisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLiquidityProvisionRequest.ProtoReflect.Descriptor instead.
func (*PrepareLiquidityProvisionRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{96}
}

func (x *PrepareLiquidityProvisionRequest) GetSubmission() *proto.LiquidityProvisionSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

type PrepareLiquidityProvisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *PrepareLiquidityProvisionResponse) Reset() {
	*x = PrepareLiquidityProvisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareLiquidityProvisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLiquidityProvisionResponse) ProtoMessage() {}

func (x *PrepareLiquidityProvisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLiquidityProvisionResponse.ProtoReflect.Descriptor instead.
func (*PrepareLiquidityProvisionResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{97}
}

func (x *PrepareLiquidityProvisionResponse) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Request for an order with the specified order identifier.
// Optionally, return a specific version of the order with the `version` field.
type OrderByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier. Required field.
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// Version of the order.
	// Set `version` to 0 for most recent version of the order.
	// Set `1` for original version of the order.
	// Set `2` for first amendment, `3` for second amendment, etc.
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OrderByIDRequest) Reset() {
	*x = OrderByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByIDRequest) ProtoMessage() {}

func (x *OrderByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByIDRequest.ProtoReflect.Descriptor instead.
func (*OrderByIDRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{98}
}

func (x *OrderByIDRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *OrderByIDRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Request for a list of all versions of an order given the specified order identifier.
type OrderVersionsByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier. Required field.
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// Pagination controls.
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrderVersionsByIDRequest) Reset() {
	*x = OrderVersionsByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderVersionsByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderVersionsByIDRequest) ProtoMessage() {}

func (x *OrderVersionsByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderVersionsByIDRequest.ProtoReflect.Descriptor instead.
func (*OrderVersionsByIDRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{99}
}

func (x *OrderVersionsByIDRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *OrderVersionsByIDRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response to a request for a list of all versions of an order.
type OrderVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders (list will contain the same order but with different versions, if it has been amended).
	Orders []*proto.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrderVersionsResponse) Reset() {
	*x = OrderVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderVersionsResponse) ProtoMessage() {}

func (x *OrderVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderVersionsResponse.ProtoReflect.Descriptor instead.
func (*OrderVersionsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{100}
}

func (x *OrderVersionsResponse) GetOrders() []*proto.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request to fetch the estimated fee if an order were to trade immediately
type EstimateFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order to estimate fees for
	// the following fields in the order are required:
	// MarketID (used to specify the fee factors)
	// Price (the price at which the order could trade)
	// Size (the size at which the order could eventually trade)
	Order *proto.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *EstimateFeeRequest) Reset() {
	*x = EstimateFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeeRequest) ProtoMessage() {}

func (x *EstimateFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeeRequest.ProtoReflect.Descriptor instead.
func (*EstimateFeeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{101}
}

func (x *EstimateFeeRequest) GetOrder() *proto.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Response to a EstimateFeeRequest, containing the estimated fees for a given order
type EstimateFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of the estimated fees for this order if it were to trade now
	Fee *proto.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *EstimateFeeResponse) Reset() {
	*x = EstimateFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeeResponse) ProtoMessage() {}

func (x *EstimateFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeeResponse.ProtoReflect.Descriptor instead.
func (*EstimateFeeResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{102}
}

func (x *EstimateFeeResponse) GetFee() *proto.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

// Request to fetch the estimated MarginLevels if an order were to trade immediately
type EstimateMarginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order to estimate fees for
	Order *proto.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *EstimateMarginRequest) Reset() {
	*x = EstimateMarginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateMarginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateMarginRequest) ProtoMessage() {}

func (x *EstimateMarginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateMarginRequest.ProtoReflect.Descriptor instead.
func (*EstimateMarginRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{103}
}

func (x *EstimateMarginRequest) GetOrder() *proto.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Response to a EstimateMarginRequest, containing the estimated marginLevels for a given order
type EstimateMarginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of the estimated margins for this order if it were to trade now
	MarginLevels *proto.MarginLevels `protobuf:"bytes,2,opt,name=marginLevels,proto3" json:"marginLevels,omitempty"`
}

func (x *EstimateMarginResponse) Reset() {
	*x = EstimateMarginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateMarginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateMarginResponse) ProtoMessage() {}

func (x *EstimateMarginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateMarginResponse.ProtoReflect.Descriptor instead.
func (*EstimateMarginResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{104}
}

func (x *EstimateMarginResponse) GetMarginLevels() *proto.MarginLevels {
	if x != nil {
		return x.MarginLevels
	}
	return nil
}

// Request to subscribe to a stream of one or more event types from the Vega event bus
type ObserveEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more types of event. Required field.
	Type []proto.BusEventType `protobuf:"varint,1,rep,packed,name=type,proto3,enum=vega.BusEventType" json:"type,omitempty"`
	// Market identifier. Optional field.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier. Optional field.
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Batch size. Optional field.
	// If not specified, any events received will be sent immediately. If the client is not ready
	// for the next data-set, data may be dropped a number of times, and eventually the stream is closed.
	// if specified, the first batch will be sent when ready. To receive the next set of events, the client
	// must write an `ObserveEventBatch` message on the stream to flush the buffer.
	// If no message is received in 5 seconds, the stream is closed.
	// Default: 0, send any and all events when they are available.
	BatchSize int64 `protobuf:"varint,4,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
}

func (x *ObserveEventsRequest) Reset() {
	*x = ObserveEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveEventsRequest) ProtoMessage() {}

func (x *ObserveEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveEventsRequest.ProtoReflect.Descriptor instead.
func (*ObserveEventsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{105}
}

func (x *ObserveEventsRequest) GetType() []proto.BusEventType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ObserveEventsRequest) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *ObserveEventsRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *ObserveEventsRequest) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Response to a subscribed stream of events from the Vega event bus
type ObserveEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more events
	Events []*proto.BusEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ObserveEventsResponse) Reset() {
	*x = ObserveEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveEventsResponse) ProtoMessage() {}

func (x *ObserveEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveEventsResponse.ProtoReflect.Descriptor instead.
func (*ObserveEventsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{106}
}

func (x *ObserveEventsResponse) GetEvents() []*proto.BusEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// A request to get a list of withdrawal from a given party
type WithdrawalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party to get the withdrawals for
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *WithdrawalsRequest) Reset() {
	*x = WithdrawalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalsRequest) ProtoMessage() {}

func (x *WithdrawalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalsRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{107}
}

func (x *WithdrawalsRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// The response for a list of withdrawals
type WithdrawalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of withdrawals for the specified party
	Withdrawals []*proto.Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (x *WithdrawalsResponse) Reset() {
	*x = WithdrawalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalsResponse) ProtoMessage() {}

func (x *WithdrawalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalsResponse.ProtoReflect.Descriptor instead.
func (*WithdrawalsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{108}
}

func (x *WithdrawalsResponse) GetWithdrawals() []*proto.Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

// A request to get a specific withdrawal by ID
type WithdrawalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the withdrawal
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *WithdrawalRequest) Reset() {
	*x = WithdrawalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalRequest) ProtoMessage() {}

func (x *WithdrawalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{109}
}

func (x *WithdrawalRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// A response for a withdrawal
type WithdrawalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The withdrawal matching the ID from the request
	Withdrawal *proto.Withdrawal `protobuf:"bytes,1,opt,name=withdrawal,proto3" json:"withdrawal,omitempty"`
}

func (x *WithdrawalResponse) Reset() {
	*x = WithdrawalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalResponse) ProtoMessage() {}

func (x *WithdrawalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalResponse.ProtoReflect.Descriptor instead.
func (*WithdrawalResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{110}
}

func (x *WithdrawalResponse) GetWithdrawal() *proto.Withdrawal {
	if x != nil {
		return x.Withdrawal
	}
	return nil
}

// The request to get all information required to bundle the call
// to finalize the withdrawal on the erc20 bridge
type ERC20WithdrawalApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the withdrawal
	WithdrawalID string `protobuf:"bytes,1,opt,name=withdrawalID,proto3" json:"withdrawalID,omitempty"`
}

func (x *ERC20WithdrawalApprovalRequest) Reset() {
	*x = ERC20WithdrawalApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20WithdrawalApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20WithdrawalApprovalRequest) ProtoMessage() {}

func (x *ERC20WithdrawalApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20WithdrawalApprovalRequest.ProtoReflect.Descriptor instead.
func (*ERC20WithdrawalApprovalRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{111}
}

func (x *ERC20WithdrawalApprovalRequest) GetWithdrawalID() string {
	if x != nil {
		return x.WithdrawalID
	}
	return ""
}

// The response with all information required to bundle the call
// to finalize the withdrawal on the erc20 bridge
// function withdraw_asset(address asset_source, uint256 asset_id, uint256 amount, uint256 expiry, uint256 nonce, bytes memory signatures)
type ERC20WithdrawalApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of asset on ethereum
	AssetSource string `protobuf:"bytes,1,opt,name=assetSource,proto3" json:"assetSource,omitempty"`
	// The amount to be withdrawn
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The expiry / until what time the request is valid
	Expiry int64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The nonce, which is actually the internal reference for the withdrawal
	Nonce string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The signatures bundle as hex encoded data, forward by 0x
	// e.g: 0x + sig1 + sig2 + ... + sixN
	Signatures string `protobuf:"bytes,5,opt,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *ERC20WithdrawalApprovalResponse) Reset() {
	*x = ERC20WithdrawalApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20WithdrawalApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20WithdrawalApprovalResponse) ProtoMessage() {}

func (x *ERC20WithdrawalApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20WithdrawalApprovalResponse.ProtoReflect.Descriptor instead.
func (*ERC20WithdrawalApprovalResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{112}
}

func (x *ERC20WithdrawalApprovalResponse) GetAssetSource() string {
	if x != nil {
		return x.AssetSource
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *ERC20WithdrawalApprovalResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetSignatures() string {
	if x != nil {
		return x.Signatures
	}
	return ""
}

// A request to get a list of deposit from a given party
type DepositsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party to get the deposits for
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *DepositsRequest) Reset() {
	*x = DepositsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositsRequest) ProtoMessage() {}

func (x *DepositsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositsRequest.ProtoReflect.Descriptor instead.
func (*DepositsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{113}
}

func (x *DepositsRequest) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// The response for a list of deposits
type DepositsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of deposits for the specified party
	Deposits []*proto.Deposit `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (x *DepositsResponse) Reset() {
	*x = DepositsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositsResponse) ProtoMessage() {}

func (x *DepositsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositsResponse.ProtoReflect.Descriptor instead.
func (*DepositsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{114}
}

func (x *DepositsResponse) GetDeposits() []*proto.Deposit {
	if x != nil {
		return x.Deposits
	}
	return nil
}

// A request to get a specific deposit by ID
type DepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the withdrawal
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DepositRequest) Reset() {
	*x = DepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRequest) ProtoMessage() {}

func (x *DepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRequest.ProtoReflect.Descriptor instead.
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{115}
}

func (x *DepositRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// A response for a deposit
type DepositResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deposit matching the ID from the request
	Deposit *proto.Deposit `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (x *DepositResponse) Reset() {
	*x = DepositResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositResponse) ProtoMessage() {}

func (x *DepositResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositResponse.ProtoReflect.Descriptor instead.
func (*DepositResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{116}
}

func (x *DepositResponse) GetDeposit() *proto.Deposit {
	if x != nil {
		return x.Deposit
	}
	return nil
}

// A message requesting for the list
// of all network parameters
type NetworkParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NetworkParametersRequest) Reset() {
	*x = NetworkParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParametersRequest) ProtoMessage() {}

func (x *NetworkParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParametersRequest.ProtoReflect.Descriptor instead.
func (*NetworkParametersRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{117}
}

// A response containing all of the
// vega network parameters
type NetworkParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkParameters []*proto.NetworkParameter `protobuf:"bytes,1,rep,name=networkParameters,proto3" json:"networkParameters,omitempty"`
}

func (x *NetworkParametersResponse) Reset() {
	*x = NetworkParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParametersResponse) ProtoMessage() {}

func (x *NetworkParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParametersResponse.ProtoReflect.Descriptor instead.
func (*NetworkParametersResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{118}
}

func (x *NetworkParametersResponse) GetNetworkParameters() []*proto.NetworkParameter {
	if x != nil {
		return x.NetworkParameters
	}
	return nil
}

// A message requesting for the list
// of liquidity provisions orders for markets
// one of the 2 filters is required or both
type LiquidityProvisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the market we want to get liquidity provision orders from
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// the party which submitted the liquidity provision orders
	Party string `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *LiquidityProvisionsRequest) Reset() {
	*x = LiquidityProvisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionsRequest) ProtoMessage() {}

func (x *LiquidityProvisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionsRequest.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{119}
}

func (x *LiquidityProvisionsRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *LiquidityProvisionsRequest) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

// A response containing all of the
// vega liquidity provisions orders
type LiquidityProvisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiquidityProvisions []*proto.LiquidityProvision `protobuf:"bytes,1,rep,name=liquidityProvisions,proto3" json:"liquidityProvisions,omitempty"`
}

func (x *LiquidityProvisionsResponse) Reset() {
	*x = LiquidityProvisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_trading_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionsResponse) ProtoMessage() {}

func (x *LiquidityProvisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_trading_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionsResponse.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_trading_proto_rawDescGZIP(), []int{120}
}

func (x *LiquidityProvisionsResponse) GetLiquidityProvisions() []*proto.LiquidityProvision {
	if x != nil {
		return x.LiquidityProvisions
	}
	return nil
}

var File_vega_api_trading_proto protoreflect.FileDescriptor

var file_vega_api_trading_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x0f, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x76, 0x65, 0x67, 0x61, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x65, 0x67, 0x61, 0x2f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x65,
	0x76, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x76, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x37, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc4,
	0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x02, 0x74, 0x78, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x10, 0x03, 0x22, 0x35, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x16,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0x2d, 0x0a, 0x17,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x4c, 0x0a, 0x1a, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x1a, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x2f, 0x0a, 0x19, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x4b, 0x0a, 0x12,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x12, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x11,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6d, 0x65, 0x6e,
	0x64, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x2a, 0x0a,
	0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x11, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x22, 0x3b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x49, 0x44, 0x22, 0x59,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x44, 0x22, 0x3b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x60,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x49, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4c, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x68, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x5f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x48, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x43, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x45, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x1b, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x3c,
	0x0a, 0x18, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x1c,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x13, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22,
	0x4e, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22,
	0x39, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x3b, 0x0a, 0x15, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x36,
	0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x37,
	0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x22, 0x34, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x11, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x22, 0x38, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x41, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x22, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x22, 0x51, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3d, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x22, 0x69, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x15, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x19, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3f, 0x0a, 0x1a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3f, 0x0a,
	0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3d,
	0x0a, 0x18, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x39, 0x0a,
	0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x2e, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x0e, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x39, 0x0a, 0x0f, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x63,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0xce, 0x01, 0x0a,
	0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x03, 0x62, 0x75, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x6c, 0x0a,
	0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x16, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x17, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a,
	0x10, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x56, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73,
	0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x33, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x42, 0x0a,
	0x15, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0x49, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x43, 0x0a, 0x16,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0x38, 0x0a, 0x20, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x21, 0x46,
	0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x16,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22,
	0x67, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c,
	0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x38,
	0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x3c, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x22, 0x6e, 0x0a, 0x20, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x37, 0x0a, 0x21, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x4e, 0x0a, 0x10, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x18, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x15, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x32, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x22, 0x3a, 0x0a, 0x15, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x50, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3f, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44,
	0x22, 0x49, 0x0a, 0x13, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x22, 0x4c, 0x0a, 0x1e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x49, 0x44, 0x22, 0xa9,
	0x01, 0x0a, 0x1f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x0f, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x22,
	0x3d, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x22, 0x28,
	0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x02, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x61, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x1a, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x22,
	0x69, 0x0a, 0x1b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xee, 0x05, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf4, 0x23, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x19, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x11, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x14,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x40, 0x0a,
	0x10, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x30, 0x01, 0x12,
	0x50, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x30,
	0x01, 0x12, 0x4d, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01,
	0x12, 0x61, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x30,
	0x01, 0x12, 0x43, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x43,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x17, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_vega_api_trading_proto_rawDescOnce sync.Once
	file_vega_api_trading_proto_rawDescData = file_vega_api_trading_proto_rawDesc
)

func file_vega_api_trading_proto_rawDescGZIP() []byte {
	file_vega_api_trading_proto_rawDescOnce.Do(func() {
		file_vega_api_trading_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_api_trading_proto_rawDescData)
	})
	return file_vega_api_trading_proto_rawDescData
}

var file_vega_api_trading_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vega_api_trading_proto_msgTypes = make([]protoimpl.MessageInfo, 121)
var file_vega_api_trading_proto_goTypes = []interface{}{
	(SubmitTransactionRequest_Type)(0),            // 0: api.SubmitTransactionRequest.Type
	(*PropagateChainEventRequest)(nil),            // 1: api.PropagateChainEventRequest
	(*PropagateChainEventResponse)(nil),           // 2: api.PropagateChainEventResponse
	(*SubmitTransactionRequest)(nil),              // 3: api.SubmitTransactionRequest
	(*SubmitTransactionResponse)(nil),             // 4: api.SubmitTransactionResponse
	(*PrepareWithdrawRequest)(nil),                // 5: api.PrepareWithdrawRequest
	(*PrepareWithdrawResponse)(nil),               // 6: api.PrepareWithdrawResponse
	(*PrepareSubmitOrderResponse)(nil),            // 7: api.PrepareSubmitOrderResponse
	(*PrepareCancelOrderResponse)(nil),            // 8: api.PrepareCancelOrderResponse
	(*PrepareAmendOrderResponse)(nil),             // 9: api.PrepareAmendOrderResponse
	(*SubmitOrderRequest)(nil),                    // 10: api.SubmitOrderRequest
	(*CancelOrderRequest)(nil),                    // 11: api.CancelOrderRequest
	(*AmendOrderRequest)(nil),                     // 12: api.AmendOrderRequest
	(*AssetsRequest)(nil),                         // 13: api.AssetsRequest
	(*AssetsResponse)(nil),                        // 14: api.AssetsResponse
	(*AssetByIDRequest)(nil),                      // 15: api.AssetByIDRequest
	(*AssetByIDResponse)(nil),                     // 16: api.AssetByIDResponse
	(*GetNodeSignaturesAggregateRequest)(nil),     // 17: api.GetNodeSignaturesAggregateRequest
	(*GetNodeSignaturesAggregateResponse)(nil),    // 18: api.GetNodeSignaturesAggregateResponse
	(*OptionalProposalState)(nil),                 // 19: api.OptionalProposalState
	(*GetProposalsRequest)(nil),                   // 20: api.GetProposalsRequest
	(*GetProposalsResponse)(nil),                  // 21: api.GetProposalsResponse
	(*GetProposalsByPartyRequest)(nil),            // 22: api.GetProposalsByPartyRequest
	(*GetProposalsByPartyResponse)(nil),           // 23: api.GetProposalsByPartyResponse
	(*GetVotesByPartyRequest)(nil),                // 24: api.GetVotesByPartyRequest
	(*GetVotesByPartyResponse)(nil),               // 25: api.GetVotesByPartyResponse
	(*GetNewMarketProposalsRequest)(nil),          // 26: api.GetNewMarketProposalsRequest
	(*GetNewMarketProposalsResponse)(nil),         // 27: api.GetNewMarketProposalsResponse
	(*GetUpdateMarketProposalsRequest)(nil),       // 28: api.GetUpdateMarketProposalsRequest
	(*GetUpdateMarketProposalsResponse)(nil),      // 29: api.GetUpdateMarketProposalsResponse
	(*GetNetworkParametersProposalsRequest)(nil),  // 30: api.GetNetworkParametersProposalsRequest
	(*GetNetworkParametersProposalsResponse)(nil), // 31: api.GetNetworkParametersProposalsResponse
	(*GetNewAssetProposalsRequest)(nil),           // 32: api.GetNewAssetProposalsRequest
	(*GetNewAssetProposalsResponse)(nil),          // 33: api.GetNewAssetProposalsResponse
	(*GetProposalByIDRequest)(nil),                // 34: api.GetProposalByIDRequest
	(*GetProposalByIDResponse)(nil),               // 35: api.GetProposalByIDResponse
	(*GetProposalByReferenceRequest)(nil),         // 36: api.GetProposalByReferenceRequest
	(*GetProposalByReferenceResponse)(nil),        // 37: api.GetProposalByReferenceResponse
	(*ObservePartyProposalsRequest)(nil),          // 38: api.ObservePartyProposalsRequest
	(*ObserveProposalVotesRequest)(nil),           // 39: api.ObserveProposalVotesRequest
	(*ObservePartyVotesRequest)(nil),              // 40: api.ObservePartyVotesRequest
	(*MarginLevelsSubscribeRequest)(nil),          // 41: api.MarginLevelsSubscribeRequest
	(*MarginLevelsRequest)(nil),                   // 42: api.MarginLevelsRequest
	(*MarginLevelsResponse)(nil),                  // 43: api.MarginLevelsResponse
	(*MarketsDataSubscribeRequest)(nil),           // 44: api.MarketsDataSubscribeRequest
	(*MarketDataByIDRequest)(nil),                 // 45: api.MarketDataByIDRequest
	(*MarketDataByIDResponse)(nil),                // 46: api.MarketDataByIDResponse
	(*MarketsDataResponse)(nil),                   // 47: api.MarketsDataResponse
	(*LastTradeRequest)(nil),                      // 48: api.LastTradeRequest
	(*LastTradeResponse)(nil),                     // 49: api.LastTradeResponse
	(*MarketByIDRequest)(nil),                     // 50: api.MarketByIDRequest
	(*MarketByIDResponse)(nil),                    // 51: api.MarketByIDResponse
	(*PartyByIDRequest)(nil),                      // 52: api.PartyByIDRequest
	(*PartyByIDResponse)(nil),                     // 53: api.PartyByIDResponse
	(*PartiesResponse)(nil),                       // 54: api.PartiesResponse
	(*TradesByPartyRequest)(nil),                  // 55: api.TradesByPartyRequest
	(*TradesByPartyResponse)(nil),                 // 56: api.TradesByPartyResponse
	(*TradesByOrderRequest)(nil),                  // 57: api.TradesByOrderRequest
	(*TradesByOrderResponse)(nil),                 // 58: api.TradesByOrderResponse
	(*AccountsSubscribeRequest)(nil),              // 59: api.AccountsSubscribeRequest
	(*OrdersSubscribeRequest)(nil),                // 60: api.OrdersSubscribeRequest
	(*TradesSubscribeRequest)(nil),                // 61: api.TradesSubscribeRequest
	(*CandlesSubscribeRequest)(nil),               // 62: api.CandlesSubscribeRequest
	(*MarketDepthSubscribeRequest)(nil),           // 63: api.MarketDepthSubscribeRequest
	(*MarketDepthUpdatesSubscribeRequest)(nil),    // 64: api.MarketDepthUpdatesSubscribeRequest
	(*PositionsSubscribeRequest)(nil),             // 65: api.PositionsSubscribeRequest
	(*OrdersByMarketRequest)(nil),                 // 66: api.OrdersByMarketRequest
	(*OrdersByMarketResponse)(nil),                // 67: api.OrdersByMarketResponse
	(*OrdersByPartyRequest)(nil),                  // 68: api.OrdersByPartyRequest
	(*OrdersByPartyResponse)(nil),                 // 69: api.OrdersByPartyResponse
	(*OrderByMarketAndIdRequest)(nil),             // 70: api.OrderByMarketAndIdRequest
	(*OrderByMarketAndIdResponse)(nil),            // 71: api.OrderByMarketAndIdResponse
	(*OrderByReferenceRequest)(nil),               // 72: api.OrderByReferenceRequest
	(*OrderByReferenceResponse)(nil),              // 73: api.OrderByReferenceResponse
	(*MarketsResponse)(nil),                       // 74: api.MarketsResponse
	(*CandlesRequest)(nil),                        // 75: api.CandlesRequest
	(*CandlesResponse)(nil),                       // 76: api.CandlesResponse
	(*MarketDepthRequest)(nil),                    // 77: api.MarketDepthRequest
	(*MarketDepthResponse)(nil),                   // 78: api.MarketDepthResponse
	(*TradesByMarketRequest)(nil),                 // 79: api.TradesByMarketRequest
	(*TradesByMarketResponse)(nil),                // 80: api.TradesByMarketResponse
	(*PositionsByPartyRequest)(nil),               // 81: api.PositionsByPartyRequest
	(*PositionsByPartyResponse)(nil),              // 82: api.PositionsByPartyResponse
	(*VegaTimeResponse)(nil),                      // 83: api.VegaTimeResponse
	(*Pagination)(nil),                            // 84: api.Pagination
	(*OrdersStream)(nil),                          // 85: api.OrdersStream
	(*TradesStream)(nil),                          // 86: api.TradesStream
	(*PartyAccountsRequest)(nil),                  // 87: api.PartyAccountsRequest
	(*PartyAccountsResponse)(nil),                 // 88: api.PartyAccountsResponse
	(*MarketAccountsRequest)(nil),                 // 89: api.MarketAccountsRequest
	(*MarketAccountsResponse)(nil),                // 90: api.MarketAccountsResponse
	(*FeeInfrastructureAccountsRequest)(nil),      // 91: api.FeeInfrastructureAccountsRequest
	(*FeeInfrastructureAccountsResponse)(nil),     // 92: api.FeeInfrastructureAccountsResponse
	(*PrepareProposalRequest)(nil),                // 93: api.PrepareProposalRequest
	(*PrepareProposalResponse)(nil),               // 94: api.PrepareProposalResponse
	(*PrepareVoteRequest)(nil),                    // 95: api.PrepareVoteRequest
	(*PrepareVoteResponse)(nil),                   // 96: api.PrepareVoteResponse
	(*PrepareLiquidityProvisionRequest)(nil),      // 97: api.PrepareLiquidityProvisionRequest
	(*PrepareLiquidityProvisionResponse)(nil),     // 98: api.PrepareLiquidityProvisionResponse
	(*OrderByIDRequest)(nil),                      // 99: api.OrderByIDRequest
	(*OrderVersionsByIDRequest)(nil),              // 100: api.OrderVersionsByIDRequest
	(*OrderVersionsResponse)(nil),                 // 101: api.OrderVersionsResponse
	(*EstimateFeeRequest)(nil),                    // 102: api.EstimateFeeRequest
	(*EstimateFeeResponse)(nil),                   // 103: api.EstimateFeeResponse
	(*EstimateMarginRequest)(nil),                 // 104: api.EstimateMarginRequest
	(*EstimateMarginResponse)(nil),                // 105: api.EstimateMarginResponse
	(*ObserveEventsRequest)(nil),                  // 106: api.ObserveEventsRequest
	(*ObserveEventsResponse)(nil),                 // 107: api.ObserveEventsResponse
	(*WithdrawalsRequest)(nil),                    // 108: api.WithdrawalsRequest
	(*WithdrawalsResponse)(nil),                   // 109: api.WithdrawalsResponse
	(*WithdrawalRequest)(nil),                     // 110: api.WithdrawalRequest
	(*WithdrawalResponse)(nil),                    // 111: api.WithdrawalResponse
	(*ERC20WithdrawalApprovalRequest)(nil),        // 112: api.ERC20WithdrawalApprovalRequest
	(*ERC20WithdrawalApprovalResponse)(nil),       // 113: api.ERC20WithdrawalApprovalResponse
	(*DepositsRequest)(nil),                       // 114: api.DepositsRequest
	(*DepositsResponse)(nil),                      // 115: api.DepositsResponse
	(*DepositRequest)(nil),                        // 116: api.DepositRequest
	(*DepositResponse)(nil),                       // 117: api.DepositResponse
	(*NetworkParametersRequest)(nil),              // 118: api.NetworkParametersRequest
	(*NetworkParametersResponse)(nil),             // 119: api.NetworkParametersResponse
	(*LiquidityProvisionsRequest)(nil),            // 120: api.LiquidityProvisionsRequest
	(*LiquidityProvisionsResponse)(nil),           // 121: api.LiquidityProvisionsResponse
	(*proto.ChainEvent)(nil),                      // 122: vega.ChainEvent
	(*proto.SignedBundle)(nil),                    // 123: vega.SignedBundle
	(*proto.WithdrawSubmission)(nil),              // 124: vega.WithdrawSubmission
	(*proto.OrderSubmission)(nil),                 // 125: vega.OrderSubmission
	(*proto.OrderCancellation)(nil),               // 126: vega.OrderCancellation
	(*proto.OrderAmendment)(nil),                  // 127: vega.OrderAmendment
	(*proto.Asset)(nil),                           // 128: vega.Asset
	(*proto.NodeSignature)(nil),                   // 129: vega.NodeSignature
	(proto.Proposal_State)(0),                     // 130: vega.Proposal.State
	(*proto.GovernanceData)(nil),                  // 131: vega.GovernanceData
	(*proto.Vote)(nil),                            // 132: vega.Vote
	(*proto.MarginLevels)(nil),                    // 133: vega.MarginLevels
	(*proto.MarketData)(nil),                      // 134: vega.MarketData
	(*proto.Trade)(nil),                           // 135: vega.Trade
	(*proto.Market)(nil),                          // 136: vega.Market
	(*proto.Party)(nil),                           // 137: vega.Party
	(proto.AccountType)(0),                        // 138: vega.AccountType
	(proto.Interval)(0),                           // 139: vega.Interval
	(*proto.Order)(nil),                           // 140: vega.Order
	(*proto.Candle)(nil),                          // 141: vega.Candle
	(*proto.PriceLevel)(nil),                      // 142: vega.PriceLevel
	(*proto.Position)(nil),                        // 143: vega.Position
	(*proto.Account)(nil),                         // 144: vega.Account
	(*proto.ProposalTerms)(nil),                   // 145: vega.ProposalTerms
	(*proto.Proposal)(nil),                        // 146: vega.Proposal
	(*proto.LiquidityProvisionSubmission)(nil),    // 147: vega.LiquidityProvisionSubmission
	(*proto.Fee)(nil),                             // 148: vega.Fee
	(proto.BusEventType)(0),                       // 149: vega.BusEventType
	(*proto.BusEvent)(nil),                        // 150: vega.BusEvent
	(*proto.Withdrawal)(nil),                      // 151: vega.Withdrawal
	(*proto.Deposit)(nil),                         // 152: vega.Deposit
	(*proto.NetworkParameter)(nil),                // 153: vega.NetworkParameter
	(*proto.LiquidityProvision)(nil),              // 154: vega.LiquidityProvision
	(*empty.Empty)(nil),                           // 155: google.protobuf.Empty
	(*proto.Statistics)(nil),                      // 156: vega.Statistics
	(*proto.MarketDepth)(nil),                     // 157: vega.MarketDepth
	(*proto.MarketDepthUpdate)(nil),               // 158: vega.MarketDepthUpdate
	(*proto.TransferResponse)(nil),                // 159: vega.TransferResponse
}
var file_vega_api_trading_proto_depIdxs = []int32{
	122, // 0: api.PropagateChainEventRequest.evt:type_name -> vega.ChainEvent
	123, // 1: api.SubmitTransactionRequest.tx:type_name -> vega.SignedBundle
	0,   // 2: api.SubmitTransactionRequest.type:type_name -> api.SubmitTransactionRequest.Type
	124, // 3: api.PrepareWithdrawRequest.withdraw:type_name -> vega.WithdrawSubmission
	125, // 4: api.SubmitOrderRequest.submission:type_name -> vega.OrderSubmission
	126, // 5: api.CancelOrderRequest.cancellation:type_name -> vega.OrderCancellation
	127, // 6: api.AmendOrderRequest.amendment:type_name -> vega.OrderAmendment
	128, // 7: api.AssetsResponse.assets:type_name -> vega.Asset
	128, // 8: api.AssetByIDResponse.asset:type_name -> vega.Asset
	129, // 9: api.GetNodeSignaturesAggregateResponse.signatures:type_name -> vega.NodeSignature
	130, // 10: api.OptionalProposalState.value:type_name -> vega.Proposal.State
	19,  // 11: api.GetProposalsRequest.selectInState:type_name -> api.OptionalProposalState
	131, // 12: api.GetProposalsResponse.data:type_name -> vega.GovernanceData
	19,  // 13: api.GetProposalsByPartyRequest.selectInState:type_name -> api.OptionalProposalState
	131, // 14: api.GetProposalsByPartyResponse.data:type_name -> vega.GovernanceData
	132, // 15: api.GetVotesByPartyResponse.votes:type_name -> vega.Vote
	19,  // 16: api.GetNewMarketProposalsRequest.selectInState:type_name -> api.OptionalProposalState
	131, // 17: api.GetNewMarketProposalsResponse.data:type_name -> vega.GovernanceData
	19,  // 18: api.GetUpdateMarketProposalsRequest.selectInState:type_name -> api.OptionalProposalState
	131, // 19: api.GetUpdateMarketProposalsResponse.data:type_name -> vega.GovernanceData
	19,  // 20: api.GetNetworkParametersProposalsRequest.selectInState:type_name -> api.OptionalProposalState
	131, // 21: api.GetNetworkParametersProposalsResponse.data:type_name -> vega.GovernanceData
	19,  // 22: api.GetNewAssetProposalsRequest.selectInState:type_name -> api.OptionalProposalState
	131, // 23: api.GetNewAssetProposalsResponse.data:type_name -> vega.GovernanceData
	131, // 24: api.GetProposalByIDResponse.data:type_name -> vega.GovernanceData
	131, // 25: api.GetProposalByReferenceResponse.data:type_name -> vega.GovernanceData
	133, // 26: api.MarginLevelsResponse.marginLevels:type_name -> vega.MarginLevels
	134, // 27: api.MarketDataByIDResponse.marketData:type_name -> vega.MarketData
	134, // 28: api.MarketsDataResponse.marketsData:type_name -> vega.MarketData
	135, // 29: api.LastTradeResponse.trade:type_name -> vega.Trade
	136, // 30: api.MarketByIDResponse.market:type_name -> vega.Market
	137, // 31: api.PartyByIDResponse.party:type_name -> vega.Party
	137, // 32: api.PartiesResponse.parties:type_name -> vega.Party
	84,  // 33: api.TradesByPartyRequest.pagination:type_name -> api.Pagination
	135, // 34: api.TradesByPartyResponse.trades:type_name -> vega.Trade
	135, // 35: api.TradesByOrderResponse.trades:type_name -> vega.Trade
	138, // 36: api.AccountsSubscribeRequest.type:type_name -> vega.AccountType
	139, // 37: api.CandlesSubscribeRequest.interval:type_name -> vega.Interval
	84,  // 38: api.OrdersByMarketRequest.pagination:type_name -> api.Pagination
	140, // 39: api.OrdersByMarketResponse.orders:type_name -> vega.Order
	84,  // 40: api.OrdersByPartyRequest.pagination:type_name -> api.Pagination
	140, // 41: api.OrdersByPartyResponse.orders:type_name -> vega.Order
	140, // 42: api.OrderByMarketAndIdResponse.order:type_name -> vega.Order
	140, // 43: api.OrderByReferenceResponse.order:type_name -> vega.Order
	136, // 44: api.MarketsResponse.markets:type_name -> vega.Market
	139, // 45: api.CandlesRequest.interval:type_name -> vega.Interval
	141, // 46: api.CandlesResponse.candles:type_name -> vega.Candle
	142, // 47: api.MarketDepthResponse.buy:type_name -> vega.PriceLevel
	142, // 48: api.MarketDepthResponse.sell:type_name -> vega.PriceLevel
	135, // 49: api.MarketDepthResponse.lastTrade:type_name -> vega.Trade
	84,  // 50: api.TradesByMarketRequest.pagination:type_name -> api.Pagination
	135, // 51: api.TradesByMarketResponse.trades:type_name -> vega.Trade
	143, // 52: api.PositionsByPartyResponse.positions:type_name -> vega.Position
	140, // 53: api.OrdersStream.orders:type_name -> vega.Order
	135, // 54: api.TradesStream.trades:type_name -> vega.Trade
	138, // 55: api.PartyAccountsRequest.type:type_name -> vega.AccountType
	144, // 56: api.PartyAccountsResponse.accounts:type_name -> vega.Account
	144, // 57: api.MarketAccountsResponse.accounts:type_name -> vega.Account
	144, // 58: api.FeeInfrastructureAccountsResponse.accounts:type_name -> vega.Account
	145, // 59: api.PrepareProposalRequest.proposal:type_name -> vega.ProposalTerms
	146, // 60: api.PrepareProposalResponse.pendingProposal:type_name -> vega.Proposal
	132, // 61: api.PrepareVoteRequest.vote:type_name -> vega.Vote
	132, // 62: api.PrepareVoteResponse.vote:type_name -> vega.Vote
	147, // 63: api.PrepareLiquidityProvisionRequest.submission:type_name -> vega.LiquidityProvisionSubmission
	84,  // 64: api.OrderVersionsByIDRequest.pagination:type_name -> api.Pagination
	140, // 65: api.OrderVersionsResponse.orders:type_name -> vega.Order
	140, // 66: api.EstimateFeeRequest.order:type_name -> vega.Order
	148, // 67: api.EstimateFeeResponse.fee:type_name -> vega.Fee
	140, // 68: api.EstimateMarginRequest.order:type_name -> vega.Order
	133, // 69: api.EstimateMarginResponse.marginLevels:type_name -> vega.MarginLevels
	149, // 70: api.ObserveEventsRequest.type:type_name -> vega.BusEventType
	150, // 71: api.ObserveEventsResponse.events:type_name -> vega.BusEvent
	151, // 72: api.WithdrawalsResponse.withdrawals:type_name -> vega.Withdrawal
	151, // 73: api.WithdrawalResponse.withdrawal:type_name -> vega.Withdrawal
	152, // 74: api.DepositsResponse.deposits:type_name -> vega.Deposit
	152, // 75: api.DepositResponse.deposit:type_name -> vega.Deposit
	153, // 76: api.NetworkParametersResponse.networkParameters:type_name -> vega.NetworkParameter
	154, // 77: api.LiquidityProvisionsResponse.liquidityProvisions:type_name -> vega.LiquidityProvision
	10,  // 78: api.trading.PrepareSubmitOrder:input_type -> api.SubmitOrderRequest
	11,  // 79: api.trading.PrepareCancelOrder:input_type -> api.CancelOrderRequest
	12,  // 80: api.trading.PrepareAmendOrder:input_type -> api.AmendOrderRequest
	5,   // 81: api.trading.PrepareWithdraw:input_type -> api.PrepareWithdrawRequest
	3,   // 82: api.trading.SubmitTransaction:input_type -> api.SubmitTransactionRequest
	93,  // 83: api.trading.PrepareProposal:input_type -> api.PrepareProposalRequest
	95,  // 84: api.trading.PrepareVote:input_type -> api.PrepareVoteRequest
	1,   // 85: api.trading.PropagateChainEvent:input_type -> api.PropagateChainEventRequest
	97,  // 86: api.trading.PrepareLiquidityProvision:input_type -> api.PrepareLiquidityProvisionRequest
	89,  // 87: api.trading_data.MarketAccounts:input_type -> api.MarketAccountsRequest
	87,  // 88: api.trading_data.PartyAccounts:input_type -> api.PartyAccountsRequest
	91,  // 89: api.trading_data.FeeInfrastructureAccounts:input_type -> api.FeeInfrastructureAccountsRequest
	75,  // 90: api.trading_data.Candles:input_type -> api.CandlesRequest
	45,  // 91: api.trading_data.MarketDataByID:input_type -> api.MarketDataByIDRequest
	155, // 92: api.trading_data.MarketsData:input_type -> google.protobuf.Empty
	50,  // 93: api.trading_data.MarketByID:input_type -> api.MarketByIDRequest
	77,  // 94: api.trading_data.MarketDepth:input_type -> api.MarketDepthRequest
	155, // 95: api.trading_data.Markets:input_type -> google.protobuf.Empty
	70,  // 96: api.trading_data.OrderByMarketAndID:input_type -> api.OrderByMarketAndIdRequest
	72,  // 97: api.trading_data.OrderByReference:input_type -> api.OrderByReferenceRequest
	66,  // 98: api.trading_data.OrdersByMarket:input_type -> api.OrdersByMarketRequest
	68,  // 99: api.trading_data.OrdersByParty:input_type -> api.OrdersByPartyRequest
	99,  // 100: api.trading_data.OrderByID:input_type -> api.OrderByIDRequest
	100, // 101: api.trading_data.OrderVersionsByID:input_type -> api.OrderVersionsByIDRequest
	42,  // 102: api.trading_data.MarginLevels:input_type -> api.MarginLevelsRequest
	155, // 103: api.trading_data.Parties:input_type -> google.protobuf.Empty
	52,  // 104: api.trading_data.PartyByID:input_type -> api.PartyByIDRequest
	81,  // 105: api.trading_data.PositionsByParty:input_type -> api.PositionsByPartyRequest
	48,  // 106: api.trading_data.LastTrade:input_type -> api.LastTradeRequest
	79,  // 107: api.trading_data.TradesByMarket:input_type -> api.TradesByMarketRequest
	57,  // 108: api.trading_data.TradesByOrder:input_type -> api.TradesByOrderRequest
	55,  // 109: api.trading_data.TradesByParty:input_type -> api.TradesByPartyRequest
	20,  // 110: api.trading_data.GetProposals:input_type -> api.GetProposalsRequest
	22,  // 111: api.trading_data.GetProposalsByParty:input_type -> api.GetProposalsByPartyRequest
	24,  // 112: api.trading_data.GetVotesByParty:input_type -> api.GetVotesByPartyRequest
	26,  // 113: api.trading_data.GetNewMarketProposals:input_type -> api.GetNewMarketProposalsRequest
	28,  // 114: api.trading_data.GetUpdateMarketProposals:input_type -> api.GetUpdateMarketProposalsRequest
	30,  // 115: api.trading_data.GetNetworkParametersProposals:input_type -> api.GetNetworkParametersProposalsRequest
	32,  // 116: api.trading_data.GetNewAssetProposals:input_type -> api.GetNewAssetProposalsRequest
	34,  // 117: api.trading_data.GetProposalByID:input_type -> api.GetProposalByIDRequest
	36,  // 118: api.trading_data.GetProposalByReference:input_type -> api.GetProposalByReferenceRequest
	155, // 119: api.trading_data.ObserveGovernance:input_type -> google.protobuf.Empty
	38,  // 120: api.trading_data.ObservePartyProposals:input_type -> api.ObservePartyProposalsRequest
	40,  // 121: api.trading_data.ObservePartyVotes:input_type -> api.ObservePartyVotesRequest
	39,  // 122: api.trading_data.ObserveProposalVotes:input_type -> api.ObserveProposalVotesRequest
	106, // 123: api.trading_data.ObserveEventBus:input_type -> api.ObserveEventsRequest
	155, // 124: api.trading_data.Statistics:input_type -> google.protobuf.Empty
	155, // 125: api.trading_data.GetVegaTime:input_type -> google.protobuf.Empty
	59,  // 126: api.trading_data.AccountsSubscribe:input_type -> api.AccountsSubscribeRequest
	62,  // 127: api.trading_data.CandlesSubscribe:input_type -> api.CandlesSubscribeRequest
	41,  // 128: api.trading_data.MarginLevelsSubscribe:input_type -> api.MarginLevelsSubscribeRequest
	63,  // 129: api.trading_data.MarketDepthSubscribe:input_type -> api.MarketDepthSubscribeRequest
	64,  // 130: api.trading_data.MarketDepthUpdatesSubscribe:input_type -> api.MarketDepthUpdatesSubscribeRequest
	44,  // 131: api.trading_data.MarketsDataSubscribe:input_type -> api.MarketsDataSubscribeRequest
	60,  // 132: api.trading_data.OrdersSubscribe:input_type -> api.OrdersSubscribeRequest
	65,  // 133: api.trading_data.PositionsSubscribe:input_type -> api.PositionsSubscribeRequest
	61,  // 134: api.trading_data.TradesSubscribe:input_type -> api.TradesSubscribeRequest
	155, // 135: api.trading_data.TransferResponsesSubscribe:input_type -> google.protobuf.Empty
	17,  // 136: api.trading_data.GetNodeSignaturesAggregate:input_type -> api.GetNodeSignaturesAggregateRequest
	15,  // 137: api.trading_data.AssetByID:input_type -> api.AssetByIDRequest
	13,  // 138: api.trading_data.Assets:input_type -> api.AssetsRequest
	102, // 139: api.trading_data.EstimateFee:input_type -> api.EstimateFeeRequest
	104, // 140: api.trading_data.EstimateMargin:input_type -> api.EstimateMarginRequest
	112, // 141: api.trading_data.ERC20WithdrawalApproval:input_type -> api.ERC20WithdrawalApprovalRequest
	110, // 142: api.trading_data.Withdrawal:input_type -> api.WithdrawalRequest
	108, // 143: api.trading_data.Withdrawals:input_type -> api.WithdrawalsRequest
	116, // 144: api.trading_data.Deposit:input_type -> api.DepositRequest
	114, // 145: api.trading_data.Deposits:input_type -> api.DepositsRequest
	118, // 146: api.trading_data.NetworkParameters:input_type -> api.NetworkParametersRequest
	120, // 147: api.trading_data.LiquidityProvisions:input_type -> api.LiquidityProvisionsRequest
	7,   // 148: api.trading.PrepareSubmitOrder:output_type -> api.PrepareSubmitOrderResponse
	8,   // 149: api.trading.PrepareCancelOrder:output_type -> api.PrepareCancelOrderResponse
	9,   // 150: api.trading.PrepareAmendOrder:output_type -> api.PrepareAmendOrderResponse
	6,   // 151: api.trading.PrepareWithdraw:output_type -> api.PrepareWithdrawResponse
	4,   // 152: api.trading.SubmitTransaction:output_type -> api.SubmitTransactionResponse
	94,  // 153: api.trading.PrepareProposal:output_type -> api.PrepareProposalResponse
	96,  // 154: api.trading.PrepareVote:output_type -> api.PrepareVoteResponse
	2,   // 155: api.trading.PropagateChainEvent:output_type -> api.PropagateChainEventResponse
	98,  // 156: api.trading.PrepareLiquidityProvision:output_type -> api.PrepareLiquidityProvisionResponse
	90,  // 157: api.trading_data.MarketAccounts:output_type -> api.MarketAccountsResponse
	88,  // 158: api.trading_data.PartyAccounts:output_type -> api.PartyAccountsResponse
	92,  // 159: api.trading_data.FeeInfrastructureAccounts:output_type -> api.FeeInfrastructureAccountsResponse
	76,  // 160: api.trading_data.Candles:output_type -> api.CandlesResponse
	46,  // 161: api.trading_data.MarketDataByID:output_type -> api.MarketDataByIDResponse
	47,  // 162: api.trading_data.MarketsData:output_type -> api.MarketsDataResponse
	51,  // 163: api.trading_data.MarketByID:output_type -> api.MarketByIDResponse
	78,  // 164: api.trading_data.MarketDepth:output_type -> api.MarketDepthResponse
	74,  // 165: api.trading_data.Markets:output_type -> api.MarketsResponse
	71,  // 166: api.trading_data.OrderByMarketAndID:output_type -> api.OrderByMarketAndIdResponse
	73,  // 167: api.trading_data.OrderByReference:output_type -> api.OrderByReferenceResponse
	67,  // 168: api.trading_data.OrdersByMarket:output_type -> api.OrdersByMarketResponse
	69,  // 169: api.trading_data.OrdersByParty:output_type -> api.OrdersByPartyResponse
	140, // 170: api.trading_data.OrderByID:output_type -> vega.Order
	101, // 171: api.trading_data.OrderVersionsByID:output_type -> api.OrderVersionsResponse
	43,  // 172: api.trading_data.MarginLevels:output_type -> api.MarginLevelsResponse
	54,  // 173: api.trading_data.Parties:output_type -> api.PartiesResponse
	53,  // 174: api.trading_data.PartyByID:output_type -> api.PartyByIDResponse
	82,  // 175: api.trading_data.PositionsByParty:output_type -> api.PositionsByPartyResponse
	49,  // 176: api.trading_data.LastTrade:output_type -> api.LastTradeResponse
	80,  // 177: api.trading_data.TradesByMarket:output_type -> api.TradesByMarketResponse
	58,  // 178: api.trading_data.TradesByOrder:output_type -> api.TradesByOrderResponse
	56,  // 179: api.trading_data.TradesByParty:output_type -> api.TradesByPartyResponse
	21,  // 180: api.trading_data.GetProposals:output_type -> api.GetProposalsResponse
	23,  // 181: api.trading_data.GetProposalsByParty:output_type -> api.GetProposalsByPartyResponse
	25,  // 182: api.trading_data.GetVotesByParty:output_type -> api.GetVotesByPartyResponse
	27,  // 183: api.trading_data.GetNewMarketProposals:output_type -> api.GetNewMarketProposalsResponse
	29,  // 184: api.trading_data.GetUpdateMarketProposals:output_type -> api.GetUpdateMarketProposalsResponse
	31,  // 185: api.trading_data.GetNetworkParametersProposals:output_type -> api.GetNetworkParametersProposalsResponse
	33,  // 186: api.trading_data.GetNewAssetProposals:output_type -> api.GetNewAssetProposalsResponse
	35,  // 187: api.trading_data.GetProposalByID:output_type -> api.GetProposalByIDResponse
	37,  // 188: api.trading_data.GetProposalByReference:output_type -> api.GetProposalByReferenceResponse
	131, // 189: api.trading_data.ObserveGovernance:output_type -> vega.GovernanceData
	131, // 190: api.trading_data.ObservePartyProposals:output_type -> vega.GovernanceData
	132, // 191: api.trading_data.ObservePartyVotes:output_type -> vega.Vote
	132, // 192: api.trading_data.ObserveProposalVotes:output_type -> vega.Vote
	107, // 193: api.trading_data.ObserveEventBus:output_type -> api.ObserveEventsResponse
	156, // 194: api.trading_data.Statistics:output_type -> vega.Statistics
	83,  // 195: api.trading_data.GetVegaTime:output_type -> api.VegaTimeResponse
	144, // 196: api.trading_data.AccountsSubscribe:output_type -> vega.Account
	141, // 197: api.trading_data.CandlesSubscribe:output_type -> vega.Candle
	133, // 198: api.trading_data.MarginLevelsSubscribe:output_type -> vega.MarginLevels
	157, // 199: api.trading_data.MarketDepthSubscribe:output_type -> vega.MarketDepth
	158, // 200: api.trading_data.MarketDepthUpdatesSubscribe:output_type -> vega.MarketDepthUpdate
	134, // 201: api.trading_data.MarketsDataSubscribe:output_type -> vega.MarketData
	85,  // 202: api.trading_data.OrdersSubscribe:output_type -> api.OrdersStream
	143, // 203: api.trading_data.PositionsSubscribe:output_type -> vega.Position
	86,  // 204: api.trading_data.TradesSubscribe:output_type -> api.TradesStream
	159, // 205: api.trading_data.TransferResponsesSubscribe:output_type -> vega.TransferResponse
	18,  // 206: api.trading_data.GetNodeSignaturesAggregate:output_type -> api.GetNodeSignaturesAggregateResponse
	16,  // 207: api.trading_data.AssetByID:output_type -> api.AssetByIDResponse
	14,  // 208: api.trading_data.Assets:output_type -> api.AssetsResponse
	103, // 209: api.trading_data.EstimateFee:output_type -> api.EstimateFeeResponse
	105, // 210: api.trading_data.EstimateMargin:output_type -> api.EstimateMarginResponse
	113, // 211: api.trading_data.ERC20WithdrawalApproval:output_type -> api.ERC20WithdrawalApprovalResponse
	111, // 212: api.trading_data.Withdrawal:output_type -> api.WithdrawalResponse
	109, // 213: api.trading_data.Withdrawals:output_type -> api.WithdrawalsResponse
	117, // 214: api.trading_data.Deposit:output_type -> api.DepositResponse
	115, // 215: api.trading_data.Deposits:output_type -> api.DepositsResponse
	119, // 216: api.trading_data.NetworkParameters:output_type -> api.NetworkParametersResponse
	121, // 217: api.trading_data.LiquidityProvisions:output_type -> api.LiquidityProvisionsResponse
	148, // [148:218] is the sub-list for method output_type
	78,  // [78:148] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_vega_api_trading_proto_init() }
func file_vega_api_trading_proto_init() {
	if File_vega_api_trading_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vega_api_trading_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagateChainEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagateChainEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareWithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareSubmitOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareCancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareAmendOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSignaturesAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSignaturesAggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalProposalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVotesByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVotesByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewMarketProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewMarketProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateMarketProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateMarketProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkParametersProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkParametersProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAssetProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAssetProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveProposalVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdatesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByMarketAndIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByMarketAndIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VegaTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfrastructureAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfrastructureAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareVoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareLiquidityProvisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareLiquidityProvisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderVersionsByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateMarginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateMarginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20WithdrawalApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20WithdrawalApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_trading_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_api_trading_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   121,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_vega_api_trading_proto_goTypes,
		DependencyIndexes: file_vega_api_trading_proto_depIdxs,
		EnumInfos:         file_vega_api_trading_proto_enumTypes,
		MessageInfos:      file_vega_api_trading_proto_msgTypes,
	}.Build()
	File_vega_api_trading_proto = out.File
	file_vega_api_trading_proto_rawDesc = nil
	file_vega_api_trading_proto_goTypes = nil
	file_vega_api_trading_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TradingClient is the client API for Trading service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingClient interface {
	// Prepare a submit order request
	PrepareSubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*PrepareSubmitOrderResponse, error)
	// Prepare a cancel order request
	PrepareCancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*PrepareCancelOrderResponse, error)
	// Prepare an amend order request
	PrepareAmendOrder(ctx context.Context, in *AmendOrderRequest, opts ...grpc.CallOption) (*PrepareAmendOrderResponse, error)
	// Request a withdrawal
	PrepareWithdraw(ctx context.Context, in *PrepareWithdrawRequest, opts ...grpc.CallOption) (*PrepareWithdrawResponse, error)
	// Submit a signed transaction
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
	// Prepare a governance proposal
	PrepareProposal(ctx context.Context, in *PrepareProposalRequest, opts ...grpc.CallOption) (*PrepareProposalResponse, error)
	// Prepare a governance vote
	PrepareVote(ctx context.Context, in *PrepareVoteRequest, opts ...grpc.CallOption) (*PrepareVoteResponse, error)
	// Propagate a chain event
	PropagateChainEvent(ctx context.Context, in *PropagateChainEventRequest, opts ...grpc.CallOption) (*PropagateChainEventResponse, error)
	PrepareLiquidityProvision(ctx context.Context, in *PrepareLiquidityProvisionRequest, opts ...grpc.CallOption) (*PrepareLiquidityProvisionResponse, error)
}

type tradingClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingClient(cc grpc.ClientConnInterface) TradingClient {
	return &tradingClient{cc}
}

func (c *tradingClient) PrepareSubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*PrepareSubmitOrderResponse, error) {
	out := new(PrepareSubmitOrderResponse)
	err := c.cc.Invoke(ctx, "/api.trading/PrepareSubmitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) PrepareCancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*PrepareCancelOrderResponse, error) {
	out := new(PrepareCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/api.trading/PrepareCancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) PrepareAmendOrder(ctx context.Context, in *AmendOrderRequest, opts ...grpc.CallOption) (*PrepareAmendOrderResponse, error) {
	out := new(PrepareAmendOrderResponse)
	err := c.cc.Invoke(ctx, "/api.trading/PrepareAmendOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) PrepareWithdraw(ctx context.Context, in *PrepareWithdrawRequest, opts ...grpc.CallOption) (*PrepareWithdrawResponse, error) {
	out := new(PrepareWithdrawResponse)
	err := c.cc.Invoke(ctx, "/api.trading/PrepareWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/api.trading/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) PrepareProposal(ctx context.Context, in *PrepareProposalRequest, opts ...grpc.CallOption) (*PrepareProposalResponse, error) {
	out := new(PrepareProposalResponse)
	err := c.cc.Invoke(ctx, "/api.trading/PrepareProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) PrepareVote(ctx context.Context, in *PrepareVoteRequest, opts ...grpc.CallOption) (*PrepareVoteResponse, error) {
	out := new(PrepareVoteResponse)
	err := c.cc.Invoke(ctx, "/api.trading/PrepareVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) PropagateChainEvent(ctx context.Context, in *PropagateChainEventRequest, opts ...grpc.CallOption) (*PropagateChainEventResponse, error) {
	out := new(PropagateChainEventResponse)
	err := c.cc.Invoke(ctx, "/api.trading/PropagateChainEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) PrepareLiquidityProvision(ctx context.Context, in *PrepareLiquidityProvisionRequest, opts ...grpc.CallOption) (*PrepareLiquidityProvisionResponse, error) {
	out := new(PrepareLiquidityProvisionResponse)
	err := c.cc.Invoke(ctx, "/api.trading/PrepareLiquidityProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServer is the server API for Trading service.
type TradingServer interface {
	// Prepare a submit order request
	PrepareSubmitOrder(context.Context, *SubmitOrderRequest) (*PrepareSubmitOrderResponse, error)
	// Prepare a cancel order request
	PrepareCancelOrder(context.Context, *CancelOrderRequest) (*PrepareCancelOrderResponse, error)
	// Prepare an amend order request
	PrepareAmendOrder(context.Context, *AmendOrderRequest) (*PrepareAmendOrderResponse, error)
	// Request a withdrawal
	PrepareWithdraw(context.Context, *PrepareWithdrawRequest) (*PrepareWithdrawResponse, error)
	// Submit a signed transaction
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	// Prepare a governance proposal
	PrepareProposal(context.Context, *PrepareProposalRequest) (*PrepareProposalResponse, error)
	// Prepare a governance vote
	PrepareVote(context.Context, *PrepareVoteRequest) (*PrepareVoteResponse, error)
	// Propagate a chain event
	PropagateChainEvent(context.Context, *PropagateChainEventRequest) (*PropagateChainEventResponse, error)
	PrepareLiquidityProvision(context.Context, *PrepareLiquidityProvisionRequest) (*PrepareLiquidityProvisionResponse, error)
}

// UnimplementedTradingServer can be embedded to have forward compatible implementations.
type UnimplementedTradingServer struct {
}

func (*UnimplementedTradingServer) PrepareSubmitOrder(context.Context, *SubmitOrderRequest) (*PrepareSubmitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSubmitOrder not implemented")
}
func (*UnimplementedTradingServer) PrepareCancelOrder(context.Context, *CancelOrderRequest) (*PrepareCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCancelOrder not implemented")
}
func (*UnimplementedTradingServer) PrepareAmendOrder(context.Context, *AmendOrderRequest) (*PrepareAmendOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareAmendOrder not implemented")
}
func (*UnimplementedTradingServer) PrepareWithdraw(context.Context, *PrepareWithdrawRequest) (*PrepareWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareWithdraw not implemented")
}
func (*UnimplementedTradingServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (*UnimplementedTradingServer) PrepareProposal(context.Context, *PrepareProposalRequest) (*PrepareProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareProposal not implemented")
}
func (*UnimplementedTradingServer) PrepareVote(context.Context, *PrepareVoteRequest) (*PrepareVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareVote not implemented")
}
func (*UnimplementedTradingServer) PropagateChainEvent(context.Context, *PropagateChainEventRequest) (*PropagateChainEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagateChainEvent not implemented")
}
func (*UnimplementedTradingServer) PrepareLiquidityProvision(context.Context, *PrepareLiquidityProvisionRequest) (*PrepareLiquidityProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareLiquidityProvision not implemented")
}

func RegisterTradingServer(s *grpc.Server, srv TradingServer) {
	s.RegisterService(&_Trading_serviceDesc, srv)
}

func _Trading_PrepareSubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).PrepareSubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/PrepareSubmitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).PrepareSubmitOrder(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_PrepareCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).PrepareCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/PrepareCancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).PrepareCancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_PrepareAmendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmendOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).PrepareAmendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/PrepareAmendOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).PrepareAmendOrder(ctx, req.(*AmendOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_PrepareWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).PrepareWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/PrepareWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).PrepareWithdraw(ctx, req.(*PrepareWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_PrepareProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).PrepareProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/PrepareProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).PrepareProposal(ctx, req.(*PrepareProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_PrepareVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).PrepareVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/PrepareVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).PrepareVote(ctx, req.(*PrepareVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_PropagateChainEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagateChainEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).PropagateChainEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/PropagateChainEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).PropagateChainEvent(ctx, req.(*PropagateChainEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_PrepareLiquidityProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareLiquidityProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).PrepareLiquidityProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/PrepareLiquidityProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).PrepareLiquidityProvision(ctx, req.(*PrepareLiquidityProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trading_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.trading",
	HandlerType: (*TradingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareSubmitOrder",
			Handler:    _Trading_PrepareSubmitOrder_Handler,
		},
		{
			MethodName: "PrepareCancelOrder",
			Handler:    _Trading_PrepareCancelOrder_Handler,
		},
		{
			MethodName: "PrepareAmendOrder",
			Handler:    _Trading_PrepareAmendOrder_Handler,
		},
		{
			MethodName: "PrepareWithdraw",
			Handler:    _Trading_PrepareWithdraw_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _Trading_SubmitTransaction_Handler,
		},
		{
			MethodName: "PrepareProposal",
			Handler:    _Trading_PrepareProposal_Handler,
		},
		{
			MethodName: "PrepareVote",
			Handler:    _Trading_PrepareVote_Handler,
		},
		{
			MethodName: "PropagateChainEvent",
			Handler:    _Trading_PropagateChainEvent_Handler,
		},
		{
			MethodName: "PrepareLiquidityProvision",
			Handler:    _Trading_PrepareLiquidityProvision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vega/api/trading.proto",
}

// TradingDataClient is the client API for TradingData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingDataClient interface {
	// Get a list of Accounts by Market
	MarketAccounts(ctx context.Context, in *MarketAccountsRequest, opts ...grpc.CallOption) (*MarketAccountsResponse, error)
	// Get a list of Accounts by Party
	PartyAccounts(ctx context.Context, in *PartyAccountsRequest, opts ...grpc.CallOption) (*PartyAccountsResponse, error)
	// Get the list of infrastructure fees accounts filter eventually by assets
	FeeInfrastructureAccounts(ctx context.Context, in *FeeInfrastructureAccountsRequest, opts ...grpc.CallOption) (*FeeInfrastructureAccountsResponse, error)
	// Get a list of Candles by Market
	Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error)
	// Get Market Data by MarketID
	MarketDataByID(ctx context.Context, in *MarketDataByIDRequest, opts ...grpc.CallOption) (*MarketDataByIDResponse, error)
	// Get a list of Market Data
	MarketsData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MarketsDataResponse, error)
	// Get a Market by ID
	MarketByID(ctx context.Context, in *MarketByIDRequest, opts ...grpc.CallOption) (*MarketByIDResponse, error)
	// Get Market Depth
	MarketDepth(ctx context.Context, in *MarketDepthRequest, opts ...grpc.CallOption) (*MarketDepthResponse, error)
	// Get a list of Markets
	Markets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MarketsResponse, error)
	// Get an Order by Market and OrderID
	OrderByMarketAndID(ctx context.Context, in *OrderByMarketAndIdRequest, opts ...grpc.CallOption) (*OrderByMarketAndIdResponse, error)
	// Get an Order by Pending Order reference (UUID)
	OrderByReference(ctx context.Context, in *OrderByReferenceRequest, opts ...grpc.CallOption) (*OrderByReferenceResponse, error)
	// Get a list of Orders by Market
	OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersByMarketResponse, error)
	// Get a list of Orders by Party
	OrdersByParty(ctx context.Context, in *OrdersByPartyRequest, opts ...grpc.CallOption) (*OrdersByPartyResponse, error)
	// Get a specific order by orderID
	OrderByID(ctx context.Context, in *OrderByIDRequest, opts ...grpc.CallOption) (*proto.Order, error)
	// Get all versions of the order by its orderID
	OrderVersionsByID(ctx context.Context, in *OrderVersionsByIDRequest, opts ...grpc.CallOption) (*OrderVersionsResponse, error)
	// Get Margin Levels by PartyID
	MarginLevels(ctx context.Context, in *MarginLevelsRequest, opts ...grpc.CallOption) (*MarginLevelsResponse, error)
	// Get a list of Parties
	Parties(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PartiesResponse, error)
	// Get a Party by ID
	PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error)
	// Get a list of Positions by Party
	PositionsByParty(ctx context.Context, in *PositionsByPartyRequest, opts ...grpc.CallOption) (*PositionsByPartyResponse, error)
	// Get latest Trade
	LastTrade(ctx context.Context, in *LastTradeRequest, opts ...grpc.CallOption) (*LastTradeResponse, error)
	// Get a list of Trades by Market
	TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesByMarketResponse, error)
	// Get a list of Trades by Order
	TradesByOrder(ctx context.Context, in *TradesByOrderRequest, opts ...grpc.CallOption) (*TradesByOrderResponse, error)
	// Get a list of Trades by Party
	TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesByPartyResponse, error)
	// Get governance data (proposals and votes) for all proposals
	GetProposals(ctx context.Context, in *GetProposalsRequest, opts ...grpc.CallOption) (*GetProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals by party authoring them
	GetProposalsByParty(ctx context.Context, in *GetProposalsByPartyRequest, opts ...grpc.CallOption) (*GetProposalsByPartyResponse, error)
	// Get votes by party casting them
	GetVotesByParty(ctx context.Context, in *GetVotesByPartyRequest, opts ...grpc.CallOption) (*GetVotesByPartyResponse, error)
	// Get governance data (proposals and votes) for proposals that aim creating new markets
	GetNewMarketProposals(ctx context.Context, in *GetNewMarketProposalsRequest, opts ...grpc.CallOption) (*GetNewMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating markets
	GetUpdateMarketProposals(ctx context.Context, in *GetUpdateMarketProposalsRequest, opts ...grpc.CallOption) (*GetUpdateMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating Vega network parameters
	GetNetworkParametersProposals(ctx context.Context, in *GetNetworkParametersProposalsRequest, opts ...grpc.CallOption) (*GetNetworkParametersProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals aiming to create new assets
	GetNewAssetProposals(ctx context.Context, in *GetNewAssetProposalsRequest, opts ...grpc.CallOption) (*GetNewAssetProposalsResponse, error)
	// Get governance data (proposals and votes) for a proposal located by ID
	GetProposalByID(ctx context.Context, in *GetProposalByIDRequest, opts ...grpc.CallOption) (*GetProposalByIDResponse, error)
	// Get governance data (proposals and votes) for a proposal located by reference
	GetProposalByReference(ctx context.Context, in *GetProposalByReferenceRequest, opts ...grpc.CallOption) (*GetProposalByReferenceResponse, error)
	// Subscribe to a stream of all governance updates
	ObserveGovernance(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TradingData_ObserveGovernanceClient, error)
	// Subscribe to a stream of proposal updates
	ObservePartyProposals(ctx context.Context, in *ObservePartyProposalsRequest, opts ...grpc.CallOption) (TradingData_ObservePartyProposalsClient, error)
	// Subscribe to a stream of votes cast by a specific party
	ObservePartyVotes(ctx context.Context, in *ObservePartyVotesRequest, opts ...grpc.CallOption) (TradingData_ObservePartyVotesClient, error)
	// Subscribe to a stream of proposal votes
	ObserveProposalVotes(ctx context.Context, in *ObserveProposalVotesRequest, opts ...grpc.CallOption) (TradingData_ObserveProposalVotesClient, error)
	// Subscribe to a stream of events from the core
	ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingData_ObserveEventBusClient, error)
	// Get Statistics
	Statistics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto.Statistics, error)
	// Get Time
	GetVegaTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VegaTimeResponse, error)
	// Subscribe to a stream of Accounts
	AccountsSubscribe(ctx context.Context, in *AccountsSubscribeRequest, opts ...grpc.CallOption) (TradingData_AccountsSubscribeClient, error)
	// Subscribe to a stream of Candles
	CandlesSubscribe(ctx context.Context, in *CandlesSubscribeRequest, opts ...grpc.CallOption) (TradingData_CandlesSubscribeClient, error)
	// Subscribe to a stream of Margin Levels
	MarginLevelsSubscribe(ctx context.Context, in *MarginLevelsSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarginLevelsSubscribeClient, error)
	// Subscribe to a stream of Market Depth
	MarketDepthSubscribe(ctx context.Context, in *MarketDepthSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarketDepthSubscribeClient, error)
	// Subscribe to a stream of Market Depth PriceLevel Updates
	MarketDepthUpdatesSubscribe(ctx context.Context, in *MarketDepthUpdatesSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarketDepthUpdatesSubscribeClient, error)
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarketsDataSubscribeClient, error)
	// Subscribe to a stream of Orders
	OrdersSubscribe(ctx context.Context, in *OrdersSubscribeRequest, opts ...grpc.CallOption) (TradingData_OrdersSubscribeClient, error)
	// Subscribe to a stream of Positions
	PositionsSubscribe(ctx context.Context, in *PositionsSubscribeRequest, opts ...grpc.CallOption) (TradingData_PositionsSubscribeClient, error)
	// Subscribe to a stream of Trades
	TradesSubscribe(ctx context.Context, in *TradesSubscribeRequest, opts ...grpc.CallOption) (TradingData_TradesSubscribeClient, error)
	// Subscribe to a stream of Transfer Responses
	TransferResponsesSubscribe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TradingData_TransferResponsesSubscribeClient, error)
	// Get an aggregate of signatures from all the nodes of the network.
	GetNodeSignaturesAggregate(ctx context.Context, in *GetNodeSignaturesAggregateRequest, opts ...grpc.CallOption) (*GetNodeSignaturesAggregateResponse, error)
	// Get an asset by its identifier.
	AssetByID(ctx context.Context, in *AssetByIDRequest, opts ...grpc.CallOption) (*AssetByIDResponse, error)
	// Get a list of all assets on Vega.
	Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (*AssetsResponse, error)
	// Get an estimate for the fee to be paid for a given order
	EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error)
	// Get an estimate for the margin required for a new order
	EstimateMargin(ctx context.Context, in *EstimateMarginRequest, opts ...grpc.CallOption) (*EstimateMarginResponse, error)
	// Get the bundle approval for an ERC20 withdrawal
	// these data are being used to bundle the call to the smart contract on the ethereum bridge
	ERC20WithdrawalApproval(ctx context.Context, in *ERC20WithdrawalApprovalRequest, opts ...grpc.CallOption) (*ERC20WithdrawalApprovalResponse, error)
	// Get a withdrawal by its ID
	Withdrawal(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// Get withdrawals for a party
	Withdrawals(ctx context.Context, in *WithdrawalsRequest, opts ...grpc.CallOption) (*WithdrawalsResponse, error)
	// Get a deposit by its ID
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// Get withdrawals for a party
	Deposits(ctx context.Context, in *DepositsRequest, opts ...grpc.CallOption) (*DepositsResponse, error)
	// Get the network parameters
	NetworkParameters(ctx context.Context, in *NetworkParametersRequest, opts ...grpc.CallOption) (*NetworkParametersResponse, error)
	// Get the liquidity provision orders
	LiquidityProvisions(ctx context.Context, in *LiquidityProvisionsRequest, opts ...grpc.CallOption) (*LiquidityProvisionsResponse, error)
}

type tradingDataClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingDataClient(cc grpc.ClientConnInterface) TradingDataClient {
	return &tradingDataClient{cc}
}

func (c *tradingDataClient) MarketAccounts(ctx context.Context, in *MarketAccountsRequest, opts ...grpc.CallOption) (*MarketAccountsResponse, error) {
	out := new(MarketAccountsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/MarketAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) PartyAccounts(ctx context.Context, in *PartyAccountsRequest, opts ...grpc.CallOption) (*PartyAccountsResponse, error) {
	out := new(PartyAccountsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/PartyAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) FeeInfrastructureAccounts(ctx context.Context, in *FeeInfrastructureAccountsRequest, opts ...grpc.CallOption) (*FeeInfrastructureAccountsResponse, error) {
	out := new(FeeInfrastructureAccountsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/FeeInfrastructureAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error) {
	out := new(CandlesResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Candles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) MarketDataByID(ctx context.Context, in *MarketDataByIDRequest, opts ...grpc.CallOption) (*MarketDataByIDResponse, error) {
	out := new(MarketDataByIDResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/MarketDataByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) MarketsData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MarketsDataResponse, error) {
	out := new(MarketsDataResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/MarketsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) MarketByID(ctx context.Context, in *MarketByIDRequest, opts ...grpc.CallOption) (*MarketByIDResponse, error) {
	out := new(MarketByIDResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/MarketByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) MarketDepth(ctx context.Context, in *MarketDepthRequest, opts ...grpc.CallOption) (*MarketDepthResponse, error) {
	out := new(MarketDepthResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/MarketDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Markets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MarketsResponse, error) {
	out := new(MarketsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Markets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrderByMarketAndID(ctx context.Context, in *OrderByMarketAndIdRequest, opts ...grpc.CallOption) (*OrderByMarketAndIdResponse, error) {
	out := new(OrderByMarketAndIdResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrderByMarketAndID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrderByReference(ctx context.Context, in *OrderByReferenceRequest, opts ...grpc.CallOption) (*OrderByReferenceResponse, error) {
	out := new(OrderByReferenceResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrderByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersByMarketResponse, error) {
	out := new(OrdersByMarketResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrdersByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrdersByParty(ctx context.Context, in *OrdersByPartyRequest, opts ...grpc.CallOption) (*OrdersByPartyResponse, error) {
	out := new(OrdersByPartyResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrdersByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrderByID(ctx context.Context, in *OrderByIDRequest, opts ...grpc.CallOption) (*proto.Order, error) {
	out := new(proto.Order)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrderVersionsByID(ctx context.Context, in *OrderVersionsByIDRequest, opts ...grpc.CallOption) (*OrderVersionsResponse, error) {
	out := new(OrderVersionsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrderVersionsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) MarginLevels(ctx context.Context, in *MarginLevelsRequest, opts ...grpc.CallOption) (*MarginLevelsResponse, error) {
	out := new(MarginLevelsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/MarginLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Parties(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PartiesResponse, error) {
	out := new(PartiesResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Parties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error) {
	out := new(PartyByIDResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/PartyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) PositionsByParty(ctx context.Context, in *PositionsByPartyRequest, opts ...grpc.CallOption) (*PositionsByPartyResponse, error) {
	out := new(PositionsByPartyResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/PositionsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) LastTrade(ctx context.Context, in *LastTradeRequest, opts ...grpc.CallOption) (*LastTradeResponse, error) {
	out := new(LastTradeResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/LastTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesByMarketResponse, error) {
	out := new(TradesByMarketResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/TradesByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) TradesByOrder(ctx context.Context, in *TradesByOrderRequest, opts ...grpc.CallOption) (*TradesByOrderResponse, error) {
	out := new(TradesByOrderResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/TradesByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesByPartyResponse, error) {
	out := new(TradesByPartyResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/TradesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetProposals(ctx context.Context, in *GetProposalsRequest, opts ...grpc.CallOption) (*GetProposalsResponse, error) {
	out := new(GetProposalsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetProposalsByParty(ctx context.Context, in *GetProposalsByPartyRequest, opts ...grpc.CallOption) (*GetProposalsByPartyResponse, error) {
	out := new(GetProposalsByPartyResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetProposalsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetVotesByParty(ctx context.Context, in *GetVotesByPartyRequest, opts ...grpc.CallOption) (*GetVotesByPartyResponse, error) {
	out := new(GetVotesByPartyResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetVotesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetNewMarketProposals(ctx context.Context, in *GetNewMarketProposalsRequest, opts ...grpc.CallOption) (*GetNewMarketProposalsResponse, error) {
	out := new(GetNewMarketProposalsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetNewMarketProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetUpdateMarketProposals(ctx context.Context, in *GetUpdateMarketProposalsRequest, opts ...grpc.CallOption) (*GetUpdateMarketProposalsResponse, error) {
	out := new(GetUpdateMarketProposalsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetUpdateMarketProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetNetworkParametersProposals(ctx context.Context, in *GetNetworkParametersProposalsRequest, opts ...grpc.CallOption) (*GetNetworkParametersProposalsResponse, error) {
	out := new(GetNetworkParametersProposalsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetNetworkParametersProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetNewAssetProposals(ctx context.Context, in *GetNewAssetProposalsRequest, opts ...grpc.CallOption) (*GetNewAssetProposalsResponse, error) {
	out := new(GetNewAssetProposalsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetNewAssetProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetProposalByID(ctx context.Context, in *GetProposalByIDRequest, opts ...grpc.CallOption) (*GetProposalByIDResponse, error) {
	out := new(GetProposalByIDResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetProposalByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetProposalByReference(ctx context.Context, in *GetProposalByReferenceRequest, opts ...grpc.CallOption) (*GetProposalByReferenceResponse, error) {
	out := new(GetProposalByReferenceResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetProposalByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) ObserveGovernance(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TradingData_ObserveGovernanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[0], "/api.trading_data/ObserveGovernance", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataObserveGovernanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_ObserveGovernanceClient interface {
	Recv() (*proto.GovernanceData, error)
	grpc.ClientStream
}

type tradingDataObserveGovernanceClient struct {
	grpc.ClientStream
}

func (x *tradingDataObserveGovernanceClient) Recv() (*proto.GovernanceData, error) {
	m := new(proto.GovernanceData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) ObservePartyProposals(ctx context.Context, in *ObservePartyProposalsRequest, opts ...grpc.CallOption) (TradingData_ObservePartyProposalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[1], "/api.trading_data/ObservePartyProposals", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataObservePartyProposalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_ObservePartyProposalsClient interface {
	Recv() (*proto.GovernanceData, error)
	grpc.ClientStream
}

type tradingDataObservePartyProposalsClient struct {
	grpc.ClientStream
}

func (x *tradingDataObservePartyProposalsClient) Recv() (*proto.GovernanceData, error) {
	m := new(proto.GovernanceData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) ObservePartyVotes(ctx context.Context, in *ObservePartyVotesRequest, opts ...grpc.CallOption) (TradingData_ObservePartyVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[2], "/api.trading_data/ObservePartyVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataObservePartyVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_ObservePartyVotesClient interface {
	Recv() (*proto.Vote, error)
	grpc.ClientStream
}

type tradingDataObservePartyVotesClient struct {
	grpc.ClientStream
}

func (x *tradingDataObservePartyVotesClient) Recv() (*proto.Vote, error) {
	m := new(proto.Vote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) ObserveProposalVotes(ctx context.Context, in *ObserveProposalVotesRequest, opts ...grpc.CallOption) (TradingData_ObserveProposalVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[3], "/api.trading_data/ObserveProposalVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataObserveProposalVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_ObserveProposalVotesClient interface {
	Recv() (*proto.Vote, error)
	grpc.ClientStream
}

type tradingDataObserveProposalVotesClient struct {
	grpc.ClientStream
}

func (x *tradingDataObserveProposalVotesClient) Recv() (*proto.Vote, error) {
	m := new(proto.Vote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingData_ObserveEventBusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[4], "/api.trading_data/ObserveEventBus", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataObserveEventBusClient{stream}
	return x, nil
}

type TradingData_ObserveEventBusClient interface {
	Send(*ObserveEventsRequest) error
	Recv() (*ObserveEventsResponse, error)
	grpc.ClientStream
}

type tradingDataObserveEventBusClient struct {
	grpc.ClientStream
}

func (x *tradingDataObserveEventBusClient) Send(m *ObserveEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradingDataObserveEventBusClient) Recv() (*ObserveEventsResponse, error) {
	m := new(ObserveEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) Statistics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto.Statistics, error) {
	out := new(proto.Statistics)
	err := c.cc.Invoke(ctx, "/api.trading_data/Statistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetVegaTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VegaTimeResponse, error) {
	out := new(VegaTimeResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetVegaTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) AccountsSubscribe(ctx context.Context, in *AccountsSubscribeRequest, opts ...grpc.CallOption) (TradingData_AccountsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[5], "/api.trading_data/AccountsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataAccountsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_AccountsSubscribeClient interface {
	Recv() (*proto.Account, error)
	grpc.ClientStream
}

type tradingDataAccountsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataAccountsSubscribeClient) Recv() (*proto.Account, error) {
	m := new(proto.Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) CandlesSubscribe(ctx context.Context, in *CandlesSubscribeRequest, opts ...grpc.CallOption) (TradingData_CandlesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[6], "/api.trading_data/CandlesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataCandlesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_CandlesSubscribeClient interface {
	Recv() (*proto.Candle, error)
	grpc.ClientStream
}

type tradingDataCandlesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataCandlesSubscribeClient) Recv() (*proto.Candle, error) {
	m := new(proto.Candle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) MarginLevelsSubscribe(ctx context.Context, in *MarginLevelsSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarginLevelsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[7], "/api.trading_data/MarginLevelsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataMarginLevelsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_MarginLevelsSubscribeClient interface {
	Recv() (*proto.MarginLevels, error)
	grpc.ClientStream
}

type tradingDataMarginLevelsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataMarginLevelsSubscribeClient) Recv() (*proto.MarginLevels, error) {
	m := new(proto.MarginLevels)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) MarketDepthSubscribe(ctx context.Context, in *MarketDepthSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarketDepthSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[8], "/api.trading_data/MarketDepthSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataMarketDepthSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_MarketDepthSubscribeClient interface {
	Recv() (*proto.MarketDepth, error)
	grpc.ClientStream
}

type tradingDataMarketDepthSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataMarketDepthSubscribeClient) Recv() (*proto.MarketDepth, error) {
	m := new(proto.MarketDepth)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) MarketDepthUpdatesSubscribe(ctx context.Context, in *MarketDepthUpdatesSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarketDepthUpdatesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[9], "/api.trading_data/MarketDepthUpdatesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataMarketDepthUpdatesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_MarketDepthUpdatesSubscribeClient interface {
	Recv() (*proto.MarketDepthUpdate, error)
	grpc.ClientStream
}

type tradingDataMarketDepthUpdatesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataMarketDepthUpdatesSubscribeClient) Recv() (*proto.MarketDepthUpdate, error) {
	m := new(proto.MarketDepthUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarketsDataSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[10], "/api.trading_data/MarketsDataSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataMarketsDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_MarketsDataSubscribeClient interface {
	Recv() (*proto.MarketData, error)
	grpc.ClientStream
}

type tradingDataMarketsDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataMarketsDataSubscribeClient) Recv() (*proto.MarketData, error) {
	m := new(proto.MarketData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) OrdersSubscribe(ctx context.Context, in *OrdersSubscribeRequest, opts ...grpc.CallOption) (TradingData_OrdersSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[11], "/api.trading_data/OrdersSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataOrdersSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_OrdersSubscribeClient interface {
	Recv() (*OrdersStream, error)
	grpc.ClientStream
}

type tradingDataOrdersSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataOrdersSubscribeClient) Recv() (*OrdersStream, error) {
	m := new(OrdersStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) PositionsSubscribe(ctx context.Context, in *PositionsSubscribeRequest, opts ...grpc.CallOption) (TradingData_PositionsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[12], "/api.trading_data/PositionsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataPositionsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_PositionsSubscribeClient interface {
	Recv() (*proto.Position, error)
	grpc.ClientStream
}

type tradingDataPositionsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataPositionsSubscribeClient) Recv() (*proto.Position, error) {
	m := new(proto.Position)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) TradesSubscribe(ctx context.Context, in *TradesSubscribeRequest, opts ...grpc.CallOption) (TradingData_TradesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[13], "/api.trading_data/TradesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataTradesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_TradesSubscribeClient interface {
	Recv() (*TradesStream, error)
	grpc.ClientStream
}

type tradingDataTradesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataTradesSubscribeClient) Recv() (*TradesStream, error) {
	m := new(TradesStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) TransferResponsesSubscribe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TradingData_TransferResponsesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[14], "/api.trading_data/TransferResponsesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataTransferResponsesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_TransferResponsesSubscribeClient interface {
	Recv() (*proto.TransferResponse, error)
	grpc.ClientStream
}

type tradingDataTransferResponsesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataTransferResponsesSubscribeClient) Recv() (*proto.TransferResponse, error) {
	m := new(proto.TransferResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) GetNodeSignaturesAggregate(ctx context.Context, in *GetNodeSignaturesAggregateRequest, opts ...grpc.CallOption) (*GetNodeSignaturesAggregateResponse, error) {
	out := new(GetNodeSignaturesAggregateResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetNodeSignaturesAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) AssetByID(ctx context.Context, in *AssetByIDRequest, opts ...grpc.CallOption) (*AssetByIDResponse, error) {
	out := new(AssetByIDResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/AssetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (*AssetsResponse, error) {
	out := new(AssetsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error) {
	out := new(EstimateFeeResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/EstimateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) EstimateMargin(ctx context.Context, in *EstimateMarginRequest, opts ...grpc.CallOption) (*EstimateMarginResponse, error) {
	out := new(EstimateMarginResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/EstimateMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) ERC20WithdrawalApproval(ctx context.Context, in *ERC20WithdrawalApprovalRequest, opts ...grpc.CallOption) (*ERC20WithdrawalApprovalResponse, error) {
	out := new(ERC20WithdrawalApprovalResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/ERC20WithdrawalApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Withdrawal(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Withdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Withdrawals(ctx context.Context, in *WithdrawalsRequest, opts ...grpc.CallOption) (*WithdrawalsResponse, error) {
	out := new(WithdrawalsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Withdrawals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Deposits(ctx context.Context, in *DepositsRequest, opts ...grpc.CallOption) (*DepositsResponse, error) {
	out := new(DepositsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Deposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) NetworkParameters(ctx context.Context, in *NetworkParametersRequest, opts ...grpc.CallOption) (*NetworkParametersResponse, error) {
	out := new(NetworkParametersResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/NetworkParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) LiquidityProvisions(ctx context.Context, in *LiquidityProvisionsRequest, opts ...grpc.CallOption) (*LiquidityProvisionsResponse, error) {
	out := new(LiquidityProvisionsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/LiquidityProvisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServer is the server API for TradingData service.
type TradingDataServer interface {
	// Get a list of Accounts by Market
	MarketAccounts(context.Context, *MarketAccountsRequest) (*MarketAccountsResponse, error)
	// Get a list of Accounts by Party
	PartyAccounts(context.Context, *PartyAccountsRequest) (*PartyAccountsResponse, error)
	// Get the list of infrastructure fees accounts filter eventually by assets
	FeeInfrastructureAccounts(context.Context, *FeeInfrastructureAccountsRequest) (*FeeInfrastructureAccountsResponse, error)
	// Get a list of Candles by Market
	Candles(context.Context, *CandlesRequest) (*CandlesResponse, error)
	// Get Market Data by MarketID
	MarketDataByID(context.Context, *MarketDataByIDRequest) (*MarketDataByIDResponse, error)
	// Get a list of Market Data
	MarketsData(context.Context, *empty.Empty) (*MarketsDataResponse, error)
	// Get a Market by ID
	MarketByID(context.Context, *MarketByIDRequest) (*MarketByIDResponse, error)
	// Get Market Depth
	MarketDepth(context.Context, *MarketDepthRequest) (*MarketDepthResponse, error)
	// Get a list of Markets
	Markets(context.Context, *empty.Empty) (*MarketsResponse, error)
	// Get an Order by Market and OrderID
	OrderByMarketAndID(context.Context, *OrderByMarketAndIdRequest) (*OrderByMarketAndIdResponse, error)
	// Get an Order by Pending Order reference (UUID)
	OrderByReference(context.Context, *OrderByReferenceRequest) (*OrderByReferenceResponse, error)
	// Get a list of Orders by Market
	OrdersByMarket(context.Context, *OrdersByMarketRequest) (*OrdersByMarketResponse, error)
	// Get a list of Orders by Party
	OrdersByParty(context.Context, *OrdersByPartyRequest) (*OrdersByPartyResponse, error)
	// Get a specific order by orderID
	OrderByID(context.Context, *OrderByIDRequest) (*proto.Order, error)
	// Get all versions of the order by its orderID
	OrderVersionsByID(context.Context, *OrderVersionsByIDRequest) (*OrderVersionsResponse, error)
	// Get Margin Levels by PartyID
	MarginLevels(context.Context, *MarginLevelsRequest) (*MarginLevelsResponse, error)
	// Get a list of Parties
	Parties(context.Context, *empty.Empty) (*PartiesResponse, error)
	// Get a Party by ID
	PartyByID(context.Context, *PartyByIDRequest) (*PartyByIDResponse, error)
	// Get a list of Positions by Party
	PositionsByParty(context.Context, *PositionsByPartyRequest) (*PositionsByPartyResponse, error)
	// Get latest Trade
	LastTrade(context.Context, *LastTradeRequest) (*LastTradeResponse, error)
	// Get a list of Trades by Market
	TradesByMarket(context.Context, *TradesByMarketRequest) (*TradesByMarketResponse, error)
	// Get a list of Trades by Order
	TradesByOrder(context.Context, *TradesByOrderRequest) (*TradesByOrderResponse, error)
	// Get a list of Trades by Party
	TradesByParty(context.Context, *TradesByPartyRequest) (*TradesByPartyResponse, error)
	// Get governance data (proposals and votes) for all proposals
	GetProposals(context.Context, *GetProposalsRequest) (*GetProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals by party authoring them
	GetProposalsByParty(context.Context, *GetProposalsByPartyRequest) (*GetProposalsByPartyResponse, error)
	// Get votes by party casting them
	GetVotesByParty(context.Context, *GetVotesByPartyRequest) (*GetVotesByPartyResponse, error)
	// Get governance data (proposals and votes) for proposals that aim creating new markets
	GetNewMarketProposals(context.Context, *GetNewMarketProposalsRequest) (*GetNewMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating markets
	GetUpdateMarketProposals(context.Context, *GetUpdateMarketProposalsRequest) (*GetUpdateMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating Vega network parameters
	GetNetworkParametersProposals(context.Context, *GetNetworkParametersProposalsRequest) (*GetNetworkParametersProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals aiming to create new assets
	GetNewAssetProposals(context.Context, *GetNewAssetProposalsRequest) (*GetNewAssetProposalsResponse, error)
	// Get governance data (proposals and votes) for a proposal located by ID
	GetProposalByID(context.Context, *GetProposalByIDRequest) (*GetProposalByIDResponse, error)
	// Get governance data (proposals and votes) for a proposal located by reference
	GetProposalByReference(context.Context, *GetProposalByReferenceRequest) (*GetProposalByReferenceResponse, error)
	// Subscribe to a stream of all governance updates
	ObserveGovernance(*empty.Empty, TradingData_ObserveGovernanceServer) error
	// Subscribe to a stream of proposal updates
	ObservePartyProposals(*ObservePartyProposalsRequest, TradingData_ObservePartyProposalsServer) error
	// Subscribe to a stream of votes cast by a specific party
	ObservePartyVotes(*ObservePartyVotesRequest, TradingData_ObservePartyVotesServer) error
	// Subscribe to a stream of proposal votes
	ObserveProposalVotes(*ObserveProposalVotesRequest, TradingData_ObserveProposalVotesServer) error
	// Subscribe to a stream of events from the core
	ObserveEventBus(TradingData_ObserveEventBusServer) error
	// Get Statistics
	Statistics(context.Context, *empty.Empty) (*proto.Statistics, error)
	// Get Time
	GetVegaTime(context.Context, *empty.Empty) (*VegaTimeResponse, error)
	// Subscribe to a stream of Accounts
	AccountsSubscribe(*AccountsSubscribeRequest, TradingData_AccountsSubscribeServer) error
	// Subscribe to a stream of Candles
	CandlesSubscribe(*CandlesSubscribeRequest, TradingData_CandlesSubscribeServer) error
	// Subscribe to a stream of Margin Levels
	MarginLevelsSubscribe(*MarginLevelsSubscribeRequest, TradingData_MarginLevelsSubscribeServer) error
	// Subscribe to a stream of Market Depth
	MarketDepthSubscribe(*MarketDepthSubscribeRequest, TradingData_MarketDepthSubscribeServer) error
	// Subscribe to a stream of Market Depth PriceLevel Updates
	MarketDepthUpdatesSubscribe(*MarketDepthUpdatesSubscribeRequest, TradingData_MarketDepthUpdatesSubscribeServer) error
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingData_MarketsDataSubscribeServer) error
	// Subscribe to a stream of Orders
	OrdersSubscribe(*OrdersSubscribeRequest, TradingData_OrdersSubscribeServer) error
	// Subscribe to a stream of Positions
	PositionsSubscribe(*PositionsSubscribeRequest, TradingData_PositionsSubscribeServer) error
	// Subscribe to a stream of Trades
	TradesSubscribe(*TradesSubscribeRequest, TradingData_TradesSubscribeServer) error
	// Subscribe to a stream of Transfer Responses
	TransferResponsesSubscribe(*empty.Empty, TradingData_TransferResponsesSubscribeServer) error
	// Get an aggregate of signatures from all the nodes of the network.
	GetNodeSignaturesAggregate(context.Context, *GetNodeSignaturesAggregateRequest) (*GetNodeSignaturesAggregateResponse, error)
	// Get an asset by its identifier.
	AssetByID(context.Context, *AssetByIDRequest) (*AssetByIDResponse, error)
	// Get a list of all assets on Vega.
	Assets(context.Context, *AssetsRequest) (*AssetsResponse, error)
	// Get an estimate for the fee to be paid for a given order
	EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error)
	// Get an estimate for the margin required for a new order
	EstimateMargin(context.Context, *EstimateMarginRequest) (*EstimateMarginResponse, error)
	// Get the bundle approval for an ERC20 withdrawal
	// these data are being used to bundle the call to the smart contract on the ethereum bridge
	ERC20WithdrawalApproval(context.Context, *ERC20WithdrawalApprovalRequest) (*ERC20WithdrawalApprovalResponse, error)
	// Get a withdrawal by its ID
	Withdrawal(context.Context, *WithdrawalRequest) (*WithdrawalResponse, error)
	// Get withdrawals for a party
	Withdrawals(context.Context, *WithdrawalsRequest) (*WithdrawalsResponse, error)
	// Get a deposit by its ID
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// Get withdrawals for a party
	Deposits(context.Context, *DepositsRequest) (*DepositsResponse, error)
	// Get the network parameters
	NetworkParameters(context.Context, *NetworkParametersRequest) (*NetworkParametersResponse, error)
	// Get the liquidity provision orders
	LiquidityProvisions(context.Context, *LiquidityProvisionsRequest) (*LiquidityProvisionsResponse, error)
}

// UnimplementedTradingDataServer can be embedded to have forward compatible implementations.
type UnimplementedTradingDataServer struct {
}

func (*UnimplementedTradingDataServer) MarketAccounts(context.Context, *MarketAccountsRequest) (*MarketAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAccounts not implemented")
}
func (*UnimplementedTradingDataServer) PartyAccounts(context.Context, *PartyAccountsRequest) (*PartyAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyAccounts not implemented")
}
func (*UnimplementedTradingDataServer) FeeInfrastructureAccounts(context.Context, *FeeInfrastructureAccountsRequest) (*FeeInfrastructureAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeInfrastructureAccounts not implemented")
}
func (*UnimplementedTradingDataServer) Candles(context.Context, *CandlesRequest) (*CandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candles not implemented")
}
func (*UnimplementedTradingDataServer) MarketDataByID(context.Context, *MarketDataByIDRequest) (*MarketDataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDataByID not implemented")
}
func (*UnimplementedTradingDataServer) MarketsData(context.Context, *empty.Empty) (*MarketsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketsData not implemented")
}
func (*UnimplementedTradingDataServer) MarketByID(context.Context, *MarketByIDRequest) (*MarketByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketByID not implemented")
}
func (*UnimplementedTradingDataServer) MarketDepth(context.Context, *MarketDepthRequest) (*MarketDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDepth not implemented")
}
func (*UnimplementedTradingDataServer) Markets(context.Context, *empty.Empty) (*MarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Markets not implemented")
}
func (*UnimplementedTradingDataServer) OrderByMarketAndID(context.Context, *OrderByMarketAndIdRequest) (*OrderByMarketAndIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByMarketAndID not implemented")
}
func (*UnimplementedTradingDataServer) OrderByReference(context.Context, *OrderByReferenceRequest) (*OrderByReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByReference not implemented")
}
func (*UnimplementedTradingDataServer) OrdersByMarket(context.Context, *OrdersByMarketRequest) (*OrdersByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByMarket not implemented")
}
func (*UnimplementedTradingDataServer) OrdersByParty(context.Context, *OrdersByPartyRequest) (*OrdersByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByParty not implemented")
}
func (*UnimplementedTradingDataServer) OrderByID(context.Context, *OrderByIDRequest) (*proto.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByID not implemented")
}
func (*UnimplementedTradingDataServer) OrderVersionsByID(context.Context, *OrderVersionsByIDRequest) (*OrderVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderVersionsByID not implemented")
}
func (*UnimplementedTradingDataServer) MarginLevels(context.Context, *MarginLevelsRequest) (*MarginLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarginLevels not implemented")
}
func (*UnimplementedTradingDataServer) Parties(context.Context, *empty.Empty) (*PartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parties not implemented")
}
func (*UnimplementedTradingDataServer) PartyByID(context.Context, *PartyByIDRequest) (*PartyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyByID not implemented")
}
func (*UnimplementedTradingDataServer) PositionsByParty(context.Context, *PositionsByPartyRequest) (*PositionsByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsByParty not implemented")
}
func (*UnimplementedTradingDataServer) LastTrade(context.Context, *LastTradeRequest) (*LastTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastTrade not implemented")
}
func (*UnimplementedTradingDataServer) TradesByMarket(context.Context, *TradesByMarketRequest) (*TradesByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByMarket not implemented")
}
func (*UnimplementedTradingDataServer) TradesByOrder(context.Context, *TradesByOrderRequest) (*TradesByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByOrder not implemented")
}
func (*UnimplementedTradingDataServer) TradesByParty(context.Context, *TradesByPartyRequest) (*TradesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByParty not implemented")
}
func (*UnimplementedTradingDataServer) GetProposals(context.Context, *GetProposalsRequest) (*GetProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposals not implemented")
}
func (*UnimplementedTradingDataServer) GetProposalsByParty(context.Context, *GetProposalsByPartyRequest) (*GetProposalsByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalsByParty not implemented")
}
func (*UnimplementedTradingDataServer) GetVotesByParty(context.Context, *GetVotesByPartyRequest) (*GetVotesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVotesByParty not implemented")
}
func (*UnimplementedTradingDataServer) GetNewMarketProposals(context.Context, *GetNewMarketProposalsRequest) (*GetNewMarketProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewMarketProposals not implemented")
}
func (*UnimplementedTradingDataServer) GetUpdateMarketProposals(context.Context, *GetUpdateMarketProposalsRequest) (*GetUpdateMarketProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateMarketProposals not implemented")
}
func (*UnimplementedTradingDataServer) GetNetworkParametersProposals(context.Context, *GetNetworkParametersProposalsRequest) (*GetNetworkParametersProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkParametersProposals not implemented")
}
func (*UnimplementedTradingDataServer) GetNewAssetProposals(context.Context, *GetNewAssetProposalsRequest) (*GetNewAssetProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAssetProposals not implemented")
}
func (*UnimplementedTradingDataServer) GetProposalByID(context.Context, *GetProposalByIDRequest) (*GetProposalByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalByID not implemented")
}
func (*UnimplementedTradingDataServer) GetProposalByReference(context.Context, *GetProposalByReferenceRequest) (*GetProposalByReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalByReference not implemented")
}
func (*UnimplementedTradingDataServer) ObserveGovernance(*empty.Empty, TradingData_ObserveGovernanceServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveGovernance not implemented")
}
func (*UnimplementedTradingDataServer) ObservePartyProposals(*ObservePartyProposalsRequest, TradingData_ObservePartyProposalsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObservePartyProposals not implemented")
}
func (*UnimplementedTradingDataServer) ObservePartyVotes(*ObservePartyVotesRequest, TradingData_ObservePartyVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObservePartyVotes not implemented")
}
func (*UnimplementedTradingDataServer) ObserveProposalVotes(*ObserveProposalVotesRequest, TradingData_ObserveProposalVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveProposalVotes not implemented")
}
func (*UnimplementedTradingDataServer) ObserveEventBus(TradingData_ObserveEventBusServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveEventBus not implemented")
}
func (*UnimplementedTradingDataServer) Statistics(context.Context, *empty.Empty) (*proto.Statistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (*UnimplementedTradingDataServer) GetVegaTime(context.Context, *empty.Empty) (*VegaTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVegaTime not implemented")
}
func (*UnimplementedTradingDataServer) AccountsSubscribe(*AccountsSubscribeRequest, TradingData_AccountsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountsSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) CandlesSubscribe(*CandlesSubscribeRequest, TradingData_CandlesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method CandlesSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) MarginLevelsSubscribe(*MarginLevelsSubscribeRequest, TradingData_MarginLevelsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarginLevelsSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) MarketDepthSubscribe(*MarketDepthSubscribeRequest, TradingData_MarketDepthSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketDepthSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) MarketDepthUpdatesSubscribe(*MarketDepthUpdatesSubscribeRequest, TradingData_MarketDepthUpdatesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketDepthUpdatesSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingData_MarketsDataSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketsDataSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) OrdersSubscribe(*OrdersSubscribeRequest, TradingData_OrdersSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method OrdersSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) PositionsSubscribe(*PositionsSubscribeRequest, TradingData_PositionsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method PositionsSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) TradesSubscribe(*TradesSubscribeRequest, TradingData_TradesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method TradesSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) TransferResponsesSubscribe(*empty.Empty, TradingData_TransferResponsesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferResponsesSubscribe not implemented")
}
func (*UnimplementedTradingDataServer) GetNodeSignaturesAggregate(context.Context, *GetNodeSignaturesAggregateRequest) (*GetNodeSignaturesAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSignaturesAggregate not implemented")
}
func (*UnimplementedTradingDataServer) AssetByID(context.Context, *AssetByIDRequest) (*AssetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetByID not implemented")
}
func (*UnimplementedTradingDataServer) Assets(context.Context, *AssetsRequest) (*AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (*UnimplementedTradingDataServer) EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateFee not implemented")
}
func (*UnimplementedTradingDataServer) EstimateMargin(context.Context, *EstimateMarginRequest) (*EstimateMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMargin not implemented")
}
func (*UnimplementedTradingDataServer) ERC20WithdrawalApproval(context.Context, *ERC20WithdrawalApprovalRequest) (*ERC20WithdrawalApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20WithdrawalApproval not implemented")
}
func (*UnimplementedTradingDataServer) Withdrawal(context.Context, *WithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawal not implemented")
}
func (*UnimplementedTradingDataServer) Withdrawals(context.Context, *WithdrawalsRequest) (*WithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawals not implemented")
}
func (*UnimplementedTradingDataServer) Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedTradingDataServer) Deposits(context.Context, *DepositsRequest) (*DepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposits not implemented")
}
func (*UnimplementedTradingDataServer) NetworkParameters(context.Context, *NetworkParametersRequest) (*NetworkParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkParameters not implemented")
}
func (*UnimplementedTradingDataServer) LiquidityProvisions(context.Context, *LiquidityProvisionsRequest) (*LiquidityProvisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProvisions not implemented")
}

func RegisterTradingDataServer(s *grpc.Server, srv TradingDataServer) {
	s.RegisterService(&_TradingData_serviceDesc, srv)
}

func _TradingData_MarketAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).MarketAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/MarketAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).MarketAccounts(ctx, req.(*MarketAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_PartyAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).PartyAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/PartyAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).PartyAccounts(ctx, req.(*PartyAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_FeeInfrastructureAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeInfrastructureAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).FeeInfrastructureAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/FeeInfrastructureAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).FeeInfrastructureAccounts(ctx, req.(*FeeInfrastructureAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Candles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Candles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Candles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Candles(ctx, req.(*CandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_MarketDataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).MarketDataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/MarketDataByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).MarketDataByID(ctx, req.(*MarketDataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_MarketsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).MarketsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/MarketsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).MarketsData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_MarketByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).MarketByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/MarketByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).MarketByID(ctx, req.(*MarketByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_MarketDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).MarketDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/MarketDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).MarketDepth(ctx, req.(*MarketDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Markets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Markets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Markets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Markets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrderByMarketAndID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByMarketAndIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrderByMarketAndID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrderByMarketAndID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrderByMarketAndID(ctx, req.(*OrderByMarketAndIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrderByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrderByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrderByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrderByReference(ctx, req.(*OrderByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrdersByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrdersByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrdersByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrdersByMarket(ctx, req.(*OrdersByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrdersByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrdersByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrdersByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrdersByParty(ctx, req.(*OrdersByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrderByID(ctx, req.(*OrderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrderVersionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderVersionsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrderVersionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrderVersionsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrderVersionsByID(ctx, req.(*OrderVersionsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_MarginLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarginLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).MarginLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/MarginLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).MarginLevels(ctx, req.(*MarginLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Parties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Parties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Parties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Parties(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_PartyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).PartyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/PartyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).PartyByID(ctx, req.(*PartyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_PositionsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionsByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).PositionsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/PositionsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).PositionsByParty(ctx, req.(*PositionsByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_LastTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).LastTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/LastTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).LastTrade(ctx, req.(*LastTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_TradesByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).TradesByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/TradesByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).TradesByMarket(ctx, req.(*TradesByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_TradesByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).TradesByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/TradesByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).TradesByOrder(ctx, req.(*TradesByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_TradesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).TradesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/TradesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).TradesByParty(ctx, req.(*TradesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetProposals(ctx, req.(*GetProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetProposalsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalsByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetProposalsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetProposalsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetProposalsByParty(ctx, req.(*GetProposalsByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetVotesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVotesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetVotesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetVotesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetVotesByParty(ctx, req.(*GetVotesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetNewMarketProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewMarketProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetNewMarketProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetNewMarketProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetNewMarketProposals(ctx, req.(*GetNewMarketProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetUpdateMarketProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateMarketProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetUpdateMarketProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetUpdateMarketProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetUpdateMarketProposals(ctx, req.(*GetUpdateMarketProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetNetworkParametersProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkParametersProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetNetworkParametersProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetNetworkParametersProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetNetworkParametersProposals(ctx, req.(*GetNetworkParametersProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetNewAssetProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAssetProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetNewAssetProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetNewAssetProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetNewAssetProposals(ctx, req.(*GetNewAssetProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetProposalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetProposalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetProposalByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetProposalByID(ctx, req.(*GetProposalByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetProposalByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetProposalByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetProposalByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetProposalByReference(ctx, req.(*GetProposalByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_ObserveGovernance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).ObserveGovernance(m, &tradingDataObserveGovernanceServer{stream})
}

type TradingData_ObserveGovernanceServer interface {
	Send(*proto.GovernanceData) error
	grpc.ServerStream
}

type tradingDataObserveGovernanceServer struct {
	grpc.ServerStream
}

func (x *tradingDataObserveGovernanceServer) Send(m *proto.GovernanceData) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_ObservePartyProposals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObservePartyProposalsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).ObservePartyProposals(m, &tradingDataObservePartyProposalsServer{stream})
}

type TradingData_ObservePartyProposalsServer interface {
	Send(*proto.GovernanceData) error
	grpc.ServerStream
}

type tradingDataObservePartyProposalsServer struct {
	grpc.ServerStream
}

func (x *tradingDataObservePartyProposalsServer) Send(m *proto.GovernanceData) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_ObservePartyVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObservePartyVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).ObservePartyVotes(m, &tradingDataObservePartyVotesServer{stream})
}

type TradingData_ObservePartyVotesServer interface {
	Send(*proto.Vote) error
	grpc.ServerStream
}

type tradingDataObservePartyVotesServer struct {
	grpc.ServerStream
}

func (x *tradingDataObservePartyVotesServer) Send(m *proto.Vote) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_ObserveProposalVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveProposalVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).ObserveProposalVotes(m, &tradingDataObserveProposalVotesServer{stream})
}

type TradingData_ObserveProposalVotesServer interface {
	Send(*proto.Vote) error
	grpc.ServerStream
}

type tradingDataObserveProposalVotesServer struct {
	grpc.ServerStream
}

func (x *tradingDataObserveProposalVotesServer) Send(m *proto.Vote) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_ObserveEventBus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradingDataServer).ObserveEventBus(&tradingDataObserveEventBusServer{stream})
}

type TradingData_ObserveEventBusServer interface {
	Send(*ObserveEventsResponse) error
	Recv() (*ObserveEventsRequest, error)
	grpc.ServerStream
}

type tradingDataObserveEventBusServer struct {
	grpc.ServerStream
}

func (x *tradingDataObserveEventBusServer) Send(m *ObserveEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradingDataObserveEventBusServer) Recv() (*ObserveEventsRequest, error) {
	m := new(ObserveEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TradingData_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Statistics(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetVegaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetVegaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetVegaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetVegaTime(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_AccountsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).AccountsSubscribe(m, &tradingDataAccountsSubscribeServer{stream})
}

type TradingData_AccountsSubscribeServer interface {
	Send(*proto.Account) error
	grpc.ServerStream
}

type tradingDataAccountsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataAccountsSubscribeServer) Send(m *proto.Account) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_CandlesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CandlesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).CandlesSubscribe(m, &tradingDataCandlesSubscribeServer{stream})
}

type TradingData_CandlesSubscribeServer interface {
	Send(*proto.Candle) error
	grpc.ServerStream
}

type tradingDataCandlesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataCandlesSubscribeServer) Send(m *proto.Candle) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_MarginLevelsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarginLevelsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).MarginLevelsSubscribe(m, &tradingDataMarginLevelsSubscribeServer{stream})
}

type TradingData_MarginLevelsSubscribeServer interface {
	Send(*proto.MarginLevels) error
	grpc.ServerStream
}

type tradingDataMarginLevelsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataMarginLevelsSubscribeServer) Send(m *proto.MarginLevels) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_MarketDepthSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDepthSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).MarketDepthSubscribe(m, &tradingDataMarketDepthSubscribeServer{stream})
}

type TradingData_MarketDepthSubscribeServer interface {
	Send(*proto.MarketDepth) error
	grpc.ServerStream
}

type tradingDataMarketDepthSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataMarketDepthSubscribeServer) Send(m *proto.MarketDepth) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_MarketDepthUpdatesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDepthUpdatesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).MarketDepthUpdatesSubscribe(m, &tradingDataMarketDepthUpdatesSubscribeServer{stream})
}

type TradingData_MarketDepthUpdatesSubscribeServer interface {
	Send(*proto.MarketDepthUpdate) error
	grpc.ServerStream
}

type tradingDataMarketDepthUpdatesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataMarketDepthUpdatesSubscribeServer) Send(m *proto.MarketDepthUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_MarketsDataSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketsDataSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).MarketsDataSubscribe(m, &tradingDataMarketsDataSubscribeServer{stream})
}

type TradingData_MarketsDataSubscribeServer interface {
	Send(*proto.MarketData) error
	grpc.ServerStream
}

type tradingDataMarketsDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataMarketsDataSubscribeServer) Send(m *proto.MarketData) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_OrdersSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrdersSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).OrdersSubscribe(m, &tradingDataOrdersSubscribeServer{stream})
}

type TradingData_OrdersSubscribeServer interface {
	Send(*OrdersStream) error
	grpc.ServerStream
}

type tradingDataOrdersSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataOrdersSubscribeServer) Send(m *OrdersStream) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_PositionsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PositionsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).PositionsSubscribe(m, &tradingDataPositionsSubscribeServer{stream})
}

type TradingData_PositionsSubscribeServer interface {
	Send(*proto.Position) error
	grpc.ServerStream
}

type tradingDataPositionsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataPositionsSubscribeServer) Send(m *proto.Position) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_TradesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TradesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).TradesSubscribe(m, &tradingDataTradesSubscribeServer{stream})
}

type TradingData_TradesSubscribeServer interface {
	Send(*TradesStream) error
	grpc.ServerStream
}

type tradingDataTradesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataTradesSubscribeServer) Send(m *TradesStream) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_TransferResponsesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).TransferResponsesSubscribe(m, &tradingDataTransferResponsesSubscribeServer{stream})
}

type TradingData_TransferResponsesSubscribeServer interface {
	Send(*proto.TransferResponse) error
	grpc.ServerStream
}

type tradingDataTransferResponsesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataTransferResponsesSubscribeServer) Send(m *proto.TransferResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_GetNodeSignaturesAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSignaturesAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetNodeSignaturesAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetNodeSignaturesAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetNodeSignaturesAggregate(ctx, req.(*GetNodeSignaturesAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_AssetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).AssetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/AssetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).AssetByID(ctx, req.(*AssetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Assets(ctx, req.(*AssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).EstimateFee(ctx, req.(*EstimateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_EstimateMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).EstimateMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/EstimateMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).EstimateMargin(ctx, req.(*EstimateMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_ERC20WithdrawalApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ERC20WithdrawalApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).ERC20WithdrawalApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/ERC20WithdrawalApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).ERC20WithdrawalApproval(ctx, req.(*ERC20WithdrawalApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Withdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Withdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Withdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Withdrawal(ctx, req.(*WithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Withdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Withdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Withdrawals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Withdrawals(ctx, req.(*WithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Deposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Deposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Deposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Deposits(ctx, req.(*DepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_NetworkParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).NetworkParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/NetworkParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).NetworkParameters(ctx, req.(*NetworkParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_LiquidityProvisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProvisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).LiquidityProvisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/LiquidityProvisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).LiquidityProvisions(ctx, req.(*LiquidityProvisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.trading_data",
	HandlerType: (*TradingDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarketAccounts",
			Handler:    _TradingData_MarketAccounts_Handler,
		},
		{
			MethodName: "PartyAccounts",
			Handler:    _TradingData_PartyAccounts_Handler,
		},
		{
			MethodName: "FeeInfrastructureAccounts",
			Handler:    _TradingData_FeeInfrastructureAccounts_Handler,
		},
		{
			MethodName: "Candles",
			Handler:    _TradingData_Candles_Handler,
		},
		{
			MethodName: "MarketDataByID",
			Handler:    _TradingData_MarketDataByID_Handler,
		},
		{
			MethodName: "MarketsData",
			Handler:    _TradingData_MarketsData_Handler,
		},
		{
			MethodName: "MarketByID",
			Handler:    _TradingData_MarketByID_Handler,
		},
		{
			MethodName: "MarketDepth",
			Handler:    _TradingData_MarketDepth_Handler,
		},
		{
			MethodName: "Markets",
			Handler:    _TradingData_Markets_Handler,
		},
		{
			MethodName: "OrderByMarketAndID",
			Handler:    _TradingData_OrderByMarketAndID_Handler,
		},
		{
			MethodName: "OrderByReference",
			Handler:    _TradingData_OrderByReference_Handler,
		},
		{
			MethodName: "OrdersByMarket",
			Handler:    _TradingData_OrdersByMarket_Handler,
		},
		{
			MethodName: "OrdersByParty",
			Handler:    _TradingData_OrdersByParty_Handler,
		},
		{
			MethodName: "OrderByID",
			Handler:    _TradingData_OrderByID_Handler,
		},
		{
			MethodName: "OrderVersionsByID",
			Handler:    _TradingData_OrderVersionsByID_Handler,
		},
		{
			MethodName: "MarginLevels",
			Handler:    _TradingData_MarginLevels_Handler,
		},
		{
			MethodName: "Parties",
			Handler:    _TradingData_Parties_Handler,
		},
		{
			MethodName: "PartyByID",
			Handler:    _TradingData_PartyByID_Handler,
		},
		{
			MethodName: "PositionsByParty",
			Handler:    _TradingData_PositionsByParty_Handler,
		},
		{
			MethodName: "LastTrade",
			Handler:    _TradingData_LastTrade_Handler,
		},
		{
			MethodName: "TradesByMarket",
			Handler:    _TradingData_TradesByMarket_Handler,
		},
		{
			MethodName: "TradesByOrder",
			Handler:    _TradingData_TradesByOrder_Handler,
		},
		{
			MethodName: "TradesByParty",
			Handler:    _TradingData_TradesByParty_Handler,
		},
		{
			MethodName: "GetProposals",
			Handler:    _TradingData_GetProposals_Handler,
		},
		{
			MethodName: "GetProposalsByParty",
			Handler:    _TradingData_GetProposalsByParty_Handler,
		},
		{
			MethodName: "GetVotesByParty",
			Handler:    _TradingData_GetVotesByParty_Handler,
		},
		{
			MethodName: "GetNewMarketProposals",
			Handler:    _TradingData_GetNewMarketProposals_Handler,
		},
		{
			MethodName: "GetUpdateMarketProposals",
			Handler:    _TradingData_GetUpdateMarketProposals_Handler,
		},
		{
			MethodName: "GetNetworkParametersProposals",
			Handler:    _TradingData_GetNetworkParametersProposals_Handler,
		},
		{
			MethodName: "GetNewAssetProposals",
			Handler:    _TradingData_GetNewAssetProposals_Handler,
		},
		{
			MethodName: "GetProposalByID",
			Handler:    _TradingData_GetProposalByID_Handler,
		},
		{
			MethodName: "GetProposalByReference",
			Handler:    _TradingData_GetProposalByReference_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _TradingData_Statistics_Handler,
		},
		{
			MethodName: "GetVegaTime",
			Handler:    _TradingData_GetVegaTime_Handler,
		},
		{
			MethodName: "GetNodeSignaturesAggregate",
			Handler:    _TradingData_GetNodeSignaturesAggregate_Handler,
		},
		{
			MethodName: "AssetByID",
			Handler:    _TradingData_AssetByID_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _TradingData_Assets_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _TradingData_EstimateFee_Handler,
		},
		{
			MethodName: "EstimateMargin",
			Handler:    _TradingData_EstimateMargin_Handler,
		},
		{
			MethodName: "ERC20WithdrawalApproval",
			Handler:    _TradingData_ERC20WithdrawalApproval_Handler,
		},
		{
			MethodName: "Withdrawal",
			Handler:    _TradingData_Withdrawal_Handler,
		},
		{
			MethodName: "Withdrawals",
			Handler:    _TradingData_Withdrawals_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _TradingData_Deposit_Handler,
		},
		{
			MethodName: "Deposits",
			Handler:    _TradingData_Deposits_Handler,
		},
		{
			MethodName: "NetworkParameters",
			Handler:    _TradingData_NetworkParameters_Handler,
		},
		{
			MethodName: "LiquidityProvisions",
			Handler:    _TradingData_LiquidityProvisions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveGovernance",
			Handler:       _TradingData_ObserveGovernance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObservePartyProposals",
			Handler:       _TradingData_ObservePartyProposals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObservePartyVotes",
			Handler:       _TradingData_ObservePartyVotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveProposalVotes",
			Handler:       _TradingData_ObserveProposalVotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveEventBus",
			Handler:       _TradingData_ObserveEventBus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AccountsSubscribe",
			Handler:       _TradingData_AccountsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CandlesSubscribe",
			Handler:       _TradingData_CandlesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarginLevelsSubscribe",
			Handler:       _TradingData_MarginLevelsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketDepthSubscribe",
			Handler:       _TradingData_MarketDepthSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketDepthUpdatesSubscribe",
			Handler:       _TradingData_MarketDepthUpdatesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketsDataSubscribe",
			Handler:       _TradingData_MarketsDataSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OrdersSubscribe",
			Handler:       _TradingData_OrdersSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PositionsSubscribe",
			Handler:       _TradingData_PositionsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TradesSubscribe",
			Handler:       _TradingData_TradesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransferResponsesSubscribe",
			Handler:       _TradingData_TransferResponsesSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vega/api/trading.proto",
}
