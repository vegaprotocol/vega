{
  "swagger": "2.0",
  "info": {
    "title": "Vega Trading API",
    "version": "0.0.1",
    "contact": {
      "name": "Vega",
      "url": "https://vega.xyz/",
      "email": "hi@vega.xyz"
    },
    "license": {
      "name": "TBD",
      "url": "https://vega.xyz/tbd"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/token": {
      "get": {
        "summary": "Check an API token",
        "description": "Check the validity of an API token\n- Does it match the given partyID?\n- Has it expired?",
        "operationId": "CheckToken",
        "responses": {
          "200": {
            "description": "Token may or may not be ok. Check response body.",
            "schema": {
              "$ref": "#/definitions/apiCheckTokenResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading"
        ]
      },
      "post": {
        "summary": "Sign In",
        "description": "Sign in to the system.\nSubmit a party ID and password, receive a token.",
        "operationId": "SignIn",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSignInResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSignInRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/fountain": {
      "post": {
        "summary": "Request balance increase",
        "description": "Request balance increase in order to participate in pre-production environment (c.f. Ethereum Ropsten Faucet)",
        "operationId": "NotifyTraderAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiNotifyTraderAccountResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiNotifyTraderAccountRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/markets": {
      "get": {
        "summary": "Get Markets list",
        "description": "Get a list of Markets",
        "operationId": "Markets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketsResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}": {
      "get": {
        "summary": "Get Market by ID",
        "description": "Get a Market by ID",
        "operationId": "MarketByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketByIDResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/candles": {
      "get": {
        "summary": "Get Market Candles",
        "description": "Get a list of Candles for a given Market.\nUse a `sinceTimestamp` to limit the size of the response.",
        "operationId": "Candles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCandlesResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sinceTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "interval",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "I1M",
              "I5M",
              "I15M",
              "I1H",
              "I6H",
              "I1D"
            ],
            "default": "I1M"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/depth": {
      "get": {
        "summary": "Get Market Depth",
        "description": "Get Market Depth for a given Market",
        "operationId": "MarketDepth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketDepthResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/orders": {
      "get": {
        "summary": "Get Market Orders",
        "description": "Get a list of Orders for a given Market",
        "operationId": "OrdersByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrdersResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "open",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/orders/{orderID}": {
      "get": {
        "summary": "Get Market Order by OrderID",
        "description": "Get an Order for a given Market and OrderID",
        "operationId": "OrderByMarketAndId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/trades": {
      "get": {
        "summary": "Get Market Trades",
        "description": "Get a list of Trades for a given Market",
        "operationId": "TradesByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/trades/latest": {
      "get": {
        "summary": "Get latest Market Trade",
        "description": "Get the most recent Trade for a given Market",
        "operationId": "LastTrade",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLastTradeResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders": {
      "post": {
        "summary": "Submit an Order",
        "description": "Submit a new Order",
        "operationId": "SubmitOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/vegaPendingOrder"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSubmitOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/{amendment.orderID}": {
      "put": {
        "summary": "Amend an Order",
        "description": "Amend an existing Order.",
        "operationId": "AmendOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/vegaPendingOrder"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "amendment.orderID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAmendOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/{cancellation.orderID}": {
      "delete": {
        "summary": "Cancel an Order",
        "description": "Cancel an existing Order",
        "operationId": "CancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/vegaPendingOrder"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "cancellation.orderID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cancellation.marketID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cancellation.partyID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/{orderID}/trades": {
      "get": {
        "summary": "Get Order Trades",
        "description": "Get a list of Trades for a given Order",
        "operationId": "TradesByOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/{reference}": {
      "get": {
        "summary": "Get Order by reference",
        "description": "Get an Order by Pending Order reference (UUID)",
        "operationId": "OrderByReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties": {
      "get": {
        "summary": "Get Parties list",
        "description": "Get a list of Parties",
        "operationId": "Parties",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartiesResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}": {
      "get": {
        "summary": "Get Party by ID",
        "description": "Get a Party by ID",
        "operationId": "PartyByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartyByIDResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/accounts": {
      "get": {
        "summary": "Get Party Accounts",
        "description": "Get a list of Accounts by Party",
        "operationId": "AccountsByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccountsResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NO_ACC",
              "INSURANCE",
              "SETTLEMENT",
              "MARGIN",
              "GENERAL"
            ],
            "default": "NO_ACC"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/accounts/assets/{asset}": {
      "get": {
        "summary": "Get Party Accounts by Asset",
        "description": "Get a list of Accounts for a given Party and Asset",
        "operationId": "AccountsByPartyAndAsset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccountsResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/orders": {
      "get": {
        "summary": "Get Party Orders",
        "description": "Get a list of Orders for a given Party",
        "operationId": "OrdersByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrdersResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "open",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/positions": {
      "get": {
        "summary": "Get Party Positions",
        "description": "Get a list of Positions for a given Party",
        "operationId": "PositionsByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPositionsByPartyResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/trades": {
      "get": {
        "summary": "Get Party Trades",
        "description": "Get a list of Trades for a given Party",
        "operationId": "TradesByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{withdraw.partyID}/withdrawal": {
      "post": {
        "summary": "Request withdrawal",
        "description": "TBD",
        "operationId": "Withdraw",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiWithdrawResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "withdraw.partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiWithdrawRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/statistics": {
      "get": {
        "summary": "Get Statistics",
        "description": "Get a variety of internal statistics about Vega and the blockchain",
        "operationId": "Statistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/vegaStatistics"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/time": {
      "get": {
        "summary": "Get Time",
        "description": "Get the current blockchain time",
        "operationId": "GetVegaTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiVegaTimeResponse"
            }
          },
          "400": {
            "description": "Invalid request - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          },
          "500": {
            "description": "Server error - see response body",
            "schema": {
              "$ref": "#/definitions/apiErrorResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    }
  },
  "definitions": {
    "OrderStatus": {
      "type": "string",
      "enum": [
        "Active",
        "Expired",
        "Cancelled",
        "Stopped",
        "Filled"
      ],
      "default": "Active"
    },
    "OrderTimeInForce": {
      "type": "string",
      "enum": [
        "GTC",
        "GTT",
        "IOC",
        "FOK"
      ],
      "default": "GTC"
    },
    "apiAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          }
        }
      }
    },
    "apiAmendOrderRequest": {
      "type": "object",
      "properties": {
        "amendment": {
          "$ref": "#/definitions/vegaOrderAmendment"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "apiCandlesResponse": {
      "type": "object",
      "properties": {
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaCandle"
          }
        }
      }
    },
    "apiCheckTokenResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiLastTradeResponse": {
      "type": "object",
      "properties": {
        "trade": {
          "$ref": "#/definitions/vegaTrade"
        }
      }
    },
    "apiMarketByIDResponse": {
      "type": "object",
      "properties": {
        "market": {
          "$ref": "#/definitions/vegaMarket"
        }
      }
    },
    "apiMarketDepthResponse": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "lastTrade": {
          "$ref": "#/definitions/vegaTrade"
        }
      }
    },
    "apiMarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarket"
          }
        }
      }
    },
    "apiNotifyTraderAccountRequest": {
      "type": "object",
      "properties": {
        "notif": {
          "$ref": "#/definitions/vegaNotifyTraderAccount"
        }
      }
    },
    "apiNotifyTraderAccountResponse": {
      "type": "object",
      "properties": {
        "submitted": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiOrderResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder"
        }
      }
    },
    "apiOrdersResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiOrdersStream": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiPagination": {
      "type": "object",
      "properties": {
        "skip": {
          "type": "string",
          "format": "uint64"
        },
        "limit": {
          "type": "string",
          "format": "uint64"
        },
        "descending": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiPartiesResponse": {
      "type": "object",
      "properties": {
        "parties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaParty"
          }
        }
      }
    },
    "apiPartyByIDResponse": {
      "type": "object",
      "properties": {
        "party": {
          "$ref": "#/definitions/vegaParty"
        }
      }
    },
    "apiPositionsByPartyResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarketPosition"
          }
        }
      }
    },
    "apiSignInRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "apiSignInResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "apiSubmitOrderRequest": {
      "type": "object",
      "properties": {
        "submission": {
          "$ref": "#/definitions/vegaOrderSubmission"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "apiTradesResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiTradesStream": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiVegaTimeResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiWithdrawRequest": {
      "type": "object",
      "properties": {
        "withdraw": {
          "$ref": "#/definitions/vegaWithdraw"
        }
      }
    },
    "apiWithdrawResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "balance": {
          "type": "string",
          "format": "int64"
        },
        "asset": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/vegaAccountType"
        }
      }
    },
    "vegaAccountType": {
      "type": "string",
      "enum": [
        "NO_ACC",
        "INSURANCE",
        "SETTLEMENT",
        "MARGIN",
        "GENERAL"
      ],
      "default": "NO_ACC"
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "datetime": {
          "type": "string"
        },
        "high": {
          "type": "string",
          "format": "uint64"
        },
        "low": {
          "type": "string",
          "format": "uint64"
        },
        "open": {
          "type": "string",
          "format": "uint64"
        },
        "close": {
          "type": "string",
          "format": "uint64"
        },
        "volume": {
          "type": "string",
          "format": "uint64"
        },
        "interval": {
          "$ref": "#/definitions/vegaInterval"
        }
      }
    },
    "vegaChainStatus": {
      "type": "string",
      "enum": [
        "DISCONNECTED",
        "REPLAYING",
        "CONNECTED"
      ],
      "default": "DISCONNECTED"
    },
    "vegaContinuousTrading": {
      "type": "object",
      "properties": {
        "tickSize": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaDiscreteTrading": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaEthereumEvent": {
      "type": "object",
      "properties": {
        "contractID": {
          "type": "string"
        },
        "event": {
          "type": "string"
        }
      }
    },
    "vegaExternalRiskModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "socket": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "vegaForwardRiskModel": {
      "type": "object",
      "properties": {
        "riskAversionParameter": {
          "type": "number",
          "format": "double"
        },
        "tau": {
          "type": "number",
          "format": "double"
        },
        "params": {
          "$ref": "#/definitions/vegaModelParamsBS"
        }
      }
    },
    "vegaFuture": {
      "type": "object",
      "properties": {
        "maturity": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "ethereumEvent": {
          "$ref": "#/definitions/vegaEthereumEvent"
        }
      }
    },
    "vegaInstrument": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "baseName": {
          "type": "string"
        },
        "quoteName": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/vegaInstrumentMetadata"
        },
        "initialMarkPrice": {
          "type": "string",
          "format": "uint64"
        },
        "future": {
          "$ref": "#/definitions/vegaFuture"
        }
      }
    },
    "vegaInstrumentMetadata": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "vegaInterval": {
      "type": "string",
      "enum": [
        "I1M",
        "I5M",
        "I15M",
        "I1H",
        "I6H",
        "I1D"
      ],
      "default": "I1M"
    },
    "vegaLedgerEntry": {
      "type": "object",
      "properties": {
        "fromAccount": {
          "type": "string"
        },
        "toAccount": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "format": "int64"
        },
        "reference": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaMarginCalculator": {
      "type": "object",
      "properties": {
        "scalingFactors": {
          "$ref": "#/definitions/vegaScalingFactors"
        }
      }
    },
    "vegaMarket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tradableInstrument": {
          "$ref": "#/definitions/vegaTradableInstrument"
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64"
        },
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading"
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading"
        }
      }
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        }
      }
    },
    "vegaMarketPosition": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "realisedVolume": {
          "type": "string",
          "format": "int64"
        },
        "realisedPNL": {
          "type": "string",
          "format": "int64"
        },
        "unrealisedVolume": {
          "type": "string",
          "format": "int64"
        },
        "unrealisedPNL": {
          "type": "string",
          "format": "int64"
        },
        "averageEntryPrice": {
          "type": "string",
          "format": "uint64"
        },
        "minimumMargin": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaModelParamsBS": {
      "type": "object",
      "properties": {
        "mu": {
          "type": "number",
          "format": "double"
        },
        "r": {
          "type": "number",
          "format": "double"
        },
        "sigma": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaNotifyTraderAccount": {
      "type": "object",
      "properties": {
        "traderID": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/vegaSide"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "remaining": {
          "type": "string",
          "format": "uint64"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType"
        },
        "createdAt": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "$ref": "#/definitions/OrderStatus"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "reference": {
          "type": "string"
        }
      }
    },
    "vegaOrderAmendment": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "side": {
          "$ref": "#/definitions/vegaSide"
        }
      }
    },
    "vegaOrderCancellation": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        }
      }
    },
    "vegaOrderSubmission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "price": {
          "type": "string",
          "format": "uint64",
          "description": "mandatory, except for Market orders"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "side": {
          "$ref": "#/definitions/vegaSide"
        },
        "TimeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType"
        }
      }
    },
    "vegaOrderType": {
      "type": "string",
      "enum": [
        "LIMIT",
        "MARKET",
        "NETWORK"
      ],
      "default": "LIMIT"
    },
    "vegaParty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarketPosition"
          }
        }
      }
    },
    "vegaPendingOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string",
          "minLength": 1,
          "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "TimeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        },
        "side": {
          "$ref": "#/definitions/vegaSide"
        },
        "marketID": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "partyID": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OrderStatus"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType"
        }
      }
    },
    "vegaPriceLevel": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "numberOfOrders": {
          "type": "string",
          "format": "uint64"
        },
        "volume": {
          "type": "string",
          "format": "uint64"
        },
        "cumulativeVolume": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaScalingFactors": {
      "type": "object",
      "properties": {
        "searchLevel": {
          "type": "number",
          "format": "double"
        },
        "initialMargin": {
          "type": "number",
          "format": "double"
        },
        "collateralRelease": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaSide": {
      "type": "string",
      "enum": [
        "Buy",
        "Sell"
      ],
      "default": "Buy"
    },
    "vegaSimpleModelParams": {
      "type": "object",
      "properties": {
        "factorLong": {
          "type": "number",
          "format": "double"
        },
        "factorShort": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaSimpleRiskModel": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/vegaSimpleModelParams"
        }
      }
    },
    "vegaStatistics": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64"
        },
        "backlogLength": {
          "type": "string",
          "format": "uint64"
        },
        "totalPeers": {
          "type": "string",
          "format": "uint64"
        },
        "genesisTime": {
          "type": "string"
        },
        "currentTime": {
          "type": "string"
        },
        "vegaTime": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/vegaChainStatus"
        },
        "txPerBlock": {
          "type": "string",
          "format": "uint64"
        },
        "averageTxBytes": {
          "type": "string",
          "format": "uint64"
        },
        "averageOrdersPerBlock": {
          "type": "string",
          "format": "uint64"
        },
        "tradesPerSecond": {
          "type": "string",
          "format": "uint64"
        },
        "ordersPerSecond": {
          "type": "string",
          "format": "uint64"
        },
        "totalMarkets": {
          "type": "string",
          "format": "uint64"
        },
        "totalParties": {
          "type": "string",
          "format": "uint64"
        },
        "parties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "totalAmendOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalCancelOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalCreateOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalOrders": {
          "type": "string",
          "format": "uint64"
        },
        "totalTrades": {
          "type": "string",
          "format": "uint64"
        },
        "orderSubscriptions": {
          "type": "integer",
          "format": "int32"
        },
        "tradeSubscriptions": {
          "type": "integer",
          "format": "int32"
        },
        "candleSubscriptions": {
          "type": "integer",
          "format": "int32"
        },
        "marketDepthSubscriptions": {
          "type": "integer",
          "format": "int32"
        },
        "positionsSubscriptions": {
          "type": "integer",
          "format": "int32"
        },
        "accountSubscriptions": {
          "type": "integer",
          "format": "int32"
        },
        "appVersionHash": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "chainVersion": {
          "type": "string"
        },
        "blockDuration": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaTradableInstrument": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrument"
        },
        "marginCalculator": {
          "$ref": "#/definitions/vegaMarginCalculator"
        },
        "forwardRiskModel": {
          "$ref": "#/definitions/vegaForwardRiskModel"
        },
        "externalRiskModel": {
          "$ref": "#/definitions/vegaExternalRiskModel"
        },
        "simpleRiskModel": {
          "$ref": "#/definitions/vegaSimpleRiskModel"
        }
      }
    },
    "vegaTrade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "buyer": {
          "type": "string"
        },
        "seller": {
          "type": "string"
        },
        "aggressor": {
          "$ref": "#/definitions/vegaSide"
        },
        "buyOrder": {
          "type": "string"
        },
        "sellOrder": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaTransferBalance": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccount"
        },
        "balance": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLedgerEntry"
          }
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTransferBalance"
          }
        }
      }
    },
    "vegaWithdraw": {
      "type": "object",
      "properties": {
        "partyID": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "asset": {
          "type": "string"
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiOrdersStream": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiOrdersStream"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiOrdersStream"
    },
    "apiTradesStream": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiTradesStream"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiTradesStream"
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaAccount"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaAccount"
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaCandle"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaCandle"
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketDepth"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketDepth"
    },
    "vegaMarketPosition": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketPosition"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketPosition"
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaTransferResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaTransferResponse"
    }
  }
}
