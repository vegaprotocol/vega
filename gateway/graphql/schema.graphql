## VEGA - GraphQL schema

schema {
    query: Query
    subscription: Subscription
    mutation: Mutation
}

"Mutations are similar to GraphQL queries, however they allow a caller to change or mutate data."
type Mutation {

  """
  Send a submit order request to be prepared, and returns a blob of the transaction to submit.
  The OrderSubmit data is validated. Price and expiration will be converted to uint64 internally.
  """
  prepareOrderSubmit(
    "ID of the market to place the order"
    marketId: String!
    "ID of the party placing the order"
    partyId: String!
    "Price of the asset"
    price: String
    "Size of the order"
    size: String!
    "Side of the order (Buy or Sell)"
    side: Side!
    "TimeInForce of the order"
    timeInForce: OrderTimeInForce!
    "exiration of the the order"
    expiration: String
    "type of the order"
    type: OrderType!
    "client reference for the order"
    reference: String
    "pegged order details"
    peggedOrder: PeggedOrderInput
  ): PreparedSubmitOrder!

  """
  Send a cancel order request to be prepared. Returns a pending order + blob of the transaction to submit.
  The data is verified. The response can be signed and submitted through the submitTransaction mutation.
  """
  prepareOrderCancel(
    "ID of the order to cancel"
    id: ID
    "ID of the party placing the order"
    partyId: String!
    "ID of the market where to find the order"
    marketId: String
  ): PreparedCancelOrder!

  """
  Send an amend order request to be prepared. Returns a pending order + blob of the transaction to submit.
  The data is verified. The response can be signed and submitted through the submitTransaction mutation.
  """
  prepareOrderAmend(
    "ID of the order to amend"
    id: ID!
    "ID of the party which created the order"
    partyId: String!
    "New price for this order"
    price: String!
    "New size for this order"
    sizeDelta: String!
    "New expiration time"
    expiration: String
    "Time in force"
    timeInForce: OrderTimeInForce!
    "The reference point for pegged orders"
    peggedReference: PeggedReference
    "The offset from the reference price for pegged orders"
    peggedOffset: String
  ): PreparedAmendOrder!

  """
  Prepare a proposal so it can be sent into the network.
  Returns a pending proposal along with a transaction blob ready for submission.
  The data is verified. The response can be signed and submitted through the submitTransaction mutation.
  """
  prepareProposal(
    "ID of the party which created this proposal"
    partyId: String!
    "A UUID reference for the caller to aid in tracking operations on VEGA"
    reference: String
    "Terms of the proposal"
    proposalTerms: ProposalTermsInput!
  ): PreparedProposal!

  """
  Prepare a vote so it can be signed and submitted.
  Returns a pending vote with a transaction blob for signing.
  No validation other than the vote value being correct is done.
  """
  prepareVote(
    "vote value"
    value: VoteValue!
    "the party casting the vote"
    partyID: String!
    "the proposal voted on"
    propopsalID: String!
  ): PreparedVote!

  """
  Prepare a withdrawal so it can be signed and submitted.
  Returns a pending withdrawSubmission with a transaction blob for signing.
  """
  prepareWithdrawal(
    "The party which wants to withdraw funds"
    partyID: String!
    "The amount to be withdrawn"
    amount: String!
    "The asset from which we want to withdraw funds"
    asset: String!

    """
    ERC20 specific details to process the withdrawal
    nullable as not required by all kind of withdrawals
    """
    erc20Details: Erc20WithdrawalDetailsInput
  ): PreparedWithdrawal!

  """
  Submit a new, signed, transaction to the VEGA network. This transaction will not be executed immediately.
  It validates the signature, and sends the transaction out for consensus

  """
  submitTransaction(
    "The signed transaction"
    data: String!
    "The signature"
    sig: SignatureInput!
  ): TransactionSubmitted!

  "Prepare a Liquidity provision order so it can be signed and submitted"
  prepareLiquidityProvision(
    "Market identifier for the order"
    marketID: String!
    "Specified as a unitless number that represents the amount of settlement asset of the market."
    commitmentAmount: Int!
    "nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers."
    fee: String!
    "a set of liquidity sell orders to meet the liquidity provision obligation, see MM orders spec."
    sells: [LiquidityOrderInput!]!
    "a set of liquidity buy orders to meet the liquidity provision obligation, see MM orders spec."
    buys:  [LiquidityOrderInput!]!
  ): PreparedLiquidityProvision!
}

"Create an order linked to an index rather than a price"
input PeggedOrderInput {
  "Index to link this order to"
  reference: PeggedReference!
  "Price offset from the peg"
  offset: String!
}

"Create an order linked to an index rather than a price"
type PeggedOrder {
  "Index to link this order to"
  reference: PeggedReference!
  "Price offset from the peg"
  offset: String!
}

"ERC20 specific details to start a withdrawal"
input Erc20WithdrawalDetailsInput {
  "The ethereum address to which the withdrawn funds will be send to"
  receiverAddress: String!
}

"A signature to be bundled with a transaction"
input SignatureInput {
  "The signature, base64 encoded"
  sig: String!
  "The algorithm used to produice the signature"
  algo: String!
  "The version of the signature"
  version: Int!
}

"Subscriptions allow a caller to receive new information as it is available from the VEGA platform."
type Subscription {
  "Subscribe to the candles updates"
  candles(
    "ID of the market we want to listen candles for"
    marketId: String!
    "Interval of the candles we want to listen for"
    interval: Interval!
  ): Candle!

  "Subscribe to orders updates"
  orders(
    "ID of the market from which we want orders updates"
    marketId: String
    "ID of the party from which we want orders updates"
    partyId: String
  ): [Order!]

  "Subscribe to the trades updates"
  trades(
    "ID of the market from which we want trades updates"
    marketId: String
    "ID of the party from which we want trades updates"
    partyId: String
  ): [Trade!]

  "Subscribe to the positions updates"
  positions(
    "ID of the party from we want updates for"
    partyId: String
    "ID of the market from which we want postion updates"
    marketId: String
  ): Position!

  "Subscribe to the market depths update"
  marketDepth(
    "ID of the market we want to receive market depth updates for"
    marketId: String!
  ): MarketDepth!

  "Subscribe to price level market depth updates"
  marketDepthUpdate(
    "ID of the market we want to receive market depth pricelevel updates for"
    marketId: String!
  ): MarketDepthUpdate!

  "Subscribe to the accounts updates"
  accounts(
    "ID of the market from which we want accounts updates"
    marketId: String
    "ID of the party from which we want accounts updates"
    partyId: String,
    "Asset code"
    asset: String,
    "Type of the account"
    type: AccountType
  ): Account!

  "Subscribe to the mark price changes"
  marketData(
    "id of the market we want to subscribe to the market data changes"
    marketId: String
  ): MarketData!

  "Subscribe to the margin changes"
  margins(
    "id of the trader we want to subscribe for margin updates"
    partyId: String!
    "market we want to listen to margin updates (nil if we want updates for all markets)"
    marketID: String
  ): MarginLevels!

  "Subscribe to proposals. Leave out all arguments to receive all proposals"
  proposals(
    "Optional party id whose proposals are to be streamed"
    partyID: String
  ): Proposal!

  "Subscribe to votes, either by proposal id or pary id"
  votes(
    "Optional proposal id which votes are to be streamed"
    proposalId: String
    "Optional party id whose votes are to be streamed"
    partyID: String
  ): ProposalVote!

  "Subscribe to event data from the event bus"
  busEvents(
    "the types to subscribe to has to be an array"
    types: [BusEventType!]!
    "optional filter by market ID"
    marketID: String
    "optional filter by party ID"
    partyID: String
    "Specifies the size that the client will receive events in. Using 0 results in a variable batch size being sent. The stream will be closed if the client fails to read a batch within 5 seconds"
    batchSize: Int!
  ): [BusEvent!]
}

"Margins for a given a trader"
type MarginLevels {
  "market in which the margin is required for this trader"
  market: Market!
  "asset for the current margins"
  asset: Asset!
  "id of the trader for this margin"
  party: Party!
  "minimal margin for the position to be maintained in the network (unsigned int actually)"
  maintenanceLevel: String!
  "if the margin is between maintenance and search, the network will initiate a collateral search (unsigned int actually)"
  searchLevel: String!
  "this is the minimal margin required for a trader to place a new order on the network (unsigned int actually)"
  initialLevel: String!

  """
  If the margin of the trader is greater than this level, then collateral will be released from the margin account into
  the general account of the trader for the given asset.
  """
  collateralReleaseLevel: String!

  "time at which these margin level were relevant"
  timestamp: String!
}

"Live data of a Market"
type MarketData {
  "market id of the associated mark price"
  market: Market!
  "the mark price (actually an unsgined int)"
  markPrice: String!
  "the highest price level on an order book for buy orders."
  bestBidPrice: String!
  "the aggregated volume being bid at the best bid price."
  bestBidVolume: String!
  "the lowest price level on an order book for offer orders."
  bestOfferPrice: String!
  "the aggregated volume being offered at the best offer price."
  bestOfferVolume: String!
  "the arithmetic average of the best bid price and best offer price."
  midPrice: String!
  "time at which this mark price was relevant"
  timestamp: String!
  "the sum of the size of all positions greater than 0."
  openInterest: String!
  "time at which the auction will stop (null if not in auction mode"
  auctionEnd: String
  "time at which the next auction will start (null if none is scheduled)"
  auctionStart: String
  "indicative price if the auction ended now, 0 if not in auction mode"
  indicativePrice: String!
  "indicative volume if the auction ended now, 0 if not in auction mode"
  indicativeVolume: String!
  "what state the market is in (auction, continuous etc)"
  marketState: MarketState!
  "what triggered an auction (if an auction was started)"
  trigger: AuctionTrigger!
  "the amount of stake targeted for this market"
  targetStake: String
  "the supplied stake for the market"
  suppliedStake: String
  "The liquidity commitments for a given market"
  commitments: MarketDataCommitments!
}

"The MM commitments for this market"
type MarketDataCommitments {
  "a set of liquidity sell orders to meet the liquidity provision obligation, see MM orders spec."
  sells: [LiquidityOrderReference!]
  "a set of liquidity buy orders to meet the liquidity provision obligation, see MM orders spec."
  buys:  [LiquidityOrderReference!]
}

type PreparedWithdrawal {
  "the raw transaction to sign & submit"
  blob: String!
}

type PreparedSubmitOrder {
  "the raw transaction to sign & submit"
  blob: String!
}

type PreparedCancelOrder {
  "the raw transaction to sign & submit"
  blob: String!
}

type PreparedAmendOrder {
  "the raw transaction to sign & submit"
  blob: String!
}

type TransactionSubmitted {
  success: Boolean!
}

"Queries allow a caller to read data and filter data via GraphQL."
type Query {

  "One or more instruments that are trading on the VEGA network"
  markets(
    "ID of the market"
    id: String
  ): [Market!]

  "An instrument that is trading on the VEGA network"
  market(
    "Optional ID of a market"
    id: String!
  ): Market

  "One or more entities that are trading on the VEGA network"
  parties(
    "Optional ID of a party"
    id: String
  ): [Party!]

  "An entity that is trading on the VEGA network"
  party(
    "ID of a party"
    id: String!
  ): Party

  "a bunch of statistics about the node"
  statistics: Statistics!

  "An order in the VEGA network found by orderID"
  orderByID(
    "ID for an order"
    orderID: String!

    "version of the order (omitted or 0 for most recent; 1 for original; 2 for first amendment, etc)"
    version: Int
  ): Order!

  "Order versions (created via amendments if any) found by orderID"
  orderVersions(
    "ID for an order"
    orderID: String!

    "Pagination skip"
    skip: Int
    "Pagination first element"
    first: Int
    "Pagination last element"
    last: Int): [Order!]

  "An order in the VEGA network found by referenceID"
  orderByReference(
    "ReferenceID for an order"
    referenceID: String!
  ): Order!

  "All governance proposals in the VEGA network"
  proposals(
    "Returns only proposals in the specified state. Leave out to get all proposals"
    inState: ProposalState
  ): [Proposal!]

  "A governance proposal located by either its id or reference. If both are set, id is used."
  proposal(
    "Optionally, locate proposal by its id"
    id: String
    "Optionally, locate proposal by its reference. If id is set, this parameter is ignored."
    reference: String
  ): Proposal!

  "Governance proposals that aim creating new markets"
  newMarketProposals(
    "Returns only proposals in the specified state. Leave out to get all proposals"
    inState: ProposalState
  ): [Proposal!]

  "Governance proposals that aim updating existing markets"
  updateMarketProposals(
    "Optionally, select proposals for a specific market. Leave out for all"
    marketId: String
    "Returns only proposals in the specified state. Leave out to get all proposals"
    inState: ProposalState
  ): [Proposal!]

  "Governance proposals that aim updating Vega network parameters"
  networkParametersProposals(
    "Returns only proposals in the specified state. Leave out to get all proposals"
    inState: ProposalState
  ): [Proposal!]

  "Governance proposals that aim creating new assets in Vega"
  newAssetProposals(
    "Returns only proposals in the specified state. Leave out to get all proposals"
    inState: ProposalState
  ): [Proposal!]

  "Return a list of aggregated node signature for a given resource ID"
  nodeSignatures(
    resourceId: String!
  ): [NodeSignature!]

  "An asset which is used in the vega network"
  asset(
   "Id of the asset"
    assetId: String!
  ): Asset

  "The list of all assets in use in the vega network"
  assets: [Asset!]

  "return an estiamation of the potential cost for a new order"
  estimateOrder(
    "ID of the market to place the order"
    marketId: String!
    "ID of the party placing the order"
    partyId: String!
    "Price of the asset"
    price: String
    "Size of the order"
    size: String!
    "Side of the order (Buy or Sell)"
    side: Side!
    "TimeInForce of the order"
    timeInForce: OrderTimeInForce!
    "exiration of the the order"
    expiration: String
    "type of the order"
    type: OrderType!
  ): OrderEstimate!

  "find a withdrawal using its id"
  withdrawal(
    "id of the withdrawal"
    id: String!
  ): Withdrawal

  "find a erc20 withdrawal approval using it a withdrawal id"
  erc20WithdrawalApproval(
    "id of the withdrawal"
    withdrawalId: String!
  ): Erc20WithdrawalApproval

  "find a deposit using its id"
  deposit(
    "id of the Deposit"
    id: String!
  ): Deposit

  "return the full list of network parameters"
  networkParameters: [NetworkParameter!]
}

"Represents an asset in vega"
type Asset {
  "The id of the asset"
  id: String!

  "The full name of the asset (e.g: Great British Pound)"
  name: String!

  "The symbol of the asset (e.g: GBP)"
  symbol: String!

  "The total supply of the market"
  totalSupply: String!

  "The precision of the asset"
  decimals: Int!

  "The origin source of the asset (e.g: an erc20 asset)"
  source: AssetSource!

  "The infrastructure fee account for this asset"
  infrastructureFeeAccount: Account!
}

"One of the possible asset sources"
union AssetSource = BuiltinAsset | ERC20

"An asset originated from an Ethereum ERC20 Token"
type ERC20 {
  "The address of the erc20 contract"
  contractAddress: String!
}

"A vega builtin asset, mostly for testing purpose"
type BuiltinAsset {
  "The id of the asset"
  id: String!

  "The full name of the asset (e.g: Great British Pound)"
  name: String!

  "The symbol of the asset (e.g: GBP)"
  symbol: String!

  "The total supply of the market"
  totalSupply: String!

  "The precision of the asset"
  decimals: Int!

  "Maximum amount that can be requested by a party through the built-in asset faucet at a time"
  maxFaucetAmountMint: String!
}

"Represents a signature for the approval of a resource from a validator"
type NodeSignature {
  "The id of the resource being signed for"
  id: String!

  "The signature, as base64 encoding"
  signature: String

  "The kind of signature this is (e.g: withdrawal, new asset, etc)"
  kind: NodeSignatureKind
}

"Represents the type signature provided by a node"
enum NodeSignatureKind {
  "A signature for proposing a new asset into the network"
  AssetNew

  "A signature for allowing a withdrawal of funds"
  AssetWithdrawal
}

"Statistics about the node"
type Statistics {
  "Current block number"
  blockHeight: Int!

  "Number of items in the backlog"
  backlogLength: Int!

  "Total number of peers on the vega network"
  totalPeers: Int!

  "Genesis time of the chain"
  genesisTime: String!

  "Current time (real)"
  currentTime: String!

  "Uptime of the node"
  upTime: String!

  "Current time of the chain (decided through consensus)"
  vegaTime: String!

  "Status of the vega application connection with the chain"
  status: String!

  "Number of transaction processed per block"
  txPerBlock: Int!

  "Average size of the transactions"
  averageTxBytes: Int!

  "Average number of orders added per blocks"
  averageOrdersPerBlock: Int!

  "Number of the trades per seconds"
  tradesPerSecond: Int!

  "Number of orders per seconds"
  ordersPerSecond: Int!

  "Total number of markets"
  totalMarkets: Int!

  "Total number of amended orders"
  totalAmendOrder: Int!

  "Total number of cancelled orders"
  totalCancelOrder: Int!

  "Total number of orders created"
  totalCreateOrder: Int!

  "Total number of orders"
  totalOrders: Int!

  "Total number of trades"
  totalTrades: Int!

  "Version commit hash of the vega node"
  appVersionHash: String!

  "Version of the vega node (semver)"
  appVersion: String!

  "Version of the chain (semver)"
  chainVersion: String!

  "Duration of the last block, in nanoseconds"
  blockDuration: Int!

  "Number of orders subscriptions"
  orderSubscriptions: Int!

  "Number of trades subscriptions"
  tradeSubscriptions: Int!

  "Number of candles subscriptions"
  candleSubscriptions: Int!

  "Number of market depth subscriptions"
  marketDepthSubscriptions: Int!

  "Number of market depth update subscriptions"
  marketDepthUpdateSubscriptions: Int!

  "Number of positions subscriptions"
  positionsSubscriptions: Int!
}

"A mode where Vega try to execute order as soon as they are received"
type ContinuousTrading {
  "Size of an increment in price in terms of the quote currency"
  tickSize: String!
}

"Frequent batch auctions trading mode"
type DiscreteTrading {
  "Duration of the discrete trading batch in nanoseconds. Maximum 1 month."
  duration: Int!
  "Size of an increment in price in terms of the quote currency"
  tickSize: String!
}

union TradingMode = ContinuousTrading | DiscreteTrading

"Parameters for the log normal risk model"
type LogNormalModelParams {
  "mu parameter"
  mu: Float!
  "r parameter"
  r: Float!
  "sigma parameter"
  sigma: Float!
}

"Parameters for the simple risk model"
type SimpleRiskModelParams {
  "Risk factor for long"
  factorLong: Float!
  "Risk factor for short"
  factorShort: Float!
}


"A type of risk model for futures trading"
type LogNormalRiskModel {
  "Lambda parameter of the risk model"
  riskAversionParameter: Float!
  "Tau parameter of the risk model"
  tau: Float!
  "Params for the log normal risk model"
  params: LogNormalModelParams!
}

"A type of simple/dummy risk model where we can specify the risk factor long and short in params"
type SimpleRiskModel {
  "Params for the simple risk model"
  params: SimpleRiskModelParams!
}

union RiskModel = LogNormalRiskModel | SimpleRiskModel

"A set of metadata to associate to an instruments"
type InstrumentMetadata {

  "An arbitrary list of tags to associated to associate to the Instrument (string list)"
  tags: [String!]
}

"An Ethereum oracle"
type EthereumEvent {

  "The ID of the ethereum contract to use (string)"
  contractId: String!

  "Name of the Ethereum event to listen to. (string)"
  event: String!
}

union Oracle = EthereumEvent

"A Future product"
type Future {

  "The maturity date of the product (ISO8601/RFC3339 timestamp)"
  maturity: String!

  "The name of the asset (string)"
  asset: Asset!

  "The oracle used for this product (Oracle union)"
  oracle: Oracle!
}

union Product = Future

"Describe something that can be traded on Vega"
type Instrument {

  "Uniquely identify an instrument accrods all instruments available on Vega (string)"
  id: String!

  "A short non necessarily unique code used to easily describe the instrument (e.g: FX:BTCUSD/DEC18) (string)"
  code: String!

  "Full and fairly descriptive name for the instrument"
  name: String!

  "String representing the quote (e.g. BTCUSD -> USD is quote)"
  quoteName: String!

  "Metadata for this instrument"
  metadata: InstrumentMetadata!

  "A reference to or instance of a fully specified product, including all required product parameters for that product (Product union)"
  product: Product!
}

type MarginCalculator {
  "The scaling factors that will be used for margin calculation"
  scalingFactors: ScalingFactors!
}

type ScalingFactors {
  "the scaling factor that determines the margin level at which we have to search for more money"
  searchLevel: Float!

  "the scaling factor that determines the optimal margin level"
  initialMargin: Float!

  "The scaling factor that determines the overflow margin level"
  collateralRelease: Float!
}

"A tradable instrument is a combination of an instrument and a risk model"
type TradableInstrument {
  "An instance of or reference to a fully specified instrument."
  instrument: Instrument!

  "A reference to a risk model that is valid for the instrument"
  riskModel: RiskModel!

  "Margin calculation info, currently only the scaling factors (search, initial, release) for this tradable instrument"
  marginCalculator: MarginCalculator
}

"The factors applied to calculate the fees"
type FeeFactors {
  "The factor applied to calculate MakerFees, a non-negative float"
  makerFee: String!
  "The factor applied to calculate InfrastructureFees, a non-negative float"
  infrastructureFee: String!
  "The factor applied to calculate LiquidityFees, a non-negative float"
  liquidityFee: String!
}

"The fees applicable to a market"
type Fees {
  "The factors used to calculate the different fees"
  factors: FeeFactors!
}

"""
An auction duration is used to configure 3 auction periods:
1. `duration > 0`, `volume == 0`:
  The auction will last for at least N seconds.
2. `duration == 0`, `volume > 0`:
  The auction will end once we can close with given traded volume.
3. `duration > 0`, `volume > 0`:
  The auction will take at least N seconds, but can end sooner if we can trade a certain volume.
"""
type AuctionDuration {
  "Duration of the auction in seconds"
  durationSecs: Int!
  "Target uncrossing trading volume"
  volume: Int!
}


"""
PriceMonitoringParameters holds a list of triggers
"""
type PriceMonitoringParameters {
  "The list of triggers for this price monitoring"
  triggers: [PriceMonitoringTrigger!]
}

"""
PriceMonitoringParameters holds together price projection horizon τ, probability level p, and auction extension duration
"""
type PriceMonitoringTrigger {
  "Price monitoring projection horizon τ in seconds (> 0)."
  horizonSecs: Int!
  "Price monitoring probability level p. (>0 and < 1)"
  probability: Float!
  """
  Price monitoring auction extension duration in seconds should the price
  breach it's theoretical level over the specified horizon at the specified
  probability level (> 0)
  """
  auctionExtensionSecs: Int!
}


"Configuration of a market price monitorings auctions triggers"
type PriceMonitoringSettings {
  "Specified a set of PriceMonitoringParameters to be use for price monitoring purposes"
  parameters: PriceMonitoringParameters
  "How often (in seconds) the price monitoring bounds should be updated"
  updateFrequencySecs: Int!
}

"Represents a product & associated parameters that can be traded on Vega, has an associated OrderBook and Trade history"
type Market {

  "Market ID"
  id: String!

  "Market full name"
  name: String!

  "Fees related data"
  fees: Fees!

  "An instance of or reference to a tradable instrument."
  tradableInstrument: TradableInstrument!

  "Definitions and required configuration for the trading mode"
  tradingMode: TradingMode!

  """
  decimalPlaces indicates the number of decimal places that an integer must be shifted by in order to get a correct
  number denominated in the currency of the Market. (uint64)

  Examples:
    Currency     Balance  decimalPlaces  Real Balance
    GBP              100              0       GBP 100
    GBP              100              2       GBP   1.00
    GBP              100              4       GBP   0.01
    GBP                1              4       GBP   0.0001   (  0.01p  )

    GBX (pence)      100              0       GBP   1.00     (100p     )
    GBX (pence)      100              2       GBP   0.01     (  1p     )
    GBX (pence)      100              4       GBP   0.0001   (  0.01p  )
    GBX (pence)        1              4       GBP   0.000001 (  0.0001p)
  """
  decimalPlaces: Int!

  """
  Auction duration specifies how long the opening auction will run (minimum
  duration and optionally a minimum traded volume).
  """
  openingAuction: AuctionDuration!

  "Price monitoring settings for the market"
  priceMonitoringSettings: PriceMonitoringSettings!

  "Orders on a market"
  orders (
    "Pagination skip"
    skip: Int
    "Pagination first element"
    first: Int
    "Pagination last element"
    last: Int
  ): [Order!]

  "Get account for a party or market"
  accounts(
    "Id of the party to get the margin account for"
    partyId: String
  ): [Account!]

  "Trades on a market"
  trades (
    "Pagination skip"
    skip: Int
    "Pagination first element"
    first: Int
    "Pagination last element"
    last: Int): [Trade!]

  "Current depth on the orderbook for this market"
  depth(
    "Maximum market order book depth (returns whole order book if omitted)"
    maxDepth: Int): MarketDepth!

  "Candles on a market, for the 'last' n candles, at 'interval' seconds as specified by params"
  candles (
    "RFC3339Nano encoded time from when to get candles"
    since: String!
    "Interval of the candles"
    interval: Interval!
  ): [Candle]

  "marketData for the given market"
  data: MarketData!

  "The list of the liquidity provision commitment for this market"
  liquidityProvisions(
    "An optional party id"
    party: String
  ): [LiquidityProvision!]


}

"""
Market Depth is a measure of the number of open buy and sell orders for a security or currency at different prices.
The depth of market measure provides an indication of the liquidity and depth for the instrument.
"""
type MarketDepth {

    "Market id"
    market: Market!

    "Buy side price levels (if available)"
    buy: [PriceLevel!]

    "Sell side price levels (if available)"
    sell: [PriceLevel!]

    "Last trade for the given market (if available)"
    lastTrade: Trade

    "Sequence number for the current snapshot of the market depth"
    sequenceNumber: String!
}

"""
Market Depth Update is a delta to the current market depth which can be used to update the
market depth structure to keep it correct
"""
type MarketDepthUpdate {

    "Market id"
    market: Market!

    "Buy side price levels (if available)"
    buy: [PriceLevel!]

    "Sell side price levels (if available)"
    sell: [PriceLevel!]

    "Sequence number for the current snapshot of the market depth"
    sequenceNumber: String!
}

"Represents a price on either the buy or sell side and all the orders at that price"
type PriceLevel {

    "The price of all the orders at this level (uint64)"
    price: String!

    "The total remaining size of all orders at this level (uint64)"
    volume: String!

    "The number of orders at this price level (uint64)"
    numberOfOrders: String!
}

"Candle stick representation of trading"
type Candle {

    "Unix epoch+nanoseconds for when the candle occurred"
    timestamp: String!

    "ISO-8601 RFC3339+Nano formatted data and time for the candle"
    datetime: String!

    "High price (uint64)"
    high: String!

    "Low price (uint64)"
    low: String!

    "Open price (uint64)"
    open: String!

    "Close price (uint64)"
    close: String!

    "Volume price (uint64)"
    volume: String!

    "Interval price (string)"
    interval: Interval!
}

"Represents a party on Vega, could be an ethereum wallet address in the future"
type Party {
  "Party identifier"
  id: String!

  "Orders relating to a party"
  orders(
    "Pagination skip"
    skip: Int
    "Pagination first element"
    first: Int
    "Pagination last element"
    last: Int): [Order!]

  "Trades relating to a party (specifically where party is either buyer OR seller)"
  trades(
    "ID of the market we want to get trades for"
    marketId: String
    "Pagination skip"
    skip: Int
    "Pagination first element"
    first: Int
    "Pagination last element"
    last: Int): [Trade!]

  "Collateral accounts relating to a party"
  accounts(
    "Market ID - specify what market accounts for the party to return"
    marketId: String
    "Asset (USD, EUR etc)"
    asset: String,
    "Filter accounts by type (General account, margin account, etc...)"
    type: AccountType
  ): [Account!]

  "Trading positions relating to a party"
  positions: [Position!]

  "marginLevels"
  margins(
    "market id off the margin to get, nil if all markets"
    marketId: String,
  ): [MarginLevels!]

  proposals(
    "Select only proposals in the specified state. Leave out to get all proposals"
    inState: ProposalState
  ): [Proposal]

  votes: [ProposalVote]

  "The list of all withdrawals initiated by the party"
  withdrawals: [Withdrawal!]

  "The list of all deposits for a party by the party"
  deposits: [Deposit!]

  "The list of the liquidity provision commitment from this party"
  liquidityProvisions(
    "An optional market id"
    market: String
  ): [LiquidityProvision!]
}

"""
An individual trader at any point in time is considered net long or net short. This refers to their Open Volume,
calculated using FIFO. This volume is signed as either negative for LONG positions and positive for SHORT positions. A
single trade may end up "splitting" with some of its volume matched into closed volume and some of its volume
remaining as open volume. This is why we don't refer to positions being comprised of trades, rather of volume.
"""
type Position {

  "Market relating to this position"
  market: Market!

  "The party holding this position"
  party: Party!

  "Open volume (uint64)"
  openVolume: String!

  "Realised Profit and Loss (int64)"
  realisedPNL: String!

  "Unrealised Profit and Loss (int64)"
  unrealisedPNL: String!

  "Average entry price for this position"
  averageEntryPrice: String!

  "margins of the party for the given position"
  margins: [MarginLevels!]

  "last time the position was updated (RFC3339Nano)"
  updatedAt: String!
}

"An order in Vega, if active it will be on the OrderBook for the market"
type Order {

  "Hash of the order data"
  id: ID!

  "The worst price the order will trade at (e.g. buy for price or less, sell for price or more) (uint64)"
  price: String!

  "The timeInForce of order (determines how and if it executes, and whether it persists on the book)"
  timeInForce: OrderTimeInForce!

  "Whether the order is to buy or sell"
  side: Side!

  "The market the order is trading on (probably stored internally as a hash of the market details)"
  market: Market!

  "Total number of contracts that may be bought or sold (immutable) (uint64)"
  size: String!

  "Number of contracts remaining of the total that have not yet been bought or sold (uint64)"
  remaining: String!

  "The trader who place the order (probably stored internally as the trader's public key)"
  party: Party!

  "ISO-8601 RFC3339+Nano formatted date and time for when the order was created (timestamp)"
  createdAt: String!

  "Expiration time of this order (ISO-8601 RFC3339+Nano formatted date)"
  expiresAt: String

  "The status of an order, for example 'Active'"
  status: OrderStatus!

  "The external reference (if available) for the order"
  reference: String!

  "Trades relating to this order"
  trades: [Trade!]

  "Type the order type (defaults to TRADER)"
  type: OrderType

  "Reason for the order to be rejected"
  rejectionReason: OrderRejectionReason

  "Version of this order, counts the number of amends"
  version: String!

  "UpdatedAt is the last time the order was altered"
  updatedAt: String!

  "PeggedOrder contains the details about a pegged order"
  peggedOrder: PeggedOrder
}

"An estimate of the fee to be paid by the order"
type OrderEstimate {
  "The estimated fee if the order was to trade"
  fee: TradeFee!

  "The total estimated amount of fee if the order was to trade"
  totalFeeAmount: String!

  "The margin requirement for this order"
  marginLevels: MarginLevels!
}

"A trade on Vega, the result of two orders being 'matched' in the market"
type Trade {

  "The hash of the trade data"
  id: ID!

  "The market the trade occurred on"
  market: Market!

  "The order that bought"
  buyOrder: String!

  "The order that sold"
  sellOrder: String!

  "The party that bought"
  buyer: Party!

  "The party that sold"
  seller: Party!

  "The aggressor indicates whether this trade was related to a BUY or SELL"
  aggressor: Side!

  "The price of the trade (probably initially the passive order price, other determination algorithms are possible though) (uint64)"
  price: String!

  "The number of contracts trades, will always be <= the remaining size of both orders immediately before the trade (uint64)"
  size: String!

  "RFC3339Nano for when the trade occurred"
  createdAt: String!

  "The type of trade"
  type: TradeType!

  "The fee paid by the buyer side of the trade"
  buyerFee: TradeFee!

  "The fee paid by the seller side of the trade"
  sellerFee: TradeFee!

  "The batch in witch the buyer order was submitted (applies only for Auctions modes)"
  buyerAuctionBatch: Int

  "The batch in witch the seller order was submitted (applies only for Auctions modes)"
  sellerAuctionBatch: Int
}

"The fee paid by the party when a trade occurs"
type TradeFee {
  "The maker fee, aggressive party to the other party (the one who had an order in the book)"
  makerFee: String!

  "The infrastructure fee, a fee paid to the node runner to maintain the vega network"
  infrastructureFee: String!

  "The fee paid to the market makers to provide liquidity in the market"
  liquidityFee: String!
}


"Valid trade types"
enum TradeType {

  "Default trade type"
  Default

  "Network close-out - good"
  NetworkCloseOutGood

  "Network close-out - bad"
  NetworkCloseOutBad
}

"An account record"
type Account {
  "Balance as string - current account balance (approx. as balances can be updated several times per second)"
  balance: String!
  "Asset, the 'currency'"
  asset: Asset!
  "Account type (General, Margin, etc)"
  type: AccountType!
  "Market (only relevant to margin accounts)"
  market: Market
}

"All the data related to the approval of a withdrawal from the network"
type Erc20WithdrawalApproval {
  "The source asset in the ethereum network"
  assetSource: String!
  "The amount to be withdrawan"
  amount: String!
  "The expiry of the approval (RFC3339Nano)"
  expiry: String!
  "The nonce to be used in the request"
  nonce: String!
  """
  Signature aggregate from the nodes, in the following format:
  0x + sig1 + sig2 + ... + sigN
  """
  signatures: String!
}

"The details of a withdrawal processed by vega"
type Withdrawal {
  "The Vega internal id of the withdrawal"
  id: String!
  "The PartyID initiating the witndrawal"
  party: Party!
  "The amount to be withdrawn"
  amount: String!
  "The asset to be withdrawn"
  asset: Asset!
  "The current status of the withdrawal"
  status: WithdrawalStatus!
  "A reference the foreign chain can use to refere to when processing the withdrawal"
  ref: String!
  "The time until when the withdrawal will be valid (RFC3339Nano)"
  expiry: String!
  "Time at which the withdrawal was created (RFC3339Nano)"
  createdTimestamp: String!
  "Time at which the withdrawal was finalized (RFC3339Nano)"
  withdrawnTimestamp: String
  "Hash of the transaction on the foreign chain"
  txHash: String
  "Foreign chain specific details about the withdrawal"
  details: WithdrawalDetails
}

union WithdrawalDetails = Erc20WithdrawalDetails

"Specific details for an erc20 withdrawal"
type Erc20WithdrawalDetails {
  "The ethereum address of the receiver of the asset funds"
  receiverAddress: String!
}

"The status of a withdrawal"
enum WithdrawalStatus {
  "The withdrawal is open and being processed by the network"
  Open
  "The withdrawal have been cancelled by the network, either because it expired, or something went wrong with the foreign chain"
  Cancelled
  "The withdrawal was finalized, it was first valid, the foreign chain have executed it and the network updated all accounts"
  Finalized
}

"The details of a deposit processed by vega"
type Deposit {
  "The Vega internal id of the deposit"
  id: String!
  "The PartyID initiating the deposit"
  party: Party!
  "The amount to be withdrawn"
  amount: String!
  "The asset to be withdrawn"
  asset: Asset!
  "The current status of the deposit"
  status: DepositStatus!
  "Time at which the deposit was created (RFC3339Nano)"
  createdTimestamp: String!
  "Time at which the deposit was finalized (RFC3339Nano)"
  creditedTimestamp: String
  "Hash of the transaction on the foreign chain"
  txHash: String
}

"The status of a deposit"
enum DepositStatus {
  "The deposit is open and being processed by the network"
  Open
  "The deposit have been cancelled by the network, either because it expired, or something went wrong with the foreign chain"
  Cancelled
  "The deposit was finalized, it was first valid, the foreign chain have executed it and the network updated all accounts"
  Finalized
}

"Valid order types, these determine what happens when an order is added to the book"
enum OrderTimeInForce {

    "The order either trades completely (remainingSize == 0 after adding) or not at all, does not remain on the book if it doesn't trade"
    FOK

    "The order trades any amount and as much as possible but does not remain on the book (whether it trades or not)"
    IOC

    "This order trades any amount and as much as possible and remains on the book until it either trades completely or is cancelled"
    GTC

    """
    This order type trades any amount and as much as possible and remains on the book until they either trade completely, are cancelled, or expires at a set time
    NOTE: this may in future be multiple types or have sub types for orders that provide different ways of specifying expiry
    """
    GTT

    "This order is only accepted during an auction period"
    GFA

    "This order is only accepted during normal trading (that can be continuous trading or frequent batched auctions)"
    GFN
}

"Valid references used for pegged orders."
enum PeggedReference {
  "Peg the order against the mid price of the order book"
  Mid
  "Peg the order against the best bid price of the order book"
  BestBid
  "Peg the order against the best ask price of the order book"
  BestAsk
}

"Valid order statuses, these determine several states for an order that cannot be expressed with other fields in Order."
enum OrderStatus {

  """
  The order is active and not cancelled or expired, it could be unfilled, partially filled or fully filled.
  Active does not necessarily mean it's still on the order book.
  """
  Active

  "This order trades any amount and as much as possible and remains on the book until it either trades completely or expires."
  Expired

  "The order is cancelled, the order could be partially filled or unfilled before it was cancelled. It is not possible to cancel an order with 0 remaining."
  Cancelled

  "This order was of type IOC or FOK and could not be processed by the matching engine due to lack of liquidity."
  Stopped

  "This order is fully filled with remaining equals zero."
  Filled

  "This order was rejected while beeing processed in the core."
  Rejected

  "This order was partially filled."
  PartiallyFilled

  "This order has been removed from the order book and applies to pegged orders only"
  Parked
}

"Reason for the proposal beeing rejected by the core node"
enum ProposalRejectionReason {
  "The specified close time is too early based on network parameters"
  CloseTimeTooSoon
  "The specified close time is too late based on network parameters"
  CloseTimeTooLate
  "The specified enactment time is too early based on network parameters"
  EnactTimeTooSoon
  "The specified enactment time is too late based on network parameters"
  EnactTimeTooLate
  "The proposer for this proposal as insufficient token"
  InsufficientTokens
  "The instrument quote name and base name were the same"
  InvalidInstrumentSecurity
  "The proposal has no product specified"
  NoProduct
  "The specified product is not supported"
  UnsupportedProduct
  "Invalid future maturity timestamp (expect RFC3339)"
  InvalidFutureMaturityTimestamp
  "The product maturity is already in the past"
  ProductMaturityIsPassed
  "The proposal has no trading mode"
  NoTradingMode
  "The proposal has an unsupported trading mode"
  UnsupportedTradingMode
  "The proposal failed node validation"
  NodeValidationFailed
  "A builtin asset configuration is missing"
  MissingBuiltinAssetField
  "The ERC20 contract address is missing from an ERC20 asset proposal"
  MissingERC20ContractAddress
  "The specified asset for the market proposal is invalid"
  InvalidAsset
  "proposal terms timestamps are not compatible (Validation < Closing < Enactment)"
  IncompatibleTimestamps
  "Risk parameters are missing from the market proposal"
  NoRiskParameters
  "Invalid key in update network parameter proposal"
  NetworkParameterInvalidKey
  "Invalid valid in update network parameter proposal"
  NetworkParameterInvalidValue
  "Validation failed for network parameter proposal"
  NetworkParameterValidationFailed
}

"Reason for the order beeing rejected by the core node"
enum OrderRejectionReason {

  "Market id is invalid"
  InvalidMarketId

  "Order id is invalid"
  InvalidOrderId

  "Order is out of sequence"
  OrderOutOfSequence

  "Remaining size in the order is invalid"
  InvalidRemainingSize

  "Time has failed us"
  TimeFailure

  "Unable to remove the order"
  OrderRemovalFailure

  "Expiration time is invalid"
  InvalidExpirationTime

  "Order reference is invalid"
  InvalidOrderReference

  "Edit is not allowed"
  EditNotAllowed

  "Order amend fail"
  OrderAmendFailure

  "Order does not exist"
  OrderNotFound

  "Party id is invalid"
  InvalidPartyId

  "Market is closed"
  MarketClosed

  "Margin check failed"
  MarginCheckFailed

  "Order missing general account"
  MissingGeneralAccount

  "An internal error happend"
  InternalError

  "Invalid size"
  InvalidSize

  "Invalid persistence"
  InvalidPersistence

  "Invalid type"
  InvalidType

  "Self trading"
  SelfTrading

  "Insufficient funds to pay fees"
  InsufficientFundsToPayFees

  "Invalid Time In Force"
  InvalidTimeInForce

  "Attempt to amend order to GTT without ExpiryAt"
  AmendToGTTWithoutExpiryAt

  "Attempt to amend ExpiryAt to a value before CreatedAt"
  ExpiryAtBeforeCreatedAt

  "Attempt to amend to GTC without an ExpiryAt value"
  GTCWithExpiryAtNotValid

  "Amending to FOK or IOC is invalid"
  CannotAmendToFOKOrIOC

  "Amending to GFA or GFN is invalid"
  CannotAmendToGFAOrGFN

  "Amending from GFA or GFN is invalid"
  CannotAmendFromGFAOrGFN

  "Invalid Market Type"
  InvalidMarketType

  "Good for normal order received during an auction"
  GFAOrderDuringAuction

  "Good for auction order received during continuous trading"
  GFNOrderDuringContinuousTrading

  "IOC orders are not allowed during auction"
  IOCOrderDuringAuction

  "FOK orders are not allowed during auction"
  FOKOrderDuringAuction

  "Pegged orders must be LIMIT orders"
  PeggedOrderMustBeLimitOrder

  "Pegged orders can only have TIF GTC or GTT"
  PeggedOrderMustBeGTTOrGTC

  "Pegged order must have a reference price"
  PeggedOrderWithoutReferencePrice

  "Buy pegged order cannot reference best ask price"
  PeggedOrderBuyCannotReferenceBestAskPrice

  "Pegged order offset must be <= 0"
  PeggedOrderOffsetMustBeLessOrEqualToZero

  "Pegged order offset must be < 0"
  PeggedOrderOffsetMustBeLessThanZero

  "Pegged order offset must be >= 0"
  PeggedOrderOffsetMustBeGreaterOrEqualToZero

  "Sell pegged order cannot reference best bid price"
  PeggedOrderSellCannotReferenceBestBidPrice

  "Pegged order offset must be > zero"
	PeggedOrderOffsetMustBeGreaterThanZero

  "Insufficient balance to submit the order (no deposit made)"
  InsufficientAssetBalance

  "Cannot change pegged order fields on a non pegged order"
  CannotAmendPeggedOrderDetailsOnNonPeggedOrder
  
  "Unable to reprice a pegged order"
  UnableToRepricePeggedOrder
}

enum OrderType {
  "the default order type"
  MARKET

  "mentioned in ticket, but as yet unused order type"
  LIMIT

  """
  Used for distressed traders, an order placed by the network to close out distressed traders
  similar to MARKET order, only no party is attached to the order.
  """
  NETWORK
}

"What market state are we in"
enum MarketState {
  "Continuous trading where orders are processed and potentially matched on arrival"
  CONTINUOUS

  "Auction trading where orders are uncrossed at the end of the opening auction period"
  OPENING_AUCTION

  "Auction as normal trading mode for the market, where orders are uncrossed periodically"
  BATCH_AUCTION

  "Auction triggered by price/liquidity monitoring"
  MONITORING_AUCTION
}

"Whether the placer of an order is aiming to buy or sell on the market"
enum Side {
  "The Placer of the order is aiming to buy"
  Buy

  "The placer of the order is aiming to sell"
  Sell
}

"The interval for trade candles when subscribing via VEGA graphql, default is I15M"
enum Interval {
  "1 minute interval"
  I1M

  "5 minute interval"
  I5M

  "15 minute interval (default)"
  I15M

  "1 hour interval"
  I1H

  "6 hour interval"
  I6H

  "1 day interval"
  I1D
}

"The various account types we have (used by collateral)"
enum AccountType {
  "Insurance pool account - only for 'system' party"
  Insurance
  "Settlement - only for 'system' party"
  Settlement
  "Margin - The leverage account for traders"
  Margin
  "General account - the account containing 'unused' collateral for traders"
  General
  "Infrastructure fee account - the account where all infrastructure fees are collected"
  FeeInfrastructure
  "Liquidity fee account - the account where all infrastructure fees are collected"
  FeeLiquidity
  "LockWithdraw - and account use for party in the process of withdrawing funds"
  LockWithdraw
  "Bond - an account use to maintain MM commitments"
  Bond
}

input SimpleRiskModelParamsInput {
  "Risk factor for long"
  factorLong: Float!
  "Risk factor for short"
  factorShort: Float!
}

input LogNormalModelParamsInput {
  "mu parameter"
  mu: Float!
  "r parameter"
  r: Float!
  "sigma parameter"
  sigma: Float!
}

input LogNormalRiskModelInput {
  "Lambda parameter of the risk model"
  riskAversionParameter: Float!
  "Tau parameter of the risk model"
  tau: Float!
  "Params for the log normal risk model"
  params: LogNormalModelParamsInput!
}

input RiskParametersInput {
  "Simple risk model parameters. Set only if risk model is Simple"
  simple: SimpleRiskModelParamsInput
  "Log normal risk model parameters. Set only if risk model is LogNormal"
  logNormal: LogNormalRiskModelInput
}

"Future product configuration"
input FutureProductInput {
  "Future product maturity (ISO8601/RFC3339 timestamp)"
  maturity: String!
  "Product asset name"
  asset: String!
}

type FutureProduct {
  "Future product maturity (ISO8601/RFC3339 timestamp)"
  maturity: String!
  "Product asset name"
  asset: Asset!
}

input InstrumentConfigurationInput {
  "Full and fairly descriptive name for the instrument"
  name: String!
  "A short non necessarily unique code used to easily describe the instrument (e.g: FX:BTCUSD/DEC18)"
  code: String!
  "String representing the quote (e.g. BTCUSD -> USD is quote)"
  quoteName: String!
  "Future product specification"
  futureProduct: FutureProductInput
}

type InstrumentConfiguration {
  "Full and fairly descriptive name for the instrument"
  name: String!
  "A short non necessarily unique code used to easily describe the instrument (e.g: FX:BTCUSD/DEC18)"
  code: String!
  "String representing the quote (e.g. BTCUSD -> USD is quote)"
  quoteName: String!
  "Future product specification"
  futureProduct: FutureProduct
}

"A mode where Vega try to execute order as soon as they are received"
input ContinuousTradingInput {
  "Size of an increment in price in terms of the quote currency. Note this field should not be used and will be ignored"
  tickSize: String
}

"Frequent batch auctions trading mode"
input DiscreteTradingInput {
  "Duration of the discrete trading batch in nanoseconds. Maximum 1 month."
  duration: Int!
  "Size of an increment in price in terms of the quote currency. Note this field should not be used and will be ignored"
  tickSize: String
}

"""
PriceMonitoringParameters holds a list of triggers
"""
input PriceMonitoringParametersInput {
  "The list of triggers for this price monitoring"
  triggers: [PriceMonitoringTriggerInput!]
}

"""
PriceMonitoringParameters holds together price projection horizon τ, probability level p, and auction extension duration
"""
input PriceMonitoringTriggerInput {
  "Price monitoring projection horizon τ in seconds (> 0)."
  horizonSecs: Int!
  "Price monitoring probability level p. (>0 and < 1)"
  probability: Float!
  """
  Price monitoring auction extension duration in seconds should the price
  breach it's theoretical level over the specified horizon at the specified
  probability level (> 0)
  """
  auctionExtensionSecs: Int!
}

"Configuration of a market price monitorings auctions triggers"
input PriceMonitoringSettingsInput {
  "Specified a set of PriceMonitoringParameters to be use for price monitoring purposes"
  parameters: PriceMonitoringParametersInput
  "How often (in seconds) the price monitoring bounds should be updated"
  updateFrequencySecs: Int
}

"""
Allows creating new markets on the network
"""
input NewMarketInput {
  "New market instrument configuration"
  instrument: InstrumentConfigurationInput!
  "Decimal places used for the new market"
  decimalPlaces: Int!
  "New market risk configuration"
  riskParameters: RiskParametersInput!
  "Metadata for this instrument, tags"
  metadata: [String!]
  "The proposed duration for the opening auction for this market in seconds"
  openingAuctionDurationSecs: Int
  "Price monitoring configuration"
  priceMonitoringParameters: PriceMonitoringParametersInput

  "A mode where Vega try to execute order as soon as they are received. Valid only if discreteTrading is not set"
  continuousTrading: ContinuousTradingInput
  "Frequent batch auctions trading mode. Valid only if continuousTrading is not set"
  discreteTrading: DiscreteTradingInput
}

type NewMarket {
  "New market instrument configuration"
  instrument: InstrumentConfiguration!
  "Decimal places used for the new market"
  decimalPlaces: Int!
  "New market risk configuration"
  riskParameters: RiskModel!
  "Metadata for this instrument, tags"
  metadata: [String!]
  "Trading mode"
  tradingMode: TradingMode!
}

"""
Incomplete change definition for governance proposal terms
TODO: complete the type
"""
type UpdateMarket {
  marketId: String!
}
input UpdateMarketInput {
  marketId: String!
}

"A new asset proposal change"
type NewAsset {
  "the source of the new Asset"
  source: AssetSource!
}

"Allows submitting a proposal for changing network parameters"
type UpdateNetworkParameter {
  networkParameter: NetworkParameter!
}

"Allows submitting a proposal for changing network parameters"
input UpdateNetworkParameterInput {
  networkParameter: NetworkParameterInput!
}

"Representation of a network parameter"
type NetworkParameter {
  "The name of the network parameter"
  key: String!
  "The value of the network parameter"
  value: String!
}

"Representation of a network parameter"
input NetworkParameterInput {
  "The name of the network parameter"
  key: String!
  "The value of the network parameter"
  value: String!
}

union ProposalChange = NewMarket | UpdateMarket | UpdateNetworkParameter | NewAsset
# there are no unions for input types as of today, see: https://github.com/graphql/graphql-spec/issues/488

type ProposalTerms {
  """
  ISO-8601 time and date when voting closes for this proposal.
  Constrained by "minCloseInSeconds" and "maxCloseInSeconds" network parameters.
  """
  closingDatetime: String!
  """
  ISO-8601 time and date when this proposal is executed (if passed). Note that it has to be after closing date time.
  Constrained by "minEnactInSeconds" and "maxEnactInSeconds" network parameters.
  """
  enactmentDatetime: String!

  "Actual change being introduced by the proposal - action the proposal triggers if passed and enacted."
  change: ProposalChange!
}

# there are no unions for input types as of today, see: https://github.com/graphql/graphql-spec/issues/488
"Proposal terms input. Only one kind of change is expected. Proposals with no changes or more than one will not be accepted."
input ProposalTermsInput {
  """
  ISO-8601 time and date when voting closes for this proposal.
  Constrained by "minCloseInSeconds" and "maxCloseInSeconds" network parameters.
  """
  closingDatetime: String!
  """
  ISO-8601 time and date when this proposal is executed (if passed). Note that it has to be after closing date time.
  Constrained by "minEnactInSeconds" and "maxEnactInSeconds" network parameters.
  """
  enactmentDatetime: String!


  """
  Field defining new market change - the proposal will create new market if passed and enacted.
  It can only be set if "updateMarket" and "updateNetwork" are not set (the proposal will be rejected otherwise).
  One of "newMarket", "updateMarket", "updateNetwork" must be set (the proposal will be rejected otherwise).
  """
  newMarket: NewMarketInput
  """
  Field defining update market change - the proposal will update existing market if passed and enacted.
  It can only be set if "newMarket" and "updateNetwork" are not set (the proposal will be rejected otherwise).
  One of "newMarket", "updateMarket", "updateNetwork" must be set (the proposal will be rejected otherwise).
  """
  updateMarket: UpdateMarketInput

  """
  Field defining update network change - the proposal will update Vega network parameters if passed and enacted.
  It can only be set if "newMarket" and "updateMarket" are not set (the proposal will be rejected otherwise).
  One of "newMarket", "updateMarket", "updateNetwork" must be set (the proposal will be rejected otherwise).
  """
  updateNetworkParameter: UpdateNetworkParameterInput

  "a new Asset proposal, this will create a new asset to be used in the vega network"
  newAsset: NewAssetInput

}

"A new asset to be added into vega"
input NewAssetInput {
  "A new builtin assed to be created"
  builtinAsset: BuiltinAssetInput

  "A new ERC20 asset to be created"
  erc20: ERC20Input
}

"An asset originated from an Ethereum ERC20 Token"
input ERC20Input {
  "The address of the erc20 contract"
  contractAddress: String!
}

"A vega builtin asset, mostly for testing purpose"
input BuiltinAssetInput {
  "The full name of the asset (e.g: Great British Pound)"
  name: String!

  "The symbol of the asset (e.g: GBP)"
  symbol: String!

  "The total supply of the market"
  totalSupply: String!

  "The precision of the asset"
  decimals: Int!

  "Maximum amount that can be requested by a party through the built-in asset faucet at a time"
  maxFaucetAmountMint: String!
}

"""
Varoius states a proposal can transition through:
  Open ->
      - Passed -> Enacted.
      - Rejected.
  Proposal can enter Failed state from any other state.
"""
enum ProposalState {
  "Proposal became invalid and cannot be processed"
  Failed
  "Proposal is open for voting"
  Open
  "Proposal has gained enough support to be executed"
  Passed
  "Proposal didn't get enough votes"
  Declined
  "Proposal has could not gain enough support to be executed"
  Rejected
  "Proposal has been executed and the changes under this proposal have now been applied"
  Enacted
  "Proposal is waiting for the node to run validation"
  WaitingForNodeVote
}

type Proposal {
  "Proposal id that is filled by VEGA once proposal reaches the network"
  id: ID
  "A UUID reference to aid tracking proposals on VEGA"
  reference: String!
  "Party that prepared the proposal"
  party: Party!
  "State of the proposal"
  state: ProposalState!
  "ISO-8601 time and date when the proposal reached Vega network"
  datetime: String!
  "Terms of the proposal"
  terms: ProposalTerms!

  "Yes votes cast for this proposal"
  yesVotes: [Vote]
  "No votes cast for this proposal"
  noVotes: [Vote]

  "Reason for the proposal to be rejected by the core"
  rejectionReason: ProposalRejectionReason
}

type PreparedProposal {
  "Raw transaction data to sign & submit"
  blob: String!
  "The pending proposal"
  pendingProposal: Proposal!
}

enum VoteValue {
  "NO reject a proposal"
  NO
  "YES accept a proposal"
  YES
}

type Vote {
  "The vote value cast"
  value: VoteValue!

  "The party casting the vote"
  party: Party!

  "ISO-8601 time and date when the vote reached Vega network"
  datetime: String!

  "The ID of the proposal this vote applies to"
  proposalId: ID!
}

type ProposalVote {
  "Cast vote"
  vote: Vote!

  "Proposal casting the vote on"
  proposalId: ID!
}

type PreparedVote {
  "Raw, serialised vote to be signed"
  blob: String!
  "The vote serialised in the blob field"
  vote: ProposalVote!
}

type TimeUpdate {
  "timestamp - new block time"
  timestamp: String!
}

type MarketEvent {
  "the market ID"
  marketID: String!
  "the message - market events are used for logging"
  payload: String!
}

type TransferBalance {
  "Account involved in transfer"
  account: Account!
  "The new balance of the account"
  balance: Int!
}

type LedgerEntry {
  "account from which the asset was taken"
  fromAccount: String!
  "account to which the balance was transferred"
  toAccount: String!
  "the amount transferred"
  amount: Int!
  "The transfer reference"
  reference: String!
  "Type of ledger entry"
  type: String!
  "The time at which the transfer was made"
  timestamp: String!
}

type TransferResponse {
  "the ledger entries and balances resulting from a transfer request"
  transfers: [LedgerEntry!]
  "the balances of accounts involved in the transfer"
  balances: [TransferBalance!]
}

type TransferResponses {
  "a group of transfer responses - events from core"
  responses: [TransferResponse!]
}

type PositionResolution {
  "the market ID where position resolution happened"
  marketID: String!
  "number of distressed traders on market"
  distressed: Int!
  "number of traders closed out"
  closed: Int!
  "the mark price at which traders were distressed/closed out"
  markPrice: Int!
}

type LossSocialization {
  "the market ID where loss socialization happened"
  marketID: String!
  "the party that was part of the loss socialization"
  partyID: String!
  "the amount lost"
  amount: Int!
}

type TradeSettlement {
  "the size of the trade"
  size: Int!
  "the price of the trade"
  price: Int!
}

type SettlePosition {
  "the market in which a position was settled"
  marketID: String!
  "the party who settled a position"
  partyID: String!
  "the settle price"
  price: Int!
  "the trades that were settled to close the overall position"
  tradeSettlements: [TradeSettlement!]
}

type SettleDistressed {
  "the market in which a position was closed out"
  marketID: String!
  "the party who closed out"
  partyID: String!
  "the margin taken from distressed trader"
  margin: Int!
  "the price at which position was closed out"
  price: Int!
}

type MarketTick {
  "the market ID"
  marketID: String!
  "the block time"
  time: String!
}

type AuctionEvent {
  "the market ID"
  marketID: String!
  "event fired because of auction end"
  leave: Boolean!
  "event related to opening auction"
  openingAuction: Boolean!
  "start time of auction"
  auctionStart: String!
  "optional end time of auction"
  auctionEnd: String!
  "What triggered the auction"
  trigger: AuctionTrigger!
}

enum AuctionTrigger {
  "Invalid trigger (or no auction)"
  Unspecified
  "Auction because market is trading FBA"
  Batch
  "Opening auction"
  Opening
  "Price monitoring"
  Price
  "Liquidity monitoring"
  Liquidity
}

enum BusEventType {
  "Vega Time has changed"
  TimeUpdate
  "A balance has been transferred between accounts"
  TransferResponses
  "A position resolution event has occurred"
  PositionResolution
  "An order has been created or updated"
  Order
  "An account has been updated"
  Account
  "A party has been updated"
  Party
  "A trade has been created"
  Trade
  "Margin levels have changed for a position"
  MarginLevels
  "A governance proposal has been created or updated"
  Proposal
  "A vote has been placed on a governance proposal"
  Vote
  "Market data has been updated"
  MarketData
  "Validator nodes signatures for an event"
  NodeSignature
  "A position has been closed without sufficient insurance pool balance to cover it"
  LossSocialization
  "A position has been settled"
  SettlePosition
  "A distressed position has been settled"
  SettleDistressed
  "A new market has been created"
  MarketCreated
  "An asset has been created or update"
  Asset
  "A market has progressed by one tick"
  MarketTick
  "A market has either entered or exited auction"
  Auction
  "A risk factor adjustment was made"
  RiskFactor
  "A liquidity commitment change occurred"
  LiquidityProvision
  "Collateral has deposited in to this Vega network via the bridge"
  Deposit
  "Collateral has been withdrawn from this Vega network via the bridge"
  Withdrawal
  "constant for market events - mainly used for logging"
  Market
}

"union type for wrapped events in stream PROPOSAL is mapped to governance data, something to keep in mind"
union Event = TimeUpdate | MarketEvent | TransferResponses | PositionResolution | Order | Trade | Account | Party | MarginLevels | Proposal | Vote | MarketData | NodeSignature | LossSocialization | SettlePosition | Market | Asset | MarketTick | SettleDistressed | AuctionEvent | RiskFactor | Deposit | Withdrawal

type BusEvent {
  "the id for this event"
  eventID: String!
  "the block hash"
  block: String!
  "the type of event we're dealing with"
  type: BusEventType!
  "the payload - the wrapped event"
  event: Event!
}

"A risk factor emitted by the risk model for a given market"
type RiskFactor {
  "market the risk factor was emitted for"
  market: String!
  "short factor"
  short: Float!
  "long factor"
  long: Float!
}

"A special order type for liquidity providers"
type LiquidityOrder {
  "The value to which this order is tied"
  reference: PeggedReference!
  "The proportion of the commitment allocted to this order"
  proportion: Int!
  "Offset from the pegged reference"
  offset: Int!
}

"A special order type for liquidity providers"
input LiquidityOrderInput {
  "The value to which this order is tied"
  reference: PeggedReference!
  "The proportion of the commitment allocted to this order"
  proportion: Int!
  "Offset from the pegged reference"
  offset: Int!
}

"Status of a liquidity provision order"
enum LiquidityProvisionStatus {
  "An active liquidity provision"
  Active
  "A liquidity provision stopped by the network"
  Stopped
  "A Cancelled Liquidity provision"
  Cancelled
}

type LiquidityOrderReference {
  "The id of the pegged order generated to fullfill this commitment"
  order: Order!
  "The liquidity order"
  liquidityOrder: LiquidityOrder!
}

"The command to be sent to the chain for a liquidity provision submission"
type LiquidityProvision {
  "Unique identifier for the order (set by the system after consensus)"
  id: String
  "The Id of the party making this commitment"
  party: Party!
  "When the liquidity provision was initially created (formatted RFC3339)"
  createdAt: String!
  "When the liquidity provision was updated (formatted RFC3339)"
  updatedAt: String!
  "Market identifier for the order"
  market: Market!
  "Specified as a unitless number that represents the amount of settlement asset of the market."
  commitmentAmount: Int!
  "nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers."
  fee: String!
  "a set of liquidity sell orders to meet the liquidity provision obligation, see MM orders spec."
  sells: [LiquidityOrderReference!]!
  "a set of liquidity buy orders to meet the liquidity provision obligation, see MM orders spec."
  buys:  [LiquidityOrderReference!]!
  "The version of this LiquidityProvision"
  version: String!
  "The current status of this liquidity provision"
  status: LiquidityProvisionStatus!
}

"A prepared LiquidityProvision command"
type PreparedLiquidityProvision {
  "The blob to be send to the wallet and to be signed"
  blob: String!
}
