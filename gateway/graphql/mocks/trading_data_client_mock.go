// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/gateway/graphql (interfaces: TradingDataClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	api "code.vegaprotocol.io/vega/proto/api"
	context "context"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTradingDataClient is a mock of TradingDataClient interface
type MockTradingDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockTradingDataClientMockRecorder
}

// MockTradingDataClientMockRecorder is the mock recorder for MockTradingDataClient
type MockTradingDataClientMockRecorder struct {
	mock *MockTradingDataClient
}

// NewMockTradingDataClient creates a new mock instance
func NewMockTradingDataClient(ctrl *gomock.Controller) *MockTradingDataClient {
	mock := &MockTradingDataClient{ctrl: ctrl}
	mock.recorder = &MockTradingDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTradingDataClient) EXPECT() *MockTradingDataClientMockRecorder {
	return m.recorder
}

// AccountsSubscribe mocks base method
func (m *MockTradingDataClient) AccountsSubscribe(arg0 context.Context, arg1 *api.AccountsSubscribeRequest, arg2 ...grpc.CallOption) (api.TradingData_AccountsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountsSubscribe", varargs...)
	ret0, _ := ret[0].(api.TradingData_AccountsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountsSubscribe indicates an expected call of AccountsSubscribe
func (mr *MockTradingDataClientMockRecorder) AccountsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountsSubscribe", reflect.TypeOf((*MockTradingDataClient)(nil).AccountsSubscribe), varargs...)
}

// Candles mocks base method
func (m *MockTradingDataClient) Candles(arg0 context.Context, arg1 *api.CandlesRequest, arg2 ...grpc.CallOption) (*api.CandlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Candles", varargs...)
	ret0, _ := ret[0].(*api.CandlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Candles indicates an expected call of Candles
func (mr *MockTradingDataClientMockRecorder) Candles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Candles", reflect.TypeOf((*MockTradingDataClient)(nil).Candles), varargs...)
}

// CandlesSubscribe mocks base method
func (m *MockTradingDataClient) CandlesSubscribe(arg0 context.Context, arg1 *api.CandlesSubscribeRequest, arg2 ...grpc.CallOption) (api.TradingData_CandlesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CandlesSubscribe", varargs...)
	ret0, _ := ret[0].(api.TradingData_CandlesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CandlesSubscribe indicates an expected call of CandlesSubscribe
func (mr *MockTradingDataClientMockRecorder) CandlesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CandlesSubscribe", reflect.TypeOf((*MockTradingDataClient)(nil).CandlesSubscribe), varargs...)
}

// GetNetworkParametersProposals mocks base method
func (m *MockTradingDataClient) GetNetworkParametersProposals(arg0 context.Context, arg1 *api.GetNetworkParametersProposalsRequest, arg2 ...grpc.CallOption) (*api.GetNetworkParametersProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkParametersProposals", varargs...)
	ret0, _ := ret[0].(*api.GetNetworkParametersProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkParametersProposals indicates an expected call of GetNetworkParametersProposals
func (mr *MockTradingDataClientMockRecorder) GetNetworkParametersProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkParametersProposals", reflect.TypeOf((*MockTradingDataClient)(nil).GetNetworkParametersProposals), varargs...)
}

// GetNewAssetProposals mocks base method
func (m *MockTradingDataClient) GetNewAssetProposals(arg0 context.Context, arg1 *api.GetNewAssetProposalsRequest, arg2 ...grpc.CallOption) (*api.GetNewAssetProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewAssetProposals", varargs...)
	ret0, _ := ret[0].(*api.GetNewAssetProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewAssetProposals indicates an expected call of GetNewAssetProposals
func (mr *MockTradingDataClientMockRecorder) GetNewAssetProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewAssetProposals", reflect.TypeOf((*MockTradingDataClient)(nil).GetNewAssetProposals), varargs...)
}

// GetNewMarketProposals mocks base method
func (m *MockTradingDataClient) GetNewMarketProposals(arg0 context.Context, arg1 *api.GetNewMarketProposalsRequest, arg2 ...grpc.CallOption) (*api.GetNewMarketProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewMarketProposals", varargs...)
	ret0, _ := ret[0].(*api.GetNewMarketProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewMarketProposals indicates an expected call of GetNewMarketProposals
func (mr *MockTradingDataClientMockRecorder) GetNewMarketProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewMarketProposals", reflect.TypeOf((*MockTradingDataClient)(nil).GetNewMarketProposals), varargs...)
}

// GetProposalByID mocks base method
func (m *MockTradingDataClient) GetProposalByID(arg0 context.Context, arg1 *api.GetProposalByIDRequest, arg2 ...grpc.CallOption) (*api.GetProposalByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalByID", varargs...)
	ret0, _ := ret[0].(*api.GetProposalByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByID indicates an expected call of GetProposalByID
func (mr *MockTradingDataClientMockRecorder) GetProposalByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByID", reflect.TypeOf((*MockTradingDataClient)(nil).GetProposalByID), varargs...)
}

// GetProposalByReference mocks base method
func (m *MockTradingDataClient) GetProposalByReference(arg0 context.Context, arg1 *api.GetProposalByReferenceRequest, arg2 ...grpc.CallOption) (*api.GetProposalByReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalByReference", varargs...)
	ret0, _ := ret[0].(*api.GetProposalByReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByReference indicates an expected call of GetProposalByReference
func (mr *MockTradingDataClientMockRecorder) GetProposalByReference(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByReference", reflect.TypeOf((*MockTradingDataClient)(nil).GetProposalByReference), varargs...)
}

// GetProposals mocks base method
func (m *MockTradingDataClient) GetProposals(arg0 context.Context, arg1 *api.GetProposalsRequest, arg2 ...grpc.CallOption) (*api.GetProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposals", varargs...)
	ret0, _ := ret[0].(*api.GetProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposals indicates an expected call of GetProposals
func (mr *MockTradingDataClientMockRecorder) GetProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposals", reflect.TypeOf((*MockTradingDataClient)(nil).GetProposals), varargs...)
}

// GetProposalsByParty mocks base method
func (m *MockTradingDataClient) GetProposalsByParty(arg0 context.Context, arg1 *api.GetProposalsByPartyRequest, arg2 ...grpc.CallOption) (*api.GetProposalsByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalsByParty", varargs...)
	ret0, _ := ret[0].(*api.GetProposalsByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalsByParty indicates an expected call of GetProposalsByParty
func (mr *MockTradingDataClientMockRecorder) GetProposalsByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsByParty", reflect.TypeOf((*MockTradingDataClient)(nil).GetProposalsByParty), varargs...)
}

// GetUpdateMarketProposals mocks base method
func (m *MockTradingDataClient) GetUpdateMarketProposals(arg0 context.Context, arg1 *api.GetUpdateMarketProposalsRequest, arg2 ...grpc.CallOption) (*api.GetUpdateMarketProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpdateMarketProposals", varargs...)
	ret0, _ := ret[0].(*api.GetUpdateMarketProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateMarketProposals indicates an expected call of GetUpdateMarketProposals
func (mr *MockTradingDataClientMockRecorder) GetUpdateMarketProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateMarketProposals", reflect.TypeOf((*MockTradingDataClient)(nil).GetUpdateMarketProposals), varargs...)
}

// GetVegaTime mocks base method
func (m *MockTradingDataClient) GetVegaTime(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*api.VegaTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVegaTime", varargs...)
	ret0, _ := ret[0].(*api.VegaTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVegaTime indicates an expected call of GetVegaTime
func (mr *MockTradingDataClientMockRecorder) GetVegaTime(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVegaTime", reflect.TypeOf((*MockTradingDataClient)(nil).GetVegaTime), varargs...)
}

// GetVotesByParty mocks base method
func (m *MockTradingDataClient) GetVotesByParty(arg0 context.Context, arg1 *api.GetVotesByPartyRequest, arg2 ...grpc.CallOption) (*api.GetVotesByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVotesByParty", varargs...)
	ret0, _ := ret[0].(*api.GetVotesByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesByParty indicates an expected call of GetVotesByParty
func (mr *MockTradingDataClientMockRecorder) GetVotesByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByParty", reflect.TypeOf((*MockTradingDataClient)(nil).GetVotesByParty), varargs...)
}

// LastTrade mocks base method
func (m *MockTradingDataClient) LastTrade(arg0 context.Context, arg1 *api.LastTradeRequest, arg2 ...grpc.CallOption) (*api.LastTradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LastTrade", varargs...)
	ret0, _ := ret[0].(*api.LastTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastTrade indicates an expected call of LastTrade
func (mr *MockTradingDataClientMockRecorder) LastTrade(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTrade", reflect.TypeOf((*MockTradingDataClient)(nil).LastTrade), varargs...)
}

// MarginLevels mocks base method
func (m *MockTradingDataClient) MarginLevels(arg0 context.Context, arg1 *api.MarginLevelsRequest, arg2 ...grpc.CallOption) (*api.MarginLevelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarginLevels", varargs...)
	ret0, _ := ret[0].(*api.MarginLevelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarginLevels indicates an expected call of MarginLevels
func (mr *MockTradingDataClientMockRecorder) MarginLevels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarginLevels", reflect.TypeOf((*MockTradingDataClient)(nil).MarginLevels), varargs...)
}

// MarginLevelsSubscribe mocks base method
func (m *MockTradingDataClient) MarginLevelsSubscribe(arg0 context.Context, arg1 *api.MarginLevelsSubscribeRequest, arg2 ...grpc.CallOption) (api.TradingData_MarginLevelsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarginLevelsSubscribe", varargs...)
	ret0, _ := ret[0].(api.TradingData_MarginLevelsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarginLevelsSubscribe indicates an expected call of MarginLevelsSubscribe
func (mr *MockTradingDataClientMockRecorder) MarginLevelsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarginLevelsSubscribe", reflect.TypeOf((*MockTradingDataClient)(nil).MarginLevelsSubscribe), varargs...)
}

// MarketAccounts mocks base method
func (m *MockTradingDataClient) MarketAccounts(arg0 context.Context, arg1 *api.MarketAccountsRequest, arg2 ...grpc.CallOption) (*api.MarketAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketAccounts", varargs...)
	ret0, _ := ret[0].(*api.MarketAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketAccounts indicates an expected call of MarketAccounts
func (mr *MockTradingDataClientMockRecorder) MarketAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketAccounts", reflect.TypeOf((*MockTradingDataClient)(nil).MarketAccounts), varargs...)
}

// MarketByID mocks base method
func (m *MockTradingDataClient) MarketByID(arg0 context.Context, arg1 *api.MarketByIDRequest, arg2 ...grpc.CallOption) (*api.MarketByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketByID", varargs...)
	ret0, _ := ret[0].(*api.MarketByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketByID indicates an expected call of MarketByID
func (mr *MockTradingDataClientMockRecorder) MarketByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketByID", reflect.TypeOf((*MockTradingDataClient)(nil).MarketByID), varargs...)
}

// MarketDataByID mocks base method
func (m *MockTradingDataClient) MarketDataByID(arg0 context.Context, arg1 *api.MarketDataByIDRequest, arg2 ...grpc.CallOption) (*api.MarketDataByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDataByID", varargs...)
	ret0, _ := ret[0].(*api.MarketDataByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDataByID indicates an expected call of MarketDataByID
func (mr *MockTradingDataClientMockRecorder) MarketDataByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDataByID", reflect.TypeOf((*MockTradingDataClient)(nil).MarketDataByID), varargs...)
}

// MarketDepth mocks base method
func (m *MockTradingDataClient) MarketDepth(arg0 context.Context, arg1 *api.MarketDepthRequest, arg2 ...grpc.CallOption) (*api.MarketDepthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDepth", varargs...)
	ret0, _ := ret[0].(*api.MarketDepthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDepth indicates an expected call of MarketDepth
func (mr *MockTradingDataClientMockRecorder) MarketDepth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDepth", reflect.TypeOf((*MockTradingDataClient)(nil).MarketDepth), varargs...)
}

// MarketDepthSubscribe mocks base method
func (m *MockTradingDataClient) MarketDepthSubscribe(arg0 context.Context, arg1 *api.MarketDepthSubscribeRequest, arg2 ...grpc.CallOption) (api.TradingData_MarketDepthSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDepthSubscribe", varargs...)
	ret0, _ := ret[0].(api.TradingData_MarketDepthSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDepthSubscribe indicates an expected call of MarketDepthSubscribe
func (mr *MockTradingDataClientMockRecorder) MarketDepthSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDepthSubscribe", reflect.TypeOf((*MockTradingDataClient)(nil).MarketDepthSubscribe), varargs...)
}

// Markets mocks base method
func (m *MockTradingDataClient) Markets(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*api.MarketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Markets", varargs...)
	ret0, _ := ret[0].(*api.MarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Markets indicates an expected call of Markets
func (mr *MockTradingDataClientMockRecorder) Markets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markets", reflect.TypeOf((*MockTradingDataClient)(nil).Markets), varargs...)
}

// MarketsDataSubscribe mocks base method
func (m *MockTradingDataClient) MarketsDataSubscribe(arg0 context.Context, arg1 *api.MarketsDataSubscribeRequest, arg2 ...grpc.CallOption) (api.TradingData_MarketsDataSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketsDataSubscribe", varargs...)
	ret0, _ := ret[0].(api.TradingData_MarketsDataSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketsDataSubscribe indicates an expected call of MarketsDataSubscribe
func (mr *MockTradingDataClientMockRecorder) MarketsDataSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketsDataSubscribe", reflect.TypeOf((*MockTradingDataClient)(nil).MarketsDataSubscribe), varargs...)
}

// ObserveGovernance mocks base method
func (m *MockTradingDataClient) ObserveGovernance(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (api.TradingData_ObserveGovernanceClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveGovernance", varargs...)
	ret0, _ := ret[0].(api.TradingData_ObserveGovernanceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveGovernance indicates an expected call of ObserveGovernance
func (mr *MockTradingDataClientMockRecorder) ObserveGovernance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveGovernance", reflect.TypeOf((*MockTradingDataClient)(nil).ObserveGovernance), varargs...)
}

// ObservePartyProposals mocks base method
func (m *MockTradingDataClient) ObservePartyProposals(arg0 context.Context, arg1 *api.ObservePartyProposalsRequest, arg2 ...grpc.CallOption) (api.TradingData_ObservePartyProposalsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObservePartyProposals", varargs...)
	ret0, _ := ret[0].(api.TradingData_ObservePartyProposalsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObservePartyProposals indicates an expected call of ObservePartyProposals
func (mr *MockTradingDataClientMockRecorder) ObservePartyProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservePartyProposals", reflect.TypeOf((*MockTradingDataClient)(nil).ObservePartyProposals), varargs...)
}

// ObservePartyVotes mocks base method
func (m *MockTradingDataClient) ObservePartyVotes(arg0 context.Context, arg1 *api.ObservePartyVotesRequest, arg2 ...grpc.CallOption) (api.TradingData_ObservePartyVotesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObservePartyVotes", varargs...)
	ret0, _ := ret[0].(api.TradingData_ObservePartyVotesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObservePartyVotes indicates an expected call of ObservePartyVotes
func (mr *MockTradingDataClientMockRecorder) ObservePartyVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservePartyVotes", reflect.TypeOf((*MockTradingDataClient)(nil).ObservePartyVotes), varargs...)
}

// ObserveProposalVotes mocks base method
func (m *MockTradingDataClient) ObserveProposalVotes(arg0 context.Context, arg1 *api.ObserveProposalVotesRequest, arg2 ...grpc.CallOption) (api.TradingData_ObserveProposalVotesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveProposalVotes", varargs...)
	ret0, _ := ret[0].(api.TradingData_ObserveProposalVotesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveProposalVotes indicates an expected call of ObserveProposalVotes
func (mr *MockTradingDataClientMockRecorder) ObserveProposalVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveProposalVotes", reflect.TypeOf((*MockTradingDataClient)(nil).ObserveProposalVotes), varargs...)
}

// OrderByID mocks base method
func (m *MockTradingDataClient) OrderByID(arg0 context.Context, arg1 *api.OrderByIDRequest, arg2 ...grpc.CallOption) (*proto.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByID", varargs...)
	ret0, _ := ret[0].(*proto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByID indicates an expected call of OrderByID
func (mr *MockTradingDataClientMockRecorder) OrderByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByID", reflect.TypeOf((*MockTradingDataClient)(nil).OrderByID), varargs...)
}

// OrderByMarketAndID mocks base method
func (m *MockTradingDataClient) OrderByMarketAndID(arg0 context.Context, arg1 *api.OrderByMarketAndIdRequest, arg2 ...grpc.CallOption) (*api.OrderByMarketAndIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByMarketAndID", varargs...)
	ret0, _ := ret[0].(*api.OrderByMarketAndIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByMarketAndID indicates an expected call of OrderByMarketAndID
func (mr *MockTradingDataClientMockRecorder) OrderByMarketAndID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByMarketAndID", reflect.TypeOf((*MockTradingDataClient)(nil).OrderByMarketAndID), varargs...)
}

// OrderByReference mocks base method
func (m *MockTradingDataClient) OrderByReference(arg0 context.Context, arg1 *api.OrderByReferenceRequest, arg2 ...grpc.CallOption) (*api.OrderByReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByReference", varargs...)
	ret0, _ := ret[0].(*api.OrderByReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByReference indicates an expected call of OrderByReference
func (mr *MockTradingDataClientMockRecorder) OrderByReference(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByReference", reflect.TypeOf((*MockTradingDataClient)(nil).OrderByReference), varargs...)
}

// OrderByReferenceID mocks base method
func (m *MockTradingDataClient) OrderByReferenceID(arg0 context.Context, arg1 *api.OrderByReferenceIDRequest, arg2 ...grpc.CallOption) (*proto.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByReferenceID", varargs...)
	ret0, _ := ret[0].(*proto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByReferenceID indicates an expected call of OrderByReferenceID
func (mr *MockTradingDataClientMockRecorder) OrderByReferenceID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByReferenceID", reflect.TypeOf((*MockTradingDataClient)(nil).OrderByReferenceID), varargs...)
}

// OrderVersionsByID mocks base method
func (m *MockTradingDataClient) OrderVersionsByID(arg0 context.Context, arg1 *api.OrderVersionsByIDRequest, arg2 ...grpc.CallOption) (*api.OrderVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderVersionsByID", varargs...)
	ret0, _ := ret[0].(*api.OrderVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderVersionsByID indicates an expected call of OrderVersionsByID
func (mr *MockTradingDataClientMockRecorder) OrderVersionsByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderVersionsByID", reflect.TypeOf((*MockTradingDataClient)(nil).OrderVersionsByID), varargs...)
}

// OrdersByMarket mocks base method
func (m *MockTradingDataClient) OrdersByMarket(arg0 context.Context, arg1 *api.OrdersByMarketRequest, arg2 ...grpc.CallOption) (*api.OrdersByMarketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersByMarket", varargs...)
	ret0, _ := ret[0].(*api.OrdersByMarketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByMarket indicates an expected call of OrdersByMarket
func (mr *MockTradingDataClientMockRecorder) OrdersByMarket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByMarket", reflect.TypeOf((*MockTradingDataClient)(nil).OrdersByMarket), varargs...)
}

// OrdersByParty mocks base method
func (m *MockTradingDataClient) OrdersByParty(arg0 context.Context, arg1 *api.OrdersByPartyRequest, arg2 ...grpc.CallOption) (*api.OrdersByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersByParty", varargs...)
	ret0, _ := ret[0].(*api.OrdersByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByParty indicates an expected call of OrdersByParty
func (mr *MockTradingDataClientMockRecorder) OrdersByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByParty", reflect.TypeOf((*MockTradingDataClient)(nil).OrdersByParty), varargs...)
}

// OrdersSubscribe mocks base method
func (m *MockTradingDataClient) OrdersSubscribe(arg0 context.Context, arg1 *api.OrdersSubscribeRequest, arg2 ...grpc.CallOption) (api.TradingData_OrdersSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersSubscribe", varargs...)
	ret0, _ := ret[0].(api.TradingData_OrdersSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersSubscribe indicates an expected call of OrdersSubscribe
func (mr *MockTradingDataClientMockRecorder) OrdersSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersSubscribe", reflect.TypeOf((*MockTradingDataClient)(nil).OrdersSubscribe), varargs...)
}

// Parties mocks base method
func (m *MockTradingDataClient) Parties(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*api.PartiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parties", varargs...)
	ret0, _ := ret[0].(*api.PartiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parties indicates an expected call of Parties
func (mr *MockTradingDataClientMockRecorder) Parties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parties", reflect.TypeOf((*MockTradingDataClient)(nil).Parties), varargs...)
}

// PartyAccounts mocks base method
func (m *MockTradingDataClient) PartyAccounts(arg0 context.Context, arg1 *api.PartyAccountsRequest, arg2 ...grpc.CallOption) (*api.PartyAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartyAccounts", varargs...)
	ret0, _ := ret[0].(*api.PartyAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyAccounts indicates an expected call of PartyAccounts
func (mr *MockTradingDataClientMockRecorder) PartyAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyAccounts", reflect.TypeOf((*MockTradingDataClient)(nil).PartyAccounts), varargs...)
}

// PartyByID mocks base method
func (m *MockTradingDataClient) PartyByID(arg0 context.Context, arg1 *api.PartyByIDRequest, arg2 ...grpc.CallOption) (*api.PartyByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartyByID", varargs...)
	ret0, _ := ret[0].(*api.PartyByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyByID indicates an expected call of PartyByID
func (mr *MockTradingDataClientMockRecorder) PartyByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyByID", reflect.TypeOf((*MockTradingDataClient)(nil).PartyByID), varargs...)
}

// PositionsByParty mocks base method
func (m *MockTradingDataClient) PositionsByParty(arg0 context.Context, arg1 *api.PositionsByPartyRequest, arg2 ...grpc.CallOption) (*api.PositionsByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PositionsByParty", varargs...)
	ret0, _ := ret[0].(*api.PositionsByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionsByParty indicates an expected call of PositionsByParty
func (mr *MockTradingDataClientMockRecorder) PositionsByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsByParty", reflect.TypeOf((*MockTradingDataClient)(nil).PositionsByParty), varargs...)
}

// PositionsSubscribe mocks base method
func (m *MockTradingDataClient) PositionsSubscribe(arg0 context.Context, arg1 *api.PositionsSubscribeRequest, arg2 ...grpc.CallOption) (api.TradingData_PositionsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PositionsSubscribe", varargs...)
	ret0, _ := ret[0].(api.TradingData_PositionsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionsSubscribe indicates an expected call of PositionsSubscribe
func (mr *MockTradingDataClientMockRecorder) PositionsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsSubscribe", reflect.TypeOf((*MockTradingDataClient)(nil).PositionsSubscribe), varargs...)
}

// Statistics mocks base method
func (m *MockTradingDataClient) Statistics(arg0 context.Context, arg1 *empty.Empty, arg2 ...grpc.CallOption) (*proto.Statistics, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Statistics", varargs...)
	ret0, _ := ret[0].(*proto.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics
func (mr *MockTradingDataClientMockRecorder) Statistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockTradingDataClient)(nil).Statistics), varargs...)
}

// TradesByMarket mocks base method
func (m *MockTradingDataClient) TradesByMarket(arg0 context.Context, arg1 *api.TradesByMarketRequest, arg2 ...grpc.CallOption) (*api.TradesByMarketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByMarket", varargs...)
	ret0, _ := ret[0].(*api.TradesByMarketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByMarket indicates an expected call of TradesByMarket
func (mr *MockTradingDataClientMockRecorder) TradesByMarket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByMarket", reflect.TypeOf((*MockTradingDataClient)(nil).TradesByMarket), varargs...)
}

// TradesByOrder mocks base method
func (m *MockTradingDataClient) TradesByOrder(arg0 context.Context, arg1 *api.TradesByOrderRequest, arg2 ...grpc.CallOption) (*api.TradesByOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByOrder", varargs...)
	ret0, _ := ret[0].(*api.TradesByOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByOrder indicates an expected call of TradesByOrder
func (mr *MockTradingDataClientMockRecorder) TradesByOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByOrder", reflect.TypeOf((*MockTradingDataClient)(nil).TradesByOrder), varargs...)
}

// TradesByParty mocks base method
func (m *MockTradingDataClient) TradesByParty(arg0 context.Context, arg1 *api.TradesByPartyRequest, arg2 ...grpc.CallOption) (*api.TradesByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByParty", varargs...)
	ret0, _ := ret[0].(*api.TradesByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByParty indicates an expected call of TradesByParty
func (mr *MockTradingDataClientMockRecorder) TradesByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByParty", reflect.TypeOf((*MockTradingDataClient)(nil).TradesByParty), varargs...)
}

// TradesSubscribe mocks base method
func (m *MockTradingDataClient) TradesSubscribe(arg0 context.Context, arg1 *api.TradesSubscribeRequest, arg2 ...grpc.CallOption) (api.TradingData_TradesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesSubscribe", varargs...)
	ret0, _ := ret[0].(api.TradingData_TradesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesSubscribe indicates an expected call of TradesSubscribe
func (mr *MockTradingDataClientMockRecorder) TradesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesSubscribe", reflect.TypeOf((*MockTradingDataClient)(nil).TradesSubscribe), varargs...)
}
