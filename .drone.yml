---

kind: pipeline
name: default
type: docker

platform:
  arch: amd64
  os: linux

steps:

  # https://docker-runner.docs.drone.io/configuration/cloning/
  - name: fetch
    image: alpine/git
    commands:
      - git fetch --tags  # necessary for generation of VERSION var

  - name: build
    image: registry.gitlab.com/vega-protocol/devops-infra/cipipeline:1.11.13
    pull: always
    volumes:
      - name: gopkg
        path: /go/pkg
    environment:
      CGO_ENABLED: "0"
      GO111MODULE: "on"
      GOARCH: amd64
      GOOS: linux
      GITLAB_DEPLOY_SSH_KNOWN_HOSTS:
        from_secret: GITLAB_DEPLOY_SSH_KNOWN_HOSTS
      GITLAB_DEPLOY_SSH_PRIVATE_KEY:
        from_secret: GITLAB_DEPLOY_SSH_PRIVATE_KEY
    commands:
      # The following git+ssh config enables accessing private Gitlab repos.
      - git config --global url."git@gitlab.com:".insteadOf "https://gitlab.com/"
      - eval "$(ssh-agent -s)" ; mkdir -p ~/.ssh ; chmod 0700 ~/.ssh
      - if ! echo "$${GITLAB_DEPLOY_SSH_PRIVATE_KEY}" | grep -q "BEGIN RSA PRIVATE KEY" ; then
          echo "Need env var GITLAB_DEPLOY_SSH_PRIVATE_KEY to have an RSA private key" ; exit 1 ; fi
      - if ! echo "$${GITLAB_DEPLOY_SSH_KNOWN_HOSTS}" | grep -q "^gitlab.com ssh-rsa" ; then
          echo "Need env var GITLAB_DEPLOY_SSH_KNOWN_HOSTS to have one or more host keys" ; exit 1 ; fi
      - echo "$${GITLAB_DEPLOY_SSH_PRIVATE_KEY}" >~/.ssh/id_rsa ; chmod 0600 ~/.ssh/id_rsa
      - echo "$${GITLAB_DEPLOY_SSH_KNOWN_HOSTS}" >~/.ssh/known_hosts ; chmod 0644 ~/.ssh/known_hosts
      - unset GITLAB_DEPLOY_SSH_KNOWN_HOSTS GITLAB_DEPLOY_SSH_PRIVATE_KEY
      - make deps
      - make build
      - make gqlgen_check  # This deletes then recreates files, so cannot be run in parallel.
    depends_on:
      - fetch

  - name: markdownspellcheck
    image: registry.gitlab.com/vega-protocol/devops-infra/markdownspellcheck:latest
    pull: always
    environment: {}
    commands:
      - find . -name '*.md' |sort
      # Make sure the mdspell command matches the one in Makefile.
      - mdspell --en-gb --ignore-acronyms --ignore-numbers --no-suggestions --report '*.md' 'design/**/*.md'
    depends_on:
      - fetch

  - name: docker
    image: docker:dind
    volumes:
      - name: dockersock
        path: /dockersock
      - name: dind
        path: /var/lib/docker
    privileged: true
    command: ['-H', 'unix:///dockersock/docker.sock', '-s', 'overlay2']
    depends_on: []
    detach: true
    when:
      ref:
        - refs/heads/master
        - refs/heads/develop
        - refs/tags/*

  # Tests to be run on *all* branches.
  - name: test
    image: registry.gitlab.com/vega-protocol/devops-infra/cipipeline:1.11.13
    volumes:
      - name: gopkg
        path: /go/pkg
    environment: {}
    commands:
      - make test
    depends_on:
      - build

  # Tests to be run on merge requests.
  - name: mergerequest
    image: registry.gitlab.com/vega-protocol/devops-infra/cipipeline:1.11.13
    volumes:
      - name: gopkg
        path: /go/pkg
    environment:
      COL_CYAN: '\033[36;1m'
      COL_GREEN: '\033[32;1m'
      COL_RESET: '\033[0m'
      GITLAB_API_TOKEN:
        from_secret: GITLAB_API_TOKEN
      SLACK_HOOK_URL:
        from_secret: SLACK_HOOK_URL
    commands:
      # More small checks. Run all, instead of exitng after first failure.
      - failed=""
      - for target in print_check proto_check rest_check vet ; do
          echo "$$COL_CYAN$$target$$COL_RESET" ; make "$$target" || failed="$$failed $$target" ; done
      - python3 script/diff_bot.py
          --token "$$GITLAB_API_TOKEN"
          --project1 5726034 --projectname1 trading-core --branch1 "$${DRONE_TARGET_BRANCH}" --file1 'gateway/graphql/schema.graphql'
          --project2 5726034 --projectname2 trading-core --branch2 "$${DRONE_SOURCE_BRANCH}" --file2 'gateway/graphql/schema.graphql'
          --slack-hookurl "$${SLACK_HOOK_URL}"
          --slack-recipient "#uidev"
          print_diff slack_notify || failed="$$failed diff_bot"
      - /usr/local/bin/multilint || failed="$$failed multilint"
      - make staticcheck || true  # Ignore failures until they're all fixed.
      - if test -n "$$failed" ; then echo "Failed checks:$$failed" ; exit 1 ; fi ; echo "$${COL_GREEN}OK$$COL_RESET"
    depends_on:
      - test
    when:
      event:
        - pull_request

  # Tests to be run only on *main* branches.
  - name: test_heavy
    image: registry.gitlab.com/vega-protocol/devops-infra/cipipeline:1.11.13
    volumes:
      - name: gopkg
        path: /go/pkg
    environment: {}
    commands:
      - make race
      - make msan
    depends_on:
      - test
    when:
      ref:
        - refs/heads/master
        - refs/heads/develop
        - refs/heads/release/*
        - refs/tags/*

  - name: push_to_devnet
    image: registry.gitlab.com/vega-protocol/devops-infra/cipipeline:1.11.13
    volumes:
      - name: gopkg
        path: /go/pkg
    environment:
      DEVNET_DEPLOY_SSH_PRIVATE_KEY:
        from_secret: DEVNET_DEPLOY_SSH_PRIVATE_KEY
      DEVNET_DEPLOY_HOSTS:
        from_secret: DEVNET_DEPLOY_HOSTS
      DEVNET_DEPLOY_SSH_KNOWN_HOSTS:
        from_secret: DEVNET_DEPLOY_SSH_KNOWN_HOSTS
      GITLAB_API_TOKEN:
        from_secret: GITLAB_API_TOKEN
      SLACK_HOOK_URL:
        from_secret: SLACK_HOOK_URL
      VEGANET_USERS:
        from_secret: VEGANET_USERS
    commands:
      - python3 script/diff_bot.py
          --token "$$GITLAB_API_TOKEN"
          --project1 5531219 --projectname1 client --branch1 develop --file1 'packages/vega-client/src/api/vega-graphql/vega-schema/schema.graphql'
          --project2 5726034 --projectname2 trading-core --branch2 develop --file2 'gateway/graphql/schema.graphql'
          create_mr
      # The deploy script requires SLACK_HOOK_URL and 3 DEVNET_* vars.
      - ./script/deploy.sh devnet vega "cmd/vega/vega:/home/vega/current/:0755"
      # Nasty auth hack. Single quotes to avoid yaml k:v pair.
      - 'for u in $$VEGANET_USERS ; do
          cmd/vegaccount/vegaccount -addr geo.d.vega.xyz:3002 -traderid "$$u" ;
          curl -s -XPOST -H "Content-type: application/json" -H "Authorization: Bearer $$VEGA_AUTH_MASTERTOKEN"
            -d "{\"id\": \"$$u\", \"password\": \"123\"}" https://auth.d.vega.xyz 1>/dev/null ;
          echo ;
        done'
    depends_on:
      - test
      - test_heavy
    when:
      branch:
        - develop
      event:
        - push

  - name: publish_docker
    image: registry.gitlab.com/vega-protocol/devops-infra/cipipeline-docker:stable
    volumes:
      - name: dockersock
        path: /dockersock
    environment:
      DOCKER_HOST: unix:///dockersock/docker.sock
      DOCKER_CONFIG_JSON:
        from_secret: docker_config_json
    commands:
      - apps="$$(find cmd -maxdepth 1 -and -not -name cmd | awk -F/ '{print $$2}')"
      - 'for app in $$apps ; do
          f="cmd/$$app/$$app" ;
          if ! test -f "$$f" ; then echo "Failed to find: $$f" ; exit 1 ; fi ;
          cp -a "$$f" . || exit 1 ;
        done'
      - imgtag="$${DRONE_BRANCH}"
      - if test -z "$$imgtag" ; then imgtag="$${DRONE_TAG}" ; fi
      - if test -z "$$imgtag" ; then exit 1 ; fi
      - while ! docker ps ; do sleep 1 ; done  # wait for dind
      - docker build -t "registry.gitlab.com/vega-protocol/trading-core:$$imgtag" -f Dockerfile.quick . || exit 0
      - mkdir -p "$$HOME/.docker" ; echo "$$DOCKER_CONFIG_JSON" >"$$HOME/.docker/config.json" ; unset DOCKER_CONFIG_JSON
      - docker push "registry.gitlab.com/vega-protocol/trading-core:$$imgtag" || exit 0
      - for app in $$apps ; do rm -f "./$app"; done
    depends_on:
      - test
      - test_heavy
    when:
      ref:
        - refs/heads/master
        - refs/heads/develop
        - refs/tags/*

volumes:
  - name: dind
    host:
      path: /var/lib/drone/volumes/trading-core/dind
  - name: dockersock
    host:
      path: /var/lib/drone/volumes/trading-core/dockersock
  - name: gopkg
    host:
      path: /var/lib/drone/volumes/trading-core/gopkg

image_pull_secrets:
  - dockerconfig
