// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vega.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A side relates to the direction of an order, to Buy, or Sell
type Side int32

const (
	// Default value, always invalid
	Side_SIDE_UNSPECIFIED Side = 0
	// Buy order
	Side_SIDE_BUY Side = 1
	// Sell order
	Side_SIDE_SELL Side = 2
)

var Side_name = map[int32]string{
	0: "SIDE_UNSPECIFIED",
	1: "SIDE_BUY",
	2: "SIDE_SELL",
}

var Side_value = map[string]int32{
	"SIDE_UNSPECIFIED": 0,
	"SIDE_BUY":         1,
	"SIDE_SELL":        2,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}

func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{0}
}

// Represents a set of time intervals that are used when querying for candle-stick data
type Interval int32

const (
	// Default value, always invalid
	Interval_INTERVAL_UNSPECIFIED Interval = 0
	// 1 minute.
	Interval_INTERVAL_I1M Interval = 60
	// 5 minutes.
	Interval_INTERVAL_I5M Interval = 300
	// 15 minutes.
	Interval_INTERVAL_I15M Interval = 900
	// 1 hour.
	Interval_INTERVAL_I1H Interval = 3600
	// 6 hours.
	Interval_INTERVAL_I6H Interval = 21600
	// 1 day.
	Interval_INTERVAL_I1D Interval = 86400
)

var Interval_name = map[int32]string{
	0:     "INTERVAL_UNSPECIFIED",
	60:    "INTERVAL_I1M",
	300:   "INTERVAL_I5M",
	900:   "INTERVAL_I15M",
	3600:  "INTERVAL_I1H",
	21600: "INTERVAL_I6H",
	86400: "INTERVAL_I1D",
}

var Interval_value = map[string]int32{
	"INTERVAL_UNSPECIFIED": 0,
	"INTERVAL_I1M":         60,
	"INTERVAL_I5M":         300,
	"INTERVAL_I15M":        900,
	"INTERVAL_I1H":         3600,
	"INTERVAL_I6H":         21600,
	"INTERVAL_I1D":         86400,
}

func (x Interval) String() string {
	return proto.EnumName(Interval_name, int32(x))
}

func (Interval) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{1}
}

// Auction triggers indicate what condition triggered an auction (if market is in auction mode)
type AuctionTrigger int32

const (
	// Default value for AuctionTrigger, no auction triggered
	AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED AuctionTrigger = 0
	// Batch auction
	AuctionTrigger_AUCTION_TRIGGER_BATCH AuctionTrigger = 1
	// Opening auction
	AuctionTrigger_AUCTION_TRIGGER_OPENING AuctionTrigger = 2
	// Price monitoring trigger
	AuctionTrigger_AUCTION_TRIGGER_PRICE AuctionTrigger = 3
	// Liquidity monitoring trigger
	AuctionTrigger_AUCTION_TRIGGER_LIQUIDITY AuctionTrigger = 4
)

var AuctionTrigger_name = map[int32]string{
	0: "AUCTION_TRIGGER_UNSPECIFIED",
	1: "AUCTION_TRIGGER_BATCH",
	2: "AUCTION_TRIGGER_OPENING",
	3: "AUCTION_TRIGGER_PRICE",
	4: "AUCTION_TRIGGER_LIQUIDITY",
}

var AuctionTrigger_value = map[string]int32{
	"AUCTION_TRIGGER_UNSPECIFIED": 0,
	"AUCTION_TRIGGER_BATCH":       1,
	"AUCTION_TRIGGER_OPENING":     2,
	"AUCTION_TRIGGER_PRICE":       3,
	"AUCTION_TRIGGER_LIQUIDITY":   4,
}

func (x AuctionTrigger) String() string {
	return proto.EnumName(AuctionTrigger_name, int32(x))
}

func (AuctionTrigger) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{2}
}

// A pegged reference defines which price point a pegged order is linked to - meaning
// the price for a pegged order is calculated from the value of the reference price point
type PeggedReference int32

const (
	// Default value for PeggedReference, no reference given
	PeggedReference_PEGGED_REFERENCE_UNSPECIFIED PeggedReference = 0
	// Mid price reference
	PeggedReference_PEGGED_REFERENCE_MID PeggedReference = 1
	// Best bid price reference
	PeggedReference_PEGGED_REFERENCE_BEST_BID PeggedReference = 2
	// Best ask price reference
	PeggedReference_PEGGED_REFERENCE_BEST_ASK PeggedReference = 3
)

var PeggedReference_name = map[int32]string{
	0: "PEGGED_REFERENCE_UNSPECIFIED",
	1: "PEGGED_REFERENCE_MID",
	2: "PEGGED_REFERENCE_BEST_BID",
	3: "PEGGED_REFERENCE_BEST_ASK",
}

var PeggedReference_value = map[string]int32{
	"PEGGED_REFERENCE_UNSPECIFIED": 0,
	"PEGGED_REFERENCE_MID":         1,
	"PEGGED_REFERENCE_BEST_BID":    2,
	"PEGGED_REFERENCE_BEST_ASK":    3,
}

func (x PeggedReference) String() string {
	return proto.EnumName(PeggedReference_name, int32(x))
}

func (PeggedReference) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{3}
}

// OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue
// with an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`
type OrderError int32

const (
	// Default value, no error reported
	OrderError_ORDER_ERROR_UNSPECIFIED OrderError = 0
	// Order was submitted for a market that does not exist
	OrderError_ORDER_ERROR_INVALID_MARKET_ID OrderError = 1
	// Order was submitted with an invalid identifier
	OrderError_ORDER_ERROR_INVALID_ORDER_ID OrderError = 2
	// Order was amended with a sequence number that was not previous version + 1
	OrderError_ORDER_ERROR_OUT_OF_SEQUENCE OrderError = 3
	// Order was amended with an invalid remaining size (e.g. remaining greater than total size)
	OrderError_ORDER_ERROR_INVALID_REMAINING_SIZE OrderError = 4
	// Node was unable to get Vega (blockchain) time
	OrderError_ORDER_ERROR_TIME_FAILURE OrderError = 5
	// Failed to remove an order from the book
	OrderError_ORDER_ERROR_REMOVAL_FAILURE OrderError = 6
	// An order with `TimeInForce.TIME_IN_FORCE_GTT` was submitted or amended
	// with an expiration that was badly formatted or otherwise invalid
	OrderError_ORDER_ERROR_INVALID_EXPIRATION_DATETIME OrderError = 7
	// Order was submitted or amended with an invalid reference field
	OrderError_ORDER_ERROR_INVALID_ORDER_REFERENCE OrderError = 8
	// Order amend was submitted for an order field that cannot not be amended (e.g. order identifier)
	OrderError_ORDER_ERROR_EDIT_NOT_ALLOWED OrderError = 9
	// Amend failure because amend details do not match original order
	OrderError_ORDER_ERROR_AMEND_FAILURE OrderError = 10
	// Order not found in an order book or store
	OrderError_ORDER_ERROR_NOT_FOUND OrderError = 11
	// Order was submitted with an invalid or missing party identifier
	OrderError_ORDER_ERROR_INVALID_PARTY_ID OrderError = 12
	// Order was submitted for a market that has closed
	OrderError_ORDER_ERROR_MARKET_CLOSED OrderError = 13
	// Order was submitted, but the party did not have enough collateral to cover the order
	OrderError_ORDER_ERROR_MARGIN_CHECK_FAILED OrderError = 14
	// Order was submitted, but the party did not have an account for this asset
	OrderError_ORDER_ERROR_MISSING_GENERAL_ACCOUNT OrderError = 15
	// Unspecified internal error
	OrderError_ORDER_ERROR_INTERNAL_ERROR OrderError = 16
	// Order was submitted with an invalid or missing size (e.g. 0)
	OrderError_ORDER_ERROR_INVALID_SIZE OrderError = 17
	// Order was submitted with an invalid persistence for its type
	OrderError_ORDER_ERROR_INVALID_PERSISTENCE OrderError = 18
	// Order was submitted with an invalid type field
	OrderError_ORDER_ERROR_INVALID_TYPE OrderError = 19
	// Order was stopped as it would have traded with another order submitted from the same party
	OrderError_ORDER_ERROR_SELF_TRADING OrderError = 20
	// Order was submitted, but the party did not have enough collateral to cover the fees for the order
	OrderError_ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES OrderError = 21
	// Order was submitted with an incorrect or invalid market type
	OrderError_ORDER_ERROR_INCORRECT_MARKET_TYPE OrderError = 22
	// Order was submitted with invalid time in force
	OrderError_ORDER_ERROR_INVALID_TIME_IN_FORCE OrderError = 23
	// A GFN order has got to the market when it is in auction mode
	OrderError_ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION OrderError = 24
	// A GFA order has got to the market when it is in continuous trading mode
	OrderError_ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING OrderError = 25
	// Attempt to amend order to GTT without ExpiryAt
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT OrderError = 26
	// Attempt to amend ExpiryAt to a value before CreatedAt
	OrderError_ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT OrderError = 27
	// Attempt to amend to GTC without an ExpiryAt value
	OrderError_ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT OrderError = 28
	// Amending to FOK or IOC is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC OrderError = 29
	// Amending to GFA or GFN is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN OrderError = 30
	// Amending from GFA or GFN is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN OrderError = 31
	// IOC orders are not allowed during auction
	OrderError_ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION OrderError = 32
	// FOK orders are not allowed during auction
	OrderError_ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION OrderError = 33
	// Pegged orders must be LIMIT orders
	OrderError_ORDER_ERROR_MUST_BE_LIMIT_ORDER OrderError = 34
	// Pegged orders can only have TIF GTC or GTT
	OrderError_ORDER_ERROR_MUST_BE_GTT_OR_GTC OrderError = 35
	// Pegged order must have a reference price
	OrderError_ORDER_ERROR_WITHOUT_REFERENCE_PRICE OrderError = 36
	// Buy pegged order cannot reference best ask price
	OrderError_ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE OrderError = 37
	// Pegged order offset must be <= 0
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO OrderError = 38
	// Pegged order offset must be < 0
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO OrderError = 39
	// Pegged order offset must be >= 0
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO OrderError = 40
	// Sell pegged order cannot reference best bid price
	OrderError_ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE OrderError = 41
	// Pegged order offset must be > zero
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO OrderError = 42
	// The party has an insufficient balance, or does not have
	// a general account to submit the order (no deposits made
	// for the required asset)
	OrderError_ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE OrderError = 43
	// Cannot amend a non pegged orders details
	OrderError_ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER OrderError = 44
	// We are unable to re-price a pegged order because a market price is unavailable
	OrderError_ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER OrderError = 45
	// It is not possible to amend the price of an existing pegged order
	OrderError_ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER OrderError = 46
	// An FOK, IOC, or GFN order was rejected because it resulted in trades outside the price bounds
	OrderError_ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS OrderError = 47
)

var OrderError_name = map[int32]string{
	0:  "ORDER_ERROR_UNSPECIFIED",
	1:  "ORDER_ERROR_INVALID_MARKET_ID",
	2:  "ORDER_ERROR_INVALID_ORDER_ID",
	3:  "ORDER_ERROR_OUT_OF_SEQUENCE",
	4:  "ORDER_ERROR_INVALID_REMAINING_SIZE",
	5:  "ORDER_ERROR_TIME_FAILURE",
	6:  "ORDER_ERROR_REMOVAL_FAILURE",
	7:  "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
	8:  "ORDER_ERROR_INVALID_ORDER_REFERENCE",
	9:  "ORDER_ERROR_EDIT_NOT_ALLOWED",
	10: "ORDER_ERROR_AMEND_FAILURE",
	11: "ORDER_ERROR_NOT_FOUND",
	12: "ORDER_ERROR_INVALID_PARTY_ID",
	13: "ORDER_ERROR_MARKET_CLOSED",
	14: "ORDER_ERROR_MARGIN_CHECK_FAILED",
	15: "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
	16: "ORDER_ERROR_INTERNAL_ERROR",
	17: "ORDER_ERROR_INVALID_SIZE",
	18: "ORDER_ERROR_INVALID_PERSISTENCE",
	19: "ORDER_ERROR_INVALID_TYPE",
	20: "ORDER_ERROR_SELF_TRADING",
	21: "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
	22: "ORDER_ERROR_INCORRECT_MARKET_TYPE",
	23: "ORDER_ERROR_INVALID_TIME_IN_FORCE",
	24: "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
	25: "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
	26: "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
	27: "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
	28: "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
	29: "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
	30: "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
	31: "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
	32: "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
	33: "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
	34: "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
	35: "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
	36: "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
	37: "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
	38: "ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO",
	39: "ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO",
	40: "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
	41: "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
	42: "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
	43: "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
	44: "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
	45: "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
	46: "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
	47: "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS",
}

var OrderError_value = map[string]int32{
	"ORDER_ERROR_UNSPECIFIED":                                           0,
	"ORDER_ERROR_INVALID_MARKET_ID":                                     1,
	"ORDER_ERROR_INVALID_ORDER_ID":                                      2,
	"ORDER_ERROR_OUT_OF_SEQUENCE":                                       3,
	"ORDER_ERROR_INVALID_REMAINING_SIZE":                                4,
	"ORDER_ERROR_TIME_FAILURE":                                          5,
	"ORDER_ERROR_REMOVAL_FAILURE":                                       6,
	"ORDER_ERROR_INVALID_EXPIRATION_DATETIME":                           7,
	"ORDER_ERROR_INVALID_ORDER_REFERENCE":                               8,
	"ORDER_ERROR_EDIT_NOT_ALLOWED":                                      9,
	"ORDER_ERROR_AMEND_FAILURE":                                         10,
	"ORDER_ERROR_NOT_FOUND":                                             11,
	"ORDER_ERROR_INVALID_PARTY_ID":                                      12,
	"ORDER_ERROR_MARKET_CLOSED":                                         13,
	"ORDER_ERROR_MARGIN_CHECK_FAILED":                                   14,
	"ORDER_ERROR_MISSING_GENERAL_ACCOUNT":                               15,
	"ORDER_ERROR_INTERNAL_ERROR":                                        16,
	"ORDER_ERROR_INVALID_SIZE":                                          17,
	"ORDER_ERROR_INVALID_PERSISTENCE":                                   18,
	"ORDER_ERROR_INVALID_TYPE":                                          19,
	"ORDER_ERROR_SELF_TRADING":                                          20,
	"ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES":                        21,
	"ORDER_ERROR_INCORRECT_MARKET_TYPE":                                 22,
	"ORDER_ERROR_INVALID_TIME_IN_FORCE":                                 23,
	"ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION":                           24,
	"ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING":                   25,
	"ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT":                  26,
	"ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT":                             27,
	"ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT":                          28,
	"ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC":                            29,
	"ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN":                            30,
	"ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN":                          31,
	"ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION":                  32,
	"ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION":                  33,
	"ORDER_ERROR_MUST_BE_LIMIT_ORDER":                                   34,
	"ORDER_ERROR_MUST_BE_GTT_OR_GTC":                                    35,
	"ORDER_ERROR_WITHOUT_REFERENCE_PRICE":                               36,
	"ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE":                   37,
	"ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO":                  38,
	"ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO":                         39,
	"ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO":               40,
	"ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE":                  41,
	"ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO":                      42,
	"ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE":                            43,
	"ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER": 44,
	"ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER":                        45,
	"ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER":                 46,
	"ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS":              47,
}

func (x OrderError) String() string {
	return proto.EnumName(OrderError_name, int32(x))
}

func (OrderError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{4}
}

// The Vega blockchain status as reported by the node the caller is connected to
type ChainStatus int32

const (
	// Default value, always invalid
	ChainStatus_CHAIN_STATUS_UNSPECIFIED ChainStatus = 0
	// Blockchain is disconnected
	ChainStatus_CHAIN_STATUS_DISCONNECTED ChainStatus = 1
	// Blockchain is replaying historic transactions
	ChainStatus_CHAIN_STATUS_REPLAYING ChainStatus = 2
	// Blockchain is connected and receiving transactions
	ChainStatus_CHAIN_STATUS_CONNECTED ChainStatus = 3
)

var ChainStatus_name = map[int32]string{
	0: "CHAIN_STATUS_UNSPECIFIED",
	1: "CHAIN_STATUS_DISCONNECTED",
	2: "CHAIN_STATUS_REPLAYING",
	3: "CHAIN_STATUS_CONNECTED",
}

var ChainStatus_value = map[string]int32{
	"CHAIN_STATUS_UNSPECIFIED":  0,
	"CHAIN_STATUS_DISCONNECTED": 1,
	"CHAIN_STATUS_REPLAYING":    2,
	"CHAIN_STATUS_CONNECTED":    3,
}

func (x ChainStatus) String() string {
	return proto.EnumName(ChainStatus_name, int32(x))
}

func (ChainStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{5}
}

// Various collateral/account types as used by Vega
type AccountType int32

const (
	// Default value
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0
	// Insurance pool accounts contain insurance pool funds for a market
	AccountType_ACCOUNT_TYPE_INSURANCE AccountType = 1
	// Settlement accounts exist only during settlement or mark-to-market
	AccountType_ACCOUNT_TYPE_SETTLEMENT AccountType = 2
	// Margin accounts contain margin funds for a party and each party will
	// have multiple margin accounts, one for each market they have traded in
	//
	// Margin account funds will alter as margin requirements on positions change
	AccountType_ACCOUNT_TYPE_MARGIN AccountType = 3
	// General accounts contains general funds for a party. A party will
	// have multiple general accounts, one for each asset they want
	// to trade with
	//
	// General accounts are where funds are initially deposited or withdrawn from,
	// it is also the account where funds are taken to fulfil fees and initial margin requirements
	AccountType_ACCOUNT_TYPE_GENERAL AccountType = 4
	// Infrastructure accounts contain fees earned by providing infrastructure on Vega
	AccountType_ACCOUNT_TYPE_FEES_INFRASTRUCTURE AccountType = 5
	// Liquidity accounts contain fees earned by providing liquidity on Vega markets
	AccountType_ACCOUNT_TYPE_FEES_LIQUIDITY AccountType = 6
	// This account is created to hold fees earned by placing orders that sit on the book
	// and are then matched with an incoming order to create a trade - These fees reward parties
	// who provide the best priced liquidity that actually allows trading to take place
	AccountType_ACCOUNT_TYPE_FEES_MAKER AccountType = 7
	// This account is created to lock funds to be withdrawn by parties
	AccountType_ACCOUNT_TYPE_LOCK_WITHDRAW AccountType = 8
	// This account is created to maintain liquidity providers funds commitments
	AccountType_ACCOUNT_TYPE_BOND AccountType = 9
	// External account represents an external source (deposit/withdrawal)
	AccountType_ACCOUNT_TYPE_EXTERNAL AccountType = 10
	// Global insurance account for the asset
	AccountType_ACCOUNT_TYPE_GLOBAL_INSURANCE AccountType = 11
)

var AccountType_name = map[int32]string{
	0:  "ACCOUNT_TYPE_UNSPECIFIED",
	1:  "ACCOUNT_TYPE_INSURANCE",
	2:  "ACCOUNT_TYPE_SETTLEMENT",
	3:  "ACCOUNT_TYPE_MARGIN",
	4:  "ACCOUNT_TYPE_GENERAL",
	5:  "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
	6:  "ACCOUNT_TYPE_FEES_LIQUIDITY",
	7:  "ACCOUNT_TYPE_FEES_MAKER",
	8:  "ACCOUNT_TYPE_LOCK_WITHDRAW",
	9:  "ACCOUNT_TYPE_BOND",
	10: "ACCOUNT_TYPE_EXTERNAL",
	11: "ACCOUNT_TYPE_GLOBAL_INSURANCE",
}

var AccountType_value = map[string]int32{
	"ACCOUNT_TYPE_UNSPECIFIED":         0,
	"ACCOUNT_TYPE_INSURANCE":           1,
	"ACCOUNT_TYPE_SETTLEMENT":          2,
	"ACCOUNT_TYPE_MARGIN":              3,
	"ACCOUNT_TYPE_GENERAL":             4,
	"ACCOUNT_TYPE_FEES_INFRASTRUCTURE": 5,
	"ACCOUNT_TYPE_FEES_LIQUIDITY":      6,
	"ACCOUNT_TYPE_FEES_MAKER":          7,
	"ACCOUNT_TYPE_LOCK_WITHDRAW":       8,
	"ACCOUNT_TYPE_BOND":                9,
	"ACCOUNT_TYPE_EXTERNAL":            10,
	"ACCOUNT_TYPE_GLOBAL_INSURANCE":    11,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{6}
}

// Transfers can occur between parties on Vega, these are the types that indicate why a transfer took place
type TransferType int32

const (
	// Default value, always invalid
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	// Loss
	TransferType_TRANSFER_TYPE_LOSS TransferType = 1
	// Win
	TransferType_TRANSFER_TYPE_WIN TransferType = 2
	// Close
	TransferType_TRANSFER_TYPE_CLOSE TransferType = 3
	// Mark to market loss
	TransferType_TRANSFER_TYPE_MTM_LOSS TransferType = 4
	// Mark to market win
	TransferType_TRANSFER_TYPE_MTM_WIN TransferType = 5
	// Margin too low
	TransferType_TRANSFER_TYPE_MARGIN_LOW TransferType = 6
	// Margin too high
	TransferType_TRANSFER_TYPE_MARGIN_HIGH TransferType = 7
	// Margin was confiscated
	TransferType_TRANSFER_TYPE_MARGIN_CONFISCATED TransferType = 8
	// Pay maker fee
	TransferType_TRANSFER_TYPE_MAKER_FEE_PAY TransferType = 9
	// Receive maker fee
	TransferType_TRANSFER_TYPE_MAKER_FEE_RECEIVE TransferType = 10
	// Pay infrastructure fee
	TransferType_TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY TransferType = 11
	// Receive infrastructure fee
	TransferType_TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE TransferType = 12
	// Pay liquidity fee
	TransferType_TRANSFER_TYPE_LIQUIDITY_FEE_PAY TransferType = 13
	// Receive liquidity fee
	TransferType_TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE TransferType = 14
	// Bond too low
	TransferType_TRANSFER_TYPE_BOND_LOW TransferType = 15
	// Bond too high
	TransferType_TRANSFER_TYPE_BOND_HIGH TransferType = 16
	// Lock amount for withdraw
	TransferType_TRANSFER_TYPE_WITHDRAW_LOCK TransferType = 17
	// Actual withdraw from system
	TransferType_TRANSFER_TYPE_WITHDRAW TransferType = 18
	// Deposit funds
	TransferType_TRANSFER_TYPE_DEPOSIT TransferType = 19
	// Bond slashing
	TransferType_TRANSFER_TYPE_BOND_SLASHING TransferType = 20
)

var TransferType_name = map[int32]string{
	0:  "TRANSFER_TYPE_UNSPECIFIED",
	1:  "TRANSFER_TYPE_LOSS",
	2:  "TRANSFER_TYPE_WIN",
	3:  "TRANSFER_TYPE_CLOSE",
	4:  "TRANSFER_TYPE_MTM_LOSS",
	5:  "TRANSFER_TYPE_MTM_WIN",
	6:  "TRANSFER_TYPE_MARGIN_LOW",
	7:  "TRANSFER_TYPE_MARGIN_HIGH",
	8:  "TRANSFER_TYPE_MARGIN_CONFISCATED",
	9:  "TRANSFER_TYPE_MAKER_FEE_PAY",
	10: "TRANSFER_TYPE_MAKER_FEE_RECEIVE",
	11: "TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY",
	12: "TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE",
	13: "TRANSFER_TYPE_LIQUIDITY_FEE_PAY",
	14: "TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE",
	15: "TRANSFER_TYPE_BOND_LOW",
	16: "TRANSFER_TYPE_BOND_HIGH",
	17: "TRANSFER_TYPE_WITHDRAW_LOCK",
	18: "TRANSFER_TYPE_WITHDRAW",
	19: "TRANSFER_TYPE_DEPOSIT",
	20: "TRANSFER_TYPE_BOND_SLASHING",
}

var TransferType_value = map[string]int32{
	"TRANSFER_TYPE_UNSPECIFIED":                   0,
	"TRANSFER_TYPE_LOSS":                          1,
	"TRANSFER_TYPE_WIN":                           2,
	"TRANSFER_TYPE_CLOSE":                         3,
	"TRANSFER_TYPE_MTM_LOSS":                      4,
	"TRANSFER_TYPE_MTM_WIN":                       5,
	"TRANSFER_TYPE_MARGIN_LOW":                    6,
	"TRANSFER_TYPE_MARGIN_HIGH":                   7,
	"TRANSFER_TYPE_MARGIN_CONFISCATED":            8,
	"TRANSFER_TYPE_MAKER_FEE_PAY":                 9,
	"TRANSFER_TYPE_MAKER_FEE_RECEIVE":             10,
	"TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY":        11,
	"TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE": 12,
	"TRANSFER_TYPE_LIQUIDITY_FEE_PAY":             13,
	"TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE":      14,
	"TRANSFER_TYPE_BOND_LOW":                      15,
	"TRANSFER_TYPE_BOND_HIGH":                     16,
	"TRANSFER_TYPE_WITHDRAW_LOCK":                 17,
	"TRANSFER_TYPE_WITHDRAW":                      18,
	"TRANSFER_TYPE_DEPOSIT":                       19,
	"TRANSFER_TYPE_BOND_SLASHING":                 20,
}

func (x TransferType) String() string {
	return proto.EnumName(TransferType_name, int32(x))
}

func (TransferType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{7}
}

// Time In Force for an order
// See [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail
type Order_TimeInForce int32

const (
	// Default value for TimeInForce, can be valid for an amend
	Order_TIME_IN_FORCE_UNSPECIFIED Order_TimeInForce = 0
	// Good until cancelled
	Order_TIME_IN_FORCE_GTC Order_TimeInForce = 1
	// Good until specified time
	Order_TIME_IN_FORCE_GTT Order_TimeInForce = 2
	// Immediate or cancel
	Order_TIME_IN_FORCE_IOC Order_TimeInForce = 3
	// Fill or kill
	Order_TIME_IN_FORCE_FOK Order_TimeInForce = 4
	// Good for auction
	Order_TIME_IN_FORCE_GFA Order_TimeInForce = 5
	// Good for normal
	Order_TIME_IN_FORCE_GFN Order_TimeInForce = 6
)

var Order_TimeInForce_name = map[int32]string{
	0: "TIME_IN_FORCE_UNSPECIFIED",
	1: "TIME_IN_FORCE_GTC",
	2: "TIME_IN_FORCE_GTT",
	3: "TIME_IN_FORCE_IOC",
	4: "TIME_IN_FORCE_FOK",
	5: "TIME_IN_FORCE_GFA",
	6: "TIME_IN_FORCE_GFN",
}

var Order_TimeInForce_value = map[string]int32{
	"TIME_IN_FORCE_UNSPECIFIED": 0,
	"TIME_IN_FORCE_GTC":         1,
	"TIME_IN_FORCE_GTT":         2,
	"TIME_IN_FORCE_IOC":         3,
	"TIME_IN_FORCE_FOK":         4,
	"TIME_IN_FORCE_GFA":         5,
	"TIME_IN_FORCE_GFN":         6,
}

func (x Order_TimeInForce) String() string {
	return proto.EnumName(Order_TimeInForce_name, int32(x))
}

func (Order_TimeInForce) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{6, 0}
}

// Type values for an order
type Order_Type int32

const (
	// Default value, always invalid
	Order_TYPE_UNSPECIFIED Order_Type = 0
	// Used for Limit orders
	Order_TYPE_LIMIT Order_Type = 1
	// Used for Market orders
	Order_TYPE_MARKET Order_Type = 2
	// Used for orders where the initiating party is the network (with distressed parties)
	Order_TYPE_NETWORK Order_Type = 3
)

var Order_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_LIMIT",
	2: "TYPE_MARKET",
	3: "TYPE_NETWORK",
}

var Order_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_LIMIT":       1,
	"TYPE_MARKET":      2,
	"TYPE_NETWORK":     3,
}

func (x Order_Type) String() string {
	return proto.EnumName(Order_Type_name, int32(x))
}

func (Order_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{6, 1}
}

// Status values for an order
// See resulting status in [What order types are available to trade on Vega?](https://docs.testnet.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.
type Order_Status int32

const (
	// Default value, always invalid
	Order_STATUS_UNSPECIFIED Order_Status = 0
	// Used for active unfilled or partially filled orders
	Order_STATUS_ACTIVE Order_Status = 1
	// Used for expired GTT orders
	Order_STATUS_EXPIRED Order_Status = 2
	// Used for orders cancelled by the party that created the order
	Order_STATUS_CANCELLED Order_Status = 3
	// Used for unfilled FOK or IOC orders, and for orders that were stopped by the network
	Order_STATUS_STOPPED Order_Status = 4
	// Used for closed fully filled orders
	Order_STATUS_FILLED Order_Status = 5
	// Used for orders when not enough collateral was available to fill the margin requirements
	Order_STATUS_REJECTED Order_Status = 6
	// Used for closed partially filled IOC orders
	Order_STATUS_PARTIALLY_FILLED Order_Status = 7
	// Order has been removed from the order book and has been parked, this applies to pegged orders only
	Order_STATUS_PARKED Order_Status = 8
)

var Order_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_ACTIVE",
	2: "STATUS_EXPIRED",
	3: "STATUS_CANCELLED",
	4: "STATUS_STOPPED",
	5: "STATUS_FILLED",
	6: "STATUS_REJECTED",
	7: "STATUS_PARTIALLY_FILLED",
	8: "STATUS_PARKED",
}

var Order_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED":      0,
	"STATUS_ACTIVE":           1,
	"STATUS_EXPIRED":          2,
	"STATUS_CANCELLED":        3,
	"STATUS_STOPPED":          4,
	"STATUS_FILLED":           5,
	"STATUS_REJECTED":         6,
	"STATUS_PARTIALLY_FILLED": 7,
	"STATUS_PARKED":           8,
}

func (x Order_Status) String() string {
	return proto.EnumName(Order_Status_name, int32(x))
}

func (Order_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{6, 2}
}

// Type values for a trade
type Trade_Type int32

const (
	// Default value, always invalid
	Trade_TYPE_UNSPECIFIED Trade_Type = 0
	// Normal trading between two parties
	Trade_TYPE_DEFAULT Trade_Type = 1
	// Trading initiated by the network with another party on the book,
	// which helps to zero-out the positions of one or more distressed parties
	Trade_TYPE_NETWORK_CLOSE_OUT_GOOD Trade_Type = 2
	// Trading initiated by the network with another party off the book,
	// with a distressed party in order to zero-out the position of the party
	Trade_TYPE_NETWORK_CLOSE_OUT_BAD Trade_Type = 3
)

var Trade_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_DEFAULT",
	2: "TYPE_NETWORK_CLOSE_OUT_GOOD",
	3: "TYPE_NETWORK_CLOSE_OUT_BAD",
}

var Trade_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":            0,
	"TYPE_DEFAULT":                1,
	"TYPE_NETWORK_CLOSE_OUT_GOOD": 2,
	"TYPE_NETWORK_CLOSE_OUT_BAD":  3,
}

func (x Trade_Type) String() string {
	return proto.EnumName(Trade_Type_name, int32(x))
}

func (Trade_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{10, 0}
}

// The status of the deposit
type Deposit_Status int32

const (
	// Default value, always invalid
	Deposit_STATUS_UNSPECIFIED Deposit_Status = 0
	// The deposit is being processed by the network
	Deposit_STATUS_OPEN Deposit_Status = 1
	// The deposit has been cancelled by the network
	Deposit_STATUS_CANCELLED Deposit_Status = 2
	// The deposit has been finalised and accounts have been updated
	Deposit_STATUS_FINALIZED Deposit_Status = 3
)

var Deposit_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_OPEN",
	2: "STATUS_CANCELLED",
	3: "STATUS_FINALIZED",
}

var Deposit_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_OPEN":        1,
	"STATUS_CANCELLED":   2,
	"STATUS_FINALIZED":   3,
}

func (x Deposit_Status) String() string {
	return proto.EnumName(Deposit_Status_name, int32(x))
}

func (Deposit_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{20, 0}
}

// The status of the withdrawal
type Withdrawal_Status int32

const (
	// Default value, always invalid
	Withdrawal_STATUS_UNSPECIFIED Withdrawal_Status = 0
	// The withdrawal is open and being processed by the network
	Withdrawal_STATUS_OPEN Withdrawal_Status = 1
	// The withdrawal have been cancelled
	Withdrawal_STATUS_CANCELLED Withdrawal_Status = 2
	// The withdrawal went through and is fully finalised, the funds are removed from the
	// Vega network and are unlocked on the foreign chain bridge, for example, on the Ethereum network
	Withdrawal_STATUS_FINALIZED Withdrawal_Status = 3
)

var Withdrawal_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_OPEN",
	2: "STATUS_CANCELLED",
	3: "STATUS_FINALIZED",
}

var Withdrawal_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_OPEN":        1,
	"STATUS_CANCELLED":   2,
	"STATUS_FINALIZED":   3,
}

func (x Withdrawal_Status) String() string {
	return proto.EnumName(Withdrawal_Status_name, int32(x))
}

func (Withdrawal_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{21, 0}
}

// Status of a liquidity provision order
type LiquidityProvision_Status int32

const (
	// The default value
	LiquidityProvision_STATUS_UNSPECIFIED LiquidityProvision_Status = 0
	// The liquidity provision is active
	LiquidityProvision_STATUS_ACTIVE LiquidityProvision_Status = 1
	// The liquidity provision was stopped by the network
	LiquidityProvision_STATUS_STOPPED LiquidityProvision_Status = 2
	// The liquidity provision was cancelled by the liquidity provider
	LiquidityProvision_STATUS_CANCELLED LiquidityProvision_Status = 3
	// The liquidity provision was invalid and got rejected
	LiquidityProvision_STATUS_REJECTED LiquidityProvision_Status = 4
	// The liquidity provision is valid and accepted by network, but orders aren't deployed
	LiquidityProvision_STATUS_UNDEPLOYED LiquidityProvision_Status = 5
	// The liquidity provision is valid and accepted by network
	// but have never been deployed. I when it's possible to deploy them for the first time
	// margin check fails, then they will be cancelled without any penalties.
	LiquidityProvision_STATUS_PENDING LiquidityProvision_Status = 6
)

var LiquidityProvision_Status_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "STATUS_ACTIVE",
	2: "STATUS_STOPPED",
	3: "STATUS_CANCELLED",
	4: "STATUS_REJECTED",
	5: "STATUS_UNDEPLOYED",
	6: "STATUS_PENDING",
}

var LiquidityProvision_Status_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"STATUS_ACTIVE":      1,
	"STATUS_STOPPED":     2,
	"STATUS_CANCELLED":   3,
	"STATUS_REJECTED":    4,
	"STATUS_UNDEPLOYED":  5,
	"STATUS_PENDING":     6,
}

func (x LiquidityProvision_Status) String() string {
	return proto.EnumName(LiquidityProvision_Status_name, int32(x))
}

func (LiquidityProvision_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{42, 0}
}

type Price struct {
	// Price value, given as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Value                uint64   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{0}
}

func (m *Price) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Price.Unmarshal(m, b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Price.Marshal(b, m, deterministic)
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return xxx_messageInfo_Price.Size(m)
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// A timestamp in nanoseconds since epoch
// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
type Timestamp struct {
	// Timestamp value
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{1}
}

func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timestamp.Unmarshal(m, b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return xxx_messageInfo_Timestamp.Size(m)
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// A party represents an entity who wishes to trade on or query a Vega network
type Party struct {
	// A unique identifier for the party, typically represented by a public key
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Party) Reset()         { *m = Party{} }
func (m *Party) String() string { return proto.CompactTextString(m) }
func (*Party) ProtoMessage()    {}
func (*Party) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{2}
}

func (m *Party) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Party.Unmarshal(m, b)
}
func (m *Party) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Party.Marshal(b, m, deterministic)
}
func (m *Party) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Party.Merge(m, src)
}
func (m *Party) XXX_Size() int {
	return xxx_messageInfo_Party.Size(m)
}
func (m *Party) XXX_DiscardUnknown() {
	xxx_messageInfo_Party.DiscardUnknown(m)
}

var xxx_messageInfo_Party proto.InternalMessageInfo

func (m *Party) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Risk factors are used to calculate the current risk associated with orders trading on a given market
type RiskFactor struct {
	// Market ID that relates to this risk factor
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Short Risk factor value
	Short float64 `protobuf:"fixed64,2,opt,name=short,proto3" json:"short,omitempty"`
	// Long Risk factor value
	Long                 float64  `protobuf:"fixed64,3,opt,name=long,proto3" json:"long,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RiskFactor) Reset()         { *m = RiskFactor{} }
func (m *RiskFactor) String() string { return proto.CompactTextString(m) }
func (*RiskFactor) ProtoMessage()    {}
func (*RiskFactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{3}
}

func (m *RiskFactor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RiskFactor.Unmarshal(m, b)
}
func (m *RiskFactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RiskFactor.Marshal(b, m, deterministic)
}
func (m *RiskFactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiskFactor.Merge(m, src)
}
func (m *RiskFactor) XXX_Size() int {
	return xxx_messageInfo_RiskFactor.Size(m)
}
func (m *RiskFactor) XXX_DiscardUnknown() {
	xxx_messageInfo_RiskFactor.DiscardUnknown(m)
}

var xxx_messageInfo_RiskFactor proto.InternalMessageInfo

func (m *RiskFactor) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *RiskFactor) GetShort() float64 {
	if m != nil {
		return m.Short
	}
	return 0
}

func (m *RiskFactor) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

// Risk results are calculated internally by Vega to attempt to maintain safe trading
type RiskResult struct {
	// Timestamp for when risk factors were generated
	UpdatedTimestamp int64 `protobuf:"varint,1,opt,name=updated_timestamp,json=updatedTimestamp,proto3" json:"updated_timestamp,omitempty"`
	// Risk factors (long and short) for each margin-able asset/currency (usually == settlement assets) in the market
	RiskFactors map[string]*RiskFactor `protobuf:"bytes,2,rep,name=risk_factors,json=riskFactors,proto3" json:"risk_factors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timestamp for when risk factors are expected to change (or empty if risk factors are continually updated)
	NextUpdateTimestamp int64 `protobuf:"varint,3,opt,name=next_update_timestamp,json=nextUpdateTimestamp,proto3" json:"next_update_timestamp,omitempty"`
	// Predicted risk factors at next change (what they would be if the change occurred now)
	PredictedNextRiskFactors map[string]*RiskFactor `protobuf:"bytes,4,rep,name=predicted_next_risk_factors,json=predictedNextRiskFactors,proto3" json:"predicted_next_risk_factors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral     struct{}               `json:"-"`
	XXX_unrecognized         []byte                 `json:"-"`
	XXX_sizecache            int32                  `json:"-"`
}

func (m *RiskResult) Reset()         { *m = RiskResult{} }
func (m *RiskResult) String() string { return proto.CompactTextString(m) }
func (*RiskResult) ProtoMessage()    {}
func (*RiskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{4}
}

func (m *RiskResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RiskResult.Unmarshal(m, b)
}
func (m *RiskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RiskResult.Marshal(b, m, deterministic)
}
func (m *RiskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiskResult.Merge(m, src)
}
func (m *RiskResult) XXX_Size() int {
	return xxx_messageInfo_RiskResult.Size(m)
}
func (m *RiskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RiskResult.DiscardUnknown(m)
}

var xxx_messageInfo_RiskResult proto.InternalMessageInfo

func (m *RiskResult) GetUpdatedTimestamp() int64 {
	if m != nil {
		return m.UpdatedTimestamp
	}
	return 0
}

func (m *RiskResult) GetRiskFactors() map[string]*RiskFactor {
	if m != nil {
		return m.RiskFactors
	}
	return nil
}

func (m *RiskResult) GetNextUpdateTimestamp() int64 {
	if m != nil {
		return m.NextUpdateTimestamp
	}
	return 0
}

func (m *RiskResult) GetPredictedNextRiskFactors() map[string]*RiskFactor {
	if m != nil {
		return m.PredictedNextRiskFactors
	}
	return nil
}

// Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET
// They can be used for any limit order that is valid during continuous trading
type PeggedOrder struct {
	// Which price point are we linked to
	Reference PeggedReference `protobuf:"varint,1,opt,name=reference,proto3,enum=vega.PeggedReference" json:"reference,omitempty"`
	// Offset from the price reference
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeggedOrder) Reset()         { *m = PeggedOrder{} }
func (m *PeggedOrder) String() string { return proto.CompactTextString(m) }
func (*PeggedOrder) ProtoMessage()    {}
func (*PeggedOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{5}
}

func (m *PeggedOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeggedOrder.Unmarshal(m, b)
}
func (m *PeggedOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeggedOrder.Marshal(b, m, deterministic)
}
func (m *PeggedOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeggedOrder.Merge(m, src)
}
func (m *PeggedOrder) XXX_Size() int {
	return xxx_messageInfo_PeggedOrder.Size(m)
}
func (m *PeggedOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PeggedOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PeggedOrder proto.InternalMessageInfo

func (m *PeggedOrder) GetReference() PeggedReference {
	if m != nil {
		return m.Reference
	}
	return PeggedReference_PEGGED_REFERENCE_UNSPECIFIED
}

func (m *PeggedOrder) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties
type Order struct {
	// Unique identifier for the order (set by the system after consensus)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier for the order
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier for the order
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Side for the order, e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)
	Side Side `protobuf:"varint,4,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of contracts
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED
	Remaining uint64 `protobuf:"varint,7,opt,name=remaining,proto3" json:"remaining,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires.
	// - See [`Order.TimeInForce`](#vega.Order.TimeInForce)
	TimeInForce Order_TimeInForce `protobuf:"varint,8,opt,name=time_in_force,json=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"time_in_force,omitempty"`
	// Type for the order - See [`Order.Type`](#vega.Order.Type)
	Type Order_Type `protobuf:"varint,9,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Timestamp for when the order was created at, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	CreatedAt int64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The current status for the order. See [`Order.Status`](#vega.Order.Status)
	// - For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field
	Status Order_Status `protobuf:"varint,11,opt,name=status,proto3,enum=vega.Order_Status" json:"status,omitempty"`
	// Timestamp for when the order will expire, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`, valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIME_IN_FORCE_GTT`
	ExpiresAt int64 `protobuf:"varint,12,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Reference given for the order, this is typically used to retrieve an order submitted through consensus
	// - Currently set internally by the node to return a unique reference identifier for the order submission
	Reference string `protobuf:"bytes,13,opt,name=reference,proto3" json:"reference,omitempty"`
	// If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified
	// - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors
	Reason OrderError `protobuf:"varint,14,opt,name=reason,proto3,enum=vega.OrderError" json:"reason,omitempty"`
	// Timestamp for when the Order was last updated, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	UpdatedAt int64 `protobuf:"varint,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The version for the order, initial value is version 1 and is incremented after each successful amend
	Version uint64 `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
	// Batch identifier for the order, used internally for orders submitted during auctions
	// to keep track of the auction batch this order falls under (required for fees calculation)
	BatchId uint64 `protobuf:"varint,17,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Pegged order details, used only if the order represents a pegged order.
	PeggedOrder *PeggedOrder `protobuf:"bytes,18,opt,name=pegged_order,json=peggedOrder,proto3" json:"pegged_order,omitempty"`
	// Is this order created as part of a liquidity provision, will be empty if not.
	LiquidityProvisionId string   `protobuf:"bytes,19,opt,name=liquidity_provision_id,json=liquidityProvisionId,proto3" json:"liquidity_provision_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{6}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *Order) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *Order) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (m *Order) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Order) GetRemaining() uint64 {
	if m != nil {
		return m.Remaining
	}
	return 0
}

func (m *Order) GetTimeInForce() Order_TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return Order_TIME_IN_FORCE_UNSPECIFIED
}

func (m *Order) GetType() Order_Type {
	if m != nil {
		return m.Type
	}
	return Order_TYPE_UNSPECIFIED
}

func (m *Order) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Order) GetStatus() Order_Status {
	if m != nil {
		return m.Status
	}
	return Order_STATUS_UNSPECIFIED
}

func (m *Order) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *Order) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *Order) GetReason() OrderError {
	if m != nil {
		return m.Reason
	}
	return OrderError_ORDER_ERROR_UNSPECIFIED
}

func (m *Order) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Order) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Order) GetBatchId() uint64 {
	if m != nil {
		return m.BatchId
	}
	return 0
}

func (m *Order) GetPeggedOrder() *PeggedOrder {
	if m != nil {
		return m.PeggedOrder
	}
	return nil
}

func (m *Order) GetLiquidityProvisionId() string {
	if m != nil {
		return m.LiquidityProvisionId
	}
	return ""
}

// Used when cancelling an Order
type OrderCancellationConfirmation struct {
	// The order that was cancelled
	Order                *Order   `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderCancellationConfirmation) Reset()         { *m = OrderCancellationConfirmation{} }
func (m *OrderCancellationConfirmation) String() string { return proto.CompactTextString(m) }
func (*OrderCancellationConfirmation) ProtoMessage()    {}
func (*OrderCancellationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{7}
}

func (m *OrderCancellationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderCancellationConfirmation.Unmarshal(m, b)
}
func (m *OrderCancellationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderCancellationConfirmation.Marshal(b, m, deterministic)
}
func (m *OrderCancellationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderCancellationConfirmation.Merge(m, src)
}
func (m *OrderCancellationConfirmation) XXX_Size() int {
	return xxx_messageInfo_OrderCancellationConfirmation.Size(m)
}
func (m *OrderCancellationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderCancellationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_OrderCancellationConfirmation proto.InternalMessageInfo

func (m *OrderCancellationConfirmation) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// Used when confirming an Order
type OrderConfirmation struct {
	// The order that was confirmed
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	// 0 or more trades that were emitted
	Trades []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
	// 0 or more passive orders that were affected
	PassiveOrdersAffected []*Order `protobuf:"bytes,3,rep,name=passive_orders_affected,json=passiveOrdersAffected,proto3" json:"passive_orders_affected,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *OrderConfirmation) Reset()         { *m = OrderConfirmation{} }
func (m *OrderConfirmation) String() string { return proto.CompactTextString(m) }
func (*OrderConfirmation) ProtoMessage()    {}
func (*OrderConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{8}
}

func (m *OrderConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderConfirmation.Unmarshal(m, b)
}
func (m *OrderConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderConfirmation.Marshal(b, m, deterministic)
}
func (m *OrderConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderConfirmation.Merge(m, src)
}
func (m *OrderConfirmation) XXX_Size() int {
	return xxx_messageInfo_OrderConfirmation.Size(m)
}
func (m *OrderConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_OrderConfirmation proto.InternalMessageInfo

func (m *OrderConfirmation) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderConfirmation) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

func (m *OrderConfirmation) GetPassiveOrdersAffected() []*Order {
	if m != nil {
		return m.PassiveOrdersAffected
	}
	return nil
}

// AuctionIndicativeState is used to emit an event with the indicative price/volume per market during an auction
type AuctionIndicativeState struct {
	// The market identifier for which this state relates to
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The Indicative Uncrossing Price is the price at which all trades would occur if we uncrossed the auction now
	IndicativePrice uint64 `protobuf:"varint,2,opt,name=indicative_price,json=indicativePrice,proto3" json:"indicative_price,omitempty"`
	// The Indicative Uncrossing Volume is the volume available at the Indicative crossing price if we uncrossed the auction now
	IndicativeVolume uint64 `protobuf:"varint,3,opt,name=indicative_volume,json=indicativeVolume,proto3" json:"indicative_volume,omitempty"`
	// The timestamp at which the auction started
	AuctionStart int64 `protobuf:"varint,4,opt,name=auction_start,json=auctionStart,proto3" json:"auction_start,omitempty"`
	// The timestamp at which the auction is meant to stop
	AuctionEnd           int64    `protobuf:"varint,5,opt,name=auction_end,json=auctionEnd,proto3" json:"auction_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuctionIndicativeState) Reset()         { *m = AuctionIndicativeState{} }
func (m *AuctionIndicativeState) String() string { return proto.CompactTextString(m) }
func (*AuctionIndicativeState) ProtoMessage()    {}
func (*AuctionIndicativeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{9}
}

func (m *AuctionIndicativeState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionIndicativeState.Unmarshal(m, b)
}
func (m *AuctionIndicativeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionIndicativeState.Marshal(b, m, deterministic)
}
func (m *AuctionIndicativeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionIndicativeState.Merge(m, src)
}
func (m *AuctionIndicativeState) XXX_Size() int {
	return xxx_messageInfo_AuctionIndicativeState.Size(m)
}
func (m *AuctionIndicativeState) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionIndicativeState.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionIndicativeState proto.InternalMessageInfo

func (m *AuctionIndicativeState) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *AuctionIndicativeState) GetIndicativePrice() uint64 {
	if m != nil {
		return m.IndicativePrice
	}
	return 0
}

func (m *AuctionIndicativeState) GetIndicativeVolume() uint64 {
	if m != nil {
		return m.IndicativeVolume
	}
	return 0
}

func (m *AuctionIndicativeState) GetAuctionStart() int64 {
	if m != nil {
		return m.AuctionStart
	}
	return 0
}

func (m *AuctionIndicativeState) GetAuctionEnd() int64 {
	if m != nil {
		return m.AuctionEnd
	}
	return 0
}

// A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega
type Trade struct {
	// Unique identifier for the trade (generated by Vega)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier (the market that the trade occurred on)
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Price for the trade, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// Size filled for the trade
	Size uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// Unique party identifier for the buyer
	Buyer string `protobuf:"bytes,5,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// Unique party identifier for the seller
	Seller string `protobuf:"bytes,6,opt,name=seller,proto3" json:"seller,omitempty"`
	// Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)
	Aggressor Side `protobuf:"varint,7,opt,name=aggressor,proto3,enum=vega.Side" json:"aggressor,omitempty"`
	// Identifier of the order from the buy side
	BuyOrder string `protobuf:"bytes,8,opt,name=buy_order,json=buyOrder,proto3" json:"buy_order,omitempty"`
	// Identifier of the order from the sell side
	SellOrder string `protobuf:"bytes,9,opt,name=sell_order,json=sellOrder,proto3" json:"sell_order,omitempty"`
	// Timestamp for when the trade occurred, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Type for the trade - See [`Trade.Type`](#vega.Trade.Type)
	Type Trade_Type `protobuf:"varint,11,opt,name=type,proto3,enum=vega.Trade_Type" json:"type,omitempty"`
	// Fee amount charged to the buyer party for the trade
	BuyerFee *Fee `protobuf:"bytes,12,opt,name=buyer_fee,json=buyerFee,proto3" json:"buyer_fee,omitempty"`
	// Fee amount charged to the seller party for the trade
	SellerFee *Fee `protobuf:"bytes,13,opt,name=seller_fee,json=sellerFee,proto3" json:"seller_fee,omitempty"`
	// Auction batch number that the buy side order was placed in
	BuyerAuctionBatch uint64 `protobuf:"varint,14,opt,name=buyer_auction_batch,json=buyerAuctionBatch,proto3" json:"buyer_auction_batch,omitempty"`
	// Auction batch number that the sell side order was placed in
	SellerAuctionBatch   uint64   `protobuf:"varint,15,opt,name=seller_auction_batch,json=sellerAuctionBatch,proto3" json:"seller_auction_batch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{10}
}

func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trade) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *Trade) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Trade) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *Trade) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *Trade) GetAggressor() Side {
	if m != nil {
		return m.Aggressor
	}
	return Side_SIDE_UNSPECIFIED
}

func (m *Trade) GetBuyOrder() string {
	if m != nil {
		return m.BuyOrder
	}
	return ""
}

func (m *Trade) GetSellOrder() string {
	if m != nil {
		return m.SellOrder
	}
	return ""
}

func (m *Trade) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Trade) GetType() Trade_Type {
	if m != nil {
		return m.Type
	}
	return Trade_TYPE_UNSPECIFIED
}

func (m *Trade) GetBuyerFee() *Fee {
	if m != nil {
		return m.BuyerFee
	}
	return nil
}

func (m *Trade) GetSellerFee() *Fee {
	if m != nil {
		return m.SellerFee
	}
	return nil
}

func (m *Trade) GetBuyerAuctionBatch() uint64 {
	if m != nil {
		return m.BuyerAuctionBatch
	}
	return 0
}

func (m *Trade) GetSellerAuctionBatch() uint64 {
	if m != nil {
		return m.SellerAuctionBatch
	}
	return 0
}

// Represents any fees paid by a party, resulting from a trade
type Fee struct {
	// Fee amount paid to the non-aggressive party of the trade
	MakerFee uint64 `protobuf:"varint,1,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	// Fee amount paid for maintaining the Vega infrastructure
	InfrastructureFee uint64 `protobuf:"varint,2,opt,name=infrastructure_fee,json=infrastructureFee,proto3" json:"infrastructure_fee,omitempty"`
	// Fee amount paid to market makers
	LiquidityFee         uint64   `protobuf:"varint,3,opt,name=liquidity_fee,json=liquidityFee,proto3" json:"liquidity_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fee) Reset()         { *m = Fee{} }
func (m *Fee) String() string { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()    {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{11}
}

func (m *Fee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fee.Unmarshal(m, b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return xxx_messageInfo_Fee.Size(m)
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

func (m *Fee) GetMakerFee() uint64 {
	if m != nil {
		return m.MakerFee
	}
	return 0
}

func (m *Fee) GetInfrastructureFee() uint64 {
	if m != nil {
		return m.InfrastructureFee
	}
	return 0
}

func (m *Fee) GetLiquidityFee() uint64 {
	if m != nil {
		return m.LiquidityFee
	}
	return 0
}

type TradeSet struct {
	// A set of one or more trades
	Trades               []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeSet) Reset()         { *m = TradeSet{} }
func (m *TradeSet) String() string { return proto.CompactTextString(m) }
func (*TradeSet) ProtoMessage()    {}
func (*TradeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{12}
}

func (m *TradeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeSet.Unmarshal(m, b)
}
func (m *TradeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeSet.Marshal(b, m, deterministic)
}
func (m *TradeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeSet.Merge(m, src)
}
func (m *TradeSet) XXX_Size() int {
	return xxx_messageInfo_TradeSet.Size(m)
}
func (m *TradeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeSet.DiscardUnknown(m)
}

var xxx_messageInfo_TradeSet proto.InternalMessageInfo

func (m *TradeSet) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

// Represents the high, low, open, and closing prices for an interval of trading,
// referred to commonly as a candlestick or candle
type Candle struct {
	// Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// An ISO-8601 datetime with nanosecond precision for when the candle was last updated
	Datetime string `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// Highest price for trading during the candle interval
	High uint64 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	// Lowest price for trading during the candle interval
	Low uint64 `protobuf:"varint,4,opt,name=low,proto3" json:"low,omitempty"`
	// Open trade price
	Open uint64 `protobuf:"varint,5,opt,name=open,proto3" json:"open,omitempty"`
	// Closing trade price
	Close uint64 `protobuf:"varint,6,opt,name=close,proto3" json:"close,omitempty"`
	// Total trading volume during the candle interval
	Volume uint64 `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`
	// Time interval for the candle - See [`Interval`](#vega.Interval)
	Interval             Interval `protobuf:"varint,8,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Candle) Reset()         { *m = Candle{} }
func (m *Candle) String() string { return proto.CompactTextString(m) }
func (*Candle) ProtoMessage()    {}
func (*Candle) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{13}
}

func (m *Candle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Candle.Unmarshal(m, b)
}
func (m *Candle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Candle.Marshal(b, m, deterministic)
}
func (m *Candle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candle.Merge(m, src)
}
func (m *Candle) XXX_Size() int {
	return xxx_messageInfo_Candle.Size(m)
}
func (m *Candle) XXX_DiscardUnknown() {
	xxx_messageInfo_Candle.DiscardUnknown(m)
}

var xxx_messageInfo_Candle proto.InternalMessageInfo

func (m *Candle) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Candle) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

func (m *Candle) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Candle) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Candle) GetOpen() uint64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Candle) GetClose() uint64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *Candle) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Candle) GetInterval() Interval {
	if m != nil {
		return m.Interval
	}
	return Interval_INTERVAL_UNSPECIFIED
}

// Represents a price level from market depth or order book data
type PriceLevel struct {
	// Price for the price level, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	// Number of orders at the price level
	NumberOfOrders uint64 `protobuf:"varint,2,opt,name=number_of_orders,json=numberOfOrders,proto3" json:"number_of_orders,omitempty"`
	// Volume at the price level
	Volume               uint64   `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceLevel) Reset()         { *m = PriceLevel{} }
func (m *PriceLevel) String() string { return proto.CompactTextString(m) }
func (*PriceLevel) ProtoMessage()    {}
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{14}
}

func (m *PriceLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceLevel.Unmarshal(m, b)
}
func (m *PriceLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceLevel.Marshal(b, m, deterministic)
}
func (m *PriceLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceLevel.Merge(m, src)
}
func (m *PriceLevel) XXX_Size() int {
	return xxx_messageInfo_PriceLevel.Size(m)
}
func (m *PriceLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceLevel.DiscardUnknown(m)
}

var xxx_messageInfo_PriceLevel proto.InternalMessageInfo

func (m *PriceLevel) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PriceLevel) GetNumberOfOrders() uint64 {
	if m != nil {
		return m.NumberOfOrders
	}
	return 0
}

func (m *PriceLevel) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

// Represents market depth or order book data for the specified market on Vega
type MarketDepth struct {
	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Collection of price levels for the buy side of the book
	Buy []*PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Collection of price levels for the sell side of the book
	Sell []*PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Sequence number for the market depth data returned
	SequenceNumber       uint64   `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepth) Reset()         { *m = MarketDepth{} }
func (m *MarketDepth) String() string { return proto.CompactTextString(m) }
func (*MarketDepth) ProtoMessage()    {}
func (*MarketDepth) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{15}
}

func (m *MarketDepth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepth.Unmarshal(m, b)
}
func (m *MarketDepth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepth.Marshal(b, m, deterministic)
}
func (m *MarketDepth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepth.Merge(m, src)
}
func (m *MarketDepth) XXX_Size() int {
	return xxx_messageInfo_MarketDepth.Size(m)
}
func (m *MarketDepth) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepth.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepth proto.InternalMessageInfo

func (m *MarketDepth) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketDepth) GetBuy() []*PriceLevel {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *MarketDepth) GetSell() []*PriceLevel {
	if m != nil {
		return m.Sell
	}
	return nil
}

func (m *MarketDepth) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// Represents the changed market depth since the last update
type MarketDepthUpdate struct {
	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Collection of updated price levels for the buy side of the book
	Buy []*PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Collection of updated price levels for the sell side of the book
	Sell []*PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Sequence number for the market depth update data returned
	SequenceNumber       uint64   `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepthUpdate) Reset()         { *m = MarketDepthUpdate{} }
func (m *MarketDepthUpdate) String() string { return proto.CompactTextString(m) }
func (*MarketDepthUpdate) ProtoMessage()    {}
func (*MarketDepthUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{16}
}

func (m *MarketDepthUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthUpdate.Unmarshal(m, b)
}
func (m *MarketDepthUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthUpdate.Marshal(b, m, deterministic)
}
func (m *MarketDepthUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthUpdate.Merge(m, src)
}
func (m *MarketDepthUpdate) XXX_Size() int {
	return xxx_messageInfo_MarketDepthUpdate.Size(m)
}
func (m *MarketDepthUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthUpdate proto.InternalMessageInfo

func (m *MarketDepthUpdate) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketDepthUpdate) GetBuy() []*PriceLevel {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *MarketDepthUpdate) GetSell() []*PriceLevel {
	if m != nil {
		return m.Sell
	}
	return nil
}

func (m *MarketDepthUpdate) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// Represents position data for a party on the specified market on Vega
type Position struct {
	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Open volume for the position, value is signed +ve for long and -ve for short
	OpenVolume int64 `protobuf:"varint,3,opt,name=open_volume,json=openVolume,proto3" json:"open_volume,omitempty"`
	// Realised profit and loss for the position, value is signed +ve for long and -ve for short
	RealisedPnl int64 `protobuf:"varint,4,opt,name=realised_pnl,json=realisedPnl,proto3" json:"realised_pnl,omitempty"`
	// Unrealised profit and loss for the position, value is signed +ve for long and -ve for short
	UnrealisedPnl int64 `protobuf:"varint,5,opt,name=unrealised_pnl,json=unrealisedPnl,proto3" json:"unrealised_pnl,omitempty"`
	// Average entry price for the position, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	AverageEntryPrice uint64 `protobuf:"varint,6,opt,name=average_entry_price,json=averageEntryPrice,proto3" json:"average_entry_price,omitempty"`
	// Timestamp for the latest time the position was updated
	UpdatedAt            int64    `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{17}
}

func (m *Position) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Position.Unmarshal(m, b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Position.Marshal(b, m, deterministic)
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return xxx_messageInfo_Position.Size(m)
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *Position) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *Position) GetOpenVolume() int64 {
	if m != nil {
		return m.OpenVolume
	}
	return 0
}

func (m *Position) GetRealisedPnl() int64 {
	if m != nil {
		return m.RealisedPnl
	}
	return 0
}

func (m *Position) GetUnrealisedPnl() int64 {
	if m != nil {
		return m.UnrealisedPnl
	}
	return 0
}

func (m *Position) GetAverageEntryPrice() uint64 {
	if m != nil {
		return m.AverageEntryPrice
	}
	return 0
}

func (m *Position) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type PositionTrade struct {
	// Volume for the position trade, value is signed +ve for long and -ve for short
	Volume int64 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// Price for the position trade, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price                uint64   `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionTrade) Reset()         { *m = PositionTrade{} }
func (m *PositionTrade) String() string { return proto.CompactTextString(m) }
func (*PositionTrade) ProtoMessage()    {}
func (*PositionTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{18}
}

func (m *PositionTrade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionTrade.Unmarshal(m, b)
}
func (m *PositionTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionTrade.Marshal(b, m, deterministic)
}
func (m *PositionTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionTrade.Merge(m, src)
}
func (m *PositionTrade) XXX_Size() int {
	return xxx_messageInfo_PositionTrade.Size(m)
}
func (m *PositionTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionTrade.DiscardUnknown(m)
}

var xxx_messageInfo_PositionTrade proto.InternalMessageInfo

func (m *PositionTrade) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *PositionTrade) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// Vega domain specific statistics as reported by the node the caller is connected to
type Statistics struct {
	// Current block height as reported by the Vega blockchain
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Current backlog length (number of transactions) that are waiting to be included in a block
	BacklogLength uint64 `protobuf:"varint,2,opt,name=backlog_length,json=backlogLength,proto3" json:"backlog_length,omitempty"`
	// Total number of connected peers to this node
	TotalPeers uint64 `protobuf:"varint,3,opt,name=total_peers,json=totalPeers,proto3" json:"total_peers,omitempty"`
	// Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision
	GenesisTime string `protobuf:"bytes,4,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	// Current system date and time formatted in ISO-8601 datetime format with nanosecond precision
	CurrentTime string `protobuf:"bytes,5,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	// Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision
	VegaTime string `protobuf:"bytes,6,opt,name=vega_time,json=vegaTime,proto3" json:"vega_time,omitempty"`
	// Status of the connection to the Vega blockchain
	// - See [`ChainStatus`](#vega.ChainStatus)
	Status ChainStatus `protobuf:"varint,7,opt,name=status,proto3,enum=vega.ChainStatus" json:"status,omitempty"`
	// Transactions per block
	TxPerBlock uint64 `protobuf:"varint,8,opt,name=tx_per_block,json=txPerBlock,proto3" json:"tx_per_block,omitempty"`
	// Average transaction size in bytes
	AverageTxBytes uint64 `protobuf:"varint,9,opt,name=average_tx_bytes,json=averageTxBytes,proto3" json:"average_tx_bytes,omitempty"`
	// Average orders per block
	AverageOrdersPerBlock uint64 `protobuf:"varint,10,opt,name=average_orders_per_block,json=averageOrdersPerBlock,proto3" json:"average_orders_per_block,omitempty"`
	// Trades emitted per second
	TradesPerSecond uint64 `protobuf:"varint,11,opt,name=trades_per_second,json=tradesPerSecond,proto3" json:"trades_per_second,omitempty"`
	// Orders processed per second
	OrdersPerSecond uint64 `protobuf:"varint,12,opt,name=orders_per_second,json=ordersPerSecond,proto3" json:"orders_per_second,omitempty"`
	// Total markets on this Vega network
	TotalMarkets uint64 `protobuf:"varint,13,opt,name=total_markets,json=totalMarkets,proto3" json:"total_markets,omitempty"`
	// Total number of order amendments since genesis (on all markets)
	TotalAmendOrder uint64 `protobuf:"varint,16,opt,name=total_amend_order,json=totalAmendOrder,proto3" json:"total_amend_order,omitempty"`
	// Total number of order cancellations since genesis (on all markets)
	TotalCancelOrder uint64 `protobuf:"varint,17,opt,name=total_cancel_order,json=totalCancelOrder,proto3" json:"total_cancel_order,omitempty"`
	// Total number of order submissions since genesis (on all markets)
	TotalCreateOrder uint64 `protobuf:"varint,18,opt,name=total_create_order,json=totalCreateOrder,proto3" json:"total_create_order,omitempty"`
	// Total number of orders processed since genesis (on all markets)
	TotalOrders uint64 `protobuf:"varint,19,opt,name=total_orders,json=totalOrders,proto3" json:"total_orders,omitempty"`
	// Total number of trades emitted since genesis (on all markets)
	TotalTrades uint64 `protobuf:"varint,20,opt,name=total_trades,json=totalTrades,proto3" json:"total_trades,omitempty"`
	// Current number of stream subscribers to order data
	OrderSubscriptions uint32 `protobuf:"varint,21,opt,name=order_subscriptions,json=orderSubscriptions,proto3" json:"order_subscriptions,omitempty"`
	// Current number of stream subscribers to trade data
	TradeSubscriptions uint32 `protobuf:"varint,22,opt,name=trade_subscriptions,json=tradeSubscriptions,proto3" json:"trade_subscriptions,omitempty"`
	// Current number of stream subscribers to candle-stick data
	CandleSubscriptions uint32 `protobuf:"varint,23,opt,name=candle_subscriptions,json=candleSubscriptions,proto3" json:"candle_subscriptions,omitempty"`
	// Current number of stream subscribers to market depth data
	MarketDepthSubscriptions uint32 `protobuf:"varint,24,opt,name=market_depth_subscriptions,json=marketDepthSubscriptions,proto3" json:"market_depth_subscriptions,omitempty"`
	// Current number of stream subscribers to positions data
	PositionsSubscriptions uint32 `protobuf:"varint,25,opt,name=positions_subscriptions,json=positionsSubscriptions,proto3" json:"positions_subscriptions,omitempty"`
	// Current number of stream subscribers to account data
	AccountSubscriptions uint32 `protobuf:"varint,26,opt,name=account_subscriptions,json=accountSubscriptions,proto3" json:"account_subscriptions,omitempty"`
	// Current number of stream subscribers to market data
	MarketDataSubscriptions uint32 `protobuf:"varint,27,opt,name=market_data_subscriptions,json=marketDataSubscriptions,proto3" json:"market_data_subscriptions,omitempty"`
	// The version hash of the Vega node software
	AppVersionHash string `protobuf:"bytes,28,opt,name=app_version_hash,json=appVersionHash,proto3" json:"app_version_hash,omitempty"`
	// The version of the Vega node software
	AppVersion string `protobuf:"bytes,29,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// The version of the underlying Vega blockchain
	ChainVersion string `protobuf:"bytes,30,opt,name=chain_version,json=chainVersion,proto3" json:"chain_version,omitempty"`
	// Current block duration, in nanoseconds
	BlockDuration uint64 `protobuf:"varint,31,opt,name=block_duration,json=blockDuration,proto3" json:"block_duration,omitempty"`
	// Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision
	Uptime string `protobuf:"bytes,32,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Unique identifier for the underlying Vega blockchain
	ChainId string `protobuf:"bytes,33,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current number of stream subscribers to market depth update data
	MarketDepthUpdatesSubscriptions uint32   `protobuf:"varint,34,opt,name=market_depth_updates_subscriptions,json=marketDepthUpdatesSubscriptions,proto3" json:"market_depth_updates_subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *Statistics) Reset()         { *m = Statistics{} }
func (m *Statistics) String() string { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()    {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{19}
}

func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statistics.Unmarshal(m, b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
}
func (m *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(m, src)
}
func (m *Statistics) XXX_Size() int {
	return xxx_messageInfo_Statistics.Size(m)
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Statistics) GetBacklogLength() uint64 {
	if m != nil {
		return m.BacklogLength
	}
	return 0
}

func (m *Statistics) GetTotalPeers() uint64 {
	if m != nil {
		return m.TotalPeers
	}
	return 0
}

func (m *Statistics) GetGenesisTime() string {
	if m != nil {
		return m.GenesisTime
	}
	return ""
}

func (m *Statistics) GetCurrentTime() string {
	if m != nil {
		return m.CurrentTime
	}
	return ""
}

func (m *Statistics) GetVegaTime() string {
	if m != nil {
		return m.VegaTime
	}
	return ""
}

func (m *Statistics) GetStatus() ChainStatus {
	if m != nil {
		return m.Status
	}
	return ChainStatus_CHAIN_STATUS_UNSPECIFIED
}

func (m *Statistics) GetTxPerBlock() uint64 {
	if m != nil {
		return m.TxPerBlock
	}
	return 0
}

func (m *Statistics) GetAverageTxBytes() uint64 {
	if m != nil {
		return m.AverageTxBytes
	}
	return 0
}

func (m *Statistics) GetAverageOrdersPerBlock() uint64 {
	if m != nil {
		return m.AverageOrdersPerBlock
	}
	return 0
}

func (m *Statistics) GetTradesPerSecond() uint64 {
	if m != nil {
		return m.TradesPerSecond
	}
	return 0
}

func (m *Statistics) GetOrdersPerSecond() uint64 {
	if m != nil {
		return m.OrdersPerSecond
	}
	return 0
}

func (m *Statistics) GetTotalMarkets() uint64 {
	if m != nil {
		return m.TotalMarkets
	}
	return 0
}

func (m *Statistics) GetTotalAmendOrder() uint64 {
	if m != nil {
		return m.TotalAmendOrder
	}
	return 0
}

func (m *Statistics) GetTotalCancelOrder() uint64 {
	if m != nil {
		return m.TotalCancelOrder
	}
	return 0
}

func (m *Statistics) GetTotalCreateOrder() uint64 {
	if m != nil {
		return m.TotalCreateOrder
	}
	return 0
}

func (m *Statistics) GetTotalOrders() uint64 {
	if m != nil {
		return m.TotalOrders
	}
	return 0
}

func (m *Statistics) GetTotalTrades() uint64 {
	if m != nil {
		return m.TotalTrades
	}
	return 0
}

func (m *Statistics) GetOrderSubscriptions() uint32 {
	if m != nil {
		return m.OrderSubscriptions
	}
	return 0
}

func (m *Statistics) GetTradeSubscriptions() uint32 {
	if m != nil {
		return m.TradeSubscriptions
	}
	return 0
}

func (m *Statistics) GetCandleSubscriptions() uint32 {
	if m != nil {
		return m.CandleSubscriptions
	}
	return 0
}

func (m *Statistics) GetMarketDepthSubscriptions() uint32 {
	if m != nil {
		return m.MarketDepthSubscriptions
	}
	return 0
}

func (m *Statistics) GetPositionsSubscriptions() uint32 {
	if m != nil {
		return m.PositionsSubscriptions
	}
	return 0
}

func (m *Statistics) GetAccountSubscriptions() uint32 {
	if m != nil {
		return m.AccountSubscriptions
	}
	return 0
}

func (m *Statistics) GetMarketDataSubscriptions() uint32 {
	if m != nil {
		return m.MarketDataSubscriptions
	}
	return 0
}

func (m *Statistics) GetAppVersionHash() string {
	if m != nil {
		return m.AppVersionHash
	}
	return ""
}

func (m *Statistics) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *Statistics) GetChainVersion() string {
	if m != nil {
		return m.ChainVersion
	}
	return ""
}

func (m *Statistics) GetBlockDuration() uint64 {
	if m != nil {
		return m.BlockDuration
	}
	return 0
}

func (m *Statistics) GetUptime() string {
	if m != nil {
		return m.Uptime
	}
	return ""
}

func (m *Statistics) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Statistics) GetMarketDepthUpdatesSubscriptions() uint32 {
	if m != nil {
		return m.MarketDepthUpdatesSubscriptions
	}
	return 0
}

// A deposit on to the Vega network
type Deposit struct {
	// Unique identifier for the deposit
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status of the deposit
	Status Deposit_Status `protobuf:"varint,2,opt,name=status,proto3,enum=vega.Deposit_Status" json:"status,omitempty"`
	// Party identifier of the user initiating the deposit
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The Vega asset targeted by this deposit
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The amount to be deposited
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The hash of the transaction from the foreign chain
	TxHash string `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Timestamp for when the Vega account was updated with the deposit
	CreditedTimestamp int64 `protobuf:"varint,7,opt,name=credited_timestamp,json=creditedTimestamp,proto3" json:"credited_timestamp,omitempty"`
	// Timestamp for when the deposit was created on the Vega network
	CreatedTimestamp     int64    `protobuf:"varint,8,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{20}
}

func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deposit.Unmarshal(m, b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return xxx_messageInfo_Deposit.Size(m)
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Deposit) GetStatus() Deposit_Status {
	if m != nil {
		return m.Status
	}
	return Deposit_STATUS_UNSPECIFIED
}

func (m *Deposit) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *Deposit) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Deposit) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Deposit) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Deposit) GetCreditedTimestamp() int64 {
	if m != nil {
		return m.CreditedTimestamp
	}
	return 0
}

func (m *Deposit) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

// A withdrawal from the Vega network
type Withdrawal struct {
	// Unique identifier for the withdrawal
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique party identifier of the user initiating the withdrawal
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The amount to be withdrawn
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The asset we want to withdraw funds from
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The status of the withdrawal
	Status Withdrawal_Status `protobuf:"varint,5,opt,name=status,proto3,enum=vega.Withdrawal_Status" json:"status,omitempty"`
	// The reference which is used by the foreign chain
	// to refer to this withdrawal
	Ref string `protobuf:"bytes,6,opt,name=ref,proto3" json:"ref,omitempty"`
	// The time until when the withdrawal is valid
	Expiry int64 `protobuf:"varint,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The hash of the foreign chain for this transaction
	TxHash string `protobuf:"bytes,8,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Timestamp for when the network started to process this withdrawal
	CreatedTimestamp int64 `protobuf:"varint,9,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	// Timestamp for when the withdrawal was finalised by the network
	WithdrawnTimestamp int64 `protobuf:"varint,10,opt,name=withdrawn_timestamp,json=withdrawnTimestamp,proto3" json:"withdrawn_timestamp,omitempty"`
	// Foreign chain specifics
	Ext                  *WithdrawExt `protobuf:"bytes,11,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Withdrawal) Reset()         { *m = Withdrawal{} }
func (m *Withdrawal) String() string { return proto.CompactTextString(m) }
func (*Withdrawal) ProtoMessage()    {}
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{21}
}

func (m *Withdrawal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Withdrawal.Unmarshal(m, b)
}
func (m *Withdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Withdrawal.Marshal(b, m, deterministic)
}
func (m *Withdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdrawal.Merge(m, src)
}
func (m *Withdrawal) XXX_Size() int {
	return xxx_messageInfo_Withdrawal.Size(m)
}
func (m *Withdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_Withdrawal proto.InternalMessageInfo

func (m *Withdrawal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Withdrawal) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *Withdrawal) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Withdrawal) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Withdrawal) GetStatus() Withdrawal_Status {
	if m != nil {
		return m.Status
	}
	return Withdrawal_STATUS_UNSPECIFIED
}

func (m *Withdrawal) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Withdrawal) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Withdrawal) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Withdrawal) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *Withdrawal) GetWithdrawnTimestamp() int64 {
	if m != nil {
		return m.WithdrawnTimestamp
	}
	return 0
}

func (m *Withdrawal) GetExt() *WithdrawExt {
	if m != nil {
		return m.Ext
	}
	return nil
}

// Withdrawal external details
type WithdrawExt struct {
	// Foreign chain specifics
	//
	// Types that are valid to be assigned to Ext:
	//	*WithdrawExt_Erc20
	Ext                  isWithdrawExt_Ext `protobuf_oneof:"ext"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WithdrawExt) Reset()         { *m = WithdrawExt{} }
func (m *WithdrawExt) String() string { return proto.CompactTextString(m) }
func (*WithdrawExt) ProtoMessage()    {}
func (*WithdrawExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{22}
}

func (m *WithdrawExt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawExt.Unmarshal(m, b)
}
func (m *WithdrawExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawExt.Marshal(b, m, deterministic)
}
func (m *WithdrawExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawExt.Merge(m, src)
}
func (m *WithdrawExt) XXX_Size() int {
	return xxx_messageInfo_WithdrawExt.Size(m)
}
func (m *WithdrawExt) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawExt.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawExt proto.InternalMessageInfo

type isWithdrawExt_Ext interface {
	isWithdrawExt_Ext()
}

type WithdrawExt_Erc20 struct {
	Erc20 *Erc20WithdrawExt `protobuf:"bytes,1,opt,name=erc20,proto3,oneof"`
}

func (*WithdrawExt_Erc20) isWithdrawExt_Ext() {}

func (m *WithdrawExt) GetExt() isWithdrawExt_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *WithdrawExt) GetErc20() *Erc20WithdrawExt {
	if x, ok := m.GetExt().(*WithdrawExt_Erc20); ok {
		return x.Erc20
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WithdrawExt) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WithdrawExt_Erc20)(nil),
	}
}

// An extension of data required for the withdraw submissions
type Erc20WithdrawExt struct {
	// The address into which the bridge will release the funds
	ReceiverAddress      string   `protobuf:"bytes,1,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Erc20WithdrawExt) Reset()         { *m = Erc20WithdrawExt{} }
func (m *Erc20WithdrawExt) String() string { return proto.CompactTextString(m) }
func (*Erc20WithdrawExt) ProtoMessage()    {}
func (*Erc20WithdrawExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{23}
}

func (m *Erc20WithdrawExt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Erc20WithdrawExt.Unmarshal(m, b)
}
func (m *Erc20WithdrawExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Erc20WithdrawExt.Marshal(b, m, deterministic)
}
func (m *Erc20WithdrawExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Erc20WithdrawExt.Merge(m, src)
}
func (m *Erc20WithdrawExt) XXX_Size() int {
	return xxx_messageInfo_Erc20WithdrawExt.Size(m)
}
func (m *Erc20WithdrawExt) XXX_DiscardUnknown() {
	xxx_messageInfo_Erc20WithdrawExt.DiscardUnknown(m)
}

var xxx_messageInfo_Erc20WithdrawExt proto.InternalMessageInfo

func (m *Erc20WithdrawExt) GetReceiverAddress() string {
	if m != nil {
		return m.ReceiverAddress
	}
	return ""
}

// Represents an account for an asset on Vega for a particular owner or party
type Account struct {
	// Unique account identifier (used internally by Vega)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The party that the account belongs to, special values include `network`, which represents the Vega network and is
	// most commonly seen during liquidation of distressed trading positions
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Balance of the asset, the balance is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// and importantly balances cannot be negative
	Balance uint64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// Asset identifier for the account
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty
	MarketId string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The account type related to this account
	Type                 AccountType `protobuf:"varint,6,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{24}
}

func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Account) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Account) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *Account) GetType() AccountType {
	if m != nil {
		return m.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

// Asset value information used within a transfer
type FinancialAmount struct {
	// A signed integer amount of asset
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Asset identifier
	Asset                string   `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinancialAmount) Reset()         { *m = FinancialAmount{} }
func (m *FinancialAmount) String() string { return proto.CompactTextString(m) }
func (*FinancialAmount) ProtoMessage()    {}
func (*FinancialAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{25}
}

func (m *FinancialAmount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinancialAmount.Unmarshal(m, b)
}
func (m *FinancialAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinancialAmount.Marshal(b, m, deterministic)
}
func (m *FinancialAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinancialAmount.Merge(m, src)
}
func (m *FinancialAmount) XXX_Size() int {
	return xxx_messageInfo_FinancialAmount.Size(m)
}
func (m *FinancialAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_FinancialAmount.DiscardUnknown(m)
}

var xxx_messageInfo_FinancialAmount proto.InternalMessageInfo

func (m *FinancialAmount) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FinancialAmount) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

// Represents a financial transfer within Vega
type Transfer struct {
	// Party identifier for the owner of the transfer
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// A financial amount (of an asset) to transfer
	Amount *FinancialAmount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The type of transfer, gives the reason for the transfer
	Type TransferType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.TransferType" json:"type,omitempty"`
	// A minimum amount
	MinAmount            uint64   `protobuf:"varint,4,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{26}
}

func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transfer.Unmarshal(m, b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return xxx_messageInfo_Transfer.Size(m)
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Transfer) GetAmount() *FinancialAmount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Transfer) GetType() TransferType {
	if m != nil {
		return m.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (m *Transfer) GetMinAmount() uint64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

// Represents a request to transfer from one set of accounts to another
type TransferRequest struct {
	// One or more accounts to transfer from
	FromAccount []*Account `protobuf:"bytes,1,rep,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`
	// One or more accounts to transfer to
	ToAccount []*Account `protobuf:"bytes,2,rep,name=to_account,json=toAccount,proto3" json:"to_account,omitempty"`
	// An amount to transfer for the asset
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// A minimum amount
	MinAmount uint64 `protobuf:"varint,4,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	// A reference for auditing purposes
	Reference            string   `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferRequest) Reset()         { *m = TransferRequest{} }
func (m *TransferRequest) String() string { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()    {}
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{27}
}

func (m *TransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferRequest.Unmarshal(m, b)
}
func (m *TransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferRequest.Marshal(b, m, deterministic)
}
func (m *TransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequest.Merge(m, src)
}
func (m *TransferRequest) XXX_Size() int {
	return xxx_messageInfo_TransferRequest.Size(m)
}
func (m *TransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequest proto.InternalMessageInfo

func (m *TransferRequest) GetFromAccount() []*Account {
	if m != nil {
		return m.FromAccount
	}
	return nil
}

func (m *TransferRequest) GetToAccount() []*Account {
	if m != nil {
		return m.ToAccount
	}
	return nil
}

func (m *TransferRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransferRequest) GetMinAmount() uint64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

func (m *TransferRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *TransferRequest) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

// Represents a ledger entry on Vega
type LedgerEntry struct {
	// One or more accounts to transfer from
	FromAccount string `protobuf:"bytes,1,opt,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`
	// One or more accounts to transfer to
	ToAccount string `protobuf:"bytes,2,opt,name=to_account,json=toAccount,proto3" json:"to_account,omitempty"`
	// An amount to transfer
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// A reference for auditing purposes
	Reference string `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	// Type of ledger entry
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Timestamp for the time the ledger entry was created, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	Timestamp            int64    `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LedgerEntry) Reset()         { *m = LedgerEntry{} }
func (m *LedgerEntry) String() string { return proto.CompactTextString(m) }
func (*LedgerEntry) ProtoMessage()    {}
func (*LedgerEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{28}
}

func (m *LedgerEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedgerEntry.Unmarshal(m, b)
}
func (m *LedgerEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedgerEntry.Marshal(b, m, deterministic)
}
func (m *LedgerEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerEntry.Merge(m, src)
}
func (m *LedgerEntry) XXX_Size() int {
	return xxx_messageInfo_LedgerEntry.Size(m)
}
func (m *LedgerEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerEntry proto.InternalMessageInfo

func (m *LedgerEntry) GetFromAccount() string {
	if m != nil {
		return m.FromAccount
	}
	return ""
}

func (m *LedgerEntry) GetToAccount() string {
	if m != nil {
		return m.ToAccount
	}
	return ""
}

func (m *LedgerEntry) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *LedgerEntry) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *LedgerEntry) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LedgerEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Represents the balance for an account during a transfer
type TransferBalance struct {
	// The account relating to the transfer
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The balance relating to the transfer
	Balance              uint64   `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferBalance) Reset()         { *m = TransferBalance{} }
func (m *TransferBalance) String() string { return proto.CompactTextString(m) }
func (*TransferBalance) ProtoMessage()    {}
func (*TransferBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{29}
}

func (m *TransferBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferBalance.Unmarshal(m, b)
}
func (m *TransferBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferBalance.Marshal(b, m, deterministic)
}
func (m *TransferBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferBalance.Merge(m, src)
}
func (m *TransferBalance) XXX_Size() int {
	return xxx_messageInfo_TransferBalance.Size(m)
}
func (m *TransferBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferBalance.DiscardUnknown(m)
}

var xxx_messageInfo_TransferBalance proto.InternalMessageInfo

func (m *TransferBalance) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *TransferBalance) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

// Represents the response from a transfer
type TransferResponse struct {
	// One or more ledger entries representing the transfers
	Transfers []*LedgerEntry `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
	// One or more account balances
	Balances             []*TransferBalance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TransferResponse) Reset()         { *m = TransferResponse{} }
func (m *TransferResponse) String() string { return proto.CompactTextString(m) }
func (*TransferResponse) ProtoMessage()    {}
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{30}
}

func (m *TransferResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferResponse.Unmarshal(m, b)
}
func (m *TransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferResponse.Marshal(b, m, deterministic)
}
func (m *TransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResponse.Merge(m, src)
}
func (m *TransferResponse) XXX_Size() int {
	return xxx_messageInfo_TransferResponse.Size(m)
}
func (m *TransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResponse proto.InternalMessageInfo

func (m *TransferResponse) GetTransfers() []*LedgerEntry {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (m *TransferResponse) GetBalances() []*TransferBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

// Represents the margin levels for a party on a market at a given time
type MarginLevels struct {
	// Maintenance margin value
	MaintenanceMargin uint64 `protobuf:"varint,1,opt,name=maintenance_margin,json=maintenanceMargin,proto3" json:"maintenance_margin,omitempty"`
	// Search level value
	SearchLevel uint64 `protobuf:"varint,2,opt,name=search_level,json=searchLevel,proto3" json:"search_level,omitempty"`
	// Initial margin value
	InitialMargin uint64 `protobuf:"varint,3,opt,name=initial_margin,json=initialMargin,proto3" json:"initial_margin,omitempty"`
	// Collateral release level value
	CollateralReleaseLevel uint64 `protobuf:"varint,4,opt,name=collateral_release_level,json=collateralReleaseLevel,proto3" json:"collateral_release_level,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,5,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,6,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,7,opt,name=asset,proto3" json:"asset,omitempty"`
	// Timestamp for the time the ledger entry was created, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	Timestamp            int64    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarginLevels) Reset()         { *m = MarginLevels{} }
func (m *MarginLevels) String() string { return proto.CompactTextString(m) }
func (*MarginLevels) ProtoMessage()    {}
func (*MarginLevels) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{31}
}

func (m *MarginLevels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLevels.Unmarshal(m, b)
}
func (m *MarginLevels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLevels.Marshal(b, m, deterministic)
}
func (m *MarginLevels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLevels.Merge(m, src)
}
func (m *MarginLevels) XXX_Size() int {
	return xxx_messageInfo_MarginLevels.Size(m)
}
func (m *MarginLevels) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLevels.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLevels proto.InternalMessageInfo

func (m *MarginLevels) GetMaintenanceMargin() uint64 {
	if m != nil {
		return m.MaintenanceMargin
	}
	return 0
}

func (m *MarginLevels) GetSearchLevel() uint64 {
	if m != nil {
		return m.SearchLevel
	}
	return 0
}

func (m *MarginLevels) GetInitialMargin() uint64 {
	if m != nil {
		return m.InitialMargin
	}
	return 0
}

func (m *MarginLevels) GetCollateralReleaseLevel() uint64 {
	if m != nil {
		return m.CollateralReleaseLevel
	}
	return 0
}

func (m *MarginLevels) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *MarginLevels) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarginLevels) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *MarginLevels) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Represents data generated by a market when open
type MarketData struct {
	// Mark price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	MarkPrice uint64 `protobuf:"varint,1,opt,name=mark_price,json=markPrice,proto3" json:"mark_price,omitempty"`
	// Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	BestBidPrice uint64 `protobuf:"varint,2,opt,name=best_bid_price,json=bestBidPrice,proto3" json:"best_bid_price,omitempty"`
	// Aggregated volume being bid at the best bid price
	BestBidVolume uint64 `protobuf:"varint,3,opt,name=best_bid_volume,json=bestBidVolume,proto3" json:"best_bid_volume,omitempty"`
	// Lowest price level on an order book for offer orders
	BestOfferPrice uint64 `protobuf:"varint,4,opt,name=best_offer_price,json=bestOfferPrice,proto3" json:"best_offer_price,omitempty"`
	// Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly
	//  // formatted price of `1.23456` assuming market configured to 5 decimal places
	BestOfferVolume uint64 `protobuf:"varint,5,opt,name=best_offer_volume,json=bestOfferVolume,proto3" json:"best_offer_volume,omitempty"`
	// Highest price on the order book for buy orders not including pegged orders
	BestStaticBidPrice uint64 `protobuf:"varint,6,opt,name=best_static_bid_price,json=bestStaticBidPrice,proto3" json:"best_static_bid_price,omitempty"`
	// Total volume at the best static bid price excluding pegged orders
	BestStaticBidVolume uint64 `protobuf:"varint,7,opt,name=best_static_bid_volume,json=bestStaticBidVolume,proto3" json:"best_static_bid_volume,omitempty"`
	// Lowest price on the order book for sell orders not including pegged orders
	BestStaticOfferPrice uint64 `protobuf:"varint,8,opt,name=best_static_offer_price,json=bestStaticOfferPrice,proto3" json:"best_static_offer_price,omitempty"`
	// Total volume at the best static offer price excluding pegged orders
	BestStaticOfferVolume uint64 `protobuf:"varint,9,opt,name=best_static_offer_volume,json=bestStaticOfferVolume,proto3" json:"best_static_offer_volume,omitempty"`
	// Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	MidPrice uint64 `protobuf:"varint,10,opt,name=mid_price,json=midPrice,proto3" json:"mid_price,omitempty"`
	// Arithmetic average of the best static bid price and best static offer price
	StaticMidPrice uint64 `protobuf:"varint,11,opt,name=static_mid_price,json=staticMidPrice,proto3" json:"static_mid_price,omitempty"`
	// Market identifier for the data
	Market string `protobuf:"bytes,12,opt,name=market,proto3" json:"market,omitempty"`
	// Timestamp at which this mark price was relevant, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	Timestamp int64 `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The sum of the size of all positions greater than 0 on the market
	OpenInterest uint64 `protobuf:"varint,14,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`
	// Time in seconds until the end of the auction (0 if currently not in auction period)
	AuctionEnd int64 `protobuf:"varint,15,opt,name=auction_end,json=auctionEnd,proto3" json:"auction_end,omitempty"`
	// Time until next auction (used in FBA's) - currently always 0
	AuctionStart int64 `protobuf:"varint,16,opt,name=auction_start,json=auctionStart,proto3" json:"auction_start,omitempty"`
	// Indicative price (zero if not in auction)
	IndicativePrice uint64 `protobuf:"varint,17,opt,name=indicative_price,json=indicativePrice,proto3" json:"indicative_price,omitempty"`
	// Indicative volume (zero if not in auction)
	IndicativeVolume uint64 `protobuf:"varint,18,opt,name=indicative_volume,json=indicativeVolume,proto3" json:"indicative_volume,omitempty"`
	// The current trading mode for the market
	MarketTradingMode Market_TradingMode `protobuf:"varint,19,opt,name=market_trading_mode,json=marketTradingMode,proto3,enum=vega.Market_TradingMode" json:"market_trading_mode,omitempty"`
	// When a market is in an auction trading mode, this field indicates what triggered the auction
	Trigger AuctionTrigger `protobuf:"varint,20,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
	// When a market auction is extended, this field indicates what caused the extension
	ExtensionTrigger AuctionTrigger `protobuf:"varint,21,opt,name=extension_trigger,json=extensionTrigger,proto3,enum=vega.AuctionTrigger" json:"extension_trigger,omitempty"`
	// Targeted stake for the given market
	TargetStake string `protobuf:"bytes,22,opt,name=target_stake,json=targetStake,proto3" json:"target_stake,omitempty"`
	// Available stake for the given market
	SuppliedStake string `protobuf:"bytes,23,opt,name=supplied_stake,json=suppliedStake,proto3" json:"supplied_stake,omitempty"`
	// One or more price monitoring bounds for the current timestamp
	PriceMonitoringBounds []*PriceMonitoringBounds `protobuf:"bytes,24,rep,name=price_monitoring_bounds,json=priceMonitoringBounds,proto3" json:"price_monitoring_bounds,omitempty"`
	// the market value proxy
	MarketValueProxy string `protobuf:"bytes,25,opt,name=market_value_proxy,json=marketValueProxy,proto3" json:"market_value_proxy,omitempty"`
	// the equity like share of liquidity fee for each liquidity provider
	LiquidityProviderFeeShare []*LiquidityProviderFeeShare `protobuf:"bytes,26,rep,name=liquidity_provider_fee_share,json=liquidityProviderFeeShare,proto3" json:"liquidity_provider_fee_share,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                     `json:"-"`
	XXX_unrecognized          []byte                       `json:"-"`
	XXX_sizecache             int32                        `json:"-"`
}

func (m *MarketData) Reset()         { *m = MarketData{} }
func (m *MarketData) String() string { return proto.CompactTextString(m) }
func (*MarketData) ProtoMessage()    {}
func (*MarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{32}
}

func (m *MarketData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketData.Unmarshal(m, b)
}
func (m *MarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketData.Marshal(b, m, deterministic)
}
func (m *MarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketData.Merge(m, src)
}
func (m *MarketData) XXX_Size() int {
	return xxx_messageInfo_MarketData.Size(m)
}
func (m *MarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketData.DiscardUnknown(m)
}

var xxx_messageInfo_MarketData proto.InternalMessageInfo

func (m *MarketData) GetMarkPrice() uint64 {
	if m != nil {
		return m.MarkPrice
	}
	return 0
}

func (m *MarketData) GetBestBidPrice() uint64 {
	if m != nil {
		return m.BestBidPrice
	}
	return 0
}

func (m *MarketData) GetBestBidVolume() uint64 {
	if m != nil {
		return m.BestBidVolume
	}
	return 0
}

func (m *MarketData) GetBestOfferPrice() uint64 {
	if m != nil {
		return m.BestOfferPrice
	}
	return 0
}

func (m *MarketData) GetBestOfferVolume() uint64 {
	if m != nil {
		return m.BestOfferVolume
	}
	return 0
}

func (m *MarketData) GetBestStaticBidPrice() uint64 {
	if m != nil {
		return m.BestStaticBidPrice
	}
	return 0
}

func (m *MarketData) GetBestStaticBidVolume() uint64 {
	if m != nil {
		return m.BestStaticBidVolume
	}
	return 0
}

func (m *MarketData) GetBestStaticOfferPrice() uint64 {
	if m != nil {
		return m.BestStaticOfferPrice
	}
	return 0
}

func (m *MarketData) GetBestStaticOfferVolume() uint64 {
	if m != nil {
		return m.BestStaticOfferVolume
	}
	return 0
}

func (m *MarketData) GetMidPrice() uint64 {
	if m != nil {
		return m.MidPrice
	}
	return 0
}

func (m *MarketData) GetStaticMidPrice() uint64 {
	if m != nil {
		return m.StaticMidPrice
	}
	return 0
}

func (m *MarketData) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *MarketData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MarketData) GetOpenInterest() uint64 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *MarketData) GetAuctionEnd() int64 {
	if m != nil {
		return m.AuctionEnd
	}
	return 0
}

func (m *MarketData) GetAuctionStart() int64 {
	if m != nil {
		return m.AuctionStart
	}
	return 0
}

func (m *MarketData) GetIndicativePrice() uint64 {
	if m != nil {
		return m.IndicativePrice
	}
	return 0
}

func (m *MarketData) GetIndicativeVolume() uint64 {
	if m != nil {
		return m.IndicativeVolume
	}
	return 0
}

func (m *MarketData) GetMarketTradingMode() Market_TradingMode {
	if m != nil {
		return m.MarketTradingMode
	}
	return Market_TRADING_MODE_UNSPECIFIED
}

func (m *MarketData) GetTrigger() AuctionTrigger {
	if m != nil {
		return m.Trigger
	}
	return AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

func (m *MarketData) GetExtensionTrigger() AuctionTrigger {
	if m != nil {
		return m.ExtensionTrigger
	}
	return AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

func (m *MarketData) GetTargetStake() string {
	if m != nil {
		return m.TargetStake
	}
	return ""
}

func (m *MarketData) GetSuppliedStake() string {
	if m != nil {
		return m.SuppliedStake
	}
	return ""
}

func (m *MarketData) GetPriceMonitoringBounds() []*PriceMonitoringBounds {
	if m != nil {
		return m.PriceMonitoringBounds
	}
	return nil
}

func (m *MarketData) GetMarketValueProxy() string {
	if m != nil {
		return m.MarketValueProxy
	}
	return ""
}

func (m *MarketData) GetLiquidityProviderFeeShare() []*LiquidityProviderFeeShare {
	if m != nil {
		return m.LiquidityProviderFeeShare
	}
	return nil
}

// The equity like share of liquidity fee for each liquidity provider
type LiquidityProviderFeeShare struct {
	// The liquidity provider party id
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// The share own by this liquidity provider (float)
	EquityLikeShare string `protobuf:"bytes,2,opt,name=equity_like_share,json=equityLikeShare,proto3" json:"equity_like_share,omitempty"`
	// The average entry valuation of the liquidity provider for the market
	AverageEntryValuation string   `protobuf:"bytes,3,opt,name=average_entry_valuation,json=averageEntryValuation,proto3" json:"average_entry_valuation,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *LiquidityProviderFeeShare) Reset()         { *m = LiquidityProviderFeeShare{} }
func (m *LiquidityProviderFeeShare) String() string { return proto.CompactTextString(m) }
func (*LiquidityProviderFeeShare) ProtoMessage()    {}
func (*LiquidityProviderFeeShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{33}
}

func (m *LiquidityProviderFeeShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiquidityProviderFeeShare.Unmarshal(m, b)
}
func (m *LiquidityProviderFeeShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiquidityProviderFeeShare.Marshal(b, m, deterministic)
}
func (m *LiquidityProviderFeeShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProviderFeeShare.Merge(m, src)
}
func (m *LiquidityProviderFeeShare) XXX_Size() int {
	return xxx_messageInfo_LiquidityProviderFeeShare.Size(m)
}
func (m *LiquidityProviderFeeShare) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProviderFeeShare.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProviderFeeShare proto.InternalMessageInfo

func (m *LiquidityProviderFeeShare) GetParty() string {
	if m != nil {
		return m.Party
	}
	return ""
}

func (m *LiquidityProviderFeeShare) GetEquityLikeShare() string {
	if m != nil {
		return m.EquityLikeShare
	}
	return ""
}

func (m *LiquidityProviderFeeShare) GetAverageEntryValuation() string {
	if m != nil {
		return m.AverageEntryValuation
	}
	return ""
}

// Represents a list of valid (at the current timestamp) price ranges per associated trigger
type PriceMonitoringBounds struct {
	// Minimum price that isn't currently breaching the specified price monitoring trigger
	MinValidPrice uint64 `protobuf:"varint,1,opt,name=min_valid_price,json=minValidPrice,proto3" json:"min_valid_price,omitempty"`
	// Maximum price that isn't currently breaching the specified price monitoring trigger
	MaxValidPrice uint64 `protobuf:"varint,2,opt,name=max_valid_price,json=maxValidPrice,proto3" json:"max_valid_price,omitempty"`
	// Price monitoring trigger associated with the bounds
	Trigger *PriceMonitoringTrigger `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// Reference price used to calculate the valid price range
	ReferencePrice       float64  `protobuf:"fixed64,4,opt,name=reference_price,json=referencePrice,proto3" json:"reference_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceMonitoringBounds) Reset()         { *m = PriceMonitoringBounds{} }
func (m *PriceMonitoringBounds) String() string { return proto.CompactTextString(m) }
func (*PriceMonitoringBounds) ProtoMessage()    {}
func (*PriceMonitoringBounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{34}
}

func (m *PriceMonitoringBounds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceMonitoringBounds.Unmarshal(m, b)
}
func (m *PriceMonitoringBounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceMonitoringBounds.Marshal(b, m, deterministic)
}
func (m *PriceMonitoringBounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceMonitoringBounds.Merge(m, src)
}
func (m *PriceMonitoringBounds) XXX_Size() int {
	return xxx_messageInfo_PriceMonitoringBounds.Size(m)
}
func (m *PriceMonitoringBounds) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceMonitoringBounds.DiscardUnknown(m)
}

var xxx_messageInfo_PriceMonitoringBounds proto.InternalMessageInfo

func (m *PriceMonitoringBounds) GetMinValidPrice() uint64 {
	if m != nil {
		return m.MinValidPrice
	}
	return 0
}

func (m *PriceMonitoringBounds) GetMaxValidPrice() uint64 {
	if m != nil {
		return m.MaxValidPrice
	}
	return 0
}

func (m *PriceMonitoringBounds) GetTrigger() *PriceMonitoringTrigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *PriceMonitoringBounds) GetReferencePrice() float64 {
	if m != nil {
		return m.ReferencePrice
	}
	return 0
}

// Represents Vega domain specific error information over gRPC/Protobuf
type ErrorDetail struct {
	// A Vega API domain specific unique error code, useful for client side mappings, e.g. 10004
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message that describes the error in more detail, should describe the problem encountered
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Any inner error information that could add more context, or be helpful for error reporting
	Inner                string   `protobuf:"bytes,3,opt,name=inner,proto3" json:"inner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorDetail) Reset()         { *m = ErrorDetail{} }
func (m *ErrorDetail) String() string { return proto.CompactTextString(m) }
func (*ErrorDetail) ProtoMessage()    {}
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{35}
}

func (m *ErrorDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorDetail.Unmarshal(m, b)
}
func (m *ErrorDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorDetail.Marshal(b, m, deterministic)
}
func (m *ErrorDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorDetail.Merge(m, src)
}
func (m *ErrorDetail) XXX_Size() int {
	return xxx_messageInfo_ErrorDetail.Size(m)
}
func (m *ErrorDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorDetail proto.InternalMessageInfo

func (m *ErrorDetail) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorDetail) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorDetail) GetInner() string {
	if m != nil {
		return m.Inner
	}
	return ""
}

// Represents a transaction to be sent to Vega
type Transaction struct {
	// One of the set of Vega commands (proto marshalled)
	InputData []byte `protobuf:"bytes,1,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// A random number used to provide uniqueness and prevent against replay attack
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The block height associated to the transaction, this should always be current block height
	// of the node at the time of sending the Tx and block height is used as a mechanism
	// for replay protection
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The sender of the transaction,
	// any of the following would be valid:
	//
	// Types that are valid to be assigned to From:
	//	*Transaction_Address
	//	*Transaction_PubKey
	From                 isTransaction_From `protobuf_oneof:"from"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{36}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetInputData() []byte {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type isTransaction_From interface {
	isTransaction_From()
}

type Transaction_Address struct {
	Address []byte `protobuf:"bytes,1001,opt,name=address,proto3,oneof"`
}

type Transaction_PubKey struct {
	PubKey []byte `protobuf:"bytes,1002,opt,name=pub_key,json=pubKey,proto3,oneof"`
}

func (*Transaction_Address) isTransaction_From() {}

func (*Transaction_PubKey) isTransaction_From() {}

func (m *Transaction) GetFrom() isTransaction_From {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetAddress() []byte {
	if x, ok := m.GetFrom().(*Transaction_Address); ok {
		return x.Address
	}
	return nil
}

func (m *Transaction) GetPubKey() []byte {
	if x, ok := m.GetFrom().(*Transaction_PubKey); ok {
		return x.PubKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Transaction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Transaction_Address)(nil),
		(*Transaction_PubKey)(nil),
	}
}

// A signature to be authenticate a transaction
// and to be verified by the vega network
type Signature struct {
	// The bytes of the signature
	Sig []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	// The algorithm used to create the signature
	Algo string `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
	// The version of the signature used to create the signature
	Version              uint32   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{37}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Signature) GetAlgo() string {
	if m != nil {
		return m.Algo
	}
	return ""
}

func (m *Signature) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// A bundle of a transaction and it's signature
type SignedBundle struct {
	// Transaction payload (proto marshalled)
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The signature authenticating the transaction
	Sig                  *Signature `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SignedBundle) Reset()         { *m = SignedBundle{} }
func (m *SignedBundle) String() string { return proto.CompactTextString(m) }
func (*SignedBundle) ProtoMessage()    {}
func (*SignedBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{38}
}

func (m *SignedBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedBundle.Unmarshal(m, b)
}
func (m *SignedBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedBundle.Marshal(b, m, deterministic)
}
func (m *SignedBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBundle.Merge(m, src)
}
func (m *SignedBundle) XXX_Size() int {
	return xxx_messageInfo_SignedBundle.Size(m)
}
func (m *SignedBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBundle.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBundle proto.InternalMessageInfo

func (m *SignedBundle) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SignedBundle) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// Represents a network parameter on Vega
type NetworkParameter struct {
	// The unique key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value for the network parameter
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkParameter) Reset()         { *m = NetworkParameter{} }
func (m *NetworkParameter) String() string { return proto.CompactTextString(m) }
func (*NetworkParameter) ProtoMessage()    {}
func (*NetworkParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{39}
}

func (m *NetworkParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkParameter.Unmarshal(m, b)
}
func (m *NetworkParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkParameter.Marshal(b, m, deterministic)
}
func (m *NetworkParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkParameter.Merge(m, src)
}
func (m *NetworkParameter) XXX_Size() int {
	return xxx_messageInfo_NetworkParameter.Size(m)
}
func (m *NetworkParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkParameter.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkParameter proto.InternalMessageInfo

func (m *NetworkParameter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NetworkParameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Represents a liquidity order
type LiquidityOrder struct {
	// The pegged reference point for the order
	Reference PeggedReference `protobuf:"varint,1,opt,name=reference,proto3,enum=vega.PeggedReference" json:"reference,omitempty"`
	// The relative proportion of the commitment to be allocated at a price level
	Proportion uint32 `protobuf:"varint,2,opt,name=proportion,proto3" json:"proportion,omitempty"`
	// The offset/amount of units away for the order
	Offset               int64    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiquidityOrder) Reset()         { *m = LiquidityOrder{} }
func (m *LiquidityOrder) String() string { return proto.CompactTextString(m) }
func (*LiquidityOrder) ProtoMessage()    {}
func (*LiquidityOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{40}
}

func (m *LiquidityOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiquidityOrder.Unmarshal(m, b)
}
func (m *LiquidityOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiquidityOrder.Marshal(b, m, deterministic)
}
func (m *LiquidityOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityOrder.Merge(m, src)
}
func (m *LiquidityOrder) XXX_Size() int {
	return xxx_messageInfo_LiquidityOrder.Size(m)
}
func (m *LiquidityOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityOrder.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityOrder proto.InternalMessageInfo

func (m *LiquidityOrder) GetReference() PeggedReference {
	if m != nil {
		return m.Reference
	}
	return PeggedReference_PEGGED_REFERENCE_UNSPECIFIED
}

func (m *LiquidityOrder) GetProportion() uint32 {
	if m != nil {
		return m.Proportion
	}
	return 0
}

func (m *LiquidityOrder) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// A pair of a liquidity order and the id of the generated order by the core
type LiquidityOrderReference struct {
	// Unique identifier of the pegged order generated by the core to fulfil this liquidity order
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// The liquidity order from the original submission
	LiquidityOrder       *LiquidityOrder `protobuf:"bytes,2,opt,name=liquidity_order,json=liquidityOrder,proto3" json:"liquidity_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LiquidityOrderReference) Reset()         { *m = LiquidityOrderReference{} }
func (m *LiquidityOrderReference) String() string { return proto.CompactTextString(m) }
func (*LiquidityOrderReference) ProtoMessage()    {}
func (*LiquidityOrderReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{41}
}

func (m *LiquidityOrderReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiquidityOrderReference.Unmarshal(m, b)
}
func (m *LiquidityOrderReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiquidityOrderReference.Marshal(b, m, deterministic)
}
func (m *LiquidityOrderReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityOrderReference.Merge(m, src)
}
func (m *LiquidityOrderReference) XXX_Size() int {
	return xxx_messageInfo_LiquidityOrderReference.Size(m)
}
func (m *LiquidityOrderReference) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityOrderReference.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityOrderReference proto.InternalMessageInfo

func (m *LiquidityOrderReference) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *LiquidityOrderReference) GetLiquidityOrder() *LiquidityOrder {
	if m != nil {
		return m.LiquidityOrder
	}
	return nil
}

// An Liquidity provider commitment
type LiquidityProvision struct {
	// Unique identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique party identifier for the creator of the provision
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Timestamp for when the order was created at, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for when the order was updated at, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	UpdatedAt int64 `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Market identifier for the order, required field
	MarketId string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Specified as a unitless number that represents the amount of settlement asset of the market
	CommitmentAmount uint64 `protobuf:"varint,6,opt,name=commitment_amount,json=commitmentAmount,proto3" json:"commitment_amount,omitempty"`
	// Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers
	Fee string `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
	// A set of liquidity sell orders to meet the liquidity provision obligation
	Sells []*LiquidityOrderReference `protobuf:"bytes,8,rep,name=sells,proto3" json:"sells,omitempty"`
	// A set of liquidity buy orders to meet the liquidity provision obligation
	Buys []*LiquidityOrderReference `protobuf:"bytes,9,rep,name=buys,proto3" json:"buys,omitempty"`
	// Version of this liquidity provision order
	Version string `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// Status of this liquidity provision order
	Status LiquidityProvision_Status `protobuf:"varint,11,opt,name=status,proto3,enum=vega.LiquidityProvision_Status" json:"status,omitempty"`
	// A reference shared between this liquidity provision and all it's orders
	Reference            string   `protobuf:"bytes,12,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiquidityProvision) Reset()         { *m = LiquidityProvision{} }
func (m *LiquidityProvision) String() string { return proto.CompactTextString(m) }
func (*LiquidityProvision) ProtoMessage()    {}
func (*LiquidityProvision) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{42}
}

func (m *LiquidityProvision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiquidityProvision.Unmarshal(m, b)
}
func (m *LiquidityProvision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiquidityProvision.Marshal(b, m, deterministic)
}
func (m *LiquidityProvision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityProvision.Merge(m, src)
}
func (m *LiquidityProvision) XXX_Size() int {
	return xxx_messageInfo_LiquidityProvision.Size(m)
}
func (m *LiquidityProvision) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityProvision.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityProvision proto.InternalMessageInfo

func (m *LiquidityProvision) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LiquidityProvision) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *LiquidityProvision) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *LiquidityProvision) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *LiquidityProvision) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *LiquidityProvision) GetCommitmentAmount() uint64 {
	if m != nil {
		return m.CommitmentAmount
	}
	return 0
}

func (m *LiquidityProvision) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *LiquidityProvision) GetSells() []*LiquidityOrderReference {
	if m != nil {
		return m.Sells
	}
	return nil
}

func (m *LiquidityProvision) GetBuys() []*LiquidityOrderReference {
	if m != nil {
		return m.Buys
	}
	return nil
}

func (m *LiquidityProvision) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LiquidityProvision) GetStatus() LiquidityProvision_Status {
	if m != nil {
		return m.Status
	}
	return LiquidityProvision_STATUS_UNSPECIFIED
}

func (m *LiquidityProvision) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

// Ethereum configuration details
type EthereumConfig struct {
	// Network identifier of this Ethereum network
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Chain identifier of this Ethereum network
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Bridge address for this Ethereum network
	BridgeAddress string `protobuf:"bytes,3,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
	// Number of confirmations
	Confirmations        uint32   `protobuf:"varint,4,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthereumConfig) Reset()         { *m = EthereumConfig{} }
func (m *EthereumConfig) String() string { return proto.CompactTextString(m) }
func (*EthereumConfig) ProtoMessage()    {}
func (*EthereumConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b9c5664362f47a, []int{43}
}

func (m *EthereumConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthereumConfig.Unmarshal(m, b)
}
func (m *EthereumConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthereumConfig.Marshal(b, m, deterministic)
}
func (m *EthereumConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthereumConfig.Merge(m, src)
}
func (m *EthereumConfig) XXX_Size() int {
	return xxx_messageInfo_EthereumConfig.Size(m)
}
func (m *EthereumConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EthereumConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EthereumConfig proto.InternalMessageInfo

func (m *EthereumConfig) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *EthereumConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EthereumConfig) GetBridgeAddress() string {
	if m != nil {
		return m.BridgeAddress
	}
	return ""
}

func (m *EthereumConfig) GetConfirmations() uint32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func init() {
	proto.RegisterEnum("vega.Side", Side_name, Side_value)
	proto.RegisterEnum("vega.Interval", Interval_name, Interval_value)
	proto.RegisterEnum("vega.AuctionTrigger", AuctionTrigger_name, AuctionTrigger_value)
	proto.RegisterEnum("vega.PeggedReference", PeggedReference_name, PeggedReference_value)
	proto.RegisterEnum("vega.OrderError", OrderError_name, OrderError_value)
	proto.RegisterEnum("vega.ChainStatus", ChainStatus_name, ChainStatus_value)
	proto.RegisterEnum("vega.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("vega.TransferType", TransferType_name, TransferType_value)
	proto.RegisterEnum("vega.Order_TimeInForce", Order_TimeInForce_name, Order_TimeInForce_value)
	proto.RegisterEnum("vega.Order_Type", Order_Type_name, Order_Type_value)
	proto.RegisterEnum("vega.Order_Status", Order_Status_name, Order_Status_value)
	proto.RegisterEnum("vega.Trade_Type", Trade_Type_name, Trade_Type_value)
	proto.RegisterEnum("vega.Deposit_Status", Deposit_Status_name, Deposit_Status_value)
	proto.RegisterEnum("vega.Withdrawal_Status", Withdrawal_Status_name, Withdrawal_Status_value)
	proto.RegisterEnum("vega.LiquidityProvision_Status", LiquidityProvision_Status_name, LiquidityProvision_Status_value)
	proto.RegisterType((*Price)(nil), "vega.Price")
	proto.RegisterType((*Timestamp)(nil), "vega.Timestamp")
	proto.RegisterType((*Party)(nil), "vega.Party")
	proto.RegisterType((*RiskFactor)(nil), "vega.RiskFactor")
	proto.RegisterType((*RiskResult)(nil), "vega.RiskResult")
	proto.RegisterMapType((map[string]*RiskFactor)(nil), "vega.RiskResult.PredictedNextRiskFactorsEntry")
	proto.RegisterMapType((map[string]*RiskFactor)(nil), "vega.RiskResult.RiskFactorsEntry")
	proto.RegisterType((*PeggedOrder)(nil), "vega.PeggedOrder")
	proto.RegisterType((*Order)(nil), "vega.Order")
	proto.RegisterType((*OrderCancellationConfirmation)(nil), "vega.OrderCancellationConfirmation")
	proto.RegisterType((*OrderConfirmation)(nil), "vega.OrderConfirmation")
	proto.RegisterType((*AuctionIndicativeState)(nil), "vega.AuctionIndicativeState")
	proto.RegisterType((*Trade)(nil), "vega.Trade")
	proto.RegisterType((*Fee)(nil), "vega.Fee")
	proto.RegisterType((*TradeSet)(nil), "vega.TradeSet")
	proto.RegisterType((*Candle)(nil), "vega.Candle")
	proto.RegisterType((*PriceLevel)(nil), "vega.PriceLevel")
	proto.RegisterType((*MarketDepth)(nil), "vega.MarketDepth")
	proto.RegisterType((*MarketDepthUpdate)(nil), "vega.MarketDepthUpdate")
	proto.RegisterType((*Position)(nil), "vega.Position")
	proto.RegisterType((*PositionTrade)(nil), "vega.PositionTrade")
	proto.RegisterType((*Statistics)(nil), "vega.Statistics")
	proto.RegisterType((*Deposit)(nil), "vega.Deposit")
	proto.RegisterType((*Withdrawal)(nil), "vega.Withdrawal")
	proto.RegisterType((*WithdrawExt)(nil), "vega.WithdrawExt")
	proto.RegisterType((*Erc20WithdrawExt)(nil), "vega.Erc20WithdrawExt")
	proto.RegisterType((*Account)(nil), "vega.Account")
	proto.RegisterType((*FinancialAmount)(nil), "vega.FinancialAmount")
	proto.RegisterType((*Transfer)(nil), "vega.Transfer")
	proto.RegisterType((*TransferRequest)(nil), "vega.TransferRequest")
	proto.RegisterType((*LedgerEntry)(nil), "vega.LedgerEntry")
	proto.RegisterType((*TransferBalance)(nil), "vega.TransferBalance")
	proto.RegisterType((*TransferResponse)(nil), "vega.TransferResponse")
	proto.RegisterType((*MarginLevels)(nil), "vega.MarginLevels")
	proto.RegisterType((*MarketData)(nil), "vega.MarketData")
	proto.RegisterType((*LiquidityProviderFeeShare)(nil), "vega.LiquidityProviderFeeShare")
	proto.RegisterType((*PriceMonitoringBounds)(nil), "vega.PriceMonitoringBounds")
	proto.RegisterType((*ErrorDetail)(nil), "vega.ErrorDetail")
	proto.RegisterType((*Transaction)(nil), "vega.Transaction")
	proto.RegisterType((*Signature)(nil), "vega.Signature")
	proto.RegisterType((*SignedBundle)(nil), "vega.SignedBundle")
	proto.RegisterType((*NetworkParameter)(nil), "vega.NetworkParameter")
	proto.RegisterType((*LiquidityOrder)(nil), "vega.LiquidityOrder")
	proto.RegisterType((*LiquidityOrderReference)(nil), "vega.LiquidityOrderReference")
	proto.RegisterType((*LiquidityProvision)(nil), "vega.LiquidityProvision")
	proto.RegisterType((*EthereumConfig)(nil), "vega.EthereumConfig")
}

func init() { proto.RegisterFile("vega.proto", fileDescriptor_54b9c5664362f47a) }

var fileDescriptor_54b9c5664362f47a = []byte{
	// 5430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7b, 0x4b, 0x6f, 0x23, 0x49,
	0x72, 0xf0, 0x52, 0xa4, 0x1e, 0x0c, 0xea, 0x51, 0xca, 0xd6, 0x83, 0xad, 0x7e, 0xb3, 0xa7, 0x7b,
	0x7a, 0xd4, 0xaf, 0xe9, 0xee, 0x79, 0xec, 0xb7, 0xdf, 0x2e, 0x8c, 0x12, 0x59, 0x94, 0xca, 0x4d,
	0x91, 0x9c, 0x62, 0xa9, 0x7b, 0x7b, 0x80, 0x45, 0xb9, 0x44, 0xa6, 0xa8, 0x82, 0xc8, 0x2a, 0x6e,
	0x55, 0x51, 0x2d, 0x19, 0x30, 0x60, 0x18, 0xbe, 0xf9, 0xe2, 0x8b, 0x1f, 0x97, 0x05, 0x0c, 0x2c,
	0x60, 0xf8, 0x60, 0x9f, 0x0c, 0xd8, 0x07, 0xff, 0x01, 0xfb, 0xbc, 0x80, 0x0f, 0xb6, 0x01, 0x1b,
	0x0b, 0x5f, 0xd6, 0x27, 0x1f, 0x7d, 0xf0, 0xc1, 0x88, 0xc8, 0xac, 0x62, 0x55, 0x91, 0xea, 0xd9,
	0xc1, 0xc0, 0x80, 0x4f, 0x62, 0xc6, 0x2b, 0x23, 0x23, 0x23, 0x23, 0x22, 0xa3, 0x52, 0x00, 0xe7,
	0xbc, 0x6f, 0x3f, 0x1b, 0xf9, 0x5e, 0xe8, 0xb1, 0x02, 0xfe, 0xde, 0xf9, 0xa2, 0xef, 0x84, 0xa7,
	0xe3, 0xe3, 0x67, 0x5d, 0x6f, 0xf8, 0x7c, 0xf8, 0xde, 0x09, 0xcf, 0xbc, 0xf7, 0xcf, 0xfb, 0xde,
	0x53, 0x22, 0x79, 0x7a, 0x6e, 0x0f, 0x9c, 0x9e, 0x1d, 0x7a, 0x7e, 0xf0, 0x3c, 0xfe, 0x29, 0xb8,
	0x77, 0x56, 0x86, 0xb6, 0x7f, 0xc6, 0xc3, 0x40, 0x0c, 0x2b, 0xb7, 0x60, 0xbe, 0xed, 0x3b, 0x5d,
	0xce, 0x36, 0x60, 0xfe, 0xdc, 0x1e, 0x8c, 0x79, 0x39, 0x77, 0x37, 0xf7, 0xa8, 0x60, 0x88, 0x41,
	0xe5, 0x1e, 0x14, 0x4d, 0x67, 0xc8, 0x83, 0xd0, 0x1e, 0x8e, 0xd2, 0x24, 0xf9, 0x88, 0xe4, 0x0e,
	0xcc, 0xb7, 0x6d, 0x3f, 0xbc, 0x64, 0x5b, 0x30, 0xe7, 0xf4, 0x08, 0x57, 0xdc, 0x5b, 0xf8, 0xe5,
	0xbf, 0xde, 0x99, 0xbb, 0x9b, 0x33, 0xe6, 0x9c, 0x5e, 0xa5, 0x09, 0x60, 0x38, 0xc1, 0x59, 0xdd,
	0xee, 0x86, 0x9e, 0xcf, 0xb6, 0x60, 0x41, 0x68, 0x20, 0x28, 0x0d, 0x39, 0x42, 0xe1, 0xc1, 0xa9,
	0xe7, 0x87, 0xe5, 0xb9, 0xbb, 0xb9, 0x47, 0x39, 0x43, 0x0c, 0x18, 0x83, 0xc2, 0xc0, 0x73, 0xfb,
	0xe5, 0x3c, 0x01, 0xe9, 0x77, 0xe5, 0x17, 0x79, 0x21, 0xd0, 0xe0, 0xc1, 0x78, 0x10, 0xb2, 0xc7,
	0xb0, 0x3e, 0x1e, 0xf5, 0xec, 0x90, 0xf7, 0xac, 0x30, 0x52, 0x55, 0x6a, 0xa8, 0x48, 0xc4, 0x64,
	0x09, 0x35, 0x58, 0xf6, 0x9d, 0xe0, 0xcc, 0x3a, 0x21, 0x65, 0x82, 0xf2, 0xdc, 0xdd, 0xfc, 0xa3,
	0xd2, 0xcb, 0x7b, 0xcf, 0xc8, 0xbc, 0x13, 0xa1, 0xcf, 0x26, 0x0a, 0x07, 0x9a, 0x1b, 0xfa, 0x97,
	0x46, 0xc9, 0x9f, 0x40, 0xd8, 0x4b, 0xd8, 0x74, 0xf9, 0x45, 0x68, 0x09, 0xf1, 0x89, 0x69, 0xf3,
	0x34, 0xed, 0x35, 0x44, 0x1e, 0x11, 0x6e, 0x32, 0xf3, 0x10, 0x6e, 0x8c, 0x7c, 0xde, 0x73, 0xba,
	0xa8, 0x28, 0x71, 0xa7, 0x14, 0x29, 0x90, 0x22, 0xcf, 0xa6, 0x14, 0x69, 0x47, 0x3c, 0x4d, 0x7e,
	0x11, 0x4e, 0x69, 0x55, 0x1e, 0x5d, 0x81, 0xde, 0x69, 0x83, 0x92, 0xa5, 0x66, 0x0a, 0xe4, 0xcf,
	0xf8, 0xa5, 0xb4, 0x3b, 0xfe, 0x64, 0x0f, 0xa3, 0x1d, 0x45, 0xa3, 0x97, 0x5e, 0x2a, 0x93, 0xe9,
	0x05, 0xa3, 0xdc, 0xe3, 0x1f, 0xcc, 0x7d, 0x3f, 0xb7, 0xf3, 0x13, 0xb8, 0xf5, 0x41, 0x65, 0xbe,
	0x9b, 0xf8, 0xca, 0xd7, 0x50, 0x6a, 0xf3, 0x7e, 0x9f, 0xf7, 0x5a, 0x7e, 0x8f, 0xfb, 0xec, 0x15,
	0x14, 0x7d, 0x7e, 0xc2, 0x7d, 0xee, 0x76, 0x85, 0xbf, 0xad, 0xbe, 0xdc, 0x14, 0xec, 0x82, 0xca,
	0x88, 0x90, 0xc6, 0x84, 0x0e, 0x7d, 0xcb, 0x3b, 0x39, 0x09, 0xb8, 0x70, 0xa2, 0xbc, 0x21, 0x47,
	0x95, 0x5f, 0x2e, 0xc1, 0xbc, 0x10, 0xbb, 0x3a, 0xf1, 0x51, 0xf4, 0x4d, 0x76, 0x03, 0x8a, 0xc2,
	0xff, 0x2c, 0xa7, 0x47, 0x4c, 0x45, 0x63, 0x49, 0x00, 0xf4, 0x1e, 0xbb, 0x0e, 0x4b, 0x23, 0xf4,
	0x6c, 0xc4, 0xe5, 0x09, 0xb7, 0x48, 0x63, 0xbd, 0xc7, 0x6e, 0x43, 0x21, 0x70, 0x7a, 0xbc, 0x5c,
	0x20, 0xcd, 0x40, 0x68, 0xd6, 0x71, 0x7a, 0xdc, 0x20, 0x38, 0x7a, 0xf3, 0x08, 0x8f, 0x55, 0x79,
	0x5e, 0x9c, 0x26, 0x1a, 0xa0, 0x37, 0x07, 0xce, 0x6f, 0xf3, 0xf2, 0x02, 0x01, 0xe9, 0x37, 0xbb,
	0x89, 0x0b, 0x1d, 0xda, 0x8e, 0xeb, 0xb8, 0xfd, 0xf2, 0x22, 0x21, 0x26, 0x00, 0xf6, 0xff, 0x61,
	0x05, 0xbd, 0xcb, 0x72, 0x5c, 0xeb, 0xc4, 0xf3, 0xbb, 0xbc, 0xbc, 0x44, 0x13, 0x6e, 0x8b, 0x09,
	0x69, 0x4d, 0xcf, 0xd0, 0xc7, 0x74, 0xb7, 0x8e, 0x68, 0xa3, 0x14, 0x4e, 0x06, 0xec, 0x23, 0x28,
	0x84, 0x97, 0x23, 0x5e, 0x2e, 0x12, 0x8f, 0x92, 0xe2, 0xb9, 0x1c, 0x71, 0x83, 0xb0, 0xec, 0x16,
	0x40, 0xd7, 0xe7, 0x74, 0x7e, 0xec, 0xb0, 0x0c, 0x64, 0xb8, 0xa2, 0x84, 0xa8, 0x21, 0xdb, 0x85,
	0x85, 0x20, 0xb4, 0xc3, 0x71, 0x50, 0x2e, 0x91, 0x18, 0x96, 0x14, 0xd3, 0x21, 0x8c, 0x21, 0x29,
	0x50, 0x14, 0xbf, 0x18, 0x39, 0x3e, 0x0f, 0x50, 0xd4, 0xb2, 0x10, 0x25, 0x21, 0x6a, 0x28, 0x96,
	0x1a, 0xed, 0xe9, 0x0a, 0x19, 0x34, 0xb1, 0x79, 0x8f, 0x60, 0xc1, 0xe7, 0x76, 0xe0, 0xb9, 0xe5,
	0xd5, 0x29, 0x7d, 0x35, 0xdf, 0xf7, 0x7c, 0x43, 0xe2, 0x71, 0x9a, 0xe8, 0xc4, 0xdb, 0x61, 0x79,
	0x4d, 0x4c, 0x23, 0x21, 0x6a, 0xc8, 0xca, 0xb0, 0x78, 0xce, 0xfd, 0xc0, 0xf1, 0xdc, 0xb2, 0x42,
	0xf6, 0x8c, 0x86, 0xb8, 0xa1, 0xc7, 0x76, 0xd8, 0x3d, 0xc5, 0x0d, 0x5d, 0x17, 0x28, 0x1a, 0xeb,
	0x3d, 0xf6, 0x19, 0x2c, 0x8f, 0xc8, 0xb1, 0x2c, 0x0f, 0x27, 0x2c, 0x33, 0xf2, 0xd8, 0xf5, 0xa4,
	0xcb, 0x91, 0x26, 0x46, 0x69, 0x94, 0xf0, 0xd2, 0xcf, 0x60, 0x6b, 0xe0, 0xfc, 0x74, 0xec, 0xf4,
	0x9c, 0xf0, 0xd2, 0x1a, 0xf9, 0xde, 0xb9, 0x83, 0xf3, 0xa0, 0xf8, 0x6b, 0xb4, 0xbc, 0x8d, 0x18,
	0xdb, 0x8e, 0x90, 0x7a, 0xaf, 0xf2, 0x37, 0x39, 0x28, 0x25, 0x36, 0x8d, 0xdd, 0x82, 0xeb, 0xa6,
	0x7e, 0xa8, 0x59, 0x7a, 0xd3, 0xaa, 0xb7, 0x8c, 0xaa, 0x66, 0x1d, 0x35, 0x3b, 0x6d, 0xad, 0xaa,
	0xd7, 0x75, 0xad, 0xa6, 0x7c, 0x8f, 0x6d, 0xc2, 0x7a, 0x1a, 0xbd, 0x6f, 0x56, 0x95, 0xdc, 0x2c,
	0xb0, 0xa9, 0xcc, 0x4d, 0x83, 0xf5, 0x56, 0x55, 0xc9, 0x4f, 0x83, 0xeb, 0xad, 0xd7, 0x4a, 0x61,
	0x86, 0x90, 0xba, 0xaa, 0xcc, 0xcf, 0x02, 0x37, 0x95, 0x85, 0x4a, 0x0b, 0x0a, 0xe8, 0x38, 0x6c,
	0x03, 0x14, 0xf3, 0x5d, 0x3b, 0xab, 0xe7, 0x2a, 0x00, 0x41, 0x1b, 0xfa, 0xa1, 0x6e, 0x2a, 0x39,
	0xb6, 0x06, 0x25, 0x1a, 0x1f, 0xaa, 0xc6, 0x6b, 0x0d, 0x55, 0x53, 0x60, 0x99, 0x00, 0x4d, 0xcd,
	0x7c, 0xdb, 0x32, 0x5e, 0x2b, 0xf9, 0xca, 0x3f, 0xe4, 0x60, 0x41, 0xf8, 0x10, 0xdb, 0x02, 0xd6,
	0x31, 0x55, 0xf3, 0xa8, 0x93, 0x91, 0xba, 0x0e, 0x2b, 0x12, 0xae, 0x56, 0x4d, 0xfd, 0x8d, 0xa6,
	0xe4, 0x18, 0x83, 0x55, 0x09, 0xd2, 0x7e, 0xdc, 0xd6, 0x0d, 0xad, 0xa6, 0xcc, 0xa1, 0x4a, 0x12,
	0x56, 0x55, 0x9b, 0x55, 0xad, 0xd1, 0xd0, 0x6a, 0x4a, 0x3e, 0x41, 0xd9, 0x31, 0x5b, 0xed, 0xb6,
	0x56, 0x53, 0x0a, 0x09, 0x81, 0x75, 0x9d, 0xc8, 0xe6, 0xd9, 0x35, 0x58, 0x93, 0x20, 0x43, 0xfb,
	0x4d, 0xad, 0x6a, 0x6a, 0x35, 0x65, 0x81, 0xdd, 0x80, 0x6d, 0x09, 0x6c, 0xab, 0x86, 0xa9, 0xab,
	0x8d, 0xc6, 0xbb, 0x88, 0x63, 0x31, 0x21, 0xa4, 0x8d, 0xab, 0xab, 0x29, 0x4b, 0x95, 0x3d, 0xb8,
	0x45, 0x4e, 0x51, 0xb5, 0xdd, 0x2e, 0x1f, 0x0c, 0xec, 0xd0, 0xf1, 0xdc, 0xaa, 0xe7, 0x9e, 0x38,
	0xfe, 0x90, 0x7e, 0xb3, 0x7b, 0x30, 0x2f, 0x7c, 0x2b, 0x47, 0xbe, 0x55, 0x4a, 0xf8, 0xb7, 0x21,
	0x30, 0x95, 0x3f, 0xcb, 0xc1, 0xba, 0x10, 0xf2, 0xed, 0x18, 0xd9, 0x7d, 0x58, 0x08, 0x7d, 0xbb,
	0xc7, 0xa3, 0x8c, 0x26, 0x69, 0x4c, 0x84, 0x19, 0x12, 0xc5, 0xaa, 0xb0, 0x3d, 0xb2, 0x83, 0xc0,
	0x39, 0xe7, 0xc2, 0xc9, 0x03, 0xcb, 0x3e, 0x39, 0xe1, 0x18, 0xcf, 0xcb, 0xf9, 0x24, 0x97, 0x90,
	0xbc, 0x29, 0x69, 0x69, 0x14, 0xa8, 0x92, 0xb2, 0xf2, 0x8b, 0x1c, 0x6c, 0xa9, 0xe3, 0x2e, 0x2a,
	0xa6, 0xbb, 0x3d, 0xa7, 0x6b, 0x87, 0xce, 0x39, 0xc7, 0x3d, 0xe4, 0xe9, 0x60, 0x9a, 0xcb, 0x04,
	0xd3, 0x4f, 0x40, 0x71, 0x62, 0x7a, 0x4b, 0x04, 0xc7, 0x39, 0x3a, 0x83, 0x6b, 0x13, 0xb8, 0x28,
	0x45, 0x1e, 0xc3, 0x7a, 0x82, 0xf4, 0xdc, 0x1b, 0x8c, 0x87, 0x9c, 0x02, 0x70, 0xc1, 0x48, 0xc8,
	0x78, 0x43, 0x70, 0x76, 0x1f, 0x56, 0x6c, 0xa1, 0x8e, 0x15, 0x84, 0xb6, 0x1f, 0x52, 0x48, 0xce,
	0x1b, 0xcb, 0x12, 0xd8, 0x41, 0x18, 0xbb, 0x03, 0xa5, 0x88, 0x88, 0xbb, 0x3d, 0x0a, 0xca, 0x79,
	0x03, 0x24, 0x48, 0x73, 0x7b, 0x95, 0x7f, 0x2e, 0xc0, 0x3c, 0x19, 0xeb, 0xdb, 0x65, 0x88, 0x38,
	0xcc, 0xe7, 0x67, 0x85, 0xf9, 0x42, 0x22, 0xcc, 0x6f, 0xc0, 0xfc, 0xf1, 0xf8, 0x92, 0xfb, 0x34,
	0x77, 0xd1, 0x10, 0x03, 0x4c, 0x58, 0x01, 0x1f, 0x0c, 0xb8, 0x4f, 0x29, 0xa1, 0x68, 0xc8, 0x11,
	0x7b, 0x04, 0x45, 0xbb, 0xdf, 0xf7, 0x79, 0x10, 0x78, 0x3e, 0x25, 0x85, 0x74, 0x8e, 0x99, 0x20,
	0x51, 0xbd, 0xe3, 0xf1, 0xa5, 0x0c, 0x5a, 0x4b, 0x42, 0xbd, 0xe3, 0xf1, 0xa5, 0x08, 0x4f, 0xb7,
	0x00, 0x50, 0xa0, 0xc4, 0x16, 0x45, 0xc4, 0x45, 0x88, 0x40, 0xdf, 0x84, 0xe2, 0xa4, 0x74, 0x91,
	0x81, 0x3f, 0x06, 0xc4, 0xd9, 0xa3, 0x94, 0x8c, 0xc6, 0x64, 0xa3, 0x64, 0xf6, 0x78, 0x48, 0xf3,
	0x73, 0xdf, 0x3a, 0xe1, 0x9c, 0x22, 0x7e, 0xe9, 0x65, 0x51, 0x90, 0xd6, 0x39, 0x27, 0x55, 0xb8,
	0x5f, 0xe7, 0x18, 0xdd, 0x41, 0xac, 0x8d, 0x08, 0x57, 0xb2, 0x84, 0x45, 0x81, 0x44, 0xca, 0x67,
	0x70, 0x4d, 0x48, 0x8c, 0x76, 0x8c, 0x42, 0x34, 0x25, 0x85, 0x82, 0xb1, 0x4e, 0x28, 0xe9, 0x7f,
	0x7b, 0x88, 0x60, 0x9f, 0xc2, 0x86, 0x94, 0x9c, 0x66, 0x58, 0x23, 0x06, 0x26, 0x70, 0x49, 0x8e,
	0x8a, 0xf7, 0xc1, 0x30, 0x16, 0x45, 0xa9, 0x9a, 0x56, 0x57, 0x8f, 0x1a, 0x18, 0xc8, 0xee, 0xc0,
	0x8d, 0x64, 0xdc, 0xb2, 0xaa, 0x8d, 0x56, 0x47, 0xb3, 0x5a, 0x47, 0xa6, 0xb5, 0xdf, 0x6a, 0x61,
	0xf0, 0xb9, 0x0d, 0x3b, 0x57, 0x10, 0xec, 0xa9, 0x35, 0x25, 0x5f, 0x39, 0x87, 0x3c, 0xae, 0x8c,
	0x5c, 0xe9, 0x4c, 0x9a, 0x40, 0x94, 0xd9, 0x4b, 0x04, 0x40, 0xe4, 0x53, 0x60, 0x8e, 0x7b, 0xe2,
	0xdb, 0x41, 0xe8, 0x8f, 0xbb, 0xe1, 0xd8, 0xe7, 0x44, 0x25, 0x4e, 0xc8, 0x7a, 0x1a, 0x83, 0xe4,
	0xf7, 0x61, 0x65, 0x92, 0x79, 0x90, 0x52, 0x78, 0xe0, 0x72, 0x0c, 0xac, 0x73, 0x5e, 0x79, 0x0e,
	0x4b, 0xb4, 0x61, 0x1d, 0x1e, 0x26, 0x22, 0x44, 0xee, 0xca, 0x08, 0x51, 0xf9, 0xc7, 0x1c, 0x2c,
	0x54, 0x6d, 0xb7, 0x37, 0xe0, 0x69, 0xe7, 0xc8, 0x65, 0x9d, 0x63, 0x07, 0x96, 0x30, 0xdd, 0x22,
	0x20, 0x3a, 0x14, 0xd1, 0x18, 0xdd, 0xff, 0xd4, 0xe9, 0x9f, 0x4a, 0x8d, 0xe8, 0x37, 0xd6, 0x86,
	0x03, 0xef, 0xbd, 0x3c, 0x11, 0xf8, 0x13, 0xa9, 0xbc, 0x11, 0x77, 0x65, 0x81, 0x44, 0xbf, 0xf1,
	0x90, 0x74, 0x07, 0x5e, 0x10, 0x15, 0x48, 0x62, 0x80, 0x87, 0x44, 0xc6, 0x00, 0x51, 0x1e, 0xc9,
	0x11, 0xdb, 0x85, 0x25, 0xc7, 0x0d, 0xb9, 0x7f, 0x6e, 0x0f, 0x64, 0x59, 0xb4, 0x2a, 0xd6, 0xa4,
	0x4b, 0xa8, 0x11, 0xe3, 0x2b, 0x3d, 0x00, 0x8a, 0x2d, 0x0d, 0x7e, 0xce, 0x07, 0x93, 0x63, 0x9b,
	0x4b, 0x1e, 0xdb, 0x47, 0xa0, 0xb8, 0xe3, 0xe1, 0x31, 0xf7, 0x2d, 0xef, 0x44, 0x06, 0x48, 0x69,
	0xff, 0x55, 0x01, 0x6f, 0x9d, 0x88, 0x58, 0x98, 0xd0, 0x28, 0x9f, 0xd4, 0xa8, 0xf2, 0xb3, 0x1c,
	0x94, 0x0e, 0x29, 0x36, 0xd4, 0xf8, 0x28, 0x3c, 0xfd, 0x70, 0x40, 0xac, 0x40, 0xfe, 0x78, 0x7c,
	0x29, 0xe3, 0xb5, 0x3c, 0x5e, 0x13, 0x1d, 0x0d, 0x44, 0xe2, 0x19, 0x44, 0xff, 0x95, 0xe1, 0x79,
	0x9a, 0x88, 0xb0, 0xec, 0x63, 0x58, 0x0b, 0xf8, 0x4f, 0xc7, 0x58, 0x45, 0x59, 0x42, 0x53, 0x69,
	0xe8, 0xd5, 0x08, 0xdc, 0x24, 0x68, 0xe5, 0xe7, 0x39, 0x58, 0x4f, 0xe8, 0x27, 0xae, 0x28, 0xff,
	0xe7, 0xb4, 0xfc, 0xef, 0x1c, 0x2c, 0xb5, 0xbd, 0xc0, 0xa1, 0xdc, 0xf7, 0x41, 0xe5, 0x92, 0x05,
	0xfa, 0x5c, 0xba, 0x40, 0xbf, 0x03, 0x25, 0x74, 0xa9, 0x64, 0xf6, 0xc8, 0x1b, 0x80, 0x20, 0x99,
	0x37, 0xee, 0xc1, 0xb2, 0xcf, 0xed, 0x81, 0x13, 0xf0, 0x9e, 0x35, 0x72, 0x07, 0x32, 0x6d, 0x94,
	0x22, 0x58, 0xdb, 0x1d, 0xb0, 0x07, 0xb0, 0x3a, 0x76, 0x53, 0x44, 0x22, 0x71, 0xac, 0x4c, 0xa0,
	0x48, 0xf6, 0x0c, 0xae, 0xd9, 0xe7, 0xdc, 0xb7, 0xfb, 0xdc, 0xe2, 0x78, 0x11, 0x92, 0xc9, 0x4d,
	0xf8, 0xf0, 0xba, 0x44, 0xd1, 0x15, 0x49, 0xa4, 0xb7, 0x74, 0xf9, 0xba, 0x98, 0x29, 0x5f, 0x2b,
	0x3f, 0x82, 0x95, 0x68, 0xf5, 0x22, 0x23, 0x4d, 0xbc, 0x4d, 0x1c, 0xc3, 0xc8, 0xff, 0x63, 0x2f,
	0x9e, 0x4b, 0x78, 0x71, 0xe5, 0x57, 0x00, 0x80, 0xe9, 0xd8, 0x09, 0x42, 0xa7, 0x1b, 0xe0, 0x32,
	0x8f, 0x07, 0x5e, 0xf7, 0xcc, 0x3a, 0xe5, 0x4e, 0xff, 0x34, 0x94, 0x1e, 0x5f, 0x22, 0xd8, 0x01,
	0x81, 0x70, 0x99, 0xc7, 0x76, 0xf7, 0x6c, 0xe0, 0xf5, 0xad, 0x01, 0x77, 0xfb, 0xe1, 0xa9, 0x14,
	0xb8, 0x22, 0xa1, 0x0d, 0x02, 0xa2, 0x45, 0x43, 0x2f, 0xb4, 0x07, 0xd6, 0x88, 0xe3, 0xc9, 0x10,
	0x9e, 0x0f, 0x04, 0x6a, 0x23, 0x04, 0xa7, 0xea, 0x73, 0x97, 0x07, 0x4e, 0x40, 0x37, 0x62, 0xb2,
	0x68, 0xd1, 0x28, 0x49, 0x18, 0x16, 0xbc, 0x48, 0xd2, 0x1d, 0xfb, 0x3e, 0x77, 0x43, 0x41, 0x22,
	0x92, 0x61, 0x49, 0xc2, 0x88, 0xe4, 0x06, 0x14, 0xd1, 0x7f, 0x04, 0x5e, 0x64, 0xc5, 0x25, 0x04,
	0x10, 0xf2, 0x93, 0xf8, 0x32, 0x22, 0x92, 0xa2, 0xac, 0xcf, 0xab, 0xa7, 0xb6, 0xe3, 0x66, 0xee,
	0x22, 0x77, 0x61, 0x39, 0xbc, 0xb0, 0x46, 0xdc, 0xb7, 0x68, 0xad, 0x14, 0x21, 0x50, 0xdf, 0x8b,
	0x36, 0xf7, 0xf7, 0x10, 0x82, 0xe7, 0x3d, 0xda, 0xb7, 0xf0, 0xc2, 0x3a, 0xbe, 0x0c, 0x79, 0x40,
	0x39, 0xb2, 0x60, 0xac, 0x4a, 0xb8, 0x79, 0xb1, 0x87, 0x50, 0xf6, 0x25, 0x94, 0x23, 0x4a, 0x59,
	0x38, 0x4d, 0xe4, 0x02, 0x71, 0x6c, 0x4a, 0xbc, 0x08, 0x10, 0xf1, 0x14, 0xbb, 0xb0, 0x2e, 0x22,
	0x2b, 0x31, 0x04, 0xbc, 0xeb, 0xb9, 0x3d, 0x4a, 0xa8, 0x05, 0x63, 0x4d, 0x20, 0xda, 0xdc, 0xef,
	0x10, 0x18, 0x69, 0x13, 0xc2, 0x25, 0xed, 0xb2, 0xa0, 0xf5, 0x22, 0xb1, 0x92, 0xf6, 0x3e, 0xac,
	0x88, 0xbd, 0x90, 0xcd, 0x1c, 0x4a, 0xa8, 0x05, 0x63, 0x99, 0x80, 0xe2, 0x84, 0x07, 0x34, 0x39,
	0x11, 0xd9, 0x43, 0xee, 0x46, 0xf7, 0x1a, 0x45, 0x4e, 0x8e, 0x08, 0x15, 0xe1, 0xa2, 0x14, 0x78,
	0x02, 0x4c, 0xd0, 0x76, 0xa9, 0x7a, 0x95, 0xc4, 0xe2, 0x8e, 0xa4, 0x10, 0x46, 0x94, 0xb5, 0x59,
	0x6a, 0xba, 0x26, 0x26, 0xae, 0x4c, 0x31, 0x35, 0x21, 0x04, 0xf5, 0x3d, 0x10, 0x7a, 0x45, 0x31,
	0xf5, 0x9a, 0x70, 0x41, 0x82, 0xc9, 0x80, 0x1a, 0x93, 0xc8, 0x14, 0xb5, 0x91, 0x20, 0x31, 0x45,
	0xf1, 0xfa, 0x1c, 0xae, 0x11, 0xbf, 0x15, 0x8c, 0x8f, 0x83, 0xae, 0xef, 0x8c, 0xf0, 0x80, 0x04,
	0xe5, 0xcd, 0xbb, 0xb9, 0x47, 0x2b, 0x06, 0x23, 0x54, 0x27, 0x89, 0x41, 0x06, 0x92, 0x96, 0x61,
	0xd8, 0x12, 0x0c, 0x84, 0x4a, 0x33, 0xbc, 0x80, 0x8d, 0x2e, 0xe5, 0xbe, 0x0c, 0xc7, 0x36, 0x71,
	0x5c, 0x13, 0xb8, 0x34, 0xcb, 0x0f, 0x61, 0x47, 0x46, 0xa7, 0x1e, 0x06, 0xd4, 0x0c, 0x63, 0x99,
	0x18, 0xcb, 0xc3, 0x49, 0xc4, 0x4d, 0x73, 0x7f, 0x09, 0xdb, 0x23, 0x79, 0xd2, 0x83, 0x0c, 0xeb,
	0x75, 0x62, 0xdd, 0x8a, 0xd1, 0x69, 0xc6, 0x57, 0xb0, 0x69, 0x77, 0xbb, 0xde, 0xd8, 0x0d, 0x33,
	0x6c, 0x3b, 0xc4, 0xb6, 0x21, 0x91, 0x69, 0xa6, 0x1f, 0xc0, 0xf5, 0x48, 0x57, 0x3b, 0xb4, 0x33,
	0x8c, 0x37, 0x88, 0x71, 0x5b, 0xaa, 0x6a, 0x87, 0x76, 0x9a, 0x17, 0x8f, 0xca, 0x68, 0x64, 0xc9,
	0x7b, 0xb4, 0x75, 0x6a, 0x07, 0xa7, 0xe5, 0x9b, 0x74, 0x36, 0x57, 0xed, 0xd1, 0xe8, 0x8d, 0x00,
	0x1f, 0xd8, 0x01, 0x45, 0x89, 0x04, 0x65, 0xf9, 0x16, 0x11, 0xc1, 0x84, 0x08, 0x5d, 0xb7, 0x8b,
	0xc7, 0x35, 0x26, 0xb9, 0x4d, 0x24, 0xcb, 0x04, 0x8c, 0x88, 0x30, 0x24, 0x51, 0xd4, 0xea, 0x8d,
	0x7d, 0xba, 0x03, 0x95, 0xef, 0xc8, 0x90, 0x84, 0xd0, 0x9a, 0x04, 0x62, 0x64, 0x1c, 0x8f, 0x28,
	0x50, 0xdc, 0x15, 0xe5, 0xb3, 0x18, 0x61, 0x5e, 0x10, 0x73, 0x38, 0xbd, 0xf2, 0x3d, 0x91, 0x17,
	0x68, 0xac, 0xf7, 0xd8, 0x6b, 0xa8, 0xa4, 0x76, 0x4c, 0xc4, 0xdd, 0xac, 0xf9, 0x2b, 0x64, 0x8e,
	0x3b, 0xc3, 0x6c, 0xae, 0x4c, 0xef, 0x43, 0xe5, 0xdf, 0xe7, 0x60, 0xb1, 0xc6, 0x69, 0x93, 0xa6,
	0xee, 0x0d, 0x4f, 0xe2, 0x50, 0x35, 0x47, 0xa1, 0x6a, 0x43, 0x84, 0x2a, 0x49, 0x9e, 0xed, 0x9c,
	0x7c, 0xa0, 0xd5, 0xb4, 0x01, 0xf3, 0x76, 0x10, 0xf0, 0x50, 0xc6, 0x53, 0x31, 0xc0, 0xa5, 0xdb,
	0x43, 0xdc, 0x64, 0x19, 0x43, 0xe5, 0x88, 0x6d, 0xc3, 0x62, 0x78, 0x21, 0x36, 0x48, 0x5e, 0x29,
	0xc2, 0x0b, 0xda, 0x98, 0xa7, 0xc0, 0xba, 0x3e, 0xef, 0x39, 0xe9, 0x3e, 0xa9, 0xc8, 0x3e, 0xeb,
	0x11, 0x66, 0xd2, 0xae, 0x7c, 0x0c, 0xeb, 0x51, 0x57, 0x68, 0x42, 0xbd, 0x24, 0xba, 0xaa, 0x12,
	0x11, 0x13, 0x57, 0x7e, 0xf2, 0x8d, 0xb7, 0xf8, 0x35, 0x28, 0x49, 0x78, 0xab, 0xad, 0x35, 0x95,
	0xdc, 0xcc, 0xfb, 0x7a, 0xf2, 0x16, 0x5f, 0xd7, 0x9b, 0x6a, 0x43, 0xff, 0x1a, 0x6f, 0xf1, 0x95,
	0xbf, 0xcb, 0x03, 0xbc, 0x75, 0xc2, 0xd3, 0x9e, 0x6f, 0xbf, 0xb7, 0x07, 0x53, 0x96, 0xfe, 0x40,
	0x15, 0x30, 0xb1, 0x92, 0x2c, 0xd4, 0xa4, 0x95, 0x66, 0xdb, 0xf4, 0x79, 0xbc, 0x65, 0xf3, 0xc9,
	0x2e, 0xdb, 0x64, 0xea, 0xec, 0xae, 0x29, 0x90, 0xf7, 0xf9, 0x89, 0x34, 0x34, 0xfe, 0xc4, 0x09,
	0xa9, 0xdf, 0x75, 0x29, 0x2d, 0x2b, 0x47, 0xc9, 0x6d, 0x59, 0x4a, 0x6d, 0xcb, 0x4c, 0x3b, 0x17,
	0x67, 0xdb, 0x19, 0x43, 0xda, 0x7b, 0xa9, 0x8c, 0x6b, 0x65, 0xaf, 0x6e, 0x2c, 0x46, 0x4d, 0x18,
	0xee, 0x43, 0x9e, 0x5f, 0x84, 0x94, 0x71, 0xe2, 0x66, 0x56, 0xb4, 0x1c, 0xed, 0x22, 0x34, 0x10,
	0xfb, 0xbf, 0xbd, 0x7b, 0x35, 0x28, 0x25, 0xa6, 0x64, 0xcf, 0x60, 0x9e, 0xfb, 0xdd, 0x97, 0x9f,
	0xca, 0x66, 0xc6, 0x96, 0x50, 0x4a, 0x43, 0x50, 0x82, 0xec, 0xe0, 0x7b, 0x86, 0x20, 0xdb, 0x9b,
	0xa7, 0x25, 0x54, 0x7e, 0x04, 0x4a, 0x96, 0x86, 0x7d, 0x02, 0x8a, 0xcf, 0xbb, 0xdc, 0x39, 0xc7,
	0xbb, 0x5f, 0xaf, 0x87, 0x37, 0x62, 0xe9, 0x16, 0x6b, 0x11, 0x5c, 0x15, 0x60, 0xac, 0x7c, 0x17,
	0x55, 0x11, 0x15, 0xa7, 0xfc, 0x67, 0x03, 0xe6, 0xbd, 0xf7, 0x2e, 0xf7, 0xa5, 0xf3, 0x88, 0x01,
	0x2b, 0xc3, 0xe2, 0xb1, 0x3d, 0xc0, 0xa4, 0x27, 0x7d, 0x27, 0x1a, 0x5e, 0xe1, 0x3c, 0xa9, 0x42,
	0x75, 0x3e, 0x53, 0xa8, 0x3e, 0x90, 0x77, 0xe9, 0x85, 0x64, 0xd5, 0x22, 0xf5, 0x99, 0x5c, 0xa6,
	0x2b, 0xbf, 0x01, 0x6b, 0x75, 0xc7, 0xb5, 0xdd, 0xae, 0x83, 0xc9, 0x99, 0x94, 0x9d, 0x78, 0x70,
	0x6e, 0xb6, 0x07, 0xcf, 0x25, 0x94, 0xa8, 0xfc, 0x71, 0x8e, 0x6e, 0x7c, 0x6e, 0x70, 0xc2, 0xfd,
	0xc9, 0xba, 0x72, 0xc9, 0x75, 0x3d, 0x8d, 0x05, 0x8a, 0xa6, 0xbc, 0xec, 0xaa, 0x67, 0xe6, 0x8d,
	0xe7, 0x79, 0x28, 0x35, 0xcf, 0x27, 0x9b, 0xbf, 0xd1, 0x14, 0xe9, 0x2e, 0xf2, 0xd0, 0x71, 0x2d,
	0x29, 0x5a, 0x14, 0xf6, 0xc5, 0xa1, 0xe3, 0x0a, 0x71, 0x95, 0x7f, 0xc9, 0xc1, 0x5a, 0xc4, 0x65,
	0x60, 0xb9, 0x1f, 0x84, 0xec, 0x53, 0x58, 0x3e, 0xf1, 0xbd, 0xa1, 0x25, 0xb3, 0x95, 0xbc, 0x97,
	0xae, 0xa4, 0x8c, 0x63, 0x94, 0x90, 0x24, 0xda, 0xb9, 0x27, 0x00, 0xa1, 0x17, 0xd3, 0xcf, 0xcd,
	0xa2, 0x2f, 0x86, 0x5e, 0x44, 0x7d, 0xd5, 0xe1, 0xff, 0xb0, 0xaa, 0x13, 0xcb, 0xce, 0x27, 0xb7,
	0x37, 0xd5, 0xbb, 0x5e, 0xc8, 0xf4, 0xae, 0x2b, 0x7f, 0x9b, 0x83, 0x52, 0x83, 0xf7, 0xfa, 0xdc,
	0x17, 0x9f, 0x42, 0xee, 0x4d, 0x2d, 0x8d, 0xea, 0xdc, 0xe4, 0x5a, 0x6e, 0x65, 0xd6, 0x42, 0x12,
	0xbf, 0x59, 0xf9, 0x94, 0x1e, 0x85, 0x6c, 0x0f, 0x9d, 0xc9, 0xdd, 0x12, 0xaa, 0x8b, 0x9d, 0x49,
	0x5d, 0xe4, 0x17, 0x32, 0x17, 0xf9, 0x8a, 0x39, 0xd9, 0x97, 0x3d, 0xe9, 0xdf, 0x1f, 0xc3, 0x62,
	0x52, 0xef, 0x29, 0x13, 0x47, 0xd8, 0xe4, 0x11, 0x99, 0x4b, 0x1d, 0x91, 0xca, 0x39, 0x28, 0x93,
	0xdd, 0x0e, 0x46, 0x9e, 0x1b, 0x70, 0xf6, 0x1c, 0x8a, 0xa1, 0x84, 0x45, 0x3d, 0x08, 0x79, 0x10,
	0x12, 0x96, 0x33, 0x26, 0x34, 0xec, 0x05, 0x2c, 0x49, 0x79, 0x51, 0x57, 0x73, 0x33, 0xed, 0x7e,
	0x52, 0x61, 0x23, 0x26, 0xab, 0xfc, 0xd5, 0x1c, 0x2c, 0x1f, 0xda, 0x7e, 0xdf, 0x71, 0xe9, 0xe6,
	0x19, 0x60, 0xd6, 0x1b, 0xda, 0x8e, 0x1b, 0x72, 0xf4, 0x6e, 0x8e, 0xe5, 0x72, 0xdf, 0x71, 0xe5,
	0x51, 0x5a, 0x4f, 0x60, 0x04, 0x13, 0xee, 0x5b, 0xc0, 0x6d, 0xbf, 0x7b, 0x6a, 0x0d, 0x90, 0x5f,
	0x2e, 0xab, 0x24, 0x60, 0xa2, 0x77, 0xf0, 0x00, 0x56, 0x1d, 0xd7, 0x09, 0x1d, 0x51, 0x7c, 0xa3,
	0x34, 0xb1, 0x41, 0x2b, 0x12, 0x2a, 0x25, 0x7d, 0x1f, 0xca, 0x5d, 0x6f, 0x30, 0xb0, 0x43, 0xee,
	0xdb, 0x03, 0xcb, 0xe7, 0x03, 0x6e, 0x07, 0x5c, 0x4a, 0x15, 0x2e, 0xb7, 0x35, 0xc1, 0x1b, 0x02,
	0x2d, 0x26, 0x48, 0xa6, 0xb3, 0xf9, 0x74, 0x3a, 0x4b, 0xc5, 0x98, 0x85, 0xe9, 0x5e, 0xa4, 0xf0,
	0xdb, 0xc5, 0x8c, 0xdf, 0x66, 0xf3, 0x77, 0x62, 0xf7, 0x7f, 0x51, 0x04, 0x38, 0x8c, 0x6b, 0x3e,
	0x3a, 0x19, 0xb6, 0x7f, 0x66, 0x25, 0x9b, 0x23, 0x34, 0xa3, 0xb8, 0xb8, 0x7e, 0x04, 0xab, 0xc7,
	0x3c, 0x08, 0xad, 0x63, 0xa7, 0x97, 0x6a, 0xe0, 0x2e, 0x23, 0x74, 0xcf, 0xe9, 0x09, 0xaa, 0x87,
	0xb0, 0x16, 0x53, 0xa5, 0xba, 0x24, 0x2b, 0x92, 0x4c, 0x5e, 0xc0, 0x1f, 0x81, 0x42, 0x74, 0xde,
	0xc9, 0x09, 0xf7, 0xa5, 0x3c, 0xd9, 0x10, 0x40, 0x78, 0x0b, 0xc1, 0x42, 0xe2, 0x2e, 0xac, 0x27,
	0x28, 0xa5, 0x4c, 0xd1, 0x37, 0x5a, 0x8b, 0x49, 0xa5, 0xd4, 0x17, 0xb0, 0x49, 0xb4, 0x98, 0xa1,
	0x9d, 0x6e, 0x42, 0x55, 0x71, 0x1d, 0x67, 0x88, 0xa4, 0xeb, 0x71, 0x37, 0x56, 0xf8, 0x15, 0x6c,
	0x65, 0x59, 0x52, 0xfd, 0xa6, 0x6b, 0x29, 0x1e, 0x39, 0xcf, 0xe7, 0xb0, 0x9d, 0x64, 0x4a, 0x2e,
	0x42, 0xdc, 0x34, 0x37, 0x26, 0x5c, 0x89, 0xa5, 0x7c, 0x09, 0xe5, 0x69, 0x36, 0x39, 0x9b, 0xb8,
	0x7b, 0x6e, 0x66, 0xf8, 0xe4, 0x7c, 0xb8, 0xf5, 0xf1, 0x5a, 0x40, 0xf6, 0x0e, 0xa3, 0x15, 0x3c,
	0x02, 0x45, 0x0a, 0x9c, 0xd0, 0x94, 0x64, 0x6f, 0x85, 0xe0, 0x87, 0x11, 0xe5, 0xe4, 0xeb, 0xfb,
	0x72, 0xea, 0xeb, 0x7b, 0xca, 0x4d, 0x56, 0xb2, 0xdd, 0xbe, 0xfb, 0xb0, 0x42, 0xcd, 0x14, 0x6a,
	0xa7, 0xf1, 0x20, 0x94, 0xcd, 0xd8, 0x65, 0x04, 0xea, 0x12, 0x96, 0xed, 0xb1, 0xaf, 0x65, 0x7b,
	0xec, 0xd3, 0x9d, 0x7a, 0x65, 0x46, 0xa7, 0x7e, 0xd6, 0x67, 0x82, 0xf5, 0x6f, 0xf1, 0x99, 0x80,
	0x5d, 0xf1, 0x99, 0xe0, 0x00, 0xae, 0xc9, 0xa3, 0x83, 0x37, 0x3f, 0xc7, 0xed, 0x5b, 0x43, 0xaf,
	0xc7, 0xe9, 0x2e, 0xba, 0xfa, 0xb2, 0x2c, 0xe2, 0x8a, 0x38, 0x09, 0xd4, 0x12, 0x75, 0xdc, 0xfe,
	0xa1, 0xd7, 0xe3, 0x18, 0x23, 0x10, 0x96, 0x00, 0xb1, 0x67, 0xb0, 0x18, 0xfa, 0x4e, 0xbf, 0xcf,
	0x7d, 0xba, 0xa6, 0xc6, 0x95, 0xbd, 0x6c, 0x31, 0x9b, 0x02, 0x67, 0x44, 0x44, 0x4c, 0x85, 0x75,
	0x7e, 0x11, 0x72, 0x97, 0x6e, 0x4e, 0x11, 0xe7, 0xe6, 0x07, 0x38, 0x95, 0x98, 0x5c, 0x42, 0xe8,
	0x7a, 0x6c, 0xfb, 0x7d, 0x4e, 0x7e, 0x73, 0xc6, 0xe9, 0x0e, 0x5b, 0x34, 0x4a, 0x02, 0xd6, 0x41,
	0x10, 0x86, 0xa5, 0x60, 0x3c, 0x1a, 0x0d, 0x1c, 0xde, 0x93, 0x44, 0xdb, 0x44, 0xb4, 0x12, 0x41,
	0x05, 0x59, 0x07, 0xb6, 0xc9, 0xa6, 0xd6, 0xd0, 0x73, 0x9d, 0xd0, 0xf3, 0xd1, 0x10, 0xc7, 0xde,
	0xd8, 0xed, 0xe1, 0x6d, 0x15, 0x43, 0xec, 0x8d, 0x44, 0xf7, 0xee, 0x30, 0xa6, 0xd9, 0x23, 0x12,
	0x63, 0x73, 0x34, 0x0b, 0xcc, 0x9e, 0x60, 0x90, 0x25, 0xdb, 0xd2, 0xe7, 0x7c, 0x6b, 0xe4, 0x7b,
	0x17, 0x97, 0x74, 0x85, 0x2d, 0x1a, 0x8a, 0xc0, 0xbc, 0x41, 0x44, 0x1b, 0xe1, 0xec, 0xb7, 0xe0,
	0x66, 0xe6, 0x9b, 0x69, 0x4f, 0xb4, 0xc4, 0xad, 0xe0, 0xd4, 0xf6, 0x79, 0x79, 0x87, 0xf4, 0xb8,
	0x23, 0x53, 0x43, 0xea, 0xfb, 0x69, 0x8f, 0x5a, 0xe5, 0x1d, 0x24, 0x33, 0xae, 0x0f, 0xae, 0x42,
	0x55, 0xfe, 0x28, 0x07, 0xd7, 0xaf, 0x64, 0xa4, 0xb6, 0x19, 0xc6, 0xd3, 0xa8, 0x2c, 0xa2, 0x01,
	0xc6, 0x18, 0xfe, 0xd3, 0x31, 0xaa, 0x34, 0x70, 0xce, 0x22, 0x55, 0x44, 0x56, 0x5e, 0x13, 0x88,
	0x86, 0x73, 0x26, 0x25, 0x7c, 0x01, 0xdb, 0xe9, 0x86, 0x1f, 0x2e, 0x5b, 0x5c, 0x53, 0xc5, 0xdd,
	0x6d, 0x33, 0xd9, 0xf4, 0x7b, 0x13, 0x21, 0x2b, 0x7f, 0x9f, 0x83, 0xcd, 0x99, 0x86, 0xc5, 0x98,
	0x89, 0x25, 0x09, 0xbd, 0xd5, 0x49, 0x45, 0xdf, 0x95, 0xa1, 0xe3, 0xbe, 0x41, 0x68, 0x1c, 0x5b,
	0x87, 0xf6, 0x45, 0x8a, 0x4e, 0xf6, 0xea, 0x86, 0xf6, 0x45, 0x82, 0xee, 0x8b, 0x89, 0x8f, 0xe6,
	0x29, 0x85, 0xdf, 0x9c, 0xb9, 0xad, 0x53, 0xbe, 0xfa, 0x31, 0xac, 0xc5, 0xc5, 0x44, 0x22, 0x24,
	0xe7, 0x8c, 0xd5, 0x18, 0x4c, 0x22, 0x2a, 0x5f, 0x41, 0x89, 0xbe, 0xc9, 0xd7, 0x78, 0x68, 0x3b,
	0x03, 0xac, 0x3b, 0xba, 0x78, 0x9c, 0x50, 0xe9, 0x79, 0x83, 0x7e, 0x63, 0x75, 0x30, 0xe4, 0x41,
	0x60, 0xf7, 0x23, 0x3b, 0x46, 0x43, 0xdc, 0x01, 0xc7, 0x75, 0xa5, 0x6e, 0x45, 0x43, 0x0c, 0x2a,
	0x7f, 0x9e, 0x83, 0x12, 0x65, 0x76, 0x9b, 0x4e, 0x03, 0x26, 0x23, 0xc7, 0x1d, 0x8d, 0x45, 0xbb,
	0x82, 0x24, 0x2f, 0x1b, 0x45, 0x82, 0x50, 0xae, 0xda, 0x80, 0x79, 0xd7, 0x9b, 0x94, 0x1e, 0x62,
	0x30, 0xd5, 0xee, 0xcc, 0x4f, 0xb7, 0x3b, 0x6f, 0xc0, 0x62, 0x74, 0x59, 0xf8, 0x15, 0x06, 0xf8,
	0xe5, 0x83, 0xef, 0x19, 0x11, 0x84, 0xed, 0xc0, 0xe2, 0x68, 0x7c, 0x6c, 0x9d, 0xf1, 0xcb, 0xf2,
	0x7f, 0x44, 0xc8, 0x85, 0xd1, 0xf8, 0xf8, 0x35, 0xbf, 0xdc, 0x5b, 0x80, 0x02, 0x16, 0x70, 0x95,
	0xd7, 0x50, 0xec, 0x38, 0x7d, 0xd7, 0x0e, 0xc7, 0x3e, 0xc7, 0x2b, 0x60, 0xe0, 0xf4, 0xa5, 0x7a,
	0xf8, 0x13, 0x6d, 0x61, 0x0f, 0xfa, 0x9e, 0x5c, 0x34, 0xfd, 0x4e, 0x3e, 0x49, 0xc8, 0x53, 0x6b,
	0x21, 0x1a, 0x56, 0x54, 0x58, 0x46, 0x61, 0xbc, 0xb7, 0x37, 0xa6, 0xcf, 0x2e, 0xab, 0x30, 0x17,
	0x5e, 0x48, 0x71, 0x73, 0xe1, 0x05, 0xbb, 0x27, 0xe4, 0x8b, 0x5a, 0x7d, 0x2d, 0xfa, 0x06, 0x28,
	0x67, 0xa7, 0x09, 0x2b, 0x3f, 0x00, 0xa5, 0xc9, 0xc3, 0xf7, 0x9e, 0x7f, 0xd6, 0xb6, 0x7d, 0x7b,
	0xc8, 0x43, 0xee, 0xcf, 0x78, 0x8b, 0xb3, 0x91, 0x7c, 0x8b, 0x53, 0x8c, 0x1e, 0x6f, 0xfd, 0x0e,
	0xac, 0xc6, 0x27, 0xe5, 0x3b, 0x3c, 0xbc, 0xb9, 0x0d, 0x30, 0xf2, 0xbd, 0x91, 0xe7, 0xd3, 0x21,
	0x98, 0xa3, 0x25, 0x26, 0x20, 0x89, 0x87, 0x39, 0xf9, 0xd4, 0xc3, 0x9c, 0x00, 0xb6, 0xd3, 0xd3,
	0xc7, 0xd2, 0xb1, 0x0c, 0x12, 0xfd, 0xbe, 0xf8, 0xae, 0xb6, 0x48, 0x63, 0xbd, 0xc7, 0x7e, 0x04,
	0x6b, 0x93, 0x08, 0x22, 0x7a, 0x8f, 0xc2, 0x3e, 0x1b, 0x99, 0xa0, 0x21, 0x44, 0xae, 0x0e, 0x52,
	0xe3, 0xca, 0x3f, 0x15, 0x80, 0x35, 0xa6, 0xde, 0x65, 0x7c, 0x9b, 0xb6, 0x42, 0xfa, 0xc9, 0x4c,
	0x3e, 0xfb, 0x64, 0x26, 0xdd, 0xe0, 0x2f, 0x64, 0xdf, 0xa7, 0xdc, 0x9f, 0xba, 0x29, 0x8a, 0xe7,
	0x72, 0x3f, 0xce, 0x25, 0xaa, 0xb9, 0xc7, 0xb0, 0xde, 0xf5, 0x86, 0x43, 0x27, 0x1c, 0x72, 0x37,
	0x8c, 0xee, 0x2a, 0xa2, 0x86, 0x51, 0x26, 0x08, 0x79, 0x65, 0x51, 0x20, 0x7f, 0xc2, 0xb9, 0x2c,
	0xfc, 0xf0, 0x27, 0x7b, 0x05, 0xf3, 0x01, 0x1f, 0x0c, 0x82, 0xf2, 0x12, 0x45, 0xd3, 0x5b, 0x33,
	0x0d, 0x13, 0xef, 0xa4, 0xa0, 0x65, 0x2f, 0xa0, 0x70, 0x3c, 0xbe, 0x0c, 0xca, 0xc5, 0x5f, 0x87,
	0x87, 0x48, 0x93, 0x8e, 0x0d, 0xc2, 0x46, 0xd1, 0x5b, 0x9b, 0x2f, 0x33, 0xef, 0x86, 0x66, 0x06,
	0x74, 0xa4, 0xcc, 0x36, 0x55, 0x52, 0x37, 0x9c, 0xe5, 0xec, 0x4d, 0xeb, 0x67, 0xdf, 0xf1, 0xc5,
	0x48, 0xf4, 0x0e, 0xe4, 0xaa, 0x17, 0x23, 0x33, 0x9e, 0x82, 0xd0, 0x2b, 0x99, 0x78, 0xa6, 0x9a,
	0xd6, 0x6e, 0xb4, 0xde, 0xd1, 0xb3, 0x91, 0x89, 0xd4, 0xb6, 0xd6, 0xac, 0xe9, 0xcd, 0x7d, 0x65,
	0xa1, 0xf2, 0x27, 0x39, 0x58, 0xd5, 0xc2, 0x53, 0xee, 0xf3, 0xf1, 0x90, 0x1e, 0x71, 0xf4, 0xd1,
	0x1d, 0x5c, 0x71, 0x3e, 0x27, 0xbe, 0x5c, 0x94, 0x10, 0xf1, 0x11, 0x2b, 0x6e, 0x56, 0xce, 0xa5,
	0x9b, 0x95, 0x0f, 0x60, 0xf5, 0xd8, 0x77, 0x7a, 0x7d, 0x1e, 0xb7, 0x37, 0x44, 0xc4, 0x5c, 0x11,
	0x50, 0xd9, 0xdc, 0x60, 0x1f, 0xc1, 0x4a, 0x37, 0xf1, 0x5e, 0x24, 0x20, 0x97, 0x5b, 0x31, 0xd2,
	0xc0, 0xdd, 0xff, 0x07, 0x85, 0x8e, 0x78, 0x9a, 0xa6, 0x74, 0xf4, 0x5a, 0xf6, 0xab, 0xf7, 0x32,
	0x2c, 0x11, 0x74, 0xef, 0xe8, 0x9d, 0x92, 0x63, 0x2b, 0x50, 0xa4, 0x51, 0x47, 0x6b, 0x34, 0x94,
	0xb9, 0xdd, 0x3f, 0xcd, 0xc1, 0x52, 0xf4, 0x51, 0x95, 0x95, 0x61, 0x43, 0x6f, 0x9a, 0x9a, 0xf1,
	0x46, 0x6d, 0x4c, 0x7f, 0x39, 0x8f, 0x31, 0xfa, 0x8b, 0x43, 0xe5, 0x87, 0x6c, 0x3d, 0x09, 0xf9,
	0xfc, 0x50, 0xf9, 0xcb, 0x39, 0xc6, 0x60, 0x25, 0x41, 0xf4, 0xf9, 0xa1, 0xf2, 0xfb, 0x8b, 0x69,
	0xb2, 0x17, 0x07, 0xca, 0x1f, 0xde, 0x64, 0x2c, 0x09, 0xfa, 0xe2, 0x40, 0xf9, 0xb7, 0xbf, 0xc8,
	0xa5, 0x61, 0x2f, 0x6a, 0xca, 0xef, 0xfe, 0x7c, 0x7e, 0xf7, 0xe7, 0x39, 0x58, 0x4d, 0xd7, 0x4f,
	0xec, 0x0e, 0xdc, 0x50, 0x8f, 0xaa, 0xa6, 0xde, 0x6a, 0x5a, 0xa6, 0xa1, 0xef, 0xef, 0x6b, 0x46,
	0x46, 0xcf, 0xeb, 0xb0, 0x99, 0x25, 0xd8, 0x53, 0xcd, 0xea, 0x81, 0x92, 0x63, 0x37, 0x60, 0x3b,
	0x8b, 0x6a, 0xb5, 0xb5, 0x26, 0xee, 0xed, 0xdc, 0x2c, 0xbe, 0xb6, 0xa1, 0x57, 0x35, 0x25, 0xcf,
	0x6e, 0xc1, 0xf5, 0x2c, 0xaa, 0xa1, 0x7f, 0x75, 0xa4, 0xd7, 0x74, 0xf3, 0x9d, 0x52, 0xd8, 0xfd,
	0x83, 0x1c, 0xac, 0x65, 0xc2, 0x27, 0xbb, 0x0b, 0x37, 0xdb, 0xda, 0xfe, 0xbe, 0x56, 0xb3, 0x0c,
	0xad, 0xae, 0x19, 0x5a, 0x73, 0xea, 0xe1, 0x57, 0x19, 0x36, 0xa6, 0x28, 0x0e, 0xf5, 0x9a, 0x92,
	0xc3, 0xe9, 0xa6, 0x30, 0x7b, 0x5a, 0xc7, 0xb4, 0xf6, 0x74, 0x74, 0xed, 0x2b, 0xd1, 0x6a, 0xe7,
	0xb5, 0x92, 0xdf, 0xfd, 0xaf, 0x35, 0x80, 0xc9, 0xb3, 0x3a, 0x5c, 0x73, 0xcb, 0xa8, 0x69, 0x86,
	0xa5, 0x19, 0x46, 0x2b, 0x6b, 0xab, 0x7b, 0x70, 0x2b, 0x89, 0xd4, 0x9b, 0x6f, 0xd4, 0x86, 0x5e,
	0x93, 0x6f, 0xba, 0x2c, 0x52, 0xe6, 0x2e, 0xdc, 0x9c, 0x45, 0x22, 0x60, 0xa4, 0xcf, 0x1d, 0xb8,
	0x91, 0xa4, 0x68, 0x1d, 0x99, 0x56, 0xab, 0x6e, 0x75, 0xb4, 0xaf, 0x8e, 0x50, 0x35, 0x25, 0xcf,
	0x1e, 0x42, 0x65, 0x96, 0x08, 0x43, 0x3b, 0x54, 0x75, 0x34, 0xbe, 0xd5, 0xd1, 0xbf, 0xd6, 0x94,
	0x02, 0xbb, 0x09, 0xe5, 0x24, 0x1d, 0xbd, 0x51, 0xab, 0xab, 0x7a, 0xe3, 0xc8, 0xd0, 0x94, 0xf9,
	0xec, 0x34, 0x86, 0x76, 0xd8, 0x42, 0x57, 0x89, 0x08, 0x16, 0xd8, 0x63, 0xf8, 0x78, 0xd6, 0x34,
	0xf4, 0x8a, 0x4c, 0xa5, 0xcd, 0xab, 0xa9, 0xa6, 0x86, 0x52, 0x95, 0x45, 0xf6, 0x31, 0xdc, 0xbf,
	0x7a, 0x59, 0xb1, 0x5d, 0x95, 0xa5, 0xec, 0xfa, 0xb5, 0x9a, 0x6e, 0x5a, 0xcd, 0x96, 0x69, 0xa9,
	0x8d, 0x46, 0xeb, 0xad, 0x56, 0x53, 0x8a, 0xb8, 0x1f, 0x49, 0x0a, 0xf5, 0x50, 0x6b, 0xd6, 0x62,
	0xb5, 0x00, 0xfd, 0x2a, 0x89, 0x46, 0xde, 0x7a, 0xeb, 0xa8, 0x59, 0x53, 0x4a, 0x57, 0xd9, 0xb6,
	0xad, 0x1a, 0xe6, 0x3b, 0xb4, 0xed, 0x72, 0x56, 0xb6, 0xdc, 0x18, 0x7a, 0x81, 0x52, 0x53, 0x56,
	0xd8, 0x7d, 0xb8, 0x93, 0x41, 0xef, 0xeb, 0x4d, 0xab, 0x7a, 0xa0, 0x55, 0x5f, 0x93, 0x06, 0x5a,
	0x4d, 0x59, 0xcd, 0x2e, 0xf5, 0x50, 0xef, 0x74, 0xd0, 0xe8, 0xfb, 0x5a, 0x53, 0x33, 0xd4, 0x86,
	0xa5, 0x56, 0xab, 0xad, 0xa3, 0xa6, 0xa9, 0xac, 0xb1, 0xdb, 0xb0, 0x93, 0x56, 0xc7, 0xd4, 0x8c,
	0xa6, 0xda, 0x10, 0x43, 0x45, 0xc9, 0xee, 0x4f, 0xa4, 0x2e, 0xed, 0xde, 0x7a, 0x56, 0x97, 0x78,
	0x31, 0x9a, 0xd1, 0xd1, 0x3b, 0x26, 0x59, 0x93, 0x5d, 0x25, 0xc2, 0x7c, 0xd7, 0xd6, 0x94, 0x6b,
	0x59, 0x6c, 0x47, 0x6b, 0xd4, 0x2d, 0xd3, 0x50, 0x29, 0xf8, 0x6e, 0xb0, 0x67, 0xb0, 0x9b, 0xe6,
	0xed, 0x1c, 0xd5, 0xeb, 0x7a, 0x55, 0xd7, 0x9a, 0xa6, 0x55, 0x3f, 0x6a, 0xd6, 0x3a, 0x96, 0xd9,
	0xb2, 0xda, 0xea, 0x3b, 0xab, 0xae, 0x69, 0x1d, 0x65, 0x93, 0x3d, 0x80, 0x7b, 0x69, 0xfa, 0x6a,
	0xcb, 0x30, 0xb4, 0xaa, 0x19, 0x59, 0x91, 0x26, 0xdd, 0x9a, 0x26, 0x93, 0x2a, 0x25, 0x5f, 0x48,
	0x2a, 0xdb, 0x59, 0xef, 0xda, 0xaf, 0x37, 0xa5, 0xb3, 0xd4, 0x8e, 0x0c, 0x34, 0xa7, 0xda, 0xb4,
	0x64, 0x8c, 0x50, 0xca, 0xec, 0x15, 0x3c, 0x4f, 0x13, 0xab, 0x69, 0xe2, 0x6a, 0xab, 0x69, 0xea,
	0xcd, 0xa3, 0xd6, 0x51, 0x27, 0x5e, 0xdf, 0x75, 0xf6, 0x19, 0x7c, 0x9a, 0x64, 0xaa, 0xaa, 0x4d,
	0xf2, 0x33, 0x72, 0x27, 0xb3, 0x65, 0xed, 0x9b, 0xa6, 0xf5, 0x56, 0x37, 0x0f, 0xf0, 0x7c, 0x91,
	0x4f, 0xbf, 0x53, 0x4d, 0x65, 0x87, 0x7d, 0x02, 0x0f, 0x52, 0xfe, 0x29, 0x31, 0xd6, 0x9e, 0x56,
	0x6f, 0x19, 0x9a, 0x55, 0x35, 0x34, 0xd5, 0xd4, 0x6a, 0xaa, 0xa9, 0xdc, 0x60, 0x4f, 0xe0, 0xd1,
	0x8c, 0x09, 0x0e, 0xd4, 0x37, 0xf4, 0xe8, 0xd4, 0x52, 0x9b, 0xb5, 0x89, 0xe0, 0x9b, 0x6c, 0x17,
	0x1e, 0x7e, 0x48, 0x9d, 0x7a, 0xeb, 0xb5, 0x85, 0xe6, 0x6a, 0x55, 0x95, 0x5b, 0xdf, 0x44, 0x2b,
	0xd6, 0x4f, 0xcf, 0x4c, 0x6f, 0x5f, 0xa1, 0x85, 0x3c, 0x35, 0x46, 0xeb, 0x30, 0x49, 0x7d, 0xe7,
	0x0a, 0xa3, 0x74, 0x90, 0x58, 0x6f, 0x55, 0x33, 0x5b, 0x20, 0xed, 0x7f, 0xf7, 0x43, 0x5c, 0x42,
	0xef, 0x19, 0x5c, 0xf7, 0xa6, 0x4e, 0xd3, 0x11, 0x86, 0x5c, 0xf9, 0xe2, 0x55, 0xf0, 0x28, 0x15,
	0x56, 0x81, 0xdb, 0xb3, 0x88, 0x70, 0x77, 0x50, 0x69, 0xb3, 0xaa, 0xdc, 0xcf, 0x9e, 0xb8, 0x68,
	0xd7, 0x26, 0xe1, 0x5a, 0x24, 0x96, 0x8f, 0xb2, 0x7e, 0xb2, 0x77, 0xf4, 0x2e, 0xd2, 0x75, 0x3a,
	0xb4, 0x4b, 0xa6, 0x07, 0xd9, 0xc5, 0xb5, 0xea, 0xf5, 0x8e, 0x66, 0x4e, 0xb4, 0xd5, 0x3a, 0x1d,
	0xd4, 0x44, 0xfb, 0xea, 0x48, 0x6d, 0xa0, 0xf1, 0xbf, 0xd6, 0x8c, 0x96, 0xf2, 0x90, 0x3d, 0x85,
	0x4f, 0xbe, 0x89, 0xcb, 0x3c, 0x50, 0x9b, 0x82, 0xfc, 0x63, 0xf6, 0x25, 0xbc, 0xfa, 0x00, 0xf9,
	0x3e, 0x79, 0x95, 0x31, 0x3d, 0xcf, 0xa3, 0xac, 0x76, 0x58, 0x63, 0x5c, 0xb1, 0xa6, 0x3d, 0x8c,
	0x0e, 0xb4, 0xa6, 0x4f, 0xd8, 0xa7, 0xf0, 0xe4, 0xd7, 0x98, 0x6e, 0xa2, 0xe0, 0x6e, 0xd6, 0xe5,
	0x52, 0xd1, 0x40, 0xed, 0x20, 0xf7, 0x9e, 0xda, 0xc0, 0xd2, 0x4f, 0x79, 0xcc, 0x34, 0x50, 0xaf,
	0x74, 0x39, 0x99, 0x4a, 0xa5, 0x4b, 0x68, 0xa6, 0xaa, 0x37, 0x3a, 0x56, 0xab, 0x69, 0x35, 0x5b,
	0xcd, 0x14, 0x4e, 0x79, 0x92, 0x0d, 0x40, 0x47, 0x4d, 0x75, 0xaf, 0xa1, 0xe1, 0xd2, 0x0d, 0x8d,
	0xd6, 0x91, 0xa6, 0x7f, 0xca, 0x3e, 0x87, 0x17, 0xb3, 0xe9, 0xe5, 0xcc, 0xc4, 0x93, 0x9d, 0xe6,
	0x19, 0xfb, 0x3e, 0x7c, 0x96, 0x4e, 0x18, 0xcd, 0x49, 0x10, 0x95, 0x7e, 0x18, 0x25, 0x59, 0x21,
	0x62, 0x0f, 0xd3, 0x49, 0x47, 0x79, 0xbe, 0xfb, 0x7b, 0x39, 0x28, 0x25, 0x5e, 0xcb, 0x60, 0x3c,
	0xad, 0x1e, 0xa8, 0x7a, 0xd3, 0x9a, 0x59, 0x49, 0xdf, 0x82, 0xeb, 0x29, 0x6c, 0x4d, 0xef, 0x54,
	0x5b, 0xcd, 0xa6, 0x28, 0x8b, 0x73, 0x6c, 0x07, 0xb6, 0x52, 0x68, 0x43, 0x6b, 0x37, 0xd4, 0x77,
	0xa2, 0x56, 0xca, 0xe2, 0x26, 0x7c, 0xf9, 0xdd, 0xff, 0x9c, 0x83, 0x52, 0xe2, 0xe3, 0x17, 0x2a,
	0x21, 0x53, 0x8c, 0x35, 0xe3, 0x3d, 0xe6, 0x0e, 0x6c, 0xa5, 0xb0, 0xb8, 0x8f, 0x06, 0x6d, 0x9b,
	0x28, 0xd7, 0x92, 0xb8, 0x8e, 0x66, 0x9a, 0x0d, 0xed, 0x50, 0x6b, 0x9a, 0xca, 0x1c, 0xdb, 0x86,
	0x6b, 0x29, 0xa4, 0xc8, 0x7d, 0x4a, 0x1e, 0xeb, 0xaa, 0x14, 0x42, 0xe6, 0x39, 0xa5, 0xc0, 0x3e,
	0x82, 0xbb, 0x29, 0x0c, 0xe6, 0x09, 0x4b, 0x6f, 0xd6, 0x0d, 0xb5, 0x63, 0x1a, 0x47, 0x55, 0x33,
	0xae, 0x33, 0xa6, 0xa9, 0x26, 0xe5, 0xde, 0xc2, 0x94, 0x5a, 0x44, 0x70, 0xa8, 0xbe, 0xd6, 0x0c,
	0x65, 0x11, 0x73, 0x68, 0x0a, 0xd9, 0x68, 0x55, 0x5f, 0x53, 0x00, 0xa8, 0x19, 0xea, 0x5b, 0x65,
	0x09, 0x2f, 0x1b, 0x29, 0xfc, 0x5e, 0xab, 0x89, 0x35, 0x04, 0x16, 0x9f, 0x49, 0xb0, 0xf6, 0x63,
	0x91, 0x7b, 0x15, 0xc0, 0x1a, 0x2d, 0xbd, 0x9e, 0x46, 0x6b, 0x0f, 0x4b, 0xe4, 0xd8, 0x50, 0xa5,
	0xdd, 0xbf, 0x9e, 0x87, 0xe5, 0xe4, 0x57, 0x3b, 0xfa, 0x9f, 0x03, 0x43, 0x6d, 0x76, 0xea, 0x78,
	0x68, 0xa6, 0x8d, 0xbe, 0x05, 0x2c, 0x8d, 0x6e, 0xb4, 0x3a, 0x1d, 0xf9, 0x4f, 0x07, 0x29, 0xf8,
	0x5b, 0xbd, 0x29, 0x4c, 0x9d, 0x06, 0x53, 0xfd, 0xa1, 0xe4, 0x71, 0xf3, 0xd2, 0x88, 0x43, 0xf3,
	0x50, 0xc8, 0x2a, 0xe0, 0x8a, 0xa6, 0x71, 0x28, 0x6f, 0x1e, 0x3d, 0x22, 0x83, 0x12, 0x75, 0x4b,
	0xa3, 0xf5, 0x56, 0x59, 0x98, 0xd6, 0x5d, 0x62, 0x0f, 0xf4, 0xfd, 0x03, 0x65, 0x11, 0x37, 0x71,
	0x26, 0xba, 0xda, 0x6a, 0xd6, 0xf5, 0x4e, 0x15, 0x93, 0x9d, 0xb2, 0x44, 0x8f, 0x7a, 0x33, 0x54,
	0xaf, 0x35, 0x03, 0xb7, 0x0a, 0x2b, 0x04, 0xa5, 0x88, 0xb1, 0xfe, 0x2a, 0x02, 0x43, 0xab, 0x6a,
	0x78, 0xb1, 0x04, 0xf6, 0x08, 0x3e, 0x4a, 0x13, 0xa5, 0x9d, 0x25, 0x16, 0x57, 0x62, 0xcf, 0xe1,
	0xf1, 0x37, 0x52, 0xd6, 0xf4, 0x8e, 0x69, 0xe8, 0x7b, 0x47, 0xa6, 0xa6, 0x2c, 0x4f, 0xcf, 0x1f,
	0x7b, 0x58, 0x2c, 0x75, 0x05, 0x63, 0xdc, 0x87, 0x88, 0x12, 0x02, 0x57, 0xa7, 0xf7, 0x02, 0x3d,
	0x8b, 0x4c, 0xba, 0x86, 0x1e, 0x3b, 0x03, 0x47, 0x06, 0x55, 0xa6, 0x4d, 0x15, 0x79, 0x2b, 0xf9,
	0xae, 0xb2, 0x3e, 0x2d, 0x39, 0x76, 0x67, 0x36, 0xbd, 0xcb, 0x35, 0xad, 0xdd, 0xea, 0xe8, 0xa6,
	0x72, 0x6d, 0x5a, 0x2e, 0x4d, 0xda, 0x69, 0xa8, 0x9d, 0x03, 0xaa, 0xe7, 0xf6, 0xee, 0x7d, 0x7d,
	0xa7, 0xeb, 0xf5, 0x38, 0x75, 0x0e, 0xe8, 0xdf, 0x15, 0xbb, 0xde, 0xe0, 0x99, 0xe3, 0x3d, 0xc7,
	0xf1, 0x73, 0x02, 0x1c, 0x2f, 0xd0, 0x9f, 0x57, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xd4,
	0x4f, 0x80, 0x21, 0x39, 0x00, 0x00,
}
