syntax = "proto3";

package vega.commands.v1;
option go_package = "code.vegaprotocol.io/vega/protos/vega/commands/v1";

import "vega/commands/v1/commands.proto";
import "vega/commands/v1/validator_commands.proto";
import "vega/commands/v1/data.proto";
import "vega/commands/v1/signature.proto";

message InputData {
  // this was the old restore checkpoint command
  reserved 4001;
  // A number to provide uniqueness to prevent accidental replays and,
  // in combination with `block_height`, deliberate attacks.
  // A nonce provides uniqueness for otherwise identical transactions,
  // ensuring that the transaction hash uniquely identifies a specific transaction.
  // Granted all other fields are equal, the nonce can either be a counter
  // or generated at random to submit multiple transactions within the same
  // block (see below), without being identified as replays.
  // Please note that Protocol Buffers do not have a canonical, unique encoding
  // and therefore different libraries or binaries may encode the same message
  // slightly differently, causing a different hash.
  uint64 nonce = 1;

  // The block height at which the transaction was made.
  // This should be the current block height. The transaction will be valid
  // from the block and up to the `tolerance` block height.
  // Example: If the network has a tolerance of 150 blocks and `block_height`
  // is set to `200`, then the transaction will be valid until block `350`.
  // Note that a `block_height` that is ahead of the real block height will be
  // rejected. The tolerance can be queried from the chain's network parameters.
  // `block_height` prevents replay attacks in conjunction with `nonce` (see above).
  uint64 block_height = 2;

  oneof command {
    // User commands
    OrderSubmission order_submission = 1001;
    OrderCancellation order_cancellation = 1002;
    OrderAmendment order_amendment = 1003;
    WithdrawSubmission withdraw_submission = 1004;
    ProposalSubmission proposal_submission = 1005;
    VoteSubmission vote_submission = 1006;
    LiquidityProvisionSubmission liquidity_provision_submission = 1007;
    DelegateSubmission delegate_submission = 1008;
    UndelegateSubmission undelegate_submission = 1009;
    LiquidityProvisionCancellation liquidity_provision_cancellation = 1010;
    LiquidityProvisionAmendment liquidity_provision_amendment = 1011;
    Transfer transfer = 1012;
    CancelTransfer cancel_transfer = 1013;
    AnnounceNode announce_node = 1014;
    BatchMarketInstructions batch_market_instructions = 1015;

    // Validator commands
    NodeVote node_vote = 2002;
    NodeSignature node_signature = 2003;
    ChainEvent chain_event = 2004;
    KeyRotateSubmission key_rotate_submission = 2005;
    StateVariableProposal state_variable_proposal = 2006;
    ValidatorHeartbeat validator_heartbeat = 2007;
    EthereumKeyRotateSubmission ethereum_key_rotate_submission = 2008;
    ProtocolUpgradeProposal protocol_upgrade_proposal = 2009;
    IssueSignatures issue_signatures = 2010;

    // Oracles
    OracleDataSubmission oracle_data_submission = 3001;
  }
}

// The current supported version of the transaction inside the network.
enum TxVersion {
  reserved 1;

  TX_VERSION_UNSPECIFIED = 0;
  // This version requires the Proof-of-work added to the transaction.
  TX_VERSION_V2 = 2;
  // This version requires the chain ID to be append in front of the input data
  // byte, with a `\0` delimiter.
  TX_VERSION_V3 = 3;
}

// Represents a transaction to be sent to Vega.
message Transaction {
  // One of the set of Vega commands.
  // These bytes are should be built as follow:
  //   chain_id_as_bytes + \0 character as delimiter + proto_marshalled_command
  bytes input_data = 1;

  // The signature of the inputData.
  Signature signature = 2;

  // The sender of the transaction.
  // Any of the following would be valid:
  oneof from {
    // The address of the sender (hex-encoded). Not supported yet.
    string address = 1001;
    // The public key of the sender (hex-encoded).
    string pub_key = 1002;
  }

  // A version of the transaction, to be used in the future in case changes are implemented
  // to the Transaction format.
  TxVersion version = 2000;

  // Proof of work contains the random transaction id used by the client and the nonce.
  ProofOfWork pow = 3000;
}

message ProofOfWork {
  string tid = 1;
  uint64 nonce = 2;
}
