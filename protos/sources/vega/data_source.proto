syntax = "proto3";

package vega;

import "google/protobuf/struct.proto";
import "vega/data/v1/data.proto";
import "vega/data/v1/spec.proto";

option go_package = "code.vegaprotocol.io/vega/protos/vega";

// DataSourceDefinition represents the top level object that deals with data sources.
// DataSourceDefinition can be external or internal, with whatever number of data sources are defined
// for each type in the child objects below.
message DataSourceDefinition {
  oneof source_type {
    DataSourceDefinitionInternal internal = 1;
    DataSourceDefinitionExternal external = 2;
  }
}

// DataSourceSpecConfigurationTime is the internal data source used for emitting timestamps.
message DataSourceSpecConfigurationTime {
  // Conditions that the timestamps should meet in order to be considered.
  repeated vega.data.v1.Condition conditions = 1;
}

// DataSourceDefinitionInternal is the top level object used for all internal data sources.
// It contains one of any of the defined `SourceType` variants.
message DataSourceDefinitionInternal {
  // Types of internal data sources
  oneof source_type {
    DataSourceSpecConfigurationTime time = 1;
  }
}

// DataSourceDefinitionExternal is the top level object used for all external data sources.
// It contains one of any of the defined `SourceType` variants.
message DataSourceDefinitionExternal {
  // Types of External data sources
  oneof source_type {
    DataSourceSpecConfiguration oracle = 1;
    // Contains the data specification that is received from Ethereum sources.
    EthCallSpec eth_oracle = 2;
  }
}

// All types of external data sources use the same configuration set for meeting requirements
// in order for the data to be useful for Vega - valid signatures and matching filters.
message DataSourceSpecConfiguration {
  // Signers is the list of authorized signatures that signed the data for this
  // source. All the signatures in the data source data should be contained in this
  // external source. All the signatures in the data should be contained in this list.
  repeated vega.data.v1.Signer signers = 1;

  // Filters describes which source data are considered of interest or not for
  // the product (or the risk model).
  repeated vega.data.v1.Filter filters = 2;
}

// Specifies a data source that derives its content from calling a read method on an Ethereum contract.
message EthCallSpec {
  // Ethereum address of the contract to call.
  string address = 1;
  // The ABI of that contract.
  google.protobuf.ListValue abi = 2;
  // Name of the method on the contract to call.
  string method = 3;
  // List of arguments to pass to method call.
  // Protobuf 'Value' wraps an arbitrary JSON type that is mapped to an Ethereum type according to the ABI.
  repeated google.protobuf.Value args = 4;
  // Conditions for determining when to call the contract method.
  EthCallTrigger trigger = 5;
  // Number of confirmations required before the query is considered verified
  uint64 required_confirmations = 6;

  // Below - is this common across all sources? so should be on DataSourceDefinitionExternal?
  // Filters describes which source data are considered of interest
  EthFilter filter = 7;

  EthNormaliser normaliser = 8;
}

// Determines when the contract method should be called.
message EthCallTrigger {
  oneof trigger {
    EthTimeTrigger time_trigger = 1;
  }
}

// Trigger for an Ethereum call based on the Ethereum block timestamp. Can be one-off or repeating.
message EthTimeTrigger {
  // Trigger when the Ethereum time is greater or equal to this time, in Unix seconds.
  optional uint64 initial = 1;
  // Repeat the call every n seconds after the inital call. If no time for initial call was specified, begin repeating immediately.
  optional uint64 every = 2;
  // If repeating, stop once Ethereum time is greater than this time, in Unix seconds. If not set, then repeat indefinitely.
  optional uint64 until = 3;
}

message EthFilter {
  // Filters describes which source data are considered of interest
  repeated vega.data.v1.Filter filters = 1;
}

// Describes the types of normalisers used for different data sources.
message Normaliser {
  oneof normaliser {
    EthDecimalsNormaliser eth_decimals_normaliser = 1;
  }

  //  This is where decimals for chain link would go? -
}

message EthDecimalsNormaliser {
  int64 decimals = 1;
}

// Data source spec describes the data source base that a product or a risk model
// wants to get from the data source engine.
// This message contains additional information used by the API.
message DataSourceSpec {
  // Hash generated from the DataSpec data.
  string id = 1;
  // Creation date and time
  int64 created_at = 2;
  // Last Updated timestamp
  int64 updated_at = 3;

  DataSourceDefinition data = 4;

  // Status describes the status of the data source spec
  Status status = 5;

  // Status describe the status of the data source spec
  enum Status {
    // Default value.
    STATUS_UNSPECIFIED = 0;
    // STATUS_ACTIVE describes an active data source spec.
    STATUS_ACTIVE = 1;
    // STATUS_DEACTIVATED describes an data source spec that is not listening to data
    // anymore.
    STATUS_DEACTIVATED = 2;
  }
}

message ExternalDataSourceSpec {
  DataSourceSpec spec = 1;
}
