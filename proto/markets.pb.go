// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/markets.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An auction duration is used to configure 3 auction periods:
// 1. `duration > 0`, `volume == 0`:
//   The auction will last for at least N seconds.
// 2. `duration == 0`, `volume > 0`:
//   The auction will end once we can close with given traded volume.
// 3. `duration > 0`, `volume > 0`:
//   The auction will take at least N seconds, but can end sooner if we can trade a certain volume.
type AuctionDuration struct {
	// Duration of the auction in seconds.
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	//Target uncrossing trading volume.
	Volume               uint64   `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuctionDuration) Reset()         { *m = AuctionDuration{} }
func (m *AuctionDuration) String() string { return proto.CompactTextString(m) }
func (*AuctionDuration) ProtoMessage()    {}
func (*AuctionDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{0}
}

func (m *AuctionDuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionDuration.Unmarshal(m, b)
}
func (m *AuctionDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionDuration.Marshal(b, m, deterministic)
}
func (m *AuctionDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionDuration.Merge(m, src)
}
func (m *AuctionDuration) XXX_Size() int {
	return xxx_messageInfo_AuctionDuration.Size(m)
}
func (m *AuctionDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionDuration.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionDuration proto.InternalMessageInfo

func (m *AuctionDuration) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AuctionDuration) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

// Continuous trading.
type ContinuousTrading struct {
	// Tick size.
	TickSize             string   `protobuf:"bytes,1,opt,name=tickSize,proto3" json:"tickSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContinuousTrading) Reset()         { *m = ContinuousTrading{} }
func (m *ContinuousTrading) String() string { return proto.CompactTextString(m) }
func (*ContinuousTrading) ProtoMessage()    {}
func (*ContinuousTrading) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{1}
}

func (m *ContinuousTrading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContinuousTrading.Unmarshal(m, b)
}
func (m *ContinuousTrading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContinuousTrading.Marshal(b, m, deterministic)
}
func (m *ContinuousTrading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinuousTrading.Merge(m, src)
}
func (m *ContinuousTrading) XXX_Size() int {
	return xxx_messageInfo_ContinuousTrading.Size(m)
}
func (m *ContinuousTrading) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinuousTrading.DiscardUnknown(m)
}

var xxx_messageInfo_ContinuousTrading proto.InternalMessageInfo

func (m *ContinuousTrading) GetTickSize() string {
	if m != nil {
		return m.TickSize
	}
	return ""
}

// Discrete trading.
type DiscreteTrading struct {
	// Duration in nanoseconds, maximum 1 month (2592000000000000 ns)
	DurationNs int64 `protobuf:"varint,1,opt,name=durationNs,proto3" json:"durationNs,omitempty"`
	// Tick size.
	TickSize             string   `protobuf:"bytes,2,opt,name=tickSize,proto3" json:"tickSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscreteTrading) Reset()         { *m = DiscreteTrading{} }
func (m *DiscreteTrading) String() string { return proto.CompactTextString(m) }
func (*DiscreteTrading) ProtoMessage()    {}
func (*DiscreteTrading) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{2}
}

func (m *DiscreteTrading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscreteTrading.Unmarshal(m, b)
}
func (m *DiscreteTrading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscreteTrading.Marshal(b, m, deterministic)
}
func (m *DiscreteTrading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscreteTrading.Merge(m, src)
}
func (m *DiscreteTrading) XXX_Size() int {
	return xxx_messageInfo_DiscreteTrading.Size(m)
}
func (m *DiscreteTrading) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscreteTrading.DiscardUnknown(m)
}

var xxx_messageInfo_DiscreteTrading proto.InternalMessageInfo

func (m *DiscreteTrading) GetDurationNs() int64 {
	if m != nil {
		return m.DurationNs
	}
	return 0
}

func (m *DiscreteTrading) GetTickSize() string {
	if m != nil {
		return m.TickSize
	}
	return ""
}

// Future product definition.
type Future struct {
	// The maturity for the future.
	Maturity string `protobuf:"bytes,1,opt,name=maturity,proto3" json:"maturity,omitempty"`
	// The asset for the future.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Oracle configuration.
	//
	// Types that are valid to be assigned to Oracle:
	//	*Future_EthereumEvent
	Oracle               isFuture_Oracle `protobuf_oneof:"oracle"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Future) Reset()         { *m = Future{} }
func (m *Future) String() string { return proto.CompactTextString(m) }
func (*Future) ProtoMessage()    {}
func (*Future) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{3}
}

func (m *Future) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Future.Unmarshal(m, b)
}
func (m *Future) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Future.Marshal(b, m, deterministic)
}
func (m *Future) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Future.Merge(m, src)
}
func (m *Future) XXX_Size() int {
	return xxx_messageInfo_Future.Size(m)
}
func (m *Future) XXX_DiscardUnknown() {
	xxx_messageInfo_Future.DiscardUnknown(m)
}

var xxx_messageInfo_Future proto.InternalMessageInfo

func (m *Future) GetMaturity() string {
	if m != nil {
		return m.Maturity
	}
	return ""
}

func (m *Future) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

type isFuture_Oracle interface {
	isFuture_Oracle()
}

type Future_EthereumEvent struct {
	EthereumEvent *EthereumEvent `protobuf:"bytes,100,opt,name=ethereumEvent,proto3,oneof"`
}

func (*Future_EthereumEvent) isFuture_Oracle() {}

func (m *Future) GetOracle() isFuture_Oracle {
	if m != nil {
		return m.Oracle
	}
	return nil
}

func (m *Future) GetEthereumEvent() *EthereumEvent {
	if x, ok := m.GetOracle().(*Future_EthereumEvent); ok {
		return x.EthereumEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Future) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Future_EthereumEvent)(nil),
	}
}

// Ethereum event (for oracles).
type EthereumEvent struct {
	// Ethereum contract identifier.
	ContractID string `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	// Event.
	Event string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// Value.
	Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthereumEvent) Reset()         { *m = EthereumEvent{} }
func (m *EthereumEvent) String() string { return proto.CompactTextString(m) }
func (*EthereumEvent) ProtoMessage()    {}
func (*EthereumEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{4}
}

func (m *EthereumEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthereumEvent.Unmarshal(m, b)
}
func (m *EthereumEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthereumEvent.Marshal(b, m, deterministic)
}
func (m *EthereumEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthereumEvent.Merge(m, src)
}
func (m *EthereumEvent) XXX_Size() int {
	return xxx_messageInfo_EthereumEvent.Size(m)
}
func (m *EthereumEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EthereumEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EthereumEvent proto.InternalMessageInfo

func (m *EthereumEvent) GetContractID() string {
	if m != nil {
		return m.ContractID
	}
	return ""
}

func (m *EthereumEvent) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EthereumEvent) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Instrument metadata definition.
type InstrumentMetadata struct {
	// A list of 0 or more tags.
	Tags                 []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentMetadata) Reset()         { *m = InstrumentMetadata{} }
func (m *InstrumentMetadata) String() string { return proto.CompactTextString(m) }
func (*InstrumentMetadata) ProtoMessage()    {}
func (*InstrumentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{5}
}

func (m *InstrumentMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentMetadata.Unmarshal(m, b)
}
func (m *InstrumentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentMetadata.Marshal(b, m, deterministic)
}
func (m *InstrumentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentMetadata.Merge(m, src)
}
func (m *InstrumentMetadata) XXX_Size() int {
	return xxx_messageInfo_InstrumentMetadata.Size(m)
}
func (m *InstrumentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentMetadata proto.InternalMessageInfo

func (m *InstrumentMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Instrument definition.
type Instrument struct {
	// Instrument identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Code for the instrument.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Name of the instrument.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Base name of the instrument.
	BaseName string `protobuf:"bytes,4,opt,name=baseName,proto3" json:"baseName,omitempty"`
	// Quote name of the instrument.
	QuoteName string `protobuf:"bytes,5,opt,name=quoteName,proto3" json:"quoteName,omitempty"`
	// A collection of instrument meta-data.
	Metadata *InstrumentMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// An initial mark price for the instrument.
	InitialMarkPrice uint64 `protobuf:"varint,7,opt,name=initialMarkPrice,proto3" json:"initialMarkPrice,omitempty"`
	// The product the instrument is composed of.
	//
	// Types that are valid to be assigned to Product:
	//	*Instrument_Future
	Product              isInstrument_Product `protobuf_oneof:"product"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{6}
}

func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (m *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(m, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Instrument) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Instrument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instrument) GetBaseName() string {
	if m != nil {
		return m.BaseName
	}
	return ""
}

func (m *Instrument) GetQuoteName() string {
	if m != nil {
		return m.QuoteName
	}
	return ""
}

func (m *Instrument) GetMetadata() *InstrumentMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Instrument) GetInitialMarkPrice() uint64 {
	if m != nil {
		return m.InitialMarkPrice
	}
	return 0
}

type isInstrument_Product interface {
	isInstrument_Product()
}

type Instrument_Future struct {
	Future *Future `protobuf:"bytes,100,opt,name=future,proto3,oneof"`
}

func (*Instrument_Future) isInstrument_Product() {}

func (m *Instrument) GetProduct() isInstrument_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *Instrument) GetFuture() *Future {
	if x, ok := m.GetProduct().(*Instrument_Future); ok {
		return x.Future
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Instrument) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Instrument_Future)(nil),
	}
}

// Risk model for log normal.
type LogNormalRiskModel struct {
	// Risk Aversion Parameter.
	RiskAversionParameter float64 `protobuf:"fixed64,1,opt,name=riskAversionParameter,proto3" json:"riskAversionParameter,omitempty"`
	// Tau.
	Tau float64 `protobuf:"fixed64,2,opt,name=tau,proto3" json:"tau,omitempty"`
	// Risk model parameters for log normal.
	Params               *LogNormalModelParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LogNormalRiskModel) Reset()         { *m = LogNormalRiskModel{} }
func (m *LogNormalRiskModel) String() string { return proto.CompactTextString(m) }
func (*LogNormalRiskModel) ProtoMessage()    {}
func (*LogNormalRiskModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{7}
}

func (m *LogNormalRiskModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNormalRiskModel.Unmarshal(m, b)
}
func (m *LogNormalRiskModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNormalRiskModel.Marshal(b, m, deterministic)
}
func (m *LogNormalRiskModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNormalRiskModel.Merge(m, src)
}
func (m *LogNormalRiskModel) XXX_Size() int {
	return xxx_messageInfo_LogNormalRiskModel.Size(m)
}
func (m *LogNormalRiskModel) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNormalRiskModel.DiscardUnknown(m)
}

var xxx_messageInfo_LogNormalRiskModel proto.InternalMessageInfo

func (m *LogNormalRiskModel) GetRiskAversionParameter() float64 {
	if m != nil {
		return m.RiskAversionParameter
	}
	return 0
}

func (m *LogNormalRiskModel) GetTau() float64 {
	if m != nil {
		return m.Tau
	}
	return 0
}

func (m *LogNormalRiskModel) GetParams() *LogNormalModelParams {
	if m != nil {
		return m.Params
	}
	return nil
}

// Risk model parameters for log normal.
type LogNormalModelParams struct {
	// Mu param.
	Mu float64 `protobuf:"fixed64,1,opt,name=mu,proto3" json:"mu,omitempty"`
	// R param.
	R float64 `protobuf:"fixed64,2,opt,name=r,proto3" json:"r,omitempty"`
	// Sigma param.
	Sigma                float64  `protobuf:"fixed64,3,opt,name=sigma,proto3" json:"sigma,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogNormalModelParams) Reset()         { *m = LogNormalModelParams{} }
func (m *LogNormalModelParams) String() string { return proto.CompactTextString(m) }
func (*LogNormalModelParams) ProtoMessage()    {}
func (*LogNormalModelParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{8}
}

func (m *LogNormalModelParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNormalModelParams.Unmarshal(m, b)
}
func (m *LogNormalModelParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNormalModelParams.Marshal(b, m, deterministic)
}
func (m *LogNormalModelParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNormalModelParams.Merge(m, src)
}
func (m *LogNormalModelParams) XXX_Size() int {
	return xxx_messageInfo_LogNormalModelParams.Size(m)
}
func (m *LogNormalModelParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNormalModelParams.DiscardUnknown(m)
}

var xxx_messageInfo_LogNormalModelParams proto.InternalMessageInfo

func (m *LogNormalModelParams) GetMu() float64 {
	if m != nil {
		return m.Mu
	}
	return 0
}

func (m *LogNormalModelParams) GetR() float64 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *LogNormalModelParams) GetSigma() float64 {
	if m != nil {
		return m.Sigma
	}
	return 0
}

// Risk model for simple modelling.
type SimpleRiskModel struct {
	// Risk model params for simple modelling.
	Params               *SimpleModelParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SimpleRiskModel) Reset()         { *m = SimpleRiskModel{} }
func (m *SimpleRiskModel) String() string { return proto.CompactTextString(m) }
func (*SimpleRiskModel) ProtoMessage()    {}
func (*SimpleRiskModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{9}
}

func (m *SimpleRiskModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRiskModel.Unmarshal(m, b)
}
func (m *SimpleRiskModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRiskModel.Marshal(b, m, deterministic)
}
func (m *SimpleRiskModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRiskModel.Merge(m, src)
}
func (m *SimpleRiskModel) XXX_Size() int {
	return xxx_messageInfo_SimpleRiskModel.Size(m)
}
func (m *SimpleRiskModel) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRiskModel.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRiskModel proto.InternalMessageInfo

func (m *SimpleRiskModel) GetParams() *SimpleModelParams {
	if m != nil {
		return m.Params
	}
	return nil
}

// Risk model parameters for simple modelling.
type SimpleModelParams struct {
	// Pre-defined risk factor value for long.
	FactorLong float64 `protobuf:"fixed64,1,opt,name=factorLong,proto3" json:"factorLong,omitempty"`
	// Pre-defined risk factor value for short.
	FactorShort float64 `protobuf:"fixed64,2,opt,name=factorShort,proto3" json:"factorShort,omitempty"`
	// Pre-defined maximum price move up that the model considers as valid.
	MaxMoveUp float64 `protobuf:"fixed64,3,opt,name=maxMoveUp,proto3" json:"maxMoveUp,omitempty"`
	// Pre-defined minimum price move down that the model considers as valid.
	MinMoveDown          float64  `protobuf:"fixed64,4,opt,name=minMoveDown,proto3" json:"minMoveDown,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleModelParams) Reset()         { *m = SimpleModelParams{} }
func (m *SimpleModelParams) String() string { return proto.CompactTextString(m) }
func (*SimpleModelParams) ProtoMessage()    {}
func (*SimpleModelParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{10}
}

func (m *SimpleModelParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleModelParams.Unmarshal(m, b)
}
func (m *SimpleModelParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleModelParams.Marshal(b, m, deterministic)
}
func (m *SimpleModelParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleModelParams.Merge(m, src)
}
func (m *SimpleModelParams) XXX_Size() int {
	return xxx_messageInfo_SimpleModelParams.Size(m)
}
func (m *SimpleModelParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleModelParams.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleModelParams proto.InternalMessageInfo

func (m *SimpleModelParams) GetFactorLong() float64 {
	if m != nil {
		return m.FactorLong
	}
	return 0
}

func (m *SimpleModelParams) GetFactorShort() float64 {
	if m != nil {
		return m.FactorShort
	}
	return 0
}

func (m *SimpleModelParams) GetMaxMoveUp() float64 {
	if m != nil {
		return m.MaxMoveUp
	}
	return 0
}

func (m *SimpleModelParams) GetMinMoveDown() float64 {
	if m != nil {
		return m.MinMoveDown
	}
	return 0
}

// Risk model for external modelling.
// Provided by external service via a Unix socket.
type ExternalRiskModel struct {
	// Name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Local machine socket to connect to.
	Socket string `protobuf:"bytes,2,opt,name=socket,proto3" json:"socket,omitempty"`
	// Collection of configuration items.
	Config               map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExternalRiskModel) Reset()         { *m = ExternalRiskModel{} }
func (m *ExternalRiskModel) String() string { return proto.CompactTextString(m) }
func (*ExternalRiskModel) ProtoMessage()    {}
func (*ExternalRiskModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{11}
}

func (m *ExternalRiskModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExternalRiskModel.Unmarshal(m, b)
}
func (m *ExternalRiskModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExternalRiskModel.Marshal(b, m, deterministic)
}
func (m *ExternalRiskModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalRiskModel.Merge(m, src)
}
func (m *ExternalRiskModel) XXX_Size() int {
	return xxx_messageInfo_ExternalRiskModel.Size(m)
}
func (m *ExternalRiskModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalRiskModel.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalRiskModel proto.InternalMessageInfo

func (m *ExternalRiskModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExternalRiskModel) GetSocket() string {
	if m != nil {
		return m.Socket
	}
	return ""
}

func (m *ExternalRiskModel) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

// Scaling Factors (for use in margin calculation).
type ScalingFactors struct {
	// Search level.
	SearchLevel float64 `protobuf:"fixed64,1,opt,name=searchLevel,proto3" json:"searchLevel,omitempty"`
	// Initial margin level.
	InitialMargin float64 `protobuf:"fixed64,2,opt,name=initialMargin,proto3" json:"initialMargin,omitempty"`
	// Collateral release level.
	CollateralRelease    float64  `protobuf:"fixed64,3,opt,name=collateralRelease,proto3" json:"collateralRelease,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScalingFactors) Reset()         { *m = ScalingFactors{} }
func (m *ScalingFactors) String() string { return proto.CompactTextString(m) }
func (*ScalingFactors) ProtoMessage()    {}
func (*ScalingFactors) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{12}
}

func (m *ScalingFactors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScalingFactors.Unmarshal(m, b)
}
func (m *ScalingFactors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScalingFactors.Marshal(b, m, deterministic)
}
func (m *ScalingFactors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalingFactors.Merge(m, src)
}
func (m *ScalingFactors) XXX_Size() int {
	return xxx_messageInfo_ScalingFactors.Size(m)
}
func (m *ScalingFactors) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalingFactors.DiscardUnknown(m)
}

var xxx_messageInfo_ScalingFactors proto.InternalMessageInfo

func (m *ScalingFactors) GetSearchLevel() float64 {
	if m != nil {
		return m.SearchLevel
	}
	return 0
}

func (m *ScalingFactors) GetInitialMargin() float64 {
	if m != nil {
		return m.InitialMargin
	}
	return 0
}

func (m *ScalingFactors) GetCollateralRelease() float64 {
	if m != nil {
		return m.CollateralRelease
	}
	return 0
}

// Margin Calculator definition.
type MarginCalculator struct {
	// Scaling factors for margin calculation.
	ScalingFactors       *ScalingFactors `protobuf:"bytes,1,opt,name=scalingFactors,proto3" json:"scalingFactors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MarginCalculator) Reset()         { *m = MarginCalculator{} }
func (m *MarginCalculator) String() string { return proto.CompactTextString(m) }
func (*MarginCalculator) ProtoMessage()    {}
func (*MarginCalculator) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{13}
}

func (m *MarginCalculator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginCalculator.Unmarshal(m, b)
}
func (m *MarginCalculator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginCalculator.Marshal(b, m, deterministic)
}
func (m *MarginCalculator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginCalculator.Merge(m, src)
}
func (m *MarginCalculator) XXX_Size() int {
	return xxx_messageInfo_MarginCalculator.Size(m)
}
func (m *MarginCalculator) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginCalculator.DiscardUnknown(m)
}

var xxx_messageInfo_MarginCalculator proto.InternalMessageInfo

func (m *MarginCalculator) GetScalingFactors() *ScalingFactors {
	if m != nil {
		return m.ScalingFactors
	}
	return nil
}

// Tradable Instrument definition.
type TradableInstrument struct {
	// Instrument details.
	Instrument *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Margin calculator for the instrument.
	MarginCalculator *MarginCalculator `protobuf:"bytes,2,opt,name=marginCalculator,proto3" json:"marginCalculator,omitempty"`
	// Risk model for use by the instrument.
	//
	// Types that are valid to be assigned to RiskModel:
	//	*TradableInstrument_LogNormalRiskModel
	//	*TradableInstrument_ExternalRiskModel
	//	*TradableInstrument_SimpleRiskModel
	RiskModel            isTradableInstrument_RiskModel `protobuf_oneof:"riskModel"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TradableInstrument) Reset()         { *m = TradableInstrument{} }
func (m *TradableInstrument) String() string { return proto.CompactTextString(m) }
func (*TradableInstrument) ProtoMessage()    {}
func (*TradableInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{14}
}

func (m *TradableInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradableInstrument.Unmarshal(m, b)
}
func (m *TradableInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradableInstrument.Marshal(b, m, deterministic)
}
func (m *TradableInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradableInstrument.Merge(m, src)
}
func (m *TradableInstrument) XXX_Size() int {
	return xxx_messageInfo_TradableInstrument.Size(m)
}
func (m *TradableInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_TradableInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_TradableInstrument proto.InternalMessageInfo

func (m *TradableInstrument) GetInstrument() *Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (m *TradableInstrument) GetMarginCalculator() *MarginCalculator {
	if m != nil {
		return m.MarginCalculator
	}
	return nil
}

type isTradableInstrument_RiskModel interface {
	isTradableInstrument_RiskModel()
}

type TradableInstrument_LogNormalRiskModel struct {
	LogNormalRiskModel *LogNormalRiskModel `protobuf:"bytes,100,opt,name=logNormalRiskModel,proto3,oneof"`
}

type TradableInstrument_ExternalRiskModel struct {
	ExternalRiskModel *ExternalRiskModel `protobuf:"bytes,101,opt,name=externalRiskModel,proto3,oneof"`
}

type TradableInstrument_SimpleRiskModel struct {
	SimpleRiskModel *SimpleRiskModel `protobuf:"bytes,102,opt,name=simpleRiskModel,proto3,oneof"`
}

func (*TradableInstrument_LogNormalRiskModel) isTradableInstrument_RiskModel() {}

func (*TradableInstrument_ExternalRiskModel) isTradableInstrument_RiskModel() {}

func (*TradableInstrument_SimpleRiskModel) isTradableInstrument_RiskModel() {}

func (m *TradableInstrument) GetRiskModel() isTradableInstrument_RiskModel {
	if m != nil {
		return m.RiskModel
	}
	return nil
}

func (m *TradableInstrument) GetLogNormalRiskModel() *LogNormalRiskModel {
	if x, ok := m.GetRiskModel().(*TradableInstrument_LogNormalRiskModel); ok {
		return x.LogNormalRiskModel
	}
	return nil
}

func (m *TradableInstrument) GetExternalRiskModel() *ExternalRiskModel {
	if x, ok := m.GetRiskModel().(*TradableInstrument_ExternalRiskModel); ok {
		return x.ExternalRiskModel
	}
	return nil
}

func (m *TradableInstrument) GetSimpleRiskModel() *SimpleRiskModel {
	if x, ok := m.GetRiskModel().(*TradableInstrument_SimpleRiskModel); ok {
		return x.SimpleRiskModel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TradableInstrument) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TradableInstrument_LogNormalRiskModel)(nil),
		(*TradableInstrument_ExternalRiskModel)(nil),
		(*TradableInstrument_SimpleRiskModel)(nil),
	}
}

// Fee factors definition.
type FeeFactors struct {
	// Maker fee.
	MakerFee string `protobuf:"bytes,1,opt,name=makerFee,proto3" json:"makerFee,omitempty"`
	// Infrastructure fee.
	InfrastructureFee string `protobuf:"bytes,2,opt,name=infrastructureFee,proto3" json:"infrastructureFee,omitempty"`
	// Liquidity fee.
	LiquidityFee         string   `protobuf:"bytes,3,opt,name=liquidityFee,proto3" json:"liquidityFee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeeFactors) Reset()         { *m = FeeFactors{} }
func (m *FeeFactors) String() string { return proto.CompactTextString(m) }
func (*FeeFactors) ProtoMessage()    {}
func (*FeeFactors) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{15}
}

func (m *FeeFactors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeeFactors.Unmarshal(m, b)
}
func (m *FeeFactors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeeFactors.Marshal(b, m, deterministic)
}
func (m *FeeFactors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeFactors.Merge(m, src)
}
func (m *FeeFactors) XXX_Size() int {
	return xxx_messageInfo_FeeFactors.Size(m)
}
func (m *FeeFactors) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeFactors.DiscardUnknown(m)
}

var xxx_messageInfo_FeeFactors proto.InternalMessageInfo

func (m *FeeFactors) GetMakerFee() string {
	if m != nil {
		return m.MakerFee
	}
	return ""
}

func (m *FeeFactors) GetInfrastructureFee() string {
	if m != nil {
		return m.InfrastructureFee
	}
	return ""
}

func (m *FeeFactors) GetLiquidityFee() string {
	if m != nil {
		return m.LiquidityFee
	}
	return ""
}

// Fees definition.
type Fees struct {
	// Fee factors.
	Factors              *FeeFactors `protobuf:"bytes,1,opt,name=factors,proto3" json:"factors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Fees) Reset()         { *m = Fees{} }
func (m *Fees) String() string { return proto.CompactTextString(m) }
func (*Fees) ProtoMessage()    {}
func (*Fees) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{16}
}

func (m *Fees) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fees.Unmarshal(m, b)
}
func (m *Fees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fees.Marshal(b, m, deterministic)
}
func (m *Fees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fees.Merge(m, src)
}
func (m *Fees) XXX_Size() int {
	return xxx_messageInfo_Fees.Size(m)
}
func (m *Fees) XXX_DiscardUnknown() {
	xxx_messageInfo_Fees.DiscardUnknown(m)
}

var xxx_messageInfo_Fees proto.InternalMessageInfo

func (m *Fees) GetFactors() *FeeFactors {
	if m != nil {
		return m.Factors
	}
	return nil
}

// PriceMonitoringParameters holds together price projection horizon τ, probability level p, and auction extension duration
type PriceMonitoringParameters struct {
	// Price monitoring projection horizon τ in seconds.
	Horizon int64 `protobuf:"varint,1,opt,name=horizon,proto3" json:"horizon,omitempty"`
	// Price monitoirng probability level p.
	Probability float64 `protobuf:"fixed64,2,opt,name=probability,proto3" json:"probability,omitempty"`
	// Price monitoring auction extension duration in seconds should the price
	// breach it's theoretical level over the specified horizon at the specified
	// probability level.
	AuctionExtension     int64    `protobuf:"varint,3,opt,name=auctionExtension,proto3" json:"auctionExtension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceMonitoringParameters) Reset()         { *m = PriceMonitoringParameters{} }
func (m *PriceMonitoringParameters) String() string { return proto.CompactTextString(m) }
func (*PriceMonitoringParameters) ProtoMessage()    {}
func (*PriceMonitoringParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{17}
}

func (m *PriceMonitoringParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceMonitoringParameters.Unmarshal(m, b)
}
func (m *PriceMonitoringParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceMonitoringParameters.Marshal(b, m, deterministic)
}
func (m *PriceMonitoringParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceMonitoringParameters.Merge(m, src)
}
func (m *PriceMonitoringParameters) XXX_Size() int {
	return xxx_messageInfo_PriceMonitoringParameters.Size(m)
}
func (m *PriceMonitoringParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceMonitoringParameters.DiscardUnknown(m)
}

var xxx_messageInfo_PriceMonitoringParameters proto.InternalMessageInfo

func (m *PriceMonitoringParameters) GetHorizon() int64 {
	if m != nil {
		return m.Horizon
	}
	return 0
}

func (m *PriceMonitoringParameters) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *PriceMonitoringParameters) GetAuctionExtension() int64 {
	if m != nil {
		return m.AuctionExtension
	}
	return 0
}

type PriceMonitoringSettings struct {
	// Specifies a set of PriceMonitoringParameters to be used for price
	// monitoring purposes
	Parameters           []*PriceMonitoringParameters `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *PriceMonitoringSettings) Reset()         { *m = PriceMonitoringSettings{} }
func (m *PriceMonitoringSettings) String() string { return proto.CompactTextString(m) }
func (*PriceMonitoringSettings) ProtoMessage()    {}
func (*PriceMonitoringSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{18}
}

func (m *PriceMonitoringSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceMonitoringSettings.Unmarshal(m, b)
}
func (m *PriceMonitoringSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceMonitoringSettings.Marshal(b, m, deterministic)
}
func (m *PriceMonitoringSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceMonitoringSettings.Merge(m, src)
}
func (m *PriceMonitoringSettings) XXX_Size() int {
	return xxx_messageInfo_PriceMonitoringSettings.Size(m)
}
func (m *PriceMonitoringSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceMonitoringSettings.DiscardUnknown(m)
}

var xxx_messageInfo_PriceMonitoringSettings proto.InternalMessageInfo

func (m *PriceMonitoringSettings) GetParameters() []*PriceMonitoringParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// Market definition.
type Market struct {
	// Unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tradable instrument configuration.
	TradableInstrument *TradableInstrument `protobuf:"bytes,2,opt,name=tradableInstrument,proto3" json:"tradableInstrument,omitempty"`
	// Number of decimal places that a price must be shifted by in order to get a
	// correct price denominated in the currency of the market. For example:
	// `realPrice = price / 10^decimalPlaces`
	DecimalPlaces uint64 `protobuf:"varint,3,opt,name=decimalPlaces,proto3" json:"decimalPlaces,omitempty"`
	// Fees configuration.
	Fees *Fees `protobuf:"bytes,4,opt,name=fees,proto3" json:"fees,omitempty"`
	// Auction duration specifies how long the opening auction will run (minimum
	// duration and optionally a minimum traded volume).
	OpeningAuction *AuctionDuration `protobuf:"bytes,5,opt,name=openingAuction,proto3" json:"openingAuction,omitempty"`
	// Trading mode for the market.
	//
	// Types that are valid to be assigned to TradingMode:
	//	*Market_Continuous
	//	*Market_Discrete
	TradingMode isMarket_TradingMode `protobuf_oneof:"tradingMode"`
	// PriceMonitoringSettings for the market.
	PriceMonitoringSettings *PriceMonitoringSettings `protobuf:"bytes,6,opt,name=priceMonitoringSettings,proto3" json:"priceMonitoringSettings,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                 `json:"-"`
	XXX_unrecognized        []byte                   `json:"-"`
	XXX_sizecache           int32                    `json:"-"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef38c4b9a7594dbd, []int{19}
}

func (m *Market) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Market.Unmarshal(m, b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Market.Marshal(b, m, deterministic)
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return xxx_messageInfo_Market.Size(m)
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Market) GetTradableInstrument() *TradableInstrument {
	if m != nil {
		return m.TradableInstrument
	}
	return nil
}

func (m *Market) GetDecimalPlaces() uint64 {
	if m != nil {
		return m.DecimalPlaces
	}
	return 0
}

func (m *Market) GetFees() *Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Market) GetOpeningAuction() *AuctionDuration {
	if m != nil {
		return m.OpeningAuction
	}
	return nil
}

type isMarket_TradingMode interface {
	isMarket_TradingMode()
}

type Market_Continuous struct {
	Continuous *ContinuousTrading `protobuf:"bytes,100,opt,name=continuous,proto3,oneof"`
}

type Market_Discrete struct {
	Discrete *DiscreteTrading `protobuf:"bytes,101,opt,name=discrete,proto3,oneof"`
}

func (*Market_Continuous) isMarket_TradingMode() {}

func (*Market_Discrete) isMarket_TradingMode() {}

func (m *Market) GetTradingMode() isMarket_TradingMode {
	if m != nil {
		return m.TradingMode
	}
	return nil
}

func (m *Market) GetContinuous() *ContinuousTrading {
	if x, ok := m.GetTradingMode().(*Market_Continuous); ok {
		return x.Continuous
	}
	return nil
}

func (m *Market) GetDiscrete() *DiscreteTrading {
	if x, ok := m.GetTradingMode().(*Market_Discrete); ok {
		return x.Discrete
	}
	return nil
}

func (m *Market) GetPriceMonitoringSettings() *PriceMonitoringSettings {
	if m != nil {
		return m.PriceMonitoringSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Market) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Market_Continuous)(nil),
		(*Market_Discrete)(nil),
	}
}

func init() {
	proto.RegisterType((*AuctionDuration)(nil), "vega.AuctionDuration")
	proto.RegisterType((*ContinuousTrading)(nil), "vega.ContinuousTrading")
	proto.RegisterType((*DiscreteTrading)(nil), "vega.DiscreteTrading")
	proto.RegisterType((*Future)(nil), "vega.Future")
	proto.RegisterType((*EthereumEvent)(nil), "vega.EthereumEvent")
	proto.RegisterType((*InstrumentMetadata)(nil), "vega.InstrumentMetadata")
	proto.RegisterType((*Instrument)(nil), "vega.Instrument")
	proto.RegisterType((*LogNormalRiskModel)(nil), "vega.LogNormalRiskModel")
	proto.RegisterType((*LogNormalModelParams)(nil), "vega.LogNormalModelParams")
	proto.RegisterType((*SimpleRiskModel)(nil), "vega.SimpleRiskModel")
	proto.RegisterType((*SimpleModelParams)(nil), "vega.SimpleModelParams")
	proto.RegisterType((*ExternalRiskModel)(nil), "vega.ExternalRiskModel")
	proto.RegisterMapType((map[string]string)(nil), "vega.ExternalRiskModel.ConfigEntry")
	proto.RegisterType((*ScalingFactors)(nil), "vega.ScalingFactors")
	proto.RegisterType((*MarginCalculator)(nil), "vega.MarginCalculator")
	proto.RegisterType((*TradableInstrument)(nil), "vega.TradableInstrument")
	proto.RegisterType((*FeeFactors)(nil), "vega.FeeFactors")
	proto.RegisterType((*Fees)(nil), "vega.Fees")
	proto.RegisterType((*PriceMonitoringParameters)(nil), "vega.PriceMonitoringParameters")
	proto.RegisterType((*PriceMonitoringSettings)(nil), "vega.PriceMonitoringSettings")
	proto.RegisterType((*Market)(nil), "vega.Market")
}

func init() { proto.RegisterFile("proto/markets.proto", fileDescriptor_ef38c4b9a7594dbd) }

var fileDescriptor_ef38c4b9a7594dbd = []byte{
	// 1328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xf7, 0xd9, 0xae, 0x13, 0x8f, 0x9b, 0xc4, 0xd9, 0xb6, 0xa9, 0x89, 0xa0, 0x09, 0x07, 0x42,
	0x51, 0xa1, 0x31, 0xb8, 0x15, 0x6a, 0x29, 0xa8, 0xaa, 0x9b, 0x04, 0xb7, 0x6a, 0xaa, 0xb0, 0x01,
	0x21, 0x15, 0x09, 0x69, 0x73, 0x5e, 0x5f, 0x56, 0xbe, 0xbb, 0x75, 0xf7, 0xf6, 0xdc, 0x3f, 0x4f,
	0xe5, 0x05, 0xf1, 0x58, 0x89, 0x8f, 0x81, 0x78, 0xe2, 0x01, 0x89, 0x17, 0x3e, 0x01, 0x9f, 0x21,
	0x52, 0xbe, 0x00, 0x7c, 0x04, 0xb4, 0x7f, 0xee, 0x7c, 0xbe, 0x73, 0xfd, 0xe2, 0x9d, 0x99, 0xdf,
	0xfc, 0xb9, 0xd9, 0x99, 0xd9, 0x81, 0x4b, 0x13, 0xc1, 0x25, 0xef, 0x86, 0x44, 0x8c, 0xa9, 0x8c,
	0x77, 0x35, 0x85, 0xea, 0x53, 0xea, 0x93, 0xcd, 0xcf, 0x7d, 0x26, 0x4f, 0x93, 0x93, 0x5d, 0x8f,
	0x87, 0xdd, 0xf0, 0x39, 0x93, 0x63, 0xfe, 0xbc, 0xeb, 0xf3, 0x1b, 0x1a, 0x72, 0x63, 0x4a, 0x02,
	0x36, 0x24, 0x92, 0x8b, 0xb8, 0x9b, 0x1d, 0x8d, 0xb6, 0xbb, 0x0f, 0x6b, 0xf7, 0x13, 0x4f, 0x32,
	0x1e, 0xed, 0x25, 0x82, 0xa8, 0x7f, 0xb4, 0x09, 0xcb, 0x43, 0x7b, 0xee, 0x38, 0xdb, 0xce, 0x4e,
	0x0d, 0x67, 0x34, 0xda, 0x80, 0xc6, 0x94, 0x07, 0x49, 0x48, 0x3b, 0xd5, 0x6d, 0x67, 0xa7, 0x8e,
	0x2d, 0xe5, 0x76, 0x61, 0xfd, 0x01, 0x8f, 0x24, 0x8b, 0x12, 0x9e, 0xc4, 0xdf, 0x0a, 0x32, 0x64,
	0x91, 0xaf, 0x0c, 0x49, 0xe6, 0x8d, 0x8f, 0xd9, 0x2b, 0xaa, 0x0d, 0x35, 0x71, 0x46, 0xbb, 0x3f,
	0xc2, 0xda, 0x1e, 0x8b, 0x3d, 0x41, 0x25, 0x4d, 0xe1, 0x5d, 0x80, 0xd4, 0xcf, 0x93, 0xd8, 0x78,
	0xee, 0xaf, 0x9d, 0x9f, 0x6d, 0xb5, 0xda, 0x95, 0xce, 0xeb, 0xd7, 0xbf, 0xfc, 0xf5, 0xe6, 0xf7,
	0x7f, 0xea, 0x38, 0x07, 0x99, 0xb3, 0x5f, 0x2d, 0xd8, 0xff, 0xc9, 0x81, 0xc6, 0x41, 0x22, 0x13,
	0x41, 0x15, 0x2c, 0x24, 0x32, 0x11, 0x4c, 0xbe, 0x4c, 0xc3, 0x48, 0x69, 0x74, 0x19, 0x2e, 0x90,
	0x38, 0xa6, 0xd2, 0xea, 0x1b, 0x02, 0xdd, 0x85, 0x15, 0x2a, 0x4f, 0xa9, 0xa0, 0x49, 0xb8, 0x3f,
	0xa5, 0x91, 0xec, 0x0c, 0xb7, 0x9d, 0x9d, 0x56, 0xef, 0xd2, 0xae, 0x4a, 0xf5, 0xee, 0x7e, 0x5e,
	0x34, 0xa8, 0xe0, 0x79, 0x6c, 0x7f, 0x19, 0x1a, 0x5c, 0x10, 0x2f, 0xa0, 0xee, 0x0f, 0xb0, 0x32,
	0x87, 0x45, 0xd7, 0x00, 0x3c, 0x1e, 0x49, 0x41, 0x3c, 0xf9, 0x70, 0xcf, 0xc6, 0x92, 0xe3, 0xa8,
	0x68, 0xa8, 0xf6, 0x67, 0xa3, 0xd1, 0x84, 0xe2, 0x4e, 0x49, 0x90, 0xd0, 0x4e, 0x4d, 0xa7, 0xdc,
	0x10, 0xee, 0x0e, 0xa0, 0x87, 0x51, 0x2c, 0x45, 0x12, 0xd2, 0x48, 0x1e, 0x52, 0x49, 0x86, 0x44,
	0x12, 0x84, 0xa0, 0x2e, 0x89, 0xaf, 0xb2, 0x57, 0xdb, 0x69, 0x62, 0x7d, 0x76, 0x7f, 0xad, 0x02,
	0xcc, 0xa0, 0x68, 0x15, 0xaa, 0x6c, 0x68, 0x9d, 0x57, 0xd9, 0x50, 0xa9, 0x78, 0x7c, 0x98, 0x66,
	0x50, 0x9f, 0x15, 0x2f, 0x22, 0xa1, 0xf1, 0xd8, 0xc4, 0xfa, 0xac, 0xd2, 0x78, 0x42, 0x62, 0xfa,
	0x44, 0xf1, 0xeb, 0x26, 0x8d, 0x29, 0x8d, 0xde, 0x85, 0xe6, 0xb3, 0x84, 0x4b, 0x23, 0xbc, 0xa0,
	0x85, 0x33, 0x06, 0xba, 0x05, 0xcb, 0xa1, 0x0d, 0xb0, 0xd3, 0xd0, 0x99, 0xec, 0x98, 0x4c, 0x96,
	0x3f, 0x00, 0x67, 0x48, 0x74, 0x1d, 0xda, 0x2c, 0x62, 0x92, 0x91, 0xe0, 0x90, 0x88, 0xf1, 0x91,
	0x60, 0x1e, 0xed, 0x2c, 0xe9, 0x0c, 0x94, 0xf8, 0xe8, 0x23, 0x68, 0x8c, 0xf4, 0x65, 0xdb, 0x9b,
	0xba, 0x68, 0xec, 0x9b, 0x02, 0x18, 0x54, 0xb0, 0x95, 0xf6, 0x9b, 0xb0, 0x34, 0x11, 0x7c, 0x98,
	0x78, 0xd2, 0x7d, 0xe3, 0x00, 0x7a, 0xcc, 0xfd, 0x27, 0x5c, 0x84, 0x24, 0xc0, 0x2c, 0x1e, 0x1f,
	0xf2, 0x21, 0x0d, 0xd0, 0x2d, 0xb8, 0x22, 0x58, 0x3c, 0xbe, 0x3f, 0xa5, 0x22, 0x66, 0x3c, 0x3a,
	0x22, 0x82, 0x84, 0x54, 0x52, 0xa1, 0x13, 0xe6, 0xe0, 0xc5, 0x42, 0xd4, 0x86, 0x9a, 0x24, 0x89,
	0x4e, 0xa1, 0x83, 0xd5, 0x11, 0xf5, 0xa0, 0x31, 0x51, 0xe2, 0x58, 0xe7, 0xb0, 0xd5, 0xdb, 0x34,
	0x11, 0x65, 0x1e, 0xb5, 0x37, 0x6d, 0x20, 0xc6, 0x16, 0xe9, 0x3e, 0x82, 0xcb, 0x8b, 0xe4, 0xea,
	0xc6, 0xc2, 0xc4, 0x06, 0x50, 0x0d, 0x13, 0x74, 0x11, 0x1c, 0x61, 0x7d, 0x39, 0x42, 0x95, 0x47,
	0xcc, 0xfc, 0x90, 0x68, 0x47, 0x0e, 0x36, 0x84, 0xdb, 0x87, 0xb5, 0x63, 0x16, 0x4e, 0x02, 0x3a,
	0xfb, 0xb4, 0x6e, 0x16, 0x92, 0xa3, 0x43, 0xba, 0x6a, 0x42, 0x32, 0xb0, 0x45, 0xf1, 0xfc, 0xe1,
	0xc0, 0x7a, 0x49, 0xaa, 0x8a, 0x78, 0x44, 0x3c, 0xc9, 0xc5, 0x63, 0x1e, 0xf9, 0x36, 0xaa, 0x1c,
	0x07, 0x6d, 0x43, 0xcb, 0x50, 0xc7, 0xa7, 0x5c, 0x48, 0x1b, 0x67, 0x9e, 0x85, 0x3e, 0x86, 0x66,
	0x48, 0x5e, 0x1c, 0xf2, 0x29, 0xfd, 0x6e, 0x62, 0xa2, 0xee, 0xaf, 0x9c, 0x9f, 0x6d, 0x35, 0x1f,
	0x56, 0xec, 0x0f, 0xcf, 0xe4, 0xa8, 0x0b, 0xad, 0x90, 0x45, 0x8a, 0xd8, 0xe3, 0xcf, 0x23, 0x5d,
	0x79, 0x16, 0xfe, 0x4d, 0x06, 0xcf, 0x23, 0xdc, 0x3f, 0x1d, 0x58, 0xdf, 0x7f, 0x21, 0xa9, 0x88,
	0xf2, 0xf7, 0x9a, 0x56, 0xb4, 0x93, 0xab, 0xe8, 0x0d, 0x68, 0xc4, 0xdc, 0x1b, 0x67, 0xdd, 0x6f,
	0x29, 0x74, 0x17, 0x1a, 0x1e, 0x8f, 0x46, 0xcc, 0xef, 0xd4, 0xb6, 0x6b, 0x3b, 0xad, 0xde, 0x07,
	0xb6, 0xef, 0x8b, 0x46, 0x77, 0x1f, 0x68, 0xd4, 0x7e, 0x24, 0xc5, 0x4b, 0x6c, 0x55, 0x36, 0xef,
	0x40, 0x2b, 0xc7, 0x56, 0x95, 0x31, 0xa6, 0xe9, 0xdc, 0x51, 0xc7, 0x59, 0x3b, 0xdb, 0x26, 0xd7,
	0xc4, 0x17, 0xd5, 0xdb, 0x8e, 0xfb, 0xb3, 0x03, 0xab, 0xc7, 0x1e, 0x09, 0x58, 0xe4, 0x1f, 0xe8,
	0x74, 0xc5, 0x2a, 0x99, 0x31, 0x25, 0xc2, 0x3b, 0x7d, 0x4c, 0xa7, 0x34, 0xb0, 0xd9, 0xce, 0xb3,
	0xd0, 0x87, 0xb0, 0x32, 0x6b, 0x07, 0x9f, 0x45, 0x36, 0xe1, 0xf3, 0x4c, 0xf4, 0x09, 0xac, 0x7b,
	0x3c, 0x08, 0x88, 0xa4, 0x82, 0x04, 0x98, 0x06, 0x94, 0xc4, 0xd4, 0x16, 0x4c, 0x59, 0xe0, 0x1e,
	0x41, 0xdb, 0xe8, 0x3d, 0x20, 0x81, 0x97, 0x04, 0xea, 0xb9, 0x40, 0x5f, 0xc2, 0x6a, 0x3c, 0x17,
	0x9b, 0xad, 0xa2, 0xcb, 0xb6, 0x8a, 0xe6, 0x64, 0xb8, 0x80, 0x75, 0xff, 0xad, 0x02, 0x52, 0x73,
	0x9e, 0x9c, 0x04, 0x34, 0x37, 0x8b, 0x3e, 0x05, 0x60, 0x19, 0x65, 0x0d, 0xb6, 0x8b, 0xb3, 0x01,
	0xe7, 0x30, 0xa8, 0x0f, 0xed, 0xb0, 0x10, 0x9a, 0xfe, 0xe2, 0x56, 0x6f, 0xc3, 0xe8, 0x15, 0x03,
	0xc7, 0x25, 0x3c, 0x7a, 0x04, 0x28, 0x28, 0x75, 0xbe, 0x9d, 0x1c, 0x9d, 0x42, 0x9f, 0x66, 0xf2,
	0x41, 0x05, 0x2f, 0xd0, 0x42, 0x5f, 0xc3, 0x3a, 0x2d, 0xd6, 0x45, 0x87, 0xe6, 0xfb, 0xab, 0x54,
	0x36, 0x83, 0x0a, 0x2e, 0xeb, 0xa0, 0xfb, 0xb0, 0x16, 0xcf, 0x37, 0x6c, 0x67, 0xa4, 0xcd, 0x5c,
	0xc9, 0xb7, 0x69, 0xde, 0x48, 0x11, 0xdf, 0x6f, 0x41, 0x53, 0xa4, 0x84, 0xfb, 0x0a, 0xe0, 0x80,
	0xd2, 0xb4, 0x8e, 0xf4, 0x1b, 0x38, 0xa6, 0xe2, 0x80, 0xd2, 0xd9, 0x1b, 0x68, 0x68, 0x55, 0x1b,
	0x2c, 0x1a, 0x09, 0xa2, 0x72, 0xec, 0xa9, 0x31, 0xa9, 0x40, 0xa6, 0x38, 0xcb, 0x02, 0xe4, 0xc2,
	0xc5, 0x80, 0x3d, 0x4b, 0xd8, 0x90, 0xc9, 0x97, 0x0a, 0x68, 0x9e, 0x88, 0x39, 0x9e, 0xdb, 0x83,
	0xfa, 0x01, 0xa5, 0x31, 0xba, 0x0e, 0x4b, 0xa3, 0xb9, 0x62, 0xb1, 0x77, 0x3b, 0x0b, 0x0c, 0xa7,
	0x00, 0xf7, 0x37, 0x07, 0xde, 0xd1, 0xc3, 0xfc, 0x90, 0x47, 0x4c, 0x72, 0xc1, 0x22, 0x3f, 0x9b,
	0xaf, 0xaa, 0x0f, 0x96, 0x4e, 0xb9, 0x60, 0xaf, 0xd2, 0x95, 0xa4, 0xdf, 0x38, 0x3f, 0xdb, 0xaa,
	0xb6, 0x2b, 0x38, 0x65, 0xa3, 0xdb, 0xd0, 0x9a, 0x08, 0x7e, 0x42, 0x4e, 0x58, 0xa0, 0x1e, 0x7a,
	0xdd, 0x05, 0xfd, 0x8d, 0xf3, 0xb3, 0x2d, 0xf4, 0x59, 0x3a, 0x27, 0xee, 0x98, 0xbf, 0xff, 0xee,
	0xe1, 0x3c, 0x14, 0xf5, 0xa0, 0x4d, 0xcc, 0x0a, 0xa4, 0xae, 0x2a, 0x52, 0x93, 0x5d, 0x7f, 0xd5,
	0xcc, 0x49, 0x49, 0xee, 0x3e, 0x85, 0xab, 0x85, 0x60, 0x8f, 0xa9, 0x94, 0x2c, 0xf2, 0x63, 0x74,
	0x0f, 0x60, 0x92, 0x05, 0xae, 0x1f, 0xe2, 0x56, 0x6f, 0xcb, 0x7c, 0xf7, 0x5b, 0xbf, 0x0f, 0xe7,
	0x54, 0xdc, 0xbf, 0x6b, 0xd0, 0x38, 0xd4, 0x2b, 0x5e, 0xe9, 0xad, 0x1e, 0x00, 0x92, 0xa5, 0x2e,
	0xb2, 0xf5, 0x6f, 0x2b, 0xb7, 0xdc, 0x65, 0x78, 0x81, 0x8e, 0x1a, 0x1b, 0x43, 0xea, 0xb1, 0x90,
	0x04, 0x47, 0x01, 0xf1, 0x68, 0x6c, 0x97, 0x8b, 0x79, 0x26, 0xba, 0x06, 0xf5, 0x11, 0xa5, 0xb1,
	0x9e, 0xba, 0xad, 0x1e, 0x64, 0xb7, 0x17, 0x63, 0xcd, 0x47, 0x5f, 0xc1, 0x2a, 0x9f, 0xd0, 0x88,
	0x45, 0xbe, 0x5d, 0x22, 0xf5, 0xe3, 0x9f, 0xd5, 0x6c, 0x61, 0xb3, 0xc4, 0x05, 0x30, 0xba, 0x63,
	0xf6, 0x21, 0xb3, 0x35, 0xda, 0x06, 0xb4, 0x5d, 0x53, 0xda, 0x26, 0x07, 0x15, 0x9c, 0x03, 0xa3,
	0x9b, 0xb0, 0x3c, 0xb4, 0xfb, 0xa3, 0x6d, 0x37, 0xeb, 0xb3, 0xb0, 0x55, 0x0e, 0x2a, 0x38, 0x03,
	0xa2, 0xef, 0xe1, 0xea, 0x64, 0xf1, 0xad, 0xd9, 0xbd, 0xe4, 0xbd, 0x85, 0xf7, 0x94, 0x82, 0xf0,
	0xdb, 0xb4, 0xfb, 0x2b, 0xd0, 0x92, 0xc6, 0x9f, 0x6a, 0xbe, 0xfe, 0xfb, 0x4f, 0xb7, 0xd4, 0x1a,
	0xa5, 0x8d, 0xe9, 0x35, 0xdb, 0xe3, 0xc1, 0x2e, 0xe3, 0x5d, 0x45, 0x77, 0x35, 0xe3, 0xa4, 0xa1,
	0xff, 0x6e, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x39, 0xdf, 0xd7, 0xd3, 0x0b, 0x00, 0x00,
}
