// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/plugins (interfaces: MarketSub)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarketSub is a mock of MarketSub interface
type MockMarketSub struct {
	ctrl     *gomock.Controller
	recorder *MockMarketSubMockRecorder
}

// MockMarketSubMockRecorder is the mock recorder for MockMarketSub
type MockMarketSubMockRecorder struct {
	mock *MockMarketSub
}

// NewMockMarketSub creates a new mock instance
func NewMockMarketSub(ctrl *gomock.Controller) *MockMarketSub {
	mock := &MockMarketSub{ctrl: ctrl}
	mock.recorder = &MockMarketSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketSub) EXPECT() *MockMarketSubMockRecorder {
	return m.recorder
}

// Done mocks base method
func (m *MockMarketSub) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockMarketSubMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockMarketSub)(nil).Done))
}

// Recv mocks base method
func (m *MockMarketSub) Recv() <-chan []proto.Market {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(<-chan []proto.Market)
	return ret0
}

// Recv indicates an expected call of Recv
func (mr *MockMarketSubMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMarketSub)(nil).Recv))
}
