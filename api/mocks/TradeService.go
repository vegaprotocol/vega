// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import common "vega/filters"
import context "context"
import core "vega/core"
import datastore "vega/datastore"
import mock "github.com/stretchr/testify/mock"
import msg "vega/msg"
import time "time"

// TradeService is an autogenerated mock type for the TradeService type
type TradeService struct {
	mock.Mock
}

// GetByMarket provides a mock function with given fields: ctx, market, filters
func (_m *TradeService) GetByMarket(ctx context.Context, market string, filters *common.TradeQueryFilters) ([]*msg.Trade, error) {
	ret := _m.Called(ctx, market, filters)

	var r0 []*msg.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.TradeQueryFilters) []*msg.Trade); ok {
		r0 = rf(ctx, market, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *common.TradeQueryFilters) error); ok {
		r1 = rf(ctx, market, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMarketAndId provides a mock function with given fields: ctx, market, id
func (_m *TradeService) GetByMarketAndId(ctx context.Context, market string, id string) (*msg.Trade, error) {
	ret := _m.Called(ctx, market, id)

	var r0 *msg.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *msg.Trade); ok {
		r0 = rf(ctx, market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByParty provides a mock function with given fields: ctx, party, filters
func (_m *TradeService) GetByParty(ctx context.Context, party string, filters *common.TradeQueryFilters) ([]*msg.Trade, error) {
	ret := _m.Called(ctx, party, filters)

	var r0 []*msg.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.TradeQueryFilters) []*msg.Trade); ok {
		r0 = rf(ctx, party, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *common.TradeQueryFilters) error); ok {
		r1 = rf(ctx, party, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPartyAndId provides a mock function with given fields: ctx, party, id
func (_m *TradeService) GetByPartyAndId(ctx context.Context, party string, id string) (*msg.Trade, error) {
	ret := _m.Called(ctx, party, id)

	var r0 *msg.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *msg.Trade); ok {
		r0 = rf(ctx, party, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, party, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandleSinceBlock provides a mock function with given fields: ctx, market, sinceBlock
func (_m *TradeService) GetCandleSinceBlock(ctx context.Context, market string, sinceBlock uint64) (*msg.Candle, time.Time, error) {
	ret := _m.Called(ctx, market, sinceBlock)

	var r0 *msg.Candle
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) *msg.Candle); ok {
		r0 = rf(ctx, market, sinceBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Candle)
		}
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) time.Time); ok {
		r1 = rf(ctx, market, sinceBlock)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, uint64) error); ok {
		r2 = rf(ctx, market, sinceBlock)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCandles provides a mock function with given fields: ctx, market, since, interval
func (_m *TradeService) GetCandles(ctx context.Context, market string, since time.Time, interval uint64) (msg.Candles, error) {
	ret := _m.Called(ctx, market, since, interval)

	var r0 msg.Candles
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, uint64) msg.Candles); ok {
		r0 = rf(ctx, market, since, interval)
	} else {
		r0 = ret.Get(0).(msg.Candles)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, uint64) error); ok {
		r1 = rf(ctx, market, since, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastCandles provides a mock function with given fields: ctx, market, last, interval
func (_m *TradeService) GetLastCandles(ctx context.Context, market string, last uint64, interval uint64) (msg.Candles, error) {
	ret := _m.Called(ctx, market, last, interval)

	var r0 msg.Candles
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) msg.Candles); ok {
		r0 = rf(ctx, market, last, interval)
	} else {
		r0 = ret.Get(0).(msg.Candles)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(ctx, market, last, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlock provides a mock function with given fields:
func (_m *TradeService) GetLatestBlock() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetPositionsByParty provides a mock function with given fields: ctx, party
func (_m *TradeService) GetPositionsByParty(ctx context.Context, party string) ([]*msg.MarketPosition, error) {
	ret := _m.Called(ctx, party)

	var r0 []*msg.MarketPosition
	if rf, ok := ret.Get(0).(func(context.Context, string) []*msg.MarketPosition); ok {
		r0 = rf(ctx, party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.MarketPosition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, party)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: app, tradeStore
func (_m *TradeService) Init(app *core.Vega, tradeStore datastore.TradeStore) {
	_m.Called(app, tradeStore)
}

// ObservePositions provides a mock function with given fields: ctx, party
func (_m *TradeService) ObservePositions(ctx context.Context, party string) (<-chan msg.MarketPosition, uint64) {
	ret := _m.Called(ctx, party)

	var r0 <-chan msg.MarketPosition
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan msg.MarketPosition); ok {
		r0 = rf(ctx, party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan msg.MarketPosition)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, string) uint64); ok {
		r1 = rf(ctx, party)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}

// ObserveTrades provides a mock function with given fields: ctx, market, party
func (_m *TradeService) ObserveTrades(ctx context.Context, market *string, party *string) (<-chan msg.Trade, uint64) {
	ret := _m.Called(ctx, market, party)

	var r0 <-chan msg.Trade
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string) <-chan msg.Trade); ok {
		r0 = rf(ctx, market, party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan msg.Trade)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *string, *string) uint64); ok {
		r1 = rf(ctx, market, party)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}
