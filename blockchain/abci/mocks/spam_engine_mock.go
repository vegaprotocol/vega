// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/blockchain/abci (interfaces: SpamEngine)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	abci "code.vegaprotocol.io/vega/blockchain/abci"
	gomock "github.com/golang/mock/gomock"
)

// MockSpamEngine is a mock of SpamEngine interface.
type MockSpamEngine struct {
	ctrl     *gomock.Controller
	recorder *MockSpamEngineMockRecorder
}

// MockSpamEngineMockRecorder is the mock recorder for MockSpamEngine.
type MockSpamEngineMockRecorder struct {
	mock *MockSpamEngine
}

// NewMockSpamEngine creates a new mock instance.
func NewMockSpamEngine(ctrl *gomock.Controller) *MockSpamEngine {
	mock := &MockSpamEngine{ctrl: ctrl}
	mock.recorder = &MockSpamEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpamEngine) EXPECT() *MockSpamEngineMockRecorder {
	return m.recorder
}

// EndOfBlock mocks base method.
func (m *MockSpamEngine) EndOfBlock(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndOfBlock", arg0)
}

// EndOfBlock indicates an expected call of EndOfBlock.
func (mr *MockSpamEngineMockRecorder) EndOfBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndOfBlock", reflect.TypeOf((*MockSpamEngine)(nil).EndOfBlock), arg0)
}

// PostBlockAccept mocks base method.
func (m *MockSpamEngine) PostBlockAccept(arg0 abci.Tx) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBlockAccept", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBlockAccept indicates an expected call of PostBlockAccept.
func (mr *MockSpamEngineMockRecorder) PostBlockAccept(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBlockAccept", reflect.TypeOf((*MockSpamEngine)(nil).PostBlockAccept), arg0)
}

// PreBlockAccept mocks base method.
func (m *MockSpamEngine) PreBlockAccept(arg0 abci.Tx) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreBlockAccept", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreBlockAccept indicates an expected call of PreBlockAccept.
func (mr *MockSpamEngineMockRecorder) PreBlockAccept(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreBlockAccept", reflect.TypeOf((*MockSpamEngine)(nil).PreBlockAccept), arg0)
}
