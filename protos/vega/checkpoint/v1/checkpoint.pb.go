// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/checkpoint/v1/checkpoint.proto

package v1

import (
	vega "code.vegaprotocol.io/vega/protos/vega"
	v1 "code.vegaprotocol.io/vega/protos/vega/events/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CheckpointState is the entire checkpoint serialised. Basically it is the serialisation of the Checkpoint message + hash.
type CheckpointState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash  []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	State []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CheckpointState) Reset() {
	*x = CheckpointState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointState) ProtoMessage() {}

func (x *CheckpointState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointState.ProtoReflect.Descriptor instead.
func (*CheckpointState) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{0}
}

func (x *CheckpointState) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *CheckpointState) GetState() []byte {
	if x != nil {
		return x.State
	}
	return nil
}

// Checkpoint aggregates the various engine snapshots
type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Governance        []byte `protobuf:"bytes,1,opt,name=governance,proto3" json:"governance,omitempty"`
	Assets            []byte `protobuf:"bytes,2,opt,name=assets,proto3" json:"assets,omitempty"`
	Collateral        []byte `protobuf:"bytes,3,opt,name=collateral,proto3" json:"collateral,omitempty"`
	NetworkParameters []byte `protobuf:"bytes,4,opt,name=network_parameters,json=networkParameters,proto3" json:"network_parameters,omitempty"`
	Delegation        []byte `protobuf:"bytes,5,opt,name=delegation,proto3" json:"delegation,omitempty"`
	Epoch             []byte `protobuf:"bytes,6,opt,name=epoch,proto3" json:"epoch,omitempty"` // will just be an epoch event
	Block             []byte `protobuf:"bytes,7,opt,name=block,proto3" json:"block,omitempty"`
	Rewards           []byte `protobuf:"bytes,8,opt,name=rewards,proto3" json:"rewards,omitempty"`
	Banking           []byte `protobuf:"bytes,9,opt,name=banking,proto3" json:"banking,omitempty"`
	Validators        []byte `protobuf:"bytes,10,opt,name=validators,proto3" json:"validators,omitempty"`
	Staking           []byte `protobuf:"bytes,11,opt,name=staking,proto3" json:"staking,omitempty"`
	MultisigControl   []byte `protobuf:"bytes,12,opt,name=multisig_control,json=multisigControl,proto3" json:"multisig_control,omitempty"`
	MarketTracker     []byte `protobuf:"bytes,13,opt,name=market_tracker,json=marketTracker,proto3" json:"market_tracker,omitempty"`
	Execution         []byte `protobuf:"bytes,14,opt,name=execution,proto3" json:"execution,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{1}
}

func (x *Checkpoint) GetGovernance() []byte {
	if x != nil {
		return x.Governance
	}
	return nil
}

func (x *Checkpoint) GetAssets() []byte {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Checkpoint) GetCollateral() []byte {
	if x != nil {
		return x.Collateral
	}
	return nil
}

func (x *Checkpoint) GetNetworkParameters() []byte {
	if x != nil {
		return x.NetworkParameters
	}
	return nil
}

func (x *Checkpoint) GetDelegation() []byte {
	if x != nil {
		return x.Delegation
	}
	return nil
}

func (x *Checkpoint) GetEpoch() []byte {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *Checkpoint) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Checkpoint) GetRewards() []byte {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Checkpoint) GetBanking() []byte {
	if x != nil {
		return x.Banking
	}
	return nil
}

func (x *Checkpoint) GetValidators() []byte {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *Checkpoint) GetStaking() []byte {
	if x != nil {
		return x.Staking
	}
	return nil
}

func (x *Checkpoint) GetMultisigControl() []byte {
	if x != nil {
		return x.MultisigControl
	}
	return nil
}

func (x *Checkpoint) GetMarketTracker() []byte {
	if x != nil {
		return x.MarketTracker
	}
	return nil
}

func (x *Checkpoint) GetExecution() []byte {
	if x != nil {
		return x.Execution
	}
	return nil
}

// AssetEntry is a single (enabled) asset
type AssetEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetDetails *vega.AssetDetails `protobuf:"bytes,2,opt,name=asset_details,json=assetDetails,proto3" json:"asset_details,omitempty"`
}

func (x *AssetEntry) Reset() {
	*x = AssetEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetEntry) ProtoMessage() {}

func (x *AssetEntry) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetEntry.ProtoReflect.Descriptor instead.
func (*AssetEntry) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{2}
}

func (x *AssetEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssetEntry) GetAssetDetails() *vega.AssetDetails {
	if x != nil {
		return x.AssetDetails
	}
	return nil
}

// Assets contains all the enabled assets as AssetEntries
type Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets               []*AssetEntry `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	PendingListingAssets []*AssetEntry `protobuf:"bytes,2,rep,name=pending_listing_assets,json=pendingListingAssets,proto3" json:"pending_listing_assets,omitempty"`
}

func (x *Assets) Reset() {
	*x = Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{3}
}

func (x *Assets) GetAssets() []*AssetEntry {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Assets) GetPendingListingAssets() []*AssetEntry {
	if x != nil {
		return x.PendingListingAssets
	}
	return nil
}

// AssetBalance represents the total balance of a given asset for a party
type AssetBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party   string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Asset   string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Balance string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AssetBalance) Reset() {
	*x = AssetBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetBalance) ProtoMessage() {}

func (x *AssetBalance) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetBalance.ProtoReflect.Descriptor instead.
func (*AssetBalance) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{4}
}

func (x *AssetBalance) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *AssetBalance) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AssetBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

// Collateral contains the balances per party
type Collateral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*AssetBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *Collateral) Reset() {
	*x = Collateral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collateral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collateral) ProtoMessage() {}

func (x *Collateral) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collateral.ProtoReflect.Descriptor instead.
func (*Collateral) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{5}
}

func (x *Collateral) GetBalances() []*AssetBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// NetParams contains all network parameters
type NetParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*vega.NetworkParameter `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *NetParams) Reset() {
	*x = NetParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetParams) ProtoMessage() {}

func (x *NetParams) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetParams.ProtoReflect.Descriptor instead.
func (*NetParams) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{6}
}

func (x *NetParams) GetParams() []*vega.NetworkParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

// Proposals will contain all accepted proposals
type Proposals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*vega.Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *Proposals) Reset() {
	*x = Proposals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposals) ProtoMessage() {}

func (x *Proposals) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposals.ProtoReflect.Descriptor instead.
func (*Proposals) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{7}
}

func (x *Proposals) GetProposals() []*vega.Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

// Delegated amounts for party/node
// `undelegate` and `epoch_seq` are only relevant for pending entries
type DelegateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party      string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Node       string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Amount     string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Undelegate bool   `protobuf:"varint,4,opt,name=undelegate,proto3" json:"undelegate,omitempty"`
	EpochSeq   uint64 `protobuf:"varint,5,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
}

func (x *DelegateEntry) Reset() {
	*x = DelegateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateEntry) ProtoMessage() {}

func (x *DelegateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateEntry.ProtoReflect.Descriptor instead.
func (*DelegateEntry) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{8}
}

func (x *DelegateEntry) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *DelegateEntry) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *DelegateEntry) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DelegateEntry) GetUndelegate() bool {
	if x != nil {
		return x.Undelegate
	}
	return false
}

func (x *DelegateEntry) GetEpochSeq() uint64 {
	if x != nil {
		return x.EpochSeq
	}
	return 0
}

// Delegate contains all entries for a checkpoint
type Delegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active         []*DelegateEntry `protobuf:"bytes,1,rep,name=active,proto3" json:"active,omitempty"`
	Pending        []*DelegateEntry `protobuf:"bytes,2,rep,name=pending,proto3" json:"pending,omitempty"`
	AutoDelegation []string         `protobuf:"bytes,3,rep,name=auto_delegation,json=autoDelegation,proto3" json:"auto_delegation,omitempty"`
}

func (x *Delegate) Reset() {
	*x = Delegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delegate) ProtoMessage() {}

func (x *Delegate) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delegate.ProtoReflect.Descriptor instead.
func (*Delegate) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{9}
}

func (x *Delegate) GetActive() []*DelegateEntry {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *Delegate) GetPending() []*DelegateEntry {
	if x != nil {
		return x.Pending
	}
	return nil
}

func (x *Delegate) GetAutoDelegation() []string {
	if x != nil {
		return x.AutoDelegation
	}
	return nil
}

// Block message contains data related to block at which the checkpoint
// was created i.e. the block height
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{10}
}

func (x *Block) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Rewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*RewardPayout `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *Rewards) Reset() {
	*x = Rewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rewards) ProtoMessage() {}

func (x *Rewards) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rewards.ProtoReflect.Descriptor instead.
func (*Rewards) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{11}
}

func (x *Rewards) GetRewards() []*RewardPayout {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type RewardPayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayoutTime    int64                  `protobuf:"varint,1,opt,name=payout_time,json=payoutTime,proto3" json:"payout_time,omitempty"`
	RewardsPayout []*PendingRewardPayout `protobuf:"bytes,2,rep,name=rewards_payout,json=rewardsPayout,proto3" json:"rewards_payout,omitempty"`
}

func (x *RewardPayout) Reset() {
	*x = RewardPayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardPayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardPayout) ProtoMessage() {}

func (x *RewardPayout) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardPayout.ProtoReflect.Descriptor instead.
func (*RewardPayout) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{12}
}

func (x *RewardPayout) GetPayoutTime() int64 {
	if x != nil {
		return x.PayoutTime
	}
	return 0
}

func (x *RewardPayout) GetRewardsPayout() []*PendingRewardPayout {
	if x != nil {
		return x.RewardsPayout
	}
	return nil
}

type PendingRewardPayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccount string         `protobuf:"bytes,1,opt,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`
	Asset       string         `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	PartyAmount []*PartyAmount `protobuf:"bytes,3,rep,name=party_amount,json=partyAmount,proto3" json:"party_amount,omitempty"`
	TotalReward string         `protobuf:"bytes,4,opt,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`
	EpochSeq    string         `protobuf:"bytes,5,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	Timestamp   int64          `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PendingRewardPayout) Reset() {
	*x = PendingRewardPayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingRewardPayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingRewardPayout) ProtoMessage() {}

func (x *PendingRewardPayout) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingRewardPayout.ProtoReflect.Descriptor instead.
func (*PendingRewardPayout) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{13}
}

func (x *PendingRewardPayout) GetFromAccount() string {
	if x != nil {
		return x.FromAccount
	}
	return ""
}

func (x *PendingRewardPayout) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *PendingRewardPayout) GetPartyAmount() []*PartyAmount {
	if x != nil {
		return x.PartyAmount
	}
	return nil
}

func (x *PendingRewardPayout) GetTotalReward() string {
	if x != nil {
		return x.TotalReward
	}
	return ""
}

func (x *PendingRewardPayout) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *PendingRewardPayout) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PartyAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PartyAmount) Reset() {
	*x = PartyAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAmount) ProtoMessage() {}

func (x *PartyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAmount.ProtoReflect.Descriptor instead.
func (*PartyAmount) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{14}
}

func (x *PartyAmount) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type PendingKeyRotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relative target block height is: target block height - current block height.
	// Useful for cross blockchain compatibility.
	RelativeTargetBlockHeight uint64 `protobuf:"varint,1,opt,name=relative_target_block_height,json=relativeTargetBlockHeight,proto3" json:"relative_target_block_height,omitempty"`
	NodeId                    string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NewPubKey                 string `protobuf:"bytes,3,opt,name=new_pub_key,json=newPubKey,proto3" json:"new_pub_key,omitempty"`
	NewPubKeyIndex            uint32 `protobuf:"varint,4,opt,name=new_pub_key_index,json=newPubKeyIndex,proto3" json:"new_pub_key_index,omitempty"`
}

func (x *PendingKeyRotation) Reset() {
	*x = PendingKeyRotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingKeyRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingKeyRotation) ProtoMessage() {}

func (x *PendingKeyRotation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingKeyRotation.ProtoReflect.Descriptor instead.
func (*PendingKeyRotation) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{15}
}

func (x *PendingKeyRotation) GetRelativeTargetBlockHeight() uint64 {
	if x != nil {
		return x.RelativeTargetBlockHeight
	}
	return 0
}

func (x *PendingKeyRotation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PendingKeyRotation) GetNewPubKey() string {
	if x != nil {
		return x.NewPubKey
	}
	return ""
}

func (x *PendingKeyRotation) GetNewPubKeyIndex() uint32 {
	if x != nil {
		return x.NewPubKeyIndex
	}
	return 0
}

type PendingEthereumKeyRotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relative target block height is: target block height - current block height.
	// Useful for cross blockchain compatibility.
	RelativeTargetBlockHeight uint64 `protobuf:"varint,1,opt,name=relative_target_block_height,json=relativeTargetBlockHeight,proto3" json:"relative_target_block_height,omitempty"`
	NodeId                    string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NewAddress                string `protobuf:"bytes,3,opt,name=new_address,json=newAddress,proto3" json:"new_address,omitempty"`
}

func (x *PendingEthereumKeyRotation) Reset() {
	*x = PendingEthereumKeyRotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingEthereumKeyRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingEthereumKeyRotation) ProtoMessage() {}

func (x *PendingEthereumKeyRotation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingEthereumKeyRotation.ProtoReflect.Descriptor instead.
func (*PendingEthereumKeyRotation) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{16}
}

func (x *PendingEthereumKeyRotation) GetRelativeTargetBlockHeight() uint64 {
	if x != nil {
		return x.RelativeTargetBlockHeight
	}
	return 0
}

func (x *PendingEthereumKeyRotation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PendingEthereumKeyRotation) GetNewAddress() string {
	if x != nil {
		return x.NewAddress
	}
	return ""
}

type ScheduledTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfer       *vega.Transfer   `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer,omitempty"`
	AccountType    vega.AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=vega.AccountType" json:"account_type,omitempty"`
	Reference      string           `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	OneoffTransfer *v1.Transfer     `protobuf:"bytes,4,opt,name=oneoff_transfer,json=oneoffTransfer,proto3" json:"oneoff_transfer,omitempty"`
}

func (x *ScheduledTransfer) Reset() {
	*x = ScheduledTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTransfer) ProtoMessage() {}

func (x *ScheduledTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTransfer.ProtoReflect.Descriptor instead.
func (*ScheduledTransfer) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{17}
}

func (x *ScheduledTransfer) GetTransfer() *vega.Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *ScheduledTransfer) GetAccountType() vega.AccountType {
	if x != nil {
		return x.AccountType
	}
	return vega.AccountType(0)
}

func (x *ScheduledTransfer) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ScheduledTransfer) GetOneoffTransfer() *v1.Transfer {
	if x != nil {
		return x.OneoffTransfer
	}
	return nil
}

type ScheduledTransferAtTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliverOn int64                `protobuf:"varint,1,opt,name=deliver_on,json=deliverOn,proto3" json:"deliver_on,omitempty"`
	Transfers []*ScheduledTransfer `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *ScheduledTransferAtTime) Reset() {
	*x = ScheduledTransferAtTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTransferAtTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTransferAtTime) ProtoMessage() {}

func (x *ScheduledTransferAtTime) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTransferAtTime.ProtoReflect.Descriptor instead.
func (*ScheduledTransferAtTime) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{18}
}

func (x *ScheduledTransferAtTime) GetDeliverOn() int64 {
	if x != nil {
		return x.DeliverOn
	}
	return 0
}

func (x *ScheduledTransferAtTime) GetTransfers() []*ScheduledTransfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type RecurringTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringTransfers []*v1.Transfer `protobuf:"bytes,1,rep,name=recurring_transfers,json=recurringTransfers,proto3" json:"recurring_transfers,omitempty"`
}

func (x *RecurringTransfers) Reset() {
	*x = RecurringTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringTransfers) ProtoMessage() {}

func (x *RecurringTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringTransfers.ProtoReflect.Descriptor instead.
func (*RecurringTransfers) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{19}
}

func (x *RecurringTransfers) GetRecurringTransfers() []*v1.Transfer {
	if x != nil {
		return x.RecurringTransfers
	}
	return nil
}

type GovernanceTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Reference string                         `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	Status    v1.Transfer_Status             `protobuf:"varint,3,opt,name=status,proto3,enum=vega.events.v1.Transfer_Status" json:"status,omitempty"`
	Timestamp int64                          `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Config    *vega.NewTransferConfiguration `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GovernanceTransfer) Reset() {
	*x = GovernanceTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceTransfer) ProtoMessage() {}

func (x *GovernanceTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceTransfer.ProtoReflect.Descriptor instead.
func (*GovernanceTransfer) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{20}
}

func (x *GovernanceTransfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GovernanceTransfer) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *GovernanceTransfer) GetStatus() v1.Transfer_Status {
	if x != nil {
		return x.Status
	}
	return v1.Transfer_Status(0)
}

func (x *GovernanceTransfer) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GovernanceTransfer) GetConfig() *vega.NewTransferConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

type ScheduledGovernanceTransferAtTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliverOn int64                 `protobuf:"varint,1,opt,name=deliver_on,json=deliverOn,proto3" json:"deliver_on,omitempty"`
	Transfers []*GovernanceTransfer `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *ScheduledGovernanceTransferAtTime) Reset() {
	*x = ScheduledGovernanceTransferAtTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledGovernanceTransferAtTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledGovernanceTransferAtTime) ProtoMessage() {}

func (x *ScheduledGovernanceTransferAtTime) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledGovernanceTransferAtTime.ProtoReflect.Descriptor instead.
func (*ScheduledGovernanceTransferAtTime) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{21}
}

func (x *ScheduledGovernanceTransferAtTime) GetDeliverOn() int64 {
	if x != nil {
		return x.DeliverOn
	}
	return 0
}

func (x *ScheduledGovernanceTransferAtTime) GetTransfers() []*GovernanceTransfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type Banking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransfersAtTime              []*ScheduledTransferAtTime           `protobuf:"bytes,1,rep,name=transfers_at_time,json=transfersAtTime,proto3" json:"transfers_at_time,omitempty"`
	RecurringTransfers           *RecurringTransfers                  `protobuf:"bytes,2,opt,name=recurring_transfers,json=recurringTransfers,proto3" json:"recurring_transfers,omitempty"`
	BridgeState                  *BridgeState                         `protobuf:"bytes,3,opt,name=bridge_state,json=bridgeState,proto3" json:"bridge_state,omitempty"`
	AssetActions                 []*AssetAction                       `protobuf:"bytes,4,rep,name=asset_actions,json=assetActions,proto3" json:"asset_actions,omitempty"`
	LastSeenEthBlock             uint64                               `protobuf:"varint,5,opt,name=last_seen_eth_block,json=lastSeenEthBlock,proto3" json:"last_seen_eth_block,omitempty"`
	SeenRefs                     []string                             `protobuf:"bytes,6,rep,name=seen_refs,json=seenRefs,proto3" json:"seen_refs,omitempty"`
	GovernanceTransfersAtTime    []*ScheduledGovernanceTransferAtTime `protobuf:"bytes,7,rep,name=governance_transfers_at_time,json=governanceTransfersAtTime,proto3" json:"governance_transfers_at_time,omitempty"`
	RecurringGovernanceTransfers []*GovernanceTransfer                `protobuf:"bytes,8,rep,name=recurring_governance_transfers,json=recurringGovernanceTransfers,proto3" json:"recurring_governance_transfers,omitempty"`
}

func (x *Banking) Reset() {
	*x = Banking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Banking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Banking) ProtoMessage() {}

func (x *Banking) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Banking.ProtoReflect.Descriptor instead.
func (*Banking) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{22}
}

func (x *Banking) GetTransfersAtTime() []*ScheduledTransferAtTime {
	if x != nil {
		return x.TransfersAtTime
	}
	return nil
}

func (x *Banking) GetRecurringTransfers() *RecurringTransfers {
	if x != nil {
		return x.RecurringTransfers
	}
	return nil
}

func (x *Banking) GetBridgeState() *BridgeState {
	if x != nil {
		return x.BridgeState
	}
	return nil
}

func (x *Banking) GetAssetActions() []*AssetAction {
	if x != nil {
		return x.AssetActions
	}
	return nil
}

func (x *Banking) GetLastSeenEthBlock() uint64 {
	if x != nil {
		return x.LastSeenEthBlock
	}
	return 0
}

func (x *Banking) GetSeenRefs() []string {
	if x != nil {
		return x.SeenRefs
	}
	return nil
}

func (x *Banking) GetGovernanceTransfersAtTime() []*ScheduledGovernanceTransferAtTime {
	if x != nil {
		return x.GovernanceTransfersAtTime
	}
	return nil
}

func (x *Banking) GetRecurringGovernanceTransfers() []*GovernanceTransfer {
	if x != nil {
		return x.RecurringGovernanceTransfers
	}
	return nil
}

type BridgeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active      bool   `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	LogIndex    uint64 `protobuf:"varint,3,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (x *BridgeState) Reset() {
	*x = BridgeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeState) ProtoMessage() {}

func (x *BridgeState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeState.ProtoReflect.Descriptor instead.
func (*BridgeState) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{23}
}

func (x *BridgeState) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BridgeState) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BridgeState) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

type Validators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorState              []*ValidatorState             `protobuf:"bytes,1,rep,name=validator_state,json=validatorState,proto3" json:"validator_state,omitempty"`
	PendingKeyRotations         []*PendingKeyRotation         `protobuf:"bytes,2,rep,name=pending_key_rotations,json=pendingKeyRotations,proto3" json:"pending_key_rotations,omitempty"`
	PendingEthereumKeyRotations []*PendingEthereumKeyRotation `protobuf:"bytes,3,rep,name=pending_ethereum_key_rotations,json=pendingEthereumKeyRotations,proto3" json:"pending_ethereum_key_rotations,omitempty"`
}

func (x *Validators) Reset() {
	*x = Validators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validators) ProtoMessage() {}

func (x *Validators) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validators.ProtoReflect.Descriptor instead.
func (*Validators) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{24}
}

func (x *Validators) GetValidatorState() []*ValidatorState {
	if x != nil {
		return x.ValidatorState
	}
	return nil
}

func (x *Validators) GetPendingKeyRotations() []*PendingKeyRotation {
	if x != nil {
		return x.PendingKeyRotations
	}
	return nil
}

func (x *Validators) GetPendingEthereumKeyRotations() []*PendingEthereumKeyRotation {
	if x != nil {
		return x.PendingEthereumKeyRotations
	}
	return nil
}

type ValidatorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorUpdate     *v1.ValidatorUpdate `protobuf:"bytes,1,opt,name=validator_update,json=validatorUpdate,proto3" json:"validator_update,omitempty"`
	Status              int32               `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	EthEventsForwarded  uint64              `protobuf:"varint,3,opt,name=eth_events_forwarded,json=ethEventsForwarded,proto3" json:"eth_events_forwarded,omitempty"`
	ValidatorPower      int64               `protobuf:"varint,4,opt,name=validator_power,json=validatorPower,proto3" json:"validator_power,omitempty"`
	RankingScore        *vega.RankingScore  `protobuf:"bytes,5,opt,name=ranking_score,json=rankingScore,proto3" json:"ranking_score,omitempty"`
	HeartbeatBlockIndex int32               `protobuf:"varint,6,opt,name=heartbeat_block_index,json=heartbeatBlockIndex,proto3" json:"heartbeat_block_index,omitempty"`
	HeartbeatBlockSigs  []bool              `protobuf:"varint,7,rep,packed,name=heartbeat_block_sigs,json=heartbeatBlockSigs,proto3" json:"heartbeat_block_sigs,omitempty"`
}

func (x *ValidatorState) Reset() {
	*x = ValidatorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorState) ProtoMessage() {}

func (x *ValidatorState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorState.ProtoReflect.Descriptor instead.
func (*ValidatorState) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{25}
}

func (x *ValidatorState) GetValidatorUpdate() *v1.ValidatorUpdate {
	if x != nil {
		return x.ValidatorUpdate
	}
	return nil
}

func (x *ValidatorState) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ValidatorState) GetEthEventsForwarded() uint64 {
	if x != nil {
		return x.EthEventsForwarded
	}
	return 0
}

func (x *ValidatorState) GetValidatorPower() int64 {
	if x != nil {
		return x.ValidatorPower
	}
	return 0
}

func (x *ValidatorState) GetRankingScore() *vega.RankingScore {
	if x != nil {
		return x.RankingScore
	}
	return nil
}

func (x *ValidatorState) GetHeartbeatBlockIndex() int32 {
	if x != nil {
		return x.HeartbeatBlockIndex
	}
	return 0
}

func (x *ValidatorState) GetHeartbeatBlockSigs() []bool {
	if x != nil {
		return x.HeartbeatBlockSigs
	}
	return nil
}

type Staking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted      []*v1.StakeLinking `protobuf:"bytes,1,rep,name=accepted,proto3" json:"accepted,omitempty"`
	LastBlockSeen uint64             `protobuf:"varint,2,opt,name=last_block_seen,json=lastBlockSeen,proto3" json:"last_block_seen,omitempty"`
}

func (x *Staking) Reset() {
	*x = Staking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking) ProtoMessage() {}

func (x *Staking) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking.ProtoReflect.Descriptor instead.
func (*Staking) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{26}
}

func (x *Staking) GetAccepted() []*v1.StakeLinking {
	if x != nil {
		return x.Accepted
	}
	return nil
}

func (x *Staking) GetLastBlockSeen() uint64 {
	if x != nil {
		return x.LastBlockSeen
	}
	return 0
}

type MultisigControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signers       []*v1.ERC20MultiSigSignerEvent     `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	ThresholdSet  *v1.ERC20MultiSigThresholdSetEvent `protobuf:"bytes,2,opt,name=threshold_set,json=thresholdSet,proto3" json:"threshold_set,omitempty"`
	LastBlockSeen uint64                             `protobuf:"varint,3,opt,name=last_block_seen,json=lastBlockSeen,proto3" json:"last_block_seen,omitempty"`
}

func (x *MultisigControl) Reset() {
	*x = MultisigControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisigControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisigControl) ProtoMessage() {}

func (x *MultisigControl) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisigControl.ProtoReflect.Descriptor instead.
func (*MultisigControl) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{27}
}

func (x *MultisigControl) GetSigners() []*v1.ERC20MultiSigSignerEvent {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *MultisigControl) GetThresholdSet() *v1.ERC20MultiSigThresholdSetEvent {
	if x != nil {
		return x.ThresholdSet
	}
	return nil
}

func (x *MultisigControl) GetLastBlockSeen() uint64 {
	if x != nil {
		return x.LastBlockSeen
	}
	return 0
}

type MarketTracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketActivity                   []*MarketActivityTracker            `protobuf:"bytes,1,rep,name=market_activity,json=marketActivity,proto3" json:"market_activity,omitempty"`
	TakerNotionalVolume              []*TakerNotionalVolume              `protobuf:"bytes,2,rep,name=taker_notional_volume,json=takerNotionalVolume,proto3" json:"taker_notional_volume,omitempty"`
	MarketToPartyTakerNotionalVolume []*MarketToPartyTakerNotionalVolume `protobuf:"bytes,3,rep,name=market_to_party_taker_notional_volume,json=marketToPartyTakerNotionalVolume,proto3" json:"market_to_party_taker_notional_volume,omitempty"`
}

func (x *MarketTracker) Reset() {
	*x = MarketTracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTracker) ProtoMessage() {}

func (x *MarketTracker) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTracker.ProtoReflect.Descriptor instead.
func (*MarketTracker) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{28}
}

func (x *MarketTracker) GetMarketActivity() []*MarketActivityTracker {
	if x != nil {
		return x.MarketActivity
	}
	return nil
}

func (x *MarketTracker) GetTakerNotionalVolume() []*TakerNotionalVolume {
	if x != nil {
		return x.TakerNotionalVolume
	}
	return nil
}

func (x *MarketTracker) GetMarketToPartyTakerNotionalVolume() []*MarketToPartyTakerNotionalVolume {
	if x != nil {
		return x.MarketToPartyTakerNotionalVolume
	}
	return nil
}

type MarketActivityTracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market                          string                           `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Asset                           string                           `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	MakerFeesReceived               []*PartyFees                     `protobuf:"bytes,3,rep,name=maker_fees_received,json=makerFeesReceived,proto3" json:"maker_fees_received,omitempty"`
	MakerFeesPaid                   []*PartyFees                     `protobuf:"bytes,4,rep,name=maker_fees_paid,json=makerFeesPaid,proto3" json:"maker_fees_paid,omitempty"`
	LpFees                          []*PartyFees                     `protobuf:"bytes,5,rep,name=lp_fees,json=lpFees,proto3" json:"lp_fees,omitempty"`
	Proposer                        string                           `protobuf:"bytes,6,opt,name=proposer,proto3" json:"proposer,omitempty"`
	BonusPaid                       []string                         `protobuf:"bytes,7,rep,name=bonus_paid,json=bonusPaid,proto3" json:"bonus_paid,omitempty"`
	ValueTraded                     string                           `protobuf:"bytes,8,opt,name=value_traded,json=valueTraded,proto3" json:"value_traded,omitempty"`
	ReadyToDelete                   bool                             `protobuf:"varint,9,opt,name=ready_to_delete,json=readyToDelete,proto3" json:"ready_to_delete,omitempty"`
	TimeWeightedPosition            []*TWPositionData                `protobuf:"bytes,10,rep,name=time_weighted_position,json=timeWeightedPosition,proto3" json:"time_weighted_position,omitempty"`
	TimeWeightedNotional            []*TWNotionalData                `protobuf:"bytes,11,rep,name=time_weighted_notional,json=timeWeightedNotional,proto3" json:"time_weighted_notional,omitempty"`
	ReturnsData                     []*ReturnsData                   `protobuf:"bytes,12,rep,name=returns_data,json=returnsData,proto3" json:"returns_data,omitempty"`
	MakerFeesReceivedHistory        []*EpochPartyFees                `protobuf:"bytes,13,rep,name=maker_fees_received_history,json=makerFeesReceivedHistory,proto3" json:"maker_fees_received_history,omitempty"`
	MakerFeesPaidHistory            []*EpochPartyFees                `protobuf:"bytes,14,rep,name=maker_fees_paid_history,json=makerFeesPaidHistory,proto3" json:"maker_fees_paid_history,omitempty"`
	LpFeesHistory                   []*EpochPartyFees                `protobuf:"bytes,15,rep,name=lp_fees_history,json=lpFeesHistory,proto3" json:"lp_fees_history,omitempty"`
	TimeWeightedPositionDataHistory []*EpochTimeWeightPositionData   `protobuf:"bytes,16,rep,name=time_weighted_position_data_history,json=timeWeightedPositionDataHistory,proto3" json:"time_weighted_position_data_history,omitempty"`
	TimeWeightedNotionalDataHistory []*EpochTimeWeightedNotionalData `protobuf:"bytes,17,rep,name=time_weighted_notional_data_history,json=timeWeightedNotionalDataHistory,proto3" json:"time_weighted_notional_data_history,omitempty"`
	ReturnsDataHistory              []*EpochReturnsData              `protobuf:"bytes,18,rep,name=returns_data_history,json=returnsDataHistory,proto3" json:"returns_data_history,omitempty"`
}

func (x *MarketActivityTracker) Reset() {
	*x = MarketActivityTracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketActivityTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketActivityTracker) ProtoMessage() {}

func (x *MarketActivityTracker) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketActivityTracker.ProtoReflect.Descriptor instead.
func (*MarketActivityTracker) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{29}
}

func (x *MarketActivityTracker) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *MarketActivityTracker) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *MarketActivityTracker) GetMakerFeesReceived() []*PartyFees {
	if x != nil {
		return x.MakerFeesReceived
	}
	return nil
}

func (x *MarketActivityTracker) GetMakerFeesPaid() []*PartyFees {
	if x != nil {
		return x.MakerFeesPaid
	}
	return nil
}

func (x *MarketActivityTracker) GetLpFees() []*PartyFees {
	if x != nil {
		return x.LpFees
	}
	return nil
}

func (x *MarketActivityTracker) GetProposer() string {
	if x != nil {
		return x.Proposer
	}
	return ""
}

func (x *MarketActivityTracker) GetBonusPaid() []string {
	if x != nil {
		return x.BonusPaid
	}
	return nil
}

func (x *MarketActivityTracker) GetValueTraded() string {
	if x != nil {
		return x.ValueTraded
	}
	return ""
}

func (x *MarketActivityTracker) GetReadyToDelete() bool {
	if x != nil {
		return x.ReadyToDelete
	}
	return false
}

func (x *MarketActivityTracker) GetTimeWeightedPosition() []*TWPositionData {
	if x != nil {
		return x.TimeWeightedPosition
	}
	return nil
}

func (x *MarketActivityTracker) GetTimeWeightedNotional() []*TWNotionalData {
	if x != nil {
		return x.TimeWeightedNotional
	}
	return nil
}

func (x *MarketActivityTracker) GetReturnsData() []*ReturnsData {
	if x != nil {
		return x.ReturnsData
	}
	return nil
}

func (x *MarketActivityTracker) GetMakerFeesReceivedHistory() []*EpochPartyFees {
	if x != nil {
		return x.MakerFeesReceivedHistory
	}
	return nil
}

func (x *MarketActivityTracker) GetMakerFeesPaidHistory() []*EpochPartyFees {
	if x != nil {
		return x.MakerFeesPaidHistory
	}
	return nil
}

func (x *MarketActivityTracker) GetLpFeesHistory() []*EpochPartyFees {
	if x != nil {
		return x.LpFeesHistory
	}
	return nil
}

func (x *MarketActivityTracker) GetTimeWeightedPositionDataHistory() []*EpochTimeWeightPositionData {
	if x != nil {
		return x.TimeWeightedPositionDataHistory
	}
	return nil
}

func (x *MarketActivityTracker) GetTimeWeightedNotionalDataHistory() []*EpochTimeWeightedNotionalData {
	if x != nil {
		return x.TimeWeightedNotionalDataHistory
	}
	return nil
}

func (x *MarketActivityTracker) GetReturnsDataHistory() []*EpochReturnsData {
	if x != nil {
		return x.ReturnsDataHistory
	}
	return nil
}

type EpochTimeWeightPositionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyTimeWeightedPositions []*PartyTimeWeightedPosition `protobuf:"bytes,1,rep,name=party_time_weighted_positions,json=partyTimeWeightedPositions,proto3" json:"party_time_weighted_positions,omitempty"`
}

func (x *EpochTimeWeightPositionData) Reset() {
	*x = EpochTimeWeightPositionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochTimeWeightPositionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochTimeWeightPositionData) ProtoMessage() {}

func (x *EpochTimeWeightPositionData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochTimeWeightPositionData.ProtoReflect.Descriptor instead.
func (*EpochTimeWeightPositionData) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{30}
}

func (x *EpochTimeWeightPositionData) GetPartyTimeWeightedPositions() []*PartyTimeWeightedPosition {
	if x != nil {
		return x.PartyTimeWeightedPositions
	}
	return nil
}

type EpochTimeWeightedNotionalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyTimeWeightedNotionals []*PartyTimeWeightedNotional `protobuf:"bytes,1,rep,name=party_time_weighted_notionals,json=partyTimeWeightedNotionals,proto3" json:"party_time_weighted_notionals,omitempty"`
}

func (x *EpochTimeWeightedNotionalData) Reset() {
	*x = EpochTimeWeightedNotionalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochTimeWeightedNotionalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochTimeWeightedNotionalData) ProtoMessage() {}

func (x *EpochTimeWeightedNotionalData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochTimeWeightedNotionalData.ProtoReflect.Descriptor instead.
func (*EpochTimeWeightedNotionalData) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{31}
}

func (x *EpochTimeWeightedNotionalData) GetPartyTimeWeightedNotionals() []*PartyTimeWeightedNotional {
	if x != nil {
		return x.PartyTimeWeightedNotionals
	}
	return nil
}

type PartyTimeWeightedNotional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party      string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	TwNotional []byte `protobuf:"bytes,2,opt,name=tw_notional,json=twNotional,proto3" json:"tw_notional,omitempty"`
}

func (x *PartyTimeWeightedNotional) Reset() {
	*x = PartyTimeWeightedNotional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyTimeWeightedNotional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyTimeWeightedNotional) ProtoMessage() {}

func (x *PartyTimeWeightedNotional) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyTimeWeightedNotional.ProtoReflect.Descriptor instead.
func (*PartyTimeWeightedNotional) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{32}
}

func (x *PartyTimeWeightedNotional) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyTimeWeightedNotional) GetTwNotional() []byte {
	if x != nil {
		return x.TwNotional
	}
	return nil
}

type PartyTimeWeightedPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party      string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	TwPosition uint64 `protobuf:"varint,2,opt,name=tw_position,json=twPosition,proto3" json:"tw_position,omitempty"`
}

func (x *PartyTimeWeightedPosition) Reset() {
	*x = PartyTimeWeightedPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyTimeWeightedPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyTimeWeightedPosition) ProtoMessage() {}

func (x *PartyTimeWeightedPosition) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyTimeWeightedPosition.ProtoReflect.Descriptor instead.
func (*PartyTimeWeightedPosition) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{33}
}

func (x *PartyTimeWeightedPosition) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyTimeWeightedPosition) GetTwPosition() uint64 {
	if x != nil {
		return x.TwPosition
	}
	return 0
}

type EpochPartyFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyFees []*PartyFeesHistory `protobuf:"bytes,1,rep,name=party_fees,json=partyFees,proto3" json:"party_fees,omitempty"`
}

func (x *EpochPartyFees) Reset() {
	*x = EpochPartyFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochPartyFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochPartyFees) ProtoMessage() {}

func (x *EpochPartyFees) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochPartyFees.ProtoReflect.Descriptor instead.
func (*EpochPartyFees) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{34}
}

func (x *EpochPartyFees) GetPartyFees() []*PartyFeesHistory {
	if x != nil {
		return x.PartyFees
	}
	return nil
}

type TakerNotionalVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Volume []byte `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *TakerNotionalVolume) Reset() {
	*x = TakerNotionalVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakerNotionalVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakerNotionalVolume) ProtoMessage() {}

func (x *TakerNotionalVolume) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakerNotionalVolume.ProtoReflect.Descriptor instead.
func (*TakerNotionalVolume) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{35}
}

func (x *TakerNotionalVolume) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *TakerNotionalVolume) GetVolume() []byte {
	if x != nil {
		return x.Volume
	}
	return nil
}

type MarketToPartyTakerNotionalVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market              string                 `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	TakerNotionalVolume []*TakerNotionalVolume `protobuf:"bytes,2,rep,name=taker_notional_volume,json=takerNotionalVolume,proto3" json:"taker_notional_volume,omitempty"`
}

func (x *MarketToPartyTakerNotionalVolume) Reset() {
	*x = MarketToPartyTakerNotionalVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketToPartyTakerNotionalVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketToPartyTakerNotionalVolume) ProtoMessage() {}

func (x *MarketToPartyTakerNotionalVolume) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketToPartyTakerNotionalVolume.ProtoReflect.Descriptor instead.
func (*MarketToPartyTakerNotionalVolume) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{36}
}

func (x *MarketToPartyTakerNotionalVolume) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *MarketToPartyTakerNotionalVolume) GetTakerNotionalVolume() []*TakerNotionalVolume {
	if x != nil {
		return x.TakerNotionalVolume
	}
	return nil
}

type EpochReturnsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Returns []*ReturnsData `protobuf:"bytes,1,rep,name=returns,proto3" json:"returns,omitempty"`
}

func (x *EpochReturnsData) Reset() {
	*x = EpochReturnsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochReturnsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochReturnsData) ProtoMessage() {}

func (x *EpochReturnsData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochReturnsData.ProtoReflect.Descriptor instead.
func (*EpochReturnsData) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{37}
}

func (x *EpochReturnsData) GetReturns() []*ReturnsData {
	if x != nil {
		return x.Returns
	}
	return nil
}

type ReturnsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Return []byte `protobuf:"bytes,2,opt,name=return,proto3" json:"return,omitempty"`
}

func (x *ReturnsData) Reset() {
	*x = ReturnsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnsData) ProtoMessage() {}

func (x *ReturnsData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnsData.ProtoReflect.Descriptor instead.
func (*ReturnsData) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{38}
}

func (x *ReturnsData) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *ReturnsData) GetReturn() []byte {
	if x != nil {
		return x.Return
	}
	return nil
}

type TWPositionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party      string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Position   uint64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Time       int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	TwPosition uint64 `protobuf:"varint,4,opt,name=tw_position,json=twPosition,proto3" json:"tw_position,omitempty"`
}

func (x *TWPositionData) Reset() {
	*x = TWPositionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWPositionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWPositionData) ProtoMessage() {}

func (x *TWPositionData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWPositionData.ProtoReflect.Descriptor instead.
func (*TWPositionData) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{39}
}

func (x *TWPositionData) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *TWPositionData) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TWPositionData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TWPositionData) GetTwPosition() uint64 {
	if x != nil {
		return x.TwPosition
	}
	return 0
}

type TWNotionalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party      string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Notional   []byte `protobuf:"bytes,2,opt,name=notional,proto3" json:"notional,omitempty"`
	Time       int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	TwNotional []byte `protobuf:"bytes,4,opt,name=tw_notional,json=twNotional,proto3" json:"tw_notional,omitempty"`
}

func (x *TWNotionalData) Reset() {
	*x = TWNotionalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWNotionalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWNotionalData) ProtoMessage() {}

func (x *TWNotionalData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWNotionalData.ProtoReflect.Descriptor instead.
func (*TWNotionalData) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{40}
}

func (x *TWNotionalData) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *TWNotionalData) GetNotional() []byte {
	if x != nil {
		return x.Notional
	}
	return nil
}

func (x *TWNotionalData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TWNotionalData) GetTwNotional() []byte {
	if x != nil {
		return x.TwNotional
	}
	return nil
}

type PartyFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Fee   string `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *PartyFees) Reset() {
	*x = PartyFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyFees) ProtoMessage() {}

func (x *PartyFees) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyFees.ProtoReflect.Descriptor instead.
func (*PartyFees) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{41}
}

func (x *PartyFees) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyFees) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type PartyFeesHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Fee   []byte `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *PartyFeesHistory) Reset() {
	*x = PartyFeesHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyFeesHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyFeesHistory) ProtoMessage() {}

func (x *PartyFeesHistory) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyFeesHistory.ProtoReflect.Descriptor instead.
func (*PartyFeesHistory) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{42}
}

func (x *PartyFeesHistory) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyFeesHistory) GetFee() []byte {
	if x != nil {
		return x.Fee
	}
	return nil
}

type AssetAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State                   uint32                        `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Asset                   string                        `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	BlockNumber             uint64                        `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TxIndex                 uint64                        `protobuf:"varint,5,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	Hash                    string                        `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	BuiltinDeposit          *vega.BuiltinAssetDeposit     `protobuf:"bytes,7,opt,name=builtin_deposit,json=builtinDeposit,proto3" json:"builtin_deposit,omitempty"`
	Erc20Deposit            *vega.ERC20Deposit            `protobuf:"bytes,8,opt,name=erc20_deposit,json=erc20Deposit,proto3" json:"erc20_deposit,omitempty"`
	AssetList               *vega.ERC20AssetList          `protobuf:"bytes,9,opt,name=asset_list,json=assetList,proto3" json:"asset_list,omitempty"`
	Erc20AssetLimitsUpdated *vega.ERC20AssetLimitsUpdated `protobuf:"bytes,10,opt,name=erc20_asset_limits_updated,json=erc20AssetLimitsUpdated,proto3" json:"erc20_asset_limits_updated,omitempty"`
	Erc20BridgeStopped      bool                          `protobuf:"varint,11,opt,name=erc20_bridge_stopped,json=erc20BridgeStopped,proto3" json:"erc20_bridge_stopped,omitempty"`
	Erc20BridgeResumed      bool                          `protobuf:"varint,12,opt,name=erc20_bridge_resumed,json=erc20BridgeResumed,proto3" json:"erc20_bridge_resumed,omitempty"`
	ChainId                 string                        `protobuf:"bytes,13,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *AssetAction) Reset() {
	*x = AssetAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetAction) ProtoMessage() {}

func (x *AssetAction) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetAction.ProtoReflect.Descriptor instead.
func (*AssetAction) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{43}
}

func (x *AssetAction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssetAction) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *AssetAction) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AssetAction) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *AssetAction) GetTxIndex() uint64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *AssetAction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *AssetAction) GetBuiltinDeposit() *vega.BuiltinAssetDeposit {
	if x != nil {
		return x.BuiltinDeposit
	}
	return nil
}

func (x *AssetAction) GetErc20Deposit() *vega.ERC20Deposit {
	if x != nil {
		return x.Erc20Deposit
	}
	return nil
}

func (x *AssetAction) GetAssetList() *vega.ERC20AssetList {
	if x != nil {
		return x.AssetList
	}
	return nil
}

func (x *AssetAction) GetErc20AssetLimitsUpdated() *vega.ERC20AssetLimitsUpdated {
	if x != nil {
		return x.Erc20AssetLimitsUpdated
	}
	return nil
}

func (x *AssetAction) GetErc20BridgeStopped() bool {
	if x != nil {
		return x.Erc20BridgeStopped
	}
	return false
}

func (x *AssetAction) GetErc20BridgeResumed() bool {
	if x != nil {
		return x.Erc20BridgeResumed
	}
	return false
}

func (x *AssetAction) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type ELSShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party ID of the liquidity provider.
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The equity-like share of the liquidity provider, representing their share in the total provided liquidity expressed as a value between 0 and 1.
	Share string `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
	// Amount committed. This is the total commitment made. It does not necessarily match the LP balance.
	SuppliedStake string `protobuf:"bytes,3,opt,name=supplied_stake,json=suppliedStake,proto3" json:"supplied_stake,omitempty"`
	// LP stake, weighted according to the time the stake was committed and market growth.
	VirtualStake string `protobuf:"bytes,4,opt,name=virtual_stake,json=virtualStake,proto3" json:"virtual_stake,omitempty"`
	// Average entry valuation. As time increases the weight of stake, this is the overall valuation of the current stake.
	Avg string `protobuf:"bytes,5,opt,name=avg,proto3" json:"avg,omitempty"`
}

func (x *ELSShare) Reset() {
	*x = ELSShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ELSShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ELSShare) ProtoMessage() {}

func (x *ELSShare) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ELSShare.ProtoReflect.Descriptor instead.
func (*ELSShare) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{44}
}

func (x *ELSShare) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *ELSShare) GetShare() string {
	if x != nil {
		return x.Share
	}
	return ""
}

func (x *ELSShare) GetSuppliedStake() string {
	if x != nil {
		return x.SuppliedStake
	}
	return ""
}

func (x *ELSShare) GetVirtualStake() string {
	if x != nil {
		return x.VirtualStake
	}
	return ""
}

func (x *ELSShare) GetAvg() string {
	if x != nil {
		return x.Avg
	}
	return ""
}

type MarketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for the market
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The current equity-like share data for a market.
	Shares []*ELSShare `protobuf:"bytes,2,rep,name=shares,proto3" json:"shares,omitempty"`
	// Current balance of the insurance pool.
	InsuranceBalance string `protobuf:"bytes,3,opt,name=insurance_balance,json=insuranceBalance,proto3" json:"insurance_balance,omitempty"`
	// Total trade value which last determined the growth rate of the market.
	LastTradeValue string `protobuf:"bytes,4,opt,name=last_trade_value,json=lastTradeValue,proto3" json:"last_trade_value,omitempty"`
	// Total trade volume which last determined the growth rate of the market.
	LastTradeVolume string `protobuf:"bytes,5,opt,name=last_trade_volume,json=lastTradeVolume,proto3" json:"last_trade_volume,omitempty"`
	// Succession window in nanoseconds: the timestamp when this market cannot be succeeded anymore.
	SuccessionWindow int64 `protobuf:"varint,6,opt,name=succession_window,json=successionWindow,proto3" json:"succession_window,omitempty"`
	// The underlying market should be present in case the successor market is enacted during the succession window.
	// This field can be omitted if the market is not yet settled.
	Market *vega.Market `protobuf:"bytes,7,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *MarketState) Reset() {
	*x = MarketState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketState) ProtoMessage() {}

func (x *MarketState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketState.ProtoReflect.Descriptor instead.
func (*MarketState) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{45}
}

func (x *MarketState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarketState) GetShares() []*ELSShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *MarketState) GetInsuranceBalance() string {
	if x != nil {
		return x.InsuranceBalance
	}
	return ""
}

func (x *MarketState) GetLastTradeValue() string {
	if x != nil {
		return x.LastTradeValue
	}
	return ""
}

func (x *MarketState) GetLastTradeVolume() string {
	if x != nil {
		return x.LastTradeVolume
	}
	return ""
}

func (x *MarketState) GetSuccessionWindow() int64 {
	if x != nil {
		return x.SuccessionWindow
	}
	return 0
}

func (x *MarketState) GetMarket() *vega.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type ExecutionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market data that should be preserved, like equity-like shares, and settled markets that have pending successor markets.
	Data []*MarketState `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ExecutionState) Reset() {
	*x = ExecutionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionState) ProtoMessage() {}

func (x *ExecutionState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_checkpoint_v1_checkpoint_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionState.ProtoReflect.Descriptor instead.
func (*ExecutionState) Descriptor() ([]byte, []int) {
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP(), []int{46}
}

func (x *ExecutionState) GetData() []*MarketState {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_vega_checkpoint_v1_checkpoint_proto protoreflect.FileDescriptor

var file_vega_checkpoint_v1_checkpoint_proto_rawDesc = []byte{
	0x0a, 0x23, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x76, 0x65, 0x67, 0x61, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x65,
	0x67, 0x61, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x0a,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0a, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x0c, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x3c, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x3b, 0x0a,
	0x09, 0x4e, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x22, 0xab, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x45, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x0c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0xf0, 0x01,
	0x0a, 0x13, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x42,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x3b, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9, 0x01,
	0x0a, 0x12, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x17,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x5f, 0x0a, 0x12, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x12, 0x49, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0xd1, 0x01, 0x0a,
	0x12, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x88, 0x01, 0x0a, 0x21, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x4f, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0xf7, 0x04, 0x0a, 0x07,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x57, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x65, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x45, 0x74, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12,
	0x76, 0x0a, 0x1c, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x19, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x1e, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xaa, 0x02, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x1e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x0e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x65, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x08, 0x52, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x73, 0x22, 0x6b, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x65, 0x65, 0x6e, 0x22, 0xd2, 0x01, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x53, 0x0a, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x65, 0x6e, 0x22, 0xc8, 0x02, 0x0a,
	0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x5b, 0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x13, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x85, 0x01, 0x0a, 0x25, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xf3, 0x09, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x4d, 0x0a, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x46, 0x65, 0x65, 0x73, 0x52, 0x11, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x0f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x73, 0x52, 0x0d, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6c, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x73, 0x52, 0x06, 0x6c, 0x70, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x57, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a,
	0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x57, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x1b, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x46, 0x65, 0x65, 0x73, 0x52, 0x18, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x59,
	0x0a, 0x17, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x73, 0x52, 0x14, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x50, 0x61,
	0x69, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x0f, 0x6c, 0x70, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x73, 0x52, 0x0d, 0x6c, 0x70, 0x46, 0x65, 0x65, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x7d, 0x0a, 0x23, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x1f, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x7f, 0x0a, 0x23, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x1f, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x8f, 0x01,
	0x0a, 0x1b, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a,
	0x1d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x91, 0x01, 0x0a, 0x1d, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x70, 0x0a, 0x1d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x73, 0x22, 0x52, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x77, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x74, 0x77, 0x4e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x52, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x77,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x74, 0x77, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x46, 0x65, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x46, 0x65, 0x65, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x46, 0x65,
	0x65, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x13, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0x4d, 0x0a, 0x10, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x77, 0x0a,
	0x0e, 0x54, 0x57, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x77, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x0e, 0x54, 0x57, 0x4e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x77, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x74, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x33, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x79, 0x46, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x22, 0xa8, 0x04, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x42,
	0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x0c, 0x65,
	0x72, 0x63, 0x32, 0x30, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x1a, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x17, 0x65, 0x72, 0x63, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x72,
	0x63, 0x32, 0x30, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x08,
	0x45, 0x4c, 0x53, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x67, 0x22, 0xa9, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4c, 0x53,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x24, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x22, 0x45, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x35, 0x5a, 0x33, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_checkpoint_v1_checkpoint_proto_rawDescOnce sync.Once
	file_vega_checkpoint_v1_checkpoint_proto_rawDescData = file_vega_checkpoint_v1_checkpoint_proto_rawDesc
)

func file_vega_checkpoint_v1_checkpoint_proto_rawDescGZIP() []byte {
	file_vega_checkpoint_v1_checkpoint_proto_rawDescOnce.Do(func() {
		file_vega_checkpoint_v1_checkpoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_checkpoint_v1_checkpoint_proto_rawDescData)
	})
	return file_vega_checkpoint_v1_checkpoint_proto_rawDescData
}

var file_vega_checkpoint_v1_checkpoint_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_vega_checkpoint_v1_checkpoint_proto_goTypes = []interface{}{
	(*CheckpointState)(nil),                   // 0: vega.checkpoint.v1.CheckpointState
	(*Checkpoint)(nil),                        // 1: vega.checkpoint.v1.Checkpoint
	(*AssetEntry)(nil),                        // 2: vega.checkpoint.v1.AssetEntry
	(*Assets)(nil),                            // 3: vega.checkpoint.v1.Assets
	(*AssetBalance)(nil),                      // 4: vega.checkpoint.v1.AssetBalance
	(*Collateral)(nil),                        // 5: vega.checkpoint.v1.Collateral
	(*NetParams)(nil),                         // 6: vega.checkpoint.v1.NetParams
	(*Proposals)(nil),                         // 7: vega.checkpoint.v1.Proposals
	(*DelegateEntry)(nil),                     // 8: vega.checkpoint.v1.DelegateEntry
	(*Delegate)(nil),                          // 9: vega.checkpoint.v1.Delegate
	(*Block)(nil),                             // 10: vega.checkpoint.v1.Block
	(*Rewards)(nil),                           // 11: vega.checkpoint.v1.Rewards
	(*RewardPayout)(nil),                      // 12: vega.checkpoint.v1.RewardPayout
	(*PendingRewardPayout)(nil),               // 13: vega.checkpoint.v1.PendingRewardPayout
	(*PartyAmount)(nil),                       // 14: vega.checkpoint.v1.PartyAmount
	(*PendingKeyRotation)(nil),                // 15: vega.checkpoint.v1.PendingKeyRotation
	(*PendingEthereumKeyRotation)(nil),        // 16: vega.checkpoint.v1.PendingEthereumKeyRotation
	(*ScheduledTransfer)(nil),                 // 17: vega.checkpoint.v1.ScheduledTransfer
	(*ScheduledTransferAtTime)(nil),           // 18: vega.checkpoint.v1.ScheduledTransferAtTime
	(*RecurringTransfers)(nil),                // 19: vega.checkpoint.v1.RecurringTransfers
	(*GovernanceTransfer)(nil),                // 20: vega.checkpoint.v1.GovernanceTransfer
	(*ScheduledGovernanceTransferAtTime)(nil), // 21: vega.checkpoint.v1.ScheduledGovernanceTransferAtTime
	(*Banking)(nil),                           // 22: vega.checkpoint.v1.Banking
	(*BridgeState)(nil),                       // 23: vega.checkpoint.v1.BridgeState
	(*Validators)(nil),                        // 24: vega.checkpoint.v1.Validators
	(*ValidatorState)(nil),                    // 25: vega.checkpoint.v1.ValidatorState
	(*Staking)(nil),                           // 26: vega.checkpoint.v1.Staking
	(*MultisigControl)(nil),                   // 27: vega.checkpoint.v1.MultisigControl
	(*MarketTracker)(nil),                     // 28: vega.checkpoint.v1.MarketTracker
	(*MarketActivityTracker)(nil),             // 29: vega.checkpoint.v1.MarketActivityTracker
	(*EpochTimeWeightPositionData)(nil),       // 30: vega.checkpoint.v1.EpochTimeWeightPositionData
	(*EpochTimeWeightedNotionalData)(nil),     // 31: vega.checkpoint.v1.EpochTimeWeightedNotionalData
	(*PartyTimeWeightedNotional)(nil),         // 32: vega.checkpoint.v1.PartyTimeWeightedNotional
	(*PartyTimeWeightedPosition)(nil),         // 33: vega.checkpoint.v1.PartyTimeWeightedPosition
	(*EpochPartyFees)(nil),                    // 34: vega.checkpoint.v1.EpochPartyFees
	(*TakerNotionalVolume)(nil),               // 35: vega.checkpoint.v1.TakerNotionalVolume
	(*MarketToPartyTakerNotionalVolume)(nil),  // 36: vega.checkpoint.v1.MarketToPartyTakerNotionalVolume
	(*EpochReturnsData)(nil),                  // 37: vega.checkpoint.v1.EpochReturnsData
	(*ReturnsData)(nil),                       // 38: vega.checkpoint.v1.ReturnsData
	(*TWPositionData)(nil),                    // 39: vega.checkpoint.v1.TWPositionData
	(*TWNotionalData)(nil),                    // 40: vega.checkpoint.v1.TWNotionalData
	(*PartyFees)(nil),                         // 41: vega.checkpoint.v1.PartyFees
	(*PartyFeesHistory)(nil),                  // 42: vega.checkpoint.v1.PartyFeesHistory
	(*AssetAction)(nil),                       // 43: vega.checkpoint.v1.AssetAction
	(*ELSShare)(nil),                          // 44: vega.checkpoint.v1.ELSShare
	(*MarketState)(nil),                       // 45: vega.checkpoint.v1.MarketState
	(*ExecutionState)(nil),                    // 46: vega.checkpoint.v1.ExecutionState
	(*vega.AssetDetails)(nil),                 // 47: vega.AssetDetails
	(*vega.NetworkParameter)(nil),             // 48: vega.NetworkParameter
	(*vega.Proposal)(nil),                     // 49: vega.Proposal
	(*vega.Transfer)(nil),                     // 50: vega.Transfer
	(vega.AccountType)(0),                     // 51: vega.AccountType
	(*v1.Transfer)(nil),                       // 52: vega.events.v1.Transfer
	(v1.Transfer_Status)(0),                   // 53: vega.events.v1.Transfer.Status
	(*vega.NewTransferConfiguration)(nil),     // 54: vega.NewTransferConfiguration
	(*v1.ValidatorUpdate)(nil),                // 55: vega.events.v1.ValidatorUpdate
	(*vega.RankingScore)(nil),                 // 56: vega.RankingScore
	(*v1.StakeLinking)(nil),                   // 57: vega.events.v1.StakeLinking
	(*v1.ERC20MultiSigSignerEvent)(nil),       // 58: vega.events.v1.ERC20MultiSigSignerEvent
	(*v1.ERC20MultiSigThresholdSetEvent)(nil), // 59: vega.events.v1.ERC20MultiSigThresholdSetEvent
	(*vega.BuiltinAssetDeposit)(nil),          // 60: vega.BuiltinAssetDeposit
	(*vega.ERC20Deposit)(nil),                 // 61: vega.ERC20Deposit
	(*vega.ERC20AssetList)(nil),               // 62: vega.ERC20AssetList
	(*vega.ERC20AssetLimitsUpdated)(nil),      // 63: vega.ERC20AssetLimitsUpdated
	(*vega.Market)(nil),                       // 64: vega.Market
}
var file_vega_checkpoint_v1_checkpoint_proto_depIdxs = []int32{
	47, // 0: vega.checkpoint.v1.AssetEntry.asset_details:type_name -> vega.AssetDetails
	2,  // 1: vega.checkpoint.v1.Assets.assets:type_name -> vega.checkpoint.v1.AssetEntry
	2,  // 2: vega.checkpoint.v1.Assets.pending_listing_assets:type_name -> vega.checkpoint.v1.AssetEntry
	4,  // 3: vega.checkpoint.v1.Collateral.balances:type_name -> vega.checkpoint.v1.AssetBalance
	48, // 4: vega.checkpoint.v1.NetParams.params:type_name -> vega.NetworkParameter
	49, // 5: vega.checkpoint.v1.Proposals.proposals:type_name -> vega.Proposal
	8,  // 6: vega.checkpoint.v1.Delegate.active:type_name -> vega.checkpoint.v1.DelegateEntry
	8,  // 7: vega.checkpoint.v1.Delegate.pending:type_name -> vega.checkpoint.v1.DelegateEntry
	12, // 8: vega.checkpoint.v1.Rewards.rewards:type_name -> vega.checkpoint.v1.RewardPayout
	13, // 9: vega.checkpoint.v1.RewardPayout.rewards_payout:type_name -> vega.checkpoint.v1.PendingRewardPayout
	14, // 10: vega.checkpoint.v1.PendingRewardPayout.party_amount:type_name -> vega.checkpoint.v1.PartyAmount
	50, // 11: vega.checkpoint.v1.ScheduledTransfer.transfer:type_name -> vega.Transfer
	51, // 12: vega.checkpoint.v1.ScheduledTransfer.account_type:type_name -> vega.AccountType
	52, // 13: vega.checkpoint.v1.ScheduledTransfer.oneoff_transfer:type_name -> vega.events.v1.Transfer
	17, // 14: vega.checkpoint.v1.ScheduledTransferAtTime.transfers:type_name -> vega.checkpoint.v1.ScheduledTransfer
	52, // 15: vega.checkpoint.v1.RecurringTransfers.recurring_transfers:type_name -> vega.events.v1.Transfer
	53, // 16: vega.checkpoint.v1.GovernanceTransfer.status:type_name -> vega.events.v1.Transfer.Status
	54, // 17: vega.checkpoint.v1.GovernanceTransfer.config:type_name -> vega.NewTransferConfiguration
	20, // 18: vega.checkpoint.v1.ScheduledGovernanceTransferAtTime.transfers:type_name -> vega.checkpoint.v1.GovernanceTransfer
	18, // 19: vega.checkpoint.v1.Banking.transfers_at_time:type_name -> vega.checkpoint.v1.ScheduledTransferAtTime
	19, // 20: vega.checkpoint.v1.Banking.recurring_transfers:type_name -> vega.checkpoint.v1.RecurringTransfers
	23, // 21: vega.checkpoint.v1.Banking.bridge_state:type_name -> vega.checkpoint.v1.BridgeState
	43, // 22: vega.checkpoint.v1.Banking.asset_actions:type_name -> vega.checkpoint.v1.AssetAction
	21, // 23: vega.checkpoint.v1.Banking.governance_transfers_at_time:type_name -> vega.checkpoint.v1.ScheduledGovernanceTransferAtTime
	20, // 24: vega.checkpoint.v1.Banking.recurring_governance_transfers:type_name -> vega.checkpoint.v1.GovernanceTransfer
	25, // 25: vega.checkpoint.v1.Validators.validator_state:type_name -> vega.checkpoint.v1.ValidatorState
	15, // 26: vega.checkpoint.v1.Validators.pending_key_rotations:type_name -> vega.checkpoint.v1.PendingKeyRotation
	16, // 27: vega.checkpoint.v1.Validators.pending_ethereum_key_rotations:type_name -> vega.checkpoint.v1.PendingEthereumKeyRotation
	55, // 28: vega.checkpoint.v1.ValidatorState.validator_update:type_name -> vega.events.v1.ValidatorUpdate
	56, // 29: vega.checkpoint.v1.ValidatorState.ranking_score:type_name -> vega.RankingScore
	57, // 30: vega.checkpoint.v1.Staking.accepted:type_name -> vega.events.v1.StakeLinking
	58, // 31: vega.checkpoint.v1.MultisigControl.signers:type_name -> vega.events.v1.ERC20MultiSigSignerEvent
	59, // 32: vega.checkpoint.v1.MultisigControl.threshold_set:type_name -> vega.events.v1.ERC20MultiSigThresholdSetEvent
	29, // 33: vega.checkpoint.v1.MarketTracker.market_activity:type_name -> vega.checkpoint.v1.MarketActivityTracker
	35, // 34: vega.checkpoint.v1.MarketTracker.taker_notional_volume:type_name -> vega.checkpoint.v1.TakerNotionalVolume
	36, // 35: vega.checkpoint.v1.MarketTracker.market_to_party_taker_notional_volume:type_name -> vega.checkpoint.v1.MarketToPartyTakerNotionalVolume
	41, // 36: vega.checkpoint.v1.MarketActivityTracker.maker_fees_received:type_name -> vega.checkpoint.v1.PartyFees
	41, // 37: vega.checkpoint.v1.MarketActivityTracker.maker_fees_paid:type_name -> vega.checkpoint.v1.PartyFees
	41, // 38: vega.checkpoint.v1.MarketActivityTracker.lp_fees:type_name -> vega.checkpoint.v1.PartyFees
	39, // 39: vega.checkpoint.v1.MarketActivityTracker.time_weighted_position:type_name -> vega.checkpoint.v1.TWPositionData
	40, // 40: vega.checkpoint.v1.MarketActivityTracker.time_weighted_notional:type_name -> vega.checkpoint.v1.TWNotionalData
	38, // 41: vega.checkpoint.v1.MarketActivityTracker.returns_data:type_name -> vega.checkpoint.v1.ReturnsData
	34, // 42: vega.checkpoint.v1.MarketActivityTracker.maker_fees_received_history:type_name -> vega.checkpoint.v1.EpochPartyFees
	34, // 43: vega.checkpoint.v1.MarketActivityTracker.maker_fees_paid_history:type_name -> vega.checkpoint.v1.EpochPartyFees
	34, // 44: vega.checkpoint.v1.MarketActivityTracker.lp_fees_history:type_name -> vega.checkpoint.v1.EpochPartyFees
	30, // 45: vega.checkpoint.v1.MarketActivityTracker.time_weighted_position_data_history:type_name -> vega.checkpoint.v1.EpochTimeWeightPositionData
	31, // 46: vega.checkpoint.v1.MarketActivityTracker.time_weighted_notional_data_history:type_name -> vega.checkpoint.v1.EpochTimeWeightedNotionalData
	37, // 47: vega.checkpoint.v1.MarketActivityTracker.returns_data_history:type_name -> vega.checkpoint.v1.EpochReturnsData
	33, // 48: vega.checkpoint.v1.EpochTimeWeightPositionData.party_time_weighted_positions:type_name -> vega.checkpoint.v1.PartyTimeWeightedPosition
	32, // 49: vega.checkpoint.v1.EpochTimeWeightedNotionalData.party_time_weighted_notionals:type_name -> vega.checkpoint.v1.PartyTimeWeightedNotional
	42, // 50: vega.checkpoint.v1.EpochPartyFees.party_fees:type_name -> vega.checkpoint.v1.PartyFeesHistory
	35, // 51: vega.checkpoint.v1.MarketToPartyTakerNotionalVolume.taker_notional_volume:type_name -> vega.checkpoint.v1.TakerNotionalVolume
	38, // 52: vega.checkpoint.v1.EpochReturnsData.returns:type_name -> vega.checkpoint.v1.ReturnsData
	60, // 53: vega.checkpoint.v1.AssetAction.builtin_deposit:type_name -> vega.BuiltinAssetDeposit
	61, // 54: vega.checkpoint.v1.AssetAction.erc20_deposit:type_name -> vega.ERC20Deposit
	62, // 55: vega.checkpoint.v1.AssetAction.asset_list:type_name -> vega.ERC20AssetList
	63, // 56: vega.checkpoint.v1.AssetAction.erc20_asset_limits_updated:type_name -> vega.ERC20AssetLimitsUpdated
	44, // 57: vega.checkpoint.v1.MarketState.shares:type_name -> vega.checkpoint.v1.ELSShare
	64, // 58: vega.checkpoint.v1.MarketState.market:type_name -> vega.Market
	45, // 59: vega.checkpoint.v1.ExecutionState.data:type_name -> vega.checkpoint.v1.MarketState
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_vega_checkpoint_v1_checkpoint_proto_init() }
func file_vega_checkpoint_v1_checkpoint_proto_init() {
	if File_vega_checkpoint_v1_checkpoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collateral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardPayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingRewardPayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingKeyRotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingEthereumKeyRotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTransferAtTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledGovernanceTransferAtTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Banking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisigControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketActivityTracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochTimeWeightPositionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochTimeWeightedNotionalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyTimeWeightedNotional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyTimeWeightedPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochPartyFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakerNotionalVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketToPartyTakerNotionalVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochReturnsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWPositionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWNotionalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyFeesHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ELSShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_checkpoint_v1_checkpoint_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_checkpoint_v1_checkpoint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_checkpoint_v1_checkpoint_proto_goTypes,
		DependencyIndexes: file_vega_checkpoint_v1_checkpoint_proto_depIdxs,
		MessageInfos:      file_vega_checkpoint_v1_checkpoint_proto_msgTypes,
	}.Build()
	File_vega_checkpoint_v1_checkpoint_proto = out.File
	file_vega_checkpoint_v1_checkpoint_proto_rawDesc = nil
	file_vega_checkpoint_v1_checkpoint_proto_goTypes = nil
	file_vega_checkpoint_v1_checkpoint_proto_depIdxs = nil
}
