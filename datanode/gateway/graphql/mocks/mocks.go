// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/gateway/graphql (interfaces: CoreProxyServiceClient,TradingDataServiceClientV2,TradingDataServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "code.vegaprotocol.io/vega/protos/data-node/api/v1"
	v2 "code.vegaprotocol.io/vega/protos/data-node/api/v2"
	v10 "code.vegaprotocol.io/vega/protos/vega/api/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCoreProxyServiceClient is a mock of CoreProxyServiceClient interface.
type MockCoreProxyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCoreProxyServiceClientMockRecorder
}

// MockCoreProxyServiceClientMockRecorder is the mock recorder for MockCoreProxyServiceClient.
type MockCoreProxyServiceClientMockRecorder struct {
	mock *MockCoreProxyServiceClient
}

// NewMockCoreProxyServiceClient creates a new mock instance.
func NewMockCoreProxyServiceClient(ctrl *gomock.Controller) *MockCoreProxyServiceClient {
	mock := &MockCoreProxyServiceClient{ctrl: ctrl}
	mock.recorder = &MockCoreProxyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreProxyServiceClient) EXPECT() *MockCoreProxyServiceClientMockRecorder {
	return m.recorder
}

// CheckRawTransaction mocks base method.
func (m *MockCoreProxyServiceClient) CheckRawTransaction(arg0 context.Context, arg1 *v10.CheckRawTransactionRequest, arg2 ...grpc.CallOption) (*v10.CheckRawTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckRawTransaction", varargs...)
	ret0, _ := ret[0].(*v10.CheckRawTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRawTransaction indicates an expected call of CheckRawTransaction.
func (mr *MockCoreProxyServiceClientMockRecorder) CheckRawTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRawTransaction", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).CheckRawTransaction), varargs...)
}

// CheckTransaction mocks base method.
func (m *MockCoreProxyServiceClient) CheckTransaction(arg0 context.Context, arg1 *v10.CheckTransactionRequest, arg2 ...grpc.CallOption) (*v10.CheckTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckTransaction", varargs...)
	ret0, _ := ret[0].(*v10.CheckTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTransaction indicates an expected call of CheckTransaction.
func (mr *MockCoreProxyServiceClientMockRecorder) CheckTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransaction", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).CheckTransaction), varargs...)
}

// GetVegaTime mocks base method.
func (m *MockCoreProxyServiceClient) GetVegaTime(arg0 context.Context, arg1 *v10.GetVegaTimeRequest, arg2 ...grpc.CallOption) (*v10.GetVegaTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVegaTime", varargs...)
	ret0, _ := ret[0].(*v10.GetVegaTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVegaTime indicates an expected call of GetVegaTime.
func (mr *MockCoreProxyServiceClientMockRecorder) GetVegaTime(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVegaTime", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).GetVegaTime), varargs...)
}

// LastBlockHeight mocks base method.
func (m *MockCoreProxyServiceClient) LastBlockHeight(arg0 context.Context, arg1 *v10.LastBlockHeightRequest, arg2 ...grpc.CallOption) (*v10.LastBlockHeightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LastBlockHeight", varargs...)
	ret0, _ := ret[0].(*v10.LastBlockHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBlockHeight indicates an expected call of LastBlockHeight.
func (mr *MockCoreProxyServiceClientMockRecorder) LastBlockHeight(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBlockHeight", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).LastBlockHeight), varargs...)
}

// ObserveEventBus mocks base method.
func (m *MockCoreProxyServiceClient) ObserveEventBus(arg0 context.Context, arg1 ...grpc.CallOption) (v10.CoreService_ObserveEventBusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveEventBus", varargs...)
	ret0, _ := ret[0].(v10.CoreService_ObserveEventBusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveEventBus indicates an expected call of ObserveEventBus.
func (mr *MockCoreProxyServiceClientMockRecorder) ObserveEventBus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveEventBus", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).ObserveEventBus), varargs...)
}

// PropagateChainEvent mocks base method.
func (m *MockCoreProxyServiceClient) PropagateChainEvent(arg0 context.Context, arg1 *v10.PropagateChainEventRequest, arg2 ...grpc.CallOption) (*v10.PropagateChainEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PropagateChainEvent", varargs...)
	ret0, _ := ret[0].(*v10.PropagateChainEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropagateChainEvent indicates an expected call of PropagateChainEvent.
func (mr *MockCoreProxyServiceClientMockRecorder) PropagateChainEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropagateChainEvent", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).PropagateChainEvent), varargs...)
}

// Statistics mocks base method.
func (m *MockCoreProxyServiceClient) Statistics(arg0 context.Context, arg1 *v10.StatisticsRequest, arg2 ...grpc.CallOption) (*v10.StatisticsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Statistics", varargs...)
	ret0, _ := ret[0].(*v10.StatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockCoreProxyServiceClientMockRecorder) Statistics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).Statistics), varargs...)
}

// SubmitRawTransaction mocks base method.
func (m *MockCoreProxyServiceClient) SubmitRawTransaction(arg0 context.Context, arg1 *v10.SubmitRawTransactionRequest, arg2 ...grpc.CallOption) (*v10.SubmitRawTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitRawTransaction", varargs...)
	ret0, _ := ret[0].(*v10.SubmitRawTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRawTransaction indicates an expected call of SubmitRawTransaction.
func (mr *MockCoreProxyServiceClientMockRecorder) SubmitRawTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRawTransaction", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).SubmitRawTransaction), varargs...)
}

// SubmitTransaction mocks base method.
func (m *MockCoreProxyServiceClient) SubmitTransaction(arg0 context.Context, arg1 *v10.SubmitTransactionRequest, arg2 ...grpc.CallOption) (*v10.SubmitTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitTransaction", varargs...)
	ret0, _ := ret[0].(*v10.SubmitTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransaction indicates an expected call of SubmitTransaction.
func (mr *MockCoreProxyServiceClientMockRecorder) SubmitTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransaction", reflect.TypeOf((*MockCoreProxyServiceClient)(nil).SubmitTransaction), varargs...)
}

// MockTradingDataServiceClientV2 is a mock of TradingDataServiceClientV2 interface.
type MockTradingDataServiceClientV2 struct {
	ctrl     *gomock.Controller
	recorder *MockTradingDataServiceClientV2MockRecorder
}

// MockTradingDataServiceClientV2MockRecorder is the mock recorder for MockTradingDataServiceClientV2.
type MockTradingDataServiceClientV2MockRecorder struct {
	mock *MockTradingDataServiceClientV2
}

// NewMockTradingDataServiceClientV2 creates a new mock instance.
func NewMockTradingDataServiceClientV2(ctrl *gomock.Controller) *MockTradingDataServiceClientV2 {
	mock := &MockTradingDataServiceClientV2{ctrl: ctrl}
	mock.recorder = &MockTradingDataServiceClientV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradingDataServiceClientV2) EXPECT() *MockTradingDataServiceClientV2MockRecorder {
	return m.recorder
}

// EstimateFee mocks base method.
func (m *MockTradingDataServiceClientV2) EstimateFee(arg0 context.Context, arg1 *v2.EstimateFeeRequest, arg2 ...grpc.CallOption) (*v2.EstimateFeeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateFee", varargs...)
	ret0, _ := ret[0].(*v2.EstimateFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateFee indicates an expected call of EstimateFee.
func (mr *MockTradingDataServiceClientV2MockRecorder) EstimateFee(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateFee", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).EstimateFee), varargs...)
}

// EstimateMargin mocks base method.
func (m *MockTradingDataServiceClientV2) EstimateMargin(arg0 context.Context, arg1 *v2.EstimateMarginRequest, arg2 ...grpc.CallOption) (*v2.EstimateMarginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateMargin", varargs...)
	ret0, _ := ret[0].(*v2.EstimateMarginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateMargin indicates an expected call of EstimateMargin.
func (mr *MockTradingDataServiceClientV2MockRecorder) EstimateMargin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateMargin", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).EstimateMargin), varargs...)
}

// FetchDeHistorySegment mocks base method.
func (m *MockTradingDataServiceClientV2) FetchDeHistorySegment(arg0 context.Context, arg1 *v2.FetchDeHistorySegmentRequest, arg2 ...grpc.CallOption) (*v2.FetchDeHistorySegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchDeHistorySegment", varargs...)
	ret0, _ := ret[0].(*v2.FetchDeHistorySegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeHistorySegment indicates an expected call of FetchDeHistorySegment.
func (mr *MockTradingDataServiceClientV2MockRecorder) FetchDeHistorySegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeHistorySegment", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).FetchDeHistorySegment), varargs...)
}

// GetActiveDeHistoryPeerAddresses mocks base method.
func (m *MockTradingDataServiceClientV2) GetActiveDeHistoryPeerAddresses(arg0 context.Context, arg1 *v2.GetActiveDeHistoryPeerAddressesRequest, arg2 ...grpc.CallOption) (*v2.GetActiveDeHistoryPeerAddressesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActiveDeHistoryPeerAddresses", varargs...)
	ret0, _ := ret[0].(*v2.GetActiveDeHistoryPeerAddressesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveDeHistoryPeerAddresses indicates an expected call of GetActiveDeHistoryPeerAddresses.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetActiveDeHistoryPeerAddresses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDeHistoryPeerAddresses", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetActiveDeHistoryPeerAddresses), varargs...)
}

// GetAsset mocks base method.
func (m *MockTradingDataServiceClientV2) GetAsset(arg0 context.Context, arg1 *v2.GetAssetRequest, arg2 ...grpc.CallOption) (*v2.GetAssetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAsset", varargs...)
	ret0, _ := ret[0].(*v2.GetAssetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetAsset(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetAsset), varargs...)
}

// GetDeposit mocks base method.
func (m *MockTradingDataServiceClientV2) GetDeposit(arg0 context.Context, arg1 *v2.GetDepositRequest, arg2 ...grpc.CallOption) (*v2.GetDepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeposit", varargs...)
	ret0, _ := ret[0].(*v2.GetDepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeposit indicates an expected call of GetDeposit.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetDeposit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeposit", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetDeposit), varargs...)
}

// GetERC20ListAssetBundle mocks base method.
func (m *MockTradingDataServiceClientV2) GetERC20ListAssetBundle(arg0 context.Context, arg1 *v2.GetERC20ListAssetBundleRequest, arg2 ...grpc.CallOption) (*v2.GetERC20ListAssetBundleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetERC20ListAssetBundle", varargs...)
	ret0, _ := ret[0].(*v2.GetERC20ListAssetBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetERC20ListAssetBundle indicates an expected call of GetERC20ListAssetBundle.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetERC20ListAssetBundle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetERC20ListAssetBundle", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetERC20ListAssetBundle), varargs...)
}

// GetERC20SetAssetLimitsBundle mocks base method.
func (m *MockTradingDataServiceClientV2) GetERC20SetAssetLimitsBundle(arg0 context.Context, arg1 *v2.GetERC20SetAssetLimitsBundleRequest, arg2 ...grpc.CallOption) (*v2.GetERC20SetAssetLimitsBundleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetERC20SetAssetLimitsBundle", varargs...)
	ret0, _ := ret[0].(*v2.GetERC20SetAssetLimitsBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetERC20SetAssetLimitsBundle indicates an expected call of GetERC20SetAssetLimitsBundle.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetERC20SetAssetLimitsBundle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetERC20SetAssetLimitsBundle", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetERC20SetAssetLimitsBundle), varargs...)
}

// GetERC20WithdrawalApproval mocks base method.
func (m *MockTradingDataServiceClientV2) GetERC20WithdrawalApproval(arg0 context.Context, arg1 *v2.GetERC20WithdrawalApprovalRequest, arg2 ...grpc.CallOption) (*v2.GetERC20WithdrawalApprovalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetERC20WithdrawalApproval", varargs...)
	ret0, _ := ret[0].(*v2.GetERC20WithdrawalApprovalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetERC20WithdrawalApproval indicates an expected call of GetERC20WithdrawalApproval.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetERC20WithdrawalApproval(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetERC20WithdrawalApproval", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetERC20WithdrawalApproval), varargs...)
}

// GetEpoch mocks base method.
func (m *MockTradingDataServiceClientV2) GetEpoch(arg0 context.Context, arg1 *v2.GetEpochRequest, arg2 ...grpc.CallOption) (*v2.GetEpochResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpoch", varargs...)
	ret0, _ := ret[0].(*v2.GetEpochResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetEpoch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetEpoch), varargs...)
}

// GetGovernanceData mocks base method.
func (m *MockTradingDataServiceClientV2) GetGovernanceData(arg0 context.Context, arg1 *v2.GetGovernanceDataRequest, arg2 ...grpc.CallOption) (*v2.GetGovernanceDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGovernanceData", varargs...)
	ret0, _ := ret[0].(*v2.GetGovernanceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGovernanceData indicates an expected call of GetGovernanceData.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetGovernanceData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGovernanceData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetGovernanceData), varargs...)
}

// GetLastTrade mocks base method.
func (m *MockTradingDataServiceClientV2) GetLastTrade(arg0 context.Context, arg1 *v2.GetLastTradeRequest, arg2 ...grpc.CallOption) (*v2.GetLastTradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastTrade", varargs...)
	ret0, _ := ret[0].(*v2.GetLastTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTrade indicates an expected call of GetLastTrade.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetLastTrade(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTrade", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetLastTrade), varargs...)
}

// GetLatestMarketData mocks base method.
func (m *MockTradingDataServiceClientV2) GetLatestMarketData(arg0 context.Context, arg1 *v2.GetLatestMarketDataRequest, arg2 ...grpc.CallOption) (*v2.GetLatestMarketDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestMarketData", varargs...)
	ret0, _ := ret[0].(*v2.GetLatestMarketDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMarketData indicates an expected call of GetLatestMarketData.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetLatestMarketData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMarketData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetLatestMarketData), varargs...)
}

// GetLatestMarketDepth mocks base method.
func (m *MockTradingDataServiceClientV2) GetLatestMarketDepth(arg0 context.Context, arg1 *v2.GetLatestMarketDepthRequest, arg2 ...grpc.CallOption) (*v2.GetLatestMarketDepthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestMarketDepth", varargs...)
	ret0, _ := ret[0].(*v2.GetLatestMarketDepthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMarketDepth indicates an expected call of GetLatestMarketDepth.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetLatestMarketDepth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMarketDepth", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetLatestMarketDepth), varargs...)
}

// GetMarket mocks base method.
func (m *MockTradingDataServiceClientV2) GetMarket(arg0 context.Context, arg1 *v2.GetMarketRequest, arg2 ...grpc.CallOption) (*v2.GetMarketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMarket", varargs...)
	ret0, _ := ret[0].(*v2.GetMarketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarket indicates an expected call of GetMarket.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetMarket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarket", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetMarket), varargs...)
}

// GetMarketDataHistoryByID mocks base method.
func (m *MockTradingDataServiceClientV2) GetMarketDataHistoryByID(arg0 context.Context, arg1 *v2.GetMarketDataHistoryByIDRequest, arg2 ...grpc.CallOption) (*v2.GetMarketDataHistoryByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMarketDataHistoryByID", varargs...)
	ret0, _ := ret[0].(*v2.GetMarketDataHistoryByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketDataHistoryByID indicates an expected call of GetMarketDataHistoryByID.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetMarketDataHistoryByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketDataHistoryByID", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetMarketDataHistoryByID), varargs...)
}

// GetMostRecentDeHistorySegment mocks base method.
func (m *MockTradingDataServiceClientV2) GetMostRecentDeHistorySegment(arg0 context.Context, arg1 *v2.GetMostRecentDeHistorySegmentRequest, arg2 ...grpc.CallOption) (*v2.GetMostRecentDeHistorySegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMostRecentDeHistorySegment", varargs...)
	ret0, _ := ret[0].(*v2.GetMostRecentDeHistorySegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRecentDeHistorySegment indicates an expected call of GetMostRecentDeHistorySegment.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetMostRecentDeHistorySegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentDeHistorySegment", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetMostRecentDeHistorySegment), varargs...)
}

// GetNetworkData mocks base method.
func (m *MockTradingDataServiceClientV2) GetNetworkData(arg0 context.Context, arg1 *v2.GetNetworkDataRequest, arg2 ...grpc.CallOption) (*v2.GetNetworkDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkData", varargs...)
	ret0, _ := ret[0].(*v2.GetNetworkDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkData indicates an expected call of GetNetworkData.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetNetworkData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetNetworkData), varargs...)
}

// GetNetworkLimits mocks base method.
func (m *MockTradingDataServiceClientV2) GetNetworkLimits(arg0 context.Context, arg1 *v2.GetNetworkLimitsRequest, arg2 ...grpc.CallOption) (*v2.GetNetworkLimitsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkLimits", varargs...)
	ret0, _ := ret[0].(*v2.GetNetworkLimitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLimits indicates an expected call of GetNetworkLimits.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetNetworkLimits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLimits", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetNetworkLimits), varargs...)
}

// GetNetworkParameter mocks base method.
func (m *MockTradingDataServiceClientV2) GetNetworkParameter(arg0 context.Context, arg1 *v2.GetNetworkParameterRequest, arg2 ...grpc.CallOption) (*v2.GetNetworkParameterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkParameter", varargs...)
	ret0, _ := ret[0].(*v2.GetNetworkParameterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkParameter indicates an expected call of GetNetworkParameter.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetNetworkParameter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkParameter", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetNetworkParameter), varargs...)
}

// GetNode mocks base method.
func (m *MockTradingDataServiceClientV2) GetNode(arg0 context.Context, arg1 *v2.GetNodeRequest, arg2 ...grpc.CallOption) (*v2.GetNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNode", varargs...)
	ret0, _ := ret[0].(*v2.GetNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetNode), varargs...)
}

// GetOracleSpec mocks base method.
func (m *MockTradingDataServiceClientV2) GetOracleSpec(arg0 context.Context, arg1 *v2.GetOracleSpecRequest, arg2 ...grpc.CallOption) (*v2.GetOracleSpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOracleSpec", varargs...)
	ret0, _ := ret[0].(*v2.GetOracleSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOracleSpec indicates an expected call of GetOracleSpec.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetOracleSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOracleSpec", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetOracleSpec), varargs...)
}

// GetOrder mocks base method.
func (m *MockTradingDataServiceClientV2) GetOrder(arg0 context.Context, arg1 *v2.GetOrderRequest, arg2 ...grpc.CallOption) (*v2.GetOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrder", varargs...)
	ret0, _ := ret[0].(*v2.GetOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetOrder), varargs...)
}

// GetParty mocks base method.
func (m *MockTradingDataServiceClientV2) GetParty(arg0 context.Context, arg1 *v2.GetPartyRequest, arg2 ...grpc.CallOption) (*v2.GetPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParty", varargs...)
	ret0, _ := ret[0].(*v2.GetPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParty indicates an expected call of GetParty.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParty", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetParty), varargs...)
}

// GetProtocolUpgradeStatus mocks base method.
func (m *MockTradingDataServiceClientV2) GetProtocolUpgradeStatus(arg0 context.Context, arg1 *v2.GetProtocolUpgradeStatusRequest, arg2 ...grpc.CallOption) (*v2.GetProtocolUpgradeStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtocolUpgradeStatus", varargs...)
	ret0, _ := ret[0].(*v2.GetProtocolUpgradeStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtocolUpgradeStatus indicates an expected call of GetProtocolUpgradeStatus.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetProtocolUpgradeStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocolUpgradeStatus", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetProtocolUpgradeStatus), varargs...)
}

// GetRiskFactors mocks base method.
func (m *MockTradingDataServiceClientV2) GetRiskFactors(arg0 context.Context, arg1 *v2.GetRiskFactorsRequest, arg2 ...grpc.CallOption) (*v2.GetRiskFactorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRiskFactors", varargs...)
	ret0, _ := ret[0].(*v2.GetRiskFactorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRiskFactors indicates an expected call of GetRiskFactors.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetRiskFactors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRiskFactors", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetRiskFactors), varargs...)
}

// GetStake mocks base method.
func (m *MockTradingDataServiceClientV2) GetStake(arg0 context.Context, arg1 *v2.GetStakeRequest, arg2 ...grpc.CallOption) (*v2.GetStakeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStake", varargs...)
	ret0, _ := ret[0].(*v2.GetStakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStake indicates an expected call of GetStake.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetStake(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStake", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetStake), varargs...)
}

// GetVegaTime mocks base method.
func (m *MockTradingDataServiceClientV2) GetVegaTime(arg0 context.Context, arg1 *v2.GetVegaTimeRequest, arg2 ...grpc.CallOption) (*v2.GetVegaTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVegaTime", varargs...)
	ret0, _ := ret[0].(*v2.GetVegaTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVegaTime indicates an expected call of GetVegaTime.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetVegaTime(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVegaTime", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetVegaTime), varargs...)
}

// GetWithdrawal mocks base method.
func (m *MockTradingDataServiceClientV2) GetWithdrawal(arg0 context.Context, arg1 *v2.GetWithdrawalRequest, arg2 ...grpc.CallOption) (*v2.GetWithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithdrawal", varargs...)
	ret0, _ := ret[0].(*v2.GetWithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawal indicates an expected call of GetWithdrawal.
func (mr *MockTradingDataServiceClientV2MockRecorder) GetWithdrawal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawal", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).GetWithdrawal), varargs...)
}

// Info mocks base method.
func (m *MockTradingDataServiceClientV2) Info(arg0 context.Context, arg1 *v2.InfoRequest, arg2 ...grpc.CallOption) (*v2.InfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*v2.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockTradingDataServiceClientV2MockRecorder) Info(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).Info), varargs...)
}

// ListAccounts mocks base method.
func (m *MockTradingDataServiceClientV2) ListAccounts(arg0 context.Context, arg1 *v2.ListAccountsRequest, arg2 ...grpc.CallOption) (*v2.ListAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccounts", varargs...)
	ret0, _ := ret[0].(*v2.ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListAccounts), varargs...)
}

// ListAllDeHistorySegments mocks base method.
func (m *MockTradingDataServiceClientV2) ListAllDeHistorySegments(arg0 context.Context, arg1 *v2.ListAllDeHistorySegmentsRequest, arg2 ...grpc.CallOption) (*v2.ListAllDeHistorySegmentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllDeHistorySegments", varargs...)
	ret0, _ := ret[0].(*v2.ListAllDeHistorySegmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllDeHistorySegments indicates an expected call of ListAllDeHistorySegments.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListAllDeHistorySegments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllDeHistorySegments", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListAllDeHistorySegments), varargs...)
}

// ListAssets mocks base method.
func (m *MockTradingDataServiceClientV2) ListAssets(arg0 context.Context, arg1 *v2.ListAssetsRequest, arg2 ...grpc.CallOption) (*v2.ListAssetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAssets", varargs...)
	ret0, _ := ret[0].(*v2.ListAssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssets indicates an expected call of ListAssets.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListAssets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssets", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListAssets), varargs...)
}

// ListBalanceChanges mocks base method.
func (m *MockTradingDataServiceClientV2) ListBalanceChanges(arg0 context.Context, arg1 *v2.ListBalanceChangesRequest, arg2 ...grpc.CallOption) (*v2.ListBalanceChangesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBalanceChanges", varargs...)
	ret0, _ := ret[0].(*v2.ListBalanceChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBalanceChanges indicates an expected call of ListBalanceChanges.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListBalanceChanges(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBalanceChanges", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListBalanceChanges), varargs...)
}

// ListCandleData mocks base method.
func (m *MockTradingDataServiceClientV2) ListCandleData(arg0 context.Context, arg1 *v2.ListCandleDataRequest, arg2 ...grpc.CallOption) (*v2.ListCandleDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCandleData", varargs...)
	ret0, _ := ret[0].(*v2.ListCandleDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCandleData indicates an expected call of ListCandleData.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListCandleData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCandleData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListCandleData), varargs...)
}

// ListCandleIntervals mocks base method.
func (m *MockTradingDataServiceClientV2) ListCandleIntervals(arg0 context.Context, arg1 *v2.ListCandleIntervalsRequest, arg2 ...grpc.CallOption) (*v2.ListCandleIntervalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCandleIntervals", varargs...)
	ret0, _ := ret[0].(*v2.ListCandleIntervalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCandleIntervals indicates an expected call of ListCandleIntervals.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListCandleIntervals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCandleIntervals", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListCandleIntervals), varargs...)
}

// ListCheckpoints mocks base method.
func (m *MockTradingDataServiceClientV2) ListCheckpoints(arg0 context.Context, arg1 *v2.ListCheckpointsRequest, arg2 ...grpc.CallOption) (*v2.ListCheckpointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCheckpoints", varargs...)
	ret0, _ := ret[0].(*v2.ListCheckpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCheckpoints indicates an expected call of ListCheckpoints.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListCheckpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCheckpoints", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListCheckpoints), varargs...)
}

// ListDelegations mocks base method.
func (m *MockTradingDataServiceClientV2) ListDelegations(arg0 context.Context, arg1 *v2.ListDelegationsRequest, arg2 ...grpc.CallOption) (*v2.ListDelegationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDelegations", varargs...)
	ret0, _ := ret[0].(*v2.ListDelegationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDelegations indicates an expected call of ListDelegations.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListDelegations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDelegations", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListDelegations), varargs...)
}

// ListDeposits mocks base method.
func (m *MockTradingDataServiceClientV2) ListDeposits(arg0 context.Context, arg1 *v2.ListDepositsRequest, arg2 ...grpc.CallOption) (*v2.ListDepositsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeposits", varargs...)
	ret0, _ := ret[0].(*v2.ListDepositsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeposits indicates an expected call of ListDeposits.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListDeposits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeposits", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListDeposits), varargs...)
}

// ListERC20MultiSigSignerAddedBundles mocks base method.
func (m *MockTradingDataServiceClientV2) ListERC20MultiSigSignerAddedBundles(arg0 context.Context, arg1 *v2.ListERC20MultiSigSignerAddedBundlesRequest, arg2 ...grpc.CallOption) (*v2.ListERC20MultiSigSignerAddedBundlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListERC20MultiSigSignerAddedBundles", varargs...)
	ret0, _ := ret[0].(*v2.ListERC20MultiSigSignerAddedBundlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListERC20MultiSigSignerAddedBundles indicates an expected call of ListERC20MultiSigSignerAddedBundles.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListERC20MultiSigSignerAddedBundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListERC20MultiSigSignerAddedBundles", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListERC20MultiSigSignerAddedBundles), varargs...)
}

// ListERC20MultiSigSignerRemovedBundles mocks base method.
func (m *MockTradingDataServiceClientV2) ListERC20MultiSigSignerRemovedBundles(arg0 context.Context, arg1 *v2.ListERC20MultiSigSignerRemovedBundlesRequest, arg2 ...grpc.CallOption) (*v2.ListERC20MultiSigSignerRemovedBundlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListERC20MultiSigSignerRemovedBundles", varargs...)
	ret0, _ := ret[0].(*v2.ListERC20MultiSigSignerRemovedBundlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListERC20MultiSigSignerRemovedBundles indicates an expected call of ListERC20MultiSigSignerRemovedBundles.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListERC20MultiSigSignerRemovedBundles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListERC20MultiSigSignerRemovedBundles", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListERC20MultiSigSignerRemovedBundles), varargs...)
}

// ListEthereumKeyRotations mocks base method.
func (m *MockTradingDataServiceClientV2) ListEthereumKeyRotations(arg0 context.Context, arg1 *v2.ListEthereumKeyRotationsRequest, arg2 ...grpc.CallOption) (*v2.ListEthereumKeyRotationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEthereumKeyRotations", varargs...)
	ret0, _ := ret[0].(*v2.ListEthereumKeyRotationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEthereumKeyRotations indicates an expected call of ListEthereumKeyRotations.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListEthereumKeyRotations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEthereumKeyRotations", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListEthereumKeyRotations), varargs...)
}

// ListGovernanceData mocks base method.
func (m *MockTradingDataServiceClientV2) ListGovernanceData(arg0 context.Context, arg1 *v2.ListGovernanceDataRequest, arg2 ...grpc.CallOption) (*v2.ListGovernanceDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGovernanceData", varargs...)
	ret0, _ := ret[0].(*v2.ListGovernanceDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGovernanceData indicates an expected call of ListGovernanceData.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListGovernanceData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGovernanceData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListGovernanceData), varargs...)
}

// ListKeyRotations mocks base method.
func (m *MockTradingDataServiceClientV2) ListKeyRotations(arg0 context.Context, arg1 *v2.ListKeyRotationsRequest, arg2 ...grpc.CallOption) (*v2.ListKeyRotationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeyRotations", varargs...)
	ret0, _ := ret[0].(*v2.ListKeyRotationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyRotations indicates an expected call of ListKeyRotations.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListKeyRotations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyRotations", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListKeyRotations), varargs...)
}

// ListLatestMarketData mocks base method.
func (m *MockTradingDataServiceClientV2) ListLatestMarketData(arg0 context.Context, arg1 *v2.ListLatestMarketDataRequest, arg2 ...grpc.CallOption) (*v2.ListLatestMarketDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLatestMarketData", varargs...)
	ret0, _ := ret[0].(*v2.ListLatestMarketDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLatestMarketData indicates an expected call of ListLatestMarketData.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListLatestMarketData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLatestMarketData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListLatestMarketData), varargs...)
}

// ListLedgerEntries mocks base method.
func (m *MockTradingDataServiceClientV2) ListLedgerEntries(arg0 context.Context, arg1 *v2.ListLedgerEntriesRequest, arg2 ...grpc.CallOption) (*v2.ListLedgerEntriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLedgerEntries", varargs...)
	ret0, _ := ret[0].(*v2.ListLedgerEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLedgerEntries indicates an expected call of ListLedgerEntries.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListLedgerEntries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLedgerEntries", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListLedgerEntries), varargs...)
}

// ListLiquidityProvisions mocks base method.
func (m *MockTradingDataServiceClientV2) ListLiquidityProvisions(arg0 context.Context, arg1 *v2.ListLiquidityProvisionsRequest, arg2 ...grpc.CallOption) (*v2.ListLiquidityProvisionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLiquidityProvisions", varargs...)
	ret0, _ := ret[0].(*v2.ListLiquidityProvisionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLiquidityProvisions indicates an expected call of ListLiquidityProvisions.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListLiquidityProvisions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLiquidityProvisions", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListLiquidityProvisions), varargs...)
}

// ListMarginLevels mocks base method.
func (m *MockTradingDataServiceClientV2) ListMarginLevels(arg0 context.Context, arg1 *v2.ListMarginLevelsRequest, arg2 ...grpc.CallOption) (*v2.ListMarginLevelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMarginLevels", varargs...)
	ret0, _ := ret[0].(*v2.ListMarginLevelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMarginLevels indicates an expected call of ListMarginLevels.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListMarginLevels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMarginLevels", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListMarginLevels), varargs...)
}

// ListMarkets mocks base method.
func (m *MockTradingDataServiceClientV2) ListMarkets(arg0 context.Context, arg1 *v2.ListMarketsRequest, arg2 ...grpc.CallOption) (*v2.ListMarketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMarkets", varargs...)
	ret0, _ := ret[0].(*v2.ListMarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMarkets indicates an expected call of ListMarkets.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListMarkets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMarkets", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListMarkets), varargs...)
}

// ListNetworkParameters mocks base method.
func (m *MockTradingDataServiceClientV2) ListNetworkParameters(arg0 context.Context, arg1 *v2.ListNetworkParametersRequest, arg2 ...grpc.CallOption) (*v2.ListNetworkParametersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNetworkParameters", varargs...)
	ret0, _ := ret[0].(*v2.ListNetworkParametersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkParameters indicates an expected call of ListNetworkParameters.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListNetworkParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkParameters", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListNetworkParameters), varargs...)
}

// ListNodeSignatures mocks base method.
func (m *MockTradingDataServiceClientV2) ListNodeSignatures(arg0 context.Context, arg1 *v2.ListNodeSignaturesRequest, arg2 ...grpc.CallOption) (*v2.ListNodeSignaturesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodeSignatures", varargs...)
	ret0, _ := ret[0].(*v2.ListNodeSignaturesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodeSignatures indicates an expected call of ListNodeSignatures.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListNodeSignatures(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeSignatures", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListNodeSignatures), varargs...)
}

// ListNodes mocks base method.
func (m *MockTradingDataServiceClientV2) ListNodes(arg0 context.Context, arg1 *v2.ListNodesRequest, arg2 ...grpc.CallOption) (*v2.ListNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodes", varargs...)
	ret0, _ := ret[0].(*v2.ListNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListNodes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListNodes), varargs...)
}

// ListOracleData mocks base method.
func (m *MockTradingDataServiceClientV2) ListOracleData(arg0 context.Context, arg1 *v2.ListOracleDataRequest, arg2 ...grpc.CallOption) (*v2.ListOracleDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOracleData", varargs...)
	ret0, _ := ret[0].(*v2.ListOracleDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOracleData indicates an expected call of ListOracleData.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListOracleData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOracleData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListOracleData), varargs...)
}

// ListOracleSpecs mocks base method.
func (m *MockTradingDataServiceClientV2) ListOracleSpecs(arg0 context.Context, arg1 *v2.ListOracleSpecsRequest, arg2 ...grpc.CallOption) (*v2.ListOracleSpecsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOracleSpecs", varargs...)
	ret0, _ := ret[0].(*v2.ListOracleSpecsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOracleSpecs indicates an expected call of ListOracleSpecs.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListOracleSpecs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOracleSpecs", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListOracleSpecs), varargs...)
}

// ListOrderVersions mocks base method.
func (m *MockTradingDataServiceClientV2) ListOrderVersions(arg0 context.Context, arg1 *v2.ListOrderVersionsRequest, arg2 ...grpc.CallOption) (*v2.ListOrderVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrderVersions", varargs...)
	ret0, _ := ret[0].(*v2.ListOrderVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderVersions indicates an expected call of ListOrderVersions.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListOrderVersions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderVersions", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListOrderVersions), varargs...)
}

// ListOrders mocks base method.
func (m *MockTradingDataServiceClientV2) ListOrders(arg0 context.Context, arg1 *v2.ListOrdersRequest, arg2 ...grpc.CallOption) (*v2.ListOrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrders", varargs...)
	ret0, _ := ret[0].(*v2.ListOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListOrders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListOrders), varargs...)
}

// ListParties mocks base method.
func (m *MockTradingDataServiceClientV2) ListParties(arg0 context.Context, arg1 *v2.ListPartiesRequest, arg2 ...grpc.CallOption) (*v2.ListPartiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParties", varargs...)
	ret0, _ := ret[0].(*v2.ListPartiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParties indicates an expected call of ListParties.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListParties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParties", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListParties), varargs...)
}

// ListPositions mocks base method.
func (m *MockTradingDataServiceClientV2) ListPositions(arg0 context.Context, arg1 *v2.ListPositionsRequest, arg2 ...grpc.CallOption) (*v2.ListPositionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPositions", varargs...)
	ret0, _ := ret[0].(*v2.ListPositionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPositions indicates an expected call of ListPositions.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListPositions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPositions", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListPositions), varargs...)
}

// ListProtocolUpgradeProposals mocks base method.
func (m *MockTradingDataServiceClientV2) ListProtocolUpgradeProposals(arg0 context.Context, arg1 *v2.ListProtocolUpgradeProposalsRequest, arg2 ...grpc.CallOption) (*v2.ListProtocolUpgradeProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtocolUpgradeProposals", varargs...)
	ret0, _ := ret[0].(*v2.ListProtocolUpgradeProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProtocolUpgradeProposals indicates an expected call of ListProtocolUpgradeProposals.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListProtocolUpgradeProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtocolUpgradeProposals", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListProtocolUpgradeProposals), varargs...)
}

// ListRewardSummaries mocks base method.
func (m *MockTradingDataServiceClientV2) ListRewardSummaries(arg0 context.Context, arg1 *v2.ListRewardSummariesRequest, arg2 ...grpc.CallOption) (*v2.ListRewardSummariesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRewardSummaries", varargs...)
	ret0, _ := ret[0].(*v2.ListRewardSummariesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRewardSummaries indicates an expected call of ListRewardSummaries.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListRewardSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRewardSummaries", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListRewardSummaries), varargs...)
}

// ListRewards mocks base method.
func (m *MockTradingDataServiceClientV2) ListRewards(arg0 context.Context, arg1 *v2.ListRewardsRequest, arg2 ...grpc.CallOption) (*v2.ListRewardsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRewards", varargs...)
	ret0, _ := ret[0].(*v2.ListRewardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRewards indicates an expected call of ListRewards.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListRewards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRewards", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListRewards), varargs...)
}

// ListTrades mocks base method.
func (m *MockTradingDataServiceClientV2) ListTrades(arg0 context.Context, arg1 *v2.ListTradesRequest, arg2 ...grpc.CallOption) (*v2.ListTradesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrades", varargs...)
	ret0, _ := ret[0].(*v2.ListTradesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrades indicates an expected call of ListTrades.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListTrades(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrades", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListTrades), varargs...)
}

// ListTransfers mocks base method.
func (m *MockTradingDataServiceClientV2) ListTransfers(arg0 context.Context, arg1 *v2.ListTransfersRequest, arg2 ...grpc.CallOption) (*v2.ListTransfersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransfers", varargs...)
	ret0, _ := ret[0].(*v2.ListTransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListTransfers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListTransfers), varargs...)
}

// ListVotes mocks base method.
func (m *MockTradingDataServiceClientV2) ListVotes(arg0 context.Context, arg1 *v2.ListVotesRequest, arg2 ...grpc.CallOption) (*v2.ListVotesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVotes", varargs...)
	ret0, _ := ret[0].(*v2.ListVotesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVotes indicates an expected call of ListVotes.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVotes", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListVotes), varargs...)
}

// ListWithdrawals mocks base method.
func (m *MockTradingDataServiceClientV2) ListWithdrawals(arg0 context.Context, arg1 *v2.ListWithdrawalsRequest, arg2 ...grpc.CallOption) (*v2.ListWithdrawalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWithdrawals", varargs...)
	ret0, _ := ret[0].(*v2.ListWithdrawalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithdrawals indicates an expected call of ListWithdrawals.
func (mr *MockTradingDataServiceClientV2MockRecorder) ListWithdrawals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithdrawals", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ListWithdrawals), varargs...)
}

// ObserveAccounts mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveAccounts(arg0 context.Context, arg1 *v2.ObserveAccountsRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveAccountsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveAccounts", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveAccountsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveAccounts indicates an expected call of ObserveAccounts.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveAccounts", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveAccounts), varargs...)
}

// ObserveCandleData mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveCandleData(arg0 context.Context, arg1 *v2.ObserveCandleDataRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveCandleDataClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveCandleData", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveCandleDataClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveCandleData indicates an expected call of ObserveCandleData.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveCandleData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveCandleData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveCandleData), varargs...)
}

// ObserveDelegations mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveDelegations(arg0 context.Context, arg1 *v2.ObserveDelegationsRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveDelegationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveDelegations", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveDelegationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveDelegations indicates an expected call of ObserveDelegations.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveDelegations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDelegations", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveDelegations), varargs...)
}

// ObserveEventBus mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveEventBus(arg0 context.Context, arg1 ...grpc.CallOption) (v2.TradingDataService_ObserveEventBusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveEventBus", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveEventBusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveEventBus indicates an expected call of ObserveEventBus.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveEventBus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveEventBus", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveEventBus), varargs...)
}

// ObserveGovernance mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveGovernance(arg0 context.Context, arg1 *v2.ObserveGovernanceRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveGovernanceClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveGovernance", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveGovernanceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveGovernance indicates an expected call of ObserveGovernance.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveGovernance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveGovernance", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveGovernance), varargs...)
}

// ObserveLedgerMovements mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveLedgerMovements(arg0 context.Context, arg1 *v2.ObserveLedgerMovementsRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveLedgerMovementsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveLedgerMovements", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveLedgerMovementsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveLedgerMovements indicates an expected call of ObserveLedgerMovements.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveLedgerMovements(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveLedgerMovements", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveLedgerMovements), varargs...)
}

// ObserveLiquidityProvisions mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveLiquidityProvisions(arg0 context.Context, arg1 *v2.ObserveLiquidityProvisionsRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveLiquidityProvisionsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveLiquidityProvisions", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveLiquidityProvisionsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveLiquidityProvisions indicates an expected call of ObserveLiquidityProvisions.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveLiquidityProvisions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveLiquidityProvisions", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveLiquidityProvisions), varargs...)
}

// ObserveMarginLevels mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveMarginLevels(arg0 context.Context, arg1 *v2.ObserveMarginLevelsRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveMarginLevelsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveMarginLevels", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveMarginLevelsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveMarginLevels indicates an expected call of ObserveMarginLevels.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveMarginLevels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveMarginLevels", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveMarginLevels), varargs...)
}

// ObserveMarketsData mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveMarketsData(arg0 context.Context, arg1 *v2.ObserveMarketsDataRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveMarketsDataClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveMarketsData", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveMarketsDataClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveMarketsData indicates an expected call of ObserveMarketsData.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveMarketsData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveMarketsData", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveMarketsData), varargs...)
}

// ObserveMarketsDepth mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveMarketsDepth(arg0 context.Context, arg1 *v2.ObserveMarketsDepthRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveMarketsDepthClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveMarketsDepth", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveMarketsDepthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveMarketsDepth indicates an expected call of ObserveMarketsDepth.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveMarketsDepth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveMarketsDepth", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveMarketsDepth), varargs...)
}

// ObserveMarketsDepthUpdates mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveMarketsDepthUpdates(arg0 context.Context, arg1 *v2.ObserveMarketsDepthUpdatesRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveMarketsDepthUpdatesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveMarketsDepthUpdates", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveMarketsDepthUpdatesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveMarketsDepthUpdates indicates an expected call of ObserveMarketsDepthUpdates.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveMarketsDepthUpdates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveMarketsDepthUpdates", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveMarketsDepthUpdates), varargs...)
}

// ObserveOrders mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveOrders(arg0 context.Context, arg1 *v2.ObserveOrdersRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveOrdersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveOrders", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveOrdersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveOrders indicates an expected call of ObserveOrders.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveOrders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveOrders", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveOrders), varargs...)
}

// ObservePositions mocks base method.
func (m *MockTradingDataServiceClientV2) ObservePositions(arg0 context.Context, arg1 *v2.ObservePositionsRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObservePositionsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObservePositions", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObservePositionsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObservePositions indicates an expected call of ObservePositions.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObservePositions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservePositions", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObservePositions), varargs...)
}

// ObserveRewards mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveRewards(arg0 context.Context, arg1 *v2.ObserveRewardsRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveRewardsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveRewards", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveRewardsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveRewards indicates an expected call of ObserveRewards.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveRewards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveRewards", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveRewards), varargs...)
}

// ObserveTrades mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveTrades(arg0 context.Context, arg1 *v2.ObserveTradesRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveTradesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveTrades", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveTradesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveTrades indicates an expected call of ObserveTrades.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveTrades(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveTrades", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveTrades), varargs...)
}

// ObserveVotes mocks base method.
func (m *MockTradingDataServiceClientV2) ObserveVotes(arg0 context.Context, arg1 *v2.ObserveVotesRequest, arg2 ...grpc.CallOption) (v2.TradingDataService_ObserveVotesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveVotes", varargs...)
	ret0, _ := ret[0].(v2.TradingDataService_ObserveVotesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveVotes indicates an expected call of ObserveVotes.
func (mr *MockTradingDataServiceClientV2MockRecorder) ObserveVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveVotes", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).ObserveVotes), varargs...)
}

// Ping mocks base method.
func (m *MockTradingDataServiceClientV2) Ping(arg0 context.Context, arg1 *v2.PingRequest, arg2 ...grpc.CallOption) (*v2.PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*v2.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockTradingDataServiceClientV2MockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockTradingDataServiceClientV2)(nil).Ping), varargs...)
}

// MockTradingDataServiceClient is a mock of TradingDataServiceClient interface.
type MockTradingDataServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTradingDataServiceClientMockRecorder
}

// MockTradingDataServiceClientMockRecorder is the mock recorder for MockTradingDataServiceClient.
type MockTradingDataServiceClientMockRecorder struct {
	mock *MockTradingDataServiceClient
}

// NewMockTradingDataServiceClient creates a new mock instance.
func NewMockTradingDataServiceClient(ctrl *gomock.Controller) *MockTradingDataServiceClient {
	mock := &MockTradingDataServiceClient{ctrl: ctrl}
	mock.recorder = &MockTradingDataServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradingDataServiceClient) EXPECT() *MockTradingDataServiceClientMockRecorder {
	return m.recorder
}

// AccountsSubscribe mocks base method.
func (m *MockTradingDataServiceClient) AccountsSubscribe(arg0 context.Context, arg1 *v1.AccountsSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_AccountsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountsSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_AccountsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountsSubscribe indicates an expected call of AccountsSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) AccountsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountsSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).AccountsSubscribe), varargs...)
}

// AssetByID mocks base method.
func (m *MockTradingDataServiceClient) AssetByID(arg0 context.Context, arg1 *v1.AssetByIDRequest, arg2 ...grpc.CallOption) (*v1.AssetByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssetByID", varargs...)
	ret0, _ := ret[0].(*v1.AssetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssetByID indicates an expected call of AssetByID.
func (mr *MockTradingDataServiceClientMockRecorder) AssetByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).AssetByID), varargs...)
}

// Assets mocks base method.
func (m *MockTradingDataServiceClient) Assets(arg0 context.Context, arg1 *v1.AssetsRequest, arg2 ...grpc.CallOption) (*v1.AssetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assets", varargs...)
	ret0, _ := ret[0].(*v1.AssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assets indicates an expected call of Assets.
func (mr *MockTradingDataServiceClientMockRecorder) Assets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assets", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Assets), varargs...)
}

// Candles mocks base method.
func (m *MockTradingDataServiceClient) Candles(arg0 context.Context, arg1 *v1.CandlesRequest, arg2 ...grpc.CallOption) (*v1.CandlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Candles", varargs...)
	ret0, _ := ret[0].(*v1.CandlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Candles indicates an expected call of Candles.
func (mr *MockTradingDataServiceClientMockRecorder) Candles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Candles", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Candles), varargs...)
}

// CandlesSubscribe mocks base method.
func (m *MockTradingDataServiceClient) CandlesSubscribe(arg0 context.Context, arg1 *v1.CandlesSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_CandlesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CandlesSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_CandlesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CandlesSubscribe indicates an expected call of CandlesSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) CandlesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CandlesSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).CandlesSubscribe), varargs...)
}

// Checkpoints mocks base method.
func (m *MockTradingDataServiceClient) Checkpoints(arg0 context.Context, arg1 *v1.CheckpointsRequest, arg2 ...grpc.CallOption) (*v1.CheckpointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Checkpoints", varargs...)
	ret0, _ := ret[0].(*v1.CheckpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkpoints indicates an expected call of Checkpoints.
func (mr *MockTradingDataServiceClientMockRecorder) Checkpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoints", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Checkpoints), varargs...)
}

// Delegations mocks base method.
func (m *MockTradingDataServiceClient) Delegations(arg0 context.Context, arg1 *v1.DelegationsRequest, arg2 ...grpc.CallOption) (*v1.DelegationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delegations", varargs...)
	ret0, _ := ret[0].(*v1.DelegationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delegations indicates an expected call of Delegations.
func (mr *MockTradingDataServiceClientMockRecorder) Delegations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegations", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Delegations), varargs...)
}

// Deposit mocks base method.
func (m *MockTradingDataServiceClient) Deposit(arg0 context.Context, arg1 *v1.DepositRequest, arg2 ...grpc.CallOption) (*v1.DepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposit", varargs...)
	ret0, _ := ret[0].(*v1.DepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockTradingDataServiceClientMockRecorder) Deposit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Deposit), varargs...)
}

// Deposits mocks base method.
func (m *MockTradingDataServiceClient) Deposits(arg0 context.Context, arg1 *v1.DepositsRequest, arg2 ...grpc.CallOption) (*v1.DepositsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposits", varargs...)
	ret0, _ := ret[0].(*v1.DepositsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposits indicates an expected call of Deposits.
func (mr *MockTradingDataServiceClientMockRecorder) Deposits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposits", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Deposits), varargs...)
}

// ERC20WithdrawalApproval mocks base method.
func (m *MockTradingDataServiceClient) ERC20WithdrawalApproval(arg0 context.Context, arg1 *v1.ERC20WithdrawalApprovalRequest, arg2 ...grpc.CallOption) (*v1.ERC20WithdrawalApprovalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ERC20WithdrawalApproval", varargs...)
	ret0, _ := ret[0].(*v1.ERC20WithdrawalApprovalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ERC20WithdrawalApproval indicates an expected call of ERC20WithdrawalApproval.
func (mr *MockTradingDataServiceClientMockRecorder) ERC20WithdrawalApproval(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ERC20WithdrawalApproval", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ERC20WithdrawalApproval), varargs...)
}

// EstimateFee mocks base method.
func (m *MockTradingDataServiceClient) EstimateFee(arg0 context.Context, arg1 *v1.EstimateFeeRequest, arg2 ...grpc.CallOption) (*v1.EstimateFeeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateFee", varargs...)
	ret0, _ := ret[0].(*v1.EstimateFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateFee indicates an expected call of EstimateFee.
func (mr *MockTradingDataServiceClientMockRecorder) EstimateFee(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateFee", reflect.TypeOf((*MockTradingDataServiceClient)(nil).EstimateFee), varargs...)
}

// EstimateMargin mocks base method.
func (m *MockTradingDataServiceClient) EstimateMargin(arg0 context.Context, arg1 *v1.EstimateMarginRequest, arg2 ...grpc.CallOption) (*v1.EstimateMarginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateMargin", varargs...)
	ret0, _ := ret[0].(*v1.EstimateMarginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateMargin indicates an expected call of EstimateMargin.
func (mr *MockTradingDataServiceClientMockRecorder) EstimateMargin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateMargin", reflect.TypeOf((*MockTradingDataServiceClient)(nil).EstimateMargin), varargs...)
}

// FeeInfrastructureAccounts mocks base method.
func (m *MockTradingDataServiceClient) FeeInfrastructureAccounts(arg0 context.Context, arg1 *v1.FeeInfrastructureAccountsRequest, arg2 ...grpc.CallOption) (*v1.FeeInfrastructureAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FeeInfrastructureAccounts", varargs...)
	ret0, _ := ret[0].(*v1.FeeInfrastructureAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeInfrastructureAccounts indicates an expected call of FeeInfrastructureAccounts.
func (mr *MockTradingDataServiceClientMockRecorder) FeeInfrastructureAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeInfrastructureAccounts", reflect.TypeOf((*MockTradingDataServiceClient)(nil).FeeInfrastructureAccounts), varargs...)
}

// GetEpoch mocks base method.
func (m *MockTradingDataServiceClient) GetEpoch(arg0 context.Context, arg1 *v1.GetEpochRequest, arg2 ...grpc.CallOption) (*v1.GetEpochResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpoch", varargs...)
	ret0, _ := ret[0].(*v1.GetEpochResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockTradingDataServiceClientMockRecorder) GetEpoch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetEpoch), varargs...)
}

// GetKeyRotations mocks base method.
func (m *MockTradingDataServiceClient) GetKeyRotations(arg0 context.Context, arg1 *v1.GetKeyRotationsRequest, arg2 ...grpc.CallOption) (*v1.GetKeyRotationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyRotations", varargs...)
	ret0, _ := ret[0].(*v1.GetKeyRotationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRotations indicates an expected call of GetKeyRotations.
func (mr *MockTradingDataServiceClientMockRecorder) GetKeyRotations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRotations", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetKeyRotations), varargs...)
}

// GetKeyRotationsByNode mocks base method.
func (m *MockTradingDataServiceClient) GetKeyRotationsByNode(arg0 context.Context, arg1 *v1.GetKeyRotationsByNodeRequest, arg2 ...grpc.CallOption) (*v1.GetKeyRotationsByNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyRotationsByNode", varargs...)
	ret0, _ := ret[0].(*v1.GetKeyRotationsByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRotationsByNode indicates an expected call of GetKeyRotationsByNode.
func (mr *MockTradingDataServiceClientMockRecorder) GetKeyRotationsByNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRotationsByNode", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetKeyRotationsByNode), varargs...)
}

// GetNetworkParametersProposals mocks base method.
func (m *MockTradingDataServiceClient) GetNetworkParametersProposals(arg0 context.Context, arg1 *v1.GetNetworkParametersProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetNetworkParametersProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkParametersProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetNetworkParametersProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkParametersProposals indicates an expected call of GetNetworkParametersProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetNetworkParametersProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkParametersProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNetworkParametersProposals), varargs...)
}

// GetNewAssetProposals mocks base method.
func (m *MockTradingDataServiceClient) GetNewAssetProposals(arg0 context.Context, arg1 *v1.GetNewAssetProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetNewAssetProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewAssetProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetNewAssetProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewAssetProposals indicates an expected call of GetNewAssetProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetNewAssetProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewAssetProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNewAssetProposals), varargs...)
}

// GetNewFreeformProposals mocks base method.
func (m *MockTradingDataServiceClient) GetNewFreeformProposals(arg0 context.Context, arg1 *v1.GetNewFreeformProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetNewFreeformProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewFreeformProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetNewFreeformProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewFreeformProposals indicates an expected call of GetNewFreeformProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetNewFreeformProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewFreeformProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNewFreeformProposals), varargs...)
}

// GetNewMarketProposals mocks base method.
func (m *MockTradingDataServiceClient) GetNewMarketProposals(arg0 context.Context, arg1 *v1.GetNewMarketProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetNewMarketProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewMarketProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetNewMarketProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewMarketProposals indicates an expected call of GetNewMarketProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetNewMarketProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewMarketProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNewMarketProposals), varargs...)
}

// GetNodeByID mocks base method.
func (m *MockTradingDataServiceClient) GetNodeByID(arg0 context.Context, arg1 *v1.GetNodeByIDRequest, arg2 ...grpc.CallOption) (*v1.GetNodeByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeByID", varargs...)
	ret0, _ := ret[0].(*v1.GetNodeByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByID indicates an expected call of GetNodeByID.
func (mr *MockTradingDataServiceClientMockRecorder) GetNodeByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNodeByID), varargs...)
}

// GetNodeData mocks base method.
func (m *MockTradingDataServiceClient) GetNodeData(arg0 context.Context, arg1 *v1.GetNodeDataRequest, arg2 ...grpc.CallOption) (*v1.GetNodeDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeData", varargs...)
	ret0, _ := ret[0].(*v1.GetNodeDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeData indicates an expected call of GetNodeData.
func (mr *MockTradingDataServiceClientMockRecorder) GetNodeData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeData", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNodeData), varargs...)
}

// GetNodeSignaturesAggregate mocks base method.
func (m *MockTradingDataServiceClient) GetNodeSignaturesAggregate(arg0 context.Context, arg1 *v1.GetNodeSignaturesAggregateRequest, arg2 ...grpc.CallOption) (*v1.GetNodeSignaturesAggregateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeSignaturesAggregate", varargs...)
	ret0, _ := ret[0].(*v1.GetNodeSignaturesAggregateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeSignaturesAggregate indicates an expected call of GetNodeSignaturesAggregate.
func (mr *MockTradingDataServiceClientMockRecorder) GetNodeSignaturesAggregate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeSignaturesAggregate", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNodeSignaturesAggregate), varargs...)
}

// GetNodes mocks base method.
func (m *MockTradingDataServiceClient) GetNodes(arg0 context.Context, arg1 *v1.GetNodesRequest, arg2 ...grpc.CallOption) (*v1.GetNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodes", varargs...)
	ret0, _ := ret[0].(*v1.GetNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockTradingDataServiceClientMockRecorder) GetNodes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNodes), varargs...)
}

// GetProposalByID mocks base method.
func (m *MockTradingDataServiceClient) GetProposalByID(arg0 context.Context, arg1 *v1.GetProposalByIDRequest, arg2 ...grpc.CallOption) (*v1.GetProposalByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalByID", varargs...)
	ret0, _ := ret[0].(*v1.GetProposalByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByID indicates an expected call of GetProposalByID.
func (mr *MockTradingDataServiceClientMockRecorder) GetProposalByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetProposalByID), varargs...)
}

// GetProposalByReference mocks base method.
func (m *MockTradingDataServiceClient) GetProposalByReference(arg0 context.Context, arg1 *v1.GetProposalByReferenceRequest, arg2 ...grpc.CallOption) (*v1.GetProposalByReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalByReference", varargs...)
	ret0, _ := ret[0].(*v1.GetProposalByReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByReference indicates an expected call of GetProposalByReference.
func (mr *MockTradingDataServiceClientMockRecorder) GetProposalByReference(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByReference", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetProposalByReference), varargs...)
}

// GetProposals mocks base method.
func (m *MockTradingDataServiceClient) GetProposals(arg0 context.Context, arg1 *v1.GetProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposals indicates an expected call of GetProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetProposals), varargs...)
}

// GetProposalsByParty mocks base method.
func (m *MockTradingDataServiceClient) GetProposalsByParty(arg0 context.Context, arg1 *v1.GetProposalsByPartyRequest, arg2 ...grpc.CallOption) (*v1.GetProposalsByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalsByParty", varargs...)
	ret0, _ := ret[0].(*v1.GetProposalsByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalsByParty indicates an expected call of GetProposalsByParty.
func (mr *MockTradingDataServiceClientMockRecorder) GetProposalsByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetProposalsByParty), varargs...)
}

// GetRewardSummaries mocks base method.
func (m *MockTradingDataServiceClient) GetRewardSummaries(arg0 context.Context, arg1 *v1.GetRewardSummariesRequest, arg2 ...grpc.CallOption) (*v1.GetRewardSummariesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRewardSummaries", varargs...)
	ret0, _ := ret[0].(*v1.GetRewardSummariesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardSummaries indicates an expected call of GetRewardSummaries.
func (mr *MockTradingDataServiceClientMockRecorder) GetRewardSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardSummaries", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetRewardSummaries), varargs...)
}

// GetRewards mocks base method.
func (m *MockTradingDataServiceClient) GetRewards(arg0 context.Context, arg1 *v1.GetRewardsRequest, arg2 ...grpc.CallOption) (*v1.GetRewardsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRewards", varargs...)
	ret0, _ := ret[0].(*v1.GetRewardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewards indicates an expected call of GetRewards.
func (mr *MockTradingDataServiceClientMockRecorder) GetRewards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewards", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetRewards), varargs...)
}

// GetRiskFactors mocks base method.
func (m *MockTradingDataServiceClient) GetRiskFactors(arg0 context.Context, arg1 *v1.GetRiskFactorsRequest, arg2 ...grpc.CallOption) (*v1.GetRiskFactorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRiskFactors", varargs...)
	ret0, _ := ret[0].(*v1.GetRiskFactorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRiskFactors indicates an expected call of GetRiskFactors.
func (mr *MockTradingDataServiceClientMockRecorder) GetRiskFactors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRiskFactors", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetRiskFactors), varargs...)
}

// GetUpdateMarketProposals mocks base method.
func (m *MockTradingDataServiceClient) GetUpdateMarketProposals(arg0 context.Context, arg1 *v1.GetUpdateMarketProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetUpdateMarketProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpdateMarketProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetUpdateMarketProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateMarketProposals indicates an expected call of GetUpdateMarketProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetUpdateMarketProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateMarketProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetUpdateMarketProposals), varargs...)
}

// GetVegaTime mocks base method.
func (m *MockTradingDataServiceClient) GetVegaTime(arg0 context.Context, arg1 *v1.GetVegaTimeRequest, arg2 ...grpc.CallOption) (*v1.GetVegaTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVegaTime", varargs...)
	ret0, _ := ret[0].(*v1.GetVegaTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVegaTime indicates an expected call of GetVegaTime.
func (mr *MockTradingDataServiceClientMockRecorder) GetVegaTime(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVegaTime", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetVegaTime), varargs...)
}

// GetVotesByParty mocks base method.
func (m *MockTradingDataServiceClient) GetVotesByParty(arg0 context.Context, arg1 *v1.GetVotesByPartyRequest, arg2 ...grpc.CallOption) (*v1.GetVotesByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVotesByParty", varargs...)
	ret0, _ := ret[0].(*v1.GetVotesByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesByParty indicates an expected call of GetVotesByParty.
func (mr *MockTradingDataServiceClientMockRecorder) GetVotesByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetVotesByParty), varargs...)
}

// GlobalRewardPoolAccounts mocks base method.
func (m *MockTradingDataServiceClient) GlobalRewardPoolAccounts(arg0 context.Context, arg1 *v1.GlobalRewardPoolAccountsRequest, arg2 ...grpc.CallOption) (*v1.GlobalRewardPoolAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GlobalRewardPoolAccounts", varargs...)
	ret0, _ := ret[0].(*v1.GlobalRewardPoolAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalRewardPoolAccounts indicates an expected call of GlobalRewardPoolAccounts.
func (mr *MockTradingDataServiceClientMockRecorder) GlobalRewardPoolAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalRewardPoolAccounts", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GlobalRewardPoolAccounts), varargs...)
}

// LastTrade mocks base method.
func (m *MockTradingDataServiceClient) LastTrade(arg0 context.Context, arg1 *v1.LastTradeRequest, arg2 ...grpc.CallOption) (*v1.LastTradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LastTrade", varargs...)
	ret0, _ := ret[0].(*v1.LastTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastTrade indicates an expected call of LastTrade.
func (mr *MockTradingDataServiceClientMockRecorder) LastTrade(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTrade", reflect.TypeOf((*MockTradingDataServiceClient)(nil).LastTrade), varargs...)
}

// LedgerMovementsSubscribe mocks base method.
func (m *MockTradingDataServiceClient) LedgerMovementsSubscribe(arg0 context.Context, arg1 *v1.LedgerMovementsSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_LedgerMovementsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LedgerMovementsSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_LedgerMovementsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LedgerMovementsSubscribe indicates an expected call of LedgerMovementsSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) LedgerMovementsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LedgerMovementsSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).LedgerMovementsSubscribe), varargs...)
}

// LiquidityProvisions mocks base method.
func (m *MockTradingDataServiceClient) LiquidityProvisions(arg0 context.Context, arg1 *v1.LiquidityProvisionsRequest, arg2 ...grpc.CallOption) (*v1.LiquidityProvisionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LiquidityProvisions", varargs...)
	ret0, _ := ret[0].(*v1.LiquidityProvisionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LiquidityProvisions indicates an expected call of LiquidityProvisions.
func (mr *MockTradingDataServiceClientMockRecorder) LiquidityProvisions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiquidityProvisions", reflect.TypeOf((*MockTradingDataServiceClient)(nil).LiquidityProvisions), varargs...)
}

// ListOracleData mocks base method.
func (m *MockTradingDataServiceClient) ListOracleData(arg0 context.Context, arg1 *v1.ListOracleDataRequest, arg2 ...grpc.CallOption) (*v1.ListOracleDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOracleData", varargs...)
	ret0, _ := ret[0].(*v1.ListOracleDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOracleData indicates an expected call of ListOracleData.
func (mr *MockTradingDataServiceClientMockRecorder) ListOracleData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOracleData", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ListOracleData), varargs...)
}

// MarginLevels mocks base method.
func (m *MockTradingDataServiceClient) MarginLevels(arg0 context.Context, arg1 *v1.MarginLevelsRequest, arg2 ...grpc.CallOption) (*v1.MarginLevelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarginLevels", varargs...)
	ret0, _ := ret[0].(*v1.MarginLevelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarginLevels indicates an expected call of MarginLevels.
func (mr *MockTradingDataServiceClientMockRecorder) MarginLevels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarginLevels", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarginLevels), varargs...)
}

// MarginLevelsSubscribe mocks base method.
func (m *MockTradingDataServiceClient) MarginLevelsSubscribe(arg0 context.Context, arg1 *v1.MarginLevelsSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_MarginLevelsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarginLevelsSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_MarginLevelsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarginLevelsSubscribe indicates an expected call of MarginLevelsSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) MarginLevelsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarginLevelsSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarginLevelsSubscribe), varargs...)
}

// MarketAccounts mocks base method.
func (m *MockTradingDataServiceClient) MarketAccounts(arg0 context.Context, arg1 *v1.MarketAccountsRequest, arg2 ...grpc.CallOption) (*v1.MarketAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketAccounts", varargs...)
	ret0, _ := ret[0].(*v1.MarketAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketAccounts indicates an expected call of MarketAccounts.
func (mr *MockTradingDataServiceClientMockRecorder) MarketAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketAccounts", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketAccounts), varargs...)
}

// MarketByID mocks base method.
func (m *MockTradingDataServiceClient) MarketByID(arg0 context.Context, arg1 *v1.MarketByIDRequest, arg2 ...grpc.CallOption) (*v1.MarketByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketByID", varargs...)
	ret0, _ := ret[0].(*v1.MarketByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketByID indicates an expected call of MarketByID.
func (mr *MockTradingDataServiceClientMockRecorder) MarketByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketByID), varargs...)
}

// MarketDataByID mocks base method.
func (m *MockTradingDataServiceClient) MarketDataByID(arg0 context.Context, arg1 *v1.MarketDataByIDRequest, arg2 ...grpc.CallOption) (*v1.MarketDataByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDataByID", varargs...)
	ret0, _ := ret[0].(*v1.MarketDataByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDataByID indicates an expected call of MarketDataByID.
func (mr *MockTradingDataServiceClientMockRecorder) MarketDataByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDataByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketDataByID), varargs...)
}

// MarketDepth mocks base method.
func (m *MockTradingDataServiceClient) MarketDepth(arg0 context.Context, arg1 *v1.MarketDepthRequest, arg2 ...grpc.CallOption) (*v1.MarketDepthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDepth", varargs...)
	ret0, _ := ret[0].(*v1.MarketDepthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDepth indicates an expected call of MarketDepth.
func (mr *MockTradingDataServiceClientMockRecorder) MarketDepth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDepth", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketDepth), varargs...)
}

// MarketDepthSubscribe mocks base method.
func (m *MockTradingDataServiceClient) MarketDepthSubscribe(arg0 context.Context, arg1 *v1.MarketDepthSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_MarketDepthSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDepthSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_MarketDepthSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDepthSubscribe indicates an expected call of MarketDepthSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) MarketDepthSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDepthSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketDepthSubscribe), varargs...)
}

// MarketDepthUpdatesSubscribe mocks base method.
func (m *MockTradingDataServiceClient) MarketDepthUpdatesSubscribe(arg0 context.Context, arg1 *v1.MarketDepthUpdatesSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_MarketDepthUpdatesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDepthUpdatesSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_MarketDepthUpdatesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDepthUpdatesSubscribe indicates an expected call of MarketDepthUpdatesSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) MarketDepthUpdatesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDepthUpdatesSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketDepthUpdatesSubscribe), varargs...)
}

// Markets mocks base method.
func (m *MockTradingDataServiceClient) Markets(arg0 context.Context, arg1 *v1.MarketsRequest, arg2 ...grpc.CallOption) (*v1.MarketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Markets", varargs...)
	ret0, _ := ret[0].(*v1.MarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Markets indicates an expected call of Markets.
func (mr *MockTradingDataServiceClientMockRecorder) Markets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markets", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Markets), varargs...)
}

// MarketsData mocks base method.
func (m *MockTradingDataServiceClient) MarketsData(arg0 context.Context, arg1 *v1.MarketsDataRequest, arg2 ...grpc.CallOption) (*v1.MarketsDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketsData", varargs...)
	ret0, _ := ret[0].(*v1.MarketsDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketsData indicates an expected call of MarketsData.
func (mr *MockTradingDataServiceClientMockRecorder) MarketsData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketsData", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketsData), varargs...)
}

// MarketsDataSubscribe mocks base method.
func (m *MockTradingDataServiceClient) MarketsDataSubscribe(arg0 context.Context, arg1 *v1.MarketsDataSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_MarketsDataSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketsDataSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_MarketsDataSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketsDataSubscribe indicates an expected call of MarketsDataSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) MarketsDataSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketsDataSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketsDataSubscribe), varargs...)
}

// NetworkParameters mocks base method.
func (m *MockTradingDataServiceClient) NetworkParameters(arg0 context.Context, arg1 *v1.NetworkParametersRequest, arg2 ...grpc.CallOption) (*v1.NetworkParametersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NetworkParameters", varargs...)
	ret0, _ := ret[0].(*v1.NetworkParametersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkParameters indicates an expected call of NetworkParameters.
func (mr *MockTradingDataServiceClientMockRecorder) NetworkParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkParameters", reflect.TypeOf((*MockTradingDataServiceClient)(nil).NetworkParameters), varargs...)
}

// ObserveDelegations mocks base method.
func (m *MockTradingDataServiceClient) ObserveDelegations(arg0 context.Context, arg1 *v1.ObserveDelegationsRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObserveDelegationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveDelegations", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveDelegationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveDelegations indicates an expected call of ObserveDelegations.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveDelegations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDelegations", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveDelegations), varargs...)
}

// ObserveEventBus mocks base method.
func (m *MockTradingDataServiceClient) ObserveEventBus(arg0 context.Context, arg1 ...grpc.CallOption) (v1.TradingDataService_ObserveEventBusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveEventBus", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveEventBusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveEventBus indicates an expected call of ObserveEventBus.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveEventBus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveEventBus", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveEventBus), varargs...)
}

// ObserveGovernance mocks base method.
func (m *MockTradingDataServiceClient) ObserveGovernance(arg0 context.Context, arg1 *v1.ObserveGovernanceRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObserveGovernanceClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveGovernance", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveGovernanceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveGovernance indicates an expected call of ObserveGovernance.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveGovernance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveGovernance", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveGovernance), varargs...)
}

// ObservePartyProposals mocks base method.
func (m *MockTradingDataServiceClient) ObservePartyProposals(arg0 context.Context, arg1 *v1.ObservePartyProposalsRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObservePartyProposalsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObservePartyProposals", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObservePartyProposalsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObservePartyProposals indicates an expected call of ObservePartyProposals.
func (mr *MockTradingDataServiceClientMockRecorder) ObservePartyProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservePartyProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObservePartyProposals), varargs...)
}

// ObservePartyVotes mocks base method.
func (m *MockTradingDataServiceClient) ObservePartyVotes(arg0 context.Context, arg1 *v1.ObservePartyVotesRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObservePartyVotesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObservePartyVotes", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObservePartyVotesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObservePartyVotes indicates an expected call of ObservePartyVotes.
func (mr *MockTradingDataServiceClientMockRecorder) ObservePartyVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservePartyVotes", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObservePartyVotes), varargs...)
}

// ObserveProposalVotes mocks base method.
func (m *MockTradingDataServiceClient) ObserveProposalVotes(arg0 context.Context, arg1 *v1.ObserveProposalVotesRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObserveProposalVotesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveProposalVotes", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveProposalVotesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveProposalVotes indicates an expected call of ObserveProposalVotes.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveProposalVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveProposalVotes", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveProposalVotes), varargs...)
}

// ObserveRewards mocks base method.
func (m *MockTradingDataServiceClient) ObserveRewards(arg0 context.Context, arg1 *v1.ObserveRewardsRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObserveRewardsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveRewards", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveRewardsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveRewards indicates an expected call of ObserveRewards.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveRewards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveRewards", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveRewards), varargs...)
}

// OracleDataBySpec mocks base method.
func (m *MockTradingDataServiceClient) OracleDataBySpec(arg0 context.Context, arg1 *v1.OracleDataBySpecRequest, arg2 ...grpc.CallOption) (*v1.OracleDataBySpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OracleDataBySpec", varargs...)
	ret0, _ := ret[0].(*v1.OracleDataBySpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OracleDataBySpec indicates an expected call of OracleDataBySpec.
func (mr *MockTradingDataServiceClientMockRecorder) OracleDataBySpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OracleDataBySpec", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OracleDataBySpec), varargs...)
}

// OracleSpec mocks base method.
func (m *MockTradingDataServiceClient) OracleSpec(arg0 context.Context, arg1 *v1.OracleSpecRequest, arg2 ...grpc.CallOption) (*v1.OracleSpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OracleSpec", varargs...)
	ret0, _ := ret[0].(*v1.OracleSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OracleSpec indicates an expected call of OracleSpec.
func (mr *MockTradingDataServiceClientMockRecorder) OracleSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OracleSpec", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OracleSpec), varargs...)
}

// OracleSpecs mocks base method.
func (m *MockTradingDataServiceClient) OracleSpecs(arg0 context.Context, arg1 *v1.OracleSpecsRequest, arg2 ...grpc.CallOption) (*v1.OracleSpecsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OracleSpecs", varargs...)
	ret0, _ := ret[0].(*v1.OracleSpecsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OracleSpecs indicates an expected call of OracleSpecs.
func (mr *MockTradingDataServiceClientMockRecorder) OracleSpecs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OracleSpecs", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OracleSpecs), varargs...)
}

// OrderByID mocks base method.
func (m *MockTradingDataServiceClient) OrderByID(arg0 context.Context, arg1 *v1.OrderByIDRequest, arg2 ...grpc.CallOption) (*v1.OrderByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByID", varargs...)
	ret0, _ := ret[0].(*v1.OrderByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByID indicates an expected call of OrderByID.
func (mr *MockTradingDataServiceClientMockRecorder) OrderByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrderByID), varargs...)
}

// OrderByMarketAndID mocks base method.
func (m *MockTradingDataServiceClient) OrderByMarketAndID(arg0 context.Context, arg1 *v1.OrderByMarketAndIDRequest, arg2 ...grpc.CallOption) (*v1.OrderByMarketAndIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByMarketAndID", varargs...)
	ret0, _ := ret[0].(*v1.OrderByMarketAndIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByMarketAndID indicates an expected call of OrderByMarketAndID.
func (mr *MockTradingDataServiceClientMockRecorder) OrderByMarketAndID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByMarketAndID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrderByMarketAndID), varargs...)
}

// OrderByReference mocks base method.
func (m *MockTradingDataServiceClient) OrderByReference(arg0 context.Context, arg1 *v1.OrderByReferenceRequest, arg2 ...grpc.CallOption) (*v1.OrderByReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByReference", varargs...)
	ret0, _ := ret[0].(*v1.OrderByReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByReference indicates an expected call of OrderByReference.
func (mr *MockTradingDataServiceClientMockRecorder) OrderByReference(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByReference", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrderByReference), varargs...)
}

// OrderVersionsByID mocks base method.
func (m *MockTradingDataServiceClient) OrderVersionsByID(arg0 context.Context, arg1 *v1.OrderVersionsByIDRequest, arg2 ...grpc.CallOption) (*v1.OrderVersionsByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderVersionsByID", varargs...)
	ret0, _ := ret[0].(*v1.OrderVersionsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderVersionsByID indicates an expected call of OrderVersionsByID.
func (mr *MockTradingDataServiceClientMockRecorder) OrderVersionsByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderVersionsByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrderVersionsByID), varargs...)
}

// OrdersByMarket mocks base method.
func (m *MockTradingDataServiceClient) OrdersByMarket(arg0 context.Context, arg1 *v1.OrdersByMarketRequest, arg2 ...grpc.CallOption) (*v1.OrdersByMarketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersByMarket", varargs...)
	ret0, _ := ret[0].(*v1.OrdersByMarketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByMarket indicates an expected call of OrdersByMarket.
func (mr *MockTradingDataServiceClientMockRecorder) OrdersByMarket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByMarket", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrdersByMarket), varargs...)
}

// OrdersByParty mocks base method.
func (m *MockTradingDataServiceClient) OrdersByParty(arg0 context.Context, arg1 *v1.OrdersByPartyRequest, arg2 ...grpc.CallOption) (*v1.OrdersByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersByParty", varargs...)
	ret0, _ := ret[0].(*v1.OrdersByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByParty indicates an expected call of OrdersByParty.
func (mr *MockTradingDataServiceClientMockRecorder) OrdersByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrdersByParty), varargs...)
}

// OrdersSubscribe mocks base method.
func (m *MockTradingDataServiceClient) OrdersSubscribe(arg0 context.Context, arg1 *v1.OrdersSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_OrdersSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_OrdersSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersSubscribe indicates an expected call of OrdersSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) OrdersSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrdersSubscribe), varargs...)
}

// Parties mocks base method.
func (m *MockTradingDataServiceClient) Parties(arg0 context.Context, arg1 *v1.PartiesRequest, arg2 ...grpc.CallOption) (*v1.PartiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parties", varargs...)
	ret0, _ := ret[0].(*v1.PartiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parties indicates an expected call of Parties.
func (mr *MockTradingDataServiceClientMockRecorder) Parties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parties", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Parties), varargs...)
}

// PartyAccounts mocks base method.
func (m *MockTradingDataServiceClient) PartyAccounts(arg0 context.Context, arg1 *v1.PartyAccountsRequest, arg2 ...grpc.CallOption) (*v1.PartyAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartyAccounts", varargs...)
	ret0, _ := ret[0].(*v1.PartyAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyAccounts indicates an expected call of PartyAccounts.
func (mr *MockTradingDataServiceClientMockRecorder) PartyAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyAccounts", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PartyAccounts), varargs...)
}

// PartyByID mocks base method.
func (m *MockTradingDataServiceClient) PartyByID(arg0 context.Context, arg1 *v1.PartyByIDRequest, arg2 ...grpc.CallOption) (*v1.PartyByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartyByID", varargs...)
	ret0, _ := ret[0].(*v1.PartyByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyByID indicates an expected call of PartyByID.
func (mr *MockTradingDataServiceClientMockRecorder) PartyByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PartyByID), varargs...)
}

// PartyStake mocks base method.
func (m *MockTradingDataServiceClient) PartyStake(arg0 context.Context, arg1 *v1.PartyStakeRequest, arg2 ...grpc.CallOption) (*v1.PartyStakeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartyStake", varargs...)
	ret0, _ := ret[0].(*v1.PartyStakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyStake indicates an expected call of PartyStake.
func (mr *MockTradingDataServiceClientMockRecorder) PartyStake(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyStake", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PartyStake), varargs...)
}

// PositionsByParty mocks base method.
func (m *MockTradingDataServiceClient) PositionsByParty(arg0 context.Context, arg1 *v1.PositionsByPartyRequest, arg2 ...grpc.CallOption) (*v1.PositionsByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PositionsByParty", varargs...)
	ret0, _ := ret[0].(*v1.PositionsByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionsByParty indicates an expected call of PositionsByParty.
func (mr *MockTradingDataServiceClientMockRecorder) PositionsByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PositionsByParty), varargs...)
}

// PositionsSubscribe mocks base method.
func (m *MockTradingDataServiceClient) PositionsSubscribe(arg0 context.Context, arg1 *v1.PositionsSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_PositionsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PositionsSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_PositionsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionsSubscribe indicates an expected call of PositionsSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) PositionsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PositionsSubscribe), varargs...)
}

// TradesByMarket mocks base method.
func (m *MockTradingDataServiceClient) TradesByMarket(arg0 context.Context, arg1 *v1.TradesByMarketRequest, arg2 ...grpc.CallOption) (*v1.TradesByMarketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByMarket", varargs...)
	ret0, _ := ret[0].(*v1.TradesByMarketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByMarket indicates an expected call of TradesByMarket.
func (mr *MockTradingDataServiceClientMockRecorder) TradesByMarket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByMarket", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TradesByMarket), varargs...)
}

// TradesByOrder mocks base method.
func (m *MockTradingDataServiceClient) TradesByOrder(arg0 context.Context, arg1 *v1.TradesByOrderRequest, arg2 ...grpc.CallOption) (*v1.TradesByOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByOrder", varargs...)
	ret0, _ := ret[0].(*v1.TradesByOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByOrder indicates an expected call of TradesByOrder.
func (mr *MockTradingDataServiceClientMockRecorder) TradesByOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByOrder", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TradesByOrder), varargs...)
}

// TradesByParty mocks base method.
func (m *MockTradingDataServiceClient) TradesByParty(arg0 context.Context, arg1 *v1.TradesByPartyRequest, arg2 ...grpc.CallOption) (*v1.TradesByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByParty", varargs...)
	ret0, _ := ret[0].(*v1.TradesByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByParty indicates an expected call of TradesByParty.
func (mr *MockTradingDataServiceClientMockRecorder) TradesByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TradesByParty), varargs...)
}

// TradesSubscribe mocks base method.
func (m *MockTradingDataServiceClient) TradesSubscribe(arg0 context.Context, arg1 *v1.TradesSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_TradesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_TradesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesSubscribe indicates an expected call of TradesSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) TradesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TradesSubscribe), varargs...)
}

// Transfers mocks base method.
func (m *MockTradingDataServiceClient) Transfers(arg0 context.Context, arg1 *v1.TransfersRequest, arg2 ...grpc.CallOption) (*v1.TransfersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transfers", varargs...)
	ret0, _ := ret[0].(*v1.TransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfers indicates an expected call of Transfers.
func (mr *MockTradingDataServiceClientMockRecorder) Transfers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfers", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Transfers), varargs...)
}

// Withdrawal mocks base method.
func (m *MockTradingDataServiceClient) Withdrawal(arg0 context.Context, arg1 *v1.WithdrawalRequest, arg2 ...grpc.CallOption) (*v1.WithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Withdrawal", varargs...)
	ret0, _ := ret[0].(*v1.WithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockTradingDataServiceClientMockRecorder) Withdrawal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Withdrawal), varargs...)
}

// Withdrawals mocks base method.
func (m *MockTradingDataServiceClient) Withdrawals(arg0 context.Context, arg1 *v1.WithdrawalsRequest, arg2 ...grpc.CallOption) (*v1.WithdrawalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Withdrawals", varargs...)
	ret0, _ := ret[0].(*v1.WithdrawalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockTradingDataServiceClientMockRecorder) Withdrawals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Withdrawals), varargs...)
}
