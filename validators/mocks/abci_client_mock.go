// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/validators (interfaces: ABCIClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "github.com/tendermint/tendermint/types"
	reflect "reflect"
)

// MockABCIClient is a mock of ABCIClient interface
type MockABCIClient struct {
	ctrl     *gomock.Controller
	recorder *MockABCIClientMockRecorder
}

// MockABCIClientMockRecorder is the mock recorder for MockABCIClient
type MockABCIClientMockRecorder struct {
	mock *MockABCIClient
}

// NewMockABCIClient creates a new mock instance
func NewMockABCIClient(ctrl *gomock.Controller) *MockABCIClient {
	mock := &MockABCIClient{ctrl: ctrl}
	mock.recorder = &MockABCIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockABCIClient) EXPECT() *MockABCIClientMockRecorder {
	return m.recorder
}

// Validators mocks base method
func (m *MockABCIClient) Validators(arg0 context.Context) ([]*types.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", arg0)
	ret0, _ := ret[0].([]*types.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators
func (mr *MockABCIClientMockRecorder) Validators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockABCIClient)(nil).Validators), arg0)
}
