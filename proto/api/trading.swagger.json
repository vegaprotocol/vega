{
  "swagger": "2.0",
  "info": {
    "title": "proto/api/trading.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/governance/proposals": {
      "post": {
        "summary": "Prepare proposal that can be sent out to the chain (via SubmitTransaction)",
        "operationId": "PrepareProposal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareProposalResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPrepareProposalRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/markets": {
      "get": {
        "summary": "Get a list of Markets",
        "operationId": "Markets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketsResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets-data": {
      "get": {
        "summary": "Get a list of Market Data",
        "operationId": "MarketsData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketsDataResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets-data/{marketID}": {
      "get": {
        "summary": "Get Market Data by MarketID",
        "operationId": "MarketDataByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketDataByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}": {
      "get": {
        "summary": "Get a Market by ID",
        "operationId": "MarketByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/accounts": {
      "get": {
        "summary": "Get a list of Accounts by Market",
        "operationId": "MarketAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/candles": {
      "get": {
        "summary": "Get a list of Candles by Market",
        "operationId": "Candles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCandlesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sinceTimestamp",
            "description": "nanoseconds since the epoch. See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "interval",
            "description": " - INTERVAL_UNSPECIFIED: Default value, always invalid\n - INTERVAL_I1M: 1 minute\n - INTERVAL_I5M: 5 minutes\n - INTERVAL_I15M: 15 minutes\n - INTERVAL_I1H: 1 hour\n - INTERVAL_I6H: 6 hours\n - INTERVAL_I1D: 1 day",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INTERVAL_UNSPECIFIED",
              "INTERVAL_I1M",
              "INTERVAL_I5M",
              "INTERVAL_I15M",
              "INTERVAL_I1H",
              "INTERVAL_I6H",
              "INTERVAL_I1D"
            ],
            "default": "INTERVAL_UNSPECIFIED"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/depth": {
      "get": {
        "summary": "Get Market Depth",
        "operationId": "MarketDepth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketDepthResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxDepth",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/orders": {
      "get": {
        "summary": "Get a list of Orders by Market",
        "operationId": "OrdersByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrdersByMarketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "open",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/orders/{orderID}": {
      "get": {
        "summary": "Get an Order by Market and OrderID",
        "operationId": "OrderByMarketAndID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderByMarketAndIdResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Market",
        "operationId": "TradesByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByMarketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/trades/latest": {
      "get": {
        "summary": "Get latest Trade",
        "operationId": "LastTrade",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLastTradeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/prepare": {
      "post": {
        "summary": "Prepare a submit order request",
        "operationId": "PrepareSubmitOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareSubmitOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSubmitOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/prepare/{amendment.orderID}": {
      "put": {
        "summary": "Amend an Order",
        "operationId": "PrepareAmendOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareAmendOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "amendment.orderID",
            "description": "required to find the order, not being updated",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAmendOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/prepare/{cancellation.orderID}": {
      "delete": {
        "summary": "Cancel an Order",
        "operationId": "PrepareCancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareCancelOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "cancellation.orderID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cancellation.marketID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cancellation.partyID",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/{orderID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Order",
        "operationId": "TradesByOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/{orderID}/versions": {
      "get": {
        "summary": "Get all versions of the order by its orderID",
        "operationId": "OrderVersionsByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderVersionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "orderID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/{reference}": {
      "get": {
        "summary": "Get an Order by Pending Order reference (UUID)",
        "operationId": "OrderByReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderByReferenceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties": {
      "get": {
        "summary": "Get a list of Parties",
        "operationId": "Parties",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartiesResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}": {
      "get": {
        "summary": "Get a Party by ID",
        "operationId": "PartyByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartyByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/accounts": {
      "get": {
        "summary": "Get a list of Accounts by Party",
        "operationId": "PartyAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartyAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_INSURANCE",
              "ACCOUNT_TYPE_SETTLEMENT",
              "ACCOUNT_TYPE_MARGIN",
              "ACCOUNT_TYPE_GENERAL"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          },
          {
            "name": "asset",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/markets/{marketID}/margin": {
      "get": {
        "summary": "Get Margin Levels by PartyID",
        "operationId": "MarginLevels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarginLevelsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/orders": {
      "get": {
        "summary": "Get a list of Orders by Party",
        "operationId": "OrdersByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrdersByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "open",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/positions": {
      "get": {
        "summary": "Get a list of Positions by Party",
        "operationId": "PositionsByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPositionsByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Party",
        "operationId": "TradesByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/statistics": {
      "get": {
        "summary": "Get Statistics",
        "operationId": "Statistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/vegaStatistics"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/time": {
      "get": {
        "summary": "Get Time",
        "operationId": "GetVegaTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiVegaTimeResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/transaction": {
      "post": {
        "summary": "Submit a signed transaction",
        "operationId": "SubmitTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSubmitTransactionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSubmitTransactionRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    }
  },
  "definitions": {
    "OrderStatus": {
      "type": "string",
      "enum": [
        "STATUS_INVALID",
        "STATUS_ACTIVE",
        "STATUS_EXPIRED",
        "STATUS_CANCELLED",
        "STATUS_STOPPED",
        "STATUS_FILLED",
        "STATUS_REJECTED",
        "STATUS_PARTIALLY_FILLED"
      ],
      "default": "STATUS_INVALID",
      "description": "See [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/50-trading-questions/#what-order-types-are-available-to-trade-on-vega) for details.\n\n - STATUS_INVALID: Default value, always invalid\n - STATUS_ACTIVE: used for active unfilled or partially filled orders\n - STATUS_EXPIRED: used for expired GTT orders\n - STATUS_CANCELLED: used for orders cancelled by the party that created the order\n - STATUS_STOPPED: used for unfilled FOK or IOC orders, and for orders that were stopped by the network\n - STATUS_FILLED: used for closed fully filled orders\n - STATUS_REJECTED: used for orders when not enough collateral was available to fill the margin requirements\n - STATUS_PARTIALLY_FILLED: used for closed partially filled IOC orders",
      "title": "Order Status"
    },
    "OrderTimeInForce": {
      "type": "string",
      "enum": [
        "TIF_UNSPECIFIED",
        "TIF_GTC",
        "TIF_GTT",
        "TIF_IOC",
        "TIF_FOK"
      ],
      "default": "TIF_UNSPECIFIED",
      "description": "See [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/50-trading-questions/#what-order-types-are-available-to-trade-on-vega) for details.\n\n - TIF_UNSPECIFIED: Default value, can be valid for an amend\n - TIF_GTC: good til cancelled\n - TIF_GTT: good til time\n - TIF_IOC: immediate or cancel\n - TIF_FOK: fill or kill",
      "title": "Order Time in Force"
    },
    "ProposalState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_FAILED",
        "STATE_OPEN",
        "STATE_PASSED",
        "STATE_REJECTED",
        "STATE_DECLINED",
        "STATE_ENACTED",
        "STATE_WAITING_FOR_NODE_VOTE"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "Proposal state transition:\nOpen -\u003e\n  - Passed -\u003e Enacted.\n  - Passed -\u003e Failed.\n  - Declined\nRejected\nProposal can enter Failed state from any other state.\n\n - STATE_UNSPECIFIED: Default value, always invalid.\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execusion could not be performed.\n - STATE_OPEN: Proposal is open for voting.\n - STATE_PASSED: Proposal has gained enough support to be executed.\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements).\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level).\n - STATE_WAITING_FOR_NODE_VOTE: waiting for validators validation of the proposal"
    },
    "VoteValue": {
      "type": "string",
      "enum": [
        "VALUE_UNSPECIFIED",
        "VALUE_NO",
        "VALUE_YES"
      ],
      "default": "VALUE_UNSPECIFIED",
      "description": " - VALUE_UNSPECIFIED: Default value, always invalid.\n - VALUE_NO: A vote against the proposal.\n - VALUE_YES: A vote in favour of the proposal."
    },
    "apiAmendOrderRequest": {
      "type": "object",
      "properties": {
        "amendment": {
          "$ref": "#/definitions/vegaOrderAmendment"
        }
      }
    },
    "apiCandlesResponse": {
      "type": "object",
      "properties": {
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaCandle"
          }
        }
      }
    },
    "apiGetNetworkParametersProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetNewAssetProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetNewMarketProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetNodeSignaturesAggregateResponse": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaNodeSignature"
          }
        }
      }
    },
    "apiGetProposalByIDResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData"
        }
      }
    },
    "apiGetProposalByReferenceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData"
        }
      }
    },
    "apiGetProposalsByPartyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetUpdateMarketProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          }
        }
      }
    },
    "apiGetVotesByPartyResponse": {
      "type": "object",
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          }
        }
      }
    },
    "apiLastTradeResponse": {
      "type": "object",
      "properties": {
        "trade": {
          "$ref": "#/definitions/vegaTrade"
        }
      }
    },
    "apiMarginLevelsResponse": {
      "type": "object",
      "properties": {
        "marginLevels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarginLevels"
          }
        }
      }
    },
    "apiMarketAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          }
        }
      }
    },
    "apiMarketByIDResponse": {
      "type": "object",
      "properties": {
        "market": {
          "$ref": "#/definitions/vegaMarket"
        }
      }
    },
    "apiMarketDataByIDResponse": {
      "type": "object",
      "properties": {
        "marketData": {
          "$ref": "#/definitions/vegaMarketData"
        }
      }
    },
    "apiMarketDepthResponse": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "lastTrade": {
          "$ref": "#/definitions/vegaTrade"
        }
      }
    },
    "apiMarketsDataResponse": {
      "type": "object",
      "properties": {
        "marketsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarketData"
          }
        }
      }
    },
    "apiMarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarket"
          },
          "title": "a list of Markets"
        }
      }
    },
    "apiOptionalProposalState": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProposalState"
        }
      }
    },
    "apiOrderByMarketAndIdResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder"
        }
      }
    },
    "apiOrderByReferenceResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder"
        }
      }
    },
    "apiOrderVersionsResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiOrdersByMarketResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiOrdersByPartyResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiOrdersStream": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          }
        }
      }
    },
    "apiPagination": {
      "type": "object",
      "properties": {
        "skip": {
          "type": "string",
          "format": "uint64"
        },
        "limit": {
          "type": "string",
          "format": "uint64"
        },
        "descending": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiPartiesResponse": {
      "type": "object",
      "properties": {
        "parties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaParty"
          }
        }
      }
    },
    "apiPartyAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          }
        }
      }
    },
    "apiPartyByIDResponse": {
      "type": "object",
      "properties": {
        "party": {
          "$ref": "#/definitions/vegaParty"
        }
      }
    },
    "apiPositionsByPartyResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPosition"
          }
        }
      }
    },
    "apiPrepareAmendOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiPrepareCancelOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiPrepareProposalRequest": {
      "type": "object",
      "properties": {
        "partyID": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "proposal": {
          "$ref": "#/definitions/vegaProposalTerms"
        }
      }
    },
    "apiPrepareProposalResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        },
        "pendingProposal": {
          "$ref": "#/definitions/vegaProposal"
        }
      }
    },
    "apiPrepareSubmitOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        },
        "submitID": {
          "type": "string"
        }
      }
    },
    "apiPrepareVoteResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        },
        "vote": {
          "$ref": "#/definitions/vegaVote"
        }
      }
    },
    "apiSubmitOrderRequest": {
      "type": "object",
      "properties": {
        "submission": {
          "$ref": "#/definitions/vegaOrderSubmission",
          "description": "the bulk of the Order, including market, party, price, size, side, time in force, etc."
        }
      }
    },
    "apiSubmitTransactionRequest": {
      "type": "object",
      "properties": {
        "tx": {
          "$ref": "#/definitions/vegaSignedBundle"
        }
      }
    },
    "apiSubmitTransactionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiTradesByMarketResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiTradesByOrderResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiTradesByPartyResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiTradesStream": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          }
        }
      }
    },
    "apiVegaTimeResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "balance": {
          "type": "string",
          "format": "uint64"
        },
        "asset": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/vegaAccountType"
        }
      }
    },
    "vegaAccountType": {
      "type": "string",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_INSURANCE",
        "ACCOUNT_TYPE_SETTLEMENT",
        "ACCOUNT_TYPE_MARGIN",
        "ACCOUNT_TYPE_GENERAL"
      ],
      "default": "ACCOUNT_TYPE_UNSPECIFIED"
    },
    "vegaAssetSource": {
      "type": "object",
      "properties": {
        "builtinAsset": {
          "$ref": "#/definitions/vegaBuiltinAsset"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20"
        }
      }
    },
    "vegaBuiltinAsset": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "totalSupply": {
          "type": "string"
        },
        "decimals": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "nanoseconds since the epoch. See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "datetime": {
          "type": "string",
          "title": "ISO 8601 datetime"
        },
        "high": {
          "type": "string",
          "format": "uint64"
        },
        "low": {
          "type": "string",
          "format": "uint64"
        },
        "open": {
          "type": "string",
          "format": "uint64"
        },
        "close": {
          "type": "string",
          "format": "uint64"
        },
        "volume": {
          "type": "string",
          "format": "uint64"
        },
        "interval": {
          "$ref": "#/definitions/vegaInterval"
        }
      }
    },
    "vegaChainStatus": {
      "type": "string",
      "enum": [
        "CHAIN_STATUS_UNSPECIFIED",
        "CHAIN_STATUS_DISCONNECTED",
        "CHAIN_STATUS_REPLAYING",
        "CHAIN_STATUS_CONNECTED"
      ],
      "default": "CHAIN_STATUS_UNSPECIFIED"
    },
    "vegaContinuousTrading": {
      "type": "object",
      "properties": {
        "tickSize": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaDiscreteTrading": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaERC20": {
      "type": "object",
      "properties": {
        "contractAddress": {
          "type": "string"
        }
      }
    },
    "vegaEthereumEvent": {
      "type": "object",
      "properties": {
        "contractID": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaExternalRiskModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "socket": {
          "type": "string"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "vegaFuture": {
      "type": "object",
      "properties": {
        "maturity": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "ethereumEvent": {
          "$ref": "#/definitions/vegaEthereumEvent"
        }
      }
    },
    "vegaGovernanceData": {
      "type": "object",
      "properties": {
        "proposal": {
          "$ref": "#/definitions/vegaProposal",
          "title": "Proposal"
        },
        "yes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "description": "All \"yes\" votes in favour of the proposal above."
        },
        "no": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "description": "All \"no\" votes against the proposal above."
        },
        "yesParty": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All latest YES votes by party (guaranteed to be unique)"
        },
        "noParty": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All latest NO votes by party (unique)"
        }
      }
    },
    "vegaInstrument": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "baseName": {
          "type": "string"
        },
        "quoteName": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/vegaInstrumentMetadata"
        },
        "initialMarkPrice": {
          "type": "string",
          "format": "uint64"
        },
        "future": {
          "$ref": "#/definitions/vegaFuture"
        }
      }
    },
    "vegaInstrumentMetadata": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "vegaInterval": {
      "type": "string",
      "enum": [
        "INTERVAL_UNSPECIFIED",
        "INTERVAL_I1M",
        "INTERVAL_I5M",
        "INTERVAL_I15M",
        "INTERVAL_I1H",
        "INTERVAL_I6H",
        "INTERVAL_I1D"
      ],
      "default": "INTERVAL_UNSPECIFIED",
      "title": "- INTERVAL_UNSPECIFIED: Default value, always invalid\n - INTERVAL_I1M: 1 minute\n - INTERVAL_I5M: 5 minutes\n - INTERVAL_I15M: 15 minutes\n - INTERVAL_I1H: 1 hour\n - INTERVAL_I6H: 6 hours\n - INTERVAL_I1D: 1 day"
    },
    "vegaLedgerEntry": {
      "type": "object",
      "properties": {
        "fromAccount": {
          "type": "string"
        },
        "toAccount": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "reference": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaLogNormalModelParams": {
      "type": "object",
      "properties": {
        "mu": {
          "type": "number",
          "format": "double"
        },
        "r": {
          "type": "number",
          "format": "double"
        },
        "sigma": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaLogNormalRiskModel": {
      "type": "object",
      "properties": {
        "riskAversionParameter": {
          "type": "number",
          "format": "double"
        },
        "tau": {
          "type": "number",
          "format": "double"
        },
        "params": {
          "$ref": "#/definitions/vegaLogNormalModelParams"
        }
      }
    },
    "vegaMarginCalculator": {
      "type": "object",
      "properties": {
        "scalingFactors": {
          "$ref": "#/definitions/vegaScalingFactors"
        }
      }
    },
    "vegaMarginLevels": {
      "type": "object",
      "properties": {
        "maintenanceMargin": {
          "type": "string",
          "format": "uint64"
        },
        "searchLevel": {
          "type": "string",
          "format": "uint64"
        },
        "initialMargin": {
          "type": "string",
          "format": "uint64"
        },
        "collateralReleaseLevel": {
          "type": "string",
          "format": "uint64"
        },
        "partyID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaMarket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "32 pseudo-random upper-case letters and digits"
        },
        "name": {
          "type": "string",
          "title": "a human-understandable name for the Market, perhaps including a currency pair and a maturity date"
        },
        "tradableInstrument": {
          "$ref": "#/definitions/vegaTradableInstrument"
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "the number of decimal places that a price must be shifted by in order to get a correct price denominated in the currency of the Market. ie `realPrice = price / 10^decimalPlaces`"
        },
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading"
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading"
        }
      }
    },
    "vegaMarketData": {
      "type": "object",
      "properties": {
        "markPrice": {
          "type": "string",
          "format": "uint64"
        },
        "bestBidPrice": {
          "type": "string",
          "format": "uint64"
        },
        "bestBidVolume": {
          "type": "string",
          "format": "uint64"
        },
        "bestOfferPrice": {
          "type": "string",
          "format": "uint64"
        },
        "bestOfferVolume": {
          "type": "string",
          "format": "uint64"
        },
        "midPrice": {
          "type": "string",
          "format": "uint64"
        },
        "market": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          }
        }
      }
    },
    "vegaNetworkConfiguration": {
      "type": "object",
      "properties": {
        "minCloseInSeconds": {
          "type": "string",
          "format": "int64",
          "description": "Constrains minimum duration since submission (in seconds) when vote closing time is allowed to be set for a proposal."
        },
        "maxCloseInSeconds": {
          "type": "string",
          "format": "int64",
          "description": "Constrains maximum duration since submission (in seconds) when vote closing time is allowed to be set for a proposal."
        },
        "minEnactInSeconds": {
          "type": "string",
          "format": "int64",
          "description": "Constrains minimum duration since submission (in seconds) when enactment is allowed to be set for a proposal."
        },
        "maxEnactInSeconds": {
          "type": "string",
          "format": "int64",
          "description": "Constrains maximum duration since submission (in seconds) when enactment is allowed to be set for a proposal."
        },
        "requiredParticipation": {
          "type": "number",
          "format": "float",
          "description": "Participation level required for any proposal to pass. Value from `0` to `1`."
        },
        "requiredMajority": {
          "type": "number",
          "format": "float",
          "description": "Majority level required for any proposal to pass. Value from `0.5` to `1`."
        },
        "minProposerBalance": {
          "type": "number",
          "format": "float",
          "description": "Minimum balance required for a party to be able to submit a new proposal. Value greater than `0` to `1`."
        },
        "minVoterBalance": {
          "type": "number",
          "format": "float",
          "description": "Minimum balance required for a party to be able to cast a vote. Value greater than `0` to `1`."
        }
      }
    },
    "vegaNewAsset": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaAssetSource"
        }
      },
      "title": "To be implemented"
    },
    "vegaNewMarket": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaMarket"
        }
      }
    },
    "vegaNodeSignature": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "sig": {
          "type": "string",
          "format": "byte"
        },
        "kind": {
          "$ref": "#/definitions/vegaNodeSignatureKind"
        }
      }
    },
    "vegaNodeSignatureKind": {
      "type": "string",
      "enum": [
        "NODE_SIGNATURE_KIND_ASSET_NEW",
        "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL"
      ],
      "default": "NODE_SIGNATURE_KIND_ASSET_NEW"
    },
    "vegaOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/vegaSide"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "remaining": {
          "type": "string",
          "format": "uint64"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "description": "nanoseconds since the epoch. See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "status": {
          "$ref": "#/definitions/OrderStatus",
          "description": "If `status` is `STATUS_REJECTED`, check `reason`."
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "reference": {
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/vegaOrderError"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "Versioning support for amends, orders start at version 1 and increment\nafter each successful amend"
        }
      }
    },
    "vegaOrderAmendment": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "title": "required to find the order, not being updated"
        },
        "partyID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/vegaPrice",
          "title": "these can be amended"
        },
        "sizeDelta": {
          "type": "string",
          "format": "int64"
        },
        "expiresAt": {
          "$ref": "#/definitions/vegaTimestamp"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        }
      }
    },
    "vegaOrderCancellation": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        }
      }
    },
    "vegaOrderError": {
      "type": "string",
      "enum": [
        "ORDER_ERROR_NONE",
        "ORDER_ERROR_INVALID_MARKET_ID",
        "ORDER_ERROR_INVALID_ORDER_ID",
        "ORDER_ERROR_OUT_OF_SEQUENCE",
        "ORDER_ERROR_INVALID_REMAINING_SIZE",
        "ORDER_ERROR_TIME_FAILURE",
        "ORDER_ERROR_REMOVAL_FAILURE",
        "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
        "ORDER_ERROR_INVALID_ORDER_REFERENCE",
        "ORDER_ERROR_EDIT_NOT_ALLOWED",
        "ORDER_ERROR_AMEND_FAILURE",
        "ORDER_ERROR_NOT_FOUND",
        "ORDER_ERROR_INVALID_PARTY_ID",
        "ORDER_ERROR_MARKET_CLOSED",
        "ORDER_ERROR_MARGIN_CHECK_FAILED",
        "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
        "ORDER_ERROR_INTERNAL_ERROR",
        "ORDER_ERROR_INVALID_SIZE",
        "ORDER_ERROR_INVALID_PERSISTENCE",
        "ORDER_ERROR_INVALID_TYPE"
      ],
      "default": "ORDER_ERROR_NONE"
    },
    "vegaOrderSubmission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "side": {
          "$ref": "#/definitions/vegaSide"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType"
        },
        "reference": {
          "type": "string"
        }
      }
    },
    "vegaOrderType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LIMIT",
        "TYPE_MARKET",
        "TYPE_NETWORK"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_LIMIT: used for Limit orders\n - TYPE_MARKET: used for Market orders\n - TYPE_NETWORK: used for orders where the initiating party is the network (used for distressed traders)",
      "title": "Order Type"
    },
    "vegaParty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "vegaPosition": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string"
        },
        "partyID": {
          "type": "string"
        },
        "openVolume": {
          "type": "string",
          "format": "int64"
        },
        "realisedPNL": {
          "type": "string",
          "format": "int64"
        },
        "unrealisedPNL": {
          "type": "string",
          "format": "int64"
        },
        "averageEntryPrice": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaPrice": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaPriceLevel": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "numberOfOrders": {
          "type": "string",
          "format": "uint64"
        },
        "volume": {
          "type": "string",
          "format": "uint64"
        },
        "cumulativeVolume": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaProposal": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "Proposal unique identifier."
        },
        "reference": {
          "type": "string",
          "description": "Proposal reference."
        },
        "partyID": {
          "type": "string",
          "description": "Proposal author, identifier of the party submitting the proposal."
        },
        "state": {
          "$ref": "#/definitions/ProposalState",
          "title": "Proposal state (see Proposal.State definition)"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network."
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted."
        }
      }
    },
    "vegaProposalTerms": {
      "type": "object",
      "properties": {
        "closingTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal.\nConstrained by `minCloseInSeconds` and `maxCloseInSeconds` network parameters."
        },
        "enactmentTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed).\nConstrained by `minEnactInSeconds` and `maxEnactInSeconds` network parameters."
        },
        "validationTimestamp": {
          "type": "string",
          "format": "int64"
        },
        "updateMarket": {
          "$ref": "#/definitions/vegaUpdateMarket",
          "description": "Proposal change for modifying an existing market on Vega."
        },
        "newMarket": {
          "$ref": "#/definitions/vegaNewMarket",
          "description": "Proposal change for creating new market on Vega."
        },
        "updateNetwork": {
          "$ref": "#/definitions/vegaUpdateNetwork",
          "description": "Proposal change for updating Vega network parameters."
        },
        "newAsset": {
          "$ref": "#/definitions/vegaNewAsset",
          "description": "Proposal change for creating new assets on Vega."
        }
      }
    },
    "vegaScalingFactors": {
      "type": "object",
      "properties": {
        "searchLevel": {
          "type": "number",
          "format": "double"
        },
        "initialMargin": {
          "type": "number",
          "format": "double"
        },
        "collateralRelease": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaSide": {
      "type": "string",
      "enum": [
        "SIDE_UNSPECIFIED",
        "SIDE_BUY",
        "SIDE_SELL"
      ],
      "default": "SIDE_UNSPECIFIED",
      "title": "- SIDE_UNSPECIFIED: Default value, always invalid\n - SIDE_BUY: Buy\n - SIDE_SELL: Sell"
    },
    "vegaSignedBundle": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte"
        },
        "sig": {
          "type": "string",
          "format": "byte"
        },
        "address": {
          "type": "string",
          "format": "byte"
        },
        "pubKey": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "vegaSimpleModelParams": {
      "type": "object",
      "properties": {
        "factorLong": {
          "type": "number",
          "format": "double"
        },
        "factorShort": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "vegaSimpleRiskModel": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/vegaSimpleModelParams"
        }
      }
    },
    "vegaStatistics": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64"
        },
        "backlogLength": {
          "type": "string",
          "format": "uint64"
        },
        "totalPeers": {
          "type": "string",
          "format": "uint64"
        },
        "genesisTime": {
          "type": "string",
          "title": "ISO 8601 datetime, nanosecond precision"
        },
        "currentTime": {
          "type": "string",
          "title": "ISO 8601 datetime, nanosecond precision"
        },
        "vegaTime": {
          "type": "string",
          "title": "ISO 8601 datetime, nanosecond precision"
        },
        "status": {
          "$ref": "#/definitions/vegaChainStatus"
        },
        "txPerBlock": {
          "type": "string",
          "format": "uint64"
        },
        "averageTxBytes": {
          "type": "string",
          "format": "uint64"
        },
        "averageOrdersPerBlock": {
          "type": "string",
          "format": "uint64"
        },
        "tradesPerSecond": {
          "type": "string",
          "format": "uint64"
        },
        "ordersPerSecond": {
          "type": "string",
          "format": "uint64"
        },
        "totalMarkets": {
          "type": "string",
          "format": "uint64"
        },
        "totalAmendOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalCancelOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalCreateOrder": {
          "type": "string",
          "format": "uint64"
        },
        "totalOrders": {
          "type": "string",
          "format": "uint64"
        },
        "totalTrades": {
          "type": "string",
          "format": "uint64"
        },
        "orderSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "tradeSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "candleSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "marketDepthSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "positionsSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "accountSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "marketDataSubscriptions": {
          "type": "integer",
          "format": "int64"
        },
        "appVersionHash": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "chainVersion": {
          "type": "string"
        },
        "blockDuration": {
          "type": "string",
          "format": "uint64",
          "title": "nanoseconds"
        },
        "uptime": {
          "type": "string",
          "title": "ISO 8601 datetime, nanosecond precision"
        },
        "chainID": {
          "type": "string",
          "title": "Unique ID of the blockchain"
        }
      }
    },
    "vegaTimestamp": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaTradableInstrument": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrument"
        },
        "marginCalculator": {
          "$ref": "#/definitions/vegaMarginCalculator"
        },
        "logNormalRiskModel": {
          "$ref": "#/definitions/vegaLogNormalRiskModel"
        },
        "externalRiskModel": {
          "$ref": "#/definitions/vegaExternalRiskModel"
        },
        "simpleRiskModel": {
          "$ref": "#/definitions/vegaSimpleRiskModel"
        }
      }
    },
    "vegaTrade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "marketID": {
          "type": "string"
        },
        "price": {
          "type": "string",
          "format": "uint64"
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "buyer": {
          "type": "string"
        },
        "seller": {
          "type": "string"
        },
        "aggressor": {
          "$ref": "#/definitions/vegaSide"
        },
        "buyOrder": {
          "type": "string"
        },
        "sellOrder": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "nanoseconds since the epoch. See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "type": {
          "$ref": "#/definitions/vegaTradeType"
        }
      }
    },
    "vegaTradeType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_DEFAULT",
        "TYPE_NETWORK_CLOSE_OUT_GOOD",
        "TYPE_NETWORK_CLOSE_OUT_BAD"
      ],
      "default": "TYPE_UNSPECIFIED",
      "title": "- TYPE_UNSPECIFIED: Default value, always invalid"
    },
    "vegaTransferBalance": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccount"
        },
        "balance": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLedgerEntry"
          }
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTransferBalance"
          }
        }
      }
    },
    "vegaUpdateMarket": {
      "type": "object"
    },
    "vegaUpdateNetwork": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNetworkConfiguration"
        }
      }
    },
    "vegaVote": {
      "type": "object",
      "properties": {
        "partyID": {
          "type": "string",
          "description": "Voter's party identifier."
        },
        "value": {
          "$ref": "#/definitions/VoteValue",
          "description": "Actual vote."
        },
        "proposalID": {
          "type": "string",
          "description": "Identifier of the proposal being voted on."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network."
        }
      }
    }
  },
  "x-stream-definitions": {
    "apiOrdersStream": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiOrdersStream"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiOrdersStream"
    },
    "apiTradesStream": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiTradesStream"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiTradesStream"
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaAccount"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaAccount"
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaCandle"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaCandle"
    },
    "vegaGovernanceData": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaGovernanceData"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaGovernanceData"
    },
    "vegaMarginLevels": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarginLevels"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarginLevels"
    },
    "vegaMarketData": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketData"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketData"
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketDepth"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketDepth"
    },
    "vegaPosition": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaPosition"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaPosition"
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaTransferResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaTransferResponse"
    },
    "vegaVote": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaVote"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaVote"
    }
  }
}
