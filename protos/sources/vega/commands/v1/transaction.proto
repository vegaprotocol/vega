syntax = "proto3";

package vega.commands.v1;

import "vega/commands/v1/commands.proto";
import "vega/commands/v1/data.proto";
import "vega/commands/v1/signature.proto";
import "vega/commands/v1/validator_commands.proto";

option go_package = "code.vegaprotocol.io/vega/protos/vega/commands/v1";

message InputData {
  // This was the old restore checkpoint command
  reserved 4001;
  // Number to provide uniqueness to prevent accidental replays and,
  // in combination with `block_height`, deliberate attacks.
  // A nonce provides uniqueness for otherwise identical transactions,
  // ensuring that the transaction hash uniquely identifies a specific transaction.
  // Granted all other fields are equal, the nonce can either be a counter
  // or generated at random to submit multiple transactions within the same
  // block (see below), without being identified as replays.
  // Please note that Protocol Buffers do not have a canonical, unique encoding
  // and therefore different libraries or binaries may encode the same message
  // slightly differently, causing a different hash.
  uint64 nonce = 1;

  // Block height at which the transaction was made.
  // This should be the current block height. The transaction will be valid
  // from the block and up to the `tolerance` block height.
  // Example: If the network has a tolerance of 150 blocks and `block_height`
  // is set to `200`, then the transaction will be valid until block `350`.
  // Note that a `block_height` that is ahead of the real block height will be
  // rejected. The tolerance can be queried from the chain's network parameters.
  // `block_height` prevents replay attacks in conjunction with `nonce` (see above).
  uint64 block_height = 2;

  oneof command {
    // Command for submitting an order.
    OrderSubmission order_submission = 1001;

    // User commands

    // Command to cancel an order.
    OrderCancellation order_cancellation = 1002;
    // Command to amend an order.
    OrderAmendment order_amendment = 1003;
    // Command to submit a withdrawal.
    WithdrawSubmission withdraw_submission = 1004;
    // Command to submit a governance proposal.
    ProposalSubmission proposal_submission = 1005;
    // Command to submit a vote on a governance proposal.
    VoteSubmission vote_submission = 1006;
    // Command to submit a liquidity commitment.
    LiquidityProvisionSubmission liquidity_provision_submission = 1007;
    // Command to delegate tokens to a validator.
    DelegateSubmission delegate_submission = 1008;
    // Command to remove tokens delegated to a validator.
    UndelegateSubmission undelegate_submission = 1009;
    // Command to request cancelling a liquidity commitment.
    LiquidityProvisionCancellation liquidity_provision_cancellation = 1010;
    // Command to request amending a liquidity commitment.
    LiquidityProvisionAmendment liquidity_provision_amendment = 1011;
    // Command to submit a transfer.
    Transfer transfer = 1012;
    // Command to request cancelling a recurring transfer.
    CancelTransfer cancel_transfer = 1013;
    // Command used by a node operator to announce its node as a pending validator.
    AnnounceNode announce_node = 1014;
    // Command to submit a batch of order instructions to a market.
    BatchMarketInstructions batch_market_instructions = 1015;

    // Validator commands

    // Command used by a validator when a node votes for validating that a given resource exists or is valid,
    // for example, an ERC20 deposit is valid and exists on ethereum.
    NodeVote node_vote = 2002;
    // Command used by a validator to submit a signature, to be used by a foreign chain to recognise a decision taken by the Vega network.
    NodeSignature node_signature = 2003;
    // Command used by a validator to submit an event forwarded to the Vega network to provide information
    // on events happening on other networks, to be used by a foreign chain
    // to recognise a decision taken by the Vega network.
    ChainEvent chain_event = 2004;
    // Command used by a validator to allow given validator to rotate their Vega keys.
    KeyRotateSubmission key_rotate_submission = 2005;
    // Command used by a validator to submit a floating point value.
    StateVariableProposal state_variable_proposal = 2006;
    // Command used by a validator to signal they are still online and validating blocks
    // or ready to validate blocks when they are still a pending validator.
    ValidatorHeartbeat validator_heartbeat = 2007;
    // Command used by a validator to allow given validator to rotate their Ethereum keys.
    EthereumKeyRotateSubmission ethereum_key_rotate_submission = 2008;
    // Command used by a validator to propose a protocol upgrade.
    ProtocolUpgradeProposal protocol_upgrade_proposal = 2009;
    // Command used by a validator to submit signatures to a smart contract.
    IssueSignatures issue_signatures = 2010;

    // Oracles

    // Command to submit new oracle data from third party providers.
    OracleDataSubmission oracle_data_submission = 3001;
  }
}

// Current supported version of the transaction inside the network.
enum TxVersion {
  reserved 1;
  // Represents an unspecified or missing value from the input
  TX_VERSION_UNSPECIFIED = 0;
  // This version requires the proof-of-work added to the transaction.
  TX_VERSION_V2 = 2;
  // This version requires the chain ID to be appended in front of the input data
  // byte, with a `\0` delimiter.
  TX_VERSION_V3 = 3;
}

// Represents a transaction to be sent to Vega.
message Transaction {
  // One of the set of Vega commands.
  // These bytes are should be built as follows:
  //   chain_id_as_bytes + \0 character as delimiter + proto_marshalled_command.
  bytes input_data = 1;

  // Signature of the input data.
  Signature signature = 2;

  // Sender of the transaction.
  // Any of the following would be valid.
  oneof from {
    // Hex-encoded address of the sender. Not supported yet.
    string address = 1001;
    // Hex-encoded public key of the sender.
    string pub_key = 1002;
  }

  // Version of the transaction, to be used in the future in case changes are implemented
  // to the transaction format.
  TxVersion version = 2000;

  // Proof of work contains the random transaction id used by the client and the nonce.
  ProofOfWork pow = 3000;
}

// Components needed for the network to verify proof-of-work
message ProofOfWork {
  // Unique transaction identifier used to seed the proof-of-work hash.
  string tid = 1;
  // Number which, combined with the transaction identifier, will produce a hash with the required number of leading zeros to be accepted by the network.
  uint64 nonce = 2;
}
