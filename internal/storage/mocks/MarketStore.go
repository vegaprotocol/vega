// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import proto "code.vegaprotocol.io/vega/proto"

// MarketStore is an autogenerated mock type for the MarketStore type
type MarketStore struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MarketStore) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *MarketStore) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *MarketStore) GetAll() ([]*proto.Market, error) {
	ret := _m.Called()

	var r0 []*proto.Market
	if rf, ok := ret.Get(0).(func() []*proto.Market); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: name
func (_m *MarketStore) GetByID(name string) (*proto.Market, error) {
	ret := _m.Called(name)

	var r0 *proto.Market
	if rf, ok := ret.Get(0).(func(string) *proto.Market); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: party
func (_m *MarketStore) Post(party *proto.Market) error {
	ret := _m.Called(party)

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.Market) error); ok {
		r0 = rf(party)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
