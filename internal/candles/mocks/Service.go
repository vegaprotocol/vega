// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import proto "vega/proto"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetCandles provides a mock function with given fields: ctx, market, sinceTimestamp, interval
func (_m *Service) GetCandles(ctx context.Context, market string, sinceTimestamp uint64, interval proto.Interval) ([]*proto.Candle, error) {
	ret := _m.Called(ctx, market, sinceTimestamp, interval)

	var r0 []*proto.Candle
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, proto.Interval) []*proto.Candle); ok {
		r0 = rf(ctx, market, sinceTimestamp, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Candle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, proto.Interval) error); ok {
		r1 = rf(ctx, market, sinceTimestamp, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObserveCandles provides a mock function with given fields: ctx, market, interval
func (_m *Service) ObserveCandles(ctx context.Context, market *string, interval *proto.Interval) (<-chan *proto.Candle, uint64) {
	ret := _m.Called(ctx, market, interval)

	var r0 <-chan *proto.Candle
	if rf, ok := ret.Get(0).(func(context.Context, *string, *proto.Interval) <-chan *proto.Candle); ok {
		r0 = rf(ctx, market, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *proto.Candle)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *string, *proto.Interval) uint64); ok {
		r1 = rf(ctx, market, interval)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}
