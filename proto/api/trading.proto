syntax = "proto3";

option go_package = "code.vegaprotocol.io/vega/proto/api";

import "proto/vega.proto";
import "proto/markets.proto";

package api;

import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

service trading {
  // unary calls - writes
  rpc SubmitOrder(SubmitOrderRequest) returns (vega.PendingOrder);
  rpc CancelOrder(CancelOrderRequest) returns (vega.PendingOrder);
  rpc AmendOrder(AmendOrderRequest) returns (OrderResponse);
  rpc SignIn(SignInRequest) returns (SignInResponse);
  // unary calls - read
}

message SignInRequest {
  string id = 1;
  string password = 2;
}

message SignInResponse {
  string token = 1;
}

message SubmitOrderRequest {
  vega.OrderSubmission submission = 1;
  string token = 101;
}

message CancelOrderRequest {
  vega.OrderCancellation cancellation = 1;
  string token = 101;
}

message AmendOrderRequest {
  vega.OrderAmendment amendment = 1;
  string token = 101;
}

message OrderResponse {
  bool success = 1;
  string reference = 2;
}

service trading_data {
  // orders
  rpc OrdersByMarket(OrdersByMarketRequest) returns (OrdersByMarketResponse);
  rpc OrdersByParty(OrdersByPartyRequest) returns (OrdersByPartyResponse);
  rpc OrderByMarketAndId(OrderByMarketAndIdRequest) returns (OrderByMarketAndIdResponse);
  rpc OrderByReference(OrderByReferenceRequest) returns (OrderByReferenceResponse);

  // markets
  rpc MarketByID(MarketByIDRequest) returns (MarketByIDResponse);
  rpc Markets(google.protobuf.Empty) returns (MarketsResponse);
  rpc MarketDepth(MarketDepthRequest) returns (MarketDepthResponse);
  rpc LastTrade(LastTradeRequest) returns (LastTradeResponse);

  // parties
  rpc PartyByID(PartyByIDRequest) returns (PartyByIDResponse);
  rpc Parties(google.protobuf.Empty) returns (PartiesResponse);

  // trades
  rpc TradesByMarket(TradesByMarketRequest) returns (TradesByMarketResponse);
  rpc TradesByParty(TradesByPartyRequest) returns (TradesByPartyResponse);
  rpc TradesByOrder(TradesByOrderRequest) returns (TradesByOrderResponse);

  // positions
  rpc PositionsByParty(PositionsByPartyRequest) returns (PositionsByPartyResponse);

  // candles
  rpc Candles(CandlesRequest) returns (CandlesResponse);

  // metrics
  rpc Statistics(google.protobuf.Empty) returns (vega.Statistics);
  rpc GetVegaTime(google.protobuf.Empty) returns (VegaTimeResponse);

  // streams
  rpc OrdersSubscribe(OrdersSubscribeRequest) returns (stream OrdersStream);
  rpc TradesSubscribe(TradesSubscribeRequest) returns (stream TradesStream);
  rpc CandlesSubscribe(CandlesSubscribeRequest) returns (stream vega.Candle);
  rpc MarketDepthSubscribe(MarketDepthSubscribeRequest) returns (stream vega.MarketDepth);
  rpc PositionsSubscribe(PositionsSubscribeRequest) returns (stream vega.MarketPosition);
}

message LastTradeRequest {
  string marketID = 1;
}

message LastTradeResponse {
  vega.Trade trade = 1;
}

message MarketByIDRequest {
  string id = 1;
}

message MarketByIDResponse {
  vega.Market market = 1;
}

message PartyByIDRequest {
  string id = 1;
}

message PartyByIDResponse {
  vega.Party party = 1;
}

message PartiesResponse {
  repeated vega.Party parties = 1;
}

message TradesByPartyRequest {
  string partyID = 1;
  string marketID = 2;
  Pagination pagination = 3;
}

message TradesByPartyResponse {
  repeated vega.Trade trades = 1;
}

message TradesByOrderRequest {
  string orderID = 1;
}

message TradesByOrderResponse {
  repeated vega.Trade trades = 1;
}

message OrdersSubscribeRequest {
  string marketID = 1;
  string partyID = 2;
}

message TradesSubscribeRequest {
  string marketID = 1;
  string partyID = 2;
}

message CandlesSubscribeRequest {
  string marketID = 1;
  vega.Interval interval = 2;
}

message MarketDepthSubscribeRequest {
  string marketID = 1;
}

message PositionsSubscribeRequest {
  string partyID = 1;
}

message OrdersByMarketRequest {
  string marketID = 1 [(validator.field) = {msg_exists : true}];
  Pagination pagination = 2;
  bool open = 3;
}

message OrdersByMarketResponse {
  repeated vega.Order orders = 1;
}

message OrdersByPartyRequest {
  string partyID = 1 [(validator.field) = {msg_exists : true }];
  Pagination pagination = 2;
  bool open = 3;
}

message OrdersByPartyResponse {
  repeated vega.Order orders = 1;
}

message OrderByMarketAndIdRequest {
  string marketID = 1 [(validator.field) = {msg_exists : true }];
  string id = 2 [(validator.field) = {msg_exists : true}];
}

message OrderByMarketAndIdResponse {
  vega.Order order = 1;
}

message OrderByReferenceRequest {
  string reference = 1;
}

message OrderByReferenceResponse {
  vega.Order order = 1;
}

message MarketsResponse {
  repeated vega.Market markets = 1;
}

message CandlesRequest {
  string market = 1 [(validator.field) = {msg_exists : true}];
  int64 sinceTimestamp = 2 [(validator.field) = {int_gt: 0}];
  vega.Interval interval = 3;
}

message CandlesResponse {
  repeated vega.Candle candles = 1;
}

message MarketDepthRequest {
  string market = 1 [(validator.field) = {msg_exists: true}];
}

message MarketDepthResponse {
  string marketID = 1;
  repeated vega.PriceLevel buy = 2;
  repeated vega.PriceLevel sell = 3;
  vega.Trade lastTrade = 4;
}

message TradesByMarketRequest {
  string marketID = 1 [(validator.field) = {msg_exists: true}];
  Pagination pagination = 2;
}

message TradesByMarketResponse {
  repeated vega.Trade trades = 1;
}

message PositionsByPartyRequest{
  string partyID = 1 [(validator.field) = {msg_exists: true}];
}

message PositionsByPartyResponse{
  repeated vega.MarketPosition positions = 1;
}

message VegaTimeResponse {
  int64 timestamp = 1;
}

message Pagination {
  uint64 skip = 1;
  uint64 limit = 2;
  bool descending = 3;
}

message OrdersStream {
  repeated vega.Order orders = 1;
}

message TradesStream {
  repeated vega.Trade trades = 1;
}