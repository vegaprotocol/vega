// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/oracles (interfaces: OracleDataBroadcaster)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	oracles "code.vegaprotocol.io/vega/core/oracles"
	gomock "github.com/golang/mock/gomock"
)

// MockOracleDataBroadcaster is a mock of OracleDataBroadcaster interface.
type MockOracleDataBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockOracleDataBroadcasterMockRecorder
}

// MockOracleDataBroadcasterMockRecorder is the mock recorder for MockOracleDataBroadcaster.
type MockOracleDataBroadcasterMockRecorder struct {
	mock *MockOracleDataBroadcaster
}

// NewMockOracleDataBroadcaster creates a new mock instance.
func NewMockOracleDataBroadcaster(ctrl *gomock.Controller) *MockOracleDataBroadcaster {
	mock := &MockOracleDataBroadcaster{ctrl: ctrl}
	mock.recorder = &MockOracleDataBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOracleDataBroadcaster) EXPECT() *MockOracleDataBroadcasterMockRecorder {
	return m.recorder
}

// BroadcastData mocks base method.
func (m *MockOracleDataBroadcaster) BroadcastData(arg0 context.Context, arg1 oracles.OracleData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastData indicates an expected call of BroadcastData.
func (mr *MockOracleDataBroadcasterMockRecorder) BroadcastData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastData", reflect.TypeOf((*MockOracleDataBroadcaster)(nil).BroadcastData), arg0, arg1)
}
