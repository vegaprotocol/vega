// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/matching (interfaces: OffbookSource)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "code.vegaprotocol.io/vega/core/types"
	num "code.vegaprotocol.io/vega/libs/num"
	gomock "github.com/golang/mock/gomock"
)

// MockOffbookSource is a mock of OffbookSource interface.
type MockOffbookSource struct {
	ctrl     *gomock.Controller
	recorder *MockOffbookSourceMockRecorder
}

// MockOffbookSourceMockRecorder is the mock recorder for MockOffbookSource.
type MockOffbookSourceMockRecorder struct {
	mock *MockOffbookSource
}

// NewMockOffbookSource creates a new mock instance.
func NewMockOffbookSource(ctrl *gomock.Controller) *MockOffbookSource {
	mock := &MockOffbookSource{ctrl: ctrl}
	mock.recorder = &MockOffbookSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOffbookSource) EXPECT() *MockOffbookSourceMockRecorder {
	return m.recorder
}

// BestPricesAndVolumes mocks base method.
func (m *MockOffbookSource) BestPricesAndVolumes() (*num.Uint, uint64, *num.Uint, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BestPricesAndVolumes")
	ret0, _ := ret[0].(*num.Uint)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(*num.Uint)
	ret3, _ := ret[3].(uint64)
	return ret0, ret1, ret2, ret3
}

// BestPricesAndVolumes indicates an expected call of BestPricesAndVolumes.
func (mr *MockOffbookSourceMockRecorder) BestPricesAndVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BestPricesAndVolumes", reflect.TypeOf((*MockOffbookSource)(nil).BestPricesAndVolumes))
}

// NotifyFinished mocks base method.
func (m *MockOffbookSource) NotifyFinished() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyFinished")
}

// NotifyFinished indicates an expected call of NotifyFinished.
func (mr *MockOffbookSourceMockRecorder) NotifyFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyFinished", reflect.TypeOf((*MockOffbookSource)(nil).NotifyFinished))
}

// SubmitOrder mocks base method.
func (m *MockOffbookSource) SubmitOrder(arg0 *types.Order, arg1, arg2 *num.Uint) []*types.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*types.Order)
	return ret0
}

// SubmitOrder indicates an expected call of SubmitOrder.
func (mr *MockOffbookSourceMockRecorder) SubmitOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOrder", reflect.TypeOf((*MockOffbookSource)(nil).SubmitOrder), arg0, arg1, arg2)
}
