// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import datastore "vega/datastore"
import filters "vega/filters"
import mock "github.com/stretchr/testify/mock"
import msg "vega/msg"

// TradeStore is an autogenerated mock type for the TradeStore type
type TradeStore struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *TradeStore) Close() {
	_m.Called()
}

// Commit provides a mock function with given fields:
func (_m *TradeStore) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: trade
func (_m *TradeStore) Delete(trade *msg.Trade) error {
	ret := _m.Called(trade)

	var r0 error
	if rf, ok := ret.Get(0).(func(*msg.Trade) error); ok {
		r0 = rf(trade)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByMarket provides a mock function with given fields: market, params
func (_m *TradeStore) GetByMarket(market string, params *filters.TradeQueryFilters) ([]*msg.Trade, error) {
	ret := _m.Called(market, params)

	var r0 []*msg.Trade
	if rf, ok := ret.Get(0).(func(string, *filters.TradeQueryFilters) []*msg.Trade); ok {
		r0 = rf(market, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *filters.TradeQueryFilters) error); ok {
		r1 = rf(market, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMarketAndId provides a mock function with given fields: market, id
func (_m *TradeStore) GetByMarketAndId(market string, id string) (*msg.Trade, error) {
	ret := _m.Called(market, id)

	var r0 *msg.Trade
	if rf, ok := ret.Get(0).(func(string, string) *msg.Trade); ok {
		r0 = rf(market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMarketAndOrderId provides a mock function with given fields: market, orderId
func (_m *TradeStore) GetByMarketAndOrderId(market string, orderId string) ([]*msg.Trade, error) {
	ret := _m.Called(market, orderId)

	var r0 []*msg.Trade
	if rf, ok := ret.Get(0).(func(string, string) []*msg.Trade); ok {
		r0 = rf(market, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(market, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByParty provides a mock function with given fields: party, params
func (_m *TradeStore) GetByParty(party string, params *filters.TradeQueryFilters) ([]*msg.Trade, error) {
	ret := _m.Called(party, params)

	var r0 []*msg.Trade
	if rf, ok := ret.Get(0).(func(string, *filters.TradeQueryFilters) []*msg.Trade); ok {
		r0 = rf(party, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *filters.TradeQueryFilters) error); ok {
		r1 = rf(party, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPartyAndId provides a mock function with given fields: party, id
func (_m *TradeStore) GetByPartyAndId(party string, id string) (*msg.Trade, error) {
	ret := _m.Called(party, id)

	var r0 *msg.Trade
	if rf, ok := ret.Get(0).(func(string, string) *msg.Trade); ok {
		r0 = rf(party, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(party, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandle provides a mock function with given fields: market, sinceBlock, currentBlock
func (_m *TradeStore) GetCandle(market string, sinceBlock uint64, currentBlock uint64) (*msg.Candle, error) {
	ret := _m.Called(market, sinceBlock, currentBlock)

	var r0 *msg.Candle
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) *msg.Candle); ok {
		r0 = rf(market, sinceBlock, currentBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Candle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, uint64) error); ok {
		r1 = rf(market, sinceBlock, currentBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandles provides a mock function with given fields: market, sinceBlock, currentBlock, interval
func (_m *TradeStore) GetCandles(market string, sinceBlock uint64, currentBlock uint64, interval uint64) ([]*msg.Candle, error) {
	ret := _m.Called(market, sinceBlock, currentBlock, interval)

	var r0 []*msg.Candle
	if rf, ok := ret.Get(0).(func(string, uint64, uint64, uint64) []*msg.Candle); ok {
		r0 = rf(market, sinceBlock, currentBlock, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Candle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, uint64, uint64) error); ok {
		r1 = rf(market, sinceBlock, currentBlock, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkPrice provides a mock function with given fields: market
func (_m *TradeStore) GetMarkPrice(market string) (uint64, error) {
	ret := _m.Called(market)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(market)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(market)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradesBySideBuckets provides a mock function with given fields: party
func (_m *TradeStore) GetTradesBySideBuckets(party string) map[string]*datastore.MarketBucket {
	ret := _m.Called(party)

	var r0 map[string]*datastore.MarketBucket
	if rf, ok := ret.Get(0).(func(string) map[string]*datastore.MarketBucket); ok {
		r0 = rf(party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*datastore.MarketBucket)
		}
	}

	return r0
}

// Notify provides a mock function with given fields: items
func (_m *TradeStore) Notify(items []msg.Trade) error {
	ret := _m.Called(items)

	var r0 error
	if rf, ok := ret.Get(0).(func([]msg.Trade) error); ok {
		r0 = rf(items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Post provides a mock function with given fields: trade
func (_m *TradeStore) Post(trade *msg.Trade) error {
	ret := _m.Called(trade)

	var r0 error
	if rf, ok := ret.Get(0).(func(*msg.Trade) error); ok {
		r0 = rf(trade)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostBatch provides a mock function with given fields: batch
func (_m *TradeStore) PostBatch(batch []msg.Trade) error {
	ret := _m.Called(batch)

	var r0 error
	if rf, ok := ret.Get(0).(func([]msg.Trade) error); ok {
		r0 = rf(batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: trades
func (_m *TradeStore) Subscribe(trades chan<- []msg.Trade) uint64 {
	ret := _m.Called(trades)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(chan<- []msg.Trade) uint64); ok {
		r0 = rf(trades)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: id
func (_m *TradeStore) Unsubscribe(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
