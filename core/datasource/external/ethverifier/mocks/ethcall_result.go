// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/datasource/external/ethverifier (interfaces: Result)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResult is a mock of Result interface.
type MockResult struct {
	ctrl     *gomock.Controller
	recorder *MockResultMockRecorder
}

// MockResultMockRecorder is the mock recorder for MockResult.
type MockResultMockRecorder struct {
	mock *MockResult
}

// NewMockResult creates a new mock instance.
func NewMockResult(ctrl *gomock.Controller) *MockResult {
	mock := &MockResult{ctrl: ctrl}
	mock.recorder = &MockResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResult) EXPECT() *MockResultMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockResult) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockResultMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockResult)(nil).Bytes))
}

// HasRequiredConfirmations mocks base method.
func (m *MockResult) HasRequiredConfirmations() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRequiredConfirmations")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRequiredConfirmations indicates an expected call of HasRequiredConfirmations.
func (mr *MockResultMockRecorder) HasRequiredConfirmations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRequiredConfirmations", reflect.TypeOf((*MockResult)(nil).HasRequiredConfirmations))
}

// Normalised mocks base method.
func (m *MockResult) Normalised() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Normalised")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Normalised indicates an expected call of Normalised.
func (mr *MockResultMockRecorder) Normalised() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normalised", reflect.TypeOf((*MockResult)(nil).Normalised))
}

// PassesFilters mocks base method.
func (m *MockResult) PassesFilters() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PassesFilters")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PassesFilters indicates an expected call of PassesFilters.
func (mr *MockResultMockRecorder) PassesFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassesFilters", reflect.TypeOf((*MockResult)(nil).PassesFilters))
}

// Values mocks base method.
func (m *MockResult) Values() ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Values indicates an expected call of Values.
func (mr *MockResultMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockResult)(nil).Values))
}
