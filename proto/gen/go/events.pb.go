// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: events.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An (event) bus event type is used to specify a type of event
// It has 2 styles of event:
// Single values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item
// Group values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items
type BusEventType int32

const (
	// Default value, always invalid
	BusEventType_BUS_EVENT_TYPE_UNSPECIFIED BusEventType = 0
	// Events of ALL event types, used when filtering stream from event bus
	BusEventType_BUS_EVENT_TYPE_ALL BusEventType = 1
	// Event for blockchain time updates
	BusEventType_BUS_EVENT_TYPE_TIME_UPDATE BusEventType = 2
	// Event for when a transfer happens internally, contains the transfer information
	BusEventType_BUS_EVENT_TYPE_TRANSFER_RESPONSES BusEventType = 3
	// Event indicating position resolution has occurred
	BusEventType_BUS_EVENT_TYPE_POSITION_RESOLUTION BusEventType = 4
	// Event for order updates, both new and existing orders
	BusEventType_BUS_EVENT_TYPE_ORDER BusEventType = 5
	// Event for account updates
	BusEventType_BUS_EVENT_TYPE_ACCOUNT BusEventType = 6
	// Event for party updates
	BusEventType_BUS_EVENT_TYPE_PARTY BusEventType = 7
	// Event indicating a new trade has occurred
	BusEventType_BUS_EVENT_TYPE_TRADE BusEventType = 8
	// Event indicating margin levels have changed for a party
	BusEventType_BUS_EVENT_TYPE_MARGIN_LEVELS BusEventType = 9
	// Event for proposal updates (for governance)
	BusEventType_BUS_EVENT_TYPE_PROPOSAL BusEventType = 10
	// Event indicating a new vote has occurred (for governance)
	BusEventType_BUS_EVENT_TYPE_VOTE BusEventType = 11
	// Event for market data updates
	BusEventType_BUS_EVENT_TYPE_MARKET_DATA BusEventType = 12
	// Event for a new signature for a Vega node
	BusEventType_BUS_EVENT_TYPE_NODE_SIGNATURE BusEventType = 13
	// Event indicating loss socialisation occurred for a party
	BusEventType_BUS_EVENT_TYPE_LOSS_SOCIALIZATION BusEventType = 14
	// Event for when a position is being settled
	BusEventType_BUS_EVENT_TYPE_SETTLE_POSITION BusEventType = 15
	// Event for when a position is distressed
	BusEventType_BUS_EVENT_TYPE_SETTLE_DISTRESSED BusEventType = 16
	// Event indicating a new market was created
	BusEventType_BUS_EVENT_TYPE_MARKET_CREATED BusEventType = 17
	// Event for when an asset is added to Vega
	BusEventType_BUS_EVENT_TYPE_ASSET BusEventType = 18
	// Event indicating a market tick event
	BusEventType_BUS_EVENT_TYPE_MARKET_TICK BusEventType = 19
	// Event for when a withdrawal occurs
	BusEventType_BUS_EVENT_TYPE_WITHDRAWAL BusEventType = 20
	// Event for when a deposit occurs
	BusEventType_BUS_EVENT_TYPE_DEPOSIT BusEventType = 21
	// Event indicating a change in auction state, for example starting or ending an auction
	BusEventType_BUS_EVENT_TYPE_AUCTION BusEventType = 22
	// Event indicating a risk factor has been updated
	BusEventType_BUS_EVENT_TYPE_RISK_FACTOR BusEventType = 23
	// Event indicating a network parameter has been added or updated
	BusEventType_BUS_EVENT_TYPE_NETWORK_PARAMETER BusEventType = 24
	// Event indicating a liquidity provision has been created or updated
	BusEventType_BUS_EVENT_TYPE_LIQUIDITY_PROVISION BusEventType = 25
	// Event indicating a market related event, for example when a market opens
	BusEventType_BUS_EVENT_TYPE_MARKET BusEventType = 101
	// Event used to report failed transactions back to a user - excluded from the ALL type
	BusEventType_BUS_EVENT_TYPE_TX_ERROR BusEventType = 201
)

// Enum value maps for BusEventType.
var (
	BusEventType_name = map[int32]string{
		0:   "BUS_EVENT_TYPE_UNSPECIFIED",
		1:   "BUS_EVENT_TYPE_ALL",
		2:   "BUS_EVENT_TYPE_TIME_UPDATE",
		3:   "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
		4:   "BUS_EVENT_TYPE_POSITION_RESOLUTION",
		5:   "BUS_EVENT_TYPE_ORDER",
		6:   "BUS_EVENT_TYPE_ACCOUNT",
		7:   "BUS_EVENT_TYPE_PARTY",
		8:   "BUS_EVENT_TYPE_TRADE",
		9:   "BUS_EVENT_TYPE_MARGIN_LEVELS",
		10:  "BUS_EVENT_TYPE_PROPOSAL",
		11:  "BUS_EVENT_TYPE_VOTE",
		12:  "BUS_EVENT_TYPE_MARKET_DATA",
		13:  "BUS_EVENT_TYPE_NODE_SIGNATURE",
		14:  "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
		15:  "BUS_EVENT_TYPE_SETTLE_POSITION",
		16:  "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
		17:  "BUS_EVENT_TYPE_MARKET_CREATED",
		18:  "BUS_EVENT_TYPE_ASSET",
		19:  "BUS_EVENT_TYPE_MARKET_TICK",
		20:  "BUS_EVENT_TYPE_WITHDRAWAL",
		21:  "BUS_EVENT_TYPE_DEPOSIT",
		22:  "BUS_EVENT_TYPE_AUCTION",
		23:  "BUS_EVENT_TYPE_RISK_FACTOR",
		24:  "BUS_EVENT_TYPE_NETWORK_PARAMETER",
		25:  "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
		101: "BUS_EVENT_TYPE_MARKET",
		201: "BUS_EVENT_TYPE_TX_ERROR",
	}
	BusEventType_value = map[string]int32{
		"BUS_EVENT_TYPE_UNSPECIFIED":         0,
		"BUS_EVENT_TYPE_ALL":                 1,
		"BUS_EVENT_TYPE_TIME_UPDATE":         2,
		"BUS_EVENT_TYPE_TRANSFER_RESPONSES":  3,
		"BUS_EVENT_TYPE_POSITION_RESOLUTION": 4,
		"BUS_EVENT_TYPE_ORDER":               5,
		"BUS_EVENT_TYPE_ACCOUNT":             6,
		"BUS_EVENT_TYPE_PARTY":               7,
		"BUS_EVENT_TYPE_TRADE":               8,
		"BUS_EVENT_TYPE_MARGIN_LEVELS":       9,
		"BUS_EVENT_TYPE_PROPOSAL":            10,
		"BUS_EVENT_TYPE_VOTE":                11,
		"BUS_EVENT_TYPE_MARKET_DATA":         12,
		"BUS_EVENT_TYPE_NODE_SIGNATURE":      13,
		"BUS_EVENT_TYPE_LOSS_SOCIALIZATION":  14,
		"BUS_EVENT_TYPE_SETTLE_POSITION":     15,
		"BUS_EVENT_TYPE_SETTLE_DISTRESSED":   16,
		"BUS_EVENT_TYPE_MARKET_CREATED":      17,
		"BUS_EVENT_TYPE_ASSET":               18,
		"BUS_EVENT_TYPE_MARKET_TICK":         19,
		"BUS_EVENT_TYPE_WITHDRAWAL":          20,
		"BUS_EVENT_TYPE_DEPOSIT":             21,
		"BUS_EVENT_TYPE_AUCTION":             22,
		"BUS_EVENT_TYPE_RISK_FACTOR":         23,
		"BUS_EVENT_TYPE_NETWORK_PARAMETER":   24,
		"BUS_EVENT_TYPE_LIQUIDITY_PROVISION": 25,
		"BUS_EVENT_TYPE_MARKET":              101,
		"BUS_EVENT_TYPE_TX_ERROR":            201,
	}
)

func (x BusEventType) Enum() *BusEventType {
	p := new(BusEventType)
	*p = x
	return p
}

func (x BusEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_events_proto_enumTypes[0].Descriptor()
}

func (BusEventType) Type() protoreflect.EnumType {
	return &file_events_proto_enumTypes[0]
}

func (x BusEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusEventType.Descriptor instead.
func (BusEventType) EnumDescriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{0}
}

// MarketEvent - the common denominator for all market events
// interface has a method to return a string for logging
type MarketEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Payload is a unique information string.
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MarketEvent) Reset() {
	*x = MarketEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketEvent) ProtoMessage() {}

func (x *MarketEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketEvent.ProtoReflect.Descriptor instead.
func (*MarketEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{0}
}

func (x *MarketEvent) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *MarketEvent) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type TxErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the party who had a tx fail
	PartyID string `protobuf:"bytes,1,opt,name=PartyID,proto3" json:"PartyID,omitempty"`
	// error message describing what went wrong
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	// the transaction that failed
	//
	// Types that are assignable to Transaction:
	//	*TxErrorEvent_OrderSubmission
	//	*TxErrorEvent_OrderAmendment
	//	*TxErrorEvent_OrderCancellation
	//	*TxErrorEvent_Proposal
	//	*TxErrorEvent_Vote
	Transaction isTxErrorEvent_Transaction `protobuf_oneof:"transaction"`
}

func (x *TxErrorEvent) Reset() {
	*x = TxErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxErrorEvent) ProtoMessage() {}

func (x *TxErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxErrorEvent.ProtoReflect.Descriptor instead.
func (*TxErrorEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{1}
}

func (x *TxErrorEvent) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *TxErrorEvent) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (m *TxErrorEvent) GetTransaction() isTxErrorEvent_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *TxErrorEvent) GetOrderSubmission() *OrderSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderSubmission); ok {
		return x.OrderSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetOrderAmendment() *OrderAmendment {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderAmendment); ok {
		return x.OrderAmendment
	}
	return nil
}

func (x *TxErrorEvent) GetOrderCancellation() *OrderCancellation {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderCancellation); ok {
		return x.OrderCancellation
	}
	return nil
}

func (x *TxErrorEvent) GetProposal() *Proposal {
	if x, ok := x.GetTransaction().(*TxErrorEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *TxErrorEvent) GetVote() *Vote {
	if x, ok := x.GetTransaction().(*TxErrorEvent_Vote); ok {
		return x.Vote
	}
	return nil
}

type isTxErrorEvent_Transaction interface {
	isTxErrorEvent_Transaction()
}

type TxErrorEvent_OrderSubmission struct {
	OrderSubmission *OrderSubmission `protobuf:"bytes,101,opt,name=orderSubmission,proto3,oneof"`
}

type TxErrorEvent_OrderAmendment struct {
	OrderAmendment *OrderAmendment `protobuf:"bytes,102,opt,name=orderAmendment,proto3,oneof"`
}

type TxErrorEvent_OrderCancellation struct {
	OrderCancellation *OrderCancellation `protobuf:"bytes,103,opt,name=orderCancellation,proto3,oneof"`
}

type TxErrorEvent_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,104,opt,name=proposal,proto3,oneof"`
}

type TxErrorEvent_Vote struct {
	Vote *Vote `protobuf:"bytes,105,opt,name=vote,proto3,oneof"`
}

func (*TxErrorEvent_OrderSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OrderAmendment) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OrderCancellation) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_Proposal) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_Vote) isTxErrorEvent_Transaction() {}

// A time update event contains the latest time update from Vega blockchain
type TimeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp containing latest update from Vega blockchain aka Vega-time
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TimeUpdate) Reset() {
	*x = TimeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeUpdate) ProtoMessage() {}

func (x *TimeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeUpdate.ProtoReflect.Descriptor instead.
func (*TimeUpdate) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{2}
}

func (x *TimeUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// A transfer responses event contains a collection of transfer information
type TransferResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1 or more entries containing internal transfer information
	Responses []*TransferResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *TransferResponses) Reset() {
	*x = TransferResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponses) ProtoMessage() {}

func (x *TransferResponses) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponses.ProtoReflect.Descriptor instead.
func (*TransferResponses) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{3}
}

func (x *TransferResponses) GetResponses() []*TransferResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

// A position resolution event contains information on distressed trades
type PositionResolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Number of distressed traders
	Distressed int64 `protobuf:"varint,2,opt,name=distressed,proto3" json:"distressed,omitempty"`
	// Number of close outs
	Closed int64 `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	// Mark price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	MarkPrice uint64 `protobuf:"varint,4,opt,name=markPrice,proto3" json:"markPrice,omitempty"`
}

func (x *PositionResolution) Reset() {
	*x = PositionResolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionResolution) ProtoMessage() {}

func (x *PositionResolution) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionResolution.ProtoReflect.Descriptor instead.
func (*PositionResolution) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{4}
}

func (x *PositionResolution) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *PositionResolution) GetDistressed() int64 {
	if x != nil {
		return x.Distressed
	}
	return 0
}

func (x *PositionResolution) GetClosed() int64 {
	if x != nil {
		return x.Closed
	}
	return 0
}

func (x *PositionResolution) GetMarkPrice() uint64 {
	if x != nil {
		return x.MarkPrice
	}
	return 0
}

// A loss socialization event contains details on the amount of wins unable to be distributed
type LossSocialization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier (public key) for the event
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Amount distributed
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *LossSocialization) Reset() {
	*x = LossSocialization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LossSocialization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LossSocialization) ProtoMessage() {}

func (x *LossSocialization) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LossSocialization.ProtoReflect.Descriptor instead.
func (*LossSocialization) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{5}
}

func (x *LossSocialization) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *LossSocialization) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *LossSocialization) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// A trade settlement is part of the settle position event
type TradeSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of trade settlement
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Price of settlement as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *TradeSettlement) Reset() {
	*x = TradeSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSettlement) ProtoMessage() {}

func (x *TradeSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSettlement.ProtoReflect.Descriptor instead.
func (*TradeSettlement) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{6}
}

func (x *TradeSettlement) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TradeSettlement) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// A settle position event contains position settlement information for a party
type SettlePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier (public key) for the event
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Price of settlement as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// A collection of 1 or more trade settlements
	TradeSettlements []*TradeSettlement `protobuf:"bytes,4,rep,name=tradeSettlements,proto3" json:"tradeSettlements,omitempty"`
}

func (x *SettlePosition) Reset() {
	*x = SettlePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlePosition) ProtoMessage() {}

func (x *SettlePosition) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlePosition.ProtoReflect.Descriptor instead.
func (*SettlePosition) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{7}
}

func (x *SettlePosition) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *SettlePosition) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *SettlePosition) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SettlePosition) GetTradeSettlements() []*TradeSettlement {
	if x != nil {
		return x.TradeSettlements
	}
	return nil
}

// A settle distressed event contains information on distressed trading parties who are closed out
type SettleDistressed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier (public key) for the event
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Margin value as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Margin uint64 `protobuf:"varint,3,opt,name=margin,proto3" json:"margin,omitempty"`
	// Price as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *SettleDistressed) Reset() {
	*x = SettleDistressed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleDistressed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleDistressed) ProtoMessage() {}

func (x *SettleDistressed) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleDistressed.ProtoReflect.Descriptor instead.
func (*SettleDistressed) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{8}
}

func (x *SettleDistressed) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *SettleDistressed) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *SettleDistressed) GetMargin() uint64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *SettleDistressed) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// A market ticket event contains the time value for when a particular market was last processed on Vega
type MarketTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Timestamp containing latest update from Vega blockchain aka Vega-time
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *MarketTick) Reset() {
	*x = MarketTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTick) ProtoMessage() {}

func (x *MarketTick) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTick.ProtoReflect.Descriptor instead.
func (*MarketTick) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{9}
}

func (x *MarketTick) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MarketTick) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// An auction event indicating a change in auction state, for example starting or ending an auction
type AuctionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the event
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// True if the event indicates an auction opening and False otherwise
	OpeningAuction bool `protobuf:"varint,2,opt,name=openingAuction,proto3" json:"openingAuction,omitempty"`
	// True if the event indicates leaving auction mode and False otherwise
	Leave bool `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	// Timestamp containing the start time for an auction
	Start int64 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	// Timestamp containing the end time for an auction
	End int64 `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	// the reason this market is/was in auction
	Trigger AuctionTrigger `protobuf:"varint,6,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
}

func (x *AuctionEvent) Reset() {
	*x = AuctionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionEvent) ProtoMessage() {}

func (x *AuctionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionEvent.ProtoReflect.Descriptor instead.
func (*AuctionEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{10}
}

func (x *AuctionEvent) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *AuctionEvent) GetOpeningAuction() bool {
	if x != nil {
		return x.OpeningAuction
	}
	return false
}

func (x *AuctionEvent) GetLeave() bool {
	if x != nil {
		return x.Leave
	}
	return false
}

func (x *AuctionEvent) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *AuctionEvent) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *AuctionEvent) GetTrigger() AuctionTrigger {
	if x != nil {
		return x.Trigger
	}
	return AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

// A bus event is a container for event bus events emitted by Vega
type BusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique event identifier for the message
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// The batch (or block) of transactions that the events relate to
	Block string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	// The type of bus event (one of the list below)
	Type BusEventType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.BusEventType" json:"type,omitempty"`
	// Types that are assignable to Event:
	//	*BusEvent_TimeUpdate
	//	*BusEvent_TransferResponses
	//	*BusEvent_PositionResolution
	//	*BusEvent_Order
	//	*BusEvent_Account
	//	*BusEvent_Party
	//	*BusEvent_Trade
	//	*BusEvent_MarginLevels
	//	*BusEvent_Proposal
	//	*BusEvent_Vote
	//	*BusEvent_MarketData
	//	*BusEvent_NodeSignature
	//	*BusEvent_LossSocialization
	//	*BusEvent_SettlePosition
	//	*BusEvent_SettleDistressed
	//	*BusEvent_MarketCreated
	//	*BusEvent_Asset
	//	*BusEvent_MarketTick
	//	*BusEvent_Withdrawal
	//	*BusEvent_Deposit
	//	*BusEvent_Auction
	//	*BusEvent_RiskFactor
	//	*BusEvent_NetworkParameter
	//	*BusEvent_LiquidityProvision
	//	*BusEvent_Market
	//	*BusEvent_TxErrEvent
	Event isBusEvent_Event `protobuf_oneof:"event"`
}

func (x *BusEvent) Reset() {
	*x = BusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusEvent) ProtoMessage() {}

func (x *BusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusEvent.ProtoReflect.Descriptor instead.
func (*BusEvent) Descriptor() ([]byte, []int) {
	return file_events_proto_rawDescGZIP(), []int{11}
}

func (x *BusEvent) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BusEvent) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *BusEvent) GetType() BusEventType {
	if x != nil {
		return x.Type
	}
	return BusEventType_BUS_EVENT_TYPE_UNSPECIFIED
}

func (m *BusEvent) GetEvent() isBusEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *BusEvent) GetTimeUpdate() *TimeUpdate {
	if x, ok := x.GetEvent().(*BusEvent_TimeUpdate); ok {
		return x.TimeUpdate
	}
	return nil
}

func (x *BusEvent) GetTransferResponses() *TransferResponses {
	if x, ok := x.GetEvent().(*BusEvent_TransferResponses); ok {
		return x.TransferResponses
	}
	return nil
}

func (x *BusEvent) GetPositionResolution() *PositionResolution {
	if x, ok := x.GetEvent().(*BusEvent_PositionResolution); ok {
		return x.PositionResolution
	}
	return nil
}

func (x *BusEvent) GetOrder() *Order {
	if x, ok := x.GetEvent().(*BusEvent_Order); ok {
		return x.Order
	}
	return nil
}

func (x *BusEvent) GetAccount() *Account {
	if x, ok := x.GetEvent().(*BusEvent_Account); ok {
		return x.Account
	}
	return nil
}

func (x *BusEvent) GetParty() *Party {
	if x, ok := x.GetEvent().(*BusEvent_Party); ok {
		return x.Party
	}
	return nil
}

func (x *BusEvent) GetTrade() *Trade {
	if x, ok := x.GetEvent().(*BusEvent_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *BusEvent) GetMarginLevels() *MarginLevels {
	if x, ok := x.GetEvent().(*BusEvent_MarginLevels); ok {
		return x.MarginLevels
	}
	return nil
}

func (x *BusEvent) GetProposal() *Proposal {
	if x, ok := x.GetEvent().(*BusEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *BusEvent) GetVote() *Vote {
	if x, ok := x.GetEvent().(*BusEvent_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *BusEvent) GetMarketData() *MarketData {
	if x, ok := x.GetEvent().(*BusEvent_MarketData); ok {
		return x.MarketData
	}
	return nil
}

func (x *BusEvent) GetNodeSignature() *NodeSignature {
	if x, ok := x.GetEvent().(*BusEvent_NodeSignature); ok {
		return x.NodeSignature
	}
	return nil
}

func (x *BusEvent) GetLossSocialization() *LossSocialization {
	if x, ok := x.GetEvent().(*BusEvent_LossSocialization); ok {
		return x.LossSocialization
	}
	return nil
}

func (x *BusEvent) GetSettlePosition() *SettlePosition {
	if x, ok := x.GetEvent().(*BusEvent_SettlePosition); ok {
		return x.SettlePosition
	}
	return nil
}

func (x *BusEvent) GetSettleDistressed() *SettleDistressed {
	if x, ok := x.GetEvent().(*BusEvent_SettleDistressed); ok {
		return x.SettleDistressed
	}
	return nil
}

func (x *BusEvent) GetMarketCreated() *Market {
	if x, ok := x.GetEvent().(*BusEvent_MarketCreated); ok {
		return x.MarketCreated
	}
	return nil
}

func (x *BusEvent) GetAsset() *Asset {
	if x, ok := x.GetEvent().(*BusEvent_Asset); ok {
		return x.Asset
	}
	return nil
}

func (x *BusEvent) GetMarketTick() *MarketTick {
	if x, ok := x.GetEvent().(*BusEvent_MarketTick); ok {
		return x.MarketTick
	}
	return nil
}

func (x *BusEvent) GetWithdrawal() *Withdrawal {
	if x, ok := x.GetEvent().(*BusEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

func (x *BusEvent) GetDeposit() *Deposit {
	if x, ok := x.GetEvent().(*BusEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *BusEvent) GetAuction() *AuctionEvent {
	if x, ok := x.GetEvent().(*BusEvent_Auction); ok {
		return x.Auction
	}
	return nil
}

func (x *BusEvent) GetRiskFactor() *RiskFactor {
	if x, ok := x.GetEvent().(*BusEvent_RiskFactor); ok {
		return x.RiskFactor
	}
	return nil
}

func (x *BusEvent) GetNetworkParameter() *NetworkParameter {
	if x, ok := x.GetEvent().(*BusEvent_NetworkParameter); ok {
		return x.NetworkParameter
	}
	return nil
}

func (x *BusEvent) GetLiquidityProvision() *LiquidityProvision {
	if x, ok := x.GetEvent().(*BusEvent_LiquidityProvision); ok {
		return x.LiquidityProvision
	}
	return nil
}

func (x *BusEvent) GetMarket() *MarketEvent {
	if x, ok := x.GetEvent().(*BusEvent_Market); ok {
		return x.Market
	}
	return nil
}

func (x *BusEvent) GetTxErrEvent() *TxErrorEvent {
	if x, ok := x.GetEvent().(*BusEvent_TxErrEvent); ok {
		return x.TxErrEvent
	}
	return nil
}

type isBusEvent_Event interface {
	isBusEvent_Event()
}

type BusEvent_TimeUpdate struct {
	// Time update events, see [TimeUpdate](#vega.TimeUpdate)
	TimeUpdate *TimeUpdate `protobuf:"bytes,101,opt,name=timeUpdate,proto3,oneof"`
}

type BusEvent_TransferResponses struct {
	// Transfer responses update events, see [TransferResponses](#vega.TransferResponses)
	TransferResponses *TransferResponses `protobuf:"bytes,102,opt,name=transferResponses,proto3,oneof"`
}

type BusEvent_PositionResolution struct {
	// Position resolution events, see [PositionResolution](#vega.PositionResolution)
	PositionResolution *PositionResolution `protobuf:"bytes,103,opt,name=positionResolution,proto3,oneof"`
}

type BusEvent_Order struct {
	// Order events
	Order *Order `protobuf:"bytes,104,opt,name=order,proto3,oneof"`
}

type BusEvent_Account struct {
	// Account events
	Account *Account `protobuf:"bytes,105,opt,name=account,proto3,oneof"`
}

type BusEvent_Party struct {
	// Party events
	Party *Party `protobuf:"bytes,106,opt,name=party,proto3,oneof"`
}

type BusEvent_Trade struct {
	// Trade events
	Trade *Trade `protobuf:"bytes,107,opt,name=trade,proto3,oneof"`
}

type BusEvent_MarginLevels struct {
	// Margin level update events
	MarginLevels *MarginLevels `protobuf:"bytes,108,opt,name=marginLevels,proto3,oneof"`
}

type BusEvent_Proposal struct {
	// Proposal events (for governance)
	Proposal *Proposal `protobuf:"bytes,109,opt,name=proposal,proto3,oneof"`
}

type BusEvent_Vote struct {
	// Vote events (for governance)
	Vote *Vote `protobuf:"bytes,110,opt,name=vote,proto3,oneof"`
}

type BusEvent_MarketData struct {
	// Market data events
	MarketData *MarketData `protobuf:"bytes,111,opt,name=marketData,proto3,oneof"`
}

type BusEvent_NodeSignature struct {
	// Node signature events
	NodeSignature *NodeSignature `protobuf:"bytes,112,opt,name=nodeSignature,proto3,oneof"`
}

type BusEvent_LossSocialization struct {
	// Loss socialization events, see [LossSocialization](#vega.LossSocialization)
	LossSocialization *LossSocialization `protobuf:"bytes,113,opt,name=lossSocialization,proto3,oneof"`
}

type BusEvent_SettlePosition struct {
	// Position settlement events, see [SettlePosition](#vega.SettlePosition)
	SettlePosition *SettlePosition `protobuf:"bytes,114,opt,name=settlePosition,proto3,oneof"`
}

type BusEvent_SettleDistressed struct {
	// Position distressed events, see [SettleDistressed](#vega.SettleDistressed)
	SettleDistressed *SettleDistressed `protobuf:"bytes,115,opt,name=settleDistressed,proto3,oneof"`
}

type BusEvent_MarketCreated struct {
	// Market created events
	MarketCreated *Market `protobuf:"bytes,116,opt,name=marketCreated,proto3,oneof"`
}

type BusEvent_Asset struct {
	// Asset events
	Asset *Asset `protobuf:"bytes,117,opt,name=asset,proto3,oneof"`
}

type BusEvent_MarketTick struct {
	// Market tick events, see [MarketTick](#vega.MarketTick)
	MarketTick *MarketTick `protobuf:"bytes,118,opt,name=marketTick,proto3,oneof"`
}

type BusEvent_Withdrawal struct {
	// Withdrawal events
	Withdrawal *Withdrawal `protobuf:"bytes,119,opt,name=withdrawal,proto3,oneof"`
}

type BusEvent_Deposit struct {
	// Deposit events
	Deposit *Deposit `protobuf:"bytes,120,opt,name=deposit,proto3,oneof"`
}

type BusEvent_Auction struct {
	// Auction events, see [AuctionEvent](#vega.AuctionEvent)
	Auction *AuctionEvent `protobuf:"bytes,121,opt,name=auction,proto3,oneof"`
}

type BusEvent_RiskFactor struct {
	// Risk factor events
	RiskFactor *RiskFactor `protobuf:"bytes,122,opt,name=riskFactor,proto3,oneof"`
}

type BusEvent_NetworkParameter struct {
	// Network parameter events
	NetworkParameter *NetworkParameter `protobuf:"bytes,123,opt,name=networkParameter,proto3,oneof"`
}

type BusEvent_LiquidityProvision struct {
	// LiquidityProvision  events
	LiquidityProvision *LiquidityProvision `protobuf:"bytes,124,opt,name=liquidityProvision,proto3,oneof"`
}

type BusEvent_Market struct {
	// Market tick events, see [MarketEvent](#vega.MarketEvent)
	Market *MarketEvent `protobuf:"bytes,1001,opt,name=market,proto3,oneof"`
}

type BusEvent_TxErrEvent struct {
	// Transaction error events - separate category, not included in ALL events
	TxErrEvent *TxErrorEvent `protobuf:"bytes,2001,opt,name=txErrEvent,proto3,oneof"`
}

func (*BusEvent_TimeUpdate) isBusEvent_Event() {}

func (*BusEvent_TransferResponses) isBusEvent_Event() {}

func (*BusEvent_PositionResolution) isBusEvent_Event() {}

func (*BusEvent_Order) isBusEvent_Event() {}

func (*BusEvent_Account) isBusEvent_Event() {}

func (*BusEvent_Party) isBusEvent_Event() {}

func (*BusEvent_Trade) isBusEvent_Event() {}

func (*BusEvent_MarginLevels) isBusEvent_Event() {}

func (*BusEvent_Proposal) isBusEvent_Event() {}

func (*BusEvent_Vote) isBusEvent_Event() {}

func (*BusEvent_MarketData) isBusEvent_Event() {}

func (*BusEvent_NodeSignature) isBusEvent_Event() {}

func (*BusEvent_LossSocialization) isBusEvent_Event() {}

func (*BusEvent_SettlePosition) isBusEvent_Event() {}

func (*BusEvent_SettleDistressed) isBusEvent_Event() {}

func (*BusEvent_MarketCreated) isBusEvent_Event() {}

func (*BusEvent_Asset) isBusEvent_Event() {}

func (*BusEvent_MarketTick) isBusEvent_Event() {}

func (*BusEvent_Withdrawal) isBusEvent_Event() {}

func (*BusEvent_Deposit) isBusEvent_Event() {}

func (*BusEvent_Auction) isBusEvent_Event() {}

func (*BusEvent_RiskFactor) isBusEvent_Event() {}

func (*BusEvent_NetworkParameter) isBusEvent_Event() {}

func (*BusEvent_LiquidityProvision) isBusEvent_Event() {}

func (*BusEvent_Market) isBusEvent_Event() {}

func (*BusEvent_TxErrEvent) isBusEvent_Event() {}

var File_events_proto protoreflect.FileDescriptor

var file_events_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x76, 0x65, 0x67, 0x61, 0x1a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x43, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x0c, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x49,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x61, 0x0a, 0x11, 0x4c, 0x6f, 0x73, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x0a,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc0,
	0x01, 0x0a, 0x0c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x22, 0xd7, 0x0b, 0x0a, 0x08, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x47, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x6c, 0x6f,
	0x73, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x6f, 0x73,
	0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x11, 0x6c, 0x6f, 0x73, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x07,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x74,
	0x78, 0x45, 0x72, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x78, 0x45, 0x72, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0x86, 0x07, 0x0a, 0x0c,
	0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x59, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x08, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x10, 0x09, 0x12,
	0x1b, 0x0a, 0x17, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x4f, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x55, 0x53, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12,
	0x22, 0x0a, 0x1e, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x53, 0x53, 0x45, 0x54, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x54, 0x49, 0x43, 0x4b, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10,
	0x15, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x1e, 0x0a,
	0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x17, 0x12, 0x24, 0x0a,
	0x20, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xc9, 0x01, 0x42, 0x21, 0x5a, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67,
	0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_events_proto_rawDescOnce sync.Once
	file_events_proto_rawDescData = file_events_proto_rawDesc
)

func file_events_proto_rawDescGZIP() []byte {
	file_events_proto_rawDescOnce.Do(func() {
		file_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_events_proto_rawDescData)
	})
	return file_events_proto_rawDescData
}

var file_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_events_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_events_proto_goTypes = []interface{}{
	(BusEventType)(0),          // 0: vega.BusEventType
	(*MarketEvent)(nil),        // 1: vega.MarketEvent
	(*TxErrorEvent)(nil),       // 2: vega.TxErrorEvent
	(*TimeUpdate)(nil),         // 3: vega.TimeUpdate
	(*TransferResponses)(nil),  // 4: vega.TransferResponses
	(*PositionResolution)(nil), // 5: vega.PositionResolution
	(*LossSocialization)(nil),  // 6: vega.LossSocialization
	(*TradeSettlement)(nil),    // 7: vega.TradeSettlement
	(*SettlePosition)(nil),     // 8: vega.SettlePosition
	(*SettleDistressed)(nil),   // 9: vega.SettleDistressed
	(*MarketTick)(nil),         // 10: vega.MarketTick
	(*AuctionEvent)(nil),       // 11: vega.AuctionEvent
	(*BusEvent)(nil),           // 12: vega.BusEvent
	(*OrderSubmission)(nil),    // 13: vega.OrderSubmission
	(*OrderAmendment)(nil),     // 14: vega.OrderAmendment
	(*OrderCancellation)(nil),  // 15: vega.OrderCancellation
	(*Proposal)(nil),           // 16: vega.Proposal
	(*Vote)(nil),               // 17: vega.Vote
	(*TransferResponse)(nil),   // 18: vega.TransferResponse
	(AuctionTrigger)(0),        // 19: vega.AuctionTrigger
	(*Order)(nil),              // 20: vega.Order
	(*Account)(nil),            // 21: vega.Account
	(*Party)(nil),              // 22: vega.Party
	(*Trade)(nil),              // 23: vega.Trade
	(*MarginLevels)(nil),       // 24: vega.MarginLevels
	(*MarketData)(nil),         // 25: vega.MarketData
	(*NodeSignature)(nil),      // 26: vega.NodeSignature
	(*Market)(nil),             // 27: vega.Market
	(*Asset)(nil),              // 28: vega.Asset
	(*Withdrawal)(nil),         // 29: vega.Withdrawal
	(*Deposit)(nil),            // 30: vega.Deposit
	(*RiskFactor)(nil),         // 31: vega.RiskFactor
	(*NetworkParameter)(nil),   // 32: vega.NetworkParameter
	(*LiquidityProvision)(nil), // 33: vega.LiquidityProvision
}
var file_events_proto_depIdxs = []int32{
	13, // 0: vega.TxErrorEvent.orderSubmission:type_name -> vega.OrderSubmission
	14, // 1: vega.TxErrorEvent.orderAmendment:type_name -> vega.OrderAmendment
	15, // 2: vega.TxErrorEvent.orderCancellation:type_name -> vega.OrderCancellation
	16, // 3: vega.TxErrorEvent.proposal:type_name -> vega.Proposal
	17, // 4: vega.TxErrorEvent.vote:type_name -> vega.Vote
	18, // 5: vega.TransferResponses.responses:type_name -> vega.TransferResponse
	7,  // 6: vega.SettlePosition.tradeSettlements:type_name -> vega.TradeSettlement
	19, // 7: vega.AuctionEvent.trigger:type_name -> vega.AuctionTrigger
	0,  // 8: vega.BusEvent.type:type_name -> vega.BusEventType
	3,  // 9: vega.BusEvent.timeUpdate:type_name -> vega.TimeUpdate
	4,  // 10: vega.BusEvent.transferResponses:type_name -> vega.TransferResponses
	5,  // 11: vega.BusEvent.positionResolution:type_name -> vega.PositionResolution
	20, // 12: vega.BusEvent.order:type_name -> vega.Order
	21, // 13: vega.BusEvent.account:type_name -> vega.Account
	22, // 14: vega.BusEvent.party:type_name -> vega.Party
	23, // 15: vega.BusEvent.trade:type_name -> vega.Trade
	24, // 16: vega.BusEvent.marginLevels:type_name -> vega.MarginLevels
	16, // 17: vega.BusEvent.proposal:type_name -> vega.Proposal
	17, // 18: vega.BusEvent.vote:type_name -> vega.Vote
	25, // 19: vega.BusEvent.marketData:type_name -> vega.MarketData
	26, // 20: vega.BusEvent.nodeSignature:type_name -> vega.NodeSignature
	6,  // 21: vega.BusEvent.lossSocialization:type_name -> vega.LossSocialization
	8,  // 22: vega.BusEvent.settlePosition:type_name -> vega.SettlePosition
	9,  // 23: vega.BusEvent.settleDistressed:type_name -> vega.SettleDistressed
	27, // 24: vega.BusEvent.marketCreated:type_name -> vega.Market
	28, // 25: vega.BusEvent.asset:type_name -> vega.Asset
	10, // 26: vega.BusEvent.marketTick:type_name -> vega.MarketTick
	29, // 27: vega.BusEvent.withdrawal:type_name -> vega.Withdrawal
	30, // 28: vega.BusEvent.deposit:type_name -> vega.Deposit
	11, // 29: vega.BusEvent.auction:type_name -> vega.AuctionEvent
	31, // 30: vega.BusEvent.riskFactor:type_name -> vega.RiskFactor
	32, // 31: vega.BusEvent.networkParameter:type_name -> vega.NetworkParameter
	33, // 32: vega.BusEvent.liquidityProvision:type_name -> vega.LiquidityProvision
	1,  // 33: vega.BusEvent.market:type_name -> vega.MarketEvent
	2,  // 34: vega.BusEvent.txErrEvent:type_name -> vega.TxErrorEvent
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_events_proto_init() }
func file_events_proto_init() {
	if File_events_proto != nil {
		return
	}
	file_markets_proto_init()
	file_assets_proto_init()
	file_governance_proto_init()
	file_vega_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionResolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LossSocialization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleDistressed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_events_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TxErrorEvent_OrderSubmission)(nil),
		(*TxErrorEvent_OrderAmendment)(nil),
		(*TxErrorEvent_OrderCancellation)(nil),
		(*TxErrorEvent_Proposal)(nil),
		(*TxErrorEvent_Vote)(nil),
	}
	file_events_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*BusEvent_TimeUpdate)(nil),
		(*BusEvent_TransferResponses)(nil),
		(*BusEvent_PositionResolution)(nil),
		(*BusEvent_Order)(nil),
		(*BusEvent_Account)(nil),
		(*BusEvent_Party)(nil),
		(*BusEvent_Trade)(nil),
		(*BusEvent_MarginLevels)(nil),
		(*BusEvent_Proposal)(nil),
		(*BusEvent_Vote)(nil),
		(*BusEvent_MarketData)(nil),
		(*BusEvent_NodeSignature)(nil),
		(*BusEvent_LossSocialization)(nil),
		(*BusEvent_SettlePosition)(nil),
		(*BusEvent_SettleDistressed)(nil),
		(*BusEvent_MarketCreated)(nil),
		(*BusEvent_Asset)(nil),
		(*BusEvent_MarketTick)(nil),
		(*BusEvent_Withdrawal)(nil),
		(*BusEvent_Deposit)(nil),
		(*BusEvent_Auction)(nil),
		(*BusEvent_RiskFactor)(nil),
		(*BusEvent_NetworkParameter)(nil),
		(*BusEvent_LiquidityProvision)(nil),
		(*BusEvent_Market)(nil),
		(*BusEvent_TxErrEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_events_proto_goTypes,
		DependencyIndexes: file_events_proto_depIdxs,
		EnumInfos:         file_events_proto_enumTypes,
		MessageInfos:      file_events_proto_msgTypes,
	}.Build()
	File_events_proto = out.File
	file_events_proto_rawDesc = nil
	file_events_proto_goTypes = nil
	file_events_proto_depIdxs = nil
}
