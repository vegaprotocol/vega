// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: data-node/api/v2/dehistory.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeHistoryServiceClient is the client API for DeHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeHistoryServiceClient interface {
	// Get most recent decentralized history segment
	//
	// Get the networks most recently history segment
	GetMostRecentDeHistorySegment(ctx context.Context, in *GetMostRecentDeHistorySegmentRequest, opts ...grpc.CallOption) (*GetMostRecentDeHistorySegmentResponse, error)
	// List all decentralized history segments
	//
	// List all history segments stored by this node
	ListAllDeHistorySegments(ctx context.Context, in *ListAllDeHistorySegmentsRequest, opts ...grpc.CallOption) (*ListAllDeHistorySegmentsResponse, error)
	// Fetch decentralized history segment
	//
	// Fetch a history segment from another peer in the network
	FetchDeHistorySegment(ctx context.Context, in *FetchDeHistorySegmentRequest, opts ...grpc.CallOption) (*FetchDeHistorySegmentResponse, error)
	// Get active decentralized history peer addresses
	//
	// List the addresses of all active decentralized history peers
	GetActiveDeHistoryPeerAddresses(ctx context.Context, in *GetActiveDeHistoryPeerAddressesRequest, opts ...grpc.CallOption) (*GetActiveDeHistoryPeerAddressesResponse, error)
	// Copy history segment to file
	//
	// Copy history segment data to a target file
	CopyHistorySegmentToFile(ctx context.Context, in *CopyHistorySegmentToFileRequest, opts ...grpc.CallOption) (*CopyHistorySegmentToFileResponse, error)
}

type deHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeHistoryServiceClient(cc grpc.ClientConnInterface) DeHistoryServiceClient {
	return &deHistoryServiceClient{cc}
}

func (c *deHistoryServiceClient) GetMostRecentDeHistorySegment(ctx context.Context, in *GetMostRecentDeHistorySegmentRequest, opts ...grpc.CallOption) (*GetMostRecentDeHistorySegmentResponse, error) {
	out := new(GetMostRecentDeHistorySegmentResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.DeHistoryService/GetMostRecentDeHistorySegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deHistoryServiceClient) ListAllDeHistorySegments(ctx context.Context, in *ListAllDeHistorySegmentsRequest, opts ...grpc.CallOption) (*ListAllDeHistorySegmentsResponse, error) {
	out := new(ListAllDeHistorySegmentsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.DeHistoryService/ListAllDeHistorySegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deHistoryServiceClient) FetchDeHistorySegment(ctx context.Context, in *FetchDeHistorySegmentRequest, opts ...grpc.CallOption) (*FetchDeHistorySegmentResponse, error) {
	out := new(FetchDeHistorySegmentResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.DeHistoryService/FetchDeHistorySegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deHistoryServiceClient) GetActiveDeHistoryPeerAddresses(ctx context.Context, in *GetActiveDeHistoryPeerAddressesRequest, opts ...grpc.CallOption) (*GetActiveDeHistoryPeerAddressesResponse, error) {
	out := new(GetActiveDeHistoryPeerAddressesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.DeHistoryService/GetActiveDeHistoryPeerAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deHistoryServiceClient) CopyHistorySegmentToFile(ctx context.Context, in *CopyHistorySegmentToFileRequest, opts ...grpc.CallOption) (*CopyHistorySegmentToFileResponse, error) {
	out := new(CopyHistorySegmentToFileResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.DeHistoryService/CopyHistorySegmentToFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeHistoryServiceServer is the server API for DeHistoryService service.
// All implementations must embed UnimplementedDeHistoryServiceServer
// for forward compatibility
type DeHistoryServiceServer interface {
	// Get most recent decentralized history segment
	//
	// Get the networks most recently history segment
	GetMostRecentDeHistorySegment(context.Context, *GetMostRecentDeHistorySegmentRequest) (*GetMostRecentDeHistorySegmentResponse, error)
	// List all decentralized history segments
	//
	// List all history segments stored by this node
	ListAllDeHistorySegments(context.Context, *ListAllDeHistorySegmentsRequest) (*ListAllDeHistorySegmentsResponse, error)
	// Fetch decentralized history segment
	//
	// Fetch a history segment from another peer in the network
	FetchDeHistorySegment(context.Context, *FetchDeHistorySegmentRequest) (*FetchDeHistorySegmentResponse, error)
	// Get active decentralized history peer addresses
	//
	// List the addresses of all active decentralized history peers
	GetActiveDeHistoryPeerAddresses(context.Context, *GetActiveDeHistoryPeerAddressesRequest) (*GetActiveDeHistoryPeerAddressesResponse, error)
	// Copy history segment to file
	//
	// Copy history segment data to a target file
	CopyHistorySegmentToFile(context.Context, *CopyHistorySegmentToFileRequest) (*CopyHistorySegmentToFileResponse, error)
	mustEmbedUnimplementedDeHistoryServiceServer()
}

// UnimplementedDeHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeHistoryServiceServer struct {
}

func (UnimplementedDeHistoryServiceServer) GetMostRecentDeHistorySegment(context.Context, *GetMostRecentDeHistorySegmentRequest) (*GetMostRecentDeHistorySegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostRecentDeHistorySegment not implemented")
}
func (UnimplementedDeHistoryServiceServer) ListAllDeHistorySegments(context.Context, *ListAllDeHistorySegmentsRequest) (*ListAllDeHistorySegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllDeHistorySegments not implemented")
}
func (UnimplementedDeHistoryServiceServer) FetchDeHistorySegment(context.Context, *FetchDeHistorySegmentRequest) (*FetchDeHistorySegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDeHistorySegment not implemented")
}
func (UnimplementedDeHistoryServiceServer) GetActiveDeHistoryPeerAddresses(context.Context, *GetActiveDeHistoryPeerAddressesRequest) (*GetActiveDeHistoryPeerAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveDeHistoryPeerAddresses not implemented")
}
func (UnimplementedDeHistoryServiceServer) CopyHistorySegmentToFile(context.Context, *CopyHistorySegmentToFileRequest) (*CopyHistorySegmentToFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyHistorySegmentToFile not implemented")
}
func (UnimplementedDeHistoryServiceServer) mustEmbedUnimplementedDeHistoryServiceServer() {}

// UnsafeDeHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeHistoryServiceServer will
// result in compilation errors.
type UnsafeDeHistoryServiceServer interface {
	mustEmbedUnimplementedDeHistoryServiceServer()
}

func RegisterDeHistoryServiceServer(s grpc.ServiceRegistrar, srv DeHistoryServiceServer) {
	s.RegisterService(&DeHistoryService_ServiceDesc, srv)
}

func _DeHistoryService_GetMostRecentDeHistorySegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMostRecentDeHistorySegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeHistoryServiceServer).GetMostRecentDeHistorySegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.DeHistoryService/GetMostRecentDeHistorySegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeHistoryServiceServer).GetMostRecentDeHistorySegment(ctx, req.(*GetMostRecentDeHistorySegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeHistoryService_ListAllDeHistorySegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllDeHistorySegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeHistoryServiceServer).ListAllDeHistorySegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.DeHistoryService/ListAllDeHistorySegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeHistoryServiceServer).ListAllDeHistorySegments(ctx, req.(*ListAllDeHistorySegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeHistoryService_FetchDeHistorySegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDeHistorySegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeHistoryServiceServer).FetchDeHistorySegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.DeHistoryService/FetchDeHistorySegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeHistoryServiceServer).FetchDeHistorySegment(ctx, req.(*FetchDeHistorySegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeHistoryService_GetActiveDeHistoryPeerAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveDeHistoryPeerAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeHistoryServiceServer).GetActiveDeHistoryPeerAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.DeHistoryService/GetActiveDeHistoryPeerAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeHistoryServiceServer).GetActiveDeHistoryPeerAddresses(ctx, req.(*GetActiveDeHistoryPeerAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeHistoryService_CopyHistorySegmentToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyHistorySegmentToFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeHistoryServiceServer).CopyHistorySegmentToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.DeHistoryService/CopyHistorySegmentToFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeHistoryServiceServer).CopyHistorySegmentToFile(ctx, req.(*CopyHistorySegmentToFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeHistoryService_ServiceDesc is the grpc.ServiceDesc for DeHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.api.v2.DeHistoryService",
	HandlerType: (*DeHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMostRecentDeHistorySegment",
			Handler:    _DeHistoryService_GetMostRecentDeHistorySegment_Handler,
		},
		{
			MethodName: "ListAllDeHistorySegments",
			Handler:    _DeHistoryService_ListAllDeHistorySegments_Handler,
		},
		{
			MethodName: "FetchDeHistorySegment",
			Handler:    _DeHistoryService_FetchDeHistorySegment_Handler,
		},
		{
			MethodName: "GetActiveDeHistoryPeerAddresses",
			Handler:    _DeHistoryService_GetActiveDeHistoryPeerAddresses_Handler,
		},
		{
			MethodName: "CopyHistorySegmentToFile",
			Handler:    _DeHistoryService_CopyHistorySegmentToFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data-node/api/v2/dehistory.proto",
}
