syntax = "proto3";

package vega.commands.v1;

import "vega/commands/v1/commands.proto";
import "vega/commands/v1/data.proto";
import "vega/commands/v1/signature.proto";
import "vega/commands/v1/validator_commands.proto";

option go_package = "code.vegaprotocol.io/vega/protos/vega/commands/v1";

// Input data for a transaction containing a network command for the Vega network to execute.
// Once populated the protobuf message should be marshalled into a byte array and included in a transaction message.
message InputData {
  // This was the old restore checkpoint command
  reserved 4001;
  // Arbitrary number used to provide uniqueness to the signature of two otherwise identical input data, preventing replay attacks.
  // Must be set to a different value for all new transactions sent by a party. It is advised to generate this number randomly.
  uint64 nonce = 1;
  // Block height which has been used to calculate the transaction proof-of-work.
  uint64 block_height = 2;

  oneof command {
    // Command to submit an order.
    OrderSubmission order_submission = 1001;
    // Command to cancel an order.
    OrderCancellation order_cancellation = 1002;
    // Command to amend an order.
    OrderAmendment order_amendment = 1003;
    // Command to submit a withdrawal.
    WithdrawSubmission withdraw_submission = 1004;
    // Command to submit a governance proposal.
    ProposalSubmission proposal_submission = 1005;
    // Command to submit a vote on a governance proposal.
    VoteSubmission vote_submission = 1006;
    // Command to submit a liquidity commitment.
    LiquidityProvisionSubmission liquidity_provision_submission = 1007;
    // Command to delegate tokens to a validator.
    DelegateSubmission delegate_submission = 1008;
    // Command to remove tokens delegated to a validator.
    UndelegateSubmission undelegate_submission = 1009;
    // Command to cancel a liquidity commitment.
    LiquidityProvisionCancellation liquidity_provision_cancellation = 1010;
    // Command to amend a liquidity commitment.
    LiquidityProvisionAmendment liquidity_provision_amendment = 1011;
    // Command to submit a transfer.
    Transfer transfer = 1012;
    // Command to cancel a recurring transfer.
    CancelTransfer cancel_transfer = 1013;
    // Command used by a node operator to announce its node as a pending validator.
    AnnounceNode announce_node = 1014;
    // Command to submit a batch of order instructions.
    BatchMarketInstructions batch_market_instructions = 1015;
    // Command to submit a pair of stop orders.
    StopOrdersSubmission stop_orders_submission = 1016;
    // Command to cancel stop orders.
    StopOrdersCancellation stop_orders_cancellation = 1017;
    // Command to create a referral set.
    CreateReferralSet create_referral_set = 1018;
    // Command to update a referral set.
    UpdateReferralSet update_referral_set = 1019;
    // Command to apply a referral code.
    ApplyReferralCode apply_referral_code = 1020;
    // Command to update the margin mode of a party in a market.
    UpdateMarginMode update_margin_mode = 1021;
    // Command to join a team.
    JoinTeam join_team = 1022;
    // Command to submit a batch governance proposal.
    BatchProposalSubmission batch_proposal_submission = 1023;
    // Command to update a party's profile.
    UpdatePartyProfile update_party_profile = 1024;
    // Command to submit an AMM pool to a market
    SubmitAMM submit_amm = 1025;
    // Command to amend an AMM pool on a market
    AmendAMM amend_amm = 1026;
    // Command to cancel an AMM pool on a market
    CancelAMM cancel_amm = 1027;

    // Validator command sent automatically to vote on that validity of an external resource.
    NodeVote node_vote = 2002;
    // Validator command sent automatically to provide signatures for the Ethereum bridge.
    NodeSignature node_signature = 2003;
    // Validator command sent automatically to notify the Vega chain of an off-chain event.
    ChainEvent chain_event = 2004;
    // Validator command sent manually by a node operator to rotate their node's Vega keys.
    KeyRotateSubmission key_rotate_submission = 2005;
    // Validator command sent automatically to reach consensus on floating point values.
    StateVariableProposal state_variable_proposal = 2006;
    // Validator command sent automatically to signal regular participation in the network.
    ValidatorHeartbeat validator_heartbeat = 2007;
    // Validator command sent manually by a node operator to rotate their node's Ethereum keys.
    EthereumKeyRotateSubmission ethereum_key_rotate_submission = 2008;
    // Validator command sent manually to propose a protocol upgrade.
    ProtocolUpgradeProposal protocol_upgrade_proposal = 2009;
    // Command to request signatures to amend the multisig-control contract.
    IssueSignatures issue_signatures = 2010;
    // Command to submit external oracle data.
    OracleDataSubmission oracle_data_submission = 3001;
  }
}

// Transaction versions to maintain backwards compatibility of transaction formats.
enum TxVersion {
  reserved 1;
  // Transaction version is unspecified.
  TX_VERSION_UNSPECIFIED = 0;
  // Transaction requires the addition of a proof-of-work calculation.
  TX_VERSION_V2 = 2;
  // Transaction input data contains a prepended chain ID to prevent use of a single transaction across multiple networks.
  TX_VERSION_V3 = 3;
}

// Transaction containing a command that can be sent to instruct the network to execute an action.
// A transaction contains a byte string representation of the input data which must then be signed, with the signature added to the transaction.
message Transaction {
  // Protobuf message of type `InputData` marshalled into bytes. If the transaction version is V3 or higher then this bytes
  // string must be prepended with `chain_id_as_byes + \0`.
  bytes input_data = 1;
  // Signature of the input data field, signed by the sender of this transaction.
  Signature signature = 2;
  // Sender of the transaction.
  oneof from {
    // Hex-encoded address of the sender. Not supported yet.
    string address = 1001;
    // Hex-encoded public key of the sender.
    string pub_key = 1002;
  }
  // Version of the transaction.
  TxVersion version = 2000;
  // Proof-of-work containing the random transaction ID used by the client and the nonce.
  ProofOfWork pow = 3000;
}

// Components needed for the network to verify proof-of-work.
message ProofOfWork {
  // Unique transaction identifier used to seed the proof-of-work hash.
  string tid = 1;
  // Number which, combined with the transaction identifier, will produce a hash with the required number of leading zeros to be accepted by the network.
  uint64 nonce = 2;
}
