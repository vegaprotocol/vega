// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/execution (interfaces: PartyBuf)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPartyBuf is a mock of PartyBuf interface
type MockPartyBuf struct {
	ctrl     *gomock.Controller
	recorder *MockPartyBufMockRecorder
}

// MockPartyBufMockRecorder is the mock recorder for MockPartyBuf
type MockPartyBufMockRecorder struct {
	mock *MockPartyBuf
}

// NewMockPartyBuf creates a new mock instance
func NewMockPartyBuf(ctrl *gomock.Controller) *MockPartyBuf {
	mock := &MockPartyBuf{ctrl: ctrl}
	mock.recorder = &MockPartyBufMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPartyBuf) EXPECT() *MockPartyBufMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockPartyBuf) Add(arg0 proto.Party) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add
func (mr *MockPartyBufMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPartyBuf)(nil).Add), arg0)
}

// Flush mocks base method
func (m *MockPartyBuf) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockPartyBufMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockPartyBuf)(nil).Flush))
}
