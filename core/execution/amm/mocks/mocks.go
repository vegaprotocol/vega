// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/execution/amm (interfaces: Collateral,Position,Market,Risk)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	events "code.vegaprotocol.io/vega/core/events"
	common "code.vegaprotocol.io/vega/core/execution/common"
	types "code.vegaprotocol.io/vega/core/types"
	num "code.vegaprotocol.io/vega/libs/num"
	vega "code.vegaprotocol.io/vega/protos/vega"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockCollateral is a mock of Collateral interface.
type MockCollateral struct {
	ctrl     *gomock.Controller
	recorder *MockCollateralMockRecorder
}

// MockCollateralMockRecorder is the mock recorder for MockCollateral.
type MockCollateralMockRecorder struct {
	mock *MockCollateral
}

// NewMockCollateral creates a new mock instance.
func NewMockCollateral(ctrl *gomock.Controller) *MockCollateral {
	mock := &MockCollateral{ctrl: ctrl}
	mock.recorder = &MockCollateralMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollateral) EXPECT() *MockCollateralMockRecorder {
	return m.recorder
}

// CreatePartyAMMsSubAccounts mocks base method.
func (m *MockCollateral) CreatePartyAMMsSubAccounts(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*types.Account, *types.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartyAMMsSubAccounts", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types.Account)
	ret1, _ := ret[1].(*types.Account)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePartyAMMsSubAccounts indicates an expected call of CreatePartyAMMsSubAccounts.
func (mr *MockCollateralMockRecorder) CreatePartyAMMsSubAccounts(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartyAMMsSubAccounts", reflect.TypeOf((*MockCollateral)(nil).CreatePartyAMMsSubAccounts), arg0, arg1, arg2, arg3, arg4)
}

// GetAssetQuantum mocks base method.
func (m *MockCollateral) GetAssetQuantum(arg0 string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetQuantum", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetQuantum indicates an expected call of GetAssetQuantum.
func (mr *MockCollateralMockRecorder) GetAssetQuantum(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetQuantum", reflect.TypeOf((*MockCollateral)(nil).GetAssetQuantum), arg0)
}

// GetOrCreatePartyLiquidityFeeAccount mocks base method.
func (m *MockCollateral) GetOrCreatePartyLiquidityFeeAccount(arg0 context.Context, arg1, arg2, arg3 string) (*types.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreatePartyLiquidityFeeAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreatePartyLiquidityFeeAccount indicates an expected call of GetOrCreatePartyLiquidityFeeAccount.
func (mr *MockCollateralMockRecorder) GetOrCreatePartyLiquidityFeeAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreatePartyLiquidityFeeAccount", reflect.TypeOf((*MockCollateral)(nil).GetOrCreatePartyLiquidityFeeAccount), arg0, arg1, arg2, arg3)
}

// GetPartyGeneralAccount mocks base method.
func (m *MockCollateral) GetPartyGeneralAccount(arg0, arg1 string) (*types.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyGeneralAccount", arg0, arg1)
	ret0, _ := ret[0].(*types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyGeneralAccount indicates an expected call of GetPartyGeneralAccount.
func (mr *MockCollateralMockRecorder) GetPartyGeneralAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyGeneralAccount", reflect.TypeOf((*MockCollateral)(nil).GetPartyGeneralAccount), arg0, arg1)
}

// GetPartyMarginAccount mocks base method.
func (m *MockCollateral) GetPartyMarginAccount(arg0, arg1, arg2 string) (*types.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyMarginAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyMarginAccount indicates an expected call of GetPartyMarginAccount.
func (mr *MockCollateralMockRecorder) GetPartyMarginAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyMarginAccount", reflect.TypeOf((*MockCollateral)(nil).GetPartyMarginAccount), arg0, arg1, arg2)
}

// SubAccountUpdate mocks base method.
func (m *MockCollateral) SubAccountUpdate(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 vega.TransferType, arg6 *num.Uint) (*types.LedgerMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubAccountUpdate", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*types.LedgerMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubAccountUpdate indicates an expected call of SubAccountUpdate.
func (mr *MockCollateralMockRecorder) SubAccountUpdate(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubAccountUpdate", reflect.TypeOf((*MockCollateral)(nil).SubAccountUpdate), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// MockPosition is a mock of Position interface.
type MockPosition struct {
	ctrl     *gomock.Controller
	recorder *MockPositionMockRecorder
}

// MockPositionMockRecorder is the mock recorder for MockPosition.
type MockPositionMockRecorder struct {
	mock *MockPosition
}

// NewMockPosition creates a new mock instance.
func NewMockPosition(ctrl *gomock.Controller) *MockPosition {
	mock := &MockPosition{ctrl: ctrl}
	mock.recorder = &MockPositionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPosition) EXPECT() *MockPositionMockRecorder {
	return m.recorder
}

// GetPositionsByParty mocks base method.
func (m *MockPosition) GetPositionsByParty(arg0 ...string) []events.MarketPosition {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPositionsByParty", varargs...)
	ret0, _ := ret[0].([]events.MarketPosition)
	return ret0
}

// GetPositionsByParty indicates an expected call of GetPositionsByParty.
func (mr *MockPositionMockRecorder) GetPositionsByParty(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositionsByParty", reflect.TypeOf((*MockPosition)(nil).GetPositionsByParty), arg0...)
}

// MockMarket is a mock of Market interface.
type MockMarket struct {
	ctrl     *gomock.Controller
	recorder *MockMarketMockRecorder
}

// MockMarketMockRecorder is the mock recorder for MockMarket.
type MockMarketMockRecorder struct {
	mock *MockMarket
}

// NewMockMarket creates a new mock instance.
func NewMockMarket(ctrl *gomock.Controller) *MockMarket {
	mock := &MockMarket{ctrl: ctrl}
	mock.recorder = &MockMarketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarket) EXPECT() *MockMarketMockRecorder {
	return m.recorder
}

// ClosePosition mocks base method.
func (m *MockMarket) ClosePosition(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePosition", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ClosePosition indicates an expected call of ClosePosition.
func (mr *MockMarketMockRecorder) ClosePosition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePosition", reflect.TypeOf((*MockMarket)(nil).ClosePosition), arg0, arg1)
}

// GetID mocks base method.
func (m *MockMarket) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockMarketMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockMarket)(nil).GetID))
}

// GetSettlementAsset mocks base method.
func (m *MockMarket) GetSettlementAsset() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettlementAsset")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSettlementAsset indicates an expected call of GetSettlementAsset.
func (mr *MockMarketMockRecorder) GetSettlementAsset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettlementAsset", reflect.TypeOf((*MockMarket)(nil).GetSettlementAsset))
}

// SubmitOrderWithIDGeneratorAndOrderID mocks base method.
func (m *MockMarket) SubmitOrderWithIDGeneratorAndOrderID(arg0 context.Context, arg1 *types.OrderSubmission, arg2 string, arg3 common.IDGenerator, arg4 string, arg5 bool) (*types.OrderConfirmation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOrderWithIDGeneratorAndOrderID", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*types.OrderConfirmation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitOrderWithIDGeneratorAndOrderID indicates an expected call of SubmitOrderWithIDGeneratorAndOrderID.
func (mr *MockMarketMockRecorder) SubmitOrderWithIDGeneratorAndOrderID(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOrderWithIDGeneratorAndOrderID", reflect.TypeOf((*MockMarket)(nil).SubmitOrderWithIDGeneratorAndOrderID), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockRisk is a mock of Risk interface.
type MockRisk struct {
	ctrl     *gomock.Controller
	recorder *MockRiskMockRecorder
}

// MockRiskMockRecorder is the mock recorder for MockRisk.
type MockRiskMockRecorder struct {
	mock *MockRisk
}

// NewMockRisk creates a new mock instance.
func NewMockRisk(ctrl *gomock.Controller) *MockRisk {
	mock := &MockRisk{ctrl: ctrl}
	mock.recorder = &MockRiskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRisk) EXPECT() *MockRiskMockRecorder {
	return m.recorder
}

// GetRiskFactors mocks base method.
func (m *MockRisk) GetRiskFactors() *types.RiskFactor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRiskFactors")
	ret0, _ := ret[0].(*types.RiskFactor)
	return ret0
}

// GetRiskFactors indicates an expected call of GetRiskFactors.
func (mr *MockRiskMockRecorder) GetRiskFactors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRiskFactors", reflect.TypeOf((*MockRisk)(nil).GetRiskFactors))
}

// GetScalingFactors mocks base method.
func (m *MockRisk) GetScalingFactors() *types.ScalingFactors {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScalingFactors")
	ret0, _ := ret[0].(*types.ScalingFactors)
	return ret0
}

// GetScalingFactors indicates an expected call of GetScalingFactors.
func (mr *MockRiskMockRecorder) GetScalingFactors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScalingFactors", reflect.TypeOf((*MockRisk)(nil).GetScalingFactors))
}

// GetSlippage mocks base method.
func (m *MockRisk) GetSlippage() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlippage")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// GetSlippage indicates an expected call of GetSlippage.
func (mr *MockRiskMockRecorder) GetSlippage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlippage", reflect.TypeOf((*MockRisk)(nil).GetSlippage))
}
