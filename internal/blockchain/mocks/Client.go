// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import core_types "github.com/tendermint/tendermint/rpc/core/types"
import mock "github.com/stretchr/testify/mock"
import proto "vega/proto"
import time "time"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AmendOrder provides a mock function with given fields: ctx, amendment
func (_m *Client) AmendOrder(ctx context.Context, amendment *proto.Amendment) (bool, error) {
	ret := _m.Called(ctx, amendment)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Amendment) bool); ok {
		r0 = rf(ctx, amendment)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Amendment) error); ok {
		r1 = rf(ctx, amendment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelOrder provides a mock function with given fields: ctx, order
func (_m *Client) CancelOrder(ctx context.Context, order *proto.Order) (bool, error) {
	ret := _m.Called(ctx, order)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Order) bool); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *Client) CreateOrder(ctx context.Context, order *proto.Order) (bool, string, error) {
	ret := _m.Called(ctx, order)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Order) bool); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Order) string); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *proto.Order) error); ok {
		r2 = rf(ctx, order)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGenesisTime provides a mock function with given fields: ctx
func (_m *Client) GetGenesisTime(ctx context.Context) (time.Time, error) {
	ret := _m.Called(ctx)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkInfo provides a mock function with given fields: ctx
func (_m *Client) GetNetworkInfo(ctx context.Context) (*core_types.ResultNetInfo, error) {
	ret := _m.Called(ctx)

	var r0 *core_types.ResultNetInfo
	if rf, ok := ret.Get(0).(func(context.Context) *core_types.ResultNetInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultNetInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: ctx
func (_m *Client) GetStatus(ctx context.Context) (*core_types.ResultStatus, error) {
	ret := _m.Called(ctx)

	var r0 *core_types.ResultStatus
	if rf, ok := ret.Get(0).(func(context.Context) *core_types.ResultStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnconfirmedTxCount provides a mock function with given fields: ctx
func (_m *Client) GetUnconfirmedTxCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
