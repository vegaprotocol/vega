// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/commands/v1/commands.proto

package v1

import (
	vega "code.vegaprotocol.io/vega/protos/vega"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateMarginMode_Mode int32

const (
	// Never valid.
	UpdateMarginMode_MODE_UNSPECIFIED UpdateMarginMode_Mode = 0
	// Cross margin mode - margin is dynamically acquired and released as a position is marked to market
	UpdateMarginMode_MODE_CROSS_MARGIN UpdateMarginMode_Mode = 1
	// Isolated margin mode - margin for any newly opened position volume is transferred to the margin account when the trade is executed
	UpdateMarginMode_MODE_ISOLATED_MARGIN UpdateMarginMode_Mode = 2
)

// Enum value maps for UpdateMarginMode_Mode.
var (
	UpdateMarginMode_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_CROSS_MARGIN",
		2: "MODE_ISOLATED_MARGIN",
	}
	UpdateMarginMode_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED":     0,
		"MODE_CROSS_MARGIN":    1,
		"MODE_ISOLATED_MARGIN": 2,
	}
)

func (x UpdateMarginMode_Mode) Enum() *UpdateMarginMode_Mode {
	p := new(UpdateMarginMode_Mode)
	*p = x
	return p
}

func (x UpdateMarginMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMarginMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_commands_v1_commands_proto_enumTypes[0].Descriptor()
}

func (UpdateMarginMode_Mode) Type() protoreflect.EnumType {
	return &file_vega_commands_v1_commands_proto_enumTypes[0]
}

func (x UpdateMarginMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMarginMode_Mode.Descriptor instead.
func (UpdateMarginMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{6, 0}
}

type UndelegateSubmission_Method int32

const (
	UndelegateSubmission_METHOD_UNSPECIFIED UndelegateSubmission_Method = 0
	// Undelegate straight away, losing all rewards for the current epoch.
	UndelegateSubmission_METHOD_NOW UndelegateSubmission_Method = 1
	// Undelegate at the end of an epoch, retaining all rewards for the current epoch.
	UndelegateSubmission_METHOD_AT_END_OF_EPOCH UndelegateSubmission_Method = 2
)

// Enum value maps for UndelegateSubmission_Method.
var (
	UndelegateSubmission_Method_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "METHOD_NOW",
		2: "METHOD_AT_END_OF_EPOCH",
	}
	UndelegateSubmission_Method_value = map[string]int32{
		"METHOD_UNSPECIFIED":     0,
		"METHOD_NOW":             1,
		"METHOD_AT_END_OF_EPOCH": 2,
	}
)

func (x UndelegateSubmission_Method) Enum() *UndelegateSubmission_Method {
	p := new(UndelegateSubmission_Method)
	*p = x
	return p
}

func (x UndelegateSubmission_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UndelegateSubmission_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_commands_v1_commands_proto_enumTypes[1].Descriptor()
}

func (UndelegateSubmission_Method) Type() protoreflect.EnumType {
	return &file_vega_commands_v1_commands_proto_enumTypes[1]
}

func (x UndelegateSubmission_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UndelegateSubmission_Method.Descriptor instead.
func (UndelegateSubmission_Method) EnumDescriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{18, 0}
}

type CancelAMM_Method int32

const (
	CancelAMM_METHOD_UNSPECIFIED CancelAMM_Method = 0
	// Cancellation will be immediate and any open positions will be transferred to the network for liquidation.
	CancelAMM_METHOD_IMMEDIATE CancelAMM_Method = 1
	// AMM will only trade to reduce its position, and will be cancelled once its position reaches zero.
	CancelAMM_METHOD_REDUCE_ONLY CancelAMM_Method = 2
)

// Enum value maps for CancelAMM_Method.
var (
	CancelAMM_Method_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "METHOD_IMMEDIATE",
		2: "METHOD_REDUCE_ONLY",
	}
	CancelAMM_Method_value = map[string]int32{
		"METHOD_UNSPECIFIED": 0,
		"METHOD_IMMEDIATE":   1,
		"METHOD_REDUCE_ONLY": 2,
	}
)

func (x CancelAMM_Method) Enum() *CancelAMM_Method {
	p := new(CancelAMM_Method)
	*p = x
	return p
}

func (x CancelAMM_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelAMM_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_commands_v1_commands_proto_enumTypes[2].Descriptor()
}

func (CancelAMM_Method) Type() protoreflect.EnumType {
	return &file_vega_commands_v1_commands_proto_enumTypes[2]
}

func (x CancelAMM_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelAMM_Method.Descriptor instead.
func (CancelAMM_Method) EnumDescriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{31, 0}
}

// A command that allows the submission of a batch market instruction which wraps up multiple market instructions into a single transaction.
// These instructions are then processed sequentially in the following order:
// - OrderCancellation
// - OrderAmendment
// - OrderSubmission
// - StopOrderSubmission
// where the maximum allow of instructions in a batch is controlled by the network parameter "spam.protection.max.batchSize".
type BatchMarketInstructions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of order cancellations to be processed sequentially.
	Cancellations []*OrderCancellation `protobuf:"bytes,1,rep,name=cancellations,proto3" json:"cancellations,omitempty"`
	// List of order amendments to be processed sequentially.
	Amendments []*OrderAmendment `protobuf:"bytes,2,rep,name=amendments,proto3" json:"amendments,omitempty"`
	// List of order submissions to be processed sequentially.
	Submissions []*OrderSubmission `protobuf:"bytes,3,rep,name=submissions,proto3" json:"submissions,omitempty"`
	// List of stop order cancellations to be processed sequentially.
	StopOrdersCancellation []*StopOrdersCancellation `protobuf:"bytes,4,rep,name=stop_orders_cancellation,json=stopOrdersCancellation,proto3" json:"stop_orders_cancellation,omitempty"`
	// List of stop order submissions to be processed sequentially.
	StopOrdersSubmission []*StopOrdersSubmission `protobuf:"bytes,5,rep,name=stop_orders_submission,json=stopOrdersSubmission,proto3" json:"stop_orders_submission,omitempty"`
	// Update margin mode instruction
	UpdateMarginMode []*UpdateMarginMode `protobuf:"bytes,6,rep,name=update_margin_mode,json=updateMarginMode,proto3" json:"update_margin_mode,omitempty"`
}

func (x *BatchMarketInstructions) Reset() {
	*x = BatchMarketInstructions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMarketInstructions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMarketInstructions) ProtoMessage() {}

func (x *BatchMarketInstructions) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMarketInstructions.ProtoReflect.Descriptor instead.
func (*BatchMarketInstructions) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{0}
}

func (x *BatchMarketInstructions) GetCancellations() []*OrderCancellation {
	if x != nil {
		return x.Cancellations
	}
	return nil
}

func (x *BatchMarketInstructions) GetAmendments() []*OrderAmendment {
	if x != nil {
		return x.Amendments
	}
	return nil
}

func (x *BatchMarketInstructions) GetSubmissions() []*OrderSubmission {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *BatchMarketInstructions) GetStopOrdersCancellation() []*StopOrdersCancellation {
	if x != nil {
		return x.StopOrdersCancellation
	}
	return nil
}

func (x *BatchMarketInstructions) GetStopOrdersSubmission() []*StopOrdersSubmission {
	if x != nil {
		return x.StopOrdersSubmission
	}
	return nil
}

func (x *BatchMarketInstructions) GetUpdateMarginMode() []*UpdateMarginMode {
	if x != nil {
		return x.UpdateMarginMode
	}
	return nil
}

// A command that allows a party to submit a stop order for a given market.
// A stop order is a normal order that remains off the order book and is only submitted if a given trigger is breached from a particular direction.
// If both rises-above and falls-below are configured, then if one is triggered the other will be cancelled (OCO).
type StopOrdersSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stop order that will be triggered if the price rises above a given trigger price.
	RisesAbove *StopOrderSetup `protobuf:"bytes,1,opt,name=rises_above,json=risesAbove,proto3,oneof" json:"rises_above,omitempty"`
	// Stop order that will be triggered if the price falls below a given trigger price.
	FallsBelow *StopOrderSetup `protobuf:"bytes,2,opt,name=falls_below,json=fallsBelow,proto3,oneof" json:"falls_below,omitempty"`
}

func (x *StopOrdersSubmission) Reset() {
	*x = StopOrdersSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopOrdersSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopOrdersSubmission) ProtoMessage() {}

func (x *StopOrdersSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopOrdersSubmission.ProtoReflect.Descriptor instead.
func (*StopOrdersSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{1}
}

func (x *StopOrdersSubmission) GetRisesAbove() *StopOrderSetup {
	if x != nil {
		return x.RisesAbove
	}
	return nil
}

func (x *StopOrdersSubmission) GetFallsBelow() *StopOrderSetup {
	if x != nil {
		return x.FallsBelow
	}
	return nil
}

// Price and expiry configuration for a stop order.
type StopOrderSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order to be submitted once the trigger is breached.
	OrderSubmission *OrderSubmission `protobuf:"bytes,1,opt,name=order_submission,json=orderSubmission,proto3" json:"order_submission,omitempty"`
	// Timestamp, in Unix nanoseconds, for when the stop order should expire. If not set the stop order will not expire.
	ExpiresAt *int64 `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	// Strategy to adopt if the expiry time is reached.
	ExpiryStrategy *vega.StopOrder_ExpiryStrategy `protobuf:"varint,3,opt,name=expiry_strategy,json=expiryStrategy,proto3,enum=vega.StopOrder_ExpiryStrategy,oneof" json:"expiry_strategy,omitempty"`
	// Indicates if this order is linked to an order or position to derive the order size
	SizeOverrideSetting *vega.StopOrder_SizeOverrideSetting `protobuf:"varint,4,opt,name=size_override_setting,json=sizeOverrideSetting,proto3,enum=vega.StopOrder_SizeOverrideSetting,oneof" json:"size_override_setting,omitempty"`
	// If this order is linked to a position, provide an optional scaling factor
	SizeOverrideValue *vega.StopOrder_SizeOverrideValue `protobuf:"bytes,5,opt,name=size_override_value,json=sizeOverrideValue,proto3,oneof" json:"size_override_value,omitempty"`
	// Trigger that will need to be breached for the order to be submitted to the book.
	//
	// Types that are assignable to Trigger:
	//
	//	*StopOrderSetup_Price
	//	*StopOrderSetup_TrailingPercentOffset
	Trigger isStopOrderSetup_Trigger `protobuf_oneof:"trigger"`
}

func (x *StopOrderSetup) Reset() {
	*x = StopOrderSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopOrderSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopOrderSetup) ProtoMessage() {}

func (x *StopOrderSetup) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopOrderSetup.ProtoReflect.Descriptor instead.
func (*StopOrderSetup) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{2}
}

func (x *StopOrderSetup) GetOrderSubmission() *OrderSubmission {
	if x != nil {
		return x.OrderSubmission
	}
	return nil
}

func (x *StopOrderSetup) GetExpiresAt() int64 {
	if x != nil && x.ExpiresAt != nil {
		return *x.ExpiresAt
	}
	return 0
}

func (x *StopOrderSetup) GetExpiryStrategy() vega.StopOrder_ExpiryStrategy {
	if x != nil && x.ExpiryStrategy != nil {
		return *x.ExpiryStrategy
	}
	return vega.StopOrder_ExpiryStrategy(0)
}

func (x *StopOrderSetup) GetSizeOverrideSetting() vega.StopOrder_SizeOverrideSetting {
	if x != nil && x.SizeOverrideSetting != nil {
		return *x.SizeOverrideSetting
	}
	return vega.StopOrder_SizeOverrideSetting(0)
}

func (x *StopOrderSetup) GetSizeOverrideValue() *vega.StopOrder_SizeOverrideValue {
	if x != nil {
		return x.SizeOverrideValue
	}
	return nil
}

func (m *StopOrderSetup) GetTrigger() isStopOrderSetup_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (x *StopOrderSetup) GetPrice() string {
	if x, ok := x.GetTrigger().(*StopOrderSetup_Price); ok {
		return x.Price
	}
	return ""
}

func (x *StopOrderSetup) GetTrailingPercentOffset() string {
	if x, ok := x.GetTrigger().(*StopOrderSetup_TrailingPercentOffset); ok {
		return x.TrailingPercentOffset
	}
	return ""
}

type isStopOrderSetup_Trigger interface {
	isStopOrderSetup_Trigger()
}

type StopOrderSetup_Price struct {
	// Order will be submitted if the last traded price on the market breaches the given price.
	Price string `protobuf:"bytes,100,opt,name=price,proto3,oneof"`
}

type StopOrderSetup_TrailingPercentOffset struct {
	// Order will be submitted if the last traded price has moved the given percent from the highest/lowest mark price since the stop order was submitted.
	TrailingPercentOffset string `protobuf:"bytes,101,opt,name=trailing_percent_offset,json=trailingPercentOffset,proto3,oneof"`
}

func (*StopOrderSetup_Price) isStopOrderSetup_Trigger() {}

func (*StopOrderSetup_TrailingPercentOffset) isStopOrderSetup_Trigger() {}

// A command that instructs the network to cancel untriggered stop orders that were submitted by the sender of this transaction.
// If any cancelled stop order is part of an OCO, both stop orders will be cancelled.
// It is not possible to cancel another party's stop orders with this command.
type StopOrdersCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Restrict cancellations to those submitted to the given market. If not set, all stop orders across all markets will be cancelled.
	MarketId *string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3,oneof" json:"market_id,omitempty"`
	// Restrict cancellations to a stop order with the given ID. If set, then a market ID must also be provided.
	StopOrderId *string `protobuf:"bytes,2,opt,name=stop_order_id,json=stopOrderId,proto3,oneof" json:"stop_order_id,omitempty"`
}

func (x *StopOrdersCancellation) Reset() {
	*x = StopOrdersCancellation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopOrdersCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopOrdersCancellation) ProtoMessage() {}

func (x *StopOrdersCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopOrdersCancellation.ProtoReflect.Descriptor instead.
func (*StopOrdersCancellation) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{3}
}

func (x *StopOrdersCancellation) GetMarketId() string {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return ""
}

func (x *StopOrdersCancellation) GetStopOrderId() string {
	if x != nil && x.StopOrderId != nil {
		return *x.StopOrderId
	}
	return ""
}

// A command that submits an order to the Vega network for a given market.
type OrderSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID to submit the order to.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places,
	// required field for limit orders, however it is not required for market orders.
	// This field is an unsigned integer scaled to the market's decimal places.
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of units.
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Which side of the order book the order is for, e.g. buy or sell.
	Side vega.Side `protobuf:"varint,4,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires..
	TimeInForce vega.Order_TimeInForce `protobuf:"varint,5,opt,name=time_in_force,json=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"time_in_force,omitempty"`
	// Timestamp, in Unix nanoseconds, for when the order will expire. Can only be set when the order's time-in-force is GTT.
	ExpiresAt int64 `protobuf:"varint,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Type of the order.
	Type vega.Order_Type `protobuf:"varint,7,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Arbitrary optional reference for the order, to be used as a human-readable non-unique identifier for the order.
	Reference string `protobuf:"bytes,8,opt,name=reference,proto3" json:"reference,omitempty"`
	// Pegged order details. If set, the order's price will be offset from a particular reference price of the order book at all times.
	PeggedOrder *vega.PeggedOrder `protobuf:"bytes,9,opt,name=pegged_order,json=peggedOrder,proto3" json:"pegged_order,omitempty"`
	// If set, the order will only be executed if it would not trade on entry to the order book. Only valid for limit orders.
	PostOnly bool `protobuf:"varint,10,opt,name=post_only,json=postOnly,proto3" json:"post_only,omitempty"`
	// If set, the order will only be executed if the outcome of the trade moves the trader's position closer to 0.
	// Only valid for non-persistent orders.
	ReduceOnly bool `protobuf:"varint,11,opt,name=reduce_only,json=reduceOnly,proto3" json:"reduce_only,omitempty"`
	// Iceberg order details. If set, the order will exist on the order book in chunks.
	IcebergOpts *IcebergOpts `protobuf:"bytes,12,opt,name=iceberg_opts,json=icebergOpts,proto3,oneof" json:"iceberg_opts,omitempty"`
}

func (x *OrderSubmission) Reset() {
	*x = OrderSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSubmission) ProtoMessage() {}

func (x *OrderSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSubmission.ProtoReflect.Descriptor instead.
func (*OrderSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{4}
}

func (x *OrderSubmission) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrderSubmission) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *OrderSubmission) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OrderSubmission) GetSide() vega.Side {
	if x != nil {
		return x.Side
	}
	return vega.Side(0)
}

func (x *OrderSubmission) GetTimeInForce() vega.Order_TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return vega.Order_TimeInForce(0)
}

func (x *OrderSubmission) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *OrderSubmission) GetType() vega.Order_Type {
	if x != nil {
		return x.Type
	}
	return vega.Order_Type(0)
}

func (x *OrderSubmission) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *OrderSubmission) GetPeggedOrder() *vega.PeggedOrder {
	if x != nil {
		return x.PeggedOrder
	}
	return nil
}

func (x *OrderSubmission) GetPostOnly() bool {
	if x != nil {
		return x.PostOnly
	}
	return false
}

func (x *OrderSubmission) GetReduceOnly() bool {
	if x != nil {
		return x.ReduceOnly
	}
	return false
}

func (x *OrderSubmission) GetIcebergOpts() *IcebergOpts {
	if x != nil {
		return x.IcebergOpts
	}
	return nil
}

// Iceberg order options
type IcebergOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the order that is made visible and can be traded with during the execution of a single order.
	PeakSize uint64 `protobuf:"varint,1,opt,name=peak_size,json=peakSize,proto3" json:"peak_size,omitempty"`
	// Minimum allowed remaining size of the order before it is replenished back to its peak size.
	MinimumVisibleSize uint64 `protobuf:"varint,2,opt,name=minimum_visible_size,json=minimumVisibleSize,proto3" json:"minimum_visible_size,omitempty"`
}

func (x *IcebergOpts) Reset() {
	*x = IcebergOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcebergOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcebergOpts) ProtoMessage() {}

func (x *IcebergOpts) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcebergOpts.ProtoReflect.Descriptor instead.
func (*IcebergOpts) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{5}
}

func (x *IcebergOpts) GetPeakSize() uint64 {
	if x != nil {
		return x.PeakSize
	}
	return 0
}

func (x *IcebergOpts) GetMinimumVisibleSize() uint64 {
	if x != nil {
		return x.MinimumVisibleSize
	}
	return 0
}

type UpdateMarginMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market to change margin mode for.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Margin mode to use.
	Mode UpdateMarginMode_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=vega.commands.v1.UpdateMarginMode_Mode" json:"mode,omitempty"`
	// Margin factor to use for margin in isolated mode. It is a multiplier that defines how much margin needs to be set aside
	MarginFactor *string `protobuf:"bytes,3,opt,name=margin_factor,json=marginFactor,proto3,oneof" json:"margin_factor,omitempty"`
}

func (x *UpdateMarginMode) Reset() {
	*x = UpdateMarginMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarginMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarginMode) ProtoMessage() {}

func (x *UpdateMarginMode) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarginMode.ProtoReflect.Descriptor instead.
func (*UpdateMarginMode) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateMarginMode) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *UpdateMarginMode) GetMode() UpdateMarginMode_Mode {
	if x != nil {
		return x.Mode
	}
	return UpdateMarginMode_MODE_UNSPECIFIED
}

func (x *UpdateMarginMode) GetMarginFactor() string {
	if x != nil && x.MarginFactor != nil {
		return *x.MarginFactor
	}
	return ""
}

// A command that instructs the network to cancel orders, active or partially filled, that were previously submitted by the sender of this transaction.
// It is not possible to cancel another party's order with this command.
type OrderCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Restrict cancellations to an order with the given ID. If set, then a market ID must also be provided.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Restrict cancellations to those submitted to the given market. If not set, all stop orders across all markets will be cancelled.
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *OrderCancellation) Reset() {
	*x = OrderCancellation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancellation) ProtoMessage() {}

func (x *OrderCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancellation.ProtoReflect.Descriptor instead.
func (*OrderCancellation) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{7}
}

func (x *OrderCancellation) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderCancellation) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// A command that allows a party to update the details of an existing order.
// Any field that is left unset or as a default value indicates that this field on the original order will be left unchanged.
// It is not possible to change an order's type through this command.
type OrderAmendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the order to amend.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Market ID that the order was originally submitted to.
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// New price for the order. This field is an unsigned integer scaled to the market's decimal places.
	Price *string `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Amend the size for the order by the delta specified:
	// - To reduce the size from the current value set a negative integer value
	// - To increase the size from the current value, set a positive integer value
	// - To leave the size unchanged set a value of zero
	// This field needs to be scaled using the market's position decimal places.
	// If specified, size must not be set.
	SizeDelta int64 `protobuf:"varint,4,opt,name=size_delta,json=sizeDelta,proto3" json:"size_delta,omitempty"`
	// Timestamp, in Unix nanoseconds, for the new expiry time for the order.
	ExpiresAt *int64 `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	// New time in force for the order.
	TimeInForce vega.Order_TimeInForce `protobuf:"varint,6,opt,name=time_in_force,json=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"time_in_force,omitempty"`
	// New pegged offset for the order.
	// This field is an unsigned integer scaled to the market's decimal places.
	PeggedOffset string `protobuf:"bytes,7,opt,name=pegged_offset,json=peggedOffset,proto3" json:"pegged_offset,omitempty"`
	// New pegged reference for the order.
	PeggedReference vega.PeggedReference `protobuf:"varint,8,opt,name=pegged_reference,json=peggedReference,proto3,enum=vega.PeggedReference" json:"pegged_reference,omitempty"`
	// New size for the order.
	// Amending the size causes the size and remaining part of the order to be changed by the difference between the original and amended size.
	// - Specifying a size smaller than the current size leaves the order at its current order book position.
	// - Specifying a size larger than the current size removes and reinserts the order at the back of the price level.
	// - Specifying a size that results in the remaining part of the order being reduced to zero cancels the order.
	// This field is an unsigned integer scaled to the market's decimal places.
	// If specified, size_delta must be set to 0.
	Size *uint64 `protobuf:"varint,9,opt,name=size,proto3,oneof" json:"size,omitempty"`
}

func (x *OrderAmendment) Reset() {
	*x = OrderAmendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAmendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAmendment) ProtoMessage() {}

func (x *OrderAmendment) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAmendment.ProtoReflect.Descriptor instead.
func (*OrderAmendment) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{8}
}

func (x *OrderAmendment) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderAmendment) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrderAmendment) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *OrderAmendment) GetSizeDelta() int64 {
	if x != nil {
		return x.SizeDelta
	}
	return 0
}

func (x *OrderAmendment) GetExpiresAt() int64 {
	if x != nil && x.ExpiresAt != nil {
		return *x.ExpiresAt
	}
	return 0
}

func (x *OrderAmendment) GetTimeInForce() vega.Order_TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return vega.Order_TimeInForce(0)
}

func (x *OrderAmendment) GetPeggedOffset() string {
	if x != nil {
		return x.PeggedOffset
	}
	return ""
}

func (x *OrderAmendment) GetPeggedReference() vega.PeggedReference {
	if x != nil {
		return x.PeggedReference
	}
	return vega.PeggedReference(0)
}

func (x *OrderAmendment) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

// A command that indicates to the network the party's intention to supply liquidity to the given market and become a liquidity provider.
// An active liquidity provider for a market will earn fees based on the trades that occur in the market.
type LiquidityProvisionSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market that the submitter wishes to provide liquidity for.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Amount that the submitter will commit as liquidity to the market, specified as a unitless number in the settlement asset of the market.
	// This field is an unsigned integer scaled using the asset's decimal places.
	CommitmentAmount string `protobuf:"bytes,2,opt,name=commitment_amount,json=commitmentAmount,proto3" json:"commitment_amount,omitempty"`
	// Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers.
	Fee string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// Arbitrary reference to be added to every order created out of this liquidity provision submission.
	Reference string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *LiquidityProvisionSubmission) Reset() {
	*x = LiquidityProvisionSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionSubmission) ProtoMessage() {}

func (x *LiquidityProvisionSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionSubmission.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{9}
}

func (x *LiquidityProvisionSubmission) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityProvisionSubmission) GetCommitmentAmount() string {
	if x != nil {
		return x.CommitmentAmount
	}
	return ""
}

func (x *LiquidityProvisionSubmission) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *LiquidityProvisionSubmission) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Command that allows a liquidity provider to inform the network that they will stop providing liquidity for a market.
type LiquidityProvisionCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market that the submitter will stop providing liquidity for.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LiquidityProvisionCancellation) Reset() {
	*x = LiquidityProvisionCancellation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionCancellation) ProtoMessage() {}

func (x *LiquidityProvisionCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionCancellation.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionCancellation) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{10}
}

func (x *LiquidityProvisionCancellation) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Command that allows a liquidity provider to update the details of their existing liquidity commitment.
// Any field that is left unset or as a default value indicates that this field on the original submission will be left unchanged.
type LiquidityProvisionAmendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market that the submitter wants to amend the liquidity commitment for.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// New commitment amount.
	CommitmentAmount string `protobuf:"bytes,2,opt,name=commitment_amount,json=commitmentAmount,proto3" json:"commitment_amount,omitempty"`
	// New nominated liquidity fee factor.
	Fee string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// New arbitrary reference to be added to every order created out of this liquidity provision submission.
	Reference string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *LiquidityProvisionAmendment) Reset() {
	*x = LiquidityProvisionAmendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionAmendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionAmendment) ProtoMessage() {}

func (x *LiquidityProvisionAmendment) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionAmendment.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionAmendment) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{11}
}

func (x *LiquidityProvisionAmendment) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityProvisionAmendment) GetCommitmentAmount() string {
	if x != nil {
		return x.CommitmentAmount
	}
	return ""
}

func (x *LiquidityProvisionAmendment) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *LiquidityProvisionAmendment) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Command to instruct the network to process an asset withdrawal from the Vega network.
// The process is specific to the destination foreign chain, for example, a withdrawal to Ethereum will generate signatures
// that allow funds to be taken across the bridge.
type WithdrawSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount to be withdrawn, as an unsigned integer scaled to the asset's decimal places.
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Asset to be withdrawn.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Details specific to the foreign chain, such as the receiver address.
	Ext *vega.WithdrawExt `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (x *WithdrawSubmission) Reset() {
	*x = WithdrawSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawSubmission) ProtoMessage() {}

func (x *WithdrawSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawSubmission.ProtoReflect.Descriptor instead.
func (*WithdrawSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{12}
}

func (x *WithdrawSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *WithdrawSubmission) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *WithdrawSubmission) GetExt() *vega.WithdrawExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

// Command that allows a token holder to submit a governance proposal that can be voted on by any other token holders, and eventually enacted on the Vega network.
// For example this command can be used to propose a new market.
type ProposalSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arbitrary human-readable reference identifying the proposal.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Proposal terms containing the type and details of the proposal, as well as time spans for voting and enactment.
	Terms *vega.ProposalTerms `protobuf:"bytes,2,opt,name=terms,proto3" json:"terms,omitempty"`
	// Rationale behind a proposal.
	Rationale *vega.ProposalRationale `protobuf:"bytes,3,opt,name=rationale,proto3" json:"rationale,omitempty"`
}

func (x *ProposalSubmission) Reset() {
	*x = ProposalSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalSubmission) ProtoMessage() {}

func (x *ProposalSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalSubmission.ProtoReflect.Descriptor instead.
func (*ProposalSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{13}
}

func (x *ProposalSubmission) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ProposalSubmission) GetTerms() *vega.ProposalTerms {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *ProposalSubmission) GetRationale() *vega.ProposalRationale {
	if x != nil {
		return x.Rationale
	}
	return nil
}

// Terms for a batch governance proposal submission
type BatchProposalSubmissionTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Closing timestamp in Unix time; adheres to `minClose` and `maxClose` limits.
	ClosingTimestamp int64 `protobuf:"varint,1,opt,name=closing_timestamp,json=closingTimestamp,proto3" json:"closing_timestamp,omitempty"`
	// List of individual changes included in the batch proposal.
	Changes []*vega.BatchProposalTermsChange `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *BatchProposalSubmissionTerms) Reset() {
	*x = BatchProposalSubmissionTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProposalSubmissionTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProposalSubmissionTerms) ProtoMessage() {}

func (x *BatchProposalSubmissionTerms) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProposalSubmissionTerms.ProtoReflect.Descriptor instead.
func (*BatchProposalSubmissionTerms) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{14}
}

func (x *BatchProposalSubmissionTerms) GetClosingTimestamp() int64 {
	if x != nil {
		return x.ClosingTimestamp
	}
	return 0
}

func (x *BatchProposalSubmissionTerms) GetChanges() []*vega.BatchProposalTermsChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Command that allows a token holder to submit a batch governance proposal that can be voted on by any other token holders, and eventually enacted on the Vega network.
// For example this command can be used to propose a new market and a network parameter change with it.
type BatchProposalSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arbitrary human-readable reference identifying the proposal.
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Proposal terms containing the type and details of the proposal, as well as time spans for voting and enactment.
	Terms *BatchProposalSubmissionTerms `protobuf:"bytes,2,opt,name=terms,proto3" json:"terms,omitempty"`
	// Rationale behind a proposal.
	Rationale *vega.ProposalRationale `protobuf:"bytes,3,opt,name=rationale,proto3" json:"rationale,omitempty"`
}

func (x *BatchProposalSubmission) Reset() {
	*x = BatchProposalSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProposalSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProposalSubmission) ProtoMessage() {}

func (x *BatchProposalSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProposalSubmission.ProtoReflect.Descriptor instead.
func (*BatchProposalSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{15}
}

func (x *BatchProposalSubmission) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *BatchProposalSubmission) GetTerms() *BatchProposalSubmissionTerms {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *BatchProposalSubmission) GetRationale() *vega.ProposalRationale {
	if x != nil {
		return x.Rationale
	}
	return nil
}

// Command that allows a token holder to vote for or against an active governance proposal.
type VoteSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Submit vote for the specified proposal ID.
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// Actual value of the vote.
	Value vega.Vote_Value `protobuf:"varint,2,opt,name=value,proto3,enum=vega.Vote_Value" json:"value,omitempty"`
}

func (x *VoteSubmission) Reset() {
	*x = VoteSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSubmission) ProtoMessage() {}

func (x *VoteSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSubmission.ProtoReflect.Descriptor instead.
func (*VoteSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{16}
}

func (x *VoteSubmission) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *VoteSubmission) GetValue() vega.Vote_Value {
	if x != nil {
		return x.Value
	}
	return vega.Vote_Value(0)
}

// Command to allow a token holder to delegate their tokens to a validator to help secure the network.
// A token holder delegating to a validator will earn rewards based on the amount they have delegated, and the performance of the chosen validator.
type DelegateSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node ID to delegate stake to.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Amount of stake to delegate, as an unsigned integer scaled to the governance asset's decimal places.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegateSubmission) Reset() {
	*x = DelegateSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateSubmission) ProtoMessage() {}

func (x *DelegateSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateSubmission.ProtoReflect.Descriptor instead.
func (*DelegateSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{17}
}

func (x *DelegateSubmission) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *DelegateSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Command to allow a token holder to instruct the network to remove their delegated stake from a given validator node.
type UndelegateSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node ID to undelegate stake from.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Amount to undelegate, as an unsigned integer scaled to the governance asset's decimal places.
	// If not set, then all delegations to the given validator node will be removed.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Method of delegation.
	Method UndelegateSubmission_Method `protobuf:"varint,3,opt,name=method,proto3,enum=vega.commands.v1.UndelegateSubmission_Method" json:"method,omitempty"`
}

func (x *UndelegateSubmission) Reset() {
	*x = UndelegateSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndelegateSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndelegateSubmission) ProtoMessage() {}

func (x *UndelegateSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndelegateSubmission.ProtoReflect.Descriptor instead.
func (*UndelegateSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{18}
}

func (x *UndelegateSubmission) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *UndelegateSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UndelegateSubmission) GetMethod() UndelegateSubmission_Method {
	if x != nil {
		return x.Method
	}
	return UndelegateSubmission_METHOD_UNSPECIFIED
}

// Command that allows a party to move assets from one account to another.
// A transfer can be set up as a single one-off transfer, or a recurring transfer that occurs once at the start of each epoch.
// Each transfer incurs a fee as specified by the network parameter `transfer.fee.factor`
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account type from which the funds of the party should be taken.
	FromAccountType vega.AccountType `protobuf:"varint,1,opt,name=from_account_type,json=fromAccountType,proto3,enum=vega.AccountType" json:"from_account_type,omitempty"`
	// Public key of the destination account.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Type of the destination account.
	ToAccountType vega.AccountType `protobuf:"varint,3,opt,name=to_account_type,json=toAccountType,proto3,enum=vega.AccountType" json:"to_account_type,omitempty"`
	// Asset ID of the asset to be transferred.
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// Amount to be taken from the source account, as an unsigned integer scaled to the asset's decimal places.
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Reference to be attached to the transfer.
	Reference string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	// AMM key from which assets are to be transferred, if applicable.
	// The submitter of the transaction must be the owner of this AMM key.
	// If provided, the 'from_account_type' must be REWARDS_VESTED, and the asset in this account
	// must match the asset specified in the transfer.
	From *string `protobuf:"bytes,7,opt,name=from,proto3,oneof" json:"from,omitempty"`
	// Specific details of the transfer.
	//
	// Types that are assignable to Kind:
	//
	//	*Transfer_OneOff
	//	*Transfer_Recurring
	Kind isTransfer_Kind `protobuf_oneof:"kind"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{19}
}

func (x *Transfer) GetFromAccountType() vega.AccountType {
	if x != nil {
		return x.FromAccountType
	}
	return vega.AccountType(0)
}

func (x *Transfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transfer) GetToAccountType() vega.AccountType {
	if x != nil {
		return x.ToAccountType
	}
	return vega.AccountType(0)
}

func (x *Transfer) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Transfer) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (m *Transfer) GetKind() isTransfer_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Transfer) GetOneOff() *OneOffTransfer {
	if x, ok := x.GetKind().(*Transfer_OneOff); ok {
		return x.OneOff
	}
	return nil
}

func (x *Transfer) GetRecurring() *RecurringTransfer {
	if x, ok := x.GetKind().(*Transfer_Recurring); ok {
		return x.Recurring
	}
	return nil
}

type isTransfer_Kind interface {
	isTransfer_Kind()
}

type Transfer_OneOff struct {
	// Details of a one-off transfer that is executed once at a specified time.
	OneOff *OneOffTransfer `protobuf:"bytes,101,opt,name=one_off,json=oneOff,proto3,oneof"`
}

type Transfer_Recurring struct {
	// Details of a transfer that is executed once every epoch until stopped.
	Recurring *RecurringTransfer `protobuf:"bytes,102,opt,name=recurring,proto3,oneof"`
}

func (*Transfer_OneOff) isTransfer_Kind() {}

func (*Transfer_Recurring) isTransfer_Kind() {}

// Details for a one-off transfer.
type OneOffTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp, in Unix nanoseconds, for when the transfer should be executed, i.e., assets transferred into the receiver's account.
	DeliverOn int64 `protobuf:"varint,1,opt,name=deliver_on,json=deliverOn,proto3" json:"deliver_on,omitempty"`
}

func (x *OneOffTransfer) Reset() {
	*x = OneOffTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOffTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOffTransfer) ProtoMessage() {}

func (x *OneOffTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOffTransfer.ProtoReflect.Descriptor instead.
func (*OneOffTransfer) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{20}
}

func (x *OneOffTransfer) GetDeliverOn() int64 {
	if x != nil {
		return x.DeliverOn
	}
	return 0
}

// Details for a recurring transfer
type RecurringTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First epoch from which this transfer shall be executed.
	StartEpoch uint64 `protobuf:"varint,1,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	// Last epoch at which this transfer shall be executed.
	EndEpoch *uint64 `protobuf:"varint,2,opt,name=end_epoch,json=endEpoch,proto3,oneof" json:"end_epoch,omitempty"`
	// Factor that the initial transfer amount is multiplied by for each epoch that it is executed.
	// For example if the initial transfer amount is 1000 and the factor is 0.5, then the amounts transferred per epoch will be 1000, 500, 250, 125, etc.
	Factor string `protobuf:"bytes,3,opt,name=factor,proto3" json:"factor,omitempty"`
	// Optional parameter defining how a transfer is dispatched.
	DispatchStrategy *vega.DispatchStrategy `protobuf:"bytes,4,opt,name=dispatch_strategy,json=dispatchStrategy,proto3" json:"dispatch_strategy,omitempty"`
}

func (x *RecurringTransfer) Reset() {
	*x = RecurringTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringTransfer) ProtoMessage() {}

func (x *RecurringTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringTransfer.ProtoReflect.Descriptor instead.
func (*RecurringTransfer) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{21}
}

func (x *RecurringTransfer) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *RecurringTransfer) GetEndEpoch() uint64 {
	if x != nil && x.EndEpoch != nil {
		return *x.EndEpoch
	}
	return 0
}

func (x *RecurringTransfer) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

func (x *RecurringTransfer) GetDispatchStrategy() *vega.DispatchStrategy {
	if x != nil {
		return x.DispatchStrategy
	}
	return nil
}

// Command that can be used by the party that initiated a transfer to instruct the network to stop an active recurring transaction.
type CancelTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transfer ID of the transfer to cancel.
	TransferId string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
}

func (x *CancelTransfer) Reset() {
	*x = CancelTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransfer) ProtoMessage() {}

func (x *CancelTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransfer.ProtoReflect.Descriptor instead.
func (*CancelTransfer) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{22}
}

func (x *CancelTransfer) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

// Command that can be used by a validator to instruct the network to generate signatures to add or remove validators from the multisig-control contract.
// Signatures can only be generated for validator nodes that have been promoted or demoted from the consensus validator set, and any attempt to generate signatures for another node will be rejected.
// The generated signatures can only be submitted to the contract by the Ethereum addresses included in the command.
type IssueSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum address which will submit the signatures to the smart contract.
	Submitter string `protobuf:"bytes,1,opt,name=submitter,proto3" json:"submitter,omitempty"`
	// What kind of signatures to generate, namely for whether a signer is being added or removed.
	Kind NodeSignatureKind `protobuf:"varint,2,opt,name=kind,proto3,enum=vega.commands.v1.NodeSignatureKind" json:"kind,omitempty"`
	// Node ID of the validator node that will be signed in or out of the smart contract.
	ValidatorNodeId string `protobuf:"bytes,3,opt,name=validator_node_id,json=validatorNodeId,proto3" json:"validator_node_id,omitempty"`
	// Chain ID of the bridge to generate signatures for.
	ChainId string `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *IssueSignatures) Reset() {
	*x = IssueSignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSignatures) ProtoMessage() {}

func (x *IssueSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSignatures.ProtoReflect.Descriptor instead.
func (*IssueSignatures) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{23}
}

func (x *IssueSignatures) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *IssueSignatures) GetKind() NodeSignatureKind {
	if x != nil {
		return x.Kind
	}
	return NodeSignatureKind_NODE_SIGNATURE_KIND_UNSPECIFIED
}

func (x *IssueSignatures) GetValidatorNodeId() string {
	if x != nil {
		return x.ValidatorNodeId
	}
	return ""
}

func (x *IssueSignatures) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

// Command that a party can use to instruct the network to create a new referral set on the network.
// The submitter of this command will become the referrer of the new set and cannot be the referrer or a referee of another set.
// A referrer can use the referral set ID as a referral code to attract others to the Vega network and have fees reduced for the referral set.
type CreateReferralSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the referral set should be considered a team that can participate in team games on the network.
	IsTeam bool `protobuf:"varint,1,opt,name=is_team,json=isTeam,proto3" json:"is_team,omitempty"`
	// Team details, if the referral set is to be considered a team.
	Team *CreateReferralSet_Team `protobuf:"bytes,2,opt,name=team,proto3,oneof" json:"team,omitempty"`
	// Should a referral set be created as well or only a team.
	// the default is false so the existing behaviour is kept if older versions of the protobufs are used.
	DoNotCreateReferralSet bool `protobuf:"varint,3,opt,name=do_not_create_referral_set,json=doNotCreateReferralSet,proto3" json:"do_not_create_referral_set,omitempty"`
}

func (x *CreateReferralSet) Reset() {
	*x = CreateReferralSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReferralSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReferralSet) ProtoMessage() {}

func (x *CreateReferralSet) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReferralSet.ProtoReflect.Descriptor instead.
func (*CreateReferralSet) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{24}
}

func (x *CreateReferralSet) GetIsTeam() bool {
	if x != nil {
		return x.IsTeam
	}
	return false
}

func (x *CreateReferralSet) GetTeam() *CreateReferralSet_Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *CreateReferralSet) GetDoNotCreateReferralSet() bool {
	if x != nil {
		return x.DoNotCreateReferralSet
	}
	return false
}

// A command that allows the referrer of a referral set to update team details for a referral set.
// Any field that is left unset or has a default value indicates that this field on the original referral set will be left unchanged.
type UpdateReferralSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the referral set to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether or not the referral set should be considered a team that can participate in team games on the network.
	IsTeam bool `protobuf:"varint,2,opt,name=is_team,json=isTeam,proto3" json:"is_team,omitempty"`
	// Team details, if the referral set is to be considered a team.
	Team *UpdateReferralSet_Team `protobuf:"bytes,3,opt,name=team,proto3,oneof" json:"team,omitempty"`
}

func (x *UpdateReferralSet) Reset() {
	*x = UpdateReferralSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReferralSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReferralSet) ProtoMessage() {}

func (x *UpdateReferralSet) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReferralSet.ProtoReflect.Descriptor instead.
func (*UpdateReferralSet) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateReferralSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateReferralSet) GetIsTeam() bool {
	if x != nil {
		return x.IsTeam
	}
	return false
}

func (x *UpdateReferralSet) GetTeam() *UpdateReferralSet_Team {
	if x != nil {
		return x.Team
	}
	return nil
}

// Command that allows the submitter to join a referral set and earn a collective reduction in fees based on the activity of all members of that set.
// A party that joins a referral set is called a referee. A referee can only be a member of one referral set and cannot themselves be or become a referrer.
// To switch to another referral set, a subsequent command can be sent and the switch will take effect at the end of the epoch.
type ApplyReferralCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Referral code, normally the referral set ID, for the party to join.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Should the key applying the referral code also join the team.
	// the default is false so the existing behaviour is kept if older versions of the protobufs are used.
	DoNotJoinTeam bool `protobuf:"varint,2,opt,name=do_not_join_team,json=doNotJoinTeam,proto3" json:"do_not_join_team,omitempty"`
}

func (x *ApplyReferralCode) Reset() {
	*x = ApplyReferralCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyReferralCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyReferralCode) ProtoMessage() {}

func (x *ApplyReferralCode) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyReferralCode.ProtoReflect.Descriptor instead.
func (*ApplyReferralCode) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{26}
}

func (x *ApplyReferralCode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplyReferralCode) GetDoNotJoinTeam() bool {
	if x != nil {
		return x.DoNotJoinTeam
	}
	return false
}

// Command that allows the submitter to join a team or change teams if they are already a member of a team.
type JoinTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the team to join, this is the same as the referral code used to generate the team.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *JoinTeam) Reset() {
	*x = JoinTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTeam) ProtoMessage() {}

func (x *JoinTeam) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTeam.ProtoReflect.Descriptor instead.
func (*JoinTeam) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{27}
}

func (x *JoinTeam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Command to associate metadata to a public key, known as a party ID.
// Partial update is not supported, meaning previous values must be included in
// the update, otherwise they are removed.
type UpdatePartyProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alias given to the party. It must be unique network-wide.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Freeform data to associate to the party.
	// Support a maximum of 10 entries.
	Metadata []*vega.Metadata `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UpdatePartyProfile) Reset() {
	*x = UpdatePartyProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePartyProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePartyProfile) ProtoMessage() {}

func (x *UpdatePartyProfile) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePartyProfile.ProtoReflect.Descriptor instead.
func (*UpdatePartyProfile) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{28}
}

func (x *UpdatePartyProfile) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *UpdatePartyProfile) GetMetadata() []*vega.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Command to create an automated market maker for a given market.
type SubmitAMM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for which to create an AMM.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Amount to be committed to the AMM.
	CommitmentAmount string `protobuf:"bytes,2,opt,name=commitment_amount,json=commitmentAmount,proto3" json:"commitment_amount,omitempty"`
	// Slippage tolerance used for rebasing the AMM if its base price crosses with existing order
	SlippageTolerance string `protobuf:"bytes,3,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"`
	// Concentrated liquidity parameters defining the shape of the AMM's volume curves.
	ConcentratedLiquidityParameters *SubmitAMM_ConcentratedLiquidityParameters `protobuf:"bytes,4,opt,name=concentrated_liquidity_parameters,json=concentratedLiquidityParameters,proto3" json:"concentrated_liquidity_parameters,omitempty"`
	// Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market.
	ProposedFee string `protobuf:"bytes,5,opt,name=proposed_fee,json=proposedFee,proto3" json:"proposed_fee,omitempty"`
	// An AMM with an oracle driven base price will only be updated if abs(new-base-price / old-base-price - 1) >= minimum_price_change_trigger.
	MinimumPriceChangeTrigger *string `protobuf:"bytes,7,opt,name=minimum_price_change_trigger,json=minimumPriceChangeTrigger,proto3,oneof" json:"minimum_price_change_trigger,omitempty"`
	Spread                    *string `protobuf:"bytes,8,opt,name=spread,proto3,oneof" json:"spread,omitempty"`
}

func (x *SubmitAMM) Reset() {
	*x = SubmitAMM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitAMM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAMM) ProtoMessage() {}

func (x *SubmitAMM) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAMM.ProtoReflect.Descriptor instead.
func (*SubmitAMM) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{29}
}

func (x *SubmitAMM) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SubmitAMM) GetCommitmentAmount() string {
	if x != nil {
		return x.CommitmentAmount
	}
	return ""
}

func (x *SubmitAMM) GetSlippageTolerance() string {
	if x != nil {
		return x.SlippageTolerance
	}
	return ""
}

func (x *SubmitAMM) GetConcentratedLiquidityParameters() *SubmitAMM_ConcentratedLiquidityParameters {
	if x != nil {
		return x.ConcentratedLiquidityParameters
	}
	return nil
}

func (x *SubmitAMM) GetProposedFee() string {
	if x != nil {
		return x.ProposedFee
	}
	return ""
}

func (x *SubmitAMM) GetMinimumPriceChangeTrigger() string {
	if x != nil && x.MinimumPriceChangeTrigger != nil {
		return *x.MinimumPriceChangeTrigger
	}
	return ""
}

func (x *SubmitAMM) GetSpread() string {
	if x != nil && x.Spread != nil {
		return *x.Spread
	}
	return ""
}

// Command to amend an existing automated market maker on a market.
type AmendAMM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the AMM to be amended.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Amount to be committed to the AMM. If not supplied the commitment will remain unchanged.
	CommitmentAmount *string `protobuf:"bytes,2,opt,name=commitment_amount,json=commitmentAmount,proto3,oneof" json:"commitment_amount,omitempty"`
	// Slippage tolerance for rebasing position when updating the AMM.
	SlippageTolerance string `protobuf:"bytes,3,opt,name=slippage_tolerance,json=slippageTolerance,proto3" json:"slippage_tolerance,omitempty"`
	// Concentrated liquidity parameters defining the shape of the AMM's volume curves. If not supplied the parameters will remain unchanged.
	ConcentratedLiquidityParameters *AmendAMM_ConcentratedLiquidityParameters `protobuf:"bytes,4,opt,name=concentrated_liquidity_parameters,json=concentratedLiquidityParameters,proto3,oneof" json:"concentrated_liquidity_parameters,omitempty"`
	// Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market. If not supplied the proposed fee will remain unchanged.
	ProposedFee *string `protobuf:"bytes,5,opt,name=proposed_fee,json=proposedFee,proto3,oneof" json:"proposed_fee,omitempty"`
	// An AMM with an oracle driven base price will only be updated if abs(new-base-price / old-base-price - 1) >= minimum_price_change_trigger.
	MinimumPriceChangeTrigger *string `protobuf:"bytes,7,opt,name=minimum_price_change_trigger,json=minimumPriceChangeTrigger,proto3,oneof" json:"minimum_price_change_trigger,omitempty"`
	Spread                    *string `protobuf:"bytes,8,opt,name=spread,proto3,oneof" json:"spread,omitempty"`
}

func (x *AmendAMM) Reset() {
	*x = AmendAMM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendAMM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendAMM) ProtoMessage() {}

func (x *AmendAMM) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendAMM.ProtoReflect.Descriptor instead.
func (*AmendAMM) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{30}
}

func (x *AmendAMM) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *AmendAMM) GetCommitmentAmount() string {
	if x != nil && x.CommitmentAmount != nil {
		return *x.CommitmentAmount
	}
	return ""
}

func (x *AmendAMM) GetSlippageTolerance() string {
	if x != nil {
		return x.SlippageTolerance
	}
	return ""
}

func (x *AmendAMM) GetConcentratedLiquidityParameters() *AmendAMM_ConcentratedLiquidityParameters {
	if x != nil {
		return x.ConcentratedLiquidityParameters
	}
	return nil
}

func (x *AmendAMM) GetProposedFee() string {
	if x != nil && x.ProposedFee != nil {
		return *x.ProposedFee
	}
	return ""
}

func (x *AmendAMM) GetMinimumPriceChangeTrigger() string {
	if x != nil && x.MinimumPriceChangeTrigger != nil {
		return *x.MinimumPriceChangeTrigger
	}
	return ""
}

func (x *AmendAMM) GetSpread() string {
	if x != nil && x.Spread != nil {
		return *x.Spread
	}
	return ""
}

// Command to cancel an automated market maker for a given market.
type CancelAMM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID to cancel an AMM for.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Method to use to cancel the AMM.
	Method CancelAMM_Method `protobuf:"varint,2,opt,name=method,proto3,enum=vega.commands.v1.CancelAMM_Method" json:"method,omitempty"`
}

func (x *CancelAMM) Reset() {
	*x = CancelAMM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAMM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAMM) ProtoMessage() {}

func (x *CancelAMM) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAMM.ProtoReflect.Descriptor instead.
func (*CancelAMM) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{31}
}

func (x *CancelAMM) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CancelAMM) GetMethod() CancelAMM_Method {
	if x != nil {
		return x.Method
	}
	return CancelAMM_METHOD_UNSPECIFIED
}

// Internal transactions used to convey delayed transactions to be included in the next block.
type DelayedTransactionsWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Height       uint64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *DelayedTransactionsWrapper) Reset() {
	*x = DelayedTransactionsWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayedTransactionsWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayedTransactionsWrapper) ProtoMessage() {}

func (x *DelayedTransactionsWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayedTransactionsWrapper.ProtoReflect.Descriptor instead.
func (*DelayedTransactionsWrapper) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{32}
}

func (x *DelayedTransactionsWrapper) GetTransactions() [][]byte {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *DelayedTransactionsWrapper) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type CreateReferralSet_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the team.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// External link to the team's homepage.
	TeamUrl *string `protobuf:"bytes,11,opt,name=team_url,json=teamUrl,proto3,oneof" json:"team_url,omitempty"`
	// External link to an avatar for the team.
	AvatarUrl *string `protobuf:"bytes,12,opt,name=avatar_url,json=avatarUrl,proto3,oneof" json:"avatar_url,omitempty"`
	// Whether or not the team is closed to new party members.
	Closed bool `protobuf:"varint,13,opt,name=closed,proto3" json:"closed,omitempty"`
	// List of public keys that are allowed to join the team.
	// Only applicable to closed teams. Removing a party from the allow list does not remove
	// the party from the team.
	AllowList []string `protobuf:"bytes,14,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
}

func (x *CreateReferralSet_Team) Reset() {
	*x = CreateReferralSet_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReferralSet_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReferralSet_Team) ProtoMessage() {}

func (x *CreateReferralSet_Team) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReferralSet_Team.ProtoReflect.Descriptor instead.
func (*CreateReferralSet_Team) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CreateReferralSet_Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateReferralSet_Team) GetTeamUrl() string {
	if x != nil && x.TeamUrl != nil {
		return *x.TeamUrl
	}
	return ""
}

func (x *CreateReferralSet_Team) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *CreateReferralSet_Team) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *CreateReferralSet_Team) GetAllowList() []string {
	if x != nil {
		return x.AllowList
	}
	return nil
}

type UpdateReferralSet_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New name of the team.
	Name *string `protobuf:"bytes,10,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// New link to the team's homepage.
	TeamUrl *string `protobuf:"bytes,11,opt,name=team_url,json=teamUrl,proto3,oneof" json:"team_url,omitempty"`
	// New link to an avatar for the team.
	AvatarUrl *string `protobuf:"bytes,12,opt,name=avatar_url,json=avatarUrl,proto3,oneof" json:"avatar_url,omitempty"`
	// Whether or not the team is closed to new party members. When closed, only parties specified in the allow list can
	// join the team.
	Closed *bool `protobuf:"varint,13,opt,name=closed,proto3,oneof" json:"closed,omitempty"`
	// List of public keys that are allowed to join the team.
	// Only applicable to closed teams. Removing a party from the allow list does not remove
	// the party from the team.
	AllowList []string `protobuf:"bytes,14,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
}

func (x *UpdateReferralSet_Team) Reset() {
	*x = UpdateReferralSet_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReferralSet_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReferralSet_Team) ProtoMessage() {}

func (x *UpdateReferralSet_Team) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReferralSet_Team.ProtoReflect.Descriptor instead.
func (*UpdateReferralSet_Team) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{25, 0}
}

func (x *UpdateReferralSet_Team) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateReferralSet_Team) GetTeamUrl() string {
	if x != nil && x.TeamUrl != nil {
		return *x.TeamUrl
	}
	return ""
}

func (x *UpdateReferralSet_Team) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *UpdateReferralSet_Team) GetClosed() bool {
	if x != nil && x.Closed != nil {
		return *x.Closed
	}
	return false
}

func (x *UpdateReferralSet_Team) GetAllowList() []string {
	if x != nil {
		return x.AllowList
	}
	return nil
}

// Liquidity parameters that define the size and range of the AMM's tradeable volume.
type SubmitAMM_ConcentratedLiquidityParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price at which the AMM will stop quoting sell volume. If not supplied the AMM will never hold a short position.
	UpperBound *string `protobuf:"bytes,1,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	// Price at which the AMM will stop quoting buy volume. If not supplied the AMM will never hold a long position.
	LowerBound *string `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	// Price that the AMM will quote as its "fair price" when its position is zero.
	Base string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	// Leverage at upper bound. If not set the markets risk-factors will be used to calculate leverage.
	LeverageAtUpperBound *string `protobuf:"bytes,4,opt,name=leverage_at_upper_bound,json=leverageAtUpperBound,proto3,oneof" json:"leverage_at_upper_bound,omitempty"`
	// Leverage at lower bound. If not set the markets risk-factors will be used to calculate leverage.
	LeverageAtLowerBound *string `protobuf:"bytes,5,opt,name=leverage_at_lower_bound,json=leverageAtLowerBound,proto3,oneof" json:"leverage_at_lower_bound,omitempty"`
	// ID of a data source already used by the market which will be used as the base price for the AMM.
	DataSourceId *string `protobuf:"bytes,6,opt,name=data_source_id,json=dataSourceId,proto3,oneof" json:"data_source_id,omitempty"`
}

func (x *SubmitAMM_ConcentratedLiquidityParameters) Reset() {
	*x = SubmitAMM_ConcentratedLiquidityParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitAMM_ConcentratedLiquidityParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAMM_ConcentratedLiquidityParameters) ProtoMessage() {}

func (x *SubmitAMM_ConcentratedLiquidityParameters) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAMM_ConcentratedLiquidityParameters.ProtoReflect.Descriptor instead.
func (*SubmitAMM_ConcentratedLiquidityParameters) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{29, 0}
}

func (x *SubmitAMM_ConcentratedLiquidityParameters) GetUpperBound() string {
	if x != nil && x.UpperBound != nil {
		return *x.UpperBound
	}
	return ""
}

func (x *SubmitAMM_ConcentratedLiquidityParameters) GetLowerBound() string {
	if x != nil && x.LowerBound != nil {
		return *x.LowerBound
	}
	return ""
}

func (x *SubmitAMM_ConcentratedLiquidityParameters) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *SubmitAMM_ConcentratedLiquidityParameters) GetLeverageAtUpperBound() string {
	if x != nil && x.LeverageAtUpperBound != nil {
		return *x.LeverageAtUpperBound
	}
	return ""
}

func (x *SubmitAMM_ConcentratedLiquidityParameters) GetLeverageAtLowerBound() string {
	if x != nil && x.LeverageAtLowerBound != nil {
		return *x.LeverageAtLowerBound
	}
	return ""
}

func (x *SubmitAMM_ConcentratedLiquidityParameters) GetDataSourceId() string {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return ""
}

// Liquidity parameters that define the size and range of the AMM's tradeable volume.
type AmendAMM_ConcentratedLiquidityParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price at which the AMM will stop quoting sell volume. If not supplied the AMM will never hold a short position.
	UpperBound *string `protobuf:"bytes,1,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	// Price at which the AMM will stop quoting buy volume. If not supplied the AMM will never hold a long position.
	LowerBound *string `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	// Price that the AMM will quote as its "fair price" when its position is zero.
	Base string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	// Leverage at upper bound. If not set the markets risk-factors will be used to calculate leverage.
	LeverageAtUpperBound *string `protobuf:"bytes,4,opt,name=leverage_at_upper_bound,json=leverageAtUpperBound,proto3,oneof" json:"leverage_at_upper_bound,omitempty"`
	// Leverage at lower bound. If not set the markets risk-factors will be used to calculate leverage.
	LeverageAtLowerBound *string `protobuf:"bytes,5,opt,name=leverage_at_lower_bound,json=leverageAtLowerBound,proto3,oneof" json:"leverage_at_lower_bound,omitempty"`
	// ID of a data source already used by the market which will be used as the base price for the AMM.
	DataSourceId *string `protobuf:"bytes,6,opt,name=data_source_id,json=dataSourceId,proto3,oneof" json:"data_source_id,omitempty"`
}

func (x *AmendAMM_ConcentratedLiquidityParameters) Reset() {
	*x = AmendAMM_ConcentratedLiquidityParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendAMM_ConcentratedLiquidityParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendAMM_ConcentratedLiquidityParameters) ProtoMessage() {}

func (x *AmendAMM_ConcentratedLiquidityParameters) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendAMM_ConcentratedLiquidityParameters.ProtoReflect.Descriptor instead.
func (*AmendAMM_ConcentratedLiquidityParameters) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{30, 0}
}

func (x *AmendAMM_ConcentratedLiquidityParameters) GetUpperBound() string {
	if x != nil && x.UpperBound != nil {
		return *x.UpperBound
	}
	return ""
}

func (x *AmendAMM_ConcentratedLiquidityParameters) GetLowerBound() string {
	if x != nil && x.LowerBound != nil {
		return *x.LowerBound
	}
	return ""
}

func (x *AmendAMM_ConcentratedLiquidityParameters) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *AmendAMM_ConcentratedLiquidityParameters) GetLeverageAtUpperBound() string {
	if x != nil && x.LeverageAtUpperBound != nil {
		return *x.LeverageAtUpperBound
	}
	return ""
}

func (x *AmendAMM_ConcentratedLiquidityParameters) GetLeverageAtLowerBound() string {
	if x != nil && x.LeverageAtLowerBound != nil {
		return *x.LeverageAtLowerBound
	}
	return ""
}

func (x *AmendAMM_ConcentratedLiquidityParameters) GetDataSourceId() string {
	if x != nil && x.DataSourceId != nil {
		return *x.DataSourceId
	}
	return ""
}

var File_vega_commands_v1_commands_proto protoreflect.FileDescriptor

var file_vega_commands_v1_commands_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x29, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x76, 0x65, 0x67, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x03, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a,
	0x0a, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x43, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62, 0x0a, 0x18, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x65,
	0x73, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x66, 0x61, 0x6c,
	0x6c, 0x73, 0x5f, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x48, 0x01, 0x52, 0x0a, 0x66, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x69, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x76,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x62, 0x65, 0x6c, 0x6f,
	0x77, 0x22, 0xb8, 0x04, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x12, 0x4c, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48,
	0x02, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x03, 0x52, 0x13, 0x73, 0x69, 0x7a, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x56, 0x0a, 0x13, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x69, 0x7a, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x04, 0x52, 0x11, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83, 0x01, 0x0a,
	0x16, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3b, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x0c, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x63, 0x65, 0x62, 0x65, 0x72, 0x67, 0x5f, 0x6f, 0x70, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x63, 0x65, 0x62, 0x65,
	0x72, 0x67, 0x4f, 0x70, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x63, 0x65, 0x62, 0x65, 0x72,
	0x67, 0x4f, 0x70, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x63, 0x65,
	0x62, 0x65, 0x72, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0b, 0x49, 0x63, 0x65,
	0x62, 0x65, 0x72, 0x67, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x65, 0x61,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x22, 0x4d, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x52,
	0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x53,
	0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x4b, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x85,
	0x03, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x67,
	0x67, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x65, 0x67,
	0x67, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x67, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x3d, 0x0a,
	0x1e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x22, 0x67, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x45, 0x78, 0x74, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x38, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x65, 0x22, 0x59, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0x52, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x4e, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48,
	0x10, 0x02, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x8c, 0x03, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x2f, 0x0a, 0x0e, 0x4f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x20, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x64, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x31, 0x0a, 0x0e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xaf, 0x01, 0x0a, 0x0f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0xe8, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x41, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x1a, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x1a,
	0xb1, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xda, 0x02, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0xcf,
	0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x4c, 0x0a, 0x11, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x10, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x2a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x06, 0x0a, 0x09,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x4d, 0x4d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x4d, 0x4d, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x1f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12,
	0x44, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x1a, 0x8f, 0x03, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x22, 0xac, 0x07, 0x0a, 0x08, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x4d, 0x4d, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x21,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64,
	0x41, 0x4d, 0x4d, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x01, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x88, 0x01, 0x01, 0x1a, 0x8f, 0x03, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x14, 0x6c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x24, 0x0a, 0x22,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x22,
	0xb4, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x4d, 0x4d, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x41, 0x4d, 0x4d, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x4e, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x22, 0x58, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x33, 0x5a, 0x31, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_commands_v1_commands_proto_rawDescOnce sync.Once
	file_vega_commands_v1_commands_proto_rawDescData = file_vega_commands_v1_commands_proto_rawDesc
)

func file_vega_commands_v1_commands_proto_rawDescGZIP() []byte {
	file_vega_commands_v1_commands_proto_rawDescOnce.Do(func() {
		file_vega_commands_v1_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_commands_v1_commands_proto_rawDescData)
	})
	return file_vega_commands_v1_commands_proto_rawDescData
}

var file_vega_commands_v1_commands_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vega_commands_v1_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_vega_commands_v1_commands_proto_goTypes = []interface{}{
	(UpdateMarginMode_Mode)(0),                        // 0: vega.commands.v1.UpdateMarginMode.Mode
	(UndelegateSubmission_Method)(0),                  // 1: vega.commands.v1.UndelegateSubmission.Method
	(CancelAMM_Method)(0),                             // 2: vega.commands.v1.CancelAMM.Method
	(*BatchMarketInstructions)(nil),                   // 3: vega.commands.v1.BatchMarketInstructions
	(*StopOrdersSubmission)(nil),                      // 4: vega.commands.v1.StopOrdersSubmission
	(*StopOrderSetup)(nil),                            // 5: vega.commands.v1.StopOrderSetup
	(*StopOrdersCancellation)(nil),                    // 6: vega.commands.v1.StopOrdersCancellation
	(*OrderSubmission)(nil),                           // 7: vega.commands.v1.OrderSubmission
	(*IcebergOpts)(nil),                               // 8: vega.commands.v1.IcebergOpts
	(*UpdateMarginMode)(nil),                          // 9: vega.commands.v1.UpdateMarginMode
	(*OrderCancellation)(nil),                         // 10: vega.commands.v1.OrderCancellation
	(*OrderAmendment)(nil),                            // 11: vega.commands.v1.OrderAmendment
	(*LiquidityProvisionSubmission)(nil),              // 12: vega.commands.v1.LiquidityProvisionSubmission
	(*LiquidityProvisionCancellation)(nil),            // 13: vega.commands.v1.LiquidityProvisionCancellation
	(*LiquidityProvisionAmendment)(nil),               // 14: vega.commands.v1.LiquidityProvisionAmendment
	(*WithdrawSubmission)(nil),                        // 15: vega.commands.v1.WithdrawSubmission
	(*ProposalSubmission)(nil),                        // 16: vega.commands.v1.ProposalSubmission
	(*BatchProposalSubmissionTerms)(nil),              // 17: vega.commands.v1.BatchProposalSubmissionTerms
	(*BatchProposalSubmission)(nil),                   // 18: vega.commands.v1.BatchProposalSubmission
	(*VoteSubmission)(nil),                            // 19: vega.commands.v1.VoteSubmission
	(*DelegateSubmission)(nil),                        // 20: vega.commands.v1.DelegateSubmission
	(*UndelegateSubmission)(nil),                      // 21: vega.commands.v1.UndelegateSubmission
	(*Transfer)(nil),                                  // 22: vega.commands.v1.Transfer
	(*OneOffTransfer)(nil),                            // 23: vega.commands.v1.OneOffTransfer
	(*RecurringTransfer)(nil),                         // 24: vega.commands.v1.RecurringTransfer
	(*CancelTransfer)(nil),                            // 25: vega.commands.v1.CancelTransfer
	(*IssueSignatures)(nil),                           // 26: vega.commands.v1.IssueSignatures
	(*CreateReferralSet)(nil),                         // 27: vega.commands.v1.CreateReferralSet
	(*UpdateReferralSet)(nil),                         // 28: vega.commands.v1.UpdateReferralSet
	(*ApplyReferralCode)(nil),                         // 29: vega.commands.v1.ApplyReferralCode
	(*JoinTeam)(nil),                                  // 30: vega.commands.v1.JoinTeam
	(*UpdatePartyProfile)(nil),                        // 31: vega.commands.v1.UpdatePartyProfile
	(*SubmitAMM)(nil),                                 // 32: vega.commands.v1.SubmitAMM
	(*AmendAMM)(nil),                                  // 33: vega.commands.v1.AmendAMM
	(*CancelAMM)(nil),                                 // 34: vega.commands.v1.CancelAMM
	(*DelayedTransactionsWrapper)(nil),                // 35: vega.commands.v1.DelayedTransactionsWrapper
	(*CreateReferralSet_Team)(nil),                    // 36: vega.commands.v1.CreateReferralSet.Team
	(*UpdateReferralSet_Team)(nil),                    // 37: vega.commands.v1.UpdateReferralSet.Team
	(*SubmitAMM_ConcentratedLiquidityParameters)(nil), // 38: vega.commands.v1.SubmitAMM.ConcentratedLiquidityParameters
	(*AmendAMM_ConcentratedLiquidityParameters)(nil),  // 39: vega.commands.v1.AmendAMM.ConcentratedLiquidityParameters
	(vega.StopOrder_ExpiryStrategy)(0),                // 40: vega.StopOrder.ExpiryStrategy
	(vega.StopOrder_SizeOverrideSetting)(0),           // 41: vega.StopOrder.SizeOverrideSetting
	(*vega.StopOrder_SizeOverrideValue)(nil),          // 42: vega.StopOrder.SizeOverrideValue
	(vega.Side)(0),                                    // 43: vega.Side
	(vega.Order_TimeInForce)(0),                       // 44: vega.Order.TimeInForce
	(vega.Order_Type)(0),                              // 45: vega.Order.Type
	(*vega.PeggedOrder)(nil),                          // 46: vega.PeggedOrder
	(vega.PeggedReference)(0),                         // 47: vega.PeggedReference
	(*vega.WithdrawExt)(nil),                          // 48: vega.WithdrawExt
	(*vega.ProposalTerms)(nil),                        // 49: vega.ProposalTerms
	(*vega.ProposalRationale)(nil),                    // 50: vega.ProposalRationale
	(*vega.BatchProposalTermsChange)(nil),             // 51: vega.BatchProposalTermsChange
	(vega.Vote_Value)(0),                              // 52: vega.Vote.Value
	(vega.AccountType)(0),                             // 53: vega.AccountType
	(*vega.DispatchStrategy)(nil),                     // 54: vega.DispatchStrategy
	(NodeSignatureKind)(0),                            // 55: vega.commands.v1.NodeSignatureKind
	(*vega.Metadata)(nil),                             // 56: vega.Metadata
}
var file_vega_commands_v1_commands_proto_depIdxs = []int32{
	10, // 0: vega.commands.v1.BatchMarketInstructions.cancellations:type_name -> vega.commands.v1.OrderCancellation
	11, // 1: vega.commands.v1.BatchMarketInstructions.amendments:type_name -> vega.commands.v1.OrderAmendment
	7,  // 2: vega.commands.v1.BatchMarketInstructions.submissions:type_name -> vega.commands.v1.OrderSubmission
	6,  // 3: vega.commands.v1.BatchMarketInstructions.stop_orders_cancellation:type_name -> vega.commands.v1.StopOrdersCancellation
	4,  // 4: vega.commands.v1.BatchMarketInstructions.stop_orders_submission:type_name -> vega.commands.v1.StopOrdersSubmission
	9,  // 5: vega.commands.v1.BatchMarketInstructions.update_margin_mode:type_name -> vega.commands.v1.UpdateMarginMode
	5,  // 6: vega.commands.v1.StopOrdersSubmission.rises_above:type_name -> vega.commands.v1.StopOrderSetup
	5,  // 7: vega.commands.v1.StopOrdersSubmission.falls_below:type_name -> vega.commands.v1.StopOrderSetup
	7,  // 8: vega.commands.v1.StopOrderSetup.order_submission:type_name -> vega.commands.v1.OrderSubmission
	40, // 9: vega.commands.v1.StopOrderSetup.expiry_strategy:type_name -> vega.StopOrder.ExpiryStrategy
	41, // 10: vega.commands.v1.StopOrderSetup.size_override_setting:type_name -> vega.StopOrder.SizeOverrideSetting
	42, // 11: vega.commands.v1.StopOrderSetup.size_override_value:type_name -> vega.StopOrder.SizeOverrideValue
	43, // 12: vega.commands.v1.OrderSubmission.side:type_name -> vega.Side
	44, // 13: vega.commands.v1.OrderSubmission.time_in_force:type_name -> vega.Order.TimeInForce
	45, // 14: vega.commands.v1.OrderSubmission.type:type_name -> vega.Order.Type
	46, // 15: vega.commands.v1.OrderSubmission.pegged_order:type_name -> vega.PeggedOrder
	8,  // 16: vega.commands.v1.OrderSubmission.iceberg_opts:type_name -> vega.commands.v1.IcebergOpts
	0,  // 17: vega.commands.v1.UpdateMarginMode.mode:type_name -> vega.commands.v1.UpdateMarginMode.Mode
	44, // 18: vega.commands.v1.OrderAmendment.time_in_force:type_name -> vega.Order.TimeInForce
	47, // 19: vega.commands.v1.OrderAmendment.pegged_reference:type_name -> vega.PeggedReference
	48, // 20: vega.commands.v1.WithdrawSubmission.ext:type_name -> vega.WithdrawExt
	49, // 21: vega.commands.v1.ProposalSubmission.terms:type_name -> vega.ProposalTerms
	50, // 22: vega.commands.v1.ProposalSubmission.rationale:type_name -> vega.ProposalRationale
	51, // 23: vega.commands.v1.BatchProposalSubmissionTerms.changes:type_name -> vega.BatchProposalTermsChange
	17, // 24: vega.commands.v1.BatchProposalSubmission.terms:type_name -> vega.commands.v1.BatchProposalSubmissionTerms
	50, // 25: vega.commands.v1.BatchProposalSubmission.rationale:type_name -> vega.ProposalRationale
	52, // 26: vega.commands.v1.VoteSubmission.value:type_name -> vega.Vote.Value
	1,  // 27: vega.commands.v1.UndelegateSubmission.method:type_name -> vega.commands.v1.UndelegateSubmission.Method
	53, // 28: vega.commands.v1.Transfer.from_account_type:type_name -> vega.AccountType
	53, // 29: vega.commands.v1.Transfer.to_account_type:type_name -> vega.AccountType
	23, // 30: vega.commands.v1.Transfer.one_off:type_name -> vega.commands.v1.OneOffTransfer
	24, // 31: vega.commands.v1.Transfer.recurring:type_name -> vega.commands.v1.RecurringTransfer
	54, // 32: vega.commands.v1.RecurringTransfer.dispatch_strategy:type_name -> vega.DispatchStrategy
	55, // 33: vega.commands.v1.IssueSignatures.kind:type_name -> vega.commands.v1.NodeSignatureKind
	36, // 34: vega.commands.v1.CreateReferralSet.team:type_name -> vega.commands.v1.CreateReferralSet.Team
	37, // 35: vega.commands.v1.UpdateReferralSet.team:type_name -> vega.commands.v1.UpdateReferralSet.Team
	56, // 36: vega.commands.v1.UpdatePartyProfile.metadata:type_name -> vega.Metadata
	38, // 37: vega.commands.v1.SubmitAMM.concentrated_liquidity_parameters:type_name -> vega.commands.v1.SubmitAMM.ConcentratedLiquidityParameters
	39, // 38: vega.commands.v1.AmendAMM.concentrated_liquidity_parameters:type_name -> vega.commands.v1.AmendAMM.ConcentratedLiquidityParameters
	2,  // 39: vega.commands.v1.CancelAMM.method:type_name -> vega.commands.v1.CancelAMM.Method
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_vega_commands_v1_commands_proto_init() }
func file_vega_commands_v1_commands_proto_init() {
	if File_vega_commands_v1_commands_proto != nil {
		return
	}
	file_vega_commands_v1_validator_commands_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vega_commands_v1_commands_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMarketInstructions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopOrdersSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopOrderSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopOrdersCancellation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcebergOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarginMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancellation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAmendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionCancellation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionAmendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProposalSubmissionTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProposalSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndelegateSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOffTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReferralSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReferralSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyReferralCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePartyProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitAMM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendAMM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAMM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayedTransactionsWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReferralSet_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReferralSet_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitAMM_ConcentratedLiquidityParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendAMM_ConcentratedLiquidityParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_commands_v1_commands_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*StopOrderSetup_Price)(nil),
		(*StopOrderSetup_TrailingPercentOffset)(nil),
	}
	file_vega_commands_v1_commands_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Transfer_OneOff)(nil),
		(*Transfer_Recurring)(nil),
	}
	file_vega_commands_v1_commands_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[36].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_commands_v1_commands_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_commands_v1_commands_proto_goTypes,
		DependencyIndexes: file_vega_commands_v1_commands_proto_depIdxs,
		EnumInfos:         file_vega_commands_v1_commands_proto_enumTypes,
		MessageInfos:      file_vega_commands_v1_commands_proto_msgTypes,
	}.Build()
	File_vega_commands_v1_commands_proto = out.File
	file_vega_commands_v1_commands_proto_rawDesc = nil
	file_vega_commands_v1_commands_proto_goTypes = nil
	file_vega_commands_v1_commands_proto_depIdxs = nil
}
