// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/vault (interfaces: TimeService,Collateral)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	types "code.vegaprotocol.io/vega/core/types"
	num "code.vegaprotocol.io/vega/libs/num"
	gomock "github.com/golang/mock/gomock"
)

// MockTimeService is a mock of TimeService interface.
type MockTimeService struct {
	ctrl     *gomock.Controller
	recorder *MockTimeServiceMockRecorder
}

// MockTimeServiceMockRecorder is the mock recorder for MockTimeService.
type MockTimeServiceMockRecorder struct {
	mock *MockTimeService
}

// NewMockTimeService creates a new mock instance.
func NewMockTimeService(ctrl *gomock.Controller) *MockTimeService {
	mock := &MockTimeService{ctrl: ctrl}
	mock.recorder = &MockTimeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeService) EXPECT() *MockTimeServiceMockRecorder {
	return m.recorder
}

// GetTimeNow mocks base method.
func (m *MockTimeService) GetTimeNow() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeNow")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimeNow indicates an expected call of GetTimeNow.
func (mr *MockTimeServiceMockRecorder) GetTimeNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeNow", reflect.TypeOf((*MockTimeService)(nil).GetTimeNow))
}

// MockCollateral is a mock of Collateral interface.
type MockCollateral struct {
	ctrl     *gomock.Controller
	recorder *MockCollateralMockRecorder
}

// MockCollateralMockRecorder is the mock recorder for MockCollateral.
type MockCollateralMockRecorder struct {
	mock *MockCollateral
}

// NewMockCollateral creates a new mock instance.
func NewMockCollateral(ctrl *gomock.Controller) *MockCollateral {
	mock := &MockCollateral{ctrl: ctrl}
	mock.recorder = &MockCollateralMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollateral) EXPECT() *MockCollateralMockRecorder {
	return m.recorder
}

// CloseVaultAccount mocks base method.
func (m *MockCollateral) CloseVaultAccount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseVaultAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseVaultAccount indicates an expected call of CloseVaultAccount.
func (mr *MockCollateralMockRecorder) CloseVaultAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseVaultAccount", reflect.TypeOf((*MockCollateral)(nil).CloseVaultAccount), arg0, arg1)
}

// CreateVaultAccount mocks base method.
func (m *MockCollateral) CreateVaultAccount(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVaultAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVaultAccount indicates an expected call of CreateVaultAccount.
func (mr *MockCollateralMockRecorder) CreateVaultAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVaultAccount", reflect.TypeOf((*MockCollateral)(nil).CreateVaultAccount), arg0, arg1, arg2)
}

// DepositToVault mocks base method.
func (m *MockCollateral) DepositToVault(arg0 context.Context, arg1, arg2, arg3 string, arg4 *num.Uint) (*types.LedgerMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositToVault", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types.LedgerMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DepositToVault indicates an expected call of DepositToVault.
func (mr *MockCollateralMockRecorder) DepositToVault(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositToVault", reflect.TypeOf((*MockCollateral)(nil).DepositToVault), arg0, arg1, arg2, arg3, arg4)
}

// GetVaultBalance mocks base method.
func (m *MockCollateral) GetVaultBalance(arg0, arg1 string) (*num.Uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaultBalance", arg0, arg1)
	ret0, _ := ret[0].(*num.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultBalance indicates an expected call of GetVaultBalance.
func (mr *MockCollateralMockRecorder) GetVaultBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultBalance", reflect.TypeOf((*MockCollateral)(nil).GetVaultBalance), arg0, arg1)
}

// GetVaultLiquidBalance mocks base method.
func (m *MockCollateral) GetVaultLiquidBalance(arg0, arg1 string) (*num.Uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVaultLiquidBalance", arg0, arg1)
	ret0, _ := ret[0].(*num.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVaultLiquidBalance indicates an expected call of GetVaultLiquidBalance.
func (mr *MockCollateralMockRecorder) GetVaultLiquidBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVaultLiquidBalance", reflect.TypeOf((*MockCollateral)(nil).GetVaultLiquidBalance), arg0, arg1)
}

// WithdrawFromVault mocks base method.
func (m *MockCollateral) WithdrawFromVault(arg0 context.Context, arg1, arg2, arg3 string, arg4 *num.Uint) (*types.LedgerMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromVault", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types.LedgerMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawFromVault indicates an expected call of WithdrawFromVault.
func (mr *MockCollateralMockRecorder) WithdrawFromVault(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromVault", reflect.TypeOf((*MockCollateral)(nil).WithdrawFromVault), arg0, arg1, arg2, arg3, arg4)
}
