syntax = "proto3";

package vega;

import "vega/data_source.proto";

option go_package = "code.vegaprotocol.io/vega/protos/vega";

// Auction duration is used to configure 3 auction periods:
// 1. `duration > 0`, `volume == 0`:
//   The auction will last for at least N seconds
// 2. `duration == 0`, `volume > 0`:
//   The auction will end once the given volume will match at uncrossing
// 3. `duration > 0`, `volume > 0`:
//   The auction will take at least N seconds, but can end sooner if the market can trade a certain volume
message AuctionDuration {
  // Duration of the auction in seconds.
  int64 duration = 1;
  // Target uncrossing trading volume.
  uint64 volume = 2;
}

// Future product definition
message Future {
  // Underlying asset for the future.
  string settlement_asset = 1;
  // Quote name of the instrument.
  string quote_name = 2;
  // Data source specification that describes the settlement data source filter.
  vega.DataSourceSpec data_source_spec_for_settlement_data = 3;

  // Data source specification that describes the trading termination data source filter.
  vega.DataSourceSpec data_source_spec_for_trading_termination = 4;

  // Binding between the data spec and the data source.
  DataSourceSpecToFutureBinding data_source_spec_binding = 5;
}

// DataSourceSpecToFutureBinding describes which property of the data source data is to be
// used as settlement data and which to use as the trading terminated trigger
message DataSourceSpecToFutureBinding {
  // Name of the property in the source data that should be used as settlement data.
  // If it is set to "prices.BTC.value", then the Future will use the value of
  // this property as settlement data.
  string settlement_data_property = 1;
  // Name of the property in the data source data that signals termination of trading.
  string trading_termination_property = 2;
}

// Instrument metadata definition
message InstrumentMetadata {
  // List of 0 or more tags.
  repeated string tags = 1;
}

// Instrument definition
message Instrument {
  // Unique instrument ID.
  string id = 1;
  // Code for the instrument.
  string code = 2;
  // Name of the instrument.
  string name = 3;
  // Collection of instrument meta-data.
  InstrumentMetadata metadata = 4;
  // Product the instrument is composed of.
  oneof product {
    // Future.
    Future future = 100;
  }
}

// Risk model for log normal
message LogNormalRiskModel {
  // Risk Aversion Parameter.
  double risk_aversion_parameter = 1;
  // Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall
  // calculation to obtain the maintenance margin, must be a strictly non-negative real number.
  double tau = 2;
  // Risk model parameters for log normal.
  LogNormalModelParams params = 3;
}

// Risk model parameters for log normal
message LogNormalModelParams {
  // Mu parameter, annualised growth rate of the underlying asset.
  double mu = 1;
  // R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.
  double r = 2;
  // Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.
  double sigma = 3;
}

// Risk model for simple modelling
message SimpleRiskModel {
  // Risk model params for simple modelling.
  SimpleModelParams params = 1;
}

// Risk model parameters for simple modelling
message SimpleModelParams {
  // Pre-defined risk factor value for long.
  double factor_long = 1;
  // Pre-defined risk factor value for short.
  double factor_short = 2;
  // Pre-defined maximum price move up that the model considers as valid.
  double max_move_up = 3;
  // Pre-defined minimum price move down that the model considers as valid.
  double min_move_down = 4;
  // Pre-defined constant probability of trading.
  double probability_of_trading = 5;
}

// Scaling Factors (for use in margin calculation)
message ScalingFactors {
  // Collateral search level. If collateral dips below this value,
  // the system will search for collateral to release.
  double search_level = 1;
  // Initial margin level. This is the minimum amount of collateral
  // required to open a position in a market that requires margin.
  double initial_margin = 2;
  // Collateral release level. If a trader has collateral above this level,
  // the system will release collateral to a trader's general collateral account
  // for the asset.
  double collateral_release = 3;
}

// Margin Calculator definition
message MarginCalculator {
  // Scaling factors for margin calculation.
  ScalingFactors scaling_factors = 1;
}

// Tradable Instrument definition
message TradableInstrument {
  // Details for the underlying instrument.
  Instrument instrument = 1;
  // Margin calculator for the instrument.
  MarginCalculator margin_calculator = 2;
  // Risk model for use by the instrument.
  oneof risk_model {
    // Log normal.
    LogNormalRiskModel log_normal_risk_model = 100;
    // Simple.
    SimpleRiskModel simple_risk_model = 101;
  }
}

// Fee factors definition
message FeeFactors {
  // Market maker fee charged network wide.
  string maker_fee = 1;
  // Infrastructure fee charged network wide for staking and governance.
  string infrastructure_fee = 2;
  // Liquidity fee applied per market for market making.
  string liquidity_fee = 3;
}

// Fees definition
message Fees {
  // Fee factors.
  FeeFactors factors = 1;
}

// PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration
message PriceMonitoringTrigger {
  // Price monitoring projection horizon τ in seconds.
  int64 horizon = 1;
  // Price monitoring probability level p.
  string probability = 2;
  // Price monitoring auction extension duration in seconds should the price
  // breach its theoretical level over the specified horizon at the specified
  // probability level.
  int64 auction_extension = 3;
}

// PriceMonitoringParameters contains a collection of triggers to be used for a given market
message PriceMonitoringParameters {
  repeated PriceMonitoringTrigger triggers = 1;
}

// PriceMonitoringSettings contains the settings for price monitoring
message PriceMonitoringSettings {
  // Specifies price monitoring parameters to be used for price monitoring purposes.
  PriceMonitoringParameters parameters = 1;
}

// LiquidityMonitoringParameters contains settings used for liquidity monitoring
message LiquidityMonitoringParameters {
  // Specifies parameters related to target stake calculation.
  TargetStakeParameters target_stake_parameters = 1;
  // Specifies the triggering ratio for entering liquidity auction.
  string triggering_ratio = 2;
  // Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction.
  int64 auction_extension = 3;
}

// TargetStakeParameters contains parameters used in target stake calculation
message TargetStakeParameters {
  // Specifies length of time window expressed in seconds for target stake calculation.
  int64 time_window = 1;
  // Specifies scaling factors used in target stake calculation.
  double scaling_factor = 2;
}

// Market definition
message Market {
  // Current state of the market
  enum State {
    // Default value, invalid
    STATE_UNSPECIFIED = 0;
    // Governance proposal valid and accepted
    STATE_PROPOSED = 1;
    // Outcome of governance votes is to reject the market
    STATE_REJECTED = 2;
    // Governance vote passes/wins
    STATE_PENDING = 3;
    // Market triggers cancellation condition or governance
    // votes to close before market becomes Active
    STATE_CANCELLED = 4;
    // Enactment date reached and usual auction exit checks pass
    STATE_ACTIVE = 5;
    // Price monitoring or liquidity monitoring trigger
    STATE_SUSPENDED = 6;
    // Governance vote to close (Not currently implemented)
    STATE_CLOSED = 7;
    // Defined by the product (i.e. from a product parameter,
    // specified in market definition, giving close date/time)
    STATE_TRADING_TERMINATED = 8;
    // Settlement triggered and completed as defined by product
    STATE_SETTLED = 9;
  }

  // Trading mode the market is currently running, also referred to as 'market state'
  enum TradingMode {
    // Default value, this is invalid
    TRADING_MODE_UNSPECIFIED = 0;
    // Normal trading
    TRADING_MODE_CONTINUOUS = 1;
    // Auction trading (FBA)
    TRADING_MODE_BATCH_AUCTION = 2;
    // Opening auction
    TRADING_MODE_OPENING_AUCTION = 3;
    // Auction triggered by monitoring
    TRADING_MODE_MONITORING_AUCTION = 4;
    // No trading is allowed
    TRADING_MODE_NO_TRADING = 5;

    // Note: If adding an enum value, add a matching entry in:
    //       - gateway/graphql/helpers_enum.go
    //       - gateway/graphql/schema.graphql (enum MarketTradingMode)
  }

  // Unique ID for the market.
  string id = 1;
  // Tradable instrument configuration.
  TradableInstrument tradable_instrument = 2;
  // Number of decimal places that a price must be shifted by in order to get a
  // correct price denominated in the currency of the market, for example:
  // `realPrice = price / 10^decimalPlaces`.
  uint64 decimal_places = 3;
  // Fees configuration that apply to the market.
  Fees fees = 4;
  // Auction duration specifies how long the opening auction will run (minimum
  // duration and optionally a minimum traded volume).
  AuctionDuration opening_auction = 5;
  // PriceMonitoringSettings for the market.
  PriceMonitoringSettings price_monitoring_settings = 6;
  // LiquidityMonitoringParameters for the market.
  LiquidityMonitoringParameters liquidity_monitoring_parameters = 7;
  // Current mode of execution of the market.
  TradingMode trading_mode = 8;
  // Current state of the market.
  State state = 9;
  // Timestamps for when the market state changes.
  MarketTimestamps market_timestamps = 10;
  // The number of decimal places for a position.
  int64 position_decimal_places = 11;
  // Percentage move up and down from the mid price which specifies the range of
  // price levels over which automated liquidity provision orders will be deployed.
  string lp_price_range = 12;
  // Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
  string linear_slippage_factor = 13;
  // Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
  string quadratic_slippage_factor = 14;
}

// Time stamps for important times about creating, enacting etc the market
message MarketTimestamps {
  // Time when the market is first proposed.
  int64 proposed = 1;
  // Time when the market has been voted in and began its opening auction.
  int64 pending = 2;
  // Time when the market has left the opening auction and is ready to accept trades.
  int64 open = 3;
  // Time when the market closed.
  int64 close = 4;
}
