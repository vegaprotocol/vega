// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/api (interfaces: CheckpointService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v1 "code.vegaprotocol.io/protos/data-node/api/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckpointService is a mock of CheckpointService interface.
type MockCheckpointService struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointServiceMockRecorder
}

// MockCheckpointServiceMockRecorder is the mock recorder for MockCheckpointService.
type MockCheckpointServiceMockRecorder struct {
	mock *MockCheckpointService
}

// NewMockCheckpointService creates a new mock instance.
func NewMockCheckpointService(ctrl *gomock.Controller) *MockCheckpointService {
	mock := &MockCheckpointService{ctrl: ctrl}
	mock.recorder = &MockCheckpointServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointService) EXPECT() *MockCheckpointServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockCheckpointService) GetAll() ([]*v1.Checkpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*v1.Checkpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCheckpointServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCheckpointService)(nil).GetAll))
}
