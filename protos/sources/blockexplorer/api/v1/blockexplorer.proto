syntax = "proto3";

package blockexplorer.api.v1;

import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "vega/commands/v1/signature.proto";
import "vega/commands/v1/transaction.proto";

option go_package = "code.vegaprotocol.io/vega/protos/blockexplorer/api/v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Vega block explorer APIs";
    version: "v0.74.0-dev";
  }
  schemes: [
    HTTP,
    HTTPS
  ]
  host: "lb.testnet.vega.xyz"
};

service BlockExplorerService {
  // Get transaction
  //
  // Get a transaction from the Vega blockchain
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {}

  // List transactions
  //
  // List transactions from the Vega blockchain from the newest to the oldest transactions.
  rpc ListTransactions(ListTransactionsRequest) returns (ListTransactionsResponse) {}

  // Info
  //
  // Get information about the block explorer.
  // Response contains a semver formatted version of the data node and the commit hash, from which the block explorer was built
  rpc Info(InfoRequest) returns (InfoResponse);
}

// node information
message InfoRequest {}

message InfoResponse {
  // Semver formatted version of the data node
  string version = 1;
  // Commit hash from which the data node was built
  string commit_hash = 2;
}

message GetTransactionRequest {
  // Hash of the transaction
  string hash = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetTransactionResponse {
  // Transaction corresponding to the hash
  Transaction transaction = 1;
}

message ListTransactionsRequest {
  reserved 1;
  // Cursor to paginate the request. It can be used in conjunction with the `after` cursor.
  optional string before = 2;
  // Cursor to paginate the request. It can be used in conjunction with the `before` cursor.
  optional string after = 3;
  // Filters to apply to the request
  map<string, string> filters = 4;
  // Transaction command types filter, for listing transactions with specified command types
  repeated string cmd_types = 5;
  // Transaction command types exclusion filter, for listing all the transactions except the ones with specified command types
  repeated string exclude_cmd_types = 6;
  // Party IDs filter, can be sender or receiver
  repeated string parties = 7;
  // Number of transactions to be returned from the blockchain.
  // Use in conjunction with the `after` cursor to paginate forwards. Paginating forwards means toward the most recent
  // transactions.
  // It cannot be used in conjunction with the `before` cursor.
  // On its own, this will return the `first` most recent transactions.
  uint32 first = 8;
  // Number of transactions to be returned from the blockchain.
  // Use in conjunction with the `before` cursor to paginate backwards. Paginating forwards means toward the least recent
  // transactions.
  // It cannot be used in conjunction with the `after` cursor.
  // On its own, this will return the `last` oldest transactions.
  uint32 last = 9;
}

message ListTransactionsResponse {
  // Transaction corresponding to the specific request and filters
  repeated Transaction transactions = 3;
}

message Transaction {
  // Height of the block the transaction was found in
  uint64 block = 1;
  // Index of the transaction in the block
  uint32 index = 2;
  // Hash of the transaction
  string hash = 3;
  // Vega public key of the transaction's submitter
  string submitter = 4;
  // Type of transaction
  string type = 5;
  // Results code of the transaction. 0 indicates the transaction was successful
  uint32 code = 6;
  // Cursor for this transaction. This is used for paginating results
  string cursor = 7;
  // Actual command of the transaction
  vega.commands.v1.InputData command = 8;
  // Signature generated by the submitter for the transaction
  vega.commands.v1.Signature signature = 9;
  // Optional error happening when processing / checking the transaction
  // This should be set if error code is not 0
  optional string error = 10;
  // Timestamp when the transaction happened, using RFC3399 format.
  string created_at = 11;
  // Version format of the transaction
  vega.commands.v1.TxVersion version = 12;
  // Proof of Work parameters of the transaction
  vega.commands.v1.ProofOfWork pow = 13;
}
