// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/commands/v1/commands.proto

package v1

import (
	vega "code.vegaprotocol.io/vega/protos/vega"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UndelegateSubmission_Method int32

const (
	UndelegateSubmission_METHOD_UNSPECIFIED     UndelegateSubmission_Method = 0
	UndelegateSubmission_METHOD_NOW             UndelegateSubmission_Method = 1
	UndelegateSubmission_METHOD_AT_END_OF_EPOCH UndelegateSubmission_Method = 2
	UndelegateSubmission_METHOD_IN_ANGER        UndelegateSubmission_Method = 3
)

// Enum value maps for UndelegateSubmission_Method.
var (
	UndelegateSubmission_Method_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "METHOD_NOW",
		2: "METHOD_AT_END_OF_EPOCH",
		3: "METHOD_IN_ANGER",
	}
	UndelegateSubmission_Method_value = map[string]int32{
		"METHOD_UNSPECIFIED":     0,
		"METHOD_NOW":             1,
		"METHOD_AT_END_OF_EPOCH": 2,
		"METHOD_IN_ANGER":        3,
	}
)

func (x UndelegateSubmission_Method) Enum() *UndelegateSubmission_Method {
	p := new(UndelegateSubmission_Method)
	*p = x
	return p
}

func (x UndelegateSubmission_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UndelegateSubmission_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_commands_v1_commands_proto_enumTypes[0].Descriptor()
}

func (UndelegateSubmission_Method) Type() protoreflect.EnumType {
	return &file_vega_commands_v1_commands_proto_enumTypes[0]
}

func (x UndelegateSubmission_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UndelegateSubmission_Method.Descriptor instead.
func (UndelegateSubmission_Method) EnumDescriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{10, 0}
}

// An order submission is a request to submit or create a new order on Vega
type OrderSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the order, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places,
	// , required field for limit orders, however it is not required for market orders
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of contracts, cannot be negative
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Side for the order, e.g. SIDE_BUY or SIDE_SELL, required field
	// - See `Side`
	Side vega.Side `protobuf:"varint,4,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires, required field
	// - See `Order.TimeInForce`
	TimeInForce vega.Order_TimeInForce `protobuf:"varint,5,opt,name=time_in_force,json=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"time_in_force,omitempty"`
	// Timestamp for when the order will expire, in nanoseconds since the epoch,
	// required field only for `Order.TimeInForce`.TIME_IN_FORCE_GTT`
	// - See `VegaTimeResponse`.`timestamp`
	ExpiresAt int64 `protobuf:"varint,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Type for the order, required field - See `Order.Type`
	Type vega.Order_Type `protobuf:"varint,7,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Reference given for the order, this is typically used to retrieve an order submitted through consensus, currently
	// set internally by the node to return a unique reference identifier for the order submission
	Reference string `protobuf:"bytes,8,opt,name=reference,proto3" json:"reference,omitempty"`
	// Used to specify the details for a pegged order
	// - See `PeggedOrder`
	PeggedOrder *vega.PeggedOrder `protobuf:"bytes,9,opt,name=pegged_order,json=peggedOrder,proto3" json:"pegged_order,omitempty"`
}

func (x *OrderSubmission) Reset() {
	*x = OrderSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSubmission) ProtoMessage() {}

func (x *OrderSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSubmission.ProtoReflect.Descriptor instead.
func (*OrderSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{0}
}

func (x *OrderSubmission) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrderSubmission) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *OrderSubmission) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OrderSubmission) GetSide() vega.Side {
	if x != nil {
		return x.Side
	}
	return vega.Side(0)
}

func (x *OrderSubmission) GetTimeInForce() vega.Order_TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return vega.Order_TimeInForce(0)
}

func (x *OrderSubmission) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *OrderSubmission) GetType() vega.Order_Type {
	if x != nil {
		return x.Type
	}
	return vega.Order_Type(0)
}

func (x *OrderSubmission) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *OrderSubmission) GetPeggedOrder() *vega.PeggedOrder {
	if x != nil {
		return x.PeggedOrder
	}
	return nil
}

// An order cancellation is a request to cancel an existing order on Vega
type OrderCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the order (set by the system after consensus), required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Market identifier for the order, required field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *OrderCancellation) Reset() {
	*x = OrderCancellation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancellation) ProtoMessage() {}

func (x *OrderCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancellation.ProtoReflect.Descriptor instead.
func (*OrderCancellation) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{1}
}

func (x *OrderCancellation) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderCancellation) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// An order amendment is a request to amend or update an existing order on Vega
type OrderAmendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier, this is required to find the order and will not be updated, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Market identifier, this is required to find the order and will not be updated
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Amend the price for the order, if the Price value is set, otherwise price will remain unchanged - See [`Price`](#vega.Price)
	Price *string `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Amend the size for the order by the delta specified:
	// - To reduce the size from the current value set a negative integer value
	// - To increase the size from the current value, set a positive integer value
	// - To leave the size unchanged set a value of zero
	SizeDelta int64 `protobuf:"varint,4,opt,name=size_delta,json=sizeDelta,proto3" json:"size_delta,omitempty"`
	// Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	ExpiresAt *int64 `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	// Amend the time in force for the order, set to TIME_IN_FORCE_UNSPECIFIED to remain unchanged
	// - See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`
	TimeInForce vega.Order_TimeInForce `protobuf:"varint,6,opt,name=time_in_force,json=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"time_in_force,omitempty"`
	// Amend the pegged order offset for the order
	PeggedOffset string `protobuf:"bytes,7,opt,name=pegged_offset,json=peggedOffset,proto3" json:"pegged_offset,omitempty"`
	// Amend the pegged order reference for the order
	// - See [`PeggedReference`](#vega.PeggedReference)
	PeggedReference vega.PeggedReference `protobuf:"varint,8,opt,name=pegged_reference,json=peggedReference,proto3,enum=vega.PeggedReference" json:"pegged_reference,omitempty"`
}

func (x *OrderAmendment) Reset() {
	*x = OrderAmendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAmendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAmendment) ProtoMessage() {}

func (x *OrderAmendment) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAmendment.ProtoReflect.Descriptor instead.
func (*OrderAmendment) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{2}
}

func (x *OrderAmendment) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderAmendment) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrderAmendment) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *OrderAmendment) GetSizeDelta() int64 {
	if x != nil {
		return x.SizeDelta
	}
	return 0
}

func (x *OrderAmendment) GetExpiresAt() int64 {
	if x != nil && x.ExpiresAt != nil {
		return *x.ExpiresAt
	}
	return 0
}

func (x *OrderAmendment) GetTimeInForce() vega.Order_TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return vega.Order_TimeInForce(0)
}

func (x *OrderAmendment) GetPeggedOffset() string {
	if x != nil {
		return x.PeggedOffset
	}
	return ""
}

func (x *OrderAmendment) GetPeggedReference() vega.PeggedReference {
	if x != nil {
		return x.PeggedReference
	}
	return vega.PeggedReference(0)
}

// A liquidity provision submitted for a given market
type LiquidityProvisionSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the order, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Specified as a unitless number that represents the amount of settlement asset of the market
	CommitmentAmount string `protobuf:"bytes,2,opt,name=commitment_amount,json=commitmentAmount,proto3" json:"commitment_amount,omitempty"`
	// Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers
	Fee string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// A set of liquidity sell orders to meet the liquidity provision obligation
	Sells []*vega.LiquidityOrder `protobuf:"bytes,4,rep,name=sells,proto3" json:"sells,omitempty"`
	// A set of liquidity buy orders to meet the liquidity provision obligation
	Buys []*vega.LiquidityOrder `protobuf:"bytes,5,rep,name=buys,proto3" json:"buys,omitempty"`
	// A reference to be added to every order created out of this liquidityProvisionSubmission
	Reference string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *LiquidityProvisionSubmission) Reset() {
	*x = LiquidityProvisionSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionSubmission) ProtoMessage() {}

func (x *LiquidityProvisionSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionSubmission.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{3}
}

func (x *LiquidityProvisionSubmission) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityProvisionSubmission) GetCommitmentAmount() string {
	if x != nil {
		return x.CommitmentAmount
	}
	return ""
}

func (x *LiquidityProvisionSubmission) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *LiquidityProvisionSubmission) GetSells() []*vega.LiquidityOrder {
	if x != nil {
		return x.Sells
	}
	return nil
}

func (x *LiquidityProvisionSubmission) GetBuys() []*vega.LiquidityOrder {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *LiquidityProvisionSubmission) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Cancel a liquidity provision request
type LiquidityProvisionCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"` // Unique ID for the market with the liquidity provision to be cancelled
}

func (x *LiquidityProvisionCancellation) Reset() {
	*x = LiquidityProvisionCancellation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionCancellation) ProtoMessage() {}

func (x *LiquidityProvisionCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionCancellation.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionCancellation) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{4}
}

func (x *LiquidityProvisionCancellation) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Amend a liquidity provision request
type LiquidityProvisionAmendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"` // Unique ID for the market with the liquidity provision to be amended
	// From here at least one of the following is required to consider the command valid
	CommitmentAmount string                 `protobuf:"bytes,2,opt,name=commitment_amount,json=commitmentAmount,proto3" json:"commitment_amount,omitempty"` // an empty strings means no change
	Fee              string                 `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`                                                   // an empty strings means no change
	Sells            []*vega.LiquidityOrder `protobuf:"bytes,4,rep,name=sells,proto3" json:"sells,omitempty"`                                               // empty slice means no change
	Buys             []*vega.LiquidityOrder `protobuf:"bytes,5,rep,name=buys,proto3" json:"buys,omitempty"`                                                 // empty slice means no change
	Reference        string                 `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`                                       // empty string means no change
}

func (x *LiquidityProvisionAmendment) Reset() {
	*x = LiquidityProvisionAmendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionAmendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionAmendment) ProtoMessage() {}

func (x *LiquidityProvisionAmendment) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionAmendment.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionAmendment) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{5}
}

func (x *LiquidityProvisionAmendment) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityProvisionAmendment) GetCommitmentAmount() string {
	if x != nil {
		return x.CommitmentAmount
	}
	return ""
}

func (x *LiquidityProvisionAmendment) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *LiquidityProvisionAmendment) GetSells() []*vega.LiquidityOrder {
	if x != nil {
		return x.Sells
	}
	return nil
}

func (x *LiquidityProvisionAmendment) GetBuys() []*vega.LiquidityOrder {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *LiquidityProvisionAmendment) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Represents the submission request to withdraw funds for a party on Vega
type WithdrawSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount to be withdrawn
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The asset to be withdrawn
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Foreign chain specifics
	Ext *vega.WithdrawExt `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (x *WithdrawSubmission) Reset() {
	*x = WithdrawSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawSubmission) ProtoMessage() {}

func (x *WithdrawSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawSubmission.ProtoReflect.Descriptor instead.
func (*WithdrawSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{6}
}

func (x *WithdrawSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *WithdrawSubmission) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *WithdrawSubmission) GetExt() *vega.WithdrawExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

// A command to submit a new proposal for the
// Vega network governance
type ProposalSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal reference
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Proposal configuration and the actual change that is meant to be executed when proposal is enacted
	Terms *vega.ProposalTerms `protobuf:"bytes,2,opt,name=terms,proto3" json:"terms,omitempty"`
	// The rationale behind a proposal.
	Rationale *vega.ProposalRationale `protobuf:"bytes,3,opt,name=rationale,proto3" json:"rationale,omitempty"`
}

func (x *ProposalSubmission) Reset() {
	*x = ProposalSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalSubmission) ProtoMessage() {}

func (x *ProposalSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalSubmission.ProtoReflect.Descriptor instead.
func (*ProposalSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{7}
}

func (x *ProposalSubmission) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ProposalSubmission) GetTerms() *vega.ProposalTerms {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *ProposalSubmission) GetRationale() *vega.ProposalRationale {
	if x != nil {
		return x.Rationale
	}
	return nil
}

// A command to submit a new vote for a governance
// proposal.
type VoteSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the proposal to vote for.
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// The actual value of the vote
	Value vega.Vote_Value `protobuf:"varint,2,opt,name=value,proto3,enum=vega.Vote_Value" json:"value,omitempty"`
}

func (x *VoteSubmission) Reset() {
	*x = VoteSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSubmission) ProtoMessage() {}

func (x *VoteSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSubmission.ProtoReflect.Descriptor instead.
func (*VoteSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{8}
}

func (x *VoteSubmission) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *VoteSubmission) GetValue() vega.Vote_Value {
	if x != nil {
		return x.Value
	}
	return vega.Vote_Value(0)
}

// A command to submit an instruction to delegate some stake to a node
type DelegateSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID for the node to delegate to
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The amount of stake to delegate
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DelegateSubmission) Reset() {
	*x = DelegateSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateSubmission) ProtoMessage() {}

func (x *DelegateSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateSubmission.ProtoReflect.Descriptor instead.
func (*DelegateSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{9}
}

func (x *DelegateSubmission) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *DelegateSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type UndelegateSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// optional, if not specified = ALL
	Amount string                      `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Method UndelegateSubmission_Method `protobuf:"varint,3,opt,name=method,proto3,enum=vega.commands.v1.UndelegateSubmission_Method" json:"method,omitempty"`
}

func (x *UndelegateSubmission) Reset() {
	*x = UndelegateSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndelegateSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndelegateSubmission) ProtoMessage() {}

func (x *UndelegateSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndelegateSubmission.ProtoReflect.Descriptor instead.
func (*UndelegateSubmission) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{10}
}

func (x *UndelegateSubmission) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *UndelegateSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *UndelegateSubmission) GetMethod() UndelegateSubmission_Method {
	if x != nil {
		return x.Method
	}
	return UndelegateSubmission_METHOD_UNSPECIFIED
}

// A transfer initiated by a party
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account type from which the funds of the party
	// should be taken
	FromAccountType vega.AccountType `protobuf:"varint,1,opt,name=from_account_type,json=fromAccountType,proto3,enum=vega.AccountType" json:"from_account_type,omitempty"`
	// The public key of the destination account
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// The type of the destination account
	ToAccountType vega.AccountType `protobuf:"varint,3,opt,name=to_account_type,json=toAccountType,proto3,enum=vega.AccountType" json:"to_account_type,omitempty"`
	// The asset
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The amount to be taken from the source account
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The reference to be attached to the transfer
	Reference string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	// Specific details of the transfer
	//
	// Types that are assignable to Kind:
	//	*Transfer_OneOff
	//	*Transfer_Recurring
	Kind isTransfer_Kind `protobuf_oneof:"kind"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{11}
}

func (x *Transfer) GetFromAccountType() vega.AccountType {
	if x != nil {
		return x.FromAccountType
	}
	return vega.AccountType(0)
}

func (x *Transfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transfer) GetToAccountType() vega.AccountType {
	if x != nil {
		return x.ToAccountType
	}
	return vega.AccountType(0)
}

func (x *Transfer) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (m *Transfer) GetKind() isTransfer_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Transfer) GetOneOff() *OneOffTransfer {
	if x, ok := x.GetKind().(*Transfer_OneOff); ok {
		return x.OneOff
	}
	return nil
}

func (x *Transfer) GetRecurring() *RecurringTransfer {
	if x, ok := x.GetKind().(*Transfer_Recurring); ok {
		return x.Recurring
	}
	return nil
}

type isTransfer_Kind interface {
	isTransfer_Kind()
}

type Transfer_OneOff struct {
	OneOff *OneOffTransfer `protobuf:"bytes,101,opt,name=one_off,json=oneOff,proto3,oneof"`
}

type Transfer_Recurring struct {
	Recurring *RecurringTransfer `protobuf:"bytes,102,opt,name=recurring,proto3,oneof"`
}

func (*Transfer_OneOff) isTransfer_Kind() {}

func (*Transfer_Recurring) isTransfer_Kind() {}

// Specific details for a one off transfer
type OneOffTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unix timestamp in second. Time at which the
	// transfer should be delivered in the to account
	DeliverOn int64 `protobuf:"varint,1,opt,name=deliver_on,json=deliverOn,proto3" json:"deliver_on,omitempty"`
}

func (x *OneOffTransfer) Reset() {
	*x = OneOffTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOffTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOffTransfer) ProtoMessage() {}

func (x *OneOffTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOffTransfer.ProtoReflect.Descriptor instead.
func (*OneOffTransfer) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{12}
}

func (x *OneOffTransfer) GetDeliverOn() int64 {
	if x != nil {
		return x.DeliverOn
	}
	return 0
}

// Specific details for a recurring transfer
type RecurringTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first epoch from which this transfer shall be paid
	StartEpoch uint64 `protobuf:"varint,1,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	// The last epoch at which this transfer shall be paid
	EndEpoch *uint64 `protobuf:"varint,2,opt,name=end_epoch,json=endEpoch,proto3,oneof" json:"end_epoch,omitempty"`
	// factor needs to be > 0
	Factor string `protobuf:"bytes,3,opt,name=factor,proto3" json:"factor,omitempty"`
	// optional parameter defining how a transfer is dispatched
	DispatchStrategy *vega.DispatchStrategy `protobuf:"bytes,4,opt,name=dispatch_strategy,json=dispatchStrategy,proto3" json:"dispatch_strategy,omitempty"`
}

func (x *RecurringTransfer) Reset() {
	*x = RecurringTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringTransfer) ProtoMessage() {}

func (x *RecurringTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringTransfer.ProtoReflect.Descriptor instead.
func (*RecurringTransfer) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{13}
}

func (x *RecurringTransfer) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *RecurringTransfer) GetEndEpoch() uint64 {
	if x != nil && x.EndEpoch != nil {
		return *x.EndEpoch
	}
	return 0
}

func (x *RecurringTransfer) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

func (x *RecurringTransfer) GetDispatchStrategy() *vega.DispatchStrategy {
	if x != nil {
		return x.DispatchStrategy
	}
	return nil
}

// A request for cancelling a recurring transfer
type CancelTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the transfer to cancel
	TransferId string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
}

func (x *CancelTransfer) Reset() {
	*x = CancelTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_commands_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransfer) ProtoMessage() {}

func (x *CancelTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_commands_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransfer.ProtoReflect.Descriptor instead.
func (*CancelTransfer) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_commands_proto_rawDescGZIP(), []int{14}
}

func (x *CancelTransfer) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

var File_vega_commands_v1_commands_proto protoreflect.FileDescriptor

var file_vega_commands_v1_commands_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x15, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x65, 0x67, 0x61,
	0x2f, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x02, 0x0a, 0x0f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x0b, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x11,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x0e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x22,
	0xee, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x62, 0x75,
	0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x3d, 0x0a, 0x1e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22,
	0xed, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73,
	0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x62, 0x75, 0x79,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x67, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x45, 0x78, 0x74, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x22,
	0x59, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xf1, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x22, 0x61, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41,
	0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4e,
	0x47, 0x45, 0x52, 0x10, 0x03, 0x22, 0xea, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x39, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65,
	0x4f, 0x66, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0x2f, 0x0a, 0x0e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x4f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x31, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x42, 0x33, 0x5a, 0x31, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_commands_v1_commands_proto_rawDescOnce sync.Once
	file_vega_commands_v1_commands_proto_rawDescData = file_vega_commands_v1_commands_proto_rawDesc
)

func file_vega_commands_v1_commands_proto_rawDescGZIP() []byte {
	file_vega_commands_v1_commands_proto_rawDescOnce.Do(func() {
		file_vega_commands_v1_commands_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_commands_v1_commands_proto_rawDescData)
	})
	return file_vega_commands_v1_commands_proto_rawDescData
}

var file_vega_commands_v1_commands_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vega_commands_v1_commands_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_vega_commands_v1_commands_proto_goTypes = []interface{}{
	(UndelegateSubmission_Method)(0),       // 0: vega.commands.v1.UndelegateSubmission.Method
	(*OrderSubmission)(nil),                // 1: vega.commands.v1.OrderSubmission
	(*OrderCancellation)(nil),              // 2: vega.commands.v1.OrderCancellation
	(*OrderAmendment)(nil),                 // 3: vega.commands.v1.OrderAmendment
	(*LiquidityProvisionSubmission)(nil),   // 4: vega.commands.v1.LiquidityProvisionSubmission
	(*LiquidityProvisionCancellation)(nil), // 5: vega.commands.v1.LiquidityProvisionCancellation
	(*LiquidityProvisionAmendment)(nil),    // 6: vega.commands.v1.LiquidityProvisionAmendment
	(*WithdrawSubmission)(nil),             // 7: vega.commands.v1.WithdrawSubmission
	(*ProposalSubmission)(nil),             // 8: vega.commands.v1.ProposalSubmission
	(*VoteSubmission)(nil),                 // 9: vega.commands.v1.VoteSubmission
	(*DelegateSubmission)(nil),             // 10: vega.commands.v1.DelegateSubmission
	(*UndelegateSubmission)(nil),           // 11: vega.commands.v1.UndelegateSubmission
	(*Transfer)(nil),                       // 12: vega.commands.v1.Transfer
	(*OneOffTransfer)(nil),                 // 13: vega.commands.v1.OneOffTransfer
	(*RecurringTransfer)(nil),              // 14: vega.commands.v1.RecurringTransfer
	(*CancelTransfer)(nil),                 // 15: vega.commands.v1.CancelTransfer
	(vega.Side)(0),                         // 16: vega.Side
	(vega.Order_TimeInForce)(0),            // 17: vega.Order.TimeInForce
	(vega.Order_Type)(0),                   // 18: vega.Order.Type
	(*vega.PeggedOrder)(nil),               // 19: vega.PeggedOrder
	(vega.PeggedReference)(0),              // 20: vega.PeggedReference
	(*vega.LiquidityOrder)(nil),            // 21: vega.LiquidityOrder
	(*vega.WithdrawExt)(nil),               // 22: vega.WithdrawExt
	(*vega.ProposalTerms)(nil),             // 23: vega.ProposalTerms
	(*vega.ProposalRationale)(nil),         // 24: vega.ProposalRationale
	(vega.Vote_Value)(0),                   // 25: vega.Vote.Value
	(vega.AccountType)(0),                  // 26: vega.AccountType
	(*vega.DispatchStrategy)(nil),          // 27: vega.DispatchStrategy
}
var file_vega_commands_v1_commands_proto_depIdxs = []int32{
	16, // 0: vega.commands.v1.OrderSubmission.side:type_name -> vega.Side
	17, // 1: vega.commands.v1.OrderSubmission.time_in_force:type_name -> vega.Order.TimeInForce
	18, // 2: vega.commands.v1.OrderSubmission.type:type_name -> vega.Order.Type
	19, // 3: vega.commands.v1.OrderSubmission.pegged_order:type_name -> vega.PeggedOrder
	17, // 4: vega.commands.v1.OrderAmendment.time_in_force:type_name -> vega.Order.TimeInForce
	20, // 5: vega.commands.v1.OrderAmendment.pegged_reference:type_name -> vega.PeggedReference
	21, // 6: vega.commands.v1.LiquidityProvisionSubmission.sells:type_name -> vega.LiquidityOrder
	21, // 7: vega.commands.v1.LiquidityProvisionSubmission.buys:type_name -> vega.LiquidityOrder
	21, // 8: vega.commands.v1.LiquidityProvisionAmendment.sells:type_name -> vega.LiquidityOrder
	21, // 9: vega.commands.v1.LiquidityProvisionAmendment.buys:type_name -> vega.LiquidityOrder
	22, // 10: vega.commands.v1.WithdrawSubmission.ext:type_name -> vega.WithdrawExt
	23, // 11: vega.commands.v1.ProposalSubmission.terms:type_name -> vega.ProposalTerms
	24, // 12: vega.commands.v1.ProposalSubmission.rationale:type_name -> vega.ProposalRationale
	25, // 13: vega.commands.v1.VoteSubmission.value:type_name -> vega.Vote.Value
	0,  // 14: vega.commands.v1.UndelegateSubmission.method:type_name -> vega.commands.v1.UndelegateSubmission.Method
	26, // 15: vega.commands.v1.Transfer.from_account_type:type_name -> vega.AccountType
	26, // 16: vega.commands.v1.Transfer.to_account_type:type_name -> vega.AccountType
	13, // 17: vega.commands.v1.Transfer.one_off:type_name -> vega.commands.v1.OneOffTransfer
	14, // 18: vega.commands.v1.Transfer.recurring:type_name -> vega.commands.v1.RecurringTransfer
	27, // 19: vega.commands.v1.RecurringTransfer.dispatch_strategy:type_name -> vega.DispatchStrategy
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_vega_commands_v1_commands_proto_init() }
func file_vega_commands_v1_commands_proto_init() {
	if File_vega_commands_v1_commands_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vega_commands_v1_commands_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancellation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAmendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionCancellation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionAmendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndelegateSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOffTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_commands_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_commands_v1_commands_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_vega_commands_v1_commands_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Transfer_OneOff)(nil),
		(*Transfer_Recurring)(nil),
	}
	file_vega_commands_v1_commands_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_commands_v1_commands_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_commands_v1_commands_proto_goTypes,
		DependencyIndexes: file_vega_commands_v1_commands_proto_depIdxs,
		EnumInfos:         file_vega_commands_v1_commands_proto_enumTypes,
		MessageInfos:      file_vega_commands_v1_commands_proto_msgTypes,
	}.Build()
	File_vega_commands_v1_commands_proto = out.File
	file_vega_commands_v1_commands_proto_rawDesc = nil
	file_vega_commands_v1_commands_proto_goTypes = nil
	file_vega_commands_v1_commands_proto_depIdxs = nil
}
