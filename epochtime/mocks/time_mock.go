// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/epochtime (interfaces: VegaTime)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockVegaTime is a mock of VegaTime interface.
type MockVegaTime struct {
	ctrl     *gomock.Controller
	recorder *MockVegaTimeMockRecorder
}

// MockVegaTimeMockRecorder is the mock recorder for MockVegaTime.
type MockVegaTimeMockRecorder struct {
	mock *MockVegaTime
}

// NewMockVegaTime creates a new mock instance.
func NewMockVegaTime(ctrl *gomock.Controller) *MockVegaTime {
	mock := &MockVegaTime{ctrl: ctrl}
	mock.recorder = &MockVegaTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVegaTime) EXPECT() *MockVegaTimeMockRecorder {
	return m.recorder
}

// NotifyOnTick mocks base method.
func (m *MockVegaTime) NotifyOnTick(arg0 func(context.Context, time.Time)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyOnTick", arg0)
}

// NotifyOnTick indicates an expected call of NotifyOnTick.
func (mr *MockVegaTimeMockRecorder) NotifyOnTick(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyOnTick", reflect.TypeOf((*MockVegaTime)(nil).NotifyOnTick), arg0)
}
