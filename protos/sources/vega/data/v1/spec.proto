syntax = "proto3";

package vega.data.v1;

option go_package = "code.vegaprotocol.io/vega/protos/vega/data/v1";

// Filter describes the conditions under which a data source data is considered of
// interest or not.
message Filter {
  // Data source's data property key targeted by the filter.
  PropertyKey key = 1;
  // Conditions that should be matched by the data to be
  // considered of interest.
  repeated Condition conditions = 2;
}

// PropertyKey describes the property key contained in data source data.
message PropertyKey {
  // Name of the property.
  string name = 1;
  // Data type of the property.
  Type type = 2;
  // Optional decimal place to be be applied on the provided value
  // valid only for PropertyType of type DECIMAL and INTEGER
  optional uint64 number_decimal_places = 3;

  // Type describes the data type of properties that are supported by the data source
  // engine.
  enum Type {
    // The default value.
    TYPE_UNSPECIFIED = 0;
    // Any type.
    TYPE_EMPTY = 1;
    // Integer type.
    TYPE_INTEGER = 2;
    // String type.
    TYPE_STRING = 3;
    // Boolean type.
    TYPE_BOOLEAN = 4;
    // Any floating point decimal type.
    TYPE_DECIMAL = 5;
    // Timestamp date type.
    TYPE_TIMESTAMP = 6;
  }
}

// Condition describes the condition that must be validated by the network
message Condition {
  // Type of comparison to make on the value.
  Operator operator = 1;
  // Value to be compared with by the operator.
  string value = 2;
  // Operator describes the type of comparison.
  enum Operator {
    // The default value
    OPERATOR_UNSPECIFIED = 0;
    // Verify if the property values are strictly equal or not.
    OPERATOR_EQUALS = 1;
    // Verify if the data source data value is greater than the Condition value.
    OPERATOR_GREATER_THAN = 2;
    // Verify if the data source data value is greater than or equal to the Condition
    // value.
    OPERATOR_GREATER_THAN_OR_EQUAL = 3;
    // Verify if the data source data value is less than the Condition value.
    OPERATOR_LESS_THAN = 4;
    // Verify if the data source data value is less or equal to than the Condition
    // value.
    OPERATOR_LESS_THAN_OR_EQUAL = 5;
  }
}
