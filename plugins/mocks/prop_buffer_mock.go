// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/plugins (interfaces: PropBuffer)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPropBuffer is a mock of PropBuffer interface
type MockPropBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockPropBufferMockRecorder
}

// MockPropBufferMockRecorder is the mock recorder for MockPropBuffer
type MockPropBufferMockRecorder struct {
	mock *MockPropBuffer
}

// NewMockPropBuffer creates a new mock instance
func NewMockPropBuffer(ctrl *gomock.Controller) *MockPropBuffer {
	mock := &MockPropBuffer{ctrl: ctrl}
	mock.recorder = &MockPropBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPropBuffer) EXPECT() *MockPropBufferMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockPropBuffer) Subscribe() (<-chan []proto.Proposal, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(<-chan []proto.Proposal)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockPropBufferMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPropBuffer)(nil).Subscribe))
}

// Unsubscribe mocks base method
func (m *MockPropBuffer) Unsubscribe(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockPropBufferMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPropBuffer)(nil).Unsubscribe), arg0)
}
