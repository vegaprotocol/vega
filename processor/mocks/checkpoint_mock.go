// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/processor (interfaces: Checkpoint)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	types "code.vegaprotocol.io/vega/types"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckpoint is a mock of Checkpoint interface.
type MockCheckpoint struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointMockRecorder
}

// MockCheckpointMockRecorder is the mock recorder for MockCheckpoint.
type MockCheckpointMockRecorder struct {
	mock *MockCheckpoint
}

// NewMockCheckpoint creates a new mock instance.
func NewMockCheckpoint(ctrl *gomock.Controller) *MockCheckpoint {
	mock := &MockCheckpoint{ctrl: ctrl}
	mock.recorder = &MockCheckpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpoint) EXPECT() *MockCheckpointMockRecorder {
	return m.recorder
}

// BalanceCheckpoint mocks base method.
func (m *MockCheckpoint) BalanceCheckpoint(arg0 context.Context) (*types.CheckpointState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceCheckpoint", arg0)
	ret0, _ := ret[0].(*types.CheckpointState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceCheckpoint indicates an expected call of BalanceCheckpoint.
func (mr *MockCheckpointMockRecorder) BalanceCheckpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceCheckpoint", reflect.TypeOf((*MockCheckpoint)(nil).BalanceCheckpoint), arg0)
}

// Checkpoint mocks base method.
func (m *MockCheckpoint) Checkpoint(arg0 context.Context, arg1 time.Time) (*types.CheckpointState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkpoint", arg0, arg1)
	ret0, _ := ret[0].(*types.CheckpointState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkpoint indicates an expected call of Checkpoint.
func (mr *MockCheckpointMockRecorder) Checkpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoint", reflect.TypeOf((*MockCheckpoint)(nil).Checkpoint), arg0, arg1)
}
