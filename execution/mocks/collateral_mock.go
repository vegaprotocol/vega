// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/execution (interfaces: Collateral)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCollateral is a mock of Collateral interface
type MockCollateral struct {
	ctrl     *gomock.Controller
	recorder *MockCollateralMockRecorder
}

// MockCollateralMockRecorder is the mock recorder for MockCollateral
type MockCollateralMockRecorder struct {
	mock *MockCollateral
}

// NewMockCollateral creates a new mock instance
func NewMockCollateral(ctrl *gomock.Controller) *MockCollateral {
	mock := &MockCollateral{ctrl: ctrl}
	mock.recorder = &MockCollateralMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollateral) EXPECT() *MockCollateralMockRecorder {
	return m.recorder
}

// CreatePartyGeneralAccount mocks base method
func (m *MockCollateral) CreatePartyGeneralAccount(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartyGeneralAccount", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreatePartyGeneralAccount indicates an expected call of CreatePartyGeneralAccount
func (mr *MockCollateralMockRecorder) CreatePartyGeneralAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartyGeneralAccount", reflect.TypeOf((*MockCollateral)(nil).CreatePartyGeneralAccount), arg0, arg1)
}

// DecrementBalance mocks base method
func (m *MockCollateral) DecrementBalance(arg0 string, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementBalance indicates an expected call of DecrementBalance
func (mr *MockCollateralMockRecorder) DecrementBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementBalance", reflect.TypeOf((*MockCollateral)(nil).DecrementBalance), arg0, arg1)
}

// GetAccountByID mocks base method
func (m *MockCollateral) GetAccountByID(arg0 string) (*proto.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", arg0)
	ret0, _ := ret[0].(*proto.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID
func (mr *MockCollateralMockRecorder) GetAccountByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockCollateral)(nil).GetAccountByID), arg0)
}

// GetPartyGeneralAccount mocks base method
func (m *MockCollateral) GetPartyGeneralAccount(arg0, arg1 string) (*proto.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyGeneralAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyGeneralAccount indicates an expected call of GetPartyGeneralAccount
func (mr *MockCollateralMockRecorder) GetPartyGeneralAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyGeneralAccount", reflect.TypeOf((*MockCollateral)(nil).GetPartyGeneralAccount), arg0, arg1)
}

// GetPartyTokenAccount mocks base method
func (m *MockCollateral) GetPartyTokenAccount(arg0 string) (*proto.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyTokenAccount", arg0)
	ret0, _ := ret[0].(*proto.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyTokenAccount indicates an expected call of GetPartyTokenAccount
func (mr *MockCollateralMockRecorder) GetPartyTokenAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyTokenAccount", reflect.TypeOf((*MockCollateral)(nil).GetPartyTokenAccount), arg0)
}

// IncrementBalance mocks base method
func (m *MockCollateral) IncrementBalance(arg0 string, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementBalance indicates an expected call of IncrementBalance
func (mr *MockCollateralMockRecorder) IncrementBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementBalance", reflect.TypeOf((*MockCollateral)(nil).IncrementBalance), arg0, arg1)
}
