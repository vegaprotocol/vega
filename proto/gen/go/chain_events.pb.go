// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: chain_events.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A deposit for a Vega built-in asset.
type BuiltinAssetDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Vega network internal asset identifier.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// A Vega party identifier (pub-key)
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The amount to be deposited.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BuiltinAssetDeposit) Reset() {
	*x = BuiltinAssetDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinAssetDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinAssetDeposit) ProtoMessage() {}

func (x *BuiltinAssetDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinAssetDeposit.ProtoReflect.Descriptor instead.
func (*BuiltinAssetDeposit) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{0}
}

func (x *BuiltinAssetDeposit) GetVegaAssetID() string {
	if x != nil {
		return x.VegaAssetID
	}
	return ""
}

func (x *BuiltinAssetDeposit) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *BuiltinAssetDeposit) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// A withdrawal for a Vega built-in asset.
type BuiltinAssetWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Vega network internal asset identifier.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// A Vega network party identifier (pub-key)
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The amount to be withdrawn.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BuiltinAssetWithdrawal) Reset() {
	*x = BuiltinAssetWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinAssetWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinAssetWithdrawal) ProtoMessage() {}

func (x *BuiltinAssetWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinAssetWithdrawal.ProtoReflect.Descriptor instead.
func (*BuiltinAssetWithdrawal) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{1}
}

func (x *BuiltinAssetWithdrawal) GetVegaAssetID() string {
	if x != nil {
		return x.VegaAssetID
	}
	return ""
}

func (x *BuiltinAssetWithdrawal) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *BuiltinAssetWithdrawal) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// An event related to a Vega built-in asset.
type BuiltinAssetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*BuiltinAssetEvent_Deposit
	//	*BuiltinAssetEvent_Withdrawal
	Action isBuiltinAssetEvent_Action `protobuf_oneof:"action"`
}

func (x *BuiltinAssetEvent) Reset() {
	*x = BuiltinAssetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinAssetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinAssetEvent) ProtoMessage() {}

func (x *BuiltinAssetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinAssetEvent.ProtoReflect.Descriptor instead.
func (*BuiltinAssetEvent) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{2}
}

func (m *BuiltinAssetEvent) GetAction() isBuiltinAssetEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *BuiltinAssetEvent) GetDeposit() *BuiltinAssetDeposit {
	if x, ok := x.GetAction().(*BuiltinAssetEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *BuiltinAssetEvent) GetWithdrawal() *BuiltinAssetWithdrawal {
	if x, ok := x.GetAction().(*BuiltinAssetEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

type isBuiltinAssetEvent_Action interface {
	isBuiltinAssetEvent_Action()
}

type BuiltinAssetEvent_Deposit struct {
	// Built-in asset deposit.
	Deposit *BuiltinAssetDeposit `protobuf:"bytes,1001,opt,name=deposit,proto3,oneof"`
}

type BuiltinAssetEvent_Withdrawal struct {
	// Built-in asset withdrawal.
	Withdrawal *BuiltinAssetWithdrawal `protobuf:"bytes,1002,opt,name=withdrawal,proto3,oneof"`
}

func (*BuiltinAssetEvent_Deposit) isBuiltinAssetEvent_Action() {}

func (*BuiltinAssetEvent_Withdrawal) isBuiltinAssetEvent_Action() {}

// An asset allowlisting for an ERC20 token.
type ERC20AssetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
}

func (x *ERC20AssetList) Reset() {
	*x = ERC20AssetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20AssetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20AssetList) ProtoMessage() {}

func (x *ERC20AssetList) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20AssetList.ProtoReflect.Descriptor instead.
func (*ERC20AssetList) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{3}
}

func (x *ERC20AssetList) GetVegaAssetID() string {
	if x != nil {
		return x.VegaAssetID
	}
	return ""
}

// An asset denylisting for an ERC20 token.
type ERC20AssetDelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
}

func (x *ERC20AssetDelist) Reset() {
	*x = ERC20AssetDelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20AssetDelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20AssetDelist) ProtoMessage() {}

func (x *ERC20AssetDelist) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20AssetDelist.ProtoReflect.Descriptor instead.
func (*ERC20AssetDelist) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{4}
}

func (x *ERC20AssetDelist) GetVegaAssetID() string {
	if x != nil {
		return x.VegaAssetID
	}
	return ""
}

// An asset deposit for an ERC20 token.
type ERC20Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The Ethereum wallet that initiated the deposit.
	SourceEthereumAddress string `protobuf:"bytes,2,opt,name=sourceEthereumAddress,proto3" json:"sourceEthereumAddress,omitempty"`
	// The Vega party identifier (pub-key) which is the target of the deposit.
	TargetPartyID string `protobuf:"bytes,3,opt,name=targetPartyID,proto3" json:"targetPartyID,omitempty"`
	// The amount to be deposited
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ERC20Deposit) Reset() {
	*x = ERC20Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Deposit) ProtoMessage() {}

func (x *ERC20Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Deposit.ProtoReflect.Descriptor instead.
func (*ERC20Deposit) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{5}
}

func (x *ERC20Deposit) GetVegaAssetID() string {
	if x != nil {
		return x.VegaAssetID
	}
	return ""
}

func (x *ERC20Deposit) GetSourceEthereumAddress() string {
	if x != nil {
		return x.SourceEthereumAddress
	}
	return ""
}

func (x *ERC20Deposit) GetTargetPartyID() string {
	if x != nil {
		return x.TargetPartyID
	}
	return ""
}

func (x *ERC20Deposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// An asset withdrawal for an ERC20 token.
type ERC20Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The target Ethereum wallet address.
	TargetEthereumAddress string `protobuf:"bytes,2,opt,name=targetEthereumAddress,proto3" json:"targetEthereumAddress,omitempty"`
	// The reference nonce used for the transaction.
	ReferenceNonce string `protobuf:"bytes,3,opt,name=referenceNonce,proto3" json:"referenceNonce,omitempty"`
}

func (x *ERC20Withdrawal) Reset() {
	*x = ERC20Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Withdrawal) ProtoMessage() {}

func (x *ERC20Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Withdrawal.ProtoReflect.Descriptor instead.
func (*ERC20Withdrawal) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{6}
}

func (x *ERC20Withdrawal) GetVegaAssetID() string {
	if x != nil {
		return x.VegaAssetID
	}
	return ""
}

func (x *ERC20Withdrawal) GetTargetEthereumAddress() string {
	if x != nil {
		return x.TargetEthereumAddress
	}
	return ""
}

func (x *ERC20Withdrawal) GetReferenceNonce() string {
	if x != nil {
		return x.ReferenceNonce
	}
	return ""
}

// An event related to an ERC20 token.
type ERC20Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the transaction
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The block in which the transaction was added
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// The action.
	//
	// Types that are assignable to Action:
	//	*ERC20Event_AssetList
	//	*ERC20Event_AssetDelist
	//	*ERC20Event_Deposit
	//	*ERC20Event_Withdrawal
	Action isERC20Event_Action `protobuf_oneof:"action"`
}

func (x *ERC20Event) Reset() {
	*x = ERC20Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Event) ProtoMessage() {}

func (x *ERC20Event) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Event.ProtoReflect.Descriptor instead.
func (*ERC20Event) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{7}
}

func (x *ERC20Event) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ERC20Event) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (m *ERC20Event) GetAction() isERC20Event_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ERC20Event) GetAssetList() *ERC20AssetList {
	if x, ok := x.GetAction().(*ERC20Event_AssetList); ok {
		return x.AssetList
	}
	return nil
}

func (x *ERC20Event) GetAssetDelist() *ERC20AssetDelist {
	if x, ok := x.GetAction().(*ERC20Event_AssetDelist); ok {
		return x.AssetDelist
	}
	return nil
}

func (x *ERC20Event) GetDeposit() *ERC20Deposit {
	if x, ok := x.GetAction().(*ERC20Event_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *ERC20Event) GetWithdrawal() *ERC20Withdrawal {
	if x, ok := x.GetAction().(*ERC20Event_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

type isERC20Event_Action interface {
	isERC20Event_Action()
}

type ERC20Event_AssetList struct {
	// List an ERC20 asset.
	AssetList *ERC20AssetList `protobuf:"bytes,1001,opt,name=assetList,proto3,oneof"`
}

type ERC20Event_AssetDelist struct {
	// De-list an ERC20 asset.
	AssetDelist *ERC20AssetDelist `protobuf:"bytes,1002,opt,name=assetDelist,proto3,oneof"`
}

type ERC20Event_Deposit struct {
	// Deposit ERC20 asset.
	Deposit *ERC20Deposit `protobuf:"bytes,1003,opt,name=deposit,proto3,oneof"`
}

type ERC20Event_Withdrawal struct {
	// Withdraw ERC20 asset.
	Withdrawal *ERC20Withdrawal `protobuf:"bytes,1004,opt,name=withdrawal,proto3,oneof"`
}

func (*ERC20Event_AssetList) isERC20Event_Action() {}

func (*ERC20Event_AssetDelist) isERC20Event_Action() {}

func (*ERC20Event_Deposit) isERC20Event_Action() {}

func (*ERC20Event_Withdrawal) isERC20Event_Action() {}

// A Bitcoin deposit into Vega.
type BTCDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The BTC wallet initiating the deposit.
	SourceBTCAddress string `protobuf:"bytes,2,opt,name=sourceBTCAddress,proto3" json:"sourceBTCAddress,omitempty"`
	// The Vega party identifier (pub-key) which is the target of the deposit.
	TargetPartyId string `protobuf:"bytes,3,opt,name=targetPartyId,proto3" json:"targetPartyId,omitempty"`
}

func (x *BTCDeposit) Reset() {
	*x = BTCDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCDeposit) ProtoMessage() {}

func (x *BTCDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCDeposit.ProtoReflect.Descriptor instead.
func (*BTCDeposit) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{8}
}

func (x *BTCDeposit) GetVegaAssetID() string {
	if x != nil {
		return x.VegaAssetID
	}
	return ""
}

func (x *BTCDeposit) GetSourceBTCAddress() string {
	if x != nil {
		return x.SourceBTCAddress
	}
	return ""
}

func (x *BTCDeposit) GetTargetPartyId() string {
	if x != nil {
		return x.TargetPartyId
	}
	return ""
}

// A Bitcoin withdrawal from Vega.
type BTCWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The party identifier (pub-key) initiating the withdrawal.
	SourcePartyId string `protobuf:"bytes,2,opt,name=sourcePartyId,proto3" json:"sourcePartyId,omitempty"`
	// Target Bitcoin wallet address.
	TargetBTCAddress string `protobuf:"bytes,3,opt,name=targetBTCAddress,proto3" json:"targetBTCAddress,omitempty"`
	// The nonce reference of the transaction.
	ReferenceNonce string `protobuf:"bytes,4,opt,name=referenceNonce,proto3" json:"referenceNonce,omitempty"`
}

func (x *BTCWithdrawal) Reset() {
	*x = BTCWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCWithdrawal) ProtoMessage() {}

func (x *BTCWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCWithdrawal.ProtoReflect.Descriptor instead.
func (*BTCWithdrawal) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{9}
}

func (x *BTCWithdrawal) GetVegaAssetID() string {
	if x != nil {
		return x.VegaAssetID
	}
	return ""
}

func (x *BTCWithdrawal) GetSourcePartyId() string {
	if x != nil {
		return x.SourcePartyId
	}
	return ""
}

func (x *BTCWithdrawal) GetTargetBTCAddress() string {
	if x != nil {
		return x.TargetBTCAddress
	}
	return ""
}

func (x *BTCWithdrawal) GetReferenceNonce() string {
	if x != nil {
		return x.ReferenceNonce
	}
	return ""
}

// An event from the Bitcoin network.
type BTCEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the transaction.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The block in which the transaction happened.
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// The action.
	//
	// Types that are assignable to Action:
	//	*BTCEvent_Deposit
	//	*BTCEvent_Withdrawal
	Action isBTCEvent_Action `protobuf_oneof:"action"`
}

func (x *BTCEvent) Reset() {
	*x = BTCEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCEvent) ProtoMessage() {}

func (x *BTCEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCEvent.ProtoReflect.Descriptor instead.
func (*BTCEvent) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{10}
}

func (x *BTCEvent) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BTCEvent) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (m *BTCEvent) GetAction() isBTCEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *BTCEvent) GetDeposit() *BTCDeposit {
	if x, ok := x.GetAction().(*BTCEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *BTCEvent) GetWithdrawal() *BTCWithdrawal {
	if x, ok := x.GetAction().(*BTCEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

type isBTCEvent_Action interface {
	isBTCEvent_Action()
}

type BTCEvent_Deposit struct {
	// Deposit BTC asset.
	Deposit *BTCDeposit `protobuf:"bytes,1001,opt,name=deposit,proto3,oneof"`
}

type BTCEvent_Withdrawal struct {
	// Withdraw BTC asset.
	Withdrawal *BTCWithdrawal `protobuf:"bytes,1002,opt,name=withdrawal,proto3,oneof"`
}

func (*BTCEvent_Deposit) isBTCEvent_Action() {}

func (*BTCEvent_Withdrawal) isBTCEvent_Action() {}

// Used as a wrapper for an Ethereum address (wallet/contract).
type EthereumAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An Ethereum address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *EthereumAddress) Reset() {
	*x = EthereumAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumAddress) ProtoMessage() {}

func (x *EthereumAddress) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumAddress.ProtoReflect.Descriptor instead.
func (*EthereumAddress) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{11}
}

func (x *EthereumAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Used as a wrapper for a Bitcoin address (wallet).
type BitcoinAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Bitcoin address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *BitcoinAddress) Reset() {
	*x = BitcoinAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinAddress) ProtoMessage() {}

func (x *BitcoinAddress) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinAddress.ProtoReflect.Descriptor instead.
func (*BitcoinAddress) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{12}
}

func (x *BitcoinAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Used as a wrapper type on any possible network address supported by Vega.
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier.
	//
	// Types that are assignable to Identifier:
	//	*Identifier_EthereumAddress
	//	*Identifier_BitcoinAddress
	Identifier isIdentifier_Identifier `protobuf_oneof:"identifier"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{13}
}

func (m *Identifier) GetIdentifier() isIdentifier_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *Identifier) GetEthereumAddress() *EthereumAddress {
	if x, ok := x.GetIdentifier().(*Identifier_EthereumAddress); ok {
		return x.EthereumAddress
	}
	return nil
}

func (x *Identifier) GetBitcoinAddress() *BitcoinAddress {
	if x, ok := x.GetIdentifier().(*Identifier_BitcoinAddress); ok {
		return x.BitcoinAddress
	}
	return nil
}

type isIdentifier_Identifier interface {
	isIdentifier_Identifier()
}

type Identifier_EthereumAddress struct {
	// Ethereum network.
	EthereumAddress *EthereumAddress `protobuf:"bytes,1,opt,name=ethereumAddress,proto3,oneof"`
}

type Identifier_BitcoinAddress struct {
	// Bitcoin network.
	BitcoinAddress *BitcoinAddress `protobuf:"bytes,2,opt,name=bitcoinAddress,proto3,oneof"`
}

func (*Identifier_EthereumAddress) isIdentifier_Identifier() {}

func (*Identifier_BitcoinAddress) isIdentifier_Identifier() {}

// A message to notify when a new validator is being added to the Vega network.
type AddValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the validator.
	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddValidator) Reset() {
	*x = AddValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddValidator) ProtoMessage() {}

func (x *AddValidator) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddValidator.ProtoReflect.Descriptor instead.
func (*AddValidator) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{14}
}

func (x *AddValidator) GetId() *Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

// A message to notify when a validator is being removed from the Vega network.
type RemoveValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the validator.
	Id *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveValidator) Reset() {
	*x = RemoveValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveValidator) ProtoMessage() {}

func (x *RemoveValidator) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveValidator.ProtoReflect.Descriptor instead.
func (*RemoveValidator) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveValidator) GetId() *Identifier {
	if x != nil {
		return x.Id
	}
	return nil
}

// An event related to validator management with foreign networks.
type ValidatorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source identifier of the event.
	SourceID string `protobuf:"bytes,1,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	// The action.
	//
	// Types that are assignable to Action:
	//	*ValidatorEvent_Add
	//	*ValidatorEvent_Rm
	Action isValidatorEvent_Action `protobuf_oneof:"action"`
}

func (x *ValidatorEvent) Reset() {
	*x = ValidatorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorEvent) ProtoMessage() {}

func (x *ValidatorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorEvent.ProtoReflect.Descriptor instead.
func (*ValidatorEvent) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{16}
}

func (x *ValidatorEvent) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (m *ValidatorEvent) GetAction() isValidatorEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ValidatorEvent) GetAdd() *AddValidator {
	if x, ok := x.GetAction().(*ValidatorEvent_Add); ok {
		return x.Add
	}
	return nil
}

func (x *ValidatorEvent) GetRm() *RemoveValidator {
	if x, ok := x.GetAction().(*ValidatorEvent_Rm); ok {
		return x.Rm
	}
	return nil
}

type isValidatorEvent_Action interface {
	isValidatorEvent_Action()
}

type ValidatorEvent_Add struct {
	// Add a new validator.
	Add *AddValidator `protobuf:"bytes,1001,opt,name=add,proto3,oneof"`
}

type ValidatorEvent_Rm struct {
	// Remove an existing validator.
	Rm *RemoveValidator `protobuf:"bytes,1002,opt,name=rm,proto3,oneof"`
}

func (*ValidatorEvent_Add) isValidatorEvent_Action() {}

func (*ValidatorEvent_Rm) isValidatorEvent_Action() {}

// An event forwarded to the Vega network to provide information on events happening on other networks.
type ChainEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the transaction in which the events happened, usually a hash.
	TxID string `protobuf:"bytes,1,opt,name=txID,proto3" json:"txID,omitempty"`
	// Arbitrary one-time integer used to prevent replay attacks.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The event.
	//
	// Types that are assignable to Event:
	//	*ChainEvent_Builtin
	//	*ChainEvent_Erc20
	//	*ChainEvent_Btc
	//	*ChainEvent_Validator
	Event isChainEvent_Event `protobuf_oneof:"event"`
}

func (x *ChainEvent) Reset() {
	*x = ChainEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainEvent) ProtoMessage() {}

func (x *ChainEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chain_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainEvent.ProtoReflect.Descriptor instead.
func (*ChainEvent) Descriptor() ([]byte, []int) {
	return file_chain_events_proto_rawDescGZIP(), []int{17}
}

func (x *ChainEvent) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *ChainEvent) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (m *ChainEvent) GetEvent() isChainEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ChainEvent) GetBuiltin() *BuiltinAssetEvent {
	if x, ok := x.GetEvent().(*ChainEvent_Builtin); ok {
		return x.Builtin
	}
	return nil
}

func (x *ChainEvent) GetErc20() *ERC20Event {
	if x, ok := x.GetEvent().(*ChainEvent_Erc20); ok {
		return x.Erc20
	}
	return nil
}

func (x *ChainEvent) GetBtc() *BTCEvent {
	if x, ok := x.GetEvent().(*ChainEvent_Btc); ok {
		return x.Btc
	}
	return nil
}

func (x *ChainEvent) GetValidator() *ValidatorEvent {
	if x, ok := x.GetEvent().(*ChainEvent_Validator); ok {
		return x.Validator
	}
	return nil
}

type isChainEvent_Event interface {
	isChainEvent_Event()
}

type ChainEvent_Builtin struct {
	// Built-in asset event.
	Builtin *BuiltinAssetEvent `protobuf:"bytes,1001,opt,name=builtin,proto3,oneof"`
}

type ChainEvent_Erc20 struct {
	// Ethereum ERC20 event.
	Erc20 *ERC20Event `protobuf:"bytes,1002,opt,name=erc20,proto3,oneof"`
}

type ChainEvent_Btc struct {
	// Bitcoin BTC event.
	Btc *BTCEvent `protobuf:"bytes,1003,opt,name=btc,proto3,oneof"`
}

type ChainEvent_Validator struct {
	// Validator event.
	Validator *ValidatorEvent `protobuf:"bytes,1004,opt,name=validator,proto3,oneof"`
}

func (*ChainEvent_Builtin) isChainEvent_Event() {}

func (*ChainEvent_Erc20) isChainEvent_Event() {}

func (*ChainEvent_Btc) isChainEvent_Event() {}

func (*ChainEvent_Validator) isChainEvent_Event() {}

var File_chain_events_proto protoreflect.FileDescriptor

var file_chain_events_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x76, 0x65, 0x67, 0x61, 0x22, 0x69, 0x0a, 0x13, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x0e,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x22, 0x34, 0x0a, 0x10, 0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65,
	0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x01,
	0x0a, 0x0f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x22, 0xa1, 0x02, 0x0a, 0x0a, 0x45, 0x52, 0x43, 0x32, 0x30, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18,
	0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x42, 0x54, 0x43, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x54, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x54, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x42, 0x54, 0x43,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65,
	0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x54, 0x43, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x54, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x08, 0x42, 0x54, 0x43, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x2d, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x54, 0x43, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x36,
	0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0xea, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x54, 0x43, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2b, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2a, 0x0a,
	0x0e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x0c, 0x41, 0x64, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x0f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x89, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x28, 0x0a, 0x02, 0x72, 0x6d, 0x18, 0xea,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x02,
	0x72, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x65,
	0x72, 0x63, 0x32, 0x30, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x63, 0x32, 0x30, 0x12, 0x23, 0x0a, 0x03, 0x62, 0x74, 0x63, 0x18, 0xeb, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x54, 0x43, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x62, 0x74, 0x63, 0x12, 0x35, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x21, 0x5a, 0x1f, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_events_proto_rawDescOnce sync.Once
	file_chain_events_proto_rawDescData = file_chain_events_proto_rawDesc
)

func file_chain_events_proto_rawDescGZIP() []byte {
	file_chain_events_proto_rawDescOnce.Do(func() {
		file_chain_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_events_proto_rawDescData)
	})
	return file_chain_events_proto_rawDescData
}

var file_chain_events_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_chain_events_proto_goTypes = []interface{}{
	(*BuiltinAssetDeposit)(nil),    // 0: vega.BuiltinAssetDeposit
	(*BuiltinAssetWithdrawal)(nil), // 1: vega.BuiltinAssetWithdrawal
	(*BuiltinAssetEvent)(nil),      // 2: vega.BuiltinAssetEvent
	(*ERC20AssetList)(nil),         // 3: vega.ERC20AssetList
	(*ERC20AssetDelist)(nil),       // 4: vega.ERC20AssetDelist
	(*ERC20Deposit)(nil),           // 5: vega.ERC20Deposit
	(*ERC20Withdrawal)(nil),        // 6: vega.ERC20Withdrawal
	(*ERC20Event)(nil),             // 7: vega.ERC20Event
	(*BTCDeposit)(nil),             // 8: vega.BTCDeposit
	(*BTCWithdrawal)(nil),          // 9: vega.BTCWithdrawal
	(*BTCEvent)(nil),               // 10: vega.BTCEvent
	(*EthereumAddress)(nil),        // 11: vega.EthereumAddress
	(*BitcoinAddress)(nil),         // 12: vega.BitcoinAddress
	(*Identifier)(nil),             // 13: vega.Identifier
	(*AddValidator)(nil),           // 14: vega.AddValidator
	(*RemoveValidator)(nil),        // 15: vega.RemoveValidator
	(*ValidatorEvent)(nil),         // 16: vega.ValidatorEvent
	(*ChainEvent)(nil),             // 17: vega.ChainEvent
}
var file_chain_events_proto_depIdxs = []int32{
	0,  // 0: vega.BuiltinAssetEvent.deposit:type_name -> vega.BuiltinAssetDeposit
	1,  // 1: vega.BuiltinAssetEvent.withdrawal:type_name -> vega.BuiltinAssetWithdrawal
	3,  // 2: vega.ERC20Event.assetList:type_name -> vega.ERC20AssetList
	4,  // 3: vega.ERC20Event.assetDelist:type_name -> vega.ERC20AssetDelist
	5,  // 4: vega.ERC20Event.deposit:type_name -> vega.ERC20Deposit
	6,  // 5: vega.ERC20Event.withdrawal:type_name -> vega.ERC20Withdrawal
	8,  // 6: vega.BTCEvent.deposit:type_name -> vega.BTCDeposit
	9,  // 7: vega.BTCEvent.withdrawal:type_name -> vega.BTCWithdrawal
	11, // 8: vega.Identifier.ethereumAddress:type_name -> vega.EthereumAddress
	12, // 9: vega.Identifier.bitcoinAddress:type_name -> vega.BitcoinAddress
	13, // 10: vega.AddValidator.id:type_name -> vega.Identifier
	13, // 11: vega.RemoveValidator.id:type_name -> vega.Identifier
	14, // 12: vega.ValidatorEvent.add:type_name -> vega.AddValidator
	15, // 13: vega.ValidatorEvent.rm:type_name -> vega.RemoveValidator
	2,  // 14: vega.ChainEvent.builtin:type_name -> vega.BuiltinAssetEvent
	7,  // 15: vega.ChainEvent.erc20:type_name -> vega.ERC20Event
	10, // 16: vega.ChainEvent.btc:type_name -> vega.BTCEvent
	16, // 17: vega.ChainEvent.validator:type_name -> vega.ValidatorEvent
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_chain_events_proto_init() }
func file_chain_events_proto_init() {
	if File_chain_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chain_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuiltinAssetDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuiltinAssetWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuiltinAssetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20AssetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20AssetDelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chain_events_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*BuiltinAssetEvent_Deposit)(nil),
		(*BuiltinAssetEvent_Withdrawal)(nil),
	}
	file_chain_events_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ERC20Event_AssetList)(nil),
		(*ERC20Event_AssetDelist)(nil),
		(*ERC20Event_Deposit)(nil),
		(*ERC20Event_Withdrawal)(nil),
	}
	file_chain_events_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*BTCEvent_Deposit)(nil),
		(*BTCEvent_Withdrawal)(nil),
	}
	file_chain_events_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Identifier_EthereumAddress)(nil),
		(*Identifier_BitcoinAddress)(nil),
	}
	file_chain_events_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ValidatorEvent_Add)(nil),
		(*ValidatorEvent_Rm)(nil),
	}
	file_chain_events_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ChainEvent_Builtin)(nil),
		(*ChainEvent_Erc20)(nil),
		(*ChainEvent_Btc)(nil),
		(*ChainEvent_Validator)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_events_proto_goTypes,
		DependencyIndexes: file_chain_events_proto_depIdxs,
		MessageInfos:      file_chain_events_proto_msgTypes,
	}.Build()
	File_chain_events_proto = out.File
	file_chain_events_proto_rawDesc = nil
	file_chain_events_proto_goTypes = nil
	file_chain_events_proto_depIdxs = nil
}
