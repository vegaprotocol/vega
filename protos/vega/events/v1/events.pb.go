// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/events/v1/events.proto

package v1

import (
	vega "code.vegaprotocol.io/vega/protos/vega"
	v1 "code.vegaprotocol.io/vega/protos/vega/commands/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolUpgradeProposalStatus int32

const (
	ProtocolUpgradeProposalStatus_PROTOCOL_UPGRADE_PROPOSAL_STATUS_UNSPECIFIED ProtocolUpgradeProposalStatus = 0
	// The proposal is pending
	ProtocolUpgradeProposalStatus_PROTOCOL_UPGRADE_PROPOSAL_STATUS_PENDING ProtocolUpgradeProposalStatus = 1
	// The proposal is approved
	ProtocolUpgradeProposalStatus_PROTOCOL_UPGRADE_PROPOSAL_STATUS_APPROVED ProtocolUpgradeProposalStatus = 2
	// The proposal is rejected
	ProtocolUpgradeProposalStatus_PROTOCOL_UPGRADE_PROPOSAL_STATUS_REJECTED ProtocolUpgradeProposalStatus = 3
)

// Enum value maps for ProtocolUpgradeProposalStatus.
var (
	ProtocolUpgradeProposalStatus_name = map[int32]string{
		0: "PROTOCOL_UPGRADE_PROPOSAL_STATUS_UNSPECIFIED",
		1: "PROTOCOL_UPGRADE_PROPOSAL_STATUS_PENDING",
		2: "PROTOCOL_UPGRADE_PROPOSAL_STATUS_APPROVED",
		3: "PROTOCOL_UPGRADE_PROPOSAL_STATUS_REJECTED",
	}
	ProtocolUpgradeProposalStatus_value = map[string]int32{
		"PROTOCOL_UPGRADE_PROPOSAL_STATUS_UNSPECIFIED": 0,
		"PROTOCOL_UPGRADE_PROPOSAL_STATUS_PENDING":     1,
		"PROTOCOL_UPGRADE_PROPOSAL_STATUS_APPROVED":    2,
		"PROTOCOL_UPGRADE_PROPOSAL_STATUS_REJECTED":    3,
	}
)

func (x ProtocolUpgradeProposalStatus) Enum() *ProtocolUpgradeProposalStatus {
	p := new(ProtocolUpgradeProposalStatus)
	*p = x
	return p
}

func (x ProtocolUpgradeProposalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolUpgradeProposalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[0].Descriptor()
}

func (ProtocolUpgradeProposalStatus) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[0]
}

func (x ProtocolUpgradeProposalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolUpgradeProposalStatus.Descriptor instead.
func (ProtocolUpgradeProposalStatus) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{0}
}

// Bus event type is used to specify a type of event
// It has 2 styles of event:
// Single values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item
// Group values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items
type BusEventType int32

const (
	// Default value, always invalid
	BusEventType_BUS_EVENT_TYPE_UNSPECIFIED BusEventType = 0
	// Events of ALL event types, used when filtering stream from event bus
	BusEventType_BUS_EVENT_TYPE_ALL BusEventType = 1
	// Event for blockchain time updates
	BusEventType_BUS_EVENT_TYPE_TIME_UPDATE BusEventType = 2
	// Event for when a transfer happens internally, contains the transfer information
	BusEventType_BUS_EVENT_TYPE_LEDGER_MOVEMENTS BusEventType = 3
	// Event indicating position resolution has occurred
	BusEventType_BUS_EVENT_TYPE_POSITION_RESOLUTION BusEventType = 4
	// Event for order updates, both new and existing orders
	BusEventType_BUS_EVENT_TYPE_ORDER BusEventType = 5
	// Event for account updates
	BusEventType_BUS_EVENT_TYPE_ACCOUNT BusEventType = 6
	// Event for party updates
	BusEventType_BUS_EVENT_TYPE_PARTY BusEventType = 7
	// Event indicating a new trade has occurred
	BusEventType_BUS_EVENT_TYPE_TRADE BusEventType = 8
	// Event indicating margin levels have changed for a party
	BusEventType_BUS_EVENT_TYPE_MARGIN_LEVELS BusEventType = 9
	// Event for proposal updates (for governance)
	BusEventType_BUS_EVENT_TYPE_PROPOSAL BusEventType = 10
	// Event indicating a new vote has occurred (for governance)
	BusEventType_BUS_EVENT_TYPE_VOTE BusEventType = 11
	// Event for market data updates
	BusEventType_BUS_EVENT_TYPE_MARKET_DATA BusEventType = 12
	// Event for a new signature for a Vega node
	BusEventType_BUS_EVENT_TYPE_NODE_SIGNATURE BusEventType = 13
	// Event indicating loss socialisation occurred for a party
	BusEventType_BUS_EVENT_TYPE_LOSS_SOCIALIZATION BusEventType = 14
	// Event for when a position is being settled
	BusEventType_BUS_EVENT_TYPE_SETTLE_POSITION BusEventType = 15
	// Event for when a position is distressed
	BusEventType_BUS_EVENT_TYPE_SETTLE_DISTRESSED BusEventType = 16
	// Event indicating a new market was created
	BusEventType_BUS_EVENT_TYPE_MARKET_CREATED BusEventType = 17
	// Event for when an asset is added to Vega
	BusEventType_BUS_EVENT_TYPE_ASSET BusEventType = 18
	// Event indicating a market tick event
	BusEventType_BUS_EVENT_TYPE_MARKET_TICK BusEventType = 19
	// Event for when a withdrawal occurs
	BusEventType_BUS_EVENT_TYPE_WITHDRAWAL BusEventType = 20
	// Event for when a deposit occurs
	BusEventType_BUS_EVENT_TYPE_DEPOSIT BusEventType = 21
	// Event indicating a change in auction state, for example starting or ending an auction
	BusEventType_BUS_EVENT_TYPE_AUCTION BusEventType = 22
	// Event indicating a risk factor has been updated
	BusEventType_BUS_EVENT_TYPE_RISK_FACTOR BusEventType = 23
	// Event indicating a network parameter has been added or updated
	BusEventType_BUS_EVENT_TYPE_NETWORK_PARAMETER BusEventType = 24
	// Event indicating a liquidity provision has been created or updated
	BusEventType_BUS_EVENT_TYPE_LIQUIDITY_PROVISION BusEventType = 25
	// Event indicating a new market was created
	BusEventType_BUS_EVENT_TYPE_MARKET_UPDATED BusEventType = 26
	// Event indicating an oracle spec has been created or updated
	BusEventType_BUS_EVENT_TYPE_ORACLE_SPEC BusEventType = 27
	// Event indicating that an oracle data has been broadcast
	BusEventType_BUS_EVENT_TYPE_ORACLE_DATA BusEventType = 28
	// Event indicating that an delegation balance of a party to a node for current epoch has changed
	BusEventType_BUS_EVENT_TYPE_DELEGATION_BALANCE BusEventType = 29
	// Event indicating the validator score for the given epoch
	BusEventType_BUS_EVENT_TYPE_VALIDATOR_SCORE BusEventType = 30
	// Event indicating the start or end of an epoch
	BusEventType_BUS_EVENT_TYPE_EPOCH_UPDATE BusEventType = 31
	// Event indicating that validator node has been updated
	BusEventType_BUS_EVENT_TYPE_VALIDATOR_UPDATE BusEventType = 32
	// Event indicating a new staking event have been processed by the network
	BusEventType_BUS_EVENT_TYPE_STAKE_LINKING BusEventType = 33
	// Event indicating the payout of a reward has been initiated
	BusEventType_BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT BusEventType = 34
	// Event indicating a new checkpoint was created
	BusEventType_BUS_EVENT_TYPE_CHECKPOINT BusEventType = 35
	// Event indicating stream is starting
	BusEventType_BUS_EVENT_TYPE_STREAM_START BusEventType = 36
	// Event indicating key rotation took place
	BusEventType_BUS_EVENT_TYPE_KEY_ROTATION BusEventType = 37
	// Event indicating state transitions in state variable consensus
	BusEventType_BUS_EVENT_TYPE_STATE_VAR BusEventType = 38
	// Event indicating network limits set or updated
	BusEventType_BUS_EVENT_TYPE_NETWORK_LIMITS BusEventType = 39
	// Event indicating a update for a transfer
	BusEventType_BUS_EVENT_TYPE_TRANSFER BusEventType = 40
	// Event indicating the ranking of validator and their status in Vega
	BusEventType_BUS_EVENT_TYPE_VALIDATOR_RANKING BusEventType = 41
	// Event indicating a new multi sig signer event have been processed
	BusEventType_BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT BusEventType = 42
	// Event indicating the erc20 multi sig threshold have been updated
	BusEventType_BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD BusEventType = 43
	// Event indicating a new signer has been added to the ERC-20 multisig
	BusEventType_BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED BusEventType = 44
	// Event indicating a signer has been removed from the ERC-20 multisig
	BusEventType_BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED BusEventType = 45
	// Event indicating that a party's position has changed
	BusEventType_BUS_EVENT_TYPE_POSITION_STATE BusEventType = 46
	// Event indicating Ethereum key rotation took place
	BusEventType_BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION BusEventType = 47
	// Event indicating protocol upgrade proposal updates
	BusEventType_BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL BusEventType = 48
	// Event indicating the core is starting to process a new block
	BusEventType_BUS_EVENT_TYPE_BEGIN_BLOCK BusEventType = 49
	// Event indicating the core finished to process a block
	BusEventType_BUS_EVENT_TYPE_END_BLOCK BusEventType = 50
	// Event indicating the core is starting a protocol upgrade
	BusEventType_BUS_EVENT_TYPE_PROTOCOL_UPGRADE_STARTED BusEventType = 51
	// Event indicating the market has stopped and settled
	BusEventType_BUS_EVENT_TYPE_SETTLE_MARKET BusEventType = 52
	// Event indicating the result of a transaction processed by the network
	BusEventType_BUS_EVENT_TYPE_TRANSACTION_RESULT BusEventType = 53
	// Event indicating a snapshot was taken at this block height
	BusEventType_BUS_EVENT_TYPE_SNAPSHOT_TAKEN BusEventType = 54
	// Event data node uses to notify that it is ready to upgrade
	BusEventType_BUS_EVENT_TYPE_PROTOCOL_UPGRADE_DATA_NODE_READY BusEventType = 55
	// Event indicating parties had orders closed because they were distressed, but were not closed out.
	BusEventType_BUS_EVENT_TYPE_DISTRESSED_ORDERS_CLOSED BusEventType = 56
	// Event indicating parties had orders closed because they were distressed, but were not closed out.
	BusEventType_BUS_EVENT_TYPE_EXPIRED_ORDERS BusEventType = 57
	// Event indicating parties have become, or were, distressed but still have an active position.
	BusEventType_BUS_EVENT_TYPE_DISTRESSED_POSITIONS BusEventType = 58
	// Event indicating a spot liquidity provision has been created or updated.
	BusEventType_BUS_EVENT_TYPE_SPOT_LIQUIDITY_PROVISION BusEventType = 59
	// Event indicating a stop order has been submitted or updated.
	BusEventType_BUS_EVENT_TYPE_STOP_ORDER BusEventType = 60
	// Event indicating the start or end of a funding period.
	BusEventType_BUS_EVENT_TYPE_FUNDING_PERIOD BusEventType = 61
	// Event indicating a data point for a funding period has been received.
	BusEventType_BUS_EVENT_TYPE_FUNDING_PERIOD_DATA_POINT BusEventType = 62
	// Event indicating a team has been created.
	BusEventType_BUS_EVENT_TYPE_TEAM_CREATED BusEventType = 63
	// Event indicating a team has been updated.
	BusEventType_BUS_EVENT_TYPE_TEAM_UPDATED BusEventType = 64
	// Event indicating a referee switched team.
	BusEventType_BUS_EVENT_TYPE_REFEREE_SWITCHED_TEAM BusEventType = 65
	// Event indicating a referee joined a team.
	BusEventType_BUS_EVENT_TYPE_REFEREE_JOINED_TEAM BusEventType = 66
	// Event indicating a referral program started.
	BusEventType_BUS_EVENT_TYPE_REFERRAL_PROGRAM_STARTED BusEventType = 67
	// Event indicating a referral program has been updated.
	BusEventType_BUS_EVENT_TYPE_REFERRAL_PROGRAM_UPDATED BusEventType = 68
	// Event indicating a referral program ended.
	BusEventType_BUS_EVENT_TYPE_REFERRAL_PROGRAM_ENDED BusEventType = 69
	// Event indicating a set has been created.
	BusEventType_BUS_EVENT_TYPE_REFERRAL_SET_CREATED BusEventType = 70
	// Event indicating a referee joined a set.
	BusEventType_BUS_EVENT_TYPE_REFEREE_JOINED_REFERRAL_SET BusEventType = 71
	// Event indicating the updated activity streak for a party
	BusEventType_BUS_EVENT_TYPE_PARTY_ACTIVITY_STREAK BusEventType = 72
	// Event indicating a volume discount program started.
	BusEventType_BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_STARTED BusEventType = 73
	// Event indicating a volume discount program has been updated.
	BusEventType_BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_UPDATED BusEventType = 74
	// Event indicating a volume discount program ended.
	BusEventType_BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_ENDED BusEventType = 75
	// Event indicating the updated statistics for a referral set.
	BusEventType_BUS_EVENT_TYPE_REFERRAL_SET_STATS_UPDATED BusEventType = 76
	// Event indicating the updated statistics for the vesting program.
	BusEventType_BUS_EVENT_TYPE_VESTING_STATS_UPDATED BusEventType = 77
	// Event indicating the updated statistics for the volume discount.
	BusEventType_BUS_EVENT_TYPE_VOLUME_DISCOUNT_STATS_UPDATED BusEventType = 78
	// Event indicating the fees statistics per market at end of epoch
	BusEventType_BUS_EVENT_TYPE_FEES_STATS_UPDATED BusEventType = 79
	// Event indicating a funding period has ended and resulted in funding payment transfers.
	BusEventType_BUS_EVENT_TYPE_FUNDING_PAYMENTS BusEventType = 80
	// Event used to report the updated paid liquidity fee statistics for the market at the end of the epoch
	BusEventType_BUS_EVENT_TYPE_PAID_LIQUIDITY_FEES_STATS_UPDATED BusEventType = 81
	// Event used to report the summary of vesting and locked balances at the end of the epoch
	BusEventType_BUS_EVENT_TYPE_VESTING_SUMMARY BusEventType = 82
	// Event used to link ledger entries to the transfer that triggered the fees being collected.
	BusEventType_BUS_EVENT_TYPE_TRANSFER_FEES_PAID BusEventType = 83
	// Event indicating that a party's available transfer fee discount has changed, per asset.
	BusEventType_BUS_EVENT_TYPE_TRANSFER_FEES_DISCOUNT_UPDATED BusEventType = 84
	// Event indicating that a party updated their margin mode on a market.
	BusEventType_BUS_EVENT_TYPE_PARTY_MARGIN_MODE_UPDATED BusEventType = 85
	// Event indicating that a party updated their profile.
	BusEventType_BUS_EVENT_TYPE_PARTY_PROFILE_UPDATED BusEventType = 86
	// Event indicating that teams' statistics have been updated.
	BusEventType_BUS_EVENT_TYPE_TEAMS_STATS_UPDATED BusEventType = 87
	// Event indicating time weighted notional position has been updated.
	BusEventType_BUS_EVENT_TYPE_TIME_WEIGHTED_NOTIONAL_POSITION_UPDATED BusEventType = 88
	// Event containing the IDs of orders cancelled by a party on a market.
	BusEventType_BUS_EVENT_TYPE_CANCELLED_ORDERS BusEventType = 89
	// Event containing the near realtime game scores for parties and teams.
	BusEventType_BUS_EVENT_TYPE_GAME_SCORES BusEventType = 90
	// Event use to notify for an AMM update.
	BusEventType_BUS_EVENT_TYPE_AMM BusEventType = 91
	// Event indicating a volume rebate program started.
	BusEventType_BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_STARTED BusEventType = 92
	// Event indicating a volume rebate program has been updated.
	BusEventType_BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_UPDATED BusEventType = 93
	// Event indicating a volume rebate program ended.
	BusEventType_BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_ENDED BusEventType = 94
	// Event indicating the updated statistics for the volume rebate.
	BusEventType_BUS_EVENT_TYPE_VOLUME_REBATE_STATS_UPDATED BusEventType = 95
	// Event containing market community tags.
	BusEventType_BUS_EVENT_TYPE_MARKET_COMMUNITY_TAG BusEventType = 96
	// Event indicating a market related event, for example when a market opens
	BusEventType_BUS_EVENT_TYPE_MARKET BusEventType = 101
	// Event used to report failed transactions back to a user, this is excluded from the ALL type
	BusEventType_BUS_EVENT_TYPE_TX_ERROR BusEventType = 201
)

// Enum value maps for BusEventType.
var (
	BusEventType_name = map[int32]string{
		0:   "BUS_EVENT_TYPE_UNSPECIFIED",
		1:   "BUS_EVENT_TYPE_ALL",
		2:   "BUS_EVENT_TYPE_TIME_UPDATE",
		3:   "BUS_EVENT_TYPE_LEDGER_MOVEMENTS",
		4:   "BUS_EVENT_TYPE_POSITION_RESOLUTION",
		5:   "BUS_EVENT_TYPE_ORDER",
		6:   "BUS_EVENT_TYPE_ACCOUNT",
		7:   "BUS_EVENT_TYPE_PARTY",
		8:   "BUS_EVENT_TYPE_TRADE",
		9:   "BUS_EVENT_TYPE_MARGIN_LEVELS",
		10:  "BUS_EVENT_TYPE_PROPOSAL",
		11:  "BUS_EVENT_TYPE_VOTE",
		12:  "BUS_EVENT_TYPE_MARKET_DATA",
		13:  "BUS_EVENT_TYPE_NODE_SIGNATURE",
		14:  "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
		15:  "BUS_EVENT_TYPE_SETTLE_POSITION",
		16:  "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
		17:  "BUS_EVENT_TYPE_MARKET_CREATED",
		18:  "BUS_EVENT_TYPE_ASSET",
		19:  "BUS_EVENT_TYPE_MARKET_TICK",
		20:  "BUS_EVENT_TYPE_WITHDRAWAL",
		21:  "BUS_EVENT_TYPE_DEPOSIT",
		22:  "BUS_EVENT_TYPE_AUCTION",
		23:  "BUS_EVENT_TYPE_RISK_FACTOR",
		24:  "BUS_EVENT_TYPE_NETWORK_PARAMETER",
		25:  "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
		26:  "BUS_EVENT_TYPE_MARKET_UPDATED",
		27:  "BUS_EVENT_TYPE_ORACLE_SPEC",
		28:  "BUS_EVENT_TYPE_ORACLE_DATA",
		29:  "BUS_EVENT_TYPE_DELEGATION_BALANCE",
		30:  "BUS_EVENT_TYPE_VALIDATOR_SCORE",
		31:  "BUS_EVENT_TYPE_EPOCH_UPDATE",
		32:  "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
		33:  "BUS_EVENT_TYPE_STAKE_LINKING",
		34:  "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
		35:  "BUS_EVENT_TYPE_CHECKPOINT",
		36:  "BUS_EVENT_TYPE_STREAM_START",
		37:  "BUS_EVENT_TYPE_KEY_ROTATION",
		38:  "BUS_EVENT_TYPE_STATE_VAR",
		39:  "BUS_EVENT_TYPE_NETWORK_LIMITS",
		40:  "BUS_EVENT_TYPE_TRANSFER",
		41:  "BUS_EVENT_TYPE_VALIDATOR_RANKING",
		42:  "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT",
		43:  "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD",
		44:  "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED",
		45:  "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED",
		46:  "BUS_EVENT_TYPE_POSITION_STATE",
		47:  "BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION",
		48:  "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL",
		49:  "BUS_EVENT_TYPE_BEGIN_BLOCK",
		50:  "BUS_EVENT_TYPE_END_BLOCK",
		51:  "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_STARTED",
		52:  "BUS_EVENT_TYPE_SETTLE_MARKET",
		53:  "BUS_EVENT_TYPE_TRANSACTION_RESULT",
		54:  "BUS_EVENT_TYPE_SNAPSHOT_TAKEN",
		55:  "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_DATA_NODE_READY",
		56:  "BUS_EVENT_TYPE_DISTRESSED_ORDERS_CLOSED",
		57:  "BUS_EVENT_TYPE_EXPIRED_ORDERS",
		58:  "BUS_EVENT_TYPE_DISTRESSED_POSITIONS",
		59:  "BUS_EVENT_TYPE_SPOT_LIQUIDITY_PROVISION",
		60:  "BUS_EVENT_TYPE_STOP_ORDER",
		61:  "BUS_EVENT_TYPE_FUNDING_PERIOD",
		62:  "BUS_EVENT_TYPE_FUNDING_PERIOD_DATA_POINT",
		63:  "BUS_EVENT_TYPE_TEAM_CREATED",
		64:  "BUS_EVENT_TYPE_TEAM_UPDATED",
		65:  "BUS_EVENT_TYPE_REFEREE_SWITCHED_TEAM",
		66:  "BUS_EVENT_TYPE_REFEREE_JOINED_TEAM",
		67:  "BUS_EVENT_TYPE_REFERRAL_PROGRAM_STARTED",
		68:  "BUS_EVENT_TYPE_REFERRAL_PROGRAM_UPDATED",
		69:  "BUS_EVENT_TYPE_REFERRAL_PROGRAM_ENDED",
		70:  "BUS_EVENT_TYPE_REFERRAL_SET_CREATED",
		71:  "BUS_EVENT_TYPE_REFEREE_JOINED_REFERRAL_SET",
		72:  "BUS_EVENT_TYPE_PARTY_ACTIVITY_STREAK",
		73:  "BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_STARTED",
		74:  "BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_UPDATED",
		75:  "BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_ENDED",
		76:  "BUS_EVENT_TYPE_REFERRAL_SET_STATS_UPDATED",
		77:  "BUS_EVENT_TYPE_VESTING_STATS_UPDATED",
		78:  "BUS_EVENT_TYPE_VOLUME_DISCOUNT_STATS_UPDATED",
		79:  "BUS_EVENT_TYPE_FEES_STATS_UPDATED",
		80:  "BUS_EVENT_TYPE_FUNDING_PAYMENTS",
		81:  "BUS_EVENT_TYPE_PAID_LIQUIDITY_FEES_STATS_UPDATED",
		82:  "BUS_EVENT_TYPE_VESTING_SUMMARY",
		83:  "BUS_EVENT_TYPE_TRANSFER_FEES_PAID",
		84:  "BUS_EVENT_TYPE_TRANSFER_FEES_DISCOUNT_UPDATED",
		85:  "BUS_EVENT_TYPE_PARTY_MARGIN_MODE_UPDATED",
		86:  "BUS_EVENT_TYPE_PARTY_PROFILE_UPDATED",
		87:  "BUS_EVENT_TYPE_TEAMS_STATS_UPDATED",
		88:  "BUS_EVENT_TYPE_TIME_WEIGHTED_NOTIONAL_POSITION_UPDATED",
		89:  "BUS_EVENT_TYPE_CANCELLED_ORDERS",
		90:  "BUS_EVENT_TYPE_GAME_SCORES",
		91:  "BUS_EVENT_TYPE_AMM",
		92:  "BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_STARTED",
		93:  "BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_UPDATED",
		94:  "BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_ENDED",
		95:  "BUS_EVENT_TYPE_VOLUME_REBATE_STATS_UPDATED",
		96:  "BUS_EVENT_TYPE_MARKET_COMMUNITY_TAG",
		101: "BUS_EVENT_TYPE_MARKET",
		201: "BUS_EVENT_TYPE_TX_ERROR",
	}
	BusEventType_value = map[string]int32{
		"BUS_EVENT_TYPE_UNSPECIFIED":                             0,
		"BUS_EVENT_TYPE_ALL":                                     1,
		"BUS_EVENT_TYPE_TIME_UPDATE":                             2,
		"BUS_EVENT_TYPE_LEDGER_MOVEMENTS":                        3,
		"BUS_EVENT_TYPE_POSITION_RESOLUTION":                     4,
		"BUS_EVENT_TYPE_ORDER":                                   5,
		"BUS_EVENT_TYPE_ACCOUNT":                                 6,
		"BUS_EVENT_TYPE_PARTY":                                   7,
		"BUS_EVENT_TYPE_TRADE":                                   8,
		"BUS_EVENT_TYPE_MARGIN_LEVELS":                           9,
		"BUS_EVENT_TYPE_PROPOSAL":                                10,
		"BUS_EVENT_TYPE_VOTE":                                    11,
		"BUS_EVENT_TYPE_MARKET_DATA":                             12,
		"BUS_EVENT_TYPE_NODE_SIGNATURE":                          13,
		"BUS_EVENT_TYPE_LOSS_SOCIALIZATION":                      14,
		"BUS_EVENT_TYPE_SETTLE_POSITION":                         15,
		"BUS_EVENT_TYPE_SETTLE_DISTRESSED":                       16,
		"BUS_EVENT_TYPE_MARKET_CREATED":                          17,
		"BUS_EVENT_TYPE_ASSET":                                   18,
		"BUS_EVENT_TYPE_MARKET_TICK":                             19,
		"BUS_EVENT_TYPE_WITHDRAWAL":                              20,
		"BUS_EVENT_TYPE_DEPOSIT":                                 21,
		"BUS_EVENT_TYPE_AUCTION":                                 22,
		"BUS_EVENT_TYPE_RISK_FACTOR":                             23,
		"BUS_EVENT_TYPE_NETWORK_PARAMETER":                       24,
		"BUS_EVENT_TYPE_LIQUIDITY_PROVISION":                     25,
		"BUS_EVENT_TYPE_MARKET_UPDATED":                          26,
		"BUS_EVENT_TYPE_ORACLE_SPEC":                             27,
		"BUS_EVENT_TYPE_ORACLE_DATA":                             28,
		"BUS_EVENT_TYPE_DELEGATION_BALANCE":                      29,
		"BUS_EVENT_TYPE_VALIDATOR_SCORE":                         30,
		"BUS_EVENT_TYPE_EPOCH_UPDATE":                            31,
		"BUS_EVENT_TYPE_VALIDATOR_UPDATE":                        32,
		"BUS_EVENT_TYPE_STAKE_LINKING":                           33,
		"BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT":                     34,
		"BUS_EVENT_TYPE_CHECKPOINT":                              35,
		"BUS_EVENT_TYPE_STREAM_START":                            36,
		"BUS_EVENT_TYPE_KEY_ROTATION":                            37,
		"BUS_EVENT_TYPE_STATE_VAR":                               38,
		"BUS_EVENT_TYPE_NETWORK_LIMITS":                          39,
		"BUS_EVENT_TYPE_TRANSFER":                                40,
		"BUS_EVENT_TYPE_VALIDATOR_RANKING":                       41,
		"BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT":            42,
		"BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD":           43,
		"BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED":            44,
		"BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED":          45,
		"BUS_EVENT_TYPE_POSITION_STATE":                          46,
		"BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION":                   47,
		"BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL":               48,
		"BUS_EVENT_TYPE_BEGIN_BLOCK":                             49,
		"BUS_EVENT_TYPE_END_BLOCK":                               50,
		"BUS_EVENT_TYPE_PROTOCOL_UPGRADE_STARTED":                51,
		"BUS_EVENT_TYPE_SETTLE_MARKET":                           52,
		"BUS_EVENT_TYPE_TRANSACTION_RESULT":                      53,
		"BUS_EVENT_TYPE_SNAPSHOT_TAKEN":                          54,
		"BUS_EVENT_TYPE_PROTOCOL_UPGRADE_DATA_NODE_READY":        55,
		"BUS_EVENT_TYPE_DISTRESSED_ORDERS_CLOSED":                56,
		"BUS_EVENT_TYPE_EXPIRED_ORDERS":                          57,
		"BUS_EVENT_TYPE_DISTRESSED_POSITIONS":                    58,
		"BUS_EVENT_TYPE_SPOT_LIQUIDITY_PROVISION":                59,
		"BUS_EVENT_TYPE_STOP_ORDER":                              60,
		"BUS_EVENT_TYPE_FUNDING_PERIOD":                          61,
		"BUS_EVENT_TYPE_FUNDING_PERIOD_DATA_POINT":               62,
		"BUS_EVENT_TYPE_TEAM_CREATED":                            63,
		"BUS_EVENT_TYPE_TEAM_UPDATED":                            64,
		"BUS_EVENT_TYPE_REFEREE_SWITCHED_TEAM":                   65,
		"BUS_EVENT_TYPE_REFEREE_JOINED_TEAM":                     66,
		"BUS_EVENT_TYPE_REFERRAL_PROGRAM_STARTED":                67,
		"BUS_EVENT_TYPE_REFERRAL_PROGRAM_UPDATED":                68,
		"BUS_EVENT_TYPE_REFERRAL_PROGRAM_ENDED":                  69,
		"BUS_EVENT_TYPE_REFERRAL_SET_CREATED":                    70,
		"BUS_EVENT_TYPE_REFEREE_JOINED_REFERRAL_SET":             71,
		"BUS_EVENT_TYPE_PARTY_ACTIVITY_STREAK":                   72,
		"BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_STARTED":         73,
		"BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_UPDATED":         74,
		"BUS_EVENT_TYPE_VOLUME_DISCOUNT_PROGRAM_ENDED":           75,
		"BUS_EVENT_TYPE_REFERRAL_SET_STATS_UPDATED":              76,
		"BUS_EVENT_TYPE_VESTING_STATS_UPDATED":                   77,
		"BUS_EVENT_TYPE_VOLUME_DISCOUNT_STATS_UPDATED":           78,
		"BUS_EVENT_TYPE_FEES_STATS_UPDATED":                      79,
		"BUS_EVENT_TYPE_FUNDING_PAYMENTS":                        80,
		"BUS_EVENT_TYPE_PAID_LIQUIDITY_FEES_STATS_UPDATED":       81,
		"BUS_EVENT_TYPE_VESTING_SUMMARY":                         82,
		"BUS_EVENT_TYPE_TRANSFER_FEES_PAID":                      83,
		"BUS_EVENT_TYPE_TRANSFER_FEES_DISCOUNT_UPDATED":          84,
		"BUS_EVENT_TYPE_PARTY_MARGIN_MODE_UPDATED":               85,
		"BUS_EVENT_TYPE_PARTY_PROFILE_UPDATED":                   86,
		"BUS_EVENT_TYPE_TEAMS_STATS_UPDATED":                     87,
		"BUS_EVENT_TYPE_TIME_WEIGHTED_NOTIONAL_POSITION_UPDATED": 88,
		"BUS_EVENT_TYPE_CANCELLED_ORDERS":                        89,
		"BUS_EVENT_TYPE_GAME_SCORES":                             90,
		"BUS_EVENT_TYPE_AMM":                                     91,
		"BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_STARTED":           92,
		"BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_UPDATED":           93,
		"BUS_EVENT_TYPE_VOLUME_REBATE_PROGRAM_ENDED":             94,
		"BUS_EVENT_TYPE_VOLUME_REBATE_STATS_UPDATED":             95,
		"BUS_EVENT_TYPE_MARKET_COMMUNITY_TAG":                    96,
		"BUS_EVENT_TYPE_MARKET":                                  101,
		"BUS_EVENT_TYPE_TX_ERROR":                                201,
	}
)

func (x BusEventType) Enum() *BusEventType {
	p := new(BusEventType)
	*p = x
	return p
}

func (x BusEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[1].Descriptor()
}

func (BusEventType) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[1]
}

func (x BusEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusEventType.Descriptor instead.
func (BusEventType) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{1}
}

type AMM_Status int32

const (
	AMM_STATUS_UNSPECIFIED AMM_Status = 0
	// AMM is active on the market and is posting tradable volume.
	AMM_STATUS_ACTIVE AMM_Status = 1
	// AMM submission was rejected.
	AMM_STATUS_REJECTED AMM_Status = 2
	// AMM has been cancelled by the owner and is no longer trading.
	AMM_STATUS_CANCELLED AMM_Status = 3
	// AMM has been stopped by the network and is no longer trading.
	AMM_STATUS_STOPPED AMM_Status = 4
	// AMM will only trade such that it will reduce its position.
	AMM_STATUS_REDUCE_ONLY AMM_Status = 5
)

// Enum value maps for AMM_Status.
var (
	AMM_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ACTIVE",
		2: "STATUS_REJECTED",
		3: "STATUS_CANCELLED",
		4: "STATUS_STOPPED",
		5: "STATUS_REDUCE_ONLY",
	}
	AMM_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ACTIVE":      1,
		"STATUS_REJECTED":    2,
		"STATUS_CANCELLED":   3,
		"STATUS_STOPPED":     4,
		"STATUS_REDUCE_ONLY": 5,
	}
)

func (x AMM_Status) Enum() *AMM_Status {
	p := new(AMM_Status)
	*p = x
	return p
}

func (x AMM_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AMM_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[2].Descriptor()
}

func (AMM_Status) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[2]
}

func (x AMM_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AMM_Status.Descriptor instead.
func (AMM_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{2, 0}
}

type AMM_StatusReason int32

const (
	AMM_STATUS_REASON_UNSPECIFIED AMM_StatusReason = 0
	// AMM was cancelled by its owner.
	AMM_STATUS_REASON_CANCELLED_BY_PARTY AMM_StatusReason = 1
	// Party does not have enough funds in their general account to meet the AMM's commitment.
	AMM_STATUS_REASON_CANNOT_FILL_COMMITMENT AMM_StatusReason = 2
	// Party already has an AMM operating on this market and cannot create another one.
	AMM_STATUS_REASON_PARTY_ALREADY_OWNS_AMM_FOR_MARKET AMM_StatusReason = 3
	// AMM was liquidated and stopped by the network.
	AMM_STATUS_REASON_PARTY_CLOSED_OUT AMM_StatusReason = 4
	// AMM was stopped by the network because the market it operated in was closed.
	AMM_STATUS_REASON_MARKET_CLOSED AMM_StatusReason = 5
	// Commitment amount was below the network wide minimum, or its price bounds are too wide, such that the volume is spread thinly creating zero-volume price-levels.
	AMM_STATUS_REASON_COMMITMENT_TOO_LOW AMM_StatusReason = 6
	// AMM was unable to rebase its fair-price such that it does not cross with existing orders.
	AMM_STATUS_REASON_CANNOT_REBASE AMM_StatusReason = 7
)

// Enum value maps for AMM_StatusReason.
var (
	AMM_StatusReason_name = map[int32]string{
		0: "STATUS_REASON_UNSPECIFIED",
		1: "STATUS_REASON_CANCELLED_BY_PARTY",
		2: "STATUS_REASON_CANNOT_FILL_COMMITMENT",
		3: "STATUS_REASON_PARTY_ALREADY_OWNS_AMM_FOR_MARKET",
		4: "STATUS_REASON_PARTY_CLOSED_OUT",
		5: "STATUS_REASON_MARKET_CLOSED",
		6: "STATUS_REASON_COMMITMENT_TOO_LOW",
		7: "STATUS_REASON_CANNOT_REBASE",
	}
	AMM_StatusReason_value = map[string]int32{
		"STATUS_REASON_UNSPECIFIED":                       0,
		"STATUS_REASON_CANCELLED_BY_PARTY":                1,
		"STATUS_REASON_CANNOT_FILL_COMMITMENT":            2,
		"STATUS_REASON_PARTY_ALREADY_OWNS_AMM_FOR_MARKET": 3,
		"STATUS_REASON_PARTY_CLOSED_OUT":                  4,
		"STATUS_REASON_MARKET_CLOSED":                     5,
		"STATUS_REASON_COMMITMENT_TOO_LOW":                6,
		"STATUS_REASON_CANNOT_REBASE":                     7,
	}
)

func (x AMM_StatusReason) Enum() *AMM_StatusReason {
	p := new(AMM_StatusReason)
	*p = x
	return p
}

func (x AMM_StatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AMM_StatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[3].Descriptor()
}

func (AMM_StatusReason) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[3]
}

func (x AMM_StatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AMM_StatusReason.Descriptor instead.
func (AMM_StatusReason) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{2, 1}
}

type FundingPeriodDataPoint_Source int32

const (
	// Default value
	FundingPeriodDataPoint_SOURCE_UNSPECIFIED FundingPeriodDataPoint_Source = 0
	// Data point is from an external data source, such as an oracle, and represents the spot price of the underlying asset.
	FundingPeriodDataPoint_SOURCE_EXTERNAL FundingPeriodDataPoint_Source = 1
	// Data point from within Vega such as the mark price after performing mark-to-market.
	FundingPeriodDataPoint_SOURCE_INTERNAL FundingPeriodDataPoint_Source = 2
)

// Enum value maps for FundingPeriodDataPoint_Source.
var (
	FundingPeriodDataPoint_Source_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "SOURCE_EXTERNAL",
		2: "SOURCE_INTERNAL",
	}
	FundingPeriodDataPoint_Source_value = map[string]int32{
		"SOURCE_UNSPECIFIED": 0,
		"SOURCE_EXTERNAL":    1,
		"SOURCE_INTERNAL":    2,
	}
)

func (x FundingPeriodDataPoint_Source) Enum() *FundingPeriodDataPoint_Source {
	p := new(FundingPeriodDataPoint_Source)
	*p = x
	return p
}

func (x FundingPeriodDataPoint_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FundingPeriodDataPoint_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[4].Descriptor()
}

func (FundingPeriodDataPoint_Source) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[4]
}

func (x FundingPeriodDataPoint_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FundingPeriodDataPoint_Source.Descriptor instead.
func (FundingPeriodDataPoint_Source) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{19, 0}
}

type Transfer_Status int32

const (
	// Default value
	Transfer_STATUS_UNSPECIFIED Transfer_Status = 0
	// Indicates a transfer still being processed
	Transfer_STATUS_PENDING Transfer_Status = 1
	// Indicates a transfer accepted by the Vega network
	Transfer_STATUS_DONE Transfer_Status = 2
	// Indicates a transfer rejected by the Vega network
	Transfer_STATUS_REJECTED Transfer_Status = 3
	// Indicates a transfer stopped by the Vega network
	// e.g: no funds left to cover the transfer
	Transfer_STATUS_STOPPED Transfer_Status = 4
	// Indicates a transfer cancelled by the user
	Transfer_STATUS_CANCELLED Transfer_Status = 5
)

// Enum value maps for Transfer_Status.
var (
	Transfer_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PENDING",
		2: "STATUS_DONE",
		3: "STATUS_REJECTED",
		4: "STATUS_STOPPED",
		5: "STATUS_CANCELLED",
	}
	Transfer_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_PENDING":     1,
		"STATUS_DONE":        2,
		"STATUS_REJECTED":    3,
		"STATUS_STOPPED":     4,
		"STATUS_CANCELLED":   5,
	}
)

func (x Transfer_Status) Enum() *Transfer_Status {
	p := new(Transfer_Status)
	*p = x
	return p
}

func (x Transfer_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transfer_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[5].Descriptor()
}

func (Transfer_Status) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[5]
}

func (x Transfer_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transfer_Status.Descriptor instead.
func (Transfer_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{24, 0}
}

type StakeLinking_Type int32

const (
	// Default value
	StakeLinking_TYPE_UNSPECIFIED StakeLinking_Type = 0
	// Indicate of a stake deposit instruction
	StakeLinking_TYPE_LINK StakeLinking_Type = 1
	// Indicate of a stake remove instruction
	StakeLinking_TYPE_UNLINK StakeLinking_Type = 2
)

// Enum value maps for StakeLinking_Type.
var (
	StakeLinking_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_LINK",
		2: "TYPE_UNLINK",
	}
	StakeLinking_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_LINK":        1,
		"TYPE_UNLINK":      2,
	}
)

func (x StakeLinking_Type) Enum() *StakeLinking_Type {
	p := new(StakeLinking_Type)
	*p = x
	return p
}

func (x StakeLinking_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StakeLinking_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[6].Descriptor()
}

func (StakeLinking_Type) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[6]
}

func (x StakeLinking_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StakeLinking_Type.Descriptor instead.
func (StakeLinking_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{29, 0}
}

type StakeLinking_Status int32

const (
	// Default value
	StakeLinking_STATUS_UNSPECIFIED StakeLinking_Status = 0
	// Indicates an event waiting for confirmation from the Vega network
	StakeLinking_STATUS_PENDING StakeLinking_Status = 1
	// Indicates an event accepted by the Vega network
	StakeLinking_STATUS_ACCEPTED StakeLinking_Status = 2
	// Indicates an event rejected by the Vega network
	StakeLinking_STATUS_REJECTED StakeLinking_Status = 3
)

// Enum value maps for StakeLinking_Status.
var (
	StakeLinking_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PENDING",
		2: "STATUS_ACCEPTED",
		3: "STATUS_REJECTED",
	}
	StakeLinking_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_PENDING":     1,
		"STATUS_ACCEPTED":    2,
		"STATUS_REJECTED":    3,
	}
)

func (x StakeLinking_Status) Enum() *StakeLinking_Status {
	p := new(StakeLinking_Status)
	*p = x
	return p
}

func (x StakeLinking_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StakeLinking_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[7].Descriptor()
}

func (StakeLinking_Status) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[7]
}

func (x StakeLinking_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StakeLinking_Status.Descriptor instead.
func (StakeLinking_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{29, 1}
}

type ERC20MultiSigSignerEvent_Type int32

const (
	ERC20MultiSigSignerEvent_TYPE_UNSPECIFIED ERC20MultiSigSignerEvent_Type = 0
	ERC20MultiSigSignerEvent_TYPE_ADDED       ERC20MultiSigSignerEvent_Type = 1
	ERC20MultiSigSignerEvent_TYPE_REMOVED     ERC20MultiSigSignerEvent_Type = 2
)

// Enum value maps for ERC20MultiSigSignerEvent_Type.
var (
	ERC20MultiSigSignerEvent_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_ADDED",
		2: "TYPE_REMOVED",
	}
	ERC20MultiSigSignerEvent_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_ADDED":       1,
		"TYPE_REMOVED":     2,
	}
)

func (x ERC20MultiSigSignerEvent_Type) Enum() *ERC20MultiSigSignerEvent_Type {
	p := new(ERC20MultiSigSignerEvent_Type)
	*p = x
	return p
}

func (x ERC20MultiSigSignerEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERC20MultiSigSignerEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[8].Descriptor()
}

func (ERC20MultiSigSignerEvent_Type) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[8]
}

func (x ERC20MultiSigSignerEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERC20MultiSigSignerEvent_Type.Descriptor instead.
func (ERC20MultiSigSignerEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{30, 0}
}

type TransactionResult_Status int32

const (
	// Default value, always invalid
	TransactionResult_STATUS_UNSPECIFIED TransactionResult_Status = 0
	// The transaction succeeded.
	TransactionResult_STATUS_SUCCESS TransactionResult_Status = 1
	// The transaction partially succeeded.
	TransactionResult_STATUS_PARTIAL_SUCCESS TransactionResult_Status = 2
	// The transaction's final state is failure.
	TransactionResult_STATUS_FAILURE TransactionResult_Status = 3
)

// Enum value maps for TransactionResult_Status.
var (
	TransactionResult_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_PARTIAL_SUCCESS",
		3: "STATUS_FAILURE",
	}
	TransactionResult_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":     0,
		"STATUS_SUCCESS":         1,
		"STATUS_PARTIAL_SUCCESS": 2,
		"STATUS_FAILURE":         3,
	}
)

func (x TransactionResult_Status) Enum() *TransactionResult_Status {
	p := new(TransactionResult_Status)
	*p = x
	return p
}

func (x TransactionResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_events_v1_events_proto_enumTypes[9].Descriptor()
}

func (TransactionResult_Status) Type() protoreflect.EnumType {
	return &file_vega_events_v1_events_proto_enumTypes[9]
}

func (x TransactionResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionResult_Status.Descriptor instead.
func (TransactionResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{40, 0}
}

// A list of tag to associate to a market.
type MarketCommunityTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A market ID.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// A list of tags;
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *MarketCommunityTags) Reset() {
	*x = MarketCommunityTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketCommunityTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketCommunityTags) ProtoMessage() {}

func (x *MarketCommunityTags) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketCommunityTags.ProtoReflect.Descriptor instead.
func (*MarketCommunityTags) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *MarketCommunityTags) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketCommunityTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Time weighted notional position update for the current epoch.
// The time weighted notional position is used to determine whether
// a party is eligible for receiving rewards at the end of an epoch.
// These updates are provided to facilitate knowing whether or not a party
// is on track to qualify.
type TimeWeightedNotionalPositionUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch the time weighted notional position is relevant for
	EpochSeq uint64 `protobuf:"varint,1,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// Asset ID for the position's settlement asset.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Party holding the position
	Party string `protobuf:"bytes,3,opt,name=party,proto3" json:"party,omitempty"`
	// Game ID the time weighted notional position is calculated for.
	GameId string `protobuf:"bytes,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// Time weighted notional position from the end of the most recently completed epoch.
	TimeWeightedNotionalPosition string `protobuf:"bytes,5,opt,name=time_weighted_notional_position,json=timeWeightedNotionalPosition,proto3" json:"time_weighted_notional_position,omitempty"`
}

func (x *TimeWeightedNotionalPositionUpdated) Reset() {
	*x = TimeWeightedNotionalPositionUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeWeightedNotionalPositionUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeWeightedNotionalPositionUpdated) ProtoMessage() {}

func (x *TimeWeightedNotionalPositionUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeWeightedNotionalPositionUpdated.ProtoReflect.Descriptor instead.
func (*TimeWeightedNotionalPositionUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *TimeWeightedNotionalPositionUpdated) GetEpochSeq() uint64 {
	if x != nil {
		return x.EpochSeq
	}
	return 0
}

func (x *TimeWeightedNotionalPositionUpdated) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TimeWeightedNotionalPositionUpdated) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *TimeWeightedNotionalPositionUpdated) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *TimeWeightedNotionalPositionUpdated) GetTimeWeightedNotionalPosition() string {
	if x != nil {
		return x.TimeWeightedNotionalPosition
	}
	return ""
}

type AMM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the AMM.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Party ID of the owner of the AMM.
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market ID that the AMM provides liquidity for.
	MarketId string `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party ID that the AMM operates as.
	AmmPartyId string `protobuf:"bytes,4,opt,name=amm_party_id,json=ammPartyId,proto3" json:"amm_party_id,omitempty"`
	// Amount committed to the AMM.
	Commitment string `protobuf:"bytes,5,opt,name=commitment,proto3" json:"commitment,omitempty"`
	// Liquidity parameters that define the size and range of the AMM's tradeable volume.
	Parameters *AMM_ConcentratedLiquidityParameters `protobuf:"bytes,6,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Current status of the AMM.
	Status AMM_Status `protobuf:"varint,7,opt,name=status,proto3,enum=vega.events.v1.AMM_Status" json:"status,omitempty"`
	// Reason for the AMM's current status.
	StatusReason AMM_StatusReason `protobuf:"varint,8,opt,name=status_reason,json=statusReason,proto3,enum=vega.events.v1.AMM_StatusReason" json:"status_reason,omitempty"`
	// Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market.
	ProposedFee string     `protobuf:"bytes,9,opt,name=proposed_fee,json=proposedFee,proto3" json:"proposed_fee,omitempty"`
	LowerCurve  *AMM_Curve `protobuf:"bytes,10,opt,name=lower_curve,json=lowerCurve,proto3,oneof" json:"lower_curve,omitempty"`
	UpperCurve  *AMM_Curve `protobuf:"bytes,11,opt,name=upper_curve,json=upperCurve,proto3,oneof" json:"upper_curve,omitempty"`
}

func (x *AMM) Reset() {
	*x = AMM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMM) ProtoMessage() {}

func (x *AMM) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMM.ProtoReflect.Descriptor instead.
func (*AMM) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *AMM) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AMM) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *AMM) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *AMM) GetAmmPartyId() string {
	if x != nil {
		return x.AmmPartyId
	}
	return ""
}

func (x *AMM) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

func (x *AMM) GetParameters() *AMM_ConcentratedLiquidityParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *AMM) GetStatus() AMM_Status {
	if x != nil {
		return x.Status
	}
	return AMM_STATUS_UNSPECIFIED
}

func (x *AMM) GetStatusReason() AMM_StatusReason {
	if x != nil {
		return x.StatusReason
	}
	return AMM_STATUS_REASON_UNSPECIFIED
}

func (x *AMM) GetProposedFee() string {
	if x != nil {
		return x.ProposedFee
	}
	return ""
}

func (x *AMM) GetLowerCurve() *AMM_Curve {
	if x != nil {
		return x.LowerCurve
	}
	return nil
}

func (x *AMM) GetUpperCurve() *AMM_Curve {
	if x != nil {
		return x.UpperCurve
	}
	return nil
}

// Summary of the vesting and locked balances for an epoch
type VestingBalancesSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch for which these balances are valid.
	EpochSeq uint64 `protobuf:"varint,1,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// Parties' summaries.
	PartiesVestingSummary []*PartyVestingSummary `protobuf:"bytes,2,rep,name=parties_vesting_summary,json=partiesVestingSummary,proto3" json:"parties_vesting_summary,omitempty"`
}

func (x *VestingBalancesSummary) Reset() {
	*x = VestingBalancesSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VestingBalancesSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VestingBalancesSummary) ProtoMessage() {}

func (x *VestingBalancesSummary) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VestingBalancesSummary.ProtoReflect.Descriptor instead.
func (*VestingBalancesSummary) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *VestingBalancesSummary) GetEpochSeq() uint64 {
	if x != nil {
		return x.EpochSeq
	}
	return 0
}

func (x *VestingBalancesSummary) GetPartiesVestingSummary() []*PartyVestingSummary {
	if x != nil {
		return x.PartiesVestingSummary
	}
	return nil
}

// Summary of a party's vesting balances
type PartyVestingSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party ID.
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// List of locked balances.
	PartyLockedBalances []*PartyLockedBalance `protobuf:"bytes,2,rep,name=party_locked_balances,json=partyLockedBalances,proto3" json:"party_locked_balances,omitempty"`
	// List of vesting balances.
	PartyVestingBalances []*PartyVestingBalance `protobuf:"bytes,3,rep,name=party_vesting_balances,json=partyVestingBalances,proto3" json:"party_vesting_balances,omitempty"`
}

func (x *PartyVestingSummary) Reset() {
	*x = PartyVestingSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyVestingSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyVestingSummary) ProtoMessage() {}

func (x *PartyVestingSummary) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyVestingSummary.ProtoReflect.Descriptor instead.
func (*PartyVestingSummary) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *PartyVestingSummary) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyVestingSummary) GetPartyLockedBalances() []*PartyLockedBalance {
	if x != nil {
		return x.PartyLockedBalances
	}
	return nil
}

func (x *PartyVestingSummary) GetPartyVestingBalances() []*PartyVestingBalance {
	if x != nil {
		return x.PartyVestingBalances
	}
	return nil
}

// A party's locked balance for a given asset.
type PartyLockedBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset ID.
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// Epoch in which the balance will be released.
	UntilEpoch uint64 `protobuf:"varint,2,opt,name=until_epoch,json=untilEpoch,proto3" json:"until_epoch,omitempty"`
	// Locked balance.
	Balance string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *PartyLockedBalance) Reset() {
	*x = PartyLockedBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyLockedBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyLockedBalance) ProtoMessage() {}

func (x *PartyLockedBalance) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyLockedBalance.ProtoReflect.Descriptor instead.
func (*PartyLockedBalance) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *PartyLockedBalance) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *PartyLockedBalance) GetUntilEpoch() uint64 {
	if x != nil {
		return x.UntilEpoch
	}
	return 0
}

func (x *PartyLockedBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

// Balance that is being vested for the party.
type PartyVestingBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset ID.
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// Balance that is vested.
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *PartyVestingBalance) Reset() {
	*x = PartyVestingBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyVestingBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyVestingBalance) ProtoMessage() {}

func (x *PartyVestingBalance) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyVestingBalance.ProtoReflect.Descriptor instead.
func (*PartyVestingBalance) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *PartyVestingBalance) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *PartyVestingBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

// Stats of all parties eligible for volume discount.
type VolumeDiscountStatsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch at which the volume discount statistics are updated.
	AtEpoch uint64 `protobuf:"varint,1,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
	// All parties' stats.
	Stats []*PartyVolumeDiscountStats `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *VolumeDiscountStatsUpdated) Reset() {
	*x = VolumeDiscountStatsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeDiscountStatsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDiscountStatsUpdated) ProtoMessage() {}

func (x *VolumeDiscountStatsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDiscountStatsUpdated.ProtoReflect.Descriptor instead.
func (*VolumeDiscountStatsUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *VolumeDiscountStatsUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

func (x *VolumeDiscountStatsUpdated) GetStats() []*PartyVolumeDiscountStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Volume discount stats for a given party.
type PartyVolumeDiscountStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party ID.
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// deprecated.
	DiscountFactor string `protobuf:"bytes,2,opt,name=discount_factor,json=discountFactor,proto3" json:"discount_factor,omitempty"`
	// The party's running volume.
	RunningVolume string `protobuf:"bytes,3,opt,name=running_volume,json=runningVolume,proto3" json:"running_volume,omitempty"`
	// Discount factors applied to fees.
	DiscountFactors *vega.DiscountFactors `protobuf:"bytes,4,opt,name=discount_factors,json=discountFactors,proto3" json:"discount_factors,omitempty"`
}

func (x *PartyVolumeDiscountStats) Reset() {
	*x = PartyVolumeDiscountStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyVolumeDiscountStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyVolumeDiscountStats) ProtoMessage() {}

func (x *PartyVolumeDiscountStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyVolumeDiscountStats.ProtoReflect.Descriptor instead.
func (*PartyVolumeDiscountStats) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{8}
}

func (x *PartyVolumeDiscountStats) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyVolumeDiscountStats) GetDiscountFactor() string {
	if x != nil {
		return x.DiscountFactor
	}
	return ""
}

func (x *PartyVolumeDiscountStats) GetRunningVolume() string {
	if x != nil {
		return x.RunningVolume
	}
	return ""
}

func (x *PartyVolumeDiscountStats) GetDiscountFactors() *vega.DiscountFactors {
	if x != nil {
		return x.DiscountFactors
	}
	return nil
}

// Stats of all parties invested in the vesting program.
type VestingStatsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch at which the vesting statistics are updated.
	AtEpoch uint64 `protobuf:"varint,1,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
	// All parties stats.
	Stats []*PartyVestingStats `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *VestingStatsUpdated) Reset() {
	*x = VestingStatsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VestingStatsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VestingStatsUpdated) ProtoMessage() {}

func (x *VestingStatsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VestingStatsUpdated.ProtoReflect.Descriptor instead.
func (*VestingStatsUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{9}
}

func (x *VestingStatsUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

func (x *VestingStatsUpdated) GetStats() []*PartyVestingStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// The vesting stats for a given party.
type PartyVestingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party.
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The bonus multiplier applied on the reward.
	RewardBonusMultiplier string `protobuf:"bytes,2,opt,name=reward_bonus_multiplier,json=rewardBonusMultiplier,proto3" json:"reward_bonus_multiplier,omitempty"`
	// The balance of the party, in quantum.
	QuantumBalance string `protobuf:"bytes,3,opt,name=quantum_balance,json=quantumBalance,proto3" json:"quantum_balance,omitempty"`
	// Bonus multiplier applied on the reward, summed across all derived accounts.
	SummedRewardBonusMultiplier string `protobuf:"bytes,4,opt,name=summed_reward_bonus_multiplier,json=summedRewardBonusMultiplier,proto3" json:"summed_reward_bonus_multiplier,omitempty"`
	// The balance of the party and derived keys, in quantum.
	SummedQuantumBalance string `protobuf:"bytes,5,opt,name=summed_quantum_balance,json=summedQuantumBalance,proto3" json:"summed_quantum_balance,omitempty"`
}

func (x *PartyVestingStats) Reset() {
	*x = PartyVestingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyVestingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyVestingStats) ProtoMessage() {}

func (x *PartyVestingStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyVestingStats.ProtoReflect.Descriptor instead.
func (*PartyVestingStats) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{10}
}

func (x *PartyVestingStats) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyVestingStats) GetRewardBonusMultiplier() string {
	if x != nil {
		return x.RewardBonusMultiplier
	}
	return ""
}

func (x *PartyVestingStats) GetQuantumBalance() string {
	if x != nil {
		return x.QuantumBalance
	}
	return ""
}

func (x *PartyVestingStats) GetSummedRewardBonusMultiplier() string {
	if x != nil {
		return x.SummedRewardBonusMultiplier
	}
	return ""
}

func (x *PartyVestingStats) GetSummedQuantumBalance() string {
	if x != nil {
		return x.SummedQuantumBalance
	}
	return ""
}

// Fees rewards and discounts paid / received per parties during an epoch
type FeesStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market the fees were paid in
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Settlement asset of the market.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Epoch for which these stats where valid.
	EpochSeq uint64 `protobuf:"varint,3,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// Total referral rewards received by the referrer of the referral set.
	TotalRewardsReceived []*PartyAmount `protobuf:"bytes,4,rep,name=total_rewards_received,json=totalRewardsReceived,proto3" json:"total_rewards_received,omitempty"`
	// Referral rewards generated by all referee taker fees.
	ReferrerRewardsGenerated []*ReferrerRewardsGenerated `protobuf:"bytes,5,rep,name=referrer_rewards_generated,json=referrerRewardsGenerated,proto3" json:"referrer_rewards_generated,omitempty"`
	// Total referral discounts applied to all referee taker fees.
	RefereesDiscountApplied []*PartyAmount `protobuf:"bytes,6,rep,name=referees_discount_applied,json=refereesDiscountApplied,proto3" json:"referees_discount_applied,omitempty"`
	// Total volume discounts applied to all referee taker fees.
	VolumeDiscountApplied []*PartyAmount `protobuf:"bytes,7,rep,name=volume_discount_applied,json=volumeDiscountApplied,proto3" json:"volume_discount_applied,omitempty"`
	// Total maker fees received by the maker side.
	TotalMakerFeesReceived []*PartyAmount `protobuf:"bytes,8,rep,name=total_maker_fees_received,json=totalMakerFeesReceived,proto3" json:"total_maker_fees_received,omitempty"`
	// Maker fees paid by all trade aggressors, and which makers the fees were paid to.
	MakerFeesGenerated []*MakerFeesGenerated `protobuf:"bytes,9,rep,name=maker_fees_generated,json=makerFeesGenerated,proto3" json:"maker_fees_generated,omitempty"`
	// Total trading fees received and paid by the party.
	TotalFeesPaidAndReceived []*PartyAmount `protobuf:"bytes,11,rep,name=total_fees_paid_and_received,json=totalFeesPaidAndReceived,proto3" json:"total_fees_paid_and_received,omitempty"`
}

func (x *FeesStats) Reset() {
	*x = FeesStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeesStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeesStats) ProtoMessage() {}

func (x *FeesStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeesStats.ProtoReflect.Descriptor instead.
func (*FeesStats) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{11}
}

func (x *FeesStats) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *FeesStats) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *FeesStats) GetEpochSeq() uint64 {
	if x != nil {
		return x.EpochSeq
	}
	return 0
}

func (x *FeesStats) GetTotalRewardsReceived() []*PartyAmount {
	if x != nil {
		return x.TotalRewardsReceived
	}
	return nil
}

func (x *FeesStats) GetReferrerRewardsGenerated() []*ReferrerRewardsGenerated {
	if x != nil {
		return x.ReferrerRewardsGenerated
	}
	return nil
}

func (x *FeesStats) GetRefereesDiscountApplied() []*PartyAmount {
	if x != nil {
		return x.RefereesDiscountApplied
	}
	return nil
}

func (x *FeesStats) GetVolumeDiscountApplied() []*PartyAmount {
	if x != nil {
		return x.VolumeDiscountApplied
	}
	return nil
}

func (x *FeesStats) GetTotalMakerFeesReceived() []*PartyAmount {
	if x != nil {
		return x.TotalMakerFeesReceived
	}
	return nil
}

func (x *FeesStats) GetMakerFeesGenerated() []*MakerFeesGenerated {
	if x != nil {
		return x.MakerFeesGenerated
	}
	return nil
}

func (x *FeesStats) GetTotalFeesPaidAndReceived() []*PartyAmount {
	if x != nil {
		return x.TotalFeesPaidAndReceived
	}
	return nil
}

// Rewards generated for referrers by each of their referees
type ReferrerRewardsGenerated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Referrer party.
	Referrer string `protobuf:"bytes,1,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// Amount of rewards generated per party.
	GeneratedReward []*PartyAmount `protobuf:"bytes,2,rep,name=generated_reward,json=generatedReward,proto3" json:"generated_reward,omitempty"`
}

func (x *ReferrerRewardsGenerated) Reset() {
	*x = ReferrerRewardsGenerated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferrerRewardsGenerated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferrerRewardsGenerated) ProtoMessage() {}

func (x *ReferrerRewardsGenerated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferrerRewardsGenerated.ProtoReflect.Descriptor instead.
func (*ReferrerRewardsGenerated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{12}
}

func (x *ReferrerRewardsGenerated) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *ReferrerRewardsGenerated) GetGeneratedReward() []*PartyAmount {
	if x != nil {
		return x.GeneratedReward
	}
	return nil
}

// Maker fees generated by the trade aggressor
type MakerFeesGenerated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party that paid the fees.
	Taker string `protobuf:"bytes,1,opt,name=taker,proto3" json:"taker,omitempty"`
	// Amount of maker fees paid by the taker to the maker.
	MakerFeesPaid []*PartyAmount `protobuf:"bytes,2,rep,name=maker_fees_paid,json=makerFeesPaid,proto3" json:"maker_fees_paid,omitempty"`
}

func (x *MakerFeesGenerated) Reset() {
	*x = MakerFeesGenerated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakerFeesGenerated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakerFeesGenerated) ProtoMessage() {}

func (x *MakerFeesGenerated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakerFeesGenerated.ProtoReflect.Descriptor instead.
func (*MakerFeesGenerated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{13}
}

func (x *MakerFeesGenerated) GetTaker() string {
	if x != nil {
		return x.Taker
	}
	return ""
}

func (x *MakerFeesGenerated) GetMakerFeesPaid() []*PartyAmount {
	if x != nil {
		return x.MakerFeesPaid
	}
	return nil
}

// A pair of a party and amount
type PartyAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Receiving party ID.
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// Amount received.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Amount value in quantum.
	QuantumAmount string `protobuf:"bytes,3,opt,name=quantum_amount,json=quantumAmount,proto3" json:"quantum_amount,omitempty"`
}

func (x *PartyAmount) Reset() {
	*x = PartyAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAmount) ProtoMessage() {}

func (x *PartyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAmount.ProtoReflect.Descriptor instead.
func (*PartyAmount) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{14}
}

func (x *PartyAmount) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PartyAmount) GetQuantumAmount() string {
	if x != nil {
		return x.QuantumAmount
	}
	return ""
}

// The updated activity streak of a party at end of epoch
type PartyActivityStreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party.
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// How many epoch this party has been active for.
	ActiveFor uint64 `protobuf:"varint,2,opt,name=active_for,json=activeFor,proto3" json:"active_for,omitempty"`
	// how many epoch this party has been inactive for.
	InactiveFor uint64 `protobuf:"varint,3,opt,name=inactive_for,json=inactiveFor,proto3" json:"inactive_for,omitempty"`
	// Is this party considered active or not.
	IsActive bool `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// The current rewards distribution multiplier for this party.
	RewardDistributionActivityMultiplier string `protobuf:"bytes,5,opt,name=reward_distribution_activity_multiplier,json=rewardDistributionActivityMultiplier,proto3" json:"reward_distribution_activity_multiplier,omitempty"`
	// The vesting multiplier for this party.
	RewardVestingActivityMultiplier string `protobuf:"bytes,6,opt,name=reward_vesting_activity_multiplier,json=rewardVestingActivityMultiplier,proto3" json:"reward_vesting_activity_multiplier,omitempty"`
	// The epoch this information is relevant to.
	Epoch uint64 `protobuf:"varint,7,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Party's traded volume at the end of the given epoch
	TradedVolume string `protobuf:"bytes,8,opt,name=traded_volume,json=tradedVolume,proto3" json:"traded_volume,omitempty"`
	// Party's open interest volume at the end of the given epoch
	OpenVolume string `protobuf:"bytes,9,opt,name=open_volume,json=openVolume,proto3" json:"open_volume,omitempty"`
}

func (x *PartyActivityStreak) Reset() {
	*x = PartyActivityStreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyActivityStreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyActivityStreak) ProtoMessage() {}

func (x *PartyActivityStreak) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyActivityStreak.ProtoReflect.Descriptor instead.
func (*PartyActivityStreak) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{15}
}

func (x *PartyActivityStreak) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyActivityStreak) GetActiveFor() uint64 {
	if x != nil {
		return x.ActiveFor
	}
	return 0
}

func (x *PartyActivityStreak) GetInactiveFor() uint64 {
	if x != nil {
		return x.InactiveFor
	}
	return 0
}

func (x *PartyActivityStreak) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PartyActivityStreak) GetRewardDistributionActivityMultiplier() string {
	if x != nil {
		return x.RewardDistributionActivityMultiplier
	}
	return ""
}

func (x *PartyActivityStreak) GetRewardVestingActivityMultiplier() string {
	if x != nil {
		return x.RewardVestingActivityMultiplier
	}
	return ""
}

func (x *PartyActivityStreak) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *PartyActivityStreak) GetTradedVolume() string {
	if x != nil {
		return x.TradedVolume
	}
	return ""
}

func (x *PartyActivityStreak) GetOpenVolume() string {
	if x != nil {
		return x.OpenVolume
	}
	return ""
}

// Event notifying on the details of a funding interval for a perpetuals market.
type FundingPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the market for which this funding period relates to.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Sequence number of the funding period.
	Seq uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// Time in Unix nanoseconds when the funding period started.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Time in Unix nanoseconds when the funding period ended.
	End *int64 `protobuf:"varint,4,opt,name=end,proto3,oneof" json:"end,omitempty"`
	// Funding payment for this period as the difference between the time-weighted average price of the external and internal data point.
	FundingPayment *string `protobuf:"bytes,5,opt,name=funding_payment,json=fundingPayment,proto3,oneof" json:"funding_payment,omitempty"`
	// Percentage difference between the time-weighted average price of the external and internal data point.
	FundingRate *string `protobuf:"bytes,6,opt,name=funding_rate,json=fundingRate,proto3,oneof" json:"funding_rate,omitempty"`
	// TWAP for this period based on the internal data-points.
	InternalTwap *string `protobuf:"bytes,7,opt,name=internal_twap,json=internalTwap,proto3,oneof" json:"internal_twap,omitempty"`
	// TWAP for this period based on the external data-points.
	ExternalTwap *string `protobuf:"bytes,8,opt,name=external_twap,json=externalTwap,proto3,oneof" json:"external_twap,omitempty"`
}

func (x *FundingPeriod) Reset() {
	*x = FundingPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingPeriod) ProtoMessage() {}

func (x *FundingPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingPeriod.ProtoReflect.Descriptor instead.
func (*FundingPeriod) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{16}
}

func (x *FundingPeriod) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *FundingPeriod) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *FundingPeriod) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FundingPeriod) GetEnd() int64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *FundingPeriod) GetFundingPayment() string {
	if x != nil && x.FundingPayment != nil {
		return *x.FundingPayment
	}
	return ""
}

func (x *FundingPeriod) GetFundingRate() string {
	if x != nil && x.FundingRate != nil {
		return *x.FundingRate
	}
	return ""
}

func (x *FundingPeriod) GetInternalTwap() string {
	if x != nil && x.InternalTwap != nil {
		return *x.InternalTwap
	}
	return ""
}

func (x *FundingPeriod) GetExternalTwap() string {
	if x != nil && x.ExternalTwap != nil {
		return *x.ExternalTwap
	}
	return ""
}

// The amount gained or lost by a party as a result of a funding payment.
type FundingPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the party.
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The amount paid, this can be negative for parties who lost at the end of the funding period.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *FundingPayment) Reset() {
	*x = FundingPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingPayment) ProtoMessage() {}

func (x *FundingPayment) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingPayment.ProtoReflect.Descriptor instead.
func (*FundingPayment) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{17}
}

func (x *FundingPayment) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *FundingPayment) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Event notifying of funding payments at the end of a funding period.
type FundingPayments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the market.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Sequence number of the funding period associated with these payments.
	Seq uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// List of parties and the payment amounts, this can be negative for parties who lost at the end of the funding period.
	Payments []*FundingPayment `protobuf:"bytes,3,rep,name=payments,proto3" json:"payments,omitempty"`
}

func (x *FundingPayments) Reset() {
	*x = FundingPayments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingPayments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingPayments) ProtoMessage() {}

func (x *FundingPayments) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingPayments.ProtoReflect.Descriptor instead.
func (*FundingPayments) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{18}
}

func (x *FundingPayments) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *FundingPayments) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *FundingPayments) GetPayments() []*FundingPayment {
	if x != nil {
		return x.Payments
	}
	return nil
}

// Event notifying a data point for a funding period.
type FundingPeriodDataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID which the data point relates to.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Sequence number of the funding period this data point belongs to.
	Seq uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// Origin of the data point.
	DataPointType FundingPeriodDataPoint_Source `protobuf:"varint,3,opt,name=data_point_type,json=dataPointType,proto3,enum=vega.events.v1.FundingPeriodDataPoint_Source" json:"data_point_type,omitempty"`
	// Price of the asset as seen by this data point.
	Price string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Timestamp in Unix nanoseconds of when the data point was received.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The TWAP for this source with this data-point added.
	Twap string `protobuf:"bytes,7,opt,name=twap,proto3" json:"twap,omitempty"`
}

func (x *FundingPeriodDataPoint) Reset() {
	*x = FundingPeriodDataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingPeriodDataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingPeriodDataPoint) ProtoMessage() {}

func (x *FundingPeriodDataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingPeriodDataPoint.ProtoReflect.Descriptor instead.
func (*FundingPeriodDataPoint) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{19}
}

func (x *FundingPeriodDataPoint) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *FundingPeriodDataPoint) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *FundingPeriodDataPoint) GetDataPointType() FundingPeriodDataPoint_Source {
	if x != nil {
		return x.DataPointType
	}
	return FundingPeriodDataPoint_SOURCE_UNSPECIFIED
}

func (x *FundingPeriodDataPoint) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *FundingPeriodDataPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FundingPeriodDataPoint) GetTwap() string {
	if x != nil {
		return x.Twap
	}
	return ""
}

type StopOrderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Submission *v1.OrderSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
	StopOrder  *vega.StopOrder     `protobuf:"bytes,2,opt,name=stop_order,json=stopOrder,proto3" json:"stop_order,omitempty"`
}

func (x *StopOrderEvent) Reset() {
	*x = StopOrderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopOrderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopOrderEvent) ProtoMessage() {}

func (x *StopOrderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopOrderEvent.ProtoReflect.Descriptor instead.
func (*StopOrderEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{20}
}

func (x *StopOrderEvent) GetSubmission() *v1.OrderSubmission {
	if x != nil {
		return x.Submission
	}
	return nil
}

func (x *StopOrderEvent) GetStopOrder() *vega.StopOrder {
	if x != nil {
		return x.StopOrder
	}
	return nil
}

type ERC20MultiSigSignerAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the signature bundle
	SignatureId string `protobuf:"bytes,1,opt,name=signature_id,json=signatureId,proto3" json:"signature_id,omitempty"`
	// Node ID of the Vega node to be added
	ValidatorId string `protobuf:"bytes,2,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	// Time at which this happened
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Ethereum address of the new signer
	NewSigner string `protobuf:"bytes,4,opt,name=new_signer,json=newSigner,proto3" json:"new_signer,omitempty"`
	// Address of the submitter of the transaction
	Submitter string `protobuf:"bytes,5,opt,name=submitter,proto3" json:"submitter,omitempty"`
	// Nonce used.
	Nonce string `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Epoch that the node was added for
	EpochSeq string `protobuf:"bytes,7,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// EVM chain ID that the multisig control contract lives on.
	ChainId string `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *ERC20MultiSigSignerAdded) Reset() {
	*x = ERC20MultiSigSignerAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20MultiSigSignerAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20MultiSigSignerAdded) ProtoMessage() {}

func (x *ERC20MultiSigSignerAdded) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20MultiSigSignerAdded.ProtoReflect.Descriptor instead.
func (*ERC20MultiSigSignerAdded) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{21}
}

func (x *ERC20MultiSigSignerAdded) GetSignatureId() string {
	if x != nil {
		return x.SignatureId
	}
	return ""
}

func (x *ERC20MultiSigSignerAdded) GetValidatorId() string {
	if x != nil {
		return x.ValidatorId
	}
	return ""
}

func (x *ERC20MultiSigSignerAdded) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ERC20MultiSigSignerAdded) GetNewSigner() string {
	if x != nil {
		return x.NewSigner
	}
	return ""
}

func (x *ERC20MultiSigSignerAdded) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *ERC20MultiSigSignerAdded) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20MultiSigSignerAdded) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *ERC20MultiSigSignerAdded) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type ERC20MultiSigSignerRemovedSubmitter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signature ID of the signer removed.
	SignatureId string `protobuf:"bytes,1,opt,name=signature_id,json=signatureId,proto3" json:"signature_id,omitempty"`
	// Address of the submitter of the transaction
	Submitter string `protobuf:"bytes,2,opt,name=submitter,proto3" json:"submitter,omitempty"`
}

func (x *ERC20MultiSigSignerRemovedSubmitter) Reset() {
	*x = ERC20MultiSigSignerRemovedSubmitter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20MultiSigSignerRemovedSubmitter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20MultiSigSignerRemovedSubmitter) ProtoMessage() {}

func (x *ERC20MultiSigSignerRemovedSubmitter) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20MultiSigSignerRemovedSubmitter.ProtoReflect.Descriptor instead.
func (*ERC20MultiSigSignerRemovedSubmitter) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{22}
}

func (x *ERC20MultiSigSignerRemovedSubmitter) GetSignatureId() string {
	if x != nil {
		return x.SignatureId
	}
	return ""
}

func (x *ERC20MultiSigSignerRemovedSubmitter) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

type ERC20MultiSigSignerRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List containing all the IDs of bundle generated
	// There should be one bundle generated for every validators
	// in the validator set
	SignatureSubmitters []*ERC20MultiSigSignerRemovedSubmitter `protobuf:"bytes,1,rep,name=signature_submitters,json=signatureSubmitters,proto3" json:"signature_submitters,omitempty"`
	// Node ID of the Vega node which is to be removed
	ValidatorId string `protobuf:"bytes,2,opt,name=validator_id,json=validatorId,proto3" json:"validator_id,omitempty"`
	// Time at which this happened
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Ethereum address of the signer to be removed
	OldSigner string `protobuf:"bytes,4,opt,name=old_signer,json=oldSigner,proto3" json:"old_signer,omitempty"`
	// Nonce used.
	Nonce string `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Epoch that the node was removed for
	EpochSeq string `protobuf:"bytes,6,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// EVM chain ID that the multisig control contract lives on.
	ChainId string `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *ERC20MultiSigSignerRemoved) Reset() {
	*x = ERC20MultiSigSignerRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20MultiSigSignerRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20MultiSigSignerRemoved) ProtoMessage() {}

func (x *ERC20MultiSigSignerRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20MultiSigSignerRemoved.ProtoReflect.Descriptor instead.
func (*ERC20MultiSigSignerRemoved) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{23}
}

func (x *ERC20MultiSigSignerRemoved) GetSignatureSubmitters() []*ERC20MultiSigSignerRemovedSubmitter {
	if x != nil {
		return x.SignatureSubmitters
	}
	return nil
}

func (x *ERC20MultiSigSignerRemoved) GetValidatorId() string {
	if x != nil {
		return x.ValidatorId
	}
	return ""
}

func (x *ERC20MultiSigSignerRemoved) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ERC20MultiSigSignerRemoved) GetOldSigner() string {
	if x != nil {
		return x.OldSigner
	}
	return ""
}

func (x *ERC20MultiSigSignerRemoved) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20MultiSigSignerRemoved) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *ERC20MultiSigSignerRemoved) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	From            string           `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	FromAccountType vega.AccountType `protobuf:"varint,3,opt,name=from_account_type,json=fromAccountType,proto3,enum=vega.AccountType" json:"from_account_type,omitempty"`
	To              string           `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	ToAccountType   vega.AccountType `protobuf:"varint,5,opt,name=to_account_type,json=toAccountType,proto3,enum=vega.AccountType" json:"to_account_type,omitempty"`
	Asset           string           `protobuf:"bytes,6,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount          string           `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Reference       string           `protobuf:"bytes,8,opt,name=reference,proto3" json:"reference,omitempty"`
	Status          Transfer_Status  `protobuf:"varint,9,opt,name=status,proto3,enum=vega.events.v1.Transfer_Status" json:"status,omitempty"`
	Timestamp       int64            `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reason          *string          `protobuf:"bytes,11,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	// ID of the game this transfer was made in relation to. A transfer is made to members of a team
	// or participants who take part in a game and are rewarded for their participation
	GameId *string `protobuf:"bytes,12,opt,name=game_id,json=gameId,proto3,oneof" json:"game_id,omitempty"`
	// Types that are assignable to Kind:
	//
	//	*Transfer_OneOff
	//	*Transfer_Recurring
	//	*Transfer_OneOffGovernance
	//	*Transfer_RecurringGovernance
	Kind isTransfer_Kind `protobuf_oneof:"kind"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{24}
}

func (x *Transfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transfer) GetFromAccountType() vega.AccountType {
	if x != nil {
		return x.FromAccountType
	}
	return vega.AccountType(0)
}

func (x *Transfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transfer) GetToAccountType() vega.AccountType {
	if x != nil {
		return x.ToAccountType
	}
	return vega.AccountType(0)
}

func (x *Transfer) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Transfer) GetStatus() Transfer_Status {
	if x != nil {
		return x.Status
	}
	return Transfer_STATUS_UNSPECIFIED
}

func (x *Transfer) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Transfer) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *Transfer) GetGameId() string {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return ""
}

func (m *Transfer) GetKind() isTransfer_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Transfer) GetOneOff() *OneOffTransfer {
	if x, ok := x.GetKind().(*Transfer_OneOff); ok {
		return x.OneOff
	}
	return nil
}

func (x *Transfer) GetRecurring() *RecurringTransfer {
	if x, ok := x.GetKind().(*Transfer_Recurring); ok {
		return x.Recurring
	}
	return nil
}

func (x *Transfer) GetOneOffGovernance() *OneOffGovernanceTransfer {
	if x, ok := x.GetKind().(*Transfer_OneOffGovernance); ok {
		return x.OneOffGovernance
	}
	return nil
}

func (x *Transfer) GetRecurringGovernance() *RecurringGovernanceTransfer {
	if x, ok := x.GetKind().(*Transfer_RecurringGovernance); ok {
		return x.RecurringGovernance
	}
	return nil
}

type isTransfer_Kind interface {
	isTransfer_Kind()
}

type Transfer_OneOff struct {
	OneOff *OneOffTransfer `protobuf:"bytes,101,opt,name=one_off,json=oneOff,proto3,oneof"`
}

type Transfer_Recurring struct {
	Recurring *RecurringTransfer `protobuf:"bytes,102,opt,name=recurring,proto3,oneof"`
}

type Transfer_OneOffGovernance struct {
	OneOffGovernance *OneOffGovernanceTransfer `protobuf:"bytes,103,opt,name=one_off_governance,json=oneOffGovernance,proto3,oneof"`
}

type Transfer_RecurringGovernance struct {
	RecurringGovernance *RecurringGovernanceTransfer `protobuf:"bytes,104,opt,name=recurring_governance,json=recurringGovernance,proto3,oneof"`
}

func (*Transfer_OneOff) isTransfer_Kind() {}

func (*Transfer_Recurring) isTransfer_Kind() {}

func (*Transfer_OneOffGovernance) isTransfer_Kind() {}

func (*Transfer_RecurringGovernance) isTransfer_Kind() {}

type OneOffGovernanceTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliverOn int64 `protobuf:"varint,1,opt,name=deliver_on,json=deliverOn,proto3" json:"deliver_on,omitempty"`
}

func (x *OneOffGovernanceTransfer) Reset() {
	*x = OneOffGovernanceTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOffGovernanceTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOffGovernanceTransfer) ProtoMessage() {}

func (x *OneOffGovernanceTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOffGovernanceTransfer.ProtoReflect.Descriptor instead.
func (*OneOffGovernanceTransfer) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{25}
}

func (x *OneOffGovernanceTransfer) GetDeliverOn() int64 {
	if x != nil {
		return x.DeliverOn
	}
	return 0
}

type OneOffTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliverOn int64 `protobuf:"varint,1,opt,name=deliver_on,json=deliverOn,proto3" json:"deliver_on,omitempty"`
}

func (x *OneOffTransfer) Reset() {
	*x = OneOffTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOffTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOffTransfer) ProtoMessage() {}

func (x *OneOffTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOffTransfer.ProtoReflect.Descriptor instead.
func (*OneOffTransfer) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{26}
}

func (x *OneOffTransfer) GetDeliverOn() int64 {
	if x != nil {
		return x.DeliverOn
	}
	return 0
}

type RecurringTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartEpoch       uint64                 `protobuf:"varint,1,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	EndEpoch         *uint64                `protobuf:"varint,2,opt,name=end_epoch,json=endEpoch,proto3,oneof" json:"end_epoch,omitempty"`
	Factor           string                 `protobuf:"bytes,3,opt,name=factor,proto3" json:"factor,omitempty"`
	DispatchStrategy *vega.DispatchStrategy `protobuf:"bytes,4,opt,name=dispatch_strategy,json=dispatchStrategy,proto3" json:"dispatch_strategy,omitempty"`
}

func (x *RecurringTransfer) Reset() {
	*x = RecurringTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringTransfer) ProtoMessage() {}

func (x *RecurringTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringTransfer.ProtoReflect.Descriptor instead.
func (*RecurringTransfer) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{27}
}

func (x *RecurringTransfer) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *RecurringTransfer) GetEndEpoch() uint64 {
	if x != nil && x.EndEpoch != nil {
		return *x.EndEpoch
	}
	return 0
}

func (x *RecurringTransfer) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

func (x *RecurringTransfer) GetDispatchStrategy() *vega.DispatchStrategy {
	if x != nil {
		return x.DispatchStrategy
	}
	return nil
}

type RecurringGovernanceTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartEpoch       uint64                 `protobuf:"varint,1,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	EndEpoch         *uint64                `protobuf:"varint,2,opt,name=end_epoch,json=endEpoch,proto3,oneof" json:"end_epoch,omitempty"`
	DispatchStrategy *vega.DispatchStrategy `protobuf:"bytes,3,opt,name=dispatch_strategy,json=dispatchStrategy,proto3,oneof" json:"dispatch_strategy,omitempty"`
	Factor           string                 `protobuf:"bytes,4,opt,name=factor,proto3" json:"factor,omitempty"`
}

func (x *RecurringGovernanceTransfer) Reset() {
	*x = RecurringGovernanceTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringGovernanceTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringGovernanceTransfer) ProtoMessage() {}

func (x *RecurringGovernanceTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringGovernanceTransfer.ProtoReflect.Descriptor instead.
func (*RecurringGovernanceTransfer) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{28}
}

func (x *RecurringGovernanceTransfer) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *RecurringGovernanceTransfer) GetEndEpoch() uint64 {
	if x != nil && x.EndEpoch != nil {
		return *x.EndEpoch
	}
	return 0
}

func (x *RecurringGovernanceTransfer) GetDispatchStrategy() *vega.DispatchStrategy {
	if x != nil {
		return x.DispatchStrategy
	}
	return nil
}

func (x *RecurringGovernanceTransfer) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

// StakeLinking - an event notifying of stake being deposited or removed for a given party
// These events are emitted for every Staking deposit or removed accepted by the network
type StakeLinking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal ID for this staking event
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Stake linking event type.
	Type StakeLinking_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vega.events.v1.StakeLinking_Type" json:"type,omitempty"`
	// Timestamp in Unix nanoseconds of when the event was emitted by Ethereum.
	Ts int64 `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	// Party to whom the event is directed at.
	Party string `protobuf:"bytes,4,opt,name=party,proto3" json:"party,omitempty"`
	// Amount of stake deposited or removed.
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Status of the event.
	Status StakeLinking_Status `protobuf:"varint,6,opt,name=status,proto3,enum=vega.events.v1.StakeLinking_Status" json:"status,omitempty"`
	// Time at which the Vega network finalised the state of the event.
	FinalizedAt int64 `protobuf:"varint,7,opt,name=finalized_at,json=finalizedAt,proto3" json:"finalized_at,omitempty"`
	// Hash of the transaction in which the event happened.
	TxHash string `protobuf:"bytes,8,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Block when the event happened.
	BlockHeight uint64 `protobuf:"varint,9,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Block time.
	BlockTime int64 `protobuf:"varint,10,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// Log index.
	LogIndex uint64 `protobuf:"varint,11,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	// Ethereum address from which the stake link was initiated.
	EthereumAddress string `protobuf:"bytes,12,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
}

func (x *StakeLinking) Reset() {
	*x = StakeLinking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeLinking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeLinking) ProtoMessage() {}

func (x *StakeLinking) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeLinking.ProtoReflect.Descriptor instead.
func (*StakeLinking) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{29}
}

func (x *StakeLinking) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StakeLinking) GetType() StakeLinking_Type {
	if x != nil {
		return x.Type
	}
	return StakeLinking_TYPE_UNSPECIFIED
}

func (x *StakeLinking) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *StakeLinking) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *StakeLinking) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeLinking) GetStatus() StakeLinking_Status {
	if x != nil {
		return x.Status
	}
	return StakeLinking_STATUS_UNSPECIFIED
}

func (x *StakeLinking) GetFinalizedAt() int64 {
	if x != nil {
		return x.FinalizedAt
	}
	return 0
}

func (x *StakeLinking) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *StakeLinking) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *StakeLinking) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *StakeLinking) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *StakeLinking) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

type ERC20MultiSigSignerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        ERC20MultiSigSignerEvent_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vega.events.v1.ERC20MultiSigSignerEvent_Type" json:"type,omitempty"`
	Signer      string                        `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	Nonce       string                        `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BlockTime   int64                         `protobuf:"varint,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	TxHash      string                        `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex    uint64                        `protobuf:"varint,7,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockNumber uint64                        `protobuf:"varint,8,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ChainId     string                        `protobuf:"bytes,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *ERC20MultiSigSignerEvent) Reset() {
	*x = ERC20MultiSigSignerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20MultiSigSignerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20MultiSigSignerEvent) ProtoMessage() {}

func (x *ERC20MultiSigSignerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20MultiSigSignerEvent.ProtoReflect.Descriptor instead.
func (*ERC20MultiSigSignerEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{30}
}

func (x *ERC20MultiSigSignerEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ERC20MultiSigSignerEvent) GetType() ERC20MultiSigSignerEvent_Type {
	if x != nil {
		return x.Type
	}
	return ERC20MultiSigSignerEvent_TYPE_UNSPECIFIED
}

func (x *ERC20MultiSigSignerEvent) GetSigner() string {
	if x != nil {
		return x.Signer
	}
	return ""
}

func (x *ERC20MultiSigSignerEvent) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20MultiSigSignerEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *ERC20MultiSigSignerEvent) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *ERC20MultiSigSignerEvent) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *ERC20MultiSigSignerEvent) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ERC20MultiSigSignerEvent) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type ERC20MultiSigThresholdSetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewThreshold uint32 `protobuf:"varint,2,opt,name=new_threshold,json=newThreshold,proto3" json:"new_threshold,omitempty"`
	Nonce        string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BlockTime    int64  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	TxHash       string `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex     uint64 `protobuf:"varint,6,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockNumber  uint64 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ChainId      string `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *ERC20MultiSigThresholdSetEvent) Reset() {
	*x = ERC20MultiSigThresholdSetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20MultiSigThresholdSetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20MultiSigThresholdSetEvent) ProtoMessage() {}

func (x *ERC20MultiSigThresholdSetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20MultiSigThresholdSetEvent.ProtoReflect.Descriptor instead.
func (*ERC20MultiSigThresholdSetEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{31}
}

func (x *ERC20MultiSigThresholdSetEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ERC20MultiSigThresholdSetEvent) GetNewThreshold() uint32 {
	if x != nil {
		return x.NewThreshold
	}
	return 0
}

func (x *ERC20MultiSigThresholdSetEvent) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20MultiSigThresholdSetEvent) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *ERC20MultiSigThresholdSetEvent) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *ERC20MultiSigThresholdSetEvent) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *ERC20MultiSigThresholdSetEvent) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ERC20MultiSigThresholdSetEvent) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type CheckpointEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockHash   string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *CheckpointEvent) Reset() {
	*x = CheckpointEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointEvent) ProtoMessage() {}

func (x *CheckpointEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointEvent.ProtoReflect.Descriptor instead.
func (*CheckpointEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{32}
}

func (x *CheckpointEvent) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CheckpointEvent) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *CheckpointEvent) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type StreamStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *StreamStartEvent) Reset() {
	*x = StreamStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStartEvent) ProtoMessage() {}

func (x *StreamStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStartEvent.ProtoReflect.Descriptor instead.
func (*StreamStartEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{33}
}

func (x *StreamStartEvent) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

type RewardPayoutEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party                string  `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	EpochSeq             string  `protobuf:"bytes,2,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	Asset                string  `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount               string  `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	PercentOfTotalReward string  `protobuf:"bytes,5,opt,name=percent_of_total_reward,json=percentOfTotalReward,proto3" json:"percent_of_total_reward,omitempty"`
	Timestamp            int64   `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RewardType           string  `protobuf:"bytes,7,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	LockedUntilEpoch     string  `protobuf:"bytes,9,opt,name=locked_until_epoch,json=lockedUntilEpoch,proto3" json:"locked_until_epoch,omitempty"`
	QuantumAmount        string  `protobuf:"bytes,10,opt,name=quantum_amount,json=quantumAmount,proto3" json:"quantum_amount,omitempty"`
	GameId               *string `protobuf:"bytes,11,opt,name=game_id,json=gameId,proto3,oneof" json:"game_id,omitempty"`
}

func (x *RewardPayoutEvent) Reset() {
	*x = RewardPayoutEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardPayoutEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardPayoutEvent) ProtoMessage() {}

func (x *RewardPayoutEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardPayoutEvent.ProtoReflect.Descriptor instead.
func (*RewardPayoutEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{34}
}

func (x *RewardPayoutEvent) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *RewardPayoutEvent) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *RewardPayoutEvent) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *RewardPayoutEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RewardPayoutEvent) GetPercentOfTotalReward() string {
	if x != nil {
		return x.PercentOfTotalReward
	}
	return ""
}

func (x *RewardPayoutEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RewardPayoutEvent) GetRewardType() string {
	if x != nil {
		return x.RewardType
	}
	return ""
}

func (x *RewardPayoutEvent) GetLockedUntilEpoch() string {
	if x != nil {
		return x.LockedUntilEpoch
	}
	return ""
}

func (x *RewardPayoutEvent) GetQuantumAmount() string {
	if x != nil {
		return x.QuantumAmount
	}
	return ""
}

func (x *RewardPayoutEvent) GetGameId() string {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return ""
}

// ValidatorScoreEvent is the score a validator gets for a given epoch
type ValidatorScoreEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId               string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	EpochSeq             string `protobuf:"bytes,2,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	ValidatorScore       string `protobuf:"bytes,3,opt,name=validator_score,json=validatorScore,proto3" json:"validator_score,omitempty"`
	NormalisedScore      string `protobuf:"bytes,4,opt,name=normalised_score,json=normalisedScore,proto3" json:"normalised_score,omitempty"`
	ValidatorPerformance string `protobuf:"bytes,5,opt,name=validator_performance,json=validatorPerformance,proto3" json:"validator_performance,omitempty"`
	RawValidatorScore    string `protobuf:"bytes,6,opt,name=raw_validator_score,json=rawValidatorScore,proto3" json:"raw_validator_score,omitempty"`
	ValidatorStatus      string `protobuf:"bytes,7,opt,name=validator_status,json=validatorStatus,proto3" json:"validator_status,omitempty"`
	MultisigScore        string `protobuf:"bytes,8,opt,name=multisig_score,json=multisigScore,proto3" json:"multisig_score,omitempty"`
}

func (x *ValidatorScoreEvent) Reset() {
	*x = ValidatorScoreEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorScoreEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorScoreEvent) ProtoMessage() {}

func (x *ValidatorScoreEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorScoreEvent.ProtoReflect.Descriptor instead.
func (*ValidatorScoreEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{35}
}

func (x *ValidatorScoreEvent) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ValidatorScoreEvent) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *ValidatorScoreEvent) GetValidatorScore() string {
	if x != nil {
		return x.ValidatorScore
	}
	return ""
}

func (x *ValidatorScoreEvent) GetNormalisedScore() string {
	if x != nil {
		return x.NormalisedScore
	}
	return ""
}

func (x *ValidatorScoreEvent) GetValidatorPerformance() string {
	if x != nil {
		return x.ValidatorPerformance
	}
	return ""
}

func (x *ValidatorScoreEvent) GetRawValidatorScore() string {
	if x != nil {
		return x.RawValidatorScore
	}
	return ""
}

func (x *ValidatorScoreEvent) GetValidatorStatus() string {
	if x != nil {
		return x.ValidatorStatus
	}
	return ""
}

func (x *ValidatorScoreEvent) GetMultisigScore() string {
	if x != nil {
		return x.MultisigScore
	}
	return ""
}

// DelegationBalanceEvent - updates on the delegation balance of a party to a node in the current epoch in effect
type DelegationBalanceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party    string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	NodeId   string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	EpochSeq string `protobuf:"bytes,4,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
}

func (x *DelegationBalanceEvent) Reset() {
	*x = DelegationBalanceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationBalanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationBalanceEvent) ProtoMessage() {}

func (x *DelegationBalanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationBalanceEvent.ProtoReflect.Descriptor instead.
func (*DelegationBalanceEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{36}
}

func (x *DelegationBalanceEvent) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *DelegationBalanceEvent) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *DelegationBalanceEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DelegationBalanceEvent) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

// MarketEvent - the common denominator for all market events
// interface has a method to return a string for logging
type MarketEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Payload is a unique information string
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MarketEvent) Reset() {
	*x = MarketEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketEvent) ProtoMessage() {}

func (x *MarketEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketEvent.ProtoReflect.Descriptor instead.
func (*MarketEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{37}
}

func (x *MarketEvent) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketEvent) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type TransferFees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transfer that triggered the collection of fees.
	TransferId string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	// Amount of fees paid.
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Epoch when the transfer was dispatched, and fees were paid.
	Epoch uint64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Amount that was subtracted from the transfer fee based on available discounts.
	DiscountApplied string `protobuf:"bytes,4,opt,name=discount_applied,json=discountApplied,proto3" json:"discount_applied,omitempty"`
}

func (x *TransferFees) Reset() {
	*x = TransferFees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFees) ProtoMessage() {}

func (x *TransferFees) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFees.ProtoReflect.Descriptor instead.
func (*TransferFees) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{38}
}

func (x *TransferFees) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferFees) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransferFees) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *TransferFees) GetDiscountApplied() string {
	if x != nil {
		return x.DiscountApplied
	}
	return ""
}

type TransferFeesDiscount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party that the transfer fee discount applies to.
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// Asset that the transfer fee discount is relevant to.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Amount that the transfer fee was discounted by.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Epoch in which the discount was first available.
	Epoch uint64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *TransferFeesDiscount) Reset() {
	*x = TransferFeesDiscount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFeesDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFeesDiscount) ProtoMessage() {}

func (x *TransferFeesDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFeesDiscount.ProtoReflect.Descriptor instead.
func (*TransferFeesDiscount) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{39}
}

func (x *TransferFeesDiscount) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *TransferFeesDiscount) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TransferFeesDiscount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransferFeesDiscount) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type TransactionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique party ID for the related party
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Status of the transaction, if it succeeded or an error was raised.
	Status bool `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// Hash of the transaction
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Status of the transaction.
	// Backward compatible with previous events,
	// as this field will default to UNSPECIFIED.
	StatusDetail TransactionResult_Status `protobuf:"varint,4,opt,name=status_detail,json=statusDetail,proto3,enum=vega.events.v1.TransactionResult_Status" json:"status_detail,omitempty"`
	// Transaction itself as received by the network
	//
	// Types that are assignable to Transaction:
	//
	//	*TransactionResult_OrderSubmission
	//	*TransactionResult_OrderAmendment
	//	*TransactionResult_OrderCancellation
	//	*TransactionResult_Proposal
	//	*TransactionResult_VoteSubmission
	//	*TransactionResult_LiquidityProvisionSubmission
	//	*TransactionResult_WithdrawSubmission
	//	*TransactionResult_DelegateSubmission
	//	*TransactionResult_UndelegateSubmission
	//	*TransactionResult_LiquidityProvisionCancellation
	//	*TransactionResult_LiquidityProvisionAmendment
	//	*TransactionResult_Transfer
	//	*TransactionResult_CancelTransfer
	//	*TransactionResult_AnnounceNode
	//	*TransactionResult_OracleDataSubmission
	//	*TransactionResult_ProtocolUpgradeProposal
	//	*TransactionResult_IssueSignatures
	//	*TransactionResult_BatchMarketInstructions
	//	*TransactionResult_KeyRotateSubmission
	//	*TransactionResult_EthereumKeyRotateSubmission
	//	*TransactionResult_StopOrdersSubmission
	//	*TransactionResult_StopOrdersCancellation
	//	*TransactionResult_CreateReferralSet
	//	*TransactionResult_UpdateReferralSet
	//	*TransactionResult_ApplyReferralCode
	//	*TransactionResult_UpdateMarginMode
	//	*TransactionResult_JoinTeam
	//	*TransactionResult_BatchProposal
	//	*TransactionResult_UpdatePartyProfile
	//	*TransactionResult_SubmitAmm
	//	*TransactionResult_AmendAmm
	//	*TransactionResult_CancelAmm
	Transaction isTransactionResult_Transaction `protobuf_oneof:"transaction"`
	// extra details about the transaction processing
	//
	// Types that are assignable to Extra:
	//
	//	*TransactionResult_Success
	//	*TransactionResult_Failure
	Extra isTransactionResult_Extra `protobuf_oneof:"extra"`
}

func (x *TransactionResult) Reset() {
	*x = TransactionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResult) ProtoMessage() {}

func (x *TransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResult.ProtoReflect.Descriptor instead.
func (*TransactionResult) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{40}
}

func (x *TransactionResult) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *TransactionResult) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TransactionResult) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TransactionResult) GetStatusDetail() TransactionResult_Status {
	if x != nil {
		return x.StatusDetail
	}
	return TransactionResult_STATUS_UNSPECIFIED
}

func (m *TransactionResult) GetTransaction() isTransactionResult_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *TransactionResult) GetOrderSubmission() *v1.OrderSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_OrderSubmission); ok {
		return x.OrderSubmission
	}
	return nil
}

func (x *TransactionResult) GetOrderAmendment() *v1.OrderAmendment {
	if x, ok := x.GetTransaction().(*TransactionResult_OrderAmendment); ok {
		return x.OrderAmendment
	}
	return nil
}

func (x *TransactionResult) GetOrderCancellation() *v1.OrderCancellation {
	if x, ok := x.GetTransaction().(*TransactionResult_OrderCancellation); ok {
		return x.OrderCancellation
	}
	return nil
}

func (x *TransactionResult) GetProposal() *v1.ProposalSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *TransactionResult) GetVoteSubmission() *v1.VoteSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_VoteSubmission); ok {
		return x.VoteSubmission
	}
	return nil
}

func (x *TransactionResult) GetLiquidityProvisionSubmission() *v1.LiquidityProvisionSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_LiquidityProvisionSubmission); ok {
		return x.LiquidityProvisionSubmission
	}
	return nil
}

func (x *TransactionResult) GetWithdrawSubmission() *v1.WithdrawSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_WithdrawSubmission); ok {
		return x.WithdrawSubmission
	}
	return nil
}

func (x *TransactionResult) GetDelegateSubmission() *v1.DelegateSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_DelegateSubmission); ok {
		return x.DelegateSubmission
	}
	return nil
}

func (x *TransactionResult) GetUndelegateSubmission() *v1.UndelegateSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_UndelegateSubmission); ok {
		return x.UndelegateSubmission
	}
	return nil
}

func (x *TransactionResult) GetLiquidityProvisionCancellation() *v1.LiquidityProvisionCancellation {
	if x, ok := x.GetTransaction().(*TransactionResult_LiquidityProvisionCancellation); ok {
		return x.LiquidityProvisionCancellation
	}
	return nil
}

func (x *TransactionResult) GetLiquidityProvisionAmendment() *v1.LiquidityProvisionAmendment {
	if x, ok := x.GetTransaction().(*TransactionResult_LiquidityProvisionAmendment); ok {
		return x.LiquidityProvisionAmendment
	}
	return nil
}

func (x *TransactionResult) GetTransfer() *v1.Transfer {
	if x, ok := x.GetTransaction().(*TransactionResult_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *TransactionResult) GetCancelTransfer() *v1.CancelTransfer {
	if x, ok := x.GetTransaction().(*TransactionResult_CancelTransfer); ok {
		return x.CancelTransfer
	}
	return nil
}

func (x *TransactionResult) GetAnnounceNode() *v1.AnnounceNode {
	if x, ok := x.GetTransaction().(*TransactionResult_AnnounceNode); ok {
		return x.AnnounceNode
	}
	return nil
}

func (x *TransactionResult) GetOracleDataSubmission() *v1.OracleDataSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_OracleDataSubmission); ok {
		return x.OracleDataSubmission
	}
	return nil
}

func (x *TransactionResult) GetProtocolUpgradeProposal() *v1.ProtocolUpgradeProposal {
	if x, ok := x.GetTransaction().(*TransactionResult_ProtocolUpgradeProposal); ok {
		return x.ProtocolUpgradeProposal
	}
	return nil
}

func (x *TransactionResult) GetIssueSignatures() *v1.IssueSignatures {
	if x, ok := x.GetTransaction().(*TransactionResult_IssueSignatures); ok {
		return x.IssueSignatures
	}
	return nil
}

func (x *TransactionResult) GetBatchMarketInstructions() *v1.BatchMarketInstructions {
	if x, ok := x.GetTransaction().(*TransactionResult_BatchMarketInstructions); ok {
		return x.BatchMarketInstructions
	}
	return nil
}

func (x *TransactionResult) GetKeyRotateSubmission() *v1.KeyRotateSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_KeyRotateSubmission); ok {
		return x.KeyRotateSubmission
	}
	return nil
}

func (x *TransactionResult) GetEthereumKeyRotateSubmission() *v1.EthereumKeyRotateSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_EthereumKeyRotateSubmission); ok {
		return x.EthereumKeyRotateSubmission
	}
	return nil
}

func (x *TransactionResult) GetStopOrdersSubmission() *v1.StopOrdersSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_StopOrdersSubmission); ok {
		return x.StopOrdersSubmission
	}
	return nil
}

func (x *TransactionResult) GetStopOrdersCancellation() *v1.StopOrdersCancellation {
	if x, ok := x.GetTransaction().(*TransactionResult_StopOrdersCancellation); ok {
		return x.StopOrdersCancellation
	}
	return nil
}

func (x *TransactionResult) GetCreateReferralSet() *v1.CreateReferralSet {
	if x, ok := x.GetTransaction().(*TransactionResult_CreateReferralSet); ok {
		return x.CreateReferralSet
	}
	return nil
}

func (x *TransactionResult) GetUpdateReferralSet() *v1.UpdateReferralSet {
	if x, ok := x.GetTransaction().(*TransactionResult_UpdateReferralSet); ok {
		return x.UpdateReferralSet
	}
	return nil
}

func (x *TransactionResult) GetApplyReferralCode() *v1.ApplyReferralCode {
	if x, ok := x.GetTransaction().(*TransactionResult_ApplyReferralCode); ok {
		return x.ApplyReferralCode
	}
	return nil
}

func (x *TransactionResult) GetUpdateMarginMode() *v1.UpdateMarginMode {
	if x, ok := x.GetTransaction().(*TransactionResult_UpdateMarginMode); ok {
		return x.UpdateMarginMode
	}
	return nil
}

func (x *TransactionResult) GetJoinTeam() *v1.JoinTeam {
	if x, ok := x.GetTransaction().(*TransactionResult_JoinTeam); ok {
		return x.JoinTeam
	}
	return nil
}

func (x *TransactionResult) GetBatchProposal() *v1.BatchProposalSubmission {
	if x, ok := x.GetTransaction().(*TransactionResult_BatchProposal); ok {
		return x.BatchProposal
	}
	return nil
}

func (x *TransactionResult) GetUpdatePartyProfile() *v1.UpdatePartyProfile {
	if x, ok := x.GetTransaction().(*TransactionResult_UpdatePartyProfile); ok {
		return x.UpdatePartyProfile
	}
	return nil
}

func (x *TransactionResult) GetSubmitAmm() *v1.SubmitAMM {
	if x, ok := x.GetTransaction().(*TransactionResult_SubmitAmm); ok {
		return x.SubmitAmm
	}
	return nil
}

func (x *TransactionResult) GetAmendAmm() *v1.AmendAMM {
	if x, ok := x.GetTransaction().(*TransactionResult_AmendAmm); ok {
		return x.AmendAmm
	}
	return nil
}

func (x *TransactionResult) GetCancelAmm() *v1.CancelAMM {
	if x, ok := x.GetTransaction().(*TransactionResult_CancelAmm); ok {
		return x.CancelAmm
	}
	return nil
}

func (m *TransactionResult) GetExtra() isTransactionResult_Extra {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (x *TransactionResult) GetSuccess() *TransactionResult_SuccessDetails {
	if x, ok := x.GetExtra().(*TransactionResult_Success); ok {
		return x.Success
	}
	return nil
}

func (x *TransactionResult) GetFailure() *TransactionResult_FailureDetails {
	if x, ok := x.GetExtra().(*TransactionResult_Failure); ok {
		return x.Failure
	}
	return nil
}

type isTransactionResult_Transaction interface {
	isTransactionResult_Transaction()
}

type TransactionResult_OrderSubmission struct {
	OrderSubmission *v1.OrderSubmission `protobuf:"bytes,101,opt,name=order_submission,json=orderSubmission,proto3,oneof"`
}

type TransactionResult_OrderAmendment struct {
	OrderAmendment *v1.OrderAmendment `protobuf:"bytes,102,opt,name=order_amendment,json=orderAmendment,proto3,oneof"`
}

type TransactionResult_OrderCancellation struct {
	OrderCancellation *v1.OrderCancellation `protobuf:"bytes,103,opt,name=order_cancellation,json=orderCancellation,proto3,oneof"`
}

type TransactionResult_Proposal struct {
	Proposal *v1.ProposalSubmission `protobuf:"bytes,104,opt,name=proposal,proto3,oneof"`
}

type TransactionResult_VoteSubmission struct {
	VoteSubmission *v1.VoteSubmission `protobuf:"bytes,105,opt,name=vote_submission,json=voteSubmission,proto3,oneof"`
}

type TransactionResult_LiquidityProvisionSubmission struct {
	LiquidityProvisionSubmission *v1.LiquidityProvisionSubmission `protobuf:"bytes,106,opt,name=liquidity_provision_submission,json=liquidityProvisionSubmission,proto3,oneof"`
}

type TransactionResult_WithdrawSubmission struct {
	WithdrawSubmission *v1.WithdrawSubmission `protobuf:"bytes,107,opt,name=withdraw_submission,json=withdrawSubmission,proto3,oneof"`
}

type TransactionResult_DelegateSubmission struct {
	DelegateSubmission *v1.DelegateSubmission `protobuf:"bytes,108,opt,name=delegate_submission,json=delegateSubmission,proto3,oneof"`
}

type TransactionResult_UndelegateSubmission struct {
	UndelegateSubmission *v1.UndelegateSubmission `protobuf:"bytes,109,opt,name=undelegate_submission,json=undelegateSubmission,proto3,oneof"`
}

type TransactionResult_LiquidityProvisionCancellation struct {
	LiquidityProvisionCancellation *v1.LiquidityProvisionCancellation `protobuf:"bytes,111,opt,name=liquidity_provision_cancellation,json=liquidityProvisionCancellation,proto3,oneof"`
}

type TransactionResult_LiquidityProvisionAmendment struct {
	LiquidityProvisionAmendment *v1.LiquidityProvisionAmendment `protobuf:"bytes,112,opt,name=liquidity_provision_amendment,json=liquidityProvisionAmendment,proto3,oneof"`
}

type TransactionResult_Transfer struct {
	Transfer *v1.Transfer `protobuf:"bytes,113,opt,name=transfer,proto3,oneof"`
}

type TransactionResult_CancelTransfer struct {
	CancelTransfer *v1.CancelTransfer `protobuf:"bytes,114,opt,name=cancel_transfer,json=cancelTransfer,proto3,oneof"`
}

type TransactionResult_AnnounceNode struct {
	AnnounceNode *v1.AnnounceNode `protobuf:"bytes,115,opt,name=announce_node,json=announceNode,proto3,oneof"`
}

type TransactionResult_OracleDataSubmission struct {
	OracleDataSubmission *v1.OracleDataSubmission `protobuf:"bytes,116,opt,name=oracle_data_submission,json=oracleDataSubmission,proto3,oneof"`
}

type TransactionResult_ProtocolUpgradeProposal struct {
	ProtocolUpgradeProposal *v1.ProtocolUpgradeProposal `protobuf:"bytes,117,opt,name=protocol_upgrade_proposal,json=protocolUpgradeProposal,proto3,oneof"`
}

type TransactionResult_IssueSignatures struct {
	IssueSignatures *v1.IssueSignatures `protobuf:"bytes,118,opt,name=issue_signatures,json=issueSignatures,proto3,oneof"`
}

type TransactionResult_BatchMarketInstructions struct {
	BatchMarketInstructions *v1.BatchMarketInstructions `protobuf:"bytes,119,opt,name=batch_market_instructions,json=batchMarketInstructions,proto3,oneof"`
}

type TransactionResult_KeyRotateSubmission struct {
	KeyRotateSubmission *v1.KeyRotateSubmission `protobuf:"bytes,120,opt,name=key_rotate_submission,json=keyRotateSubmission,proto3,oneof"`
}

type TransactionResult_EthereumKeyRotateSubmission struct {
	EthereumKeyRotateSubmission *v1.EthereumKeyRotateSubmission `protobuf:"bytes,121,opt,name=ethereum_key_rotate_submission,json=ethereumKeyRotateSubmission,proto3,oneof"`
}

type TransactionResult_StopOrdersSubmission struct {
	StopOrdersSubmission *v1.StopOrdersSubmission `protobuf:"bytes,122,opt,name=stop_orders_submission,json=stopOrdersSubmission,proto3,oneof"`
}

type TransactionResult_StopOrdersCancellation struct {
	StopOrdersCancellation *v1.StopOrdersCancellation `protobuf:"bytes,123,opt,name=stop_orders_cancellation,json=stopOrdersCancellation,proto3,oneof"`
}

type TransactionResult_CreateReferralSet struct {
	CreateReferralSet *v1.CreateReferralSet `protobuf:"bytes,124,opt,name=create_referral_set,json=createReferralSet,proto3,oneof"`
}

type TransactionResult_UpdateReferralSet struct {
	UpdateReferralSet *v1.UpdateReferralSet `protobuf:"bytes,125,opt,name=update_referral_set,json=updateReferralSet,proto3,oneof"`
}

type TransactionResult_ApplyReferralCode struct {
	ApplyReferralCode *v1.ApplyReferralCode `protobuf:"bytes,126,opt,name=apply_referral_code,json=applyReferralCode,proto3,oneof"`
}

type TransactionResult_UpdateMarginMode struct {
	UpdateMarginMode *v1.UpdateMarginMode `protobuf:"bytes,127,opt,name=update_margin_mode,json=updateMarginMode,proto3,oneof"`
}

type TransactionResult_JoinTeam struct {
	JoinTeam *v1.JoinTeam `protobuf:"bytes,128,opt,name=join_team,json=joinTeam,proto3,oneof"`
}

type TransactionResult_BatchProposal struct {
	BatchProposal *v1.BatchProposalSubmission `protobuf:"bytes,129,opt,name=batch_proposal,json=batchProposal,proto3,oneof"`
}

type TransactionResult_UpdatePartyProfile struct {
	UpdatePartyProfile *v1.UpdatePartyProfile `protobuf:"bytes,130,opt,name=update_party_profile,json=updatePartyProfile,proto3,oneof"`
}

type TransactionResult_SubmitAmm struct {
	SubmitAmm *v1.SubmitAMM `protobuf:"bytes,131,opt,name=submit_amm,json=submitAmm,proto3,oneof"`
}

type TransactionResult_AmendAmm struct {
	AmendAmm *v1.AmendAMM `protobuf:"bytes,132,opt,name=amend_amm,json=amendAmm,proto3,oneof"`
}

type TransactionResult_CancelAmm struct {
	CancelAmm *v1.CancelAMM `protobuf:"bytes,133,opt,name=cancel_amm,json=cancelAmm,proto3,oneof"`
}

func (*TransactionResult_OrderSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_OrderAmendment) isTransactionResult_Transaction() {}

func (*TransactionResult_OrderCancellation) isTransactionResult_Transaction() {}

func (*TransactionResult_Proposal) isTransactionResult_Transaction() {}

func (*TransactionResult_VoteSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_LiquidityProvisionSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_WithdrawSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_DelegateSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_UndelegateSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_LiquidityProvisionCancellation) isTransactionResult_Transaction() {}

func (*TransactionResult_LiquidityProvisionAmendment) isTransactionResult_Transaction() {}

func (*TransactionResult_Transfer) isTransactionResult_Transaction() {}

func (*TransactionResult_CancelTransfer) isTransactionResult_Transaction() {}

func (*TransactionResult_AnnounceNode) isTransactionResult_Transaction() {}

func (*TransactionResult_OracleDataSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_ProtocolUpgradeProposal) isTransactionResult_Transaction() {}

func (*TransactionResult_IssueSignatures) isTransactionResult_Transaction() {}

func (*TransactionResult_BatchMarketInstructions) isTransactionResult_Transaction() {}

func (*TransactionResult_KeyRotateSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_EthereumKeyRotateSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_StopOrdersSubmission) isTransactionResult_Transaction() {}

func (*TransactionResult_StopOrdersCancellation) isTransactionResult_Transaction() {}

func (*TransactionResult_CreateReferralSet) isTransactionResult_Transaction() {}

func (*TransactionResult_UpdateReferralSet) isTransactionResult_Transaction() {}

func (*TransactionResult_ApplyReferralCode) isTransactionResult_Transaction() {}

func (*TransactionResult_UpdateMarginMode) isTransactionResult_Transaction() {}

func (*TransactionResult_JoinTeam) isTransactionResult_Transaction() {}

func (*TransactionResult_BatchProposal) isTransactionResult_Transaction() {}

func (*TransactionResult_UpdatePartyProfile) isTransactionResult_Transaction() {}

func (*TransactionResult_SubmitAmm) isTransactionResult_Transaction() {}

func (*TransactionResult_AmendAmm) isTransactionResult_Transaction() {}

func (*TransactionResult_CancelAmm) isTransactionResult_Transaction() {}

type isTransactionResult_Extra interface {
	isTransactionResult_Extra()
}

type TransactionResult_Success struct {
	Success *TransactionResult_SuccessDetails `protobuf:"bytes,1001,opt,name=success,proto3,oneof"`
}

type TransactionResult_Failure struct {
	Failure *TransactionResult_FailureDetails `protobuf:"bytes,1002,opt,name=failure,proto3,oneof"`
}

func (*TransactionResult_Success) isTransactionResult_Extra() {}

func (*TransactionResult_Failure) isTransactionResult_Extra() {}

type TxErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique party ID for the related party
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Error message describing what went wrong
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	// Transaction that failed
	//
	// Types that are assignable to Transaction:
	//
	//	*TxErrorEvent_OrderSubmission
	//	*TxErrorEvent_OrderAmendment
	//	*TxErrorEvent_OrderCancellation
	//	*TxErrorEvent_Proposal
	//	*TxErrorEvent_VoteSubmission
	//	*TxErrorEvent_LiquidityProvisionSubmission
	//	*TxErrorEvent_WithdrawSubmission
	//	*TxErrorEvent_DelegateSubmission
	//	*TxErrorEvent_UndelegateSubmission
	//	*TxErrorEvent_LiquidityProvisionCancellation
	//	*TxErrorEvent_LiquidityProvisionAmendment
	//	*TxErrorEvent_Transfer
	//	*TxErrorEvent_CancelTransfer
	//	*TxErrorEvent_AnnounceNode
	//	*TxErrorEvent_OracleDataSubmission
	//	*TxErrorEvent_ProtocolUpgradeProposal
	//	*TxErrorEvent_IssueSignatures
	//	*TxErrorEvent_BatchMarketInstructions
	Transaction isTxErrorEvent_Transaction `protobuf_oneof:"transaction"`
}

func (x *TxErrorEvent) Reset() {
	*x = TxErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxErrorEvent) ProtoMessage() {}

func (x *TxErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxErrorEvent.ProtoReflect.Descriptor instead.
func (*TxErrorEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{41}
}

func (x *TxErrorEvent) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *TxErrorEvent) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (m *TxErrorEvent) GetTransaction() isTxErrorEvent_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *TxErrorEvent) GetOrderSubmission() *v1.OrderSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderSubmission); ok {
		return x.OrderSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetOrderAmendment() *v1.OrderAmendment {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderAmendment); ok {
		return x.OrderAmendment
	}
	return nil
}

func (x *TxErrorEvent) GetOrderCancellation() *v1.OrderCancellation {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OrderCancellation); ok {
		return x.OrderCancellation
	}
	return nil
}

func (x *TxErrorEvent) GetProposal() *v1.ProposalSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *TxErrorEvent) GetVoteSubmission() *v1.VoteSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_VoteSubmission); ok {
		return x.VoteSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetLiquidityProvisionSubmission() *v1.LiquidityProvisionSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_LiquidityProvisionSubmission); ok {
		return x.LiquidityProvisionSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetWithdrawSubmission() *v1.WithdrawSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_WithdrawSubmission); ok {
		return x.WithdrawSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetDelegateSubmission() *v1.DelegateSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_DelegateSubmission); ok {
		return x.DelegateSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetUndelegateSubmission() *v1.UndelegateSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_UndelegateSubmission); ok {
		return x.UndelegateSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetLiquidityProvisionCancellation() *v1.LiquidityProvisionCancellation {
	if x, ok := x.GetTransaction().(*TxErrorEvent_LiquidityProvisionCancellation); ok {
		return x.LiquidityProvisionCancellation
	}
	return nil
}

func (x *TxErrorEvent) GetLiquidityProvisionAmendment() *v1.LiquidityProvisionAmendment {
	if x, ok := x.GetTransaction().(*TxErrorEvent_LiquidityProvisionAmendment); ok {
		return x.LiquidityProvisionAmendment
	}
	return nil
}

func (x *TxErrorEvent) GetTransfer() *v1.Transfer {
	if x, ok := x.GetTransaction().(*TxErrorEvent_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *TxErrorEvent) GetCancelTransfer() *v1.CancelTransfer {
	if x, ok := x.GetTransaction().(*TxErrorEvent_CancelTransfer); ok {
		return x.CancelTransfer
	}
	return nil
}

func (x *TxErrorEvent) GetAnnounceNode() *v1.AnnounceNode {
	if x, ok := x.GetTransaction().(*TxErrorEvent_AnnounceNode); ok {
		return x.AnnounceNode
	}
	return nil
}

func (x *TxErrorEvent) GetOracleDataSubmission() *v1.OracleDataSubmission {
	if x, ok := x.GetTransaction().(*TxErrorEvent_OracleDataSubmission); ok {
		return x.OracleDataSubmission
	}
	return nil
}

func (x *TxErrorEvent) GetProtocolUpgradeProposal() *v1.ProtocolUpgradeProposal {
	if x, ok := x.GetTransaction().(*TxErrorEvent_ProtocolUpgradeProposal); ok {
		return x.ProtocolUpgradeProposal
	}
	return nil
}

func (x *TxErrorEvent) GetIssueSignatures() *v1.IssueSignatures {
	if x, ok := x.GetTransaction().(*TxErrorEvent_IssueSignatures); ok {
		return x.IssueSignatures
	}
	return nil
}

func (x *TxErrorEvent) GetBatchMarketInstructions() *v1.BatchMarketInstructions {
	if x, ok := x.GetTransaction().(*TxErrorEvent_BatchMarketInstructions); ok {
		return x.BatchMarketInstructions
	}
	return nil
}

type isTxErrorEvent_Transaction interface {
	isTxErrorEvent_Transaction()
}

type TxErrorEvent_OrderSubmission struct {
	OrderSubmission *v1.OrderSubmission `protobuf:"bytes,101,opt,name=order_submission,json=orderSubmission,proto3,oneof"`
}

type TxErrorEvent_OrderAmendment struct {
	OrderAmendment *v1.OrderAmendment `protobuf:"bytes,102,opt,name=order_amendment,json=orderAmendment,proto3,oneof"`
}

type TxErrorEvent_OrderCancellation struct {
	OrderCancellation *v1.OrderCancellation `protobuf:"bytes,103,opt,name=order_cancellation,json=orderCancellation,proto3,oneof"`
}

type TxErrorEvent_Proposal struct {
	Proposal *v1.ProposalSubmission `protobuf:"bytes,104,opt,name=proposal,proto3,oneof"`
}

type TxErrorEvent_VoteSubmission struct {
	VoteSubmission *v1.VoteSubmission `protobuf:"bytes,105,opt,name=vote_submission,json=voteSubmission,proto3,oneof"`
}

type TxErrorEvent_LiquidityProvisionSubmission struct {
	LiquidityProvisionSubmission *v1.LiquidityProvisionSubmission `protobuf:"bytes,106,opt,name=liquidity_provision_submission,json=liquidityProvisionSubmission,proto3,oneof"`
}

type TxErrorEvent_WithdrawSubmission struct {
	WithdrawSubmission *v1.WithdrawSubmission `protobuf:"bytes,107,opt,name=withdraw_submission,json=withdrawSubmission,proto3,oneof"`
}

type TxErrorEvent_DelegateSubmission struct {
	DelegateSubmission *v1.DelegateSubmission `protobuf:"bytes,108,opt,name=delegate_submission,json=delegateSubmission,proto3,oneof"`
}

type TxErrorEvent_UndelegateSubmission struct {
	UndelegateSubmission *v1.UndelegateSubmission `protobuf:"bytes,109,opt,name=undelegate_submission,json=undelegateSubmission,proto3,oneof"`
}

type TxErrorEvent_LiquidityProvisionCancellation struct {
	LiquidityProvisionCancellation *v1.LiquidityProvisionCancellation `protobuf:"bytes,111,opt,name=liquidity_provision_cancellation,json=liquidityProvisionCancellation,proto3,oneof"`
}

type TxErrorEvent_LiquidityProvisionAmendment struct {
	LiquidityProvisionAmendment *v1.LiquidityProvisionAmendment `protobuf:"bytes,112,opt,name=liquidity_provision_amendment,json=liquidityProvisionAmendment,proto3,oneof"`
}

type TxErrorEvent_Transfer struct {
	Transfer *v1.Transfer `protobuf:"bytes,113,opt,name=transfer,proto3,oneof"`
}

type TxErrorEvent_CancelTransfer struct {
	CancelTransfer *v1.CancelTransfer `protobuf:"bytes,114,opt,name=cancel_transfer,json=cancelTransfer,proto3,oneof"`
}

type TxErrorEvent_AnnounceNode struct {
	AnnounceNode *v1.AnnounceNode `protobuf:"bytes,115,opt,name=announce_node,json=announceNode,proto3,oneof"`
}

type TxErrorEvent_OracleDataSubmission struct {
	OracleDataSubmission *v1.OracleDataSubmission `protobuf:"bytes,116,opt,name=oracle_data_submission,json=oracleDataSubmission,proto3,oneof"`
}

type TxErrorEvent_ProtocolUpgradeProposal struct {
	ProtocolUpgradeProposal *v1.ProtocolUpgradeProposal `protobuf:"bytes,117,opt,name=protocol_upgrade_proposal,json=protocolUpgradeProposal,proto3,oneof"`
}

type TxErrorEvent_IssueSignatures struct {
	IssueSignatures *v1.IssueSignatures `protobuf:"bytes,118,opt,name=issue_signatures,json=issueSignatures,proto3,oneof"`
}

type TxErrorEvent_BatchMarketInstructions struct {
	BatchMarketInstructions *v1.BatchMarketInstructions `protobuf:"bytes,119,opt,name=batch_market_instructions,json=batchMarketInstructions,proto3,oneof"`
}

func (*TxErrorEvent_OrderSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OrderAmendment) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OrderCancellation) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_Proposal) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_VoteSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_LiquidityProvisionSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_WithdrawSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_DelegateSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_UndelegateSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_LiquidityProvisionCancellation) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_LiquidityProvisionAmendment) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_Transfer) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_CancelTransfer) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_AnnounceNode) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OracleDataSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_ProtocolUpgradeProposal) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_IssueSignatures) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_BatchMarketInstructions) isTxErrorEvent_Transaction() {}

// Time update event contains the latest time update from Vega blockchain and indicates the start of a new block
type TimeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp containing latest update from Vega blockchain aka Vega-time
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TimeUpdate) Reset() {
	*x = TimeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeUpdate) ProtoMessage() {}

func (x *TimeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeUpdate.ProtoReflect.Descriptor instead.
func (*TimeUpdate) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{42}
}

func (x *TimeUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Epoch details
type EpochEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence number that increases by one each epoch
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Action tells us what action is taking place
	Action vega.EpochAction `protobuf:"varint,2,opt,name=action,proto3,enum=vega.EpochAction" json:"action,omitempty"`
	// Vega time at which this epoch started
	StartTime int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Vega time at which this epoch should end
	ExpireTime int64 `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Vega time at which this epoch actually ended
	EndTime int64 `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *EpochEvent) Reset() {
	*x = EpochEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochEvent) ProtoMessage() {}

func (x *EpochEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochEvent.ProtoReflect.Descriptor instead.
func (*EpochEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{43}
}

func (x *EpochEvent) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *EpochEvent) GetAction() vega.EpochAction {
	if x != nil {
		return x.Action
	}
	return vega.EpochAction(0)
}

func (x *EpochEvent) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EpochEvent) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *EpochEvent) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// Transfer responses event contains a collection of transfer information
type LedgerMovements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more entries containing internal transfer information
	LedgerMovements []*vega.LedgerMovement `protobuf:"bytes,1,rep,name=ledger_movements,json=ledgerMovements,proto3" json:"ledger_movements,omitempty"`
}

func (x *LedgerMovements) Reset() {
	*x = LedgerMovements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerMovements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerMovements) ProtoMessage() {}

func (x *LedgerMovements) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerMovements.ProtoReflect.Descriptor instead.
func (*LedgerMovements) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{44}
}

func (x *LedgerMovements) GetLedgerMovements() []*vega.LedgerMovement {
	if x != nil {
		return x.LedgerMovements
	}
	return nil
}

// Position resolution event contains information on distressed trades
type PositionResolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Number of distressed traders
	Distressed int64 `protobuf:"varint,2,opt,name=distressed,proto3" json:"distressed,omitempty"`
	// Number of close outs
	Closed int64 `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	// Mark price as a string representing a scaled price
	MarkPrice string `protobuf:"bytes,4,opt,name=mark_price,json=markPrice,proto3" json:"mark_price,omitempty"`
}

func (x *PositionResolution) Reset() {
	*x = PositionResolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionResolution) ProtoMessage() {}

func (x *PositionResolution) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionResolution.ProtoReflect.Descriptor instead.
func (*PositionResolution) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{45}
}

func (x *PositionResolution) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *PositionResolution) GetDistressed() int64 {
	if x != nil {
		return x.Distressed
	}
	return 0
}

func (x *PositionResolution) GetClosed() int64 {
	if x != nil {
		return x.Closed
	}
	return 0
}

func (x *PositionResolution) GetMarkPrice() string {
	if x != nil {
		return x.MarkPrice
	}
	return ""
}

// Loss socialization event contains details on the amount of wins unable to be distributed
type LossSocialization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party ID (public key) for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Amount distributed
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *LossSocialization) Reset() {
	*x = LossSocialization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LossSocialization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LossSocialization) ProtoMessage() {}

func (x *LossSocialization) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LossSocialization.ProtoReflect.Descriptor instead.
func (*LossSocialization) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{46}
}

func (x *LossSocialization) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LossSocialization) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *LossSocialization) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Trade settlement is part of the settle position event
type TradeSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of trade settlement
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Price of settlement as string (in asset decimals)
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// Price of settlement as a string (in market decimals)
	MarketPrice string `protobuf:"bytes,3,opt,name=market_price,json=marketPrice,proto3" json:"market_price,omitempty"`
}

func (x *TradeSettlement) Reset() {
	*x = TradeSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSettlement) ProtoMessage() {}

func (x *TradeSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSettlement.ProtoReflect.Descriptor instead.
func (*TradeSettlement) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{47}
}

func (x *TradeSettlement) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TradeSettlement) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *TradeSettlement) GetMarketPrice() string {
	if x != nil {
		return x.MarketPrice
	}
	return ""
}

// Settle position event contains position settlement information for a party
type SettlePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party ID (public key) for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Price of settlement as a string
	Price string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	// A collection of 1 or more trade settlements
	TradeSettlements []*TradeSettlement `protobuf:"bytes,4,rep,name=trade_settlements,json=tradeSettlements,proto3" json:"trade_settlements,omitempty"`
	// Position factor - 10 ^ number of position decimal places
	PositionFactor string `protobuf:"bytes,5,opt,name=position_factor,json=positionFactor,proto3" json:"position_factor,omitempty"`
}

func (x *SettlePosition) Reset() {
	*x = SettlePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlePosition) ProtoMessage() {}

func (x *SettlePosition) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlePosition.ProtoReflect.Descriptor instead.
func (*SettlePosition) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{48}
}

func (x *SettlePosition) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SettlePosition) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *SettlePosition) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SettlePosition) GetTradeSettlements() []*TradeSettlement {
	if x != nil {
		return x.TradeSettlements
	}
	return nil
}

func (x *SettlePosition) GetPositionFactor() string {
	if x != nil {
		return x.PositionFactor
	}
	return ""
}

// Settle market event to notify data node that a market has been settled
// so positions and PL can be updated accordingly
type SettleMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Price of settlement as a string
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// Position factor - 10 ^ number of position decimal places
	PositionFactor string `protobuf:"bytes,3,opt,name=position_factor,json=positionFactor,proto3" json:"position_factor,omitempty"`
}

func (x *SettleMarket) Reset() {
	*x = SettleMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleMarket) ProtoMessage() {}

func (x *SettleMarket) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleMarket.ProtoReflect.Descriptor instead.
func (*SettleMarket) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{49}
}

func (x *SettleMarket) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SettleMarket) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SettleMarket) GetPositionFactor() string {
	if x != nil {
		return x.PositionFactor
	}
	return ""
}

// Position state event contains the current position state for a single party in a single market
type PositionStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party ID for this position update
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market ID for this position update
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Current position
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Potential orders
	PotentialBuys  int64 `protobuf:"varint,4,opt,name=potential_buys,json=potentialBuys,proto3" json:"potential_buys,omitempty"`
	PotentialSells int64 `protobuf:"varint,5,opt,name=potential_sells,json=potentialSells,proto3" json:"potential_sells,omitempty"`
	// Volume weighted prices
	VwBuyPrice  string `protobuf:"bytes,6,opt,name=vw_buy_price,json=vwBuyPrice,proto3" json:"vw_buy_price,omitempty"`
	VwSellPrice string `protobuf:"bytes,7,opt,name=vw_sell_price,json=vwSellPrice,proto3" json:"vw_sell_price,omitempty"`
}

func (x *PositionStateEvent) Reset() {
	*x = PositionStateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionStateEvent) ProtoMessage() {}

func (x *PositionStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionStateEvent.ProtoReflect.Descriptor instead.
func (*PositionStateEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{50}
}

func (x *PositionStateEvent) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PositionStateEvent) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *PositionStateEvent) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PositionStateEvent) GetPotentialBuys() int64 {
	if x != nil {
		return x.PotentialBuys
	}
	return 0
}

func (x *PositionStateEvent) GetPotentialSells() int64 {
	if x != nil {
		return x.PotentialSells
	}
	return 0
}

func (x *PositionStateEvent) GetVwBuyPrice() string {
	if x != nil {
		return x.VwBuyPrice
	}
	return ""
}

func (x *PositionStateEvent) GetVwSellPrice() string {
	if x != nil {
		return x.VwSellPrice
	}
	return ""
}

// Settle distressed event contains information on distressed trading parties who are closed out
type SettleDistressed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party ID i.e. a party's public key for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Margin value as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Margin string `protobuf:"bytes,3,opt,name=margin,proto3" json:"margin,omitempty"`
	// Price as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *SettleDistressed) Reset() {
	*x = SettleDistressed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleDistressed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleDistressed) ProtoMessage() {}

func (x *SettleDistressed) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleDistressed.ProtoReflect.Descriptor instead.
func (*SettleDistressed) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{51}
}

func (x *SettleDistressed) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SettleDistressed) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *SettleDistressed) GetMargin() string {
	if x != nil {
		return x.Margin
	}
	return ""
}

func (x *SettleDistressed) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

// Distressed order contains the party IDs for all parties that were distressed and had their orders closed,
// but did not need to be closed out after cancelling their orders
type DistressedOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Slice of Party IDs i.e. each party's public key for the event
	Parties []string `protobuf:"bytes,2,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *DistressedOrders) Reset() {
	*x = DistressedOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistressedOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistressedOrders) ProtoMessage() {}

func (x *DistressedOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistressedOrders.ProtoReflect.Descriptor instead.
func (*DistressedOrders) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{52}
}

func (x *DistressedOrders) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *DistressedOrders) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

// Distressed positions event contains the party IDs for all parties that were distressed, had their orders closed but because of insufficient volume on the book
// could not be fully closed out. These parties are distressed, but still hold an active position on the book as a result. Once enough volume is on the book to close
// them out, a SettleDistressed event will be sent. In case they manage to reduce their position, or meet the margin requirements, this status will be updated.
// Parties that are no longer distressed but active will be listed in the safe_parties field.
type DistressedPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Slice of party IDs i.e. each party's public key, that are distressed but still have open volume
	DistressedParties []string `protobuf:"bytes,2,rep,name=distressed_parties,json=distressedParties,proto3" json:"distressed_parties,omitempty"`
	// Slice of party IDs i.e. each party's public key, who were distressed but now can safely maintain their position
	SafeParties []string `protobuf:"bytes,3,rep,name=safe_parties,json=safeParties,proto3" json:"safe_parties,omitempty"`
}

func (x *DistressedPositions) Reset() {
	*x = DistressedPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistressedPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistressedPositions) ProtoMessage() {}

func (x *DistressedPositions) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistressedPositions.ProtoReflect.Descriptor instead.
func (*DistressedPositions) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{53}
}

func (x *DistressedPositions) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *DistressedPositions) GetDistressedParties() []string {
	if x != nil {
		return x.DistressedParties
	}
	return nil
}

func (x *DistressedPositions) GetSafeParties() []string {
	if x != nil {
		return x.SafeParties
	}
	return nil
}

// Market tick event contains the time value for when a particular market was last processed on Vega
type MarketTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp containing latest update from Vega blockchain aka Vega-time
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *MarketTick) Reset() {
	*x = MarketTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTick) ProtoMessage() {}

func (x *MarketTick) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTick.ProtoReflect.Descriptor instead.
func (*MarketTick) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{54}
}

func (x *MarketTick) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MarketTick) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// Auction event indicating a change in auction state, for example starting or ending an auction
type AuctionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// True if the event indicates an auction opening and False otherwise
	OpeningAuction bool `protobuf:"varint,2,opt,name=opening_auction,json=openingAuction,proto3" json:"opening_auction,omitempty"`
	// True if the event indicates leaving auction mode and False otherwise
	Leave bool `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	// Timestamp containing the start time for an auction
	Start int64 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	// Timestamp containing the end time for an auction
	End int64 `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	// Reason this market is/was in auction
	Trigger vega.AuctionTrigger `protobuf:"varint,6,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
	// If an auction was ongoing, but was extended for whatever reason, this field will
	// be set to the trigger type indicating which component extended the auction
	ExtensionTrigger vega.AuctionTrigger `protobuf:"varint,7,opt,name=extension_trigger,json=extensionTrigger,proto3,enum=vega.AuctionTrigger" json:"extension_trigger,omitempty"`
}

func (x *AuctionEvent) Reset() {
	*x = AuctionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionEvent) ProtoMessage() {}

func (x *AuctionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionEvent.ProtoReflect.Descriptor instead.
func (*AuctionEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{55}
}

func (x *AuctionEvent) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *AuctionEvent) GetOpeningAuction() bool {
	if x != nil {
		return x.OpeningAuction
	}
	return false
}

func (x *AuctionEvent) GetLeave() bool {
	if x != nil {
		return x.Leave
	}
	return false
}

func (x *AuctionEvent) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *AuctionEvent) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *AuctionEvent) GetTrigger() vega.AuctionTrigger {
	if x != nil {
		return x.Trigger
	}
	return vega.AuctionTrigger(0)
}

func (x *AuctionEvent) GetExtensionTrigger() vega.AuctionTrigger {
	if x != nil {
		return x.ExtensionTrigger
	}
	return vega.AuctionTrigger(0)
}

// Validator update event contains information about validator node
type ValidatorUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node ID of the validator node
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Vega public key of validator node
	VegaPubKey string `protobuf:"bytes,2,opt,name=vega_pub_key,json=vegaPubKey,proto3" json:"vega_pub_key,omitempty"`
	// Ethereum public key of validator node
	EthereumAddress string `protobuf:"bytes,3,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	// Public key of Tendermint
	TmPubKey string `protobuf:"bytes,4,opt,name=tm_pub_key,json=tmPubKey,proto3" json:"tm_pub_key,omitempty"`
	// URL with more info on the node
	InfoUrl string `protobuf:"bytes,5,opt,name=info_url,json=infoUrl,proto3" json:"info_url,omitempty"`
	// Country code (ISO 3166-1 alpha-2) for the location of the node
	Country string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	// Name of the validator
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// AvatarURL of the validator
	AvatarUrl string `protobuf:"bytes,8,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// Vega public key derivation index
	VegaPubKeyIndex uint32 `protobuf:"varint,9,opt,name=vega_pub_key_index,json=vegaPubKeyIndex,proto3" json:"vega_pub_key_index,omitempty"`
	// Flag indicating if the validator has been added to or removed from vega
	Added bool `protobuf:"varint,10,opt,name=added,proto3" json:"added,omitempty"`
	// Epoch in which the announced pending node will start participating in the network
	FromEpoch uint64 `protobuf:"varint,11,opt,name=from_epoch,json=fromEpoch,proto3" json:"from_epoch,omitempty"`
	// Ethereum public key being used as the submitter to allow automatic signature generation
	SubmitterAddress string `protobuf:"bytes,12,opt,name=submitter_address,json=submitterAddress,proto3" json:"submitter_address,omitempty"`
	// Epoch in which the node was announced or removed from the network
	EpochSeq uint64 `protobuf:"varint,13,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
}

func (x *ValidatorUpdate) Reset() {
	*x = ValidatorUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorUpdate) ProtoMessage() {}

func (x *ValidatorUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorUpdate.ProtoReflect.Descriptor instead.
func (*ValidatorUpdate) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{56}
}

func (x *ValidatorUpdate) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ValidatorUpdate) GetVegaPubKey() string {
	if x != nil {
		return x.VegaPubKey
	}
	return ""
}

func (x *ValidatorUpdate) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *ValidatorUpdate) GetTmPubKey() string {
	if x != nil {
		return x.TmPubKey
	}
	return ""
}

func (x *ValidatorUpdate) GetInfoUrl() string {
	if x != nil {
		return x.InfoUrl
	}
	return ""
}

func (x *ValidatorUpdate) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ValidatorUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidatorUpdate) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *ValidatorUpdate) GetVegaPubKeyIndex() uint32 {
	if x != nil {
		return x.VegaPubKeyIndex
	}
	return 0
}

func (x *ValidatorUpdate) GetAdded() bool {
	if x != nil {
		return x.Added
	}
	return false
}

func (x *ValidatorUpdate) GetFromEpoch() uint64 {
	if x != nil {
		return x.FromEpoch
	}
	return 0
}

func (x *ValidatorUpdate) GetSubmitterAddress() string {
	if x != nil {
		return x.SubmitterAddress
	}
	return ""
}

func (x *ValidatorUpdate) GetEpochSeq() uint64 {
	if x != nil {
		return x.EpochSeq
	}
	return 0
}

// Event that explains the status of the validator for the coming epoch
type ValidatorRankingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Stake based score - no anti-whaling
	StakeScore string `protobuf:"bytes,2,opt,name=stake_score,json=stakeScore,proto3" json:"stake_score,omitempty"`
	// Performance base score
	PerformanceScore string `protobuf:"bytes,3,opt,name=performance_score,json=performanceScore,proto3" json:"performance_score,omitempty"`
	// Final score
	RankingScore string `protobuf:"bytes,4,opt,name=ranking_score,json=rankingScore,proto3" json:"ranking_score,omitempty"`
	// Status of the validator in the previous epoch
	PreviousStatus string `protobuf:"bytes,5,opt,name=previous_status,json=previousStatus,proto3" json:"previous_status,omitempty"`
	// Status of the validator in the next epoch
	NextStatus string `protobuf:"bytes,6,opt,name=next_status,json=nextStatus,proto3" json:"next_status,omitempty"`
	// Epoch seq for which the status is valid
	EpochSeq string `protobuf:"bytes,7,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// Tendermint voting power of the validator
	TmVotingPower uint32 `protobuf:"varint,8,opt,name=tm_voting_power,json=tmVotingPower,proto3" json:"tm_voting_power,omitempty"`
}

func (x *ValidatorRankingEvent) Reset() {
	*x = ValidatorRankingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorRankingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorRankingEvent) ProtoMessage() {}

func (x *ValidatorRankingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorRankingEvent.ProtoReflect.Descriptor instead.
func (*ValidatorRankingEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{57}
}

func (x *ValidatorRankingEvent) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ValidatorRankingEvent) GetStakeScore() string {
	if x != nil {
		return x.StakeScore
	}
	return ""
}

func (x *ValidatorRankingEvent) GetPerformanceScore() string {
	if x != nil {
		return x.PerformanceScore
	}
	return ""
}

func (x *ValidatorRankingEvent) GetRankingScore() string {
	if x != nil {
		return x.RankingScore
	}
	return ""
}

func (x *ValidatorRankingEvent) GetPreviousStatus() string {
	if x != nil {
		return x.PreviousStatus
	}
	return ""
}

func (x *ValidatorRankingEvent) GetNextStatus() string {
	if x != nil {
		return x.NextStatus
	}
	return ""
}

func (x *ValidatorRankingEvent) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *ValidatorRankingEvent) GetTmVotingPower() uint32 {
	if x != nil {
		return x.TmVotingPower
	}
	return 0
}

// Event that contains information about a Vega key rotation
type KeyRotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node ID of the node that rotated their Vega key
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Vega public key that was previously associated with the node
	OldPubKey string `protobuf:"bytes,2,opt,name=old_pub_key,json=oldPubKey,proto3" json:"old_pub_key,omitempty"`
	// Vega public key that is newly associated with the node
	NewPubKey string `protobuf:"bytes,3,opt,name=new_pub_key,json=newPubKey,proto3" json:"new_pub_key,omitempty"`
	// Block height when the key rotation took effect
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *KeyRotation) Reset() {
	*x = KeyRotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRotation) ProtoMessage() {}

func (x *KeyRotation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRotation.ProtoReflect.Descriptor instead.
func (*KeyRotation) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{58}
}

func (x *KeyRotation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *KeyRotation) GetOldPubKey() string {
	if x != nil {
		return x.OldPubKey
	}
	return ""
}

func (x *KeyRotation) GetNewPubKey() string {
	if x != nil {
		return x.NewPubKey
	}
	return ""
}

func (x *KeyRotation) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

// Event that contains information about an Ethereum key rotation
type EthereumKeyRotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node ID of the node that rotated their Ethereum key
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Ethereum address that was previously associated with the node
	OldAddress string `protobuf:"bytes,2,opt,name=old_address,json=oldAddress,proto3" json:"old_address,omitempty"`
	// Ethereum address that is newly associated with the node
	NewAddress string `protobuf:"bytes,3,opt,name=new_address,json=newAddress,proto3" json:"new_address,omitempty"`
	// Block height when the key rotation took effect
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *EthereumKeyRotation) Reset() {
	*x = EthereumKeyRotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumKeyRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumKeyRotation) ProtoMessage() {}

func (x *EthereumKeyRotation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumKeyRotation.ProtoReflect.Descriptor instead.
func (*EthereumKeyRotation) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{59}
}

func (x *EthereumKeyRotation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *EthereumKeyRotation) GetOldAddress() string {
	if x != nil {
		return x.OldAddress
	}
	return ""
}

func (x *EthereumKeyRotation) GetNewAddress() string {
	if x != nil {
		return x.NewAddress
	}
	return ""
}

func (x *EthereumKeyRotation) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type ProtocolUpgradeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block height at which to perform the upgrade
	UpgradeBlockHeight uint64 `protobuf:"varint,1,opt,name=upgrade_block_height,json=upgradeBlockHeight,proto3" json:"upgrade_block_height,omitempty"`
	// Release tag for the vega binary
	VegaReleaseTag string `protobuf:"bytes,2,opt,name=vega_release_tag,json=vegaReleaseTag,proto3" json:"vega_release_tag,omitempty"`
	// Tendermint validators that have agreed to the upgrade
	Approvers []string `protobuf:"bytes,3,rep,name=approvers,proto3" json:"approvers,omitempty"`
	// Status of the proposal
	Status ProtocolUpgradeProposalStatus `protobuf:"varint,4,opt,name=status,proto3,enum=vega.events.v1.ProtocolUpgradeProposalStatus" json:"status,omitempty"`
}

func (x *ProtocolUpgradeEvent) Reset() {
	*x = ProtocolUpgradeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolUpgradeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolUpgradeEvent) ProtoMessage() {}

func (x *ProtocolUpgradeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolUpgradeEvent.ProtoReflect.Descriptor instead.
func (*ProtocolUpgradeEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{60}
}

func (x *ProtocolUpgradeEvent) GetUpgradeBlockHeight() uint64 {
	if x != nil {
		return x.UpgradeBlockHeight
	}
	return 0
}

func (x *ProtocolUpgradeEvent) GetVegaReleaseTag() string {
	if x != nil {
		return x.VegaReleaseTag
	}
	return ""
}

func (x *ProtocolUpgradeEvent) GetApprovers() []string {
	if x != nil {
		return x.Approvers
	}
	return nil
}

func (x *ProtocolUpgradeEvent) GetStatus() ProtocolUpgradeProposalStatus {
	if x != nil {
		return x.Status
	}
	return ProtocolUpgradeProposalStatus_PROTOCOL_UPGRADE_PROPOSAL_STATUS_UNSPECIFIED
}

// StateVar event updates on state changes in state variable consensus
type StateVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	State   string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *StateVar) Reset() {
	*x = StateVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateVar) ProtoMessage() {}

func (x *StateVar) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateVar.ProtoReflect.Descriptor instead.
func (*StateVar) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{61}
}

func (x *StateVar) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StateVar) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *StateVar) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// BeginBlock
type BeginBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height    uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hash      string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *BeginBlock) Reset() {
	*x = BeginBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginBlock) ProtoMessage() {}

func (x *BeginBlock) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginBlock.ProtoReflect.Descriptor instead.
func (*BeginBlock) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{62}
}

func (x *BeginBlock) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BeginBlock) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BeginBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// EndBlock
type EndBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *EndBlock) Reset() {
	*x = EndBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndBlock) ProtoMessage() {}

func (x *EndBlock) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndBlock.ProtoReflect.Descriptor instead.
func (*EndBlock) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{63}
}

func (x *EndBlock) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Event indicating the core is starting a protocol upgrade
type ProtocolUpgradeStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastBlockHeight uint64 `protobuf:"varint,1,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
}

func (x *ProtocolUpgradeStarted) Reset() {
	*x = ProtocolUpgradeStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolUpgradeStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolUpgradeStarted) ProtoMessage() {}

func (x *ProtocolUpgradeStarted) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolUpgradeStarted.ProtoReflect.Descriptor instead.
func (*ProtocolUpgradeStarted) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{64}
}

func (x *ProtocolUpgradeStarted) GetLastBlockHeight() uint64 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

// Event indicating the data node is ready for protocol upgrade
type ProtocolUpgradeDataNodeReady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastBlockHeight uint64 `protobuf:"varint,1,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
}

func (x *ProtocolUpgradeDataNodeReady) Reset() {
	*x = ProtocolUpgradeDataNodeReady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolUpgradeDataNodeReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolUpgradeDataNodeReady) ProtoMessage() {}

func (x *ProtocolUpgradeDataNodeReady) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolUpgradeDataNodeReady.ProtoReflect.Descriptor instead.
func (*ProtocolUpgradeDataNodeReady) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{65}
}

func (x *ProtocolUpgradeDataNodeReady) GetLastBlockHeight() uint64 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

// CoreSnapshotData represents the core snapshot data.
type CoreSnapshotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block height at which snapshot was taken
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Hash of the snapshot block
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Semver version number of the core.
	CoreVersion string `protobuf:"bytes,3,opt,name=core_version,json=coreVersion,proto3" json:"core_version,omitempty"`
	// Indicates if the snapshot is taken as part of protocol upgrade
	ProtocolUpgradeBlock bool `protobuf:"varint,4,opt,name=protocol_upgrade_block,json=protocolUpgradeBlock,proto3" json:"protocol_upgrade_block,omitempty"`
}

func (x *CoreSnapshotData) Reset() {
	*x = CoreSnapshotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreSnapshotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreSnapshotData) ProtoMessage() {}

func (x *CoreSnapshotData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreSnapshotData.ProtoReflect.Descriptor instead.
func (*CoreSnapshotData) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{66}
}

func (x *CoreSnapshotData) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *CoreSnapshotData) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *CoreSnapshotData) GetCoreVersion() string {
	if x != nil {
		return x.CoreVersion
	}
	return ""
}

func (x *CoreSnapshotData) GetProtocolUpgradeBlock() bool {
	if x != nil {
		return x.ProtocolUpgradeBlock
	}
	return false
}

type ExpiredOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Slice of expired order IDs
	OrderIds []string `protobuf:"bytes,2,rep,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
}

func (x *ExpiredOrders) Reset() {
	*x = ExpiredOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpiredOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpiredOrders) ProtoMessage() {}

func (x *ExpiredOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpiredOrders.ProtoReflect.Descriptor instead.
func (*ExpiredOrders) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{67}
}

func (x *ExpiredOrders) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ExpiredOrders) GetOrderIds() []string {
	if x != nil {
		return x.OrderIds
	}
	return nil
}

type CancelledOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID for the event.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The ID of the party which cancelled the orders.
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The order IDs that were cancelled.
	OrderIds []string `protobuf:"bytes,3,rep,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
}

func (x *CancelledOrders) Reset() {
	*x = CancelledOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelledOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelledOrders) ProtoMessage() {}

func (x *CancelledOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelledOrders.ProtoReflect.Descriptor instead.
func (*CancelledOrders) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{68}
}

func (x *CancelledOrders) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CancelledOrders) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *CancelledOrders) GetOrderIds() []string {
	if x != nil {
		return x.OrderIds
	}
	return nil
}

type TeamCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the created team.
	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// The party that created the team.
	Referrer string `protobuf:"bytes,2,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// Name of the team.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Link to the team's homepage.
	TeamUrl *string `protobuf:"bytes,4,opt,name=team_url,json=teamUrl,proto3,oneof" json:"team_url,omitempty"`
	// Link to an image of the team's avatar.
	AvatarUrl *string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3,oneof" json:"avatar_url,omitempty"`
	// Time in Unix nanoseconds when the team is created.
	CreatedAt int64 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Tells if a party can join the team or not.
	Closed bool `protobuf:"varint,7,opt,name=closed,proto3" json:"closed,omitempty"`
	// Epoch at which the team was created.
	AtEpoch uint64 `protobuf:"varint,8,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
	// List of public keys that are allowed to join the team.
	AllowList []string `protobuf:"bytes,9,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
}

func (x *TeamCreated) Reset() {
	*x = TeamCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamCreated) ProtoMessage() {}

func (x *TeamCreated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamCreated.ProtoReflect.Descriptor instead.
func (*TeamCreated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{69}
}

func (x *TeamCreated) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamCreated) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *TeamCreated) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamCreated) GetTeamUrl() string {
	if x != nil && x.TeamUrl != nil {
		return *x.TeamUrl
	}
	return ""
}

func (x *TeamCreated) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *TeamCreated) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TeamCreated) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *TeamCreated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

func (x *TeamCreated) GetAllowList() []string {
	if x != nil {
		return x.AllowList
	}
	return nil
}

type TeamUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the updated team.
	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Name of the team.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Link to the team's homepage.
	TeamUrl *string `protobuf:"bytes,3,opt,name=team_url,json=teamUrl,proto3,oneof" json:"team_url,omitempty"`
	// Link to an image of the team's avatar.
	AvatarUrl *string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3,oneof" json:"avatar_url,omitempty"`
	// Tells if a party can join the team or not.
	Closed bool `protobuf:"varint,5,opt,name=closed,proto3" json:"closed,omitempty"`
	// List of public keys that are allowed to join the team.
	AllowList []string `protobuf:"bytes,6,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
}

func (x *TeamUpdated) Reset() {
	*x = TeamUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamUpdated) ProtoMessage() {}

func (x *TeamUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamUpdated.ProtoReflect.Descriptor instead.
func (*TeamUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{70}
}

func (x *TeamUpdated) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamUpdated) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamUpdated) GetTeamUrl() string {
	if x != nil && x.TeamUrl != nil {
		return *x.TeamUrl
	}
	return ""
}

func (x *TeamUpdated) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *TeamUpdated) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *TeamUpdated) GetAllowList() []string {
	if x != nil {
		return x.AllowList
	}
	return nil
}

type RefereeSwitchedTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the team the referee left.
	FromTeamId string `protobuf:"bytes,1,opt,name=from_team_id,json=fromTeamId,proto3" json:"from_team_id,omitempty"`
	// The unique identifier of the team joined.
	ToTeamId string `protobuf:"bytes,2,opt,name=to_team_id,json=toTeamId,proto3" json:"to_team_id,omitempty"`
	// The party that switched team.
	Referee string `protobuf:"bytes,3,opt,name=referee,proto3" json:"referee,omitempty"`
	// Time in Unix nanoseconds when the party switched team. This time acts as
	// the joining time.
	SwitchedAt int64 `protobuf:"varint,4,opt,name=switched_at,json=switchedAt,proto3" json:"switched_at,omitempty"`
	// Epoch at which the party switched the team.
	AtEpoch uint64 `protobuf:"varint,5,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *RefereeSwitchedTeam) Reset() {
	*x = RefereeSwitchedTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefereeSwitchedTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefereeSwitchedTeam) ProtoMessage() {}

func (x *RefereeSwitchedTeam) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefereeSwitchedTeam.ProtoReflect.Descriptor instead.
func (*RefereeSwitchedTeam) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{71}
}

func (x *RefereeSwitchedTeam) GetFromTeamId() string {
	if x != nil {
		return x.FromTeamId
	}
	return ""
}

func (x *RefereeSwitchedTeam) GetToTeamId() string {
	if x != nil {
		return x.ToTeamId
	}
	return ""
}

func (x *RefereeSwitchedTeam) GetReferee() string {
	if x != nil {
		return x.Referee
	}
	return ""
}

func (x *RefereeSwitchedTeam) GetSwitchedAt() int64 {
	if x != nil {
		return x.SwitchedAt
	}
	return 0
}

func (x *RefereeSwitchedTeam) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type RefereeJoinedTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the team the referee joined.
	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// The party that joined the team.
	Referee string `protobuf:"bytes,2,opt,name=referee,proto3" json:"referee,omitempty"`
	// Time in Unix nanoseconds when the party joined a team.
	JoinedAt int64 `protobuf:"varint,3,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	// Epoch at which the party joined the team.
	AtEpoch uint64 `protobuf:"varint,4,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *RefereeJoinedTeam) Reset() {
	*x = RefereeJoinedTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefereeJoinedTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefereeJoinedTeam) ProtoMessage() {}

func (x *RefereeJoinedTeam) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefereeJoinedTeam.ProtoReflect.Descriptor instead.
func (*RefereeJoinedTeam) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{72}
}

func (x *RefereeJoinedTeam) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *RefereeJoinedTeam) GetReferee() string {
	if x != nil {
		return x.Referee
	}
	return ""
}

func (x *RefereeJoinedTeam) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *RefereeJoinedTeam) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type ReferralSetCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the created set.
	SetId string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	// Party that created the set.
	Referrer string `protobuf:"bytes,2,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// Time in Unix nanoseconds when the set was created.
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time in Unix nanoseconds when the set was updated.
	UpdatedAt int64 `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ReferralSetCreated) Reset() {
	*x = ReferralSetCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralSetCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralSetCreated) ProtoMessage() {}

func (x *ReferralSetCreated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralSetCreated.ProtoReflect.Descriptor instead.
func (*ReferralSetCreated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{73}
}

func (x *ReferralSetCreated) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *ReferralSetCreated) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *ReferralSetCreated) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ReferralSetCreated) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ReferralSetStatsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the set.
	SetId string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	// Epoch at which the set's statistics are updated.
	AtEpoch uint64 `protobuf:"varint,2,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
	// Running volume for the set based on the window length of the current
	// referral program.
	ReferralSetRunningNotionalTakerVolume string `protobuf:"bytes,3,opt,name=referral_set_running_notional_taker_volume,json=referralSetRunningNotionalTakerVolume,proto3" json:"referral_set_running_notional_taker_volume,omitempty"`
	// Referees' statistics for that epoch.
	RefereesStats []*RefereeStats `protobuf:"bytes,4,rep,name=referees_stats,json=refereesStats,proto3" json:"referees_stats,omitempty"`
	// deprecated
	RewardFactor string `protobuf:"bytes,5,opt,name=reward_factor,json=rewardFactor,proto3" json:"reward_factor,omitempty"`
	// Rewards multiplier applied to the trades.
	RewardsMultiplier string `protobuf:"bytes,6,opt,name=rewards_multiplier,json=rewardsMultiplier,proto3" json:"rewards_multiplier,omitempty"`
	// deprecated
	RewardsFactorMultiplier string `protobuf:"bytes,7,opt,name=rewards_factor_multiplier,json=rewardsFactorMultiplier,proto3" json:"rewards_factor_multiplier,omitempty"`
	// Indicates if the referral set was eligible to be part of the referral program.
	WasEligible bool `protobuf:"varint,8,opt,name=was_eligible,json=wasEligible,proto3" json:"was_eligible,omitempty"`
	// Taker volume of the referrer
	ReferrerTakerVolume string `protobuf:"bytes,9,opt,name=referrer_taker_volume,json=referrerTakerVolume,proto3" json:"referrer_taker_volume,omitempty"`
	// Reward factor applied to the trades.
	RewardFactors *vega.RewardFactors `protobuf:"bytes,10,opt,name=reward_factors,json=rewardFactors,proto3" json:"reward_factors,omitempty"`
	// Reward factors multiplier for the trades.
	RewardFactorsMultiplier *vega.RewardFactors `protobuf:"bytes,11,opt,name=reward_factors_multiplier,json=rewardFactorsMultiplier,proto3" json:"reward_factors_multiplier,omitempty"`
}

func (x *ReferralSetStatsUpdated) Reset() {
	*x = ReferralSetStatsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralSetStatsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralSetStatsUpdated) ProtoMessage() {}

func (x *ReferralSetStatsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralSetStatsUpdated.ProtoReflect.Descriptor instead.
func (*ReferralSetStatsUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{74}
}

func (x *ReferralSetStatsUpdated) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *ReferralSetStatsUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

func (x *ReferralSetStatsUpdated) GetReferralSetRunningNotionalTakerVolume() string {
	if x != nil {
		return x.ReferralSetRunningNotionalTakerVolume
	}
	return ""
}

func (x *ReferralSetStatsUpdated) GetRefereesStats() []*RefereeStats {
	if x != nil {
		return x.RefereesStats
	}
	return nil
}

func (x *ReferralSetStatsUpdated) GetRewardFactor() string {
	if x != nil {
		return x.RewardFactor
	}
	return ""
}

func (x *ReferralSetStatsUpdated) GetRewardsMultiplier() string {
	if x != nil {
		return x.RewardsMultiplier
	}
	return ""
}

func (x *ReferralSetStatsUpdated) GetRewardsFactorMultiplier() string {
	if x != nil {
		return x.RewardsFactorMultiplier
	}
	return ""
}

func (x *ReferralSetStatsUpdated) GetWasEligible() bool {
	if x != nil {
		return x.WasEligible
	}
	return false
}

func (x *ReferralSetStatsUpdated) GetReferrerTakerVolume() string {
	if x != nil {
		return x.ReferrerTakerVolume
	}
	return ""
}

func (x *ReferralSetStatsUpdated) GetRewardFactors() *vega.RewardFactors {
	if x != nil {
		return x.RewardFactors
	}
	return nil
}

func (x *ReferralSetStatsUpdated) GetRewardFactorsMultiplier() *vega.RewardFactors {
	if x != nil {
		return x.RewardFactorsMultiplier
	}
	return nil
}

type RefereeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the party.
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// deprecated.
	DiscountFactor string `protobuf:"bytes,2,opt,name=discount_factor,json=discountFactor,proto3" json:"discount_factor,omitempty"`
	// Current referee notional taker volume
	EpochNotionalTakerVolume string `protobuf:"bytes,4,opt,name=epoch_notional_taker_volume,json=epochNotionalTakerVolume,proto3" json:"epoch_notional_taker_volume,omitempty"`
	// Discount factors applied to the party.
	DiscountFactors *vega.DiscountFactors `protobuf:"bytes,5,opt,name=discount_factors,json=discountFactors,proto3" json:"discount_factors,omitempty"`
}

func (x *RefereeStats) Reset() {
	*x = RefereeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefereeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefereeStats) ProtoMessage() {}

func (x *RefereeStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefereeStats.ProtoReflect.Descriptor instead.
func (*RefereeStats) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{75}
}

func (x *RefereeStats) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *RefereeStats) GetDiscountFactor() string {
	if x != nil {
		return x.DiscountFactor
	}
	return ""
}

func (x *RefereeStats) GetEpochNotionalTakerVolume() string {
	if x != nil {
		return x.EpochNotionalTakerVolume
	}
	return ""
}

func (x *RefereeStats) GetDiscountFactors() *vega.DiscountFactors {
	if x != nil {
		return x.DiscountFactors
	}
	return nil
}

type RefereeJoinedReferralSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the referral set the referee joined.
	SetId string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	// Party that joined the set.
	Referee string `protobuf:"bytes,2,opt,name=referee,proto3" json:"referee,omitempty"`
	// Time in Unix nanoseconds when the party joined the set.
	JoinedAt int64 `protobuf:"varint,3,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	// Epoch at which the party joined the set.
	AtEpoch uint64 `protobuf:"varint,4,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *RefereeJoinedReferralSet) Reset() {
	*x = RefereeJoinedReferralSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefereeJoinedReferralSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefereeJoinedReferralSet) ProtoMessage() {}

func (x *RefereeJoinedReferralSet) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefereeJoinedReferralSet.ProtoReflect.Descriptor instead.
func (*RefereeJoinedReferralSet) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{76}
}

func (x *RefereeJoinedReferralSet) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *RefereeJoinedReferralSet) GetReferee() string {
	if x != nil {
		return x.Referee
	}
	return ""
}

func (x *RefereeJoinedReferralSet) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *RefereeJoinedReferralSet) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type ReferralProgramStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Referral program that has started.
	Program *vega.ReferralProgram `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// Time in Unix nanoseconds when the referral program started.
	StartedAt int64 `protobuf:"varint,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Epoch at which the referral program started.
	AtEpoch uint64 `protobuf:"varint,3,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *ReferralProgramStarted) Reset() {
	*x = ReferralProgramStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralProgramStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralProgramStarted) ProtoMessage() {}

func (x *ReferralProgramStarted) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralProgramStarted.ProtoReflect.Descriptor instead.
func (*ReferralProgramStarted) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{77}
}

func (x *ReferralProgramStarted) GetProgram() *vega.ReferralProgram {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *ReferralProgramStarted) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *ReferralProgramStarted) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type ReferralProgramUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated referral program.
	Program *vega.ReferralProgram `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// Time in Unix nanoseconds when the referral program was updated.
	UpdatedAt int64 `protobuf:"varint,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Epoch at which the referral program was updated.
	AtEpoch uint64 `protobuf:"varint,3,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *ReferralProgramUpdated) Reset() {
	*x = ReferralProgramUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralProgramUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralProgramUpdated) ProtoMessage() {}

func (x *ReferralProgramUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralProgramUpdated.ProtoReflect.Descriptor instead.
func (*ReferralProgramUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{78}
}

func (x *ReferralProgramUpdated) GetProgram() *vega.ReferralProgram {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *ReferralProgramUpdated) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ReferralProgramUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type ReferralProgramEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Program update version.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Unique ID of the referral program.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Time in Unix nanoseconds when the referral program ended.
	EndedAt int64 `protobuf:"varint,3,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	// Epoch at which the referral program ended.
	AtEpoch uint64 `protobuf:"varint,4,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *ReferralProgramEnded) Reset() {
	*x = ReferralProgramEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralProgramEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralProgramEnded) ProtoMessage() {}

func (x *ReferralProgramEnded) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralProgramEnded.ProtoReflect.Descriptor instead.
func (*ReferralProgramEnded) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{79}
}

func (x *ReferralProgramEnded) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ReferralProgramEnded) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReferralProgramEnded) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *ReferralProgramEnded) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type VolumeDiscountProgramStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume discount program that has started.
	Program *vega.VolumeDiscountProgram `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// Time in Unix nanoseconds when the volume discount program started.
	StartedAt int64 `protobuf:"varint,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Epoch at which the volume discount program started.
	AtEpoch uint64 `protobuf:"varint,3,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *VolumeDiscountProgramStarted) Reset() {
	*x = VolumeDiscountProgramStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeDiscountProgramStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDiscountProgramStarted) ProtoMessage() {}

func (x *VolumeDiscountProgramStarted) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDiscountProgramStarted.ProtoReflect.Descriptor instead.
func (*VolumeDiscountProgramStarted) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{80}
}

func (x *VolumeDiscountProgramStarted) GetProgram() *vega.VolumeDiscountProgram {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *VolumeDiscountProgramStarted) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *VolumeDiscountProgramStarted) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type VolumeDiscountProgramUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated volume discount program.
	Program *vega.VolumeDiscountProgram `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// Time in Unix nanoseconds when the volume discount program was updated.
	UpdatedAt int64 `protobuf:"varint,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Epoch at which the volume discount program was updated.
	AtEpoch uint64 `protobuf:"varint,3,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *VolumeDiscountProgramUpdated) Reset() {
	*x = VolumeDiscountProgramUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeDiscountProgramUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDiscountProgramUpdated) ProtoMessage() {}

func (x *VolumeDiscountProgramUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDiscountProgramUpdated.ProtoReflect.Descriptor instead.
func (*VolumeDiscountProgramUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{81}
}

func (x *VolumeDiscountProgramUpdated) GetProgram() *vega.VolumeDiscountProgram {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *VolumeDiscountProgramUpdated) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *VolumeDiscountProgramUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type VolumeDiscountProgramEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Program update version.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Unique ID of the volume discount program.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Time in Unix nanoseconds when the referral program ended.
	EndedAt int64 `protobuf:"varint,3,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	// Epoch at which the referral program ended.
	AtEpoch uint64 `protobuf:"varint,4,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *VolumeDiscountProgramEnded) Reset() {
	*x = VolumeDiscountProgramEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeDiscountProgramEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDiscountProgramEnded) ProtoMessage() {}

func (x *VolumeDiscountProgramEnded) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDiscountProgramEnded.ProtoReflect.Descriptor instead.
func (*VolumeDiscountProgramEnded) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{82}
}

func (x *VolumeDiscountProgramEnded) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *VolumeDiscountProgramEnded) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VolumeDiscountProgramEnded) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *VolumeDiscountProgramEnded) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type PaidLiquidityFeesStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market the fees were paid in.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Settlement asset of the market.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Epoch for which these stats where valid.
	EpochSeq uint64 `protobuf:"varint,3,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// Total fees paid across all parties.
	TotalFeesPaid string `protobuf:"bytes,4,opt,name=total_fees_paid,json=totalFeesPaid,proto3" json:"total_fees_paid,omitempty"`
	// Fees paid per party.
	FeesPaidPerParty []*PartyAmount `protobuf:"bytes,5,rep,name=fees_paid_per_party,json=feesPaidPerParty,proto3" json:"fees_paid_per_party,omitempty"`
}

func (x *PaidLiquidityFeesStats) Reset() {
	*x = PaidLiquidityFeesStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaidLiquidityFeesStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaidLiquidityFeesStats) ProtoMessage() {}

func (x *PaidLiquidityFeesStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaidLiquidityFeesStats.ProtoReflect.Descriptor instead.
func (*PaidLiquidityFeesStats) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{83}
}

func (x *PaidLiquidityFeesStats) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PaidLiquidityFeesStats) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *PaidLiquidityFeesStats) GetEpochSeq() uint64 {
	if x != nil {
		return x.EpochSeq
	}
	return 0
}

func (x *PaidLiquidityFeesStats) GetTotalFeesPaid() string {
	if x != nil {
		return x.TotalFeesPaid
	}
	return ""
}

func (x *PaidLiquidityFeesStats) GetFeesPaidPerParty() []*PartyAmount {
	if x != nil {
		return x.FeesPaidPerParty
	}
	return nil
}

type PartyMarginModeUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the market in which the update happened.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Unique ID of the party that updated their margin mode.
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Updated margin mode.
	MarginMode vega.MarginMode `protobuf:"varint,3,opt,name=margin_mode,json=marginMode,proto3,enum=vega.MarginMode" json:"margin_mode,omitempty"`
	// Margin factor for the market. Isolated mode only.
	MarginFactor *string `protobuf:"bytes,4,opt,name=margin_factor,json=marginFactor,proto3,oneof" json:"margin_factor,omitempty"`
	// Minimum theoretical margin factor for the market. Isolated mode only.
	MinTheoreticalMarginFactor *string `protobuf:"bytes,5,opt,name=min_theoretical_margin_factor,json=minTheoreticalMarginFactor,proto3,oneof" json:"min_theoretical_margin_factor,omitempty"`
	// Maximum theoretical leverage for the market. Isolated mode only.
	MaxTheoreticalLeverage *string `protobuf:"bytes,6,opt,name=max_theoretical_leverage,json=maxTheoreticalLeverage,proto3,oneof" json:"max_theoretical_leverage,omitempty"`
	// Epoch at which the update happened.
	AtEpoch uint64 `protobuf:"varint,7,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *PartyMarginModeUpdated) Reset() {
	*x = PartyMarginModeUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyMarginModeUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyMarginModeUpdated) ProtoMessage() {}

func (x *PartyMarginModeUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyMarginModeUpdated.ProtoReflect.Descriptor instead.
func (*PartyMarginModeUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{84}
}

func (x *PartyMarginModeUpdated) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *PartyMarginModeUpdated) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyMarginModeUpdated) GetMarginMode() vega.MarginMode {
	if x != nil {
		return x.MarginMode
	}
	return vega.MarginMode(0)
}

func (x *PartyMarginModeUpdated) GetMarginFactor() string {
	if x != nil && x.MarginFactor != nil {
		return *x.MarginFactor
	}
	return ""
}

func (x *PartyMarginModeUpdated) GetMinTheoreticalMarginFactor() string {
	if x != nil && x.MinTheoreticalMarginFactor != nil {
		return *x.MinTheoreticalMarginFactor
	}
	return ""
}

func (x *PartyMarginModeUpdated) GetMaxTheoreticalLeverage() string {
	if x != nil && x.MaxTheoreticalLeverage != nil {
		return *x.MaxTheoreticalLeverage
	}
	return ""
}

func (x *PartyMarginModeUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type PartyProfileUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party's profile updated.
	UpdatedProfile *vega.PartyProfile `protobuf:"bytes,1,opt,name=updated_profile,json=updatedProfile,proto3" json:"updated_profile,omitempty"`
}

func (x *PartyProfileUpdated) Reset() {
	*x = PartyProfileUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyProfileUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyProfileUpdated) ProtoMessage() {}

func (x *PartyProfileUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyProfileUpdated.ProtoReflect.Descriptor instead.
func (*PartyProfileUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{85}
}

func (x *PartyProfileUpdated) GetUpdatedProfile() *vega.PartyProfile {
	if x != nil {
		return x.UpdatedProfile
	}
	return nil
}

// Stats for all teams.
type TeamsStatsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch at which the statistics are updated.
	AtEpoch uint64 `protobuf:"varint,1,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
	// All teams' stats.
	Stats []*TeamStats `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *TeamsStatsUpdated) Reset() {
	*x = TeamsStatsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsStatsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsStatsUpdated) ProtoMessage() {}

func (x *TeamsStatsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsStatsUpdated.ProtoReflect.Descriptor instead.
func (*TeamsStatsUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{86}
}

func (x *TeamsStatsUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

func (x *TeamsStatsUpdated) GetStats() []*TeamStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the team.
	TeamId string `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Statistics for each team member.
	MembersStats []*TeamMemberStats `protobuf:"bytes,2,rep,name=members_stats,json=membersStats,proto3" json:"members_stats,omitempty"`
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{87}
}

func (x *TeamStats) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamStats) GetMembersStats() []*TeamMemberStats {
	if x != nil {
		return x.MembersStats
	}
	return nil
}

type TeamMemberStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party ID of the team member.
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Team members' notional volume for the epoch.
	NotionalVolume string `protobuf:"bytes,2,opt,name=notional_volume,json=notionalVolume,proto3" json:"notional_volume,omitempty"`
}

func (x *TeamMemberStats) Reset() {
	*x = TeamMemberStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMemberStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberStats) ProtoMessage() {}

func (x *TeamMemberStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberStats.ProtoReflect.Descriptor instead.
func (*TeamMemberStats) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{88}
}

func (x *TeamMemberStats) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *TeamMemberStats) GetNotionalVolume() string {
	if x != nil {
		return x.NotionalVolume
	}
	return ""
}

// Scores per party per game with eligibility context.
type GamePartyScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Game ID.
	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// The party ID.
	Party string `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
	// Team the party belongs to. Unset if the party is not part of a team.
	TeamId *string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
	// Epoch when these scores were generated.
	Epoch int64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Timestamp in Unix nanoseconds when these scores were generated.
	Time int64 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	// Party's current score in the game.
	Score string `protobuf:"bytes,6,opt,name=score,proto3" json:"score,omitempty"`
	// Party's current staking balance. Only populated if the game has a requirement for it.
	StakingBalance string `protobuf:"bytes,7,opt,name=staking_balance,json=stakingBalance,proto3" json:"staking_balance,omitempty"`
	// Party's current open volume. Only populated if the game has a requirement for it.
	OpenVolume string `protobuf:"bytes,8,opt,name=open_volume,json=openVolume,proto3" json:"open_volume,omitempty"`
	// Total fees paid by the party during the relevant period.
	TotalFeesPaid string `protobuf:"bytes,9,opt,name=total_fees_paid,json=totalFeesPaid,proto3" json:"total_fees_paid,omitempty"`
	// If the party is eligible for a reward for this game based on the current information.
	IsEligible bool `protobuf:"varint,10,opt,name=is_eligible,json=isEligible,proto3" json:"is_eligible,omitempty"`
	// If the party is a member of a team, this is their relative position in the sorting order of the team.
	// Empty if not a team, or if the party is not eligible.
	Rank *uint64 `protobuf:"varint,11,opt,name=rank,proto3,oneof" json:"rank,omitempty"`
}

func (x *GamePartyScore) Reset() {
	*x = GamePartyScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePartyScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePartyScore) ProtoMessage() {}

func (x *GamePartyScore) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePartyScore.ProtoReflect.Descriptor instead.
func (*GamePartyScore) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{89}
}

func (x *GamePartyScore) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GamePartyScore) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *GamePartyScore) GetTeamId() string {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return ""
}

func (x *GamePartyScore) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *GamePartyScore) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GamePartyScore) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *GamePartyScore) GetStakingBalance() string {
	if x != nil {
		return x.StakingBalance
	}
	return ""
}

func (x *GamePartyScore) GetOpenVolume() string {
	if x != nil {
		return x.OpenVolume
	}
	return ""
}

func (x *GamePartyScore) GetTotalFeesPaid() string {
	if x != nil {
		return x.TotalFeesPaid
	}
	return ""
}

func (x *GamePartyScore) GetIsEligible() bool {
	if x != nil {
		return x.IsEligible
	}
	return false
}

func (x *GamePartyScore) GetRank() uint64 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

type GameTeamScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Game ID.
	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// Team ID
	TeamId string `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Epoch when these scores were generated.
	Epoch int64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Timestamp in Unix nanoseconds when these scores were generated.
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	// Team's current collective score in the game.
	Score string `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *GameTeamScore) Reset() {
	*x = GameTeamScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTeamScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTeamScore) ProtoMessage() {}

func (x *GameTeamScore) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTeamScore.ProtoReflect.Descriptor instead.
func (*GameTeamScore) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{90}
}

func (x *GameTeamScore) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameTeamScore) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *GameTeamScore) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *GameTeamScore) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GameTeamScore) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

type GameScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamScores  []*GameTeamScore  `protobuf:"bytes,1,rep,name=team_scores,json=teamScores,proto3" json:"team_scores,omitempty"`
	PartyScores []*GamePartyScore `protobuf:"bytes,2,rep,name=party_scores,json=partyScores,proto3" json:"party_scores,omitempty"`
}

func (x *GameScores) Reset() {
	*x = GameScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameScores) ProtoMessage() {}

func (x *GameScores) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameScores.ProtoReflect.Descriptor instead.
func (*GameScores) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{91}
}

func (x *GameScores) GetTeamScores() []*GameTeamScore {
	if x != nil {
		return x.TeamScores
	}
	return nil
}

func (x *GameScores) GetPartyScores() []*GamePartyScore {
	if x != nil {
		return x.PartyScores
	}
	return nil
}

// Bus event is a container for event bus events emitted by Vega
type BusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique event ID for the message
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The batch or block of transactions that the events relate to
	Block string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	// The type of bus event. Must be one of the list below:
	Type BusEventType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.events.v1.BusEventType" json:"type,omitempty"`
	// Types that are assignable to Event:
	//
	//	*BusEvent_TimeUpdate
	//	*BusEvent_LedgerMovements
	//	*BusEvent_PositionResolution
	//	*BusEvent_Order
	//	*BusEvent_Account
	//	*BusEvent_Party
	//	*BusEvent_Trade
	//	*BusEvent_MarginLevels
	//	*BusEvent_Proposal
	//	*BusEvent_Vote
	//	*BusEvent_MarketData
	//	*BusEvent_NodeSignature
	//	*BusEvent_LossSocialization
	//	*BusEvent_SettlePosition
	//	*BusEvent_SettleDistressed
	//	*BusEvent_MarketCreated
	//	*BusEvent_Asset
	//	*BusEvent_MarketTick
	//	*BusEvent_Withdrawal
	//	*BusEvent_Deposit
	//	*BusEvent_Auction
	//	*BusEvent_RiskFactor
	//	*BusEvent_NetworkParameter
	//	*BusEvent_LiquidityProvision
	//	*BusEvent_MarketUpdated
	//	*BusEvent_OracleSpec
	//	*BusEvent_OracleData
	//	*BusEvent_DelegationBalance
	//	*BusEvent_ValidatorScore
	//	*BusEvent_EpochEvent
	//	*BusEvent_ValidatorUpdate
	//	*BusEvent_StakeLinking
	//	*BusEvent_RewardPayout
	//	*BusEvent_Checkpoint
	//	*BusEvent_KeyRotation
	//	*BusEvent_StateVar
	//	*BusEvent_NetworkLimits
	//	*BusEvent_Transfer
	//	*BusEvent_RankingEvent
	//	*BusEvent_Erc20MultisigSignerEvent
	//	*BusEvent_Erc20MultisigSetThresholdEvent
	//	*BusEvent_Erc20MultisigSignerAdded
	//	*BusEvent_Erc20MultisigSignerRemoved
	//	*BusEvent_PositionStateEvent
	//	*BusEvent_EthereumKeyRotation
	//	*BusEvent_ProtocolUpgradeEvent
	//	*BusEvent_BeginBlock
	//	*BusEvent_EndBlock
	//	*BusEvent_ProtocolUpgradeStarted
	//	*BusEvent_SettleMarket
	//	*BusEvent_TransactionResult
	//	*BusEvent_CoreSnapshotEvent
	//	*BusEvent_ProtocolUpgradeDataNodeReady
	//	*BusEvent_DistressedOrders
	//	*BusEvent_ExpiredOrders
	//	*BusEvent_DistressedPositions
	//	*BusEvent_StopOrder
	//	*BusEvent_FundingPeriod
	//	*BusEvent_FundingPeriodDataPoint
	//	*BusEvent_TeamCreated
	//	*BusEvent_TeamUpdated
	//	*BusEvent_RefereeSwitchedTeam
	//	*BusEvent_RefereeJoinedTeam
	//	*BusEvent_ReferralProgramStarted
	//	*BusEvent_ReferralProgramUpdated
	//	*BusEvent_ReferralProgramEnded
	//	*BusEvent_ReferralSetCreated
	//	*BusEvent_RefereeJoinedReferralSet
	//	*BusEvent_PartyActivityStreak
	//	*BusEvent_VolumeDiscountProgramStarted
	//	*BusEvent_VolumeDiscountProgramUpdated
	//	*BusEvent_VolumeDiscountProgramEnded
	//	*BusEvent_ReferralSetStatsUpdated
	//	*BusEvent_VestingStatsUpdated
	//	*BusEvent_VolumeDiscountStatsUpdated
	//	*BusEvent_FeesStats
	//	*BusEvent_FundingPayments
	//	*BusEvent_PaidLiquidityFeesStats
	//	*BusEvent_VestingBalancesSummary
	//	*BusEvent_TransferFees
	//	*BusEvent_TransferFeesDiscount
	//	*BusEvent_PartyMarginModeUpdated
	//	*BusEvent_PartyProfileUpdated
	//	*BusEvent_TeamsStatsUpdated
	//	*BusEvent_TimeWeightedNotionalPositionUpdated
	//	*BusEvent_CancelledOrders
	//	*BusEvent_GameScores
	//	*BusEvent_Amm
	//	*BusEvent_VolumeRebateProgramStarted
	//	*BusEvent_VolumeRebateProgramUpdated
	//	*BusEvent_VolumeRebateProgramEnded
	//	*BusEvent_VolumeRebateStatsUpdated
	//	*BusEvent_MarketCommunityTags
	//	*BusEvent_Market
	//	*BusEvent_TxErrEvent
	Event isBusEvent_Event `protobuf_oneof:"event"`
	// Version of bus event
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ChainId string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash  string `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *BusEvent) Reset() {
	*x = BusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusEvent) ProtoMessage() {}

func (x *BusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusEvent.ProtoReflect.Descriptor instead.
func (*BusEvent) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{92}
}

func (x *BusEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BusEvent) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *BusEvent) GetType() BusEventType {
	if x != nil {
		return x.Type
	}
	return BusEventType_BUS_EVENT_TYPE_UNSPECIFIED
}

func (m *BusEvent) GetEvent() isBusEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *BusEvent) GetTimeUpdate() *TimeUpdate {
	if x, ok := x.GetEvent().(*BusEvent_TimeUpdate); ok {
		return x.TimeUpdate
	}
	return nil
}

func (x *BusEvent) GetLedgerMovements() *LedgerMovements {
	if x, ok := x.GetEvent().(*BusEvent_LedgerMovements); ok {
		return x.LedgerMovements
	}
	return nil
}

func (x *BusEvent) GetPositionResolution() *PositionResolution {
	if x, ok := x.GetEvent().(*BusEvent_PositionResolution); ok {
		return x.PositionResolution
	}
	return nil
}

func (x *BusEvent) GetOrder() *vega.Order {
	if x, ok := x.GetEvent().(*BusEvent_Order); ok {
		return x.Order
	}
	return nil
}

func (x *BusEvent) GetAccount() *vega.Account {
	if x, ok := x.GetEvent().(*BusEvent_Account); ok {
		return x.Account
	}
	return nil
}

func (x *BusEvent) GetParty() *vega.Party {
	if x, ok := x.GetEvent().(*BusEvent_Party); ok {
		return x.Party
	}
	return nil
}

func (x *BusEvent) GetTrade() *vega.Trade {
	if x, ok := x.GetEvent().(*BusEvent_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *BusEvent) GetMarginLevels() *vega.MarginLevels {
	if x, ok := x.GetEvent().(*BusEvent_MarginLevels); ok {
		return x.MarginLevels
	}
	return nil
}

func (x *BusEvent) GetProposal() *vega.Proposal {
	if x, ok := x.GetEvent().(*BusEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (x *BusEvent) GetVote() *vega.Vote {
	if x, ok := x.GetEvent().(*BusEvent_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *BusEvent) GetMarketData() *vega.MarketData {
	if x, ok := x.GetEvent().(*BusEvent_MarketData); ok {
		return x.MarketData
	}
	return nil
}

func (x *BusEvent) GetNodeSignature() *v1.NodeSignature {
	if x, ok := x.GetEvent().(*BusEvent_NodeSignature); ok {
		return x.NodeSignature
	}
	return nil
}

func (x *BusEvent) GetLossSocialization() *LossSocialization {
	if x, ok := x.GetEvent().(*BusEvent_LossSocialization); ok {
		return x.LossSocialization
	}
	return nil
}

func (x *BusEvent) GetSettlePosition() *SettlePosition {
	if x, ok := x.GetEvent().(*BusEvent_SettlePosition); ok {
		return x.SettlePosition
	}
	return nil
}

func (x *BusEvent) GetSettleDistressed() *SettleDistressed {
	if x, ok := x.GetEvent().(*BusEvent_SettleDistressed); ok {
		return x.SettleDistressed
	}
	return nil
}

func (x *BusEvent) GetMarketCreated() *vega.Market {
	if x, ok := x.GetEvent().(*BusEvent_MarketCreated); ok {
		return x.MarketCreated
	}
	return nil
}

func (x *BusEvent) GetAsset() *vega.Asset {
	if x, ok := x.GetEvent().(*BusEvent_Asset); ok {
		return x.Asset
	}
	return nil
}

func (x *BusEvent) GetMarketTick() *MarketTick {
	if x, ok := x.GetEvent().(*BusEvent_MarketTick); ok {
		return x.MarketTick
	}
	return nil
}

func (x *BusEvent) GetWithdrawal() *vega.Withdrawal {
	if x, ok := x.GetEvent().(*BusEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

func (x *BusEvent) GetDeposit() *vega.Deposit {
	if x, ok := x.GetEvent().(*BusEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *BusEvent) GetAuction() *AuctionEvent {
	if x, ok := x.GetEvent().(*BusEvent_Auction); ok {
		return x.Auction
	}
	return nil
}

func (x *BusEvent) GetRiskFactor() *vega.RiskFactor {
	if x, ok := x.GetEvent().(*BusEvent_RiskFactor); ok {
		return x.RiskFactor
	}
	return nil
}

func (x *BusEvent) GetNetworkParameter() *vega.NetworkParameter {
	if x, ok := x.GetEvent().(*BusEvent_NetworkParameter); ok {
		return x.NetworkParameter
	}
	return nil
}

func (x *BusEvent) GetLiquidityProvision() *vega.LiquidityProvision {
	if x, ok := x.GetEvent().(*BusEvent_LiquidityProvision); ok {
		return x.LiquidityProvision
	}
	return nil
}

func (x *BusEvent) GetMarketUpdated() *vega.Market {
	if x, ok := x.GetEvent().(*BusEvent_MarketUpdated); ok {
		return x.MarketUpdated
	}
	return nil
}

func (x *BusEvent) GetOracleSpec() *vega.OracleSpec {
	if x, ok := x.GetEvent().(*BusEvent_OracleSpec); ok {
		return x.OracleSpec
	}
	return nil
}

func (x *BusEvent) GetOracleData() *vega.OracleData {
	if x, ok := x.GetEvent().(*BusEvent_OracleData); ok {
		return x.OracleData
	}
	return nil
}

func (x *BusEvent) GetDelegationBalance() *DelegationBalanceEvent {
	if x, ok := x.GetEvent().(*BusEvent_DelegationBalance); ok {
		return x.DelegationBalance
	}
	return nil
}

func (x *BusEvent) GetValidatorScore() *ValidatorScoreEvent {
	if x, ok := x.GetEvent().(*BusEvent_ValidatorScore); ok {
		return x.ValidatorScore
	}
	return nil
}

func (x *BusEvent) GetEpochEvent() *EpochEvent {
	if x, ok := x.GetEvent().(*BusEvent_EpochEvent); ok {
		return x.EpochEvent
	}
	return nil
}

func (x *BusEvent) GetValidatorUpdate() *ValidatorUpdate {
	if x, ok := x.GetEvent().(*BusEvent_ValidatorUpdate); ok {
		return x.ValidatorUpdate
	}
	return nil
}

func (x *BusEvent) GetStakeLinking() *StakeLinking {
	if x, ok := x.GetEvent().(*BusEvent_StakeLinking); ok {
		return x.StakeLinking
	}
	return nil
}

func (x *BusEvent) GetRewardPayout() *RewardPayoutEvent {
	if x, ok := x.GetEvent().(*BusEvent_RewardPayout); ok {
		return x.RewardPayout
	}
	return nil
}

func (x *BusEvent) GetCheckpoint() *CheckpointEvent {
	if x, ok := x.GetEvent().(*BusEvent_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *BusEvent) GetKeyRotation() *KeyRotation {
	if x, ok := x.GetEvent().(*BusEvent_KeyRotation); ok {
		return x.KeyRotation
	}
	return nil
}

func (x *BusEvent) GetStateVar() *StateVar {
	if x, ok := x.GetEvent().(*BusEvent_StateVar); ok {
		return x.StateVar
	}
	return nil
}

func (x *BusEvent) GetNetworkLimits() *vega.NetworkLimits {
	if x, ok := x.GetEvent().(*BusEvent_NetworkLimits); ok {
		return x.NetworkLimits
	}
	return nil
}

func (x *BusEvent) GetTransfer() *Transfer {
	if x, ok := x.GetEvent().(*BusEvent_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *BusEvent) GetRankingEvent() *ValidatorRankingEvent {
	if x, ok := x.GetEvent().(*BusEvent_RankingEvent); ok {
		return x.RankingEvent
	}
	return nil
}

func (x *BusEvent) GetErc20MultisigSignerEvent() *ERC20MultiSigSignerEvent {
	if x, ok := x.GetEvent().(*BusEvent_Erc20MultisigSignerEvent); ok {
		return x.Erc20MultisigSignerEvent
	}
	return nil
}

func (x *BusEvent) GetErc20MultisigSetThresholdEvent() *ERC20MultiSigThresholdSetEvent {
	if x, ok := x.GetEvent().(*BusEvent_Erc20MultisigSetThresholdEvent); ok {
		return x.Erc20MultisigSetThresholdEvent
	}
	return nil
}

func (x *BusEvent) GetErc20MultisigSignerAdded() *ERC20MultiSigSignerAdded {
	if x, ok := x.GetEvent().(*BusEvent_Erc20MultisigSignerAdded); ok {
		return x.Erc20MultisigSignerAdded
	}
	return nil
}

func (x *BusEvent) GetErc20MultisigSignerRemoved() *ERC20MultiSigSignerRemoved {
	if x, ok := x.GetEvent().(*BusEvent_Erc20MultisigSignerRemoved); ok {
		return x.Erc20MultisigSignerRemoved
	}
	return nil
}

func (x *BusEvent) GetPositionStateEvent() *PositionStateEvent {
	if x, ok := x.GetEvent().(*BusEvent_PositionStateEvent); ok {
		return x.PositionStateEvent
	}
	return nil
}

func (x *BusEvent) GetEthereumKeyRotation() *EthereumKeyRotation {
	if x, ok := x.GetEvent().(*BusEvent_EthereumKeyRotation); ok {
		return x.EthereumKeyRotation
	}
	return nil
}

func (x *BusEvent) GetProtocolUpgradeEvent() *ProtocolUpgradeEvent {
	if x, ok := x.GetEvent().(*BusEvent_ProtocolUpgradeEvent); ok {
		return x.ProtocolUpgradeEvent
	}
	return nil
}

func (x *BusEvent) GetBeginBlock() *BeginBlock {
	if x, ok := x.GetEvent().(*BusEvent_BeginBlock); ok {
		return x.BeginBlock
	}
	return nil
}

func (x *BusEvent) GetEndBlock() *EndBlock {
	if x, ok := x.GetEvent().(*BusEvent_EndBlock); ok {
		return x.EndBlock
	}
	return nil
}

func (x *BusEvent) GetProtocolUpgradeStarted() *ProtocolUpgradeStarted {
	if x, ok := x.GetEvent().(*BusEvent_ProtocolUpgradeStarted); ok {
		return x.ProtocolUpgradeStarted
	}
	return nil
}

func (x *BusEvent) GetSettleMarket() *SettleMarket {
	if x, ok := x.GetEvent().(*BusEvent_SettleMarket); ok {
		return x.SettleMarket
	}
	return nil
}

func (x *BusEvent) GetTransactionResult() *TransactionResult {
	if x, ok := x.GetEvent().(*BusEvent_TransactionResult); ok {
		return x.TransactionResult
	}
	return nil
}

func (x *BusEvent) GetCoreSnapshotEvent() *CoreSnapshotData {
	if x, ok := x.GetEvent().(*BusEvent_CoreSnapshotEvent); ok {
		return x.CoreSnapshotEvent
	}
	return nil
}

func (x *BusEvent) GetProtocolUpgradeDataNodeReady() *ProtocolUpgradeDataNodeReady {
	if x, ok := x.GetEvent().(*BusEvent_ProtocolUpgradeDataNodeReady); ok {
		return x.ProtocolUpgradeDataNodeReady
	}
	return nil
}

func (x *BusEvent) GetDistressedOrders() *DistressedOrders {
	if x, ok := x.GetEvent().(*BusEvent_DistressedOrders); ok {
		return x.DistressedOrders
	}
	return nil
}

func (x *BusEvent) GetExpiredOrders() *ExpiredOrders {
	if x, ok := x.GetEvent().(*BusEvent_ExpiredOrders); ok {
		return x.ExpiredOrders
	}
	return nil
}

func (x *BusEvent) GetDistressedPositions() *DistressedPositions {
	if x, ok := x.GetEvent().(*BusEvent_DistressedPositions); ok {
		return x.DistressedPositions
	}
	return nil
}

func (x *BusEvent) GetStopOrder() *StopOrderEvent {
	if x, ok := x.GetEvent().(*BusEvent_StopOrder); ok {
		return x.StopOrder
	}
	return nil
}

func (x *BusEvent) GetFundingPeriod() *FundingPeriod {
	if x, ok := x.GetEvent().(*BusEvent_FundingPeriod); ok {
		return x.FundingPeriod
	}
	return nil
}

func (x *BusEvent) GetFundingPeriodDataPoint() *FundingPeriodDataPoint {
	if x, ok := x.GetEvent().(*BusEvent_FundingPeriodDataPoint); ok {
		return x.FundingPeriodDataPoint
	}
	return nil
}

func (x *BusEvent) GetTeamCreated() *TeamCreated {
	if x, ok := x.GetEvent().(*BusEvent_TeamCreated); ok {
		return x.TeamCreated
	}
	return nil
}

func (x *BusEvent) GetTeamUpdated() *TeamUpdated {
	if x, ok := x.GetEvent().(*BusEvent_TeamUpdated); ok {
		return x.TeamUpdated
	}
	return nil
}

func (x *BusEvent) GetRefereeSwitchedTeam() *RefereeSwitchedTeam {
	if x, ok := x.GetEvent().(*BusEvent_RefereeSwitchedTeam); ok {
		return x.RefereeSwitchedTeam
	}
	return nil
}

func (x *BusEvent) GetRefereeJoinedTeam() *RefereeJoinedTeam {
	if x, ok := x.GetEvent().(*BusEvent_RefereeJoinedTeam); ok {
		return x.RefereeJoinedTeam
	}
	return nil
}

func (x *BusEvent) GetReferralProgramStarted() *ReferralProgramStarted {
	if x, ok := x.GetEvent().(*BusEvent_ReferralProgramStarted); ok {
		return x.ReferralProgramStarted
	}
	return nil
}

func (x *BusEvent) GetReferralProgramUpdated() *ReferralProgramUpdated {
	if x, ok := x.GetEvent().(*BusEvent_ReferralProgramUpdated); ok {
		return x.ReferralProgramUpdated
	}
	return nil
}

func (x *BusEvent) GetReferralProgramEnded() *ReferralProgramEnded {
	if x, ok := x.GetEvent().(*BusEvent_ReferralProgramEnded); ok {
		return x.ReferralProgramEnded
	}
	return nil
}

func (x *BusEvent) GetReferralSetCreated() *ReferralSetCreated {
	if x, ok := x.GetEvent().(*BusEvent_ReferralSetCreated); ok {
		return x.ReferralSetCreated
	}
	return nil
}

func (x *BusEvent) GetRefereeJoinedReferralSet() *RefereeJoinedReferralSet {
	if x, ok := x.GetEvent().(*BusEvent_RefereeJoinedReferralSet); ok {
		return x.RefereeJoinedReferralSet
	}
	return nil
}

func (x *BusEvent) GetPartyActivityStreak() *PartyActivityStreak {
	if x, ok := x.GetEvent().(*BusEvent_PartyActivityStreak); ok {
		return x.PartyActivityStreak
	}
	return nil
}

func (x *BusEvent) GetVolumeDiscountProgramStarted() *VolumeDiscountProgramStarted {
	if x, ok := x.GetEvent().(*BusEvent_VolumeDiscountProgramStarted); ok {
		return x.VolumeDiscountProgramStarted
	}
	return nil
}

func (x *BusEvent) GetVolumeDiscountProgramUpdated() *VolumeDiscountProgramUpdated {
	if x, ok := x.GetEvent().(*BusEvent_VolumeDiscountProgramUpdated); ok {
		return x.VolumeDiscountProgramUpdated
	}
	return nil
}

func (x *BusEvent) GetVolumeDiscountProgramEnded() *VolumeDiscountProgramEnded {
	if x, ok := x.GetEvent().(*BusEvent_VolumeDiscountProgramEnded); ok {
		return x.VolumeDiscountProgramEnded
	}
	return nil
}

func (x *BusEvent) GetReferralSetStatsUpdated() *ReferralSetStatsUpdated {
	if x, ok := x.GetEvent().(*BusEvent_ReferralSetStatsUpdated); ok {
		return x.ReferralSetStatsUpdated
	}
	return nil
}

func (x *BusEvent) GetVestingStatsUpdated() *VestingStatsUpdated {
	if x, ok := x.GetEvent().(*BusEvent_VestingStatsUpdated); ok {
		return x.VestingStatsUpdated
	}
	return nil
}

func (x *BusEvent) GetVolumeDiscountStatsUpdated() *VolumeDiscountStatsUpdated {
	if x, ok := x.GetEvent().(*BusEvent_VolumeDiscountStatsUpdated); ok {
		return x.VolumeDiscountStatsUpdated
	}
	return nil
}

func (x *BusEvent) GetFeesStats() *FeesStats {
	if x, ok := x.GetEvent().(*BusEvent_FeesStats); ok {
		return x.FeesStats
	}
	return nil
}

func (x *BusEvent) GetFundingPayments() *FundingPayments {
	if x, ok := x.GetEvent().(*BusEvent_FundingPayments); ok {
		return x.FundingPayments
	}
	return nil
}

func (x *BusEvent) GetPaidLiquidityFeesStats() *PaidLiquidityFeesStats {
	if x, ok := x.GetEvent().(*BusEvent_PaidLiquidityFeesStats); ok {
		return x.PaidLiquidityFeesStats
	}
	return nil
}

func (x *BusEvent) GetVestingBalancesSummary() *VestingBalancesSummary {
	if x, ok := x.GetEvent().(*BusEvent_VestingBalancesSummary); ok {
		return x.VestingBalancesSummary
	}
	return nil
}

func (x *BusEvent) GetTransferFees() *TransferFees {
	if x, ok := x.GetEvent().(*BusEvent_TransferFees); ok {
		return x.TransferFees
	}
	return nil
}

func (x *BusEvent) GetTransferFeesDiscount() *TransferFeesDiscount {
	if x, ok := x.GetEvent().(*BusEvent_TransferFeesDiscount); ok {
		return x.TransferFeesDiscount
	}
	return nil
}

func (x *BusEvent) GetPartyMarginModeUpdated() *PartyMarginModeUpdated {
	if x, ok := x.GetEvent().(*BusEvent_PartyMarginModeUpdated); ok {
		return x.PartyMarginModeUpdated
	}
	return nil
}

func (x *BusEvent) GetPartyProfileUpdated() *PartyProfileUpdated {
	if x, ok := x.GetEvent().(*BusEvent_PartyProfileUpdated); ok {
		return x.PartyProfileUpdated
	}
	return nil
}

func (x *BusEvent) GetTeamsStatsUpdated() *TeamsStatsUpdated {
	if x, ok := x.GetEvent().(*BusEvent_TeamsStatsUpdated); ok {
		return x.TeamsStatsUpdated
	}
	return nil
}

func (x *BusEvent) GetTimeWeightedNotionalPositionUpdated() *TimeWeightedNotionalPositionUpdated {
	if x, ok := x.GetEvent().(*BusEvent_TimeWeightedNotionalPositionUpdated); ok {
		return x.TimeWeightedNotionalPositionUpdated
	}
	return nil
}

func (x *BusEvent) GetCancelledOrders() *CancelledOrders {
	if x, ok := x.GetEvent().(*BusEvent_CancelledOrders); ok {
		return x.CancelledOrders
	}
	return nil
}

func (x *BusEvent) GetGameScores() *GameScores {
	if x, ok := x.GetEvent().(*BusEvent_GameScores); ok {
		return x.GameScores
	}
	return nil
}

func (x *BusEvent) GetAmm() *AMM {
	if x, ok := x.GetEvent().(*BusEvent_Amm); ok {
		return x.Amm
	}
	return nil
}

func (x *BusEvent) GetVolumeRebateProgramStarted() *VolumeRebateProgramStarted {
	if x, ok := x.GetEvent().(*BusEvent_VolumeRebateProgramStarted); ok {
		return x.VolumeRebateProgramStarted
	}
	return nil
}

func (x *BusEvent) GetVolumeRebateProgramUpdated() *VolumeRebateProgramUpdated {
	if x, ok := x.GetEvent().(*BusEvent_VolumeRebateProgramUpdated); ok {
		return x.VolumeRebateProgramUpdated
	}
	return nil
}

func (x *BusEvent) GetVolumeRebateProgramEnded() *VolumeRebateProgramEnded {
	if x, ok := x.GetEvent().(*BusEvent_VolumeRebateProgramEnded); ok {
		return x.VolumeRebateProgramEnded
	}
	return nil
}

func (x *BusEvent) GetVolumeRebateStatsUpdated() *VolumeRebateStatsUpdated {
	if x, ok := x.GetEvent().(*BusEvent_VolumeRebateStatsUpdated); ok {
		return x.VolumeRebateStatsUpdated
	}
	return nil
}

func (x *BusEvent) GetMarketCommunityTags() *MarketCommunityTags {
	if x, ok := x.GetEvent().(*BusEvent_MarketCommunityTags); ok {
		return x.MarketCommunityTags
	}
	return nil
}

func (x *BusEvent) GetMarket() *MarketEvent {
	if x, ok := x.GetEvent().(*BusEvent_Market); ok {
		return x.Market
	}
	return nil
}

func (x *BusEvent) GetTxErrEvent() *TxErrorEvent {
	if x, ok := x.GetEvent().(*BusEvent_TxErrEvent); ok {
		return x.TxErrEvent
	}
	return nil
}

func (x *BusEvent) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BusEvent) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *BusEvent) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type isBusEvent_Event interface {
	isBusEvent_Event()
}

type BusEvent_TimeUpdate struct {
	// Time update events
	TimeUpdate *TimeUpdate `protobuf:"bytes,101,opt,name=time_update,json=timeUpdate,proto3,oneof"`
}

type BusEvent_LedgerMovements struct {
	// Transfer responses update events
	LedgerMovements *LedgerMovements `protobuf:"bytes,102,opt,name=ledger_movements,json=ledgerMovements,proto3,oneof"`
}

type BusEvent_PositionResolution struct {
	// Position resolution events
	PositionResolution *PositionResolution `protobuf:"bytes,103,opt,name=position_resolution,json=positionResolution,proto3,oneof"`
}

type BusEvent_Order struct {
	// Order events
	Order *vega.Order `protobuf:"bytes,104,opt,name=order,proto3,oneof"`
}

type BusEvent_Account struct {
	// Account events
	Account *vega.Account `protobuf:"bytes,105,opt,name=account,proto3,oneof"`
}

type BusEvent_Party struct {
	// Party events
	Party *vega.Party `protobuf:"bytes,106,opt,name=party,proto3,oneof"`
}

type BusEvent_Trade struct {
	// Trade events
	Trade *vega.Trade `protobuf:"bytes,107,opt,name=trade,proto3,oneof"`
}

type BusEvent_MarginLevels struct {
	// Margin level update events
	MarginLevels *vega.MarginLevels `protobuf:"bytes,108,opt,name=margin_levels,json=marginLevels,proto3,oneof"`
}

type BusEvent_Proposal struct {
	// Proposal events for governance
	Proposal *vega.Proposal `protobuf:"bytes,109,opt,name=proposal,proto3,oneof"`
}

type BusEvent_Vote struct {
	// Vote events for governance
	Vote *vega.Vote `protobuf:"bytes,110,opt,name=vote,proto3,oneof"`
}

type BusEvent_MarketData struct {
	// Market data events
	MarketData *vega.MarketData `protobuf:"bytes,111,opt,name=market_data,json=marketData,proto3,oneof"`
}

type BusEvent_NodeSignature struct {
	// Node signature events
	NodeSignature *v1.NodeSignature `protobuf:"bytes,112,opt,name=node_signature,json=nodeSignature,proto3,oneof"`
}

type BusEvent_LossSocialization struct {
	// Loss socialization events
	LossSocialization *LossSocialization `protobuf:"bytes,113,opt,name=loss_socialization,json=lossSocialization,proto3,oneof"`
}

type BusEvent_SettlePosition struct {
	// Position settlement events
	SettlePosition *SettlePosition `protobuf:"bytes,114,opt,name=settle_position,json=settlePosition,proto3,oneof"`
}

type BusEvent_SettleDistressed struct {
	// Position distressed events
	SettleDistressed *SettleDistressed `protobuf:"bytes,115,opt,name=settle_distressed,json=settleDistressed,proto3,oneof"`
}

type BusEvent_MarketCreated struct {
	// Market created events
	MarketCreated *vega.Market `protobuf:"bytes,116,opt,name=market_created,json=marketCreated,proto3,oneof"`
}

type BusEvent_Asset struct {
	// Asset events
	Asset *vega.Asset `protobuf:"bytes,117,opt,name=asset,proto3,oneof"`
}

type BusEvent_MarketTick struct {
	// Market tick events
	MarketTick *MarketTick `protobuf:"bytes,118,opt,name=market_tick,json=marketTick,proto3,oneof"`
}

type BusEvent_Withdrawal struct {
	// Withdrawal events
	Withdrawal *vega.Withdrawal `protobuf:"bytes,119,opt,name=withdrawal,proto3,oneof"`
}

type BusEvent_Deposit struct {
	// Deposit events
	Deposit *vega.Deposit `protobuf:"bytes,120,opt,name=deposit,proto3,oneof"`
}

type BusEvent_Auction struct {
	// Auction events
	Auction *AuctionEvent `protobuf:"bytes,121,opt,name=auction,proto3,oneof"`
}

type BusEvent_RiskFactor struct {
	// Risk factor events
	RiskFactor *vega.RiskFactor `protobuf:"bytes,122,opt,name=risk_factor,json=riskFactor,proto3,oneof"`
}

type BusEvent_NetworkParameter struct {
	// Network parameter events
	NetworkParameter *vega.NetworkParameter `protobuf:"bytes,123,opt,name=network_parameter,json=networkParameter,proto3,oneof"`
}

type BusEvent_LiquidityProvision struct {
	// LiquidityProvision  events
	LiquidityProvision *vega.LiquidityProvision `protobuf:"bytes,124,opt,name=liquidity_provision,json=liquidityProvision,proto3,oneof"`
}

type BusEvent_MarketUpdated struct {
	// Market created events
	MarketUpdated *vega.Market `protobuf:"bytes,125,opt,name=market_updated,json=marketUpdated,proto3,oneof"`
}

type BusEvent_OracleSpec struct {
	// OracleSpec events
	OracleSpec *vega.OracleSpec `protobuf:"bytes,126,opt,name=oracle_spec,json=oracleSpec,proto3,oneof"`
}

type BusEvent_OracleData struct {
	// OracleData events
	OracleData *vega.OracleData `protobuf:"bytes,127,opt,name=oracle_data,json=oracleData,proto3,oneof"`
}

type BusEvent_DelegationBalance struct {
	// Delegation balance events
	DelegationBalance *DelegationBalanceEvent `protobuf:"bytes,129,opt,name=delegation_balance,json=delegationBalance,proto3,oneof"`
}

type BusEvent_ValidatorScore struct {
	// Validator score calculated
	ValidatorScore *ValidatorScoreEvent `protobuf:"bytes,130,opt,name=validator_score,json=validatorScore,proto3,oneof"`
}

type BusEvent_EpochEvent struct {
	// Epoch update events
	EpochEvent *EpochEvent `protobuf:"bytes,131,opt,name=epoch_event,json=epochEvent,proto3,oneof"`
}

type BusEvent_ValidatorUpdate struct {
	// Validator update events
	ValidatorUpdate *ValidatorUpdate `protobuf:"bytes,132,opt,name=validator_update,json=validatorUpdate,proto3,oneof"`
}

type BusEvent_StakeLinking struct {
	// Staking event
	StakeLinking *StakeLinking `protobuf:"bytes,133,opt,name=stake_linking,json=stakeLinking,proto3,oneof"`
}

type BusEvent_RewardPayout struct {
	// Reward payout event
	RewardPayout *RewardPayoutEvent `protobuf:"bytes,134,opt,name=reward_payout,json=rewardPayout,proto3,oneof"`
}

type BusEvent_Checkpoint struct {
	// Checkpoint was created
	Checkpoint *CheckpointEvent `protobuf:"bytes,135,opt,name=checkpoint,proto3,oneof"`
}

type BusEvent_KeyRotation struct {
	// Key rotation took place
	KeyRotation *KeyRotation `protobuf:"bytes,136,opt,name=key_rotation,json=keyRotation,proto3,oneof"`
}

type BusEvent_StateVar struct {
	// State variable consensus state transition update
	StateVar *StateVar `protobuf:"bytes,137,opt,name=state_var,json=stateVar,proto3,oneof"`
}

type BusEvent_NetworkLimits struct {
	// Network limits events
	NetworkLimits *vega.NetworkLimits `protobuf:"bytes,138,opt,name=network_limits,json=networkLimits,proto3,oneof"`
}

type BusEvent_Transfer struct {
	// Transfer event
	Transfer *Transfer `protobuf:"bytes,139,opt,name=transfer,proto3,oneof"`
}

type BusEvent_RankingEvent struct {
	// Ranking event
	RankingEvent *ValidatorRankingEvent `protobuf:"bytes,140,opt,name=ranking_event,json=rankingEvent,proto3,oneof"`
}

type BusEvent_Erc20MultisigSignerEvent struct {
	// ERC20 multi sig signer event
	Erc20MultisigSignerEvent *ERC20MultiSigSignerEvent `protobuf:"bytes,141,opt,name=erc20_multisig_signer_event,json=erc20MultisigSignerEvent,proto3,oneof"`
}

type BusEvent_Erc20MultisigSetThresholdEvent struct {
	// ERC20 multi sig set threshold event
	Erc20MultisigSetThresholdEvent *ERC20MultiSigThresholdSetEvent `protobuf:"bytes,142,opt,name=erc20_multisig_set_threshold_event,json=erc20MultisigSetThresholdEvent,proto3,oneof"`
}

type BusEvent_Erc20MultisigSignerAdded struct {
	// ERC20 multi sig signer added
	Erc20MultisigSignerAdded *ERC20MultiSigSignerAdded `protobuf:"bytes,143,opt,name=erc20_multisig_signer_added,json=erc20MultisigSignerAdded,proto3,oneof"`
}

type BusEvent_Erc20MultisigSignerRemoved struct {
	// ERC20 multi sig signer removed
	Erc20MultisigSignerRemoved *ERC20MultiSigSignerRemoved `protobuf:"bytes,144,opt,name=erc20_multisig_signer_removed,json=erc20MultisigSignerRemoved,proto3,oneof"`
}

type BusEvent_PositionStateEvent struct {
	// Position status for a party in a market
	PositionStateEvent *PositionStateEvent `protobuf:"bytes,145,opt,name=position_state_event,json=positionStateEvent,proto3,oneof"`
}

type BusEvent_EthereumKeyRotation struct {
	// Ethereum key rotation took place
	EthereumKeyRotation *EthereumKeyRotation `protobuf:"bytes,146,opt,name=ethereum_key_rotation,json=ethereumKeyRotation,proto3,oneof"`
}

type BusEvent_ProtocolUpgradeEvent struct {
	// Protocol upgrade proposal updates
	ProtocolUpgradeEvent *ProtocolUpgradeEvent `protobuf:"bytes,147,opt,name=protocol_upgrade_event,json=protocolUpgradeEvent,proto3,oneof"`
}

type BusEvent_BeginBlock struct {
	// Core is starting to process a new block
	BeginBlock *BeginBlock `protobuf:"bytes,148,opt,name=begin_block,json=beginBlock,proto3,oneof"`
}

type BusEvent_EndBlock struct {
	// Core finished processing a block
	EndBlock *EndBlock `protobuf:"bytes,149,opt,name=end_block,json=endBlock,proto3,oneof"`
}

type BusEvent_ProtocolUpgradeStarted struct {
	// Core is starting a protocol upgrade
	ProtocolUpgradeStarted *ProtocolUpgradeStarted `protobuf:"bytes,150,opt,name=protocol_upgrade_started,json=protocolUpgradeStarted,proto3,oneof"`
}

type BusEvent_SettleMarket struct {
	// Settle market event for data-node to update positions for settled markets
	SettleMarket *SettleMarket `protobuf:"bytes,151,opt,name=settle_market,json=settleMarket,proto3,oneof"`
}

type BusEvent_TransactionResult struct {
	// Result of a transaction processed by the network
	TransactionResult *TransactionResult `protobuf:"bytes,152,opt,name=transaction_result,json=transactionResult,proto3,oneof"`
}

type BusEvent_CoreSnapshotEvent struct {
	// Core snapshot has been taken at the end of the block
	CoreSnapshotEvent *CoreSnapshotData `protobuf:"bytes,153,opt,name=core_snapshot_event,json=coreSnapshotEvent,proto3,oneof"`
}

type BusEvent_ProtocolUpgradeDataNodeReady struct {
	// Core snapshot has been taken at the end of the block
	ProtocolUpgradeDataNodeReady *ProtocolUpgradeDataNodeReady `protobuf:"bytes,154,opt,name=protocol_upgrade_data_node_ready,json=protocolUpgradeDataNodeReady,proto3,oneof"`
}

type BusEvent_DistressedOrders struct {
	// Parties that had their orders closed because they were distressed
	DistressedOrders *DistressedOrders `protobuf:"bytes,155,opt,name=distressed_orders,json=distressedOrders,proto3,oneof"`
}

type BusEvent_ExpiredOrders struct {
	// Orders that expired for a given market
	ExpiredOrders *ExpiredOrders `protobuf:"bytes,156,opt,name=expired_orders,json=expiredOrders,proto3,oneof"`
}

type BusEvent_DistressedPositions struct {
	// Open positions on the market that are/were distressed
	DistressedPositions *DistressedPositions `protobuf:"bytes,157,opt,name=distressed_positions,json=distressedPositions,proto3,oneof"`
}

type BusEvent_StopOrder struct {
	// A stop order event
	StopOrder *StopOrderEvent `protobuf:"bytes,158,opt,name=stop_order,json=stopOrder,proto3,oneof"`
}

type BusEvent_FundingPeriod struct {
	// Start or end of a funding period.
	FundingPeriod *FundingPeriod `protobuf:"bytes,159,opt,name=funding_period,json=fundingPeriod,proto3,oneof"`
}

type BusEvent_FundingPeriodDataPoint struct {
	// Data point within a funding period.
	FundingPeriodDataPoint *FundingPeriodDataPoint `protobuf:"bytes,160,opt,name=funding_period_data_point,json=fundingPeriodDataPoint,proto3,oneof"`
}

type BusEvent_TeamCreated struct {
	// Event notifying of the creation of a team.m
	TeamCreated *TeamCreated `protobuf:"bytes,161,opt,name=team_created,json=teamCreated,proto3,oneof"`
}

type BusEvent_TeamUpdated struct {
	// Event notifying of an update to a team.
	TeamUpdated *TeamUpdated `protobuf:"bytes,162,opt,name=team_updated,json=teamUpdated,proto3,oneof"`
}

type BusEvent_RefereeSwitchedTeam struct {
	// Event notifying that a referee switched teams.
	RefereeSwitchedTeam *RefereeSwitchedTeam `protobuf:"bytes,163,opt,name=referee_switched_team,json=refereeSwitchedTeam,proto3,oneof"`
}

type BusEvent_RefereeJoinedTeam struct {
	// Event notifying that a referee joined a team.
	RefereeJoinedTeam *RefereeJoinedTeam `protobuf:"bytes,164,opt,name=referee_joined_team,json=refereeJoinedTeam,proto3,oneof"`
}

type BusEvent_ReferralProgramStarted struct {
	// Event notifying that a referral program has started.
	ReferralProgramStarted *ReferralProgramStarted `protobuf:"bytes,165,opt,name=referral_program_started,json=referralProgramStarted,proto3,oneof"`
}

type BusEvent_ReferralProgramUpdated struct {
	// Event notifying that a referral program has been updated.
	ReferralProgramUpdated *ReferralProgramUpdated `protobuf:"bytes,166,opt,name=referral_program_updated,json=referralProgramUpdated,proto3,oneof"`
}

type BusEvent_ReferralProgramEnded struct {
	// Event notifying that a referral program has ended.
	ReferralProgramEnded *ReferralProgramEnded `protobuf:"bytes,167,opt,name=referral_program_ended,json=referralProgramEnded,proto3,oneof"`
}

type BusEvent_ReferralSetCreated struct {
	// Event notifying a referral set has been created.
	ReferralSetCreated *ReferralSetCreated `protobuf:"bytes,168,opt,name=referral_set_created,json=referralSetCreated,proto3,oneof"`
}

type BusEvent_RefereeJoinedReferralSet struct {
	// Event notifying a referee has joined a referral set.
	RefereeJoinedReferralSet *RefereeJoinedReferralSet `protobuf:"bytes,169,opt,name=referee_joined_referral_set,json=refereeJoinedReferralSet,proto3,oneof"`
}

type BusEvent_PartyActivityStreak struct {
	// Event notifying of an update to a party's activity streak
	PartyActivityStreak *PartyActivityStreak `protobuf:"bytes,170,opt,name=party_activity_streak,json=partyActivityStreak,proto3,oneof"`
}

type BusEvent_VolumeDiscountProgramStarted struct {
	// Event notifying that a volume discount program has started.
	VolumeDiscountProgramStarted *VolumeDiscountProgramStarted `protobuf:"bytes,171,opt,name=volume_discount_program_started,json=volumeDiscountProgramStarted,proto3,oneof"`
}

type BusEvent_VolumeDiscountProgramUpdated struct {
	// Event notifying that a volume discount program has been updated.
	VolumeDiscountProgramUpdated *VolumeDiscountProgramUpdated `protobuf:"bytes,172,opt,name=volume_discount_program_updated,json=volumeDiscountProgramUpdated,proto3,oneof"`
}

type BusEvent_VolumeDiscountProgramEnded struct {
	// Event notifying that a volume discount program has ended.
	VolumeDiscountProgramEnded *VolumeDiscountProgramEnded `protobuf:"bytes,173,opt,name=volume_discount_program_ended,json=volumeDiscountProgramEnded,proto3,oneof"`
}

type BusEvent_ReferralSetStatsUpdated struct {
	// Event notifying of an update to a referral set's statistics.
	ReferralSetStatsUpdated *ReferralSetStatsUpdated `protobuf:"bytes,174,opt,name=referral_set_stats_updated,json=referralSetStatsUpdated,proto3,oneof"`
}

type BusEvent_VestingStatsUpdated struct {
	// Event notifying of an update to the vesting statistics.
	VestingStatsUpdated *VestingStatsUpdated `protobuf:"bytes,175,opt,name=vesting_stats_updated,json=vestingStatsUpdated,proto3,oneof"`
}

type BusEvent_VolumeDiscountStatsUpdated struct {
	// Event notifying of an update to the volume discount statistics.
	VolumeDiscountStatsUpdated *VolumeDiscountStatsUpdated `protobuf:"bytes,176,opt,name=volume_discount_stats_updated,json=volumeDiscountStatsUpdated,proto3,oneof"`
}

type BusEvent_FeesStats struct {
	// Event notifying of an update the fees stats for a market.
	FeesStats *FeesStats `protobuf:"bytes,177,opt,name=fees_stats,json=feesStats,proto3,oneof"`
}

type BusEvent_FundingPayments struct {
	// Event notifying of funding payments at the end of a funding period.
	FundingPayments *FundingPayments `protobuf:"bytes,178,opt,name=funding_payments,json=fundingPayments,proto3,oneof"`
}

type BusEvent_PaidLiquidityFeesStats struct {
	// Event notifying of an update to the liqudity fees stats for a market.
	PaidLiquidityFeesStats *PaidLiquidityFeesStats `protobuf:"bytes,179,opt,name=paid_liquidity_fees_stats,json=paidLiquidityFeesStats,proto3,oneof"`
}

type BusEvent_VestingBalancesSummary struct {
	// Event notifying of an update to the vesting and locked balances.
	VestingBalancesSummary *VestingBalancesSummary `protobuf:"bytes,180,opt,name=vesting_balances_summary,json=vestingBalancesSummary,proto3,oneof"`
}

type BusEvent_TransferFees struct {
	// Event notifying of fees related to a transfer being paid.
	TransferFees *TransferFees `protobuf:"bytes,181,opt,name=transfer_fees,json=transferFees,proto3,oneof"`
}

type BusEvent_TransferFeesDiscount struct {
	// Event notifying of a party's available discounts for transfer fees, per asset.
	TransferFeesDiscount *TransferFeesDiscount `protobuf:"bytes,182,opt,name=transfer_fees_discount,json=transferFeesDiscount,proto3,oneof"`
}

type BusEvent_PartyMarginModeUpdated struct {
	// Event notifying of a party's margin mode update on a market.
	PartyMarginModeUpdated *PartyMarginModeUpdated `protobuf:"bytes,183,opt,name=party_margin_mode_updated,json=partyMarginModeUpdated,proto3,oneof"`
}

type BusEvent_PartyProfileUpdated struct {
	// Event notifying of a party's profile update.
	PartyProfileUpdated *PartyProfileUpdated `protobuf:"bytes,184,opt,name=party_profile_updated,json=partyProfileUpdated,proto3,oneof"`
}

type BusEvent_TeamsStatsUpdated struct {
	// Event notifying of an update of teams' statistics.
	TeamsStatsUpdated *TeamsStatsUpdated `protobuf:"bytes,185,opt,name=teams_stats_updated,json=teamsStatsUpdated,proto3,oneof"`
}

type BusEvent_TimeWeightedNotionalPositionUpdated struct {
	// Event notifying an update of the time weighted notional position for a party in an asset
	TimeWeightedNotionalPositionUpdated *TimeWeightedNotionalPositionUpdated `protobuf:"bytes,186,opt,name=time_weighted_notional_position_updated,json=timeWeightedNotionalPositionUpdated,proto3,oneof"`
}

type BusEvent_CancelledOrders struct {
	// Event notifying of multiple orders being cancelled for a given party, on a given market.
	CancelledOrders *CancelledOrders `protobuf:"bytes,187,opt,name=cancelled_orders,json=cancelledOrders,proto3,oneof"`
}

type BusEvent_GameScores struct {
	// Event notifying on near realtime game scores for parties and teams.
	GameScores *GameScores `protobuf:"bytes,188,opt,name=game_scores,json=gameScores,proto3,oneof"`
}

type BusEvent_Amm struct {
	// Event notifying of AMM updates.
	Amm *AMM `protobuf:"bytes,189,opt,name=amm,proto3,oneof"`
}

type BusEvent_VolumeRebateProgramStarted struct {
	// Event notifying that a volume rebate program has started.
	VolumeRebateProgramStarted *VolumeRebateProgramStarted `protobuf:"bytes,190,opt,name=volume_rebate_program_started,json=volumeRebateProgramStarted,proto3,oneof"`
}

type BusEvent_VolumeRebateProgramUpdated struct {
	// Event notifying that a volume rebate program has been updated.
	VolumeRebateProgramUpdated *VolumeRebateProgramUpdated `protobuf:"bytes,191,opt,name=volume_rebate_program_updated,json=volumeRebateProgramUpdated,proto3,oneof"`
}

type BusEvent_VolumeRebateProgramEnded struct {
	// Event notifying that a volume rebate program has ended.
	VolumeRebateProgramEnded *VolumeRebateProgramEnded `protobuf:"bytes,192,opt,name=volume_rebate_program_ended,json=volumeRebateProgramEnded,proto3,oneof"`
}

type BusEvent_VolumeRebateStatsUpdated struct {
	// Event notifying of an update to the volume rebate statistics.
	VolumeRebateStatsUpdated *VolumeRebateStatsUpdated `protobuf:"bytes,193,opt,name=volume_rebate_stats_updated,json=volumeRebateStatsUpdated,proto3,oneof"`
}

type BusEvent_MarketCommunityTags struct {
	// Event notifying of a Market community tags update.
	MarketCommunityTags *MarketCommunityTags `protobuf:"bytes,194,opt,name=market_community_tags,json=marketCommunityTags,proto3,oneof"`
}

type BusEvent_Market struct {
	// Market tick events
	Market *MarketEvent `protobuf:"bytes,1001,opt,name=market,proto3,oneof"`
}

type BusEvent_TxErrEvent struct {
	// Transaction error events, not included in the ALL event type
	TxErrEvent *TxErrorEvent `protobuf:"bytes,2001,opt,name=tx_err_event,json=txErrEvent,proto3,oneof"`
}

func (*BusEvent_TimeUpdate) isBusEvent_Event() {}

func (*BusEvent_LedgerMovements) isBusEvent_Event() {}

func (*BusEvent_PositionResolution) isBusEvent_Event() {}

func (*BusEvent_Order) isBusEvent_Event() {}

func (*BusEvent_Account) isBusEvent_Event() {}

func (*BusEvent_Party) isBusEvent_Event() {}

func (*BusEvent_Trade) isBusEvent_Event() {}

func (*BusEvent_MarginLevels) isBusEvent_Event() {}

func (*BusEvent_Proposal) isBusEvent_Event() {}

func (*BusEvent_Vote) isBusEvent_Event() {}

func (*BusEvent_MarketData) isBusEvent_Event() {}

func (*BusEvent_NodeSignature) isBusEvent_Event() {}

func (*BusEvent_LossSocialization) isBusEvent_Event() {}

func (*BusEvent_SettlePosition) isBusEvent_Event() {}

func (*BusEvent_SettleDistressed) isBusEvent_Event() {}

func (*BusEvent_MarketCreated) isBusEvent_Event() {}

func (*BusEvent_Asset) isBusEvent_Event() {}

func (*BusEvent_MarketTick) isBusEvent_Event() {}

func (*BusEvent_Withdrawal) isBusEvent_Event() {}

func (*BusEvent_Deposit) isBusEvent_Event() {}

func (*BusEvent_Auction) isBusEvent_Event() {}

func (*BusEvent_RiskFactor) isBusEvent_Event() {}

func (*BusEvent_NetworkParameter) isBusEvent_Event() {}

func (*BusEvent_LiquidityProvision) isBusEvent_Event() {}

func (*BusEvent_MarketUpdated) isBusEvent_Event() {}

func (*BusEvent_OracleSpec) isBusEvent_Event() {}

func (*BusEvent_OracleData) isBusEvent_Event() {}

func (*BusEvent_DelegationBalance) isBusEvent_Event() {}

func (*BusEvent_ValidatorScore) isBusEvent_Event() {}

func (*BusEvent_EpochEvent) isBusEvent_Event() {}

func (*BusEvent_ValidatorUpdate) isBusEvent_Event() {}

func (*BusEvent_StakeLinking) isBusEvent_Event() {}

func (*BusEvent_RewardPayout) isBusEvent_Event() {}

func (*BusEvent_Checkpoint) isBusEvent_Event() {}

func (*BusEvent_KeyRotation) isBusEvent_Event() {}

func (*BusEvent_StateVar) isBusEvent_Event() {}

func (*BusEvent_NetworkLimits) isBusEvent_Event() {}

func (*BusEvent_Transfer) isBusEvent_Event() {}

func (*BusEvent_RankingEvent) isBusEvent_Event() {}

func (*BusEvent_Erc20MultisigSignerEvent) isBusEvent_Event() {}

func (*BusEvent_Erc20MultisigSetThresholdEvent) isBusEvent_Event() {}

func (*BusEvent_Erc20MultisigSignerAdded) isBusEvent_Event() {}

func (*BusEvent_Erc20MultisigSignerRemoved) isBusEvent_Event() {}

func (*BusEvent_PositionStateEvent) isBusEvent_Event() {}

func (*BusEvent_EthereumKeyRotation) isBusEvent_Event() {}

func (*BusEvent_ProtocolUpgradeEvent) isBusEvent_Event() {}

func (*BusEvent_BeginBlock) isBusEvent_Event() {}

func (*BusEvent_EndBlock) isBusEvent_Event() {}

func (*BusEvent_ProtocolUpgradeStarted) isBusEvent_Event() {}

func (*BusEvent_SettleMarket) isBusEvent_Event() {}

func (*BusEvent_TransactionResult) isBusEvent_Event() {}

func (*BusEvent_CoreSnapshotEvent) isBusEvent_Event() {}

func (*BusEvent_ProtocolUpgradeDataNodeReady) isBusEvent_Event() {}

func (*BusEvent_DistressedOrders) isBusEvent_Event() {}

func (*BusEvent_ExpiredOrders) isBusEvent_Event() {}

func (*BusEvent_DistressedPositions) isBusEvent_Event() {}

func (*BusEvent_StopOrder) isBusEvent_Event() {}

func (*BusEvent_FundingPeriod) isBusEvent_Event() {}

func (*BusEvent_FundingPeriodDataPoint) isBusEvent_Event() {}

func (*BusEvent_TeamCreated) isBusEvent_Event() {}

func (*BusEvent_TeamUpdated) isBusEvent_Event() {}

func (*BusEvent_RefereeSwitchedTeam) isBusEvent_Event() {}

func (*BusEvent_RefereeJoinedTeam) isBusEvent_Event() {}

func (*BusEvent_ReferralProgramStarted) isBusEvent_Event() {}

func (*BusEvent_ReferralProgramUpdated) isBusEvent_Event() {}

func (*BusEvent_ReferralProgramEnded) isBusEvent_Event() {}

func (*BusEvent_ReferralSetCreated) isBusEvent_Event() {}

func (*BusEvent_RefereeJoinedReferralSet) isBusEvent_Event() {}

func (*BusEvent_PartyActivityStreak) isBusEvent_Event() {}

func (*BusEvent_VolumeDiscountProgramStarted) isBusEvent_Event() {}

func (*BusEvent_VolumeDiscountProgramUpdated) isBusEvent_Event() {}

func (*BusEvent_VolumeDiscountProgramEnded) isBusEvent_Event() {}

func (*BusEvent_ReferralSetStatsUpdated) isBusEvent_Event() {}

func (*BusEvent_VestingStatsUpdated) isBusEvent_Event() {}

func (*BusEvent_VolumeDiscountStatsUpdated) isBusEvent_Event() {}

func (*BusEvent_FeesStats) isBusEvent_Event() {}

func (*BusEvent_FundingPayments) isBusEvent_Event() {}

func (*BusEvent_PaidLiquidityFeesStats) isBusEvent_Event() {}

func (*BusEvent_VestingBalancesSummary) isBusEvent_Event() {}

func (*BusEvent_TransferFees) isBusEvent_Event() {}

func (*BusEvent_TransferFeesDiscount) isBusEvent_Event() {}

func (*BusEvent_PartyMarginModeUpdated) isBusEvent_Event() {}

func (*BusEvent_PartyProfileUpdated) isBusEvent_Event() {}

func (*BusEvent_TeamsStatsUpdated) isBusEvent_Event() {}

func (*BusEvent_TimeWeightedNotionalPositionUpdated) isBusEvent_Event() {}

func (*BusEvent_CancelledOrders) isBusEvent_Event() {}

func (*BusEvent_GameScores) isBusEvent_Event() {}

func (*BusEvent_Amm) isBusEvent_Event() {}

func (*BusEvent_VolumeRebateProgramStarted) isBusEvent_Event() {}

func (*BusEvent_VolumeRebateProgramUpdated) isBusEvent_Event() {}

func (*BusEvent_VolumeRebateProgramEnded) isBusEvent_Event() {}

func (*BusEvent_VolumeRebateStatsUpdated) isBusEvent_Event() {}

func (*BusEvent_MarketCommunityTags) isBusEvent_Event() {}

func (*BusEvent_Market) isBusEvent_Event() {}

func (*BusEvent_TxErrEvent) isBusEvent_Event() {}

// Stats of all parties eligible for volume rebate.
type VolumeRebateStatsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch at which the volume rebate statistics are updated.
	AtEpoch uint64 `protobuf:"varint,1,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
	// All parties' stats.
	Stats []*PartyVolumeRebateStats `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *VolumeRebateStatsUpdated) Reset() {
	*x = VolumeRebateStatsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRebateStatsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRebateStatsUpdated) ProtoMessage() {}

func (x *VolumeRebateStatsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRebateStatsUpdated.ProtoReflect.Descriptor instead.
func (*VolumeRebateStatsUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{93}
}

func (x *VolumeRebateStatsUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

func (x *VolumeRebateStatsUpdated) GetStats() []*PartyVolumeRebateStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Volume rebate stats for a given party.
type PartyVolumeRebateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party ID.
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Rebate factor applied to fees.
	AdditionalRebate string `protobuf:"bytes,2,opt,name=additional_rebate,json=additionalRebate,proto3" json:"additional_rebate,omitempty"`
	// The party's maker volume fraction.
	MakerVolumeFraction string `protobuf:"bytes,3,opt,name=maker_volume_fraction,json=makerVolumeFraction,proto3" json:"maker_volume_fraction,omitempty"`
	// The party's maker fee received over the window across all markets and assets, expressed in quantum.
	MakerFeesReceived string `protobuf:"bytes,4,opt,name=maker_fees_received,json=makerFeesReceived,proto3" json:"maker_fees_received,omitempty"`
}

func (x *PartyVolumeRebateStats) Reset() {
	*x = PartyVolumeRebateStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyVolumeRebateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyVolumeRebateStats) ProtoMessage() {}

func (x *PartyVolumeRebateStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyVolumeRebateStats.ProtoReflect.Descriptor instead.
func (*PartyVolumeRebateStats) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{94}
}

func (x *PartyVolumeRebateStats) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyVolumeRebateStats) GetAdditionalRebate() string {
	if x != nil {
		return x.AdditionalRebate
	}
	return ""
}

func (x *PartyVolumeRebateStats) GetMakerVolumeFraction() string {
	if x != nil {
		return x.MakerVolumeFraction
	}
	return ""
}

func (x *PartyVolumeRebateStats) GetMakerFeesReceived() string {
	if x != nil {
		return x.MakerFeesReceived
	}
	return ""
}

type VolumeRebateProgramStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume rebate program that has started.
	Program *vega.VolumeRebateProgram `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// Time in Unix nanoseconds when the volume discount program started.
	StartedAt int64 `protobuf:"varint,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Epoch at which the volume discount program started.
	AtEpoch uint64 `protobuf:"varint,3,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *VolumeRebateProgramStarted) Reset() {
	*x = VolumeRebateProgramStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRebateProgramStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRebateProgramStarted) ProtoMessage() {}

func (x *VolumeRebateProgramStarted) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRebateProgramStarted.ProtoReflect.Descriptor instead.
func (*VolumeRebateProgramStarted) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{95}
}

func (x *VolumeRebateProgramStarted) GetProgram() *vega.VolumeRebateProgram {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *VolumeRebateProgramStarted) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *VolumeRebateProgramStarted) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type VolumeRebateProgramUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated volume rebate program.
	Program *vega.VolumeRebateProgram `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	// Time in Unix nanoseconds when the volume discount program was updated.
	UpdatedAt int64 `protobuf:"varint,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Epoch at which the volume discount program was updated.
	AtEpoch uint64 `protobuf:"varint,3,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *VolumeRebateProgramUpdated) Reset() {
	*x = VolumeRebateProgramUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRebateProgramUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRebateProgramUpdated) ProtoMessage() {}

func (x *VolumeRebateProgramUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRebateProgramUpdated.ProtoReflect.Descriptor instead.
func (*VolumeRebateProgramUpdated) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{96}
}

func (x *VolumeRebateProgramUpdated) GetProgram() *vega.VolumeRebateProgram {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *VolumeRebateProgramUpdated) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *VolumeRebateProgramUpdated) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

type VolumeRebateProgramEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Program update version.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Unique ID of the volume discount program.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Time in Unix nanoseconds when the referral program ended.
	EndedAt int64 `protobuf:"varint,3,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	// Epoch at which the referral program ended.
	AtEpoch uint64 `protobuf:"varint,4,opt,name=at_epoch,json=atEpoch,proto3" json:"at_epoch,omitempty"`
}

func (x *VolumeRebateProgramEnded) Reset() {
	*x = VolumeRebateProgramEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRebateProgramEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRebateProgramEnded) ProtoMessage() {}

func (x *VolumeRebateProgramEnded) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRebateProgramEnded.ProtoReflect.Descriptor instead.
func (*VolumeRebateProgramEnded) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{97}
}

func (x *VolumeRebateProgramEnded) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *VolumeRebateProgramEnded) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VolumeRebateProgramEnded) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *VolumeRebateProgramEnded) GetAtEpoch() uint64 {
	if x != nil {
		return x.AtEpoch
	}
	return 0
}

// Liquidity parameters that define the range and shape of the AMM's curve.
type AMM_ConcentratedLiquidityParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base price bound configuration for the AMM.
	Base string `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// Upper price bound configuration for the AMM. If unset, the AMM will never hold a short position.
	LowerBound *string `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound,proto3,oneof" json:"lower_bound,omitempty"`
	// Lower price bound configuration for the AMM. If unset, the AMM will never hold a long position.
	UpperBound *string `protobuf:"bytes,3,opt,name=upper_bound,json=upperBound,proto3,oneof" json:"upper_bound,omitempty"`
	// Leverage at upper bounds.
	LeverageAtUpperBound *string `protobuf:"bytes,4,opt,name=leverage_at_upper_bound,json=leverageAtUpperBound,proto3,oneof" json:"leverage_at_upper_bound,omitempty"`
	// Leverage at lower bounds.
	LeverageAtLowerBound *string `protobuf:"bytes,5,opt,name=leverage_at_lower_bound,json=leverageAtLowerBound,proto3,oneof" json:"leverage_at_lower_bound,omitempty"`
}

func (x *AMM_ConcentratedLiquidityParameters) Reset() {
	*x = AMM_ConcentratedLiquidityParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMM_ConcentratedLiquidityParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMM_ConcentratedLiquidityParameters) ProtoMessage() {}

func (x *AMM_ConcentratedLiquidityParameters) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMM_ConcentratedLiquidityParameters.ProtoReflect.Descriptor instead.
func (*AMM_ConcentratedLiquidityParameters) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AMM_ConcentratedLiquidityParameters) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *AMM_ConcentratedLiquidityParameters) GetLowerBound() string {
	if x != nil && x.LowerBound != nil {
		return *x.LowerBound
	}
	return ""
}

func (x *AMM_ConcentratedLiquidityParameters) GetUpperBound() string {
	if x != nil && x.UpperBound != nil {
		return *x.UpperBound
	}
	return ""
}

func (x *AMM_ConcentratedLiquidityParameters) GetLeverageAtUpperBound() string {
	if x != nil && x.LeverageAtUpperBound != nil {
		return *x.LeverageAtUpperBound
	}
	return ""
}

func (x *AMM_ConcentratedLiquidityParameters) GetLeverageAtLowerBound() string {
	if x != nil && x.LeverageAtLowerBound != nil {
		return *x.LeverageAtLowerBound
	}
	return ""
}

type AMM_Curve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Virtual liquidity for the given AMM curve.
	VirtualLiquidity string `protobuf:"bytes,1,opt,name=virtual_liquidity,json=virtualLiquidity,proto3" json:"virtual_liquidity,omitempty"`
	// Maximum tradable volume on the AMM curve.
	TheoreticalPosition string `protobuf:"bytes,2,opt,name=theoretical_position,json=theoreticalPosition,proto3" json:"theoretical_position,omitempty"`
}

func (x *AMM_Curve) Reset() {
	*x = AMM_Curve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMM_Curve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMM_Curve) ProtoMessage() {}

func (x *AMM_Curve) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMM_Curve.ProtoReflect.Descriptor instead.
func (*AMM_Curve) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{2, 1}
}

func (x *AMM_Curve) GetVirtualLiquidity() string {
	if x != nil {
		return x.VirtualLiquidity
	}
	return ""
}

func (x *AMM_Curve) GetTheoreticalPosition() string {
	if x != nil {
		return x.TheoreticalPosition
	}
	return ""
}

// A mapping of a key to a list of errors.
type TransactionResult_KeyErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The errors mapped to this key.
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *TransactionResult_KeyErrors) Reset() {
	*x = TransactionResult_KeyErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResult_KeyErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResult_KeyErrors) ProtoMessage() {}

func (x *TransactionResult_KeyErrors) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResult_KeyErrors.ProtoReflect.Descriptor instead.
func (*TransactionResult_KeyErrors) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{40, 0}
}

func (x *TransactionResult_KeyErrors) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TransactionResult_KeyErrors) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type TransactionResult_SuccessDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransactionResult_SuccessDetails) Reset() {
	*x = TransactionResult_SuccessDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResult_SuccessDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResult_SuccessDetails) ProtoMessage() {}

func (x *TransactionResult_SuccessDetails) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResult_SuccessDetails.ProtoReflect.Descriptor instead.
func (*TransactionResult_SuccessDetails) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{40, 1}
}

type TransactionResult_FailureDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message explaining the reason for the transaction failing processing
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Map of the detailed errors, if any.
	Errors []*TransactionResult_KeyErrors `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *TransactionResult_FailureDetails) Reset() {
	*x = TransactionResult_FailureDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_events_v1_events_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResult_FailureDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResult_FailureDetails) ProtoMessage() {}

func (x *TransactionResult_FailureDetails) ProtoReflect() protoreflect.Message {
	mi := &file_vega_events_v1_events_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResult_FailureDetails.ProtoReflect.Descriptor instead.
func (*TransactionResult_FailureDetails) Descriptor() ([]byte, []int) {
	return file_vega_events_v1_events_proto_rawDescGZIP(), []int{40, 2}
}

func (x *TransactionResult_FailureDetails) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TransactionResult_FailureDetails) GetErrors() []*TransactionResult_KeyErrors {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_vega_events_v1_events_proto protoreflect.FileDescriptor

var file_vega_events_v1_events_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76, 0x65, 0x67, 0x61, 0x2f,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0xce, 0x01, 0x0a, 0x23, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xaf, 0x0b, 0x0a, 0x03, 0x41, 0x4d, 0x4d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x6d, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6d, 0x6d, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4d, 0x4d, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4d, 0x4d, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4d, 0x4d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4d, 0x4d,
	0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4d,
	0x4d, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x1a, 0xd1, 0x02, 0x0a, 0x1f, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17,
	0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x14, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x65, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x14, 0x6c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74,
	0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x67, 0x0a, 0x05,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x05, 0x22, 0xbe, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x4f, 0x57, 0x4e, 0x53, 0x5f, 0x41, 0x4d, 0x4d, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x07, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x75,
	0x72, 0x76, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x75,
	0x72, 0x76, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x5b, 0x0a, 0x17, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x59,
	0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x12, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x45, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x77, 0x0a, 0x1a, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xc7, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x69, 0x0a, 0x13, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x75, 0x6d, 0x6d, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x6e,
	0x75, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x75, 0x6d, 0x6d, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75,
	0x6d, 0x6d, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xd0, 0x05, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x51, 0x0a, 0x16, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x66,
	0x0a, 0x1a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x18, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x17, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12,
	0x53, 0x0a, 0x17, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x15, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6b, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x14,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x12,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x5b, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73,
	0x50, 0x61, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4a,
	0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0x7e, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x6f, 0x0a, 0x12, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x73, 0x50, 0x61, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x75, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x13, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x55, 0x0a, 0x27, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x4b,
	0x0a, 0x22, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x0d, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x15,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x77,
	0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x77, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x77, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x61, 0x70, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x61, 0x70,
	0x22, 0x43, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x55, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x77, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x77, 0x61, 0x70, 0x22, 0x4a, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x89,
	0x02, 0x0a, 0x18, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x23, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x22, 0xb2, 0x02, 0x0a, 0x1a, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x66, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xf6, 0x06, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3d, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x41, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x58,
	0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0x39, 0x0a, 0x18, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x22, 0x2f, 0x0a, 0x0e, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x22, 0xc1, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x22, 0xe6, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xb4, 0x04, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02,
	0x22, 0x5e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x22, 0xee, 0x02, 0x0a, 0x18, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x22, 0xfe, 0x01, 0x0a, 0x1e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x69, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2d, 0x0a, 0x10, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x11, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x53, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xd6, 0x02, 0x0a,
	0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x33,
	0x0a, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x7c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x53, 0x65, 0x71, 0x22, 0x44, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0xe3, 0x1a, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x65, 0x6e,
	0x64, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x54, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0f, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57,
	0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x5d, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x75, 0x6e, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x7c, 0x0a, 0x20, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a,
	0x1d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x5e, 0x0a, 0x16, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x67, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x75, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x10, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x19, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x17, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x6b, 0x65, 0x79, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x74, 0x0a, 0x1e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x18, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x53, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6d, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41,
	0x4d, 0x4d, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6d, 0x12,
	0x3a, 0x0a, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6d, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x4d, 0x4d, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6d, 0x12, 0x3d, 0x0a, 0x0a, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x6d, 0x6d, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x4d, 0x4d, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6d, 0x6d, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x35, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a,
	0x10, 0x0a, 0x0e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x1a, 0x6b, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4b, 0x65, 0x79,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x64,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa7, 0x0d, 0x0a,
	0x0c, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x64,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x54,
	0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a,
	0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7c,
	0x0a, 0x20, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x1d,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x5e, 0x0a, 0x16, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x67, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x76, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x19, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x17, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x6e, 0x10, 0x6f, 0x22, 0x2a, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x0f, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x10,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x88, 0x01,
	0x0a, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x4c, 0x6f, 0x73, 0x73,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xd5, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4c,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xf6, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x62, 0x75, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x6c, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x77, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x77, 0x42, 0x75,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x77, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x77, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x78, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0x84, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x10,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x22, 0xa9, 0x03, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x67, 0x61, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6d,
	0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6d, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x2b, 0x0a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x65,
	0x67, 0x61, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x22, 0xb2, 0x02, 0x0a,
	0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6d, 0x5f,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x6c, 0x64, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x93, 0x01,
	0x0a, 0x13, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x67, 0x61, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a,
	0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x0a, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x22, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x44, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4a, 0x0a, 0x1c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x49, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x0b,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x7e, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xdf, 0x04, 0x0a, 0x17, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x59, 0x0a,
	0x2a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x25, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x4f, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x22, 0xd3, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x83, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x76, 0x0a, 0x14, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x7c, 0x0a, 0x1a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x22, 0xd7, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x4a, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x66, 0x65, 0x65,
	0x73, 0x50, 0x61, 0x69, 0x64, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0xa0, 0x03,
	0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x1d, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x1a, 0x6d, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x6f, 0x72,
	0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x65,
	0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x54, 0x68,
	0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x65, 0x6f,
	0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x22, 0x52, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x5f, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x55, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22,
	0xb8, 0x3c, 0x0a, 0x08, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x55, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x33, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x48, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x12,
	0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6c,
	0x6f, 0x73, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x11, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x69, 0x73,
	0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x86, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x6b, 0x65, 0x79,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0b, 0x6b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x12, 0x3d, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a,
	0x1b, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x8d, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x18, 0x65, 0x72, 0x63, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x22, 0x65, 0x72, 0x63,
	0x32, 0x30, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x65, 0x72, 0x63, 0x32, 0x30, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x1b, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x1d, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x91,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x5a, 0x0a, 0x15, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x63, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x53, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x20, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x9a, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x59, 0x0a,
	0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0e, 0x66, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x9f, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x64, 0x0a, 0x19, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0c,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x5a, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x54, 0x0a, 0x13, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x11,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x63, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0xa5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x64,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x14, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x1b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12,
	0x5a, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6b, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x76, 0x0a, 0x1f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0xab,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x1f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x1d, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xad, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x1a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x67, 0x0a,
	0x1a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xae, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x15, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x70, 0x0a, 0x1d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x66, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x4d, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x64, 0x0a, 0x19, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xb3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x16,
	0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x18, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x16, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0xb5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x73, 0x12, 0x5d, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x64, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xb7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x54, 0x0a, 0x13, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x27, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x23, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0xbb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x61, 0x6d, 0x6d, 0x18, 0xbd, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4d, 0x4d, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6d, 0x6d,
	0x12, 0x70, 0x0a, 0x1d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x70, 0x0a, 0x1d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x1b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x6a, 0x0a, 0x1b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x18, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x15,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x41, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x78, 0x45, 0x72, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x18, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0xc4, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x22, 0x7a, 0x0a, 0x18, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x2a, 0xdd,
	0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x2c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x50, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x2d, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xd2,
	0x1d, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x55, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x59, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x08, 0x12, 0x20,
	0x0a, 0x1c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x17, 0x0a,
	0x13, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x4f, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x53,
	0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e,
	0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x11, 0x12, 0x18, 0x0a,
	0x14, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x49, 0x43, 0x4b, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52,
	0x41, 0x57, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x1e,
	0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x17, 0x12, 0x24,
	0x0a, 0x20, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x1a, 0x12,
	0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x10, 0x1b, 0x12,
	0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x1c, 0x12,
	0x25, 0x0a, 0x21, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x1e, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x50, 0x4f,
	0x43, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1f, 0x12, 0x23, 0x0a, 0x1f, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x20,
	0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x21, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f,
	0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x23, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45,
	0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x24, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25, 0x12, 0x1c, 0x0a, 0x18, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x10, 0x26, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x10, 0x27, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x28, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x29, 0x12,
	0x2f, 0x0a, 0x2b, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53, 0x49,
	0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x2a,
	0x12, 0x30, 0x0a, 0x2c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x53,
	0x49, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x2b, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x53, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x45,
	0x44, 0x10, 0x2c, 0x12, 0x31, 0x0a, 0x2d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x53, 0x49, 0x47, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x2d, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x2e, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x45, 0x55, 0x4d, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x2f, 0x12, 0x2c, 0x0a, 0x28, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10,
	0x30, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x31, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x32, 0x12,
	0x2b, 0x0a, 0x27, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x33, 0x12, 0x20, 0x0a, 0x1c,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x34, 0x12, 0x25,
	0x0a, 0x21, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x10, 0x35, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x36, 0x12, 0x33, 0x0a, 0x2f, 0x42, 0x55, 0x53, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x37, 0x12, 0x2b, 0x0a,
	0x27, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x38, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x39, 0x12, 0x27, 0x0a,
	0x23, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x3a, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x4c, 0x49,
	0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x3b, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x3c, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x10, 0x3d, 0x12, 0x2c, 0x0a, 0x28, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x10, 0x3e, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x3f, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x40, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x45, 0x5f,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x41, 0x12,
	0x26, 0x0a, 0x22, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x42, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x55, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x43, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x44, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x45, 0x12, 0x27, 0x0a, 0x23,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x46, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x45, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x47, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x48, 0x12,
	0x32, 0x0a, 0x2e, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x49, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x4a, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x55, 0x53, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x4b, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x4c, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x55, 0x53, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x4d, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x4e, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x4f, 0x12, 0x23, 0x0a, 0x1f, 0x42,
	0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x50,
	0x12, 0x34, 0x0a, 0x30, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x51, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x52, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10,
	0x53, 0x12, 0x31, 0x0a, 0x2d, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x54, 0x12, 0x2c, 0x0a, 0x28, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x52,
	0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x55, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x56, 0x12, 0x26, 0x0a, 0x22,
	0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x57, 0x12, 0x3a, 0x0a, 0x36, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x58,
	0x12, 0x23, 0x0a, 0x1f, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x53, 0x10, 0x59, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x53, 0x10, 0x5a, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d, 0x4d, 0x10, 0x5b, 0x12, 0x30, 0x0a,
	0x2c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x5c, 0x12,
	0x30, 0x0a, 0x2c, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x5d, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x5e, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x5f, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x60, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xc9, 0x01, 0x42, 0x31, 0x5a, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_events_v1_events_proto_rawDescOnce sync.Once
	file_vega_events_v1_events_proto_rawDescData = file_vega_events_v1_events_proto_rawDesc
)

func file_vega_events_v1_events_proto_rawDescGZIP() []byte {
	file_vega_events_v1_events_proto_rawDescOnce.Do(func() {
		file_vega_events_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_events_v1_events_proto_rawDescData)
	})
	return file_vega_events_v1_events_proto_rawDescData
}

var file_vega_events_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_vega_events_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 103)
var file_vega_events_v1_events_proto_goTypes = []interface{}{
	(ProtocolUpgradeProposalStatus)(0),          // 0: vega.events.v1.ProtocolUpgradeProposalStatus
	(BusEventType)(0),                           // 1: vega.events.v1.BusEventType
	(AMM_Status)(0),                             // 2: vega.events.v1.AMM.Status
	(AMM_StatusReason)(0),                       // 3: vega.events.v1.AMM.StatusReason
	(FundingPeriodDataPoint_Source)(0),          // 4: vega.events.v1.FundingPeriodDataPoint.Source
	(Transfer_Status)(0),                        // 5: vega.events.v1.Transfer.Status
	(StakeLinking_Type)(0),                      // 6: vega.events.v1.StakeLinking.Type
	(StakeLinking_Status)(0),                    // 7: vega.events.v1.StakeLinking.Status
	(ERC20MultiSigSignerEvent_Type)(0),          // 8: vega.events.v1.ERC20MultiSigSignerEvent.Type
	(TransactionResult_Status)(0),               // 9: vega.events.v1.TransactionResult.Status
	(*MarketCommunityTags)(nil),                 // 10: vega.events.v1.MarketCommunityTags
	(*TimeWeightedNotionalPositionUpdated)(nil), // 11: vega.events.v1.TimeWeightedNotionalPositionUpdated
	(*AMM)(nil),                                 // 12: vega.events.v1.AMM
	(*VestingBalancesSummary)(nil),              // 13: vega.events.v1.VestingBalancesSummary
	(*PartyVestingSummary)(nil),                 // 14: vega.events.v1.PartyVestingSummary
	(*PartyLockedBalance)(nil),                  // 15: vega.events.v1.PartyLockedBalance
	(*PartyVestingBalance)(nil),                 // 16: vega.events.v1.PartyVestingBalance
	(*VolumeDiscountStatsUpdated)(nil),          // 17: vega.events.v1.VolumeDiscountStatsUpdated
	(*PartyVolumeDiscountStats)(nil),            // 18: vega.events.v1.PartyVolumeDiscountStats
	(*VestingStatsUpdated)(nil),                 // 19: vega.events.v1.VestingStatsUpdated
	(*PartyVestingStats)(nil),                   // 20: vega.events.v1.PartyVestingStats
	(*FeesStats)(nil),                           // 21: vega.events.v1.FeesStats
	(*ReferrerRewardsGenerated)(nil),            // 22: vega.events.v1.ReferrerRewardsGenerated
	(*MakerFeesGenerated)(nil),                  // 23: vega.events.v1.MakerFeesGenerated
	(*PartyAmount)(nil),                         // 24: vega.events.v1.PartyAmount
	(*PartyActivityStreak)(nil),                 // 25: vega.events.v1.PartyActivityStreak
	(*FundingPeriod)(nil),                       // 26: vega.events.v1.FundingPeriod
	(*FundingPayment)(nil),                      // 27: vega.events.v1.FundingPayment
	(*FundingPayments)(nil),                     // 28: vega.events.v1.FundingPayments
	(*FundingPeriodDataPoint)(nil),              // 29: vega.events.v1.FundingPeriodDataPoint
	(*StopOrderEvent)(nil),                      // 30: vega.events.v1.StopOrderEvent
	(*ERC20MultiSigSignerAdded)(nil),            // 31: vega.events.v1.ERC20MultiSigSignerAdded
	(*ERC20MultiSigSignerRemovedSubmitter)(nil), // 32: vega.events.v1.ERC20MultiSigSignerRemovedSubmitter
	(*ERC20MultiSigSignerRemoved)(nil),          // 33: vega.events.v1.ERC20MultiSigSignerRemoved
	(*Transfer)(nil),                            // 34: vega.events.v1.Transfer
	(*OneOffGovernanceTransfer)(nil),            // 35: vega.events.v1.OneOffGovernanceTransfer
	(*OneOffTransfer)(nil),                      // 36: vega.events.v1.OneOffTransfer
	(*RecurringTransfer)(nil),                   // 37: vega.events.v1.RecurringTransfer
	(*RecurringGovernanceTransfer)(nil),         // 38: vega.events.v1.RecurringGovernanceTransfer
	(*StakeLinking)(nil),                        // 39: vega.events.v1.StakeLinking
	(*ERC20MultiSigSignerEvent)(nil),            // 40: vega.events.v1.ERC20MultiSigSignerEvent
	(*ERC20MultiSigThresholdSetEvent)(nil),      // 41: vega.events.v1.ERC20MultiSigThresholdSetEvent
	(*CheckpointEvent)(nil),                     // 42: vega.events.v1.CheckpointEvent
	(*StreamStartEvent)(nil),                    // 43: vega.events.v1.StreamStartEvent
	(*RewardPayoutEvent)(nil),                   // 44: vega.events.v1.RewardPayoutEvent
	(*ValidatorScoreEvent)(nil),                 // 45: vega.events.v1.ValidatorScoreEvent
	(*DelegationBalanceEvent)(nil),              // 46: vega.events.v1.DelegationBalanceEvent
	(*MarketEvent)(nil),                         // 47: vega.events.v1.MarketEvent
	(*TransferFees)(nil),                        // 48: vega.events.v1.TransferFees
	(*TransferFeesDiscount)(nil),                // 49: vega.events.v1.TransferFeesDiscount
	(*TransactionResult)(nil),                   // 50: vega.events.v1.TransactionResult
	(*TxErrorEvent)(nil),                        // 51: vega.events.v1.TxErrorEvent
	(*TimeUpdate)(nil),                          // 52: vega.events.v1.TimeUpdate
	(*EpochEvent)(nil),                          // 53: vega.events.v1.EpochEvent
	(*LedgerMovements)(nil),                     // 54: vega.events.v1.LedgerMovements
	(*PositionResolution)(nil),                  // 55: vega.events.v1.PositionResolution
	(*LossSocialization)(nil),                   // 56: vega.events.v1.LossSocialization
	(*TradeSettlement)(nil),                     // 57: vega.events.v1.TradeSettlement
	(*SettlePosition)(nil),                      // 58: vega.events.v1.SettlePosition
	(*SettleMarket)(nil),                        // 59: vega.events.v1.SettleMarket
	(*PositionStateEvent)(nil),                  // 60: vega.events.v1.PositionStateEvent
	(*SettleDistressed)(nil),                    // 61: vega.events.v1.SettleDistressed
	(*DistressedOrders)(nil),                    // 62: vega.events.v1.DistressedOrders
	(*DistressedPositions)(nil),                 // 63: vega.events.v1.DistressedPositions
	(*MarketTick)(nil),                          // 64: vega.events.v1.MarketTick
	(*AuctionEvent)(nil),                        // 65: vega.events.v1.AuctionEvent
	(*ValidatorUpdate)(nil),                     // 66: vega.events.v1.ValidatorUpdate
	(*ValidatorRankingEvent)(nil),               // 67: vega.events.v1.ValidatorRankingEvent
	(*KeyRotation)(nil),                         // 68: vega.events.v1.KeyRotation
	(*EthereumKeyRotation)(nil),                 // 69: vega.events.v1.EthereumKeyRotation
	(*ProtocolUpgradeEvent)(nil),                // 70: vega.events.v1.ProtocolUpgradeEvent
	(*StateVar)(nil),                            // 71: vega.events.v1.StateVar
	(*BeginBlock)(nil),                          // 72: vega.events.v1.BeginBlock
	(*EndBlock)(nil),                            // 73: vega.events.v1.EndBlock
	(*ProtocolUpgradeStarted)(nil),              // 74: vega.events.v1.ProtocolUpgradeStarted
	(*ProtocolUpgradeDataNodeReady)(nil),        // 75: vega.events.v1.ProtocolUpgradeDataNodeReady
	(*CoreSnapshotData)(nil),                    // 76: vega.events.v1.CoreSnapshotData
	(*ExpiredOrders)(nil),                       // 77: vega.events.v1.ExpiredOrders
	(*CancelledOrders)(nil),                     // 78: vega.events.v1.CancelledOrders
	(*TeamCreated)(nil),                         // 79: vega.events.v1.TeamCreated
	(*TeamUpdated)(nil),                         // 80: vega.events.v1.TeamUpdated
	(*RefereeSwitchedTeam)(nil),                 // 81: vega.events.v1.RefereeSwitchedTeam
	(*RefereeJoinedTeam)(nil),                   // 82: vega.events.v1.RefereeJoinedTeam
	(*ReferralSetCreated)(nil),                  // 83: vega.events.v1.ReferralSetCreated
	(*ReferralSetStatsUpdated)(nil),             // 84: vega.events.v1.ReferralSetStatsUpdated
	(*RefereeStats)(nil),                        // 85: vega.events.v1.RefereeStats
	(*RefereeJoinedReferralSet)(nil),            // 86: vega.events.v1.RefereeJoinedReferralSet
	(*ReferralProgramStarted)(nil),              // 87: vega.events.v1.ReferralProgramStarted
	(*ReferralProgramUpdated)(nil),              // 88: vega.events.v1.ReferralProgramUpdated
	(*ReferralProgramEnded)(nil),                // 89: vega.events.v1.ReferralProgramEnded
	(*VolumeDiscountProgramStarted)(nil),        // 90: vega.events.v1.VolumeDiscountProgramStarted
	(*VolumeDiscountProgramUpdated)(nil),        // 91: vega.events.v1.VolumeDiscountProgramUpdated
	(*VolumeDiscountProgramEnded)(nil),          // 92: vega.events.v1.VolumeDiscountProgramEnded
	(*PaidLiquidityFeesStats)(nil),              // 93: vega.events.v1.PaidLiquidityFeesStats
	(*PartyMarginModeUpdated)(nil),              // 94: vega.events.v1.PartyMarginModeUpdated
	(*PartyProfileUpdated)(nil),                 // 95: vega.events.v1.PartyProfileUpdated
	(*TeamsStatsUpdated)(nil),                   // 96: vega.events.v1.TeamsStatsUpdated
	(*TeamStats)(nil),                           // 97: vega.events.v1.TeamStats
	(*TeamMemberStats)(nil),                     // 98: vega.events.v1.TeamMemberStats
	(*GamePartyScore)(nil),                      // 99: vega.events.v1.GamePartyScore
	(*GameTeamScore)(nil),                       // 100: vega.events.v1.GameTeamScore
	(*GameScores)(nil),                          // 101: vega.events.v1.GameScores
	(*BusEvent)(nil),                            // 102: vega.events.v1.BusEvent
	(*VolumeRebateStatsUpdated)(nil),            // 103: vega.events.v1.VolumeRebateStatsUpdated
	(*PartyVolumeRebateStats)(nil),              // 104: vega.events.v1.PartyVolumeRebateStats
	(*VolumeRebateProgramStarted)(nil),          // 105: vega.events.v1.VolumeRebateProgramStarted
	(*VolumeRebateProgramUpdated)(nil),          // 106: vega.events.v1.VolumeRebateProgramUpdated
	(*VolumeRebateProgramEnded)(nil),            // 107: vega.events.v1.VolumeRebateProgramEnded
	(*AMM_ConcentratedLiquidityParameters)(nil), // 108: vega.events.v1.AMM.ConcentratedLiquidityParameters
	(*AMM_Curve)(nil),                           // 109: vega.events.v1.AMM.Curve
	(*TransactionResult_KeyErrors)(nil),         // 110: vega.events.v1.TransactionResult.KeyErrors
	(*TransactionResult_SuccessDetails)(nil),    // 111: vega.events.v1.TransactionResult.SuccessDetails
	(*TransactionResult_FailureDetails)(nil),    // 112: vega.events.v1.TransactionResult.FailureDetails
	(*vega.DiscountFactors)(nil),                // 113: vega.DiscountFactors
	(*v1.OrderSubmission)(nil),                  // 114: vega.commands.v1.OrderSubmission
	(*vega.StopOrder)(nil),                      // 115: vega.StopOrder
	(vega.AccountType)(0),                       // 116: vega.AccountType
	(*vega.DispatchStrategy)(nil),               // 117: vega.DispatchStrategy
	(*v1.OrderAmendment)(nil),                   // 118: vega.commands.v1.OrderAmendment
	(*v1.OrderCancellation)(nil),                // 119: vega.commands.v1.OrderCancellation
	(*v1.ProposalSubmission)(nil),               // 120: vega.commands.v1.ProposalSubmission
	(*v1.VoteSubmission)(nil),                   // 121: vega.commands.v1.VoteSubmission
	(*v1.LiquidityProvisionSubmission)(nil),     // 122: vega.commands.v1.LiquidityProvisionSubmission
	(*v1.WithdrawSubmission)(nil),               // 123: vega.commands.v1.WithdrawSubmission
	(*v1.DelegateSubmission)(nil),               // 124: vega.commands.v1.DelegateSubmission
	(*v1.UndelegateSubmission)(nil),             // 125: vega.commands.v1.UndelegateSubmission
	(*v1.LiquidityProvisionCancellation)(nil),   // 126: vega.commands.v1.LiquidityProvisionCancellation
	(*v1.LiquidityProvisionAmendment)(nil),      // 127: vega.commands.v1.LiquidityProvisionAmendment
	(*v1.Transfer)(nil),                         // 128: vega.commands.v1.Transfer
	(*v1.CancelTransfer)(nil),                   // 129: vega.commands.v1.CancelTransfer
	(*v1.AnnounceNode)(nil),                     // 130: vega.commands.v1.AnnounceNode
	(*v1.OracleDataSubmission)(nil),             // 131: vega.commands.v1.OracleDataSubmission
	(*v1.ProtocolUpgradeProposal)(nil),          // 132: vega.commands.v1.ProtocolUpgradeProposal
	(*v1.IssueSignatures)(nil),                  // 133: vega.commands.v1.IssueSignatures
	(*v1.BatchMarketInstructions)(nil),          // 134: vega.commands.v1.BatchMarketInstructions
	(*v1.KeyRotateSubmission)(nil),              // 135: vega.commands.v1.KeyRotateSubmission
	(*v1.EthereumKeyRotateSubmission)(nil),      // 136: vega.commands.v1.EthereumKeyRotateSubmission
	(*v1.StopOrdersSubmission)(nil),             // 137: vega.commands.v1.StopOrdersSubmission
	(*v1.StopOrdersCancellation)(nil),           // 138: vega.commands.v1.StopOrdersCancellation
	(*v1.CreateReferralSet)(nil),                // 139: vega.commands.v1.CreateReferralSet
	(*v1.UpdateReferralSet)(nil),                // 140: vega.commands.v1.UpdateReferralSet
	(*v1.ApplyReferralCode)(nil),                // 141: vega.commands.v1.ApplyReferralCode
	(*v1.UpdateMarginMode)(nil),                 // 142: vega.commands.v1.UpdateMarginMode
	(*v1.JoinTeam)(nil),                         // 143: vega.commands.v1.JoinTeam
	(*v1.BatchProposalSubmission)(nil),          // 144: vega.commands.v1.BatchProposalSubmission
	(*v1.UpdatePartyProfile)(nil),               // 145: vega.commands.v1.UpdatePartyProfile
	(*v1.SubmitAMM)(nil),                        // 146: vega.commands.v1.SubmitAMM
	(*v1.AmendAMM)(nil),                         // 147: vega.commands.v1.AmendAMM
	(*v1.CancelAMM)(nil),                        // 148: vega.commands.v1.CancelAMM
	(vega.EpochAction)(0),                       // 149: vega.EpochAction
	(*vega.LedgerMovement)(nil),                 // 150: vega.LedgerMovement
	(vega.AuctionTrigger)(0),                    // 151: vega.AuctionTrigger
	(*vega.RewardFactors)(nil),                  // 152: vega.RewardFactors
	(*vega.ReferralProgram)(nil),                // 153: vega.ReferralProgram
	(*vega.VolumeDiscountProgram)(nil),          // 154: vega.VolumeDiscountProgram
	(vega.MarginMode)(0),                        // 155: vega.MarginMode
	(*vega.PartyProfile)(nil),                   // 156: vega.PartyProfile
	(*vega.Order)(nil),                          // 157: vega.Order
	(*vega.Account)(nil),                        // 158: vega.Account
	(*vega.Party)(nil),                          // 159: vega.Party
	(*vega.Trade)(nil),                          // 160: vega.Trade
	(*vega.MarginLevels)(nil),                   // 161: vega.MarginLevels
	(*vega.Proposal)(nil),                       // 162: vega.Proposal
	(*vega.Vote)(nil),                           // 163: vega.Vote
	(*vega.MarketData)(nil),                     // 164: vega.MarketData
	(*v1.NodeSignature)(nil),                    // 165: vega.commands.v1.NodeSignature
	(*vega.Market)(nil),                         // 166: vega.Market
	(*vega.Asset)(nil),                          // 167: vega.Asset
	(*vega.Withdrawal)(nil),                     // 168: vega.Withdrawal
	(*vega.Deposit)(nil),                        // 169: vega.Deposit
	(*vega.RiskFactor)(nil),                     // 170: vega.RiskFactor
	(*vega.NetworkParameter)(nil),               // 171: vega.NetworkParameter
	(*vega.LiquidityProvision)(nil),             // 172: vega.LiquidityProvision
	(*vega.OracleSpec)(nil),                     // 173: vega.OracleSpec
	(*vega.OracleData)(nil),                     // 174: vega.OracleData
	(*vega.NetworkLimits)(nil),                  // 175: vega.NetworkLimits
	(*vega.VolumeRebateProgram)(nil),            // 176: vega.VolumeRebateProgram
}
var file_vega_events_v1_events_proto_depIdxs = []int32{
	108, // 0: vega.events.v1.AMM.parameters:type_name -> vega.events.v1.AMM.ConcentratedLiquidityParameters
	2,   // 1: vega.events.v1.AMM.status:type_name -> vega.events.v1.AMM.Status
	3,   // 2: vega.events.v1.AMM.status_reason:type_name -> vega.events.v1.AMM.StatusReason
	109, // 3: vega.events.v1.AMM.lower_curve:type_name -> vega.events.v1.AMM.Curve
	109, // 4: vega.events.v1.AMM.upper_curve:type_name -> vega.events.v1.AMM.Curve
	14,  // 5: vega.events.v1.VestingBalancesSummary.parties_vesting_summary:type_name -> vega.events.v1.PartyVestingSummary
	15,  // 6: vega.events.v1.PartyVestingSummary.party_locked_balances:type_name -> vega.events.v1.PartyLockedBalance
	16,  // 7: vega.events.v1.PartyVestingSummary.party_vesting_balances:type_name -> vega.events.v1.PartyVestingBalance
	18,  // 8: vega.events.v1.VolumeDiscountStatsUpdated.stats:type_name -> vega.events.v1.PartyVolumeDiscountStats
	113, // 9: vega.events.v1.PartyVolumeDiscountStats.discount_factors:type_name -> vega.DiscountFactors
	20,  // 10: vega.events.v1.VestingStatsUpdated.stats:type_name -> vega.events.v1.PartyVestingStats
	24,  // 11: vega.events.v1.FeesStats.total_rewards_received:type_name -> vega.events.v1.PartyAmount
	22,  // 12: vega.events.v1.FeesStats.referrer_rewards_generated:type_name -> vega.events.v1.ReferrerRewardsGenerated
	24,  // 13: vega.events.v1.FeesStats.referees_discount_applied:type_name -> vega.events.v1.PartyAmount
	24,  // 14: vega.events.v1.FeesStats.volume_discount_applied:type_name -> vega.events.v1.PartyAmount
	24,  // 15: vega.events.v1.FeesStats.total_maker_fees_received:type_name -> vega.events.v1.PartyAmount
	23,  // 16: vega.events.v1.FeesStats.maker_fees_generated:type_name -> vega.events.v1.MakerFeesGenerated
	24,  // 17: vega.events.v1.FeesStats.total_fees_paid_and_received:type_name -> vega.events.v1.PartyAmount
	24,  // 18: vega.events.v1.ReferrerRewardsGenerated.generated_reward:type_name -> vega.events.v1.PartyAmount
	24,  // 19: vega.events.v1.MakerFeesGenerated.maker_fees_paid:type_name -> vega.events.v1.PartyAmount
	27,  // 20: vega.events.v1.FundingPayments.payments:type_name -> vega.events.v1.FundingPayment
	4,   // 21: vega.events.v1.FundingPeriodDataPoint.data_point_type:type_name -> vega.events.v1.FundingPeriodDataPoint.Source
	114, // 22: vega.events.v1.StopOrderEvent.submission:type_name -> vega.commands.v1.OrderSubmission
	115, // 23: vega.events.v1.StopOrderEvent.stop_order:type_name -> vega.StopOrder
	32,  // 24: vega.events.v1.ERC20MultiSigSignerRemoved.signature_submitters:type_name -> vega.events.v1.ERC20MultiSigSignerRemovedSubmitter
	116, // 25: vega.events.v1.Transfer.from_account_type:type_name -> vega.AccountType
	116, // 26: vega.events.v1.Transfer.to_account_type:type_name -> vega.AccountType
	5,   // 27: vega.events.v1.Transfer.status:type_name -> vega.events.v1.Transfer.Status
	36,  // 28: vega.events.v1.Transfer.one_off:type_name -> vega.events.v1.OneOffTransfer
	37,  // 29: vega.events.v1.Transfer.recurring:type_name -> vega.events.v1.RecurringTransfer
	35,  // 30: vega.events.v1.Transfer.one_off_governance:type_name -> vega.events.v1.OneOffGovernanceTransfer
	38,  // 31: vega.events.v1.Transfer.recurring_governance:type_name -> vega.events.v1.RecurringGovernanceTransfer
	117, // 32: vega.events.v1.RecurringTransfer.dispatch_strategy:type_name -> vega.DispatchStrategy
	117, // 33: vega.events.v1.RecurringGovernanceTransfer.dispatch_strategy:type_name -> vega.DispatchStrategy
	6,   // 34: vega.events.v1.StakeLinking.type:type_name -> vega.events.v1.StakeLinking.Type
	7,   // 35: vega.events.v1.StakeLinking.status:type_name -> vega.events.v1.StakeLinking.Status
	8,   // 36: vega.events.v1.ERC20MultiSigSignerEvent.type:type_name -> vega.events.v1.ERC20MultiSigSignerEvent.Type
	9,   // 37: vega.events.v1.TransactionResult.status_detail:type_name -> vega.events.v1.TransactionResult.Status
	114, // 38: vega.events.v1.TransactionResult.order_submission:type_name -> vega.commands.v1.OrderSubmission
	118, // 39: vega.events.v1.TransactionResult.order_amendment:type_name -> vega.commands.v1.OrderAmendment
	119, // 40: vega.events.v1.TransactionResult.order_cancellation:type_name -> vega.commands.v1.OrderCancellation
	120, // 41: vega.events.v1.TransactionResult.proposal:type_name -> vega.commands.v1.ProposalSubmission
	121, // 42: vega.events.v1.TransactionResult.vote_submission:type_name -> vega.commands.v1.VoteSubmission
	122, // 43: vega.events.v1.TransactionResult.liquidity_provision_submission:type_name -> vega.commands.v1.LiquidityProvisionSubmission
	123, // 44: vega.events.v1.TransactionResult.withdraw_submission:type_name -> vega.commands.v1.WithdrawSubmission
	124, // 45: vega.events.v1.TransactionResult.delegate_submission:type_name -> vega.commands.v1.DelegateSubmission
	125, // 46: vega.events.v1.TransactionResult.undelegate_submission:type_name -> vega.commands.v1.UndelegateSubmission
	126, // 47: vega.events.v1.TransactionResult.liquidity_provision_cancellation:type_name -> vega.commands.v1.LiquidityProvisionCancellation
	127, // 48: vega.events.v1.TransactionResult.liquidity_provision_amendment:type_name -> vega.commands.v1.LiquidityProvisionAmendment
	128, // 49: vega.events.v1.TransactionResult.transfer:type_name -> vega.commands.v1.Transfer
	129, // 50: vega.events.v1.TransactionResult.cancel_transfer:type_name -> vega.commands.v1.CancelTransfer
	130, // 51: vega.events.v1.TransactionResult.announce_node:type_name -> vega.commands.v1.AnnounceNode
	131, // 52: vega.events.v1.TransactionResult.oracle_data_submission:type_name -> vega.commands.v1.OracleDataSubmission
	132, // 53: vega.events.v1.TransactionResult.protocol_upgrade_proposal:type_name -> vega.commands.v1.ProtocolUpgradeProposal
	133, // 54: vega.events.v1.TransactionResult.issue_signatures:type_name -> vega.commands.v1.IssueSignatures
	134, // 55: vega.events.v1.TransactionResult.batch_market_instructions:type_name -> vega.commands.v1.BatchMarketInstructions
	135, // 56: vega.events.v1.TransactionResult.key_rotate_submission:type_name -> vega.commands.v1.KeyRotateSubmission
	136, // 57: vega.events.v1.TransactionResult.ethereum_key_rotate_submission:type_name -> vega.commands.v1.EthereumKeyRotateSubmission
	137, // 58: vega.events.v1.TransactionResult.stop_orders_submission:type_name -> vega.commands.v1.StopOrdersSubmission
	138, // 59: vega.events.v1.TransactionResult.stop_orders_cancellation:type_name -> vega.commands.v1.StopOrdersCancellation
	139, // 60: vega.events.v1.TransactionResult.create_referral_set:type_name -> vega.commands.v1.CreateReferralSet
	140, // 61: vega.events.v1.TransactionResult.update_referral_set:type_name -> vega.commands.v1.UpdateReferralSet
	141, // 62: vega.events.v1.TransactionResult.apply_referral_code:type_name -> vega.commands.v1.ApplyReferralCode
	142, // 63: vega.events.v1.TransactionResult.update_margin_mode:type_name -> vega.commands.v1.UpdateMarginMode
	143, // 64: vega.events.v1.TransactionResult.join_team:type_name -> vega.commands.v1.JoinTeam
	144, // 65: vega.events.v1.TransactionResult.batch_proposal:type_name -> vega.commands.v1.BatchProposalSubmission
	145, // 66: vega.events.v1.TransactionResult.update_party_profile:type_name -> vega.commands.v1.UpdatePartyProfile
	146, // 67: vega.events.v1.TransactionResult.submit_amm:type_name -> vega.commands.v1.SubmitAMM
	147, // 68: vega.events.v1.TransactionResult.amend_amm:type_name -> vega.commands.v1.AmendAMM
	148, // 69: vega.events.v1.TransactionResult.cancel_amm:type_name -> vega.commands.v1.CancelAMM
	111, // 70: vega.events.v1.TransactionResult.success:type_name -> vega.events.v1.TransactionResult.SuccessDetails
	112, // 71: vega.events.v1.TransactionResult.failure:type_name -> vega.events.v1.TransactionResult.FailureDetails
	114, // 72: vega.events.v1.TxErrorEvent.order_submission:type_name -> vega.commands.v1.OrderSubmission
	118, // 73: vega.events.v1.TxErrorEvent.order_amendment:type_name -> vega.commands.v1.OrderAmendment
	119, // 74: vega.events.v1.TxErrorEvent.order_cancellation:type_name -> vega.commands.v1.OrderCancellation
	120, // 75: vega.events.v1.TxErrorEvent.proposal:type_name -> vega.commands.v1.ProposalSubmission
	121, // 76: vega.events.v1.TxErrorEvent.vote_submission:type_name -> vega.commands.v1.VoteSubmission
	122, // 77: vega.events.v1.TxErrorEvent.liquidity_provision_submission:type_name -> vega.commands.v1.LiquidityProvisionSubmission
	123, // 78: vega.events.v1.TxErrorEvent.withdraw_submission:type_name -> vega.commands.v1.WithdrawSubmission
	124, // 79: vega.events.v1.TxErrorEvent.delegate_submission:type_name -> vega.commands.v1.DelegateSubmission
	125, // 80: vega.events.v1.TxErrorEvent.undelegate_submission:type_name -> vega.commands.v1.UndelegateSubmission
	126, // 81: vega.events.v1.TxErrorEvent.liquidity_provision_cancellation:type_name -> vega.commands.v1.LiquidityProvisionCancellation
	127, // 82: vega.events.v1.TxErrorEvent.liquidity_provision_amendment:type_name -> vega.commands.v1.LiquidityProvisionAmendment
	128, // 83: vega.events.v1.TxErrorEvent.transfer:type_name -> vega.commands.v1.Transfer
	129, // 84: vega.events.v1.TxErrorEvent.cancel_transfer:type_name -> vega.commands.v1.CancelTransfer
	130, // 85: vega.events.v1.TxErrorEvent.announce_node:type_name -> vega.commands.v1.AnnounceNode
	131, // 86: vega.events.v1.TxErrorEvent.oracle_data_submission:type_name -> vega.commands.v1.OracleDataSubmission
	132, // 87: vega.events.v1.TxErrorEvent.protocol_upgrade_proposal:type_name -> vega.commands.v1.ProtocolUpgradeProposal
	133, // 88: vega.events.v1.TxErrorEvent.issue_signatures:type_name -> vega.commands.v1.IssueSignatures
	134, // 89: vega.events.v1.TxErrorEvent.batch_market_instructions:type_name -> vega.commands.v1.BatchMarketInstructions
	149, // 90: vega.events.v1.EpochEvent.action:type_name -> vega.EpochAction
	150, // 91: vega.events.v1.LedgerMovements.ledger_movements:type_name -> vega.LedgerMovement
	57,  // 92: vega.events.v1.SettlePosition.trade_settlements:type_name -> vega.events.v1.TradeSettlement
	151, // 93: vega.events.v1.AuctionEvent.trigger:type_name -> vega.AuctionTrigger
	151, // 94: vega.events.v1.AuctionEvent.extension_trigger:type_name -> vega.AuctionTrigger
	0,   // 95: vega.events.v1.ProtocolUpgradeEvent.status:type_name -> vega.events.v1.ProtocolUpgradeProposalStatus
	85,  // 96: vega.events.v1.ReferralSetStatsUpdated.referees_stats:type_name -> vega.events.v1.RefereeStats
	152, // 97: vega.events.v1.ReferralSetStatsUpdated.reward_factors:type_name -> vega.RewardFactors
	152, // 98: vega.events.v1.ReferralSetStatsUpdated.reward_factors_multiplier:type_name -> vega.RewardFactors
	113, // 99: vega.events.v1.RefereeStats.discount_factors:type_name -> vega.DiscountFactors
	153, // 100: vega.events.v1.ReferralProgramStarted.program:type_name -> vega.ReferralProgram
	153, // 101: vega.events.v1.ReferralProgramUpdated.program:type_name -> vega.ReferralProgram
	154, // 102: vega.events.v1.VolumeDiscountProgramStarted.program:type_name -> vega.VolumeDiscountProgram
	154, // 103: vega.events.v1.VolumeDiscountProgramUpdated.program:type_name -> vega.VolumeDiscountProgram
	24,  // 104: vega.events.v1.PaidLiquidityFeesStats.fees_paid_per_party:type_name -> vega.events.v1.PartyAmount
	155, // 105: vega.events.v1.PartyMarginModeUpdated.margin_mode:type_name -> vega.MarginMode
	156, // 106: vega.events.v1.PartyProfileUpdated.updated_profile:type_name -> vega.PartyProfile
	97,  // 107: vega.events.v1.TeamsStatsUpdated.stats:type_name -> vega.events.v1.TeamStats
	98,  // 108: vega.events.v1.TeamStats.members_stats:type_name -> vega.events.v1.TeamMemberStats
	100, // 109: vega.events.v1.GameScores.team_scores:type_name -> vega.events.v1.GameTeamScore
	99,  // 110: vega.events.v1.GameScores.party_scores:type_name -> vega.events.v1.GamePartyScore
	1,   // 111: vega.events.v1.BusEvent.type:type_name -> vega.events.v1.BusEventType
	52,  // 112: vega.events.v1.BusEvent.time_update:type_name -> vega.events.v1.TimeUpdate
	54,  // 113: vega.events.v1.BusEvent.ledger_movements:type_name -> vega.events.v1.LedgerMovements
	55,  // 114: vega.events.v1.BusEvent.position_resolution:type_name -> vega.events.v1.PositionResolution
	157, // 115: vega.events.v1.BusEvent.order:type_name -> vega.Order
	158, // 116: vega.events.v1.BusEvent.account:type_name -> vega.Account
	159, // 117: vega.events.v1.BusEvent.party:type_name -> vega.Party
	160, // 118: vega.events.v1.BusEvent.trade:type_name -> vega.Trade
	161, // 119: vega.events.v1.BusEvent.margin_levels:type_name -> vega.MarginLevels
	162, // 120: vega.events.v1.BusEvent.proposal:type_name -> vega.Proposal
	163, // 121: vega.events.v1.BusEvent.vote:type_name -> vega.Vote
	164, // 122: vega.events.v1.BusEvent.market_data:type_name -> vega.MarketData
	165, // 123: vega.events.v1.BusEvent.node_signature:type_name -> vega.commands.v1.NodeSignature
	56,  // 124: vega.events.v1.BusEvent.loss_socialization:type_name -> vega.events.v1.LossSocialization
	58,  // 125: vega.events.v1.BusEvent.settle_position:type_name -> vega.events.v1.SettlePosition
	61,  // 126: vega.events.v1.BusEvent.settle_distressed:type_name -> vega.events.v1.SettleDistressed
	166, // 127: vega.events.v1.BusEvent.market_created:type_name -> vega.Market
	167, // 128: vega.events.v1.BusEvent.asset:type_name -> vega.Asset
	64,  // 129: vega.events.v1.BusEvent.market_tick:type_name -> vega.events.v1.MarketTick
	168, // 130: vega.events.v1.BusEvent.withdrawal:type_name -> vega.Withdrawal
	169, // 131: vega.events.v1.BusEvent.deposit:type_name -> vega.Deposit
	65,  // 132: vega.events.v1.BusEvent.auction:type_name -> vega.events.v1.AuctionEvent
	170, // 133: vega.events.v1.BusEvent.risk_factor:type_name -> vega.RiskFactor
	171, // 134: vega.events.v1.BusEvent.network_parameter:type_name -> vega.NetworkParameter
	172, // 135: vega.events.v1.BusEvent.liquidity_provision:type_name -> vega.LiquidityProvision
	166, // 136: vega.events.v1.BusEvent.market_updated:type_name -> vega.Market
	173, // 137: vega.events.v1.BusEvent.oracle_spec:type_name -> vega.OracleSpec
	174, // 138: vega.events.v1.BusEvent.oracle_data:type_name -> vega.OracleData
	46,  // 139: vega.events.v1.BusEvent.delegation_balance:type_name -> vega.events.v1.DelegationBalanceEvent
	45,  // 140: vega.events.v1.BusEvent.validator_score:type_name -> vega.events.v1.ValidatorScoreEvent
	53,  // 141: vega.events.v1.BusEvent.epoch_event:type_name -> vega.events.v1.EpochEvent
	66,  // 142: vega.events.v1.BusEvent.validator_update:type_name -> vega.events.v1.ValidatorUpdate
	39,  // 143: vega.events.v1.BusEvent.stake_linking:type_name -> vega.events.v1.StakeLinking
	44,  // 144: vega.events.v1.BusEvent.reward_payout:type_name -> vega.events.v1.RewardPayoutEvent
	42,  // 145: vega.events.v1.BusEvent.checkpoint:type_name -> vega.events.v1.CheckpointEvent
	68,  // 146: vega.events.v1.BusEvent.key_rotation:type_name -> vega.events.v1.KeyRotation
	71,  // 147: vega.events.v1.BusEvent.state_var:type_name -> vega.events.v1.StateVar
	175, // 148: vega.events.v1.BusEvent.network_limits:type_name -> vega.NetworkLimits
	34,  // 149: vega.events.v1.BusEvent.transfer:type_name -> vega.events.v1.Transfer
	67,  // 150: vega.events.v1.BusEvent.ranking_event:type_name -> vega.events.v1.ValidatorRankingEvent
	40,  // 151: vega.events.v1.BusEvent.erc20_multisig_signer_event:type_name -> vega.events.v1.ERC20MultiSigSignerEvent
	41,  // 152: vega.events.v1.BusEvent.erc20_multisig_set_threshold_event:type_name -> vega.events.v1.ERC20MultiSigThresholdSetEvent
	31,  // 153: vega.events.v1.BusEvent.erc20_multisig_signer_added:type_name -> vega.events.v1.ERC20MultiSigSignerAdded
	33,  // 154: vega.events.v1.BusEvent.erc20_multisig_signer_removed:type_name -> vega.events.v1.ERC20MultiSigSignerRemoved
	60,  // 155: vega.events.v1.BusEvent.position_state_event:type_name -> vega.events.v1.PositionStateEvent
	69,  // 156: vega.events.v1.BusEvent.ethereum_key_rotation:type_name -> vega.events.v1.EthereumKeyRotation
	70,  // 157: vega.events.v1.BusEvent.protocol_upgrade_event:type_name -> vega.events.v1.ProtocolUpgradeEvent
	72,  // 158: vega.events.v1.BusEvent.begin_block:type_name -> vega.events.v1.BeginBlock
	73,  // 159: vega.events.v1.BusEvent.end_block:type_name -> vega.events.v1.EndBlock
	74,  // 160: vega.events.v1.BusEvent.protocol_upgrade_started:type_name -> vega.events.v1.ProtocolUpgradeStarted
	59,  // 161: vega.events.v1.BusEvent.settle_market:type_name -> vega.events.v1.SettleMarket
	50,  // 162: vega.events.v1.BusEvent.transaction_result:type_name -> vega.events.v1.TransactionResult
	76,  // 163: vega.events.v1.BusEvent.core_snapshot_event:type_name -> vega.events.v1.CoreSnapshotData
	75,  // 164: vega.events.v1.BusEvent.protocol_upgrade_data_node_ready:type_name -> vega.events.v1.ProtocolUpgradeDataNodeReady
	62,  // 165: vega.events.v1.BusEvent.distressed_orders:type_name -> vega.events.v1.DistressedOrders
	77,  // 166: vega.events.v1.BusEvent.expired_orders:type_name -> vega.events.v1.ExpiredOrders
	63,  // 167: vega.events.v1.BusEvent.distressed_positions:type_name -> vega.events.v1.DistressedPositions
	30,  // 168: vega.events.v1.BusEvent.stop_order:type_name -> vega.events.v1.StopOrderEvent
	26,  // 169: vega.events.v1.BusEvent.funding_period:type_name -> vega.events.v1.FundingPeriod
	29,  // 170: vega.events.v1.BusEvent.funding_period_data_point:type_name -> vega.events.v1.FundingPeriodDataPoint
	79,  // 171: vega.events.v1.BusEvent.team_created:type_name -> vega.events.v1.TeamCreated
	80,  // 172: vega.events.v1.BusEvent.team_updated:type_name -> vega.events.v1.TeamUpdated
	81,  // 173: vega.events.v1.BusEvent.referee_switched_team:type_name -> vega.events.v1.RefereeSwitchedTeam
	82,  // 174: vega.events.v1.BusEvent.referee_joined_team:type_name -> vega.events.v1.RefereeJoinedTeam
	87,  // 175: vega.events.v1.BusEvent.referral_program_started:type_name -> vega.events.v1.ReferralProgramStarted
	88,  // 176: vega.events.v1.BusEvent.referral_program_updated:type_name -> vega.events.v1.ReferralProgramUpdated
	89,  // 177: vega.events.v1.BusEvent.referral_program_ended:type_name -> vega.events.v1.ReferralProgramEnded
	83,  // 178: vega.events.v1.BusEvent.referral_set_created:type_name -> vega.events.v1.ReferralSetCreated
	86,  // 179: vega.events.v1.BusEvent.referee_joined_referral_set:type_name -> vega.events.v1.RefereeJoinedReferralSet
	25,  // 180: vega.events.v1.BusEvent.party_activity_streak:type_name -> vega.events.v1.PartyActivityStreak
	90,  // 181: vega.events.v1.BusEvent.volume_discount_program_started:type_name -> vega.events.v1.VolumeDiscountProgramStarted
	91,  // 182: vega.events.v1.BusEvent.volume_discount_program_updated:type_name -> vega.events.v1.VolumeDiscountProgramUpdated
	92,  // 183: vega.events.v1.BusEvent.volume_discount_program_ended:type_name -> vega.events.v1.VolumeDiscountProgramEnded
	84,  // 184: vega.events.v1.BusEvent.referral_set_stats_updated:type_name -> vega.events.v1.ReferralSetStatsUpdated
	19,  // 185: vega.events.v1.BusEvent.vesting_stats_updated:type_name -> vega.events.v1.VestingStatsUpdated
	17,  // 186: vega.events.v1.BusEvent.volume_discount_stats_updated:type_name -> vega.events.v1.VolumeDiscountStatsUpdated
	21,  // 187: vega.events.v1.BusEvent.fees_stats:type_name -> vega.events.v1.FeesStats
	28,  // 188: vega.events.v1.BusEvent.funding_payments:type_name -> vega.events.v1.FundingPayments
	93,  // 189: vega.events.v1.BusEvent.paid_liquidity_fees_stats:type_name -> vega.events.v1.PaidLiquidityFeesStats
	13,  // 190: vega.events.v1.BusEvent.vesting_balances_summary:type_name -> vega.events.v1.VestingBalancesSummary
	48,  // 191: vega.events.v1.BusEvent.transfer_fees:type_name -> vega.events.v1.TransferFees
	49,  // 192: vega.events.v1.BusEvent.transfer_fees_discount:type_name -> vega.events.v1.TransferFeesDiscount
	94,  // 193: vega.events.v1.BusEvent.party_margin_mode_updated:type_name -> vega.events.v1.PartyMarginModeUpdated
	95,  // 194: vega.events.v1.BusEvent.party_profile_updated:type_name -> vega.events.v1.PartyProfileUpdated
	96,  // 195: vega.events.v1.BusEvent.teams_stats_updated:type_name -> vega.events.v1.TeamsStatsUpdated
	11,  // 196: vega.events.v1.BusEvent.time_weighted_notional_position_updated:type_name -> vega.events.v1.TimeWeightedNotionalPositionUpdated
	78,  // 197: vega.events.v1.BusEvent.cancelled_orders:type_name -> vega.events.v1.CancelledOrders
	101, // 198: vega.events.v1.BusEvent.game_scores:type_name -> vega.events.v1.GameScores
	12,  // 199: vega.events.v1.BusEvent.amm:type_name -> vega.events.v1.AMM
	105, // 200: vega.events.v1.BusEvent.volume_rebate_program_started:type_name -> vega.events.v1.VolumeRebateProgramStarted
	106, // 201: vega.events.v1.BusEvent.volume_rebate_program_updated:type_name -> vega.events.v1.VolumeRebateProgramUpdated
	107, // 202: vega.events.v1.BusEvent.volume_rebate_program_ended:type_name -> vega.events.v1.VolumeRebateProgramEnded
	103, // 203: vega.events.v1.BusEvent.volume_rebate_stats_updated:type_name -> vega.events.v1.VolumeRebateStatsUpdated
	10,  // 204: vega.events.v1.BusEvent.market_community_tags:type_name -> vega.events.v1.MarketCommunityTags
	47,  // 205: vega.events.v1.BusEvent.market:type_name -> vega.events.v1.MarketEvent
	51,  // 206: vega.events.v1.BusEvent.tx_err_event:type_name -> vega.events.v1.TxErrorEvent
	104, // 207: vega.events.v1.VolumeRebateStatsUpdated.stats:type_name -> vega.events.v1.PartyVolumeRebateStats
	176, // 208: vega.events.v1.VolumeRebateProgramStarted.program:type_name -> vega.VolumeRebateProgram
	176, // 209: vega.events.v1.VolumeRebateProgramUpdated.program:type_name -> vega.VolumeRebateProgram
	110, // 210: vega.events.v1.TransactionResult.FailureDetails.errors:type_name -> vega.events.v1.TransactionResult.KeyErrors
	211, // [211:211] is the sub-list for method output_type
	211, // [211:211] is the sub-list for method input_type
	211, // [211:211] is the sub-list for extension type_name
	211, // [211:211] is the sub-list for extension extendee
	0,   // [0:211] is the sub-list for field type_name
}

func init() { file_vega_events_v1_events_proto_init() }
func file_vega_events_v1_events_proto_init() {
	if File_vega_events_v1_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vega_events_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketCommunityTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeWeightedNotionalPositionUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VestingBalancesSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyVestingSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyLockedBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyVestingBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeDiscountStatsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyVolumeDiscountStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VestingStatsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyVestingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeesStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferrerRewardsGenerated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakerFeesGenerated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyActivityStreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingPayments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingPeriodDataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopOrderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20MultiSigSignerAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20MultiSigSignerRemovedSubmitter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20MultiSigSignerRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOffGovernanceTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOffTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringGovernanceTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeLinking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20MultiSigSignerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20MultiSigThresholdSetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardPayoutEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorScoreEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationBalanceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFeesDiscount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerMovements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionResolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LossSocialization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionStateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleDistressed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistressedOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistressedPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorRankingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumKeyRotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolUpgradeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolUpgradeStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolUpgradeDataNodeReady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreSnapshotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpiredOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelledOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefereeSwitchedTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefereeJoinedTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralSetCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralSetStatsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefereeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefereeJoinedReferralSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralProgramStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralProgramUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralProgramEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeDiscountProgramStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeDiscountProgramUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeDiscountProgramEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaidLiquidityFeesStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyMarginModeUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyProfileUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsStatsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMemberStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePartyScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTeamScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRebateStatsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyVolumeRebateStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRebateProgramStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRebateProgramUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRebateProgramEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMM_ConcentratedLiquidityParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMM_Curve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResult_KeyErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResult_SuccessDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_events_v1_events_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResult_FailureDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_events_v1_events_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Transfer_OneOff)(nil),
		(*Transfer_Recurring)(nil),
		(*Transfer_OneOffGovernance)(nil),
		(*Transfer_RecurringGovernance)(nil),
	}
	file_vega_events_v1_events_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*TransactionResult_OrderSubmission)(nil),
		(*TransactionResult_OrderAmendment)(nil),
		(*TransactionResult_OrderCancellation)(nil),
		(*TransactionResult_Proposal)(nil),
		(*TransactionResult_VoteSubmission)(nil),
		(*TransactionResult_LiquidityProvisionSubmission)(nil),
		(*TransactionResult_WithdrawSubmission)(nil),
		(*TransactionResult_DelegateSubmission)(nil),
		(*TransactionResult_UndelegateSubmission)(nil),
		(*TransactionResult_LiquidityProvisionCancellation)(nil),
		(*TransactionResult_LiquidityProvisionAmendment)(nil),
		(*TransactionResult_Transfer)(nil),
		(*TransactionResult_CancelTransfer)(nil),
		(*TransactionResult_AnnounceNode)(nil),
		(*TransactionResult_OracleDataSubmission)(nil),
		(*TransactionResult_ProtocolUpgradeProposal)(nil),
		(*TransactionResult_IssueSignatures)(nil),
		(*TransactionResult_BatchMarketInstructions)(nil),
		(*TransactionResult_KeyRotateSubmission)(nil),
		(*TransactionResult_EthereumKeyRotateSubmission)(nil),
		(*TransactionResult_StopOrdersSubmission)(nil),
		(*TransactionResult_StopOrdersCancellation)(nil),
		(*TransactionResult_CreateReferralSet)(nil),
		(*TransactionResult_UpdateReferralSet)(nil),
		(*TransactionResult_ApplyReferralCode)(nil),
		(*TransactionResult_UpdateMarginMode)(nil),
		(*TransactionResult_JoinTeam)(nil),
		(*TransactionResult_BatchProposal)(nil),
		(*TransactionResult_UpdatePartyProfile)(nil),
		(*TransactionResult_SubmitAmm)(nil),
		(*TransactionResult_AmendAmm)(nil),
		(*TransactionResult_CancelAmm)(nil),
		(*TransactionResult_Success)(nil),
		(*TransactionResult_Failure)(nil),
	}
	file_vega_events_v1_events_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*TxErrorEvent_OrderSubmission)(nil),
		(*TxErrorEvent_OrderAmendment)(nil),
		(*TxErrorEvent_OrderCancellation)(nil),
		(*TxErrorEvent_Proposal)(nil),
		(*TxErrorEvent_VoteSubmission)(nil),
		(*TxErrorEvent_LiquidityProvisionSubmission)(nil),
		(*TxErrorEvent_WithdrawSubmission)(nil),
		(*TxErrorEvent_DelegateSubmission)(nil),
		(*TxErrorEvent_UndelegateSubmission)(nil),
		(*TxErrorEvent_LiquidityProvisionCancellation)(nil),
		(*TxErrorEvent_LiquidityProvisionAmendment)(nil),
		(*TxErrorEvent_Transfer)(nil),
		(*TxErrorEvent_CancelTransfer)(nil),
		(*TxErrorEvent_AnnounceNode)(nil),
		(*TxErrorEvent_OracleDataSubmission)(nil),
		(*TxErrorEvent_ProtocolUpgradeProposal)(nil),
		(*TxErrorEvent_IssueSignatures)(nil),
		(*TxErrorEvent_BatchMarketInstructions)(nil),
	}
	file_vega_events_v1_events_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[89].OneofWrappers = []interface{}{}
	file_vega_events_v1_events_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*BusEvent_TimeUpdate)(nil),
		(*BusEvent_LedgerMovements)(nil),
		(*BusEvent_PositionResolution)(nil),
		(*BusEvent_Order)(nil),
		(*BusEvent_Account)(nil),
		(*BusEvent_Party)(nil),
		(*BusEvent_Trade)(nil),
		(*BusEvent_MarginLevels)(nil),
		(*BusEvent_Proposal)(nil),
		(*BusEvent_Vote)(nil),
		(*BusEvent_MarketData)(nil),
		(*BusEvent_NodeSignature)(nil),
		(*BusEvent_LossSocialization)(nil),
		(*BusEvent_SettlePosition)(nil),
		(*BusEvent_SettleDistressed)(nil),
		(*BusEvent_MarketCreated)(nil),
		(*BusEvent_Asset)(nil),
		(*BusEvent_MarketTick)(nil),
		(*BusEvent_Withdrawal)(nil),
		(*BusEvent_Deposit)(nil),
		(*BusEvent_Auction)(nil),
		(*BusEvent_RiskFactor)(nil),
		(*BusEvent_NetworkParameter)(nil),
		(*BusEvent_LiquidityProvision)(nil),
		(*BusEvent_MarketUpdated)(nil),
		(*BusEvent_OracleSpec)(nil),
		(*BusEvent_OracleData)(nil),
		(*BusEvent_DelegationBalance)(nil),
		(*BusEvent_ValidatorScore)(nil),
		(*BusEvent_EpochEvent)(nil),
		(*BusEvent_ValidatorUpdate)(nil),
		(*BusEvent_StakeLinking)(nil),
		(*BusEvent_RewardPayout)(nil),
		(*BusEvent_Checkpoint)(nil),
		(*BusEvent_KeyRotation)(nil),
		(*BusEvent_StateVar)(nil),
		(*BusEvent_NetworkLimits)(nil),
		(*BusEvent_Transfer)(nil),
		(*BusEvent_RankingEvent)(nil),
		(*BusEvent_Erc20MultisigSignerEvent)(nil),
		(*BusEvent_Erc20MultisigSetThresholdEvent)(nil),
		(*BusEvent_Erc20MultisigSignerAdded)(nil),
		(*BusEvent_Erc20MultisigSignerRemoved)(nil),
		(*BusEvent_PositionStateEvent)(nil),
		(*BusEvent_EthereumKeyRotation)(nil),
		(*BusEvent_ProtocolUpgradeEvent)(nil),
		(*BusEvent_BeginBlock)(nil),
		(*BusEvent_EndBlock)(nil),
		(*BusEvent_ProtocolUpgradeStarted)(nil),
		(*BusEvent_SettleMarket)(nil),
		(*BusEvent_TransactionResult)(nil),
		(*BusEvent_CoreSnapshotEvent)(nil),
		(*BusEvent_ProtocolUpgradeDataNodeReady)(nil),
		(*BusEvent_DistressedOrders)(nil),
		(*BusEvent_ExpiredOrders)(nil),
		(*BusEvent_DistressedPositions)(nil),
		(*BusEvent_StopOrder)(nil),
		(*BusEvent_FundingPeriod)(nil),
		(*BusEvent_FundingPeriodDataPoint)(nil),
		(*BusEvent_TeamCreated)(nil),
		(*BusEvent_TeamUpdated)(nil),
		(*BusEvent_RefereeSwitchedTeam)(nil),
		(*BusEvent_RefereeJoinedTeam)(nil),
		(*BusEvent_ReferralProgramStarted)(nil),
		(*BusEvent_ReferralProgramUpdated)(nil),
		(*BusEvent_ReferralProgramEnded)(nil),
		(*BusEvent_ReferralSetCreated)(nil),
		(*BusEvent_RefereeJoinedReferralSet)(nil),
		(*BusEvent_PartyActivityStreak)(nil),
		(*BusEvent_VolumeDiscountProgramStarted)(nil),
		(*BusEvent_VolumeDiscountProgramUpdated)(nil),
		(*BusEvent_VolumeDiscountProgramEnded)(nil),
		(*BusEvent_ReferralSetStatsUpdated)(nil),
		(*BusEvent_VestingStatsUpdated)(nil),
		(*BusEvent_VolumeDiscountStatsUpdated)(nil),
		(*BusEvent_FeesStats)(nil),
		(*BusEvent_FundingPayments)(nil),
		(*BusEvent_PaidLiquidityFeesStats)(nil),
		(*BusEvent_VestingBalancesSummary)(nil),
		(*BusEvent_TransferFees)(nil),
		(*BusEvent_TransferFeesDiscount)(nil),
		(*BusEvent_PartyMarginModeUpdated)(nil),
		(*BusEvent_PartyProfileUpdated)(nil),
		(*BusEvent_TeamsStatsUpdated)(nil),
		(*BusEvent_TimeWeightedNotionalPositionUpdated)(nil),
		(*BusEvent_CancelledOrders)(nil),
		(*BusEvent_GameScores)(nil),
		(*BusEvent_Amm)(nil),
		(*BusEvent_VolumeRebateProgramStarted)(nil),
		(*BusEvent_VolumeRebateProgramUpdated)(nil),
		(*BusEvent_VolumeRebateProgramEnded)(nil),
		(*BusEvent_VolumeRebateStatsUpdated)(nil),
		(*BusEvent_MarketCommunityTags)(nil),
		(*BusEvent_Market)(nil),
		(*BusEvent_TxErrEvent)(nil),
	}
	file_vega_events_v1_events_proto_msgTypes[98].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_events_v1_events_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   103,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_events_v1_events_proto_goTypes,
		DependencyIndexes: file_vega_events_v1_events_proto_depIdxs,
		EnumInfos:         file_vega_events_v1_events_proto_enumTypes,
		MessageInfos:      file_vega_events_v1_events_proto_msgTypes,
	}.Build()
	File_vega_events_v1_events_proto = out.File
	file_vega_events_v1_events_proto_rawDesc = nil
	file_vega_events_v1_events_proto_goTypes = nil
	file_vega_events_v1_events_proto_depIdxs = nil
}
