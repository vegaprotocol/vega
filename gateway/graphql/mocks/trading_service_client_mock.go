// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/gateway/graphql (interfaces: TradingServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	api "code.vegaprotocol.io/vega/proto/api"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTradingServiceClient is a mock of TradingServiceClient interface
type MockTradingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTradingServiceClientMockRecorder
}

// MockTradingServiceClientMockRecorder is the mock recorder for MockTradingServiceClient
type MockTradingServiceClientMockRecorder struct {
	mock *MockTradingServiceClient
}

// NewMockTradingServiceClient creates a new mock instance
func NewMockTradingServiceClient(ctrl *gomock.Controller) *MockTradingServiceClient {
	mock := &MockTradingServiceClient{ctrl: ctrl}
	mock.recorder = &MockTradingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTradingServiceClient) EXPECT() *MockTradingServiceClientMockRecorder {
	return m.recorder
}

// PrepareAmendOrder mocks base method
func (m *MockTradingServiceClient) PrepareAmendOrder(arg0 context.Context, arg1 *api.PrepareAmendOrderRequest, arg2 ...grpc.CallOption) (*api.PrepareAmendOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareAmendOrder", varargs...)
	ret0, _ := ret[0].(*api.PrepareAmendOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareAmendOrder indicates an expected call of PrepareAmendOrder
func (mr *MockTradingServiceClientMockRecorder) PrepareAmendOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAmendOrder", reflect.TypeOf((*MockTradingServiceClient)(nil).PrepareAmendOrder), varargs...)
}

// PrepareCancelOrder mocks base method
func (m *MockTradingServiceClient) PrepareCancelOrder(arg0 context.Context, arg1 *api.PrepareCancelOrderRequest, arg2 ...grpc.CallOption) (*api.PrepareCancelOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareCancelOrder", varargs...)
	ret0, _ := ret[0].(*api.PrepareCancelOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareCancelOrder indicates an expected call of PrepareCancelOrder
func (mr *MockTradingServiceClientMockRecorder) PrepareCancelOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareCancelOrder", reflect.TypeOf((*MockTradingServiceClient)(nil).PrepareCancelOrder), varargs...)
}

// PrepareLiquidityProvision mocks base method
func (m *MockTradingServiceClient) PrepareLiquidityProvision(arg0 context.Context, arg1 *api.PrepareLiquidityProvisionRequest, arg2 ...grpc.CallOption) (*api.PrepareLiquidityProvisionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareLiquidityProvision", varargs...)
	ret0, _ := ret[0].(*api.PrepareLiquidityProvisionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareLiquidityProvision indicates an expected call of PrepareLiquidityProvision
func (mr *MockTradingServiceClientMockRecorder) PrepareLiquidityProvision(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareLiquidityProvision", reflect.TypeOf((*MockTradingServiceClient)(nil).PrepareLiquidityProvision), varargs...)
}

// PrepareProposal mocks base method
func (m *MockTradingServiceClient) PrepareProposal(arg0 context.Context, arg1 *api.PrepareProposalRequest, arg2 ...grpc.CallOption) (*api.PrepareProposalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareProposal", varargs...)
	ret0, _ := ret[0].(*api.PrepareProposalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareProposal indicates an expected call of PrepareProposal
func (mr *MockTradingServiceClientMockRecorder) PrepareProposal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareProposal", reflect.TypeOf((*MockTradingServiceClient)(nil).PrepareProposal), varargs...)
}

// PrepareSubmitOrder mocks base method
func (m *MockTradingServiceClient) PrepareSubmitOrder(arg0 context.Context, arg1 *api.PrepareSubmitOrderRequest, arg2 ...grpc.CallOption) (*api.PrepareSubmitOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareSubmitOrder", varargs...)
	ret0, _ := ret[0].(*api.PrepareSubmitOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareSubmitOrder indicates an expected call of PrepareSubmitOrder
func (mr *MockTradingServiceClientMockRecorder) PrepareSubmitOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareSubmitOrder", reflect.TypeOf((*MockTradingServiceClient)(nil).PrepareSubmitOrder), varargs...)
}

// PrepareVote mocks base method
func (m *MockTradingServiceClient) PrepareVote(arg0 context.Context, arg1 *api.PrepareVoteRequest, arg2 ...grpc.CallOption) (*api.PrepareVoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareVote", varargs...)
	ret0, _ := ret[0].(*api.PrepareVoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareVote indicates an expected call of PrepareVote
func (mr *MockTradingServiceClientMockRecorder) PrepareVote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareVote", reflect.TypeOf((*MockTradingServiceClient)(nil).PrepareVote), varargs...)
}

// PrepareWithdraw mocks base method
func (m *MockTradingServiceClient) PrepareWithdraw(arg0 context.Context, arg1 *api.PrepareWithdrawRequest, arg2 ...grpc.CallOption) (*api.PrepareWithdrawResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareWithdraw", varargs...)
	ret0, _ := ret[0].(*api.PrepareWithdrawResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareWithdraw indicates an expected call of PrepareWithdraw
func (mr *MockTradingServiceClientMockRecorder) PrepareWithdraw(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareWithdraw", reflect.TypeOf((*MockTradingServiceClient)(nil).PrepareWithdraw), varargs...)
}

// PropagateChainEvent mocks base method
func (m *MockTradingServiceClient) PropagateChainEvent(arg0 context.Context, arg1 *api.PropagateChainEventRequest, arg2 ...grpc.CallOption) (*api.PropagateChainEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PropagateChainEvent", varargs...)
	ret0, _ := ret[0].(*api.PropagateChainEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropagateChainEvent indicates an expected call of PropagateChainEvent
func (mr *MockTradingServiceClientMockRecorder) PropagateChainEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropagateChainEvent", reflect.TypeOf((*MockTradingServiceClient)(nil).PropagateChainEvent), varargs...)
}

// SubmitTransaction mocks base method
func (m *MockTradingServiceClient) SubmitTransaction(arg0 context.Context, arg1 *api.SubmitTransactionRequest, arg2 ...grpc.CallOption) (*api.SubmitTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitTransaction", varargs...)
	ret0, _ := ret[0].(*api.SubmitTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransaction indicates an expected call of SubmitTransaction
func (mr *MockTradingServiceClientMockRecorder) SubmitTransaction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransaction", reflect.TypeOf((*MockTradingServiceClient)(nil).SubmitTransaction), varargs...)
}
