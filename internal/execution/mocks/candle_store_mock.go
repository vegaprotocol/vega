// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/internal/execution (interfaces: CandleStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCandleStore is a mock of CandleStore interface
type MockCandleStore struct {
	ctrl     *gomock.Controller
	recorder *MockCandleStoreMockRecorder
}

// MockCandleStoreMockRecorder is the mock recorder for MockCandleStore
type MockCandleStoreMockRecorder struct {
	mock *MockCandleStore
}

// NewMockCandleStore creates a new mock instance
func NewMockCandleStore(ctrl *gomock.Controller) *MockCandleStore {
	mock := &MockCandleStore{ctrl: ctrl}
	mock.recorder = &MockCandleStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCandleStore) EXPECT() *MockCandleStoreMockRecorder {
	return m.recorder
}

// AddTradeToBuffer mocks base method
func (m *MockCandleStore) AddTradeToBuffer(arg0 proto.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTradeToBuffer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTradeToBuffer indicates an expected call of AddTradeToBuffer
func (mr *MockCandleStoreMockRecorder) AddTradeToBuffer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTradeToBuffer", reflect.TypeOf((*MockCandleStore)(nil).AddTradeToBuffer), arg0)
}

// GenerateCandlesFromBuffer mocks base method
func (m *MockCandleStore) GenerateCandlesFromBuffer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCandlesFromBuffer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateCandlesFromBuffer indicates an expected call of GenerateCandlesFromBuffer
func (mr *MockCandleStoreMockRecorder) GenerateCandlesFromBuffer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCandlesFromBuffer", reflect.TypeOf((*MockCandleStore)(nil).GenerateCandlesFromBuffer), arg0)
}

// StartNewBuffer mocks base method
func (m *MockCandleStore) StartNewBuffer(arg0 string, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartNewBuffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartNewBuffer indicates an expected call of StartNewBuffer
func (mr *MockCandleStoreMockRecorder) StartNewBuffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNewBuffer", reflect.TypeOf((*MockCandleStore)(nil).StartNewBuffer), arg0, arg1)
}
