// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/internal/api/endpoints/grpc (interfaces: MarketService)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarketService is a mock of MarketService interface
type MockMarketService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketServiceMockRecorder
}

// MockMarketServiceMockRecorder is the mock recorder for MockMarketService
type MockMarketServiceMockRecorder struct {
	mock *MockMarketService
}

// NewMockMarketService creates a new mock instance
func NewMockMarketService(ctrl *gomock.Controller) *MockMarketService {
	mock := &MockMarketService{ctrl: ctrl}
	mock.recorder = &MockMarketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketService) EXPECT() *MockMarketServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockMarketService) GetAll(arg0 context.Context) ([]*proto.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*proto.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockMarketServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMarketService)(nil).GetAll), arg0)
}

// GetByID mocks base method
func (m *MockMarketService) GetByID(arg0 context.Context, arg1 string) (*proto.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockMarketServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMarketService)(nil).GetByID), arg0, arg1)
}

// GetDepth mocks base method
func (m *MockMarketService) GetDepth(arg0 context.Context, arg1 string) (*proto.MarketDepth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepth", arg0, arg1)
	ret0, _ := ret[0].(*proto.MarketDepth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepth indicates an expected call of GetDepth
func (mr *MockMarketServiceMockRecorder) GetDepth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepth", reflect.TypeOf((*MockMarketService)(nil).GetDepth), arg0, arg1)
}

// ObserveDepth mocks base method
func (m *MockMarketService) ObserveDepth(arg0 context.Context, arg1 int, arg2 string) (<-chan *proto.MarketDepth, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveDepth", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan *proto.MarketDepth)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// ObserveDepth indicates an expected call of ObserveDepth
func (mr *MockMarketServiceMockRecorder) ObserveDepth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDepth", reflect.TypeOf((*MockMarketService)(nil).ObserveDepth), arg0, arg1, arg2)
}
