syntax = "proto3";

package vega.snapshot.v1;

import "vega/assets.proto";
import "vega/chain_events.proto";
import "vega/checkpoint/v1/checkpoint.proto";
import "vega/data/v1/data.proto";
import "vega/events/v1/events.proto";
import "vega/governance.proto";
import "vega/markets.proto";
import "vega/vega.proto";

option go_package = "code.vegaprotocol.io/vega/protos/vega/snapshot/v1";

enum Format {
  // Default value, always invalid
  FORMAT_UNSPECIFIED = 0;
  // Standard proto encoding
  FORMAT_PROTO = 1;
  // Compressed proto, might come in handy
  FORMAT_PROTO_COMPRESSED = 2;
  // Simple JSON serialisation, probably not going to be used
  FORMAT_JSON = 3;
}

message Snapshot {
  uint64 height = 1;
  Format format = 2;
  uint32 chunks = 3;
  bytes hash = 4;
  bytes metadata = 5;
}

// NodeHash represents an exported node from the AVL tree and contains all the
// data necessary to reconstruct an identical copy of the AVL tree after it's
// been serialised
message NodeHash {
  // Node's full key, for example epoch.all
  string key = 3;
  // Hash of the node's value
  string hash = 4;
  // Height of the node in the tree
  int32 height = 5;
  // Version of that node i.e., how many times its value has changed during tree
  // updates
  int64 version = 6;
  // Whether or not the node contains a snapshot payload, only leaf nodes in the
  // AVL contain payloads
  bool is_leaf = 7;
}

message Metadata {
  int64 version = 1;
  repeated string chunk_hashes = 2;
  repeated NodeHash node_hashes = 3;
  string protocol_version = 4;
  bool protocol_upgrade = 5;
}

// Chunk is simply an as-is chunk belonging to a snapshot
// not sure how usable this type would be
message Chunk {
  repeated Payload data = 1;
  int64 nr = 2; // in case of multi-part data, this is chunk nr...
  int64 of = 3; // ...of a total of N chunks
}

message Payload {
  oneof data {
    ActiveAssets active_assets = 1;
    PendingAssets pending_assets = 2;
    BankingWithdrawals banking_withdrawals = 3;
    BankingDeposits banking_deposits = 4;
    BankingSeen banking_seen = 5;
    BankingAssetActions banking_asset_actions = 6;
    Checkpoint checkpoint = 7;
    CollateralAccounts collateral_accounts = 8;
    CollateralAssets collateral_assets = 9;
    DelegationActive delegation_active = 10;
    DelegationPending delegation_pending = 11;
    DelegationAuto delegation_auto = 12;
    GovernanceActive governance_active = 13;
    GovernanceEnacted governance_enacted = 14;
    StakingAccounts staking_accounts = 15;
    MatchingBook matching_book = 16;
    NetParams network_parameters = 17;
    ExecutionMarkets execution_markets = 18;
    MarketPositions market_positions = 19;
    AppState app_state = 20;
    EpochState epoch = 21;
    RewardsPendingPayouts rewards_pending_payouts = 23;
    GovernanceNode governance_node = 24;
    LimitState limit_state = 25;
    VoteSpamPolicy vote_spam_policy = 26;
    SimpleSpamPolicy simple_spam_policy = 27;
    Notary notary = 28;
    EventForwarder event_forwarder = 31;
    StakeVerifierDeposited stake_verifier_deposited = 32;
    StakeVerifierRemoved stake_verifier_removed = 33;
    Witness witness = 34;
    DelegationLastReconciliationTime delegation_last_reconciliation_time = 35;
    Topology topology = 36;
    OracleDataBatch oracle_data = 37;
    LiquidityParameters liquidity_parameters = 38;
    LiquidityPendingProvisions liquidity_pending_provisions = 39;
    LiquidityPartiesLiquidityOrders liquidity_parties_liquidity_orders = 40;
    LiquidityPartiesOrders liquidity_parties_orders = 41;
    LiquidityProvisions liquidity_provisions = 42;
    LiquiditySupplied liquidity_supplied = 43;
    LiquidityTarget liquidity_target = 44;
    FloatingPointConsensus floating_point_consensus = 46;
    MarketTracker market_tracker = 47;
    BankingRecurringTransfers banking_recurring_transfers = 49;
    BankingScheduledTransfers banking_scheduled_transfers = 50;
    ERC20MultiSigTopologyVerified erc20_multisig_topology_verified = 51;
    ERC20MultiSigTopologyPending erc20_multisig_topology_pending = 52;
    ProofOfWork proof_of_work = 53;
    PendingAssetUpdates pending_asset_updates = 54;
    ProtocolUpgradeProposals protocol_upgrade_proposals = 55;
    BankingBridgeState banking_bridge_state = 56;
    SettlementState settlement_state = 57;
    LiquidityScores liquidity_scores = 58;
    SpotLiquidityTarget spot_liquidity_target = 59;
    BankingRecurringGovernanceTransfers banking_recurring_governance_transfers = 60;
    BankingScheduledGovernanceTransfers banking_scheduled_governance_transfers = 61;
    EthContractCallResults eth_contract_call_results = 62;
    EthOracleVerifierLastBlock eth_oracle_verifier_last_block = 63;
    LiquidityV2Provisions liquidity_v2_provisions = 64;
    LiquidityV2PendingProvisions liquidity_v2_pending_provisions = 65;
    LiquidityV2Performances liquidity_v2_performances = 66;
    LiquidityV2Supplied liquidity_v2_supplied = 67;
    LiquidityV2Scores liquidity_v2_scores = 68;
    HoldingAccountTracker holding_account_tracker = 69;
    Teams teams = 70;
    TeamSwitches team_switches = 71;
    Vesting vesting = 72;
    ReferralProgramData referral_program = 73;
    ActivityStreak activity_streak = 76;
    VolumeDiscountProgram volume_discount_program = 77;
    LiquidityV2Parameters liquidity_v2_parameters = 78;
    LiquidityV2PaidFeesStats liquidity_v2_paid_fees_stats = 79;
    Liquidation liquidation = 80;
    BankingTransferFeeDiscounts banking_transfer_fee_discounts = 81;
    GovernanceBatchActive governance_batch_active = 82;
    Parties parties = 83;
    L2EthOracles l2_eth_oracles = 84;
    EthOracleVerifierMisc eth_oracle_verifier_misc = 85;
  }
}

message OrderHoldingQuantities {
  string id = 1;
  string quantity = 2;
  string fee = 3;
}

message HoldingAccountTracker {
  string market_id = 1;
  repeated OrderHoldingQuantities order_holding = 2;
}

message TimestampedTotalStake {
  uint64 total_stake = 1;
  int64 time = 2;
}

message TimestampedOpenInterest {
  uint64 open_interest = 1;
  int64 time = 2;
}

message LiquidityTarget {
  string market_id = 1;
  int64 current_time = 2;
  int64 scheduled_truncate = 3;
  repeated uint64 current_open_interests = 4;
  repeated TimestampedOpenInterest previous_open_interests = 5;
  TimestampedOpenInterest max_open_interests = 6;
}

message SpotLiquidityTarget {
  string market_id = 1;
  int64 current_time = 2;
  int64 scheduled_truncate = 3;
  repeated uint64 current_total_stake = 4;
  repeated TimestampedTotalStake previous_total_stake = 5;
  TimestampedTotalStake max_total_stake = 6;
}

message LiquidityOffsetProbabilityPair {
  uint32 offset = 1;
  string probability = 2;
}

message LiquiditySupplied {
  string market_id = 1;
  bool consensus_reached = 2;
  repeated LiquidityOffsetProbabilityPair bid_cache = 3;
  repeated LiquidityOffsetProbabilityPair ask_cache = 4;
}

message OracleDataBatch {
  repeated OracleData oracle_data = 1;
}

message OracleData {
  repeated vega.data.v1.Signer signers = 1;
  repeated OracleDataPair data = 2;
  repeated vega.data.v1.Property meta_data = 3;
}

message OracleDataPair {
  string key = 1;
  string value = 2;
}

message Witness {
  repeated Resource resources = 1;
}

message Resource {
  string id = 1;
  int64 check_until = 2;
  repeated string votes = 3;
  uint32 state = 4;
}

message EventForwarderBucket {
  int64 ts = 1;
  repeated string hashes = 2;
}

message EventForwarder {
  // this is deprecated, use the other one now
  repeated string acked_events = 1;
  repeated EventForwarderBucket buckets = 2;
}

message CollateralAccounts {
  repeated vega.Account accounts = 1;
  int64 next_balance_snapshot = 2;
}

message CollateralAssets {
  repeated vega.Asset assets = 1;
}

message ActiveAssets {
  repeated vega.Asset assets = 1;
}

message PendingAssets {
  repeated vega.Asset assets = 1;
}

message PendingAssetUpdates {
  repeated vega.Asset assets = 1;
}

message Withdrawal {
  string ref = 1;
  vega.Withdrawal withdrawal = 2;
}

message Deposit {
  string id = 1;
  vega.Deposit deposit = 2;
}

message TxRef {
  string asset = 1;
  uint64 block_nr = 2;
  string hash = 3;
  uint64 log_index = 4;
}

message BankingWithdrawals {
  repeated Withdrawal withdrawals = 1;
}

message BankingDeposits {
  repeated Deposit deposit = 1;
}

message BankingSeen {
  repeated string refs = 1;
  uint64 last_seen_eth_block = 2;
}

message BankingAssetActions {
  repeated vega.checkpoint.v1.AssetAction asset_action = 1;
}

message BankingRecurringTransfers {
  vega.checkpoint.v1.RecurringTransfers recurring_transfers = 1;
}

message BankingScheduledTransfers {
  repeated vega.checkpoint.v1.ScheduledTransferAtTime transfers_at_time = 1;
}

message BankingRecurringGovernanceTransfers {
  repeated vega.checkpoint.v1.GovernanceTransfer recurring_transfers = 1;
}

message BankingScheduledGovernanceTransfers {
  repeated vega.checkpoint.v1.ScheduledGovernanceTransferAtTime transfers_at_time = 1;
}

message BankingBridgeState {
  vega.checkpoint.v1.BridgeState bridge_state = 1;
}

message Checkpoint {
  int64 next_cp = 1;
}

message DelegationLastReconciliationTime {
  int64 last_reconciliation_time = 1;
}

message DelegationActive {
  repeated vega.Delegation delegations = 1;
}

message DelegationPending {
  repeated vega.Delegation delegations = 1;
  repeated vega.Delegation undelegation = 2;
}

message DelegationAuto {
  repeated string parties = 1;
}

message ProposalData {
  vega.Proposal proposal = 1;
  repeated vega.Vote yes = 2;
  repeated vega.Vote no = 3;
  repeated vega.Vote invalid = 4;
}

message GovernanceEnacted {
  repeated ProposalData proposals = 1;
}

message GovernanceActive {
  repeated ProposalData proposals = 1;
}

message BatchProposalData {
  ProposalData batch_proposal = 1;
  repeated vega.Proposal proposals = 2;
}

message GovernanceBatchActive {
  repeated BatchProposalData batch_proposals = 1;
}

message GovernanceNode {
  repeated vega.Proposal proposals = 1;
  repeated ProposalData proposal_data = 2; // includes votes
}

message StakingAccount {
  string party = 1;
  string balance = 2;
  repeated vega.events.v1.StakeLinking events = 3;
}

message StakingAccounts {
  repeated StakingAccount accounts = 1;
  string staking_asset_total_supply = 2;
  vega.StakeTotalSupply pending_stake_total_supply = 3;
}

message MatchingBook {
  string market_id = 1;
  repeated vega.Order buy = 2;
  repeated vega.Order sell = 3;
  string last_traded_price = 4;
  bool auction = 5;
  uint64 batch_id = 6;
  repeated string pegged_order_ids = 7;
}

message NetParams {
  repeated vega.NetworkParameter params = 1;
}

message DecimalMap {
  int64 key = 1;
  string val = 2;
}

message TimePrice {
  int64 time = 1;
  string price = 2;
}

message PriceVolume {
  string price = 1;
  uint64 volume = 2;
}

message PriceRange {
  string min = 1;
  string max = 2;
  string ref = 3;
}

message PriceBound {
  bool active = 1;
  string up_factor = 2;
  string down_factor = 3;
  vega.PriceMonitoringTrigger trigger = 4;
}

message PriceRangeCache {
  PriceBound bound = 1;
  PriceRange range = 2;
}

message CurrentPrice {
  string price = 1;
  uint64 volume = 2;
}

message PastPrice {
  int64 time = 1;
  string volume_weighted_price = 2;
}

message PriceMonitor {
  bool initialised = 3;
  repeated DecimalMap fp_horizons = 4;
  int64 now = 5;
  int64 update = 6;
  repeated PriceBound bounds = 7;
  int64 price_range_cache_time = 8;
  repeated PriceRangeCache price_range_cache = 9;
  int64 ref_price_cache_time = 10;
  repeated DecimalMap ref_price_cache = 11;
  repeated CurrentPrice prices_now = 12;
  repeated PastPrice prices_past = 13;
  bool consensus_reached = 14;
}

message AuctionState {
  vega.Market.TradingMode mode = 1;
  vega.Market.TradingMode default_mode = 2;
  vega.AuctionTrigger trigger = 3;
  int64 begin = 4;
  vega.AuctionDuration end = 5;
  bool start = 6;
  bool stop = 7;
  vega.AuctionTrigger extension = 8;
  bool extension_event_sent = 9;
}

message EquityShareLP {
  string id = 1;
  string stake = 2;
  string share = 3;
  string avg = 4;
  string vshare = 5;
}

message EquityShare {
  string mvp = 1;
  bool opening_auction_ended = 2;
  repeated EquityShareLP lps = 3;
  string r = 4;
  string p_mvp = 5;
}

message FeeSplitter {
  int64 time_window_start = 1;
  string trade_value = 2;
  string avg = 3;
  uint64 window = 4;
}

message SpotMarket {
  vega.Market market = 1;
  PriceMonitor price_monitor = 2;
  AuctionState auction_state = 3;
  PeggedOrders pegged_orders = 4;
  repeated vega.Order expiring_orders = 5;
  string last_best_bid = 6;
  string last_best_ask = 7;
  string last_mid_bid = 8;
  string last_mid_ask = 9;
  string last_market_value_proxy = 10;
  int64 last_equity_share_distributed = 11;
  EquityShare equity_share = 12;
  string current_mark_price = 13;
  FeeSplitter fee_splitter = 14;
  int64 next_mark_to_market = 15;
  string last_traded_price = 16;
  repeated string parties = 17;
  bool closed = 18;
  StopOrders stop_orders = 19;
  repeated vega.Order expiring_stop_orders = 20;
  vega.events.v1.FeesStats fees_stats = 21;
}

message Market {
  vega.Market market = 1;
  PriceMonitor price_monitor = 2;
  AuctionState auction_state = 3;
  PeggedOrders pegged_orders = 4;
  repeated vega.Order expiring_orders = 5;
  string last_best_bid = 6;
  string last_best_ask = 7;
  string last_mid_bid = 8;
  string last_mid_ask = 9;
  string last_market_value_proxy = 10;
  int64 last_equity_share_distributed = 11;
  EquityShare equity_share = 12;
  string current_mark_price = 13;
  string risk_factor_short = 14;
  string risk_factor_long = 15;
  bool risk_factor_consensus_reached = 16;
  FeeSplitter fee_splitter = 17;
  string settlement_data = 18;
  int64 next_mark_to_market = 19;
  string last_traded_price = 20;
  repeated string parties = 21;
  bool closed = 22;
  bool succeeded = 23;
  StopOrders stop_orders = 24;
  repeated vega.Order expiring_stop_orders = 25;
  Product product = 26;
  vega.events.v1.FeesStats fees_stats = 27;
  repeated PartyMarginFactor party_margin_factor = 28;
  CompositePriceCalculator mark_price_calculator = 29;
  optional CompositePriceCalculator internal_composite_price_calculator = 30;
  int64 next_internal_composite_price_calc = 31;
  AmmState amm = 32;
}

message PartyMarginFactor {
  string party = 1;
  string margin_factor = 2;
}

message AmmState {
  repeated StringMapEntry sqrter = 1;
  repeated StringMapEntry sub_accounts = 2;
  repeated PoolMapEntry pools = 3;
}

message PoolMapEntry {
  message Curve {
    string l = 1;
    string high = 2;
    string low = 3;
    string rf = 4;
  }

  message Pool {
    string id = 1;
    string sub_account = 2;
    string commitment = 3;
    vega.events.v1.AMMPool.ConcentratedLiquidityParameters parameters = 4;
    string asset = 5;
    string market = 6;
    Curve lower = 7;
    Curve upper = 8;
  }

  string party = 1;
  Pool pool = 2;
}

message StringMapEntry {
  string key = 1;
  string value = 2;
}


// eventually support multiple products
message Product {
  oneof type {
    Perps perps = 1;
  }
}

message DataPoint {
  string price = 1;
  int64 timestamp = 2;
}

message AuctionIntervals {
  repeated int64 t = 1;
  int64 auction_start = 2;
  int64 total = 3;
}

message TWAPData {
  int64 start = 1;
  int64 end = 2;
  string sum_product = 3;
}

message Perps {
  string id = 1;
  repeated DataPoint external_data_point = 2;
  repeated DataPoint internal_data_point = 3;
  uint64 seq = 4;
  int64 started_at = 5;
  TWAPData external_twap_data = 6;
  TWAPData internal_twap_data = 7;
  AuctionIntervals auction_intervals = 8;
}

message OrdersAtPrice {
  string price = 1;
  repeated string orders = 2;
}

message PricedStopOrders {
  repeated OrdersAtPrice falls_bellow = 1;
  repeated OrdersAtPrice rises_above = 2;
}

message TrailingStopOrders {
  string last_seen_price = 1;
  repeated OffsetsAtPrice falls_bellow = 2;
  repeated OffsetsAtPrice rises_above = 3;
}

message OrdersAtOffset {
  string offset = 1;
  repeated string orders = 2;
}

message OffsetsAtPrice {
  string price = 1;
  repeated OrdersAtOffset offsets = 2;
}

message StopOrders {
  repeated events.v1.StopOrderEvent stop_orders = 1;
  PricedStopOrders priced_stop_orders = 2;
  TrailingStopOrders trailing_stop_orders = 3;
}

message PeggedOrders {
  repeated vega.Order parked_orders = 2;
}

message SLANetworkParams {
  string bond_penalty_factor = 1;
  string early_exit_penalty = 2;
  string max_liquidity_fee = 3;
  string non_performance_bond_penalty_max = 4;
  string non_performance_bond_penalty_slope = 5;
  string stake_to_ccy_volume = 6;
  int64 providers_fee_calculation_time_step = 7;
}

message ExecutionMarkets {
  repeated Market markets = 1;
  repeated SpotMarket spot_markets = 2;
  repeated vega.checkpoint.v1.MarketState settled_markets = 3;
  repeated Successors successors = 4;
  repeated string market_ids = 5;
  SLANetworkParams sla_network_params = 6;
}

message Successors {
  string parent_market = 1;
  repeated string successor_markets = 2;
}

message Position {
  string party_id = 1;
  int64 size = 2;
  int64 buy = 3;
  int64 sell = 4;
  string price = 5;
  string buy_sum_product = 6;
  string sell_sum_product = 7;
  bool distressed = 8;
  bytes average_entry_price = 9;
}

message MarketPositions {
  string market_id = 1;
  repeated Position positions = 2;
  repeated PartyPositionStats parties_records = 3;
}

message PartyPositionStats {
  string party = 1;
  optional uint64 latest_open_interest = 2;
  optional uint64 lowest_open_interest = 3;
  optional uint64 traded_volume = 4;
}

message SettlementState {
  string market_id = 1;
  string last_mark_price = 2;
  repeated LastSettledPosition last_settled_positions = 3;
  repeated SettlementTrade trades = 4;
}

message LastSettledPosition {
  string party = 1;
  int64 settled_position = 2;
}

message SettlementTrade {
  string party_id = 1;
  string price = 2;
  string market_price = 3;
  int64 size = 4;
  int64 new_size = 5;
}

message AppState {
  uint64 height = 1;
  string block = 2;
  int64 time = 3;
  string chain_id = 4;
  string protocol_version = 5;
  bool protocol_upgrade = 6;
}

// EpochState details
message EpochState {
  // Sequence number that increases by one each epoch
  uint64 seq = 1;
  // Time at which this epoch started
  int64 start_time = 3;
  // Time at which this epoch should end
  int64 expire_time = 4;
  // Ready to start a new epoch
  bool ready_to_start_new_epoch = 6;
  // Ready to end epoch
  bool ready_to_end_epoch = 7;
}

message RewardsPendingPayouts {
  repeated ScheduledRewardsPayout scheduled_rewards_payout = 1;
}

message ScheduledRewardsPayout {
  int64 payout_time = 1;
  repeated RewardsPayout rewards_payout = 2;
}

message RewardsPayout {
  string from_account = 1;
  string asset = 2;
  repeated RewardsPartyAmount reward_party_amount = 3;
  string total_reward = 4;
  string epoch_seq = 5;
  int64 timestamp = 6;
}

message RewardsPartyAmount {
  string party = 1;
  string amount = 2;
}

// LimitState details
message LimitState {
  // Number of blocks into the bootstrapping phase
  uint32 block_count = 1;
  // Whether or not the limit on market proposals has been lifted
  bool can_propose_market = 2;
  // Whether or not the limit on asset proposals has been lifted
  bool can_propose_asset = 3;
  // Whether or not the genesis state is loaded
  bool genesis_loaded = 4;
  // Fields derived from the genesis state
  bool propose_market_enabled = 5;
  bool propose_asset_enabled = 6;
  int64 propose_market_enabled_from = 7;
  int64 propose_asset_enabled_from = 8;
  bool propose_spot_market_enabled = 9;
  bool propose_perps_market_enabled = 10;
  bool can_use_amm_enabled = 11;
}

message VoteSpamPolicy {
  repeated PartyProposalVoteCount party_to_vote = 1;
  repeated BannedParty banned_parties = 2;
  repeated PartyTokenBalance token_balance = 3;
  repeated BlockRejectStats recent_blocks_reject_stats = 4;
  uint64 current_block_index = 5;
  uint64 last_increase_block = 6;
  uint64 current_epoch_seq = 7;
  string min_voting_tokens_factor = 8;
}

message PartyProposalVoteCount {
  string party = 1;
  string proposal = 2;
  uint64 count = 3;
}

message PartyTokenBalance {
  string party = 1;
  string balance = 2;
}

message BlockRejectStats {
  uint64 rejected = 1;
  uint64 total = 2;
}

message SpamPartyTransactionCount {
  string party = 1;
  uint64 count = 2;
}

message SimpleSpamPolicy {
  string policy_name = 1;
  repeated SpamPartyTransactionCount party_to_count = 2;
  repeated BannedParty banned_parties = 3;
  repeated PartyTokenBalance token_balance = 4;
  uint64 current_epoch_seq = 5;
}

message NotarySigs {
  string id = 1;
  int32 kind = 2;
  string node = 3;
  string sig = 4;
  bool pending = 5;
}

message Notary {
  repeated NotarySigs notary_sigs = 1;
}

message StakeVerifierDeposited {
  repeated StakeVerifierPending pending_deposited = 1;
}

message StakeVerifierRemoved {
  repeated StakeVerifierPending pending_removed = 1;
}

message StakeVerifierPending {
  string ethereum_address = 1;
  string vega_public_key = 2;
  string amount = 3;
  int64 block_time = 4;
  uint64 block_number = 5;
  uint64 log_index = 6;
  string tx_id = 7;
  string id = 8;
}

message L2EthOracles {
  repeated ChainIdEthOracles chain_id_eth_oracles = 1;
}

message ChainIdEthOracles {
  string source_chain_id = 1;
  EthOracleVerifierLastBlock last_block = 2;
  EthContractCallResults call_results = 3;
  EthOracleVerifierMisc misc = 4;
}

message EthOracleVerifierLastBlock {
  uint64 block_height = 1;
  uint64 block_time = 2;
}

message EthOracleVerifierMisc {
  repeated EthVerifierBucket buckets = 1;
  EthOracleVerifierLastBlock patch_block = 2;
}

message EthContractCallResults {
  repeated EthContractCallResult pending_contract_call_result = 1;
}

message EthContractCallResult {
  uint64 block_height = 1;
  uint64 block_time = 2;
  string spec_id = 3;
  bytes result = 4;
  optional string error = 5;
  optional uint64 chain_id = 6;
}

message EthVerifierBucket {
  int64 ts = 1;
  repeated string hashes = 2;
}

message PendingKeyRotation {
  uint64 block_height = 1;
  string node_id = 2;
  string new_pub_key = 3;
  uint32 new_pub_key_index = 4;
}

message PendingEthereumKeyRotation {
  uint64 block_height = 1;
  string node_id = 2;
  string new_address = 3;
  string submitter = 4;
  string old_address = 5;
}

message Topology {
  repeated ValidatorState validator_data = 1;
  repeated string chain_keys = 2;
  repeated PendingKeyRotation pending_pub_key_rotations = 3;
  ValidatorPerformance validator_performance = 4;
  repeated PendingEthereumKeyRotation pending_ethereum_key_rotations = 5;
  ToplogySignatures signatures = 6;
  repeated PendingEthereumKeyRotation unsolved_ethereum_key_rotations = 7;
}

message ToplogySignatures {
  repeated PendingERC20MultisigControlSignature pending_signatures = 1;
  repeated IssuedERC20MultisigControlSignature issued_signatures = 2;
}

message PendingERC20MultisigControlSignature {
  string node_id = 1;
  string ethereum_address = 2;
  string nonce = 3;
  uint64 epoch_seq = 4;
  bool added = 5;
}

message IssuedERC20MultisigControlSignature {
  string resource_id = 1;
  string ethereum_address = 2;
  string submitter_address = 3;
}

message ValidatorState {
  vega.events.v1.ValidatorUpdate validator_update = 1;
  uint64 block_added = 2;
  int32 status = 3;
  uint64 status_change_block = 4;
  uint64 last_block_with_positive_ranking = 5;
  uint64 eth_events_forwarded = 6;
  HeartbeatTracker heartbeat_tracker = 7;
  int64 validator_power = 8;
  vega.RankingScore ranking_score = 9;
}

message HeartbeatTracker {
  string expected_next_hash = 1;
  int64 expected_next_hash_since = 2;
  int32 block_index = 3;
  repeated bool block_sigs = 4;
}

message PerformanceStats {
  string validator_address = 1;
  uint64 proposed = 2;
  uint64 elected = 3;
  uint64 voted = 4;
  int64 last_height_voted = 5;
  int64 last_height_proposed = 6;
  int64 last_height_elected = 7;
}

message ValidatorPerformance {
  repeated PerformanceStats validator_perf_stats = 1;
}

message LiquidityParameters {
  string max_fee = 1;
  string max_shape_size = 2;
  string stake_to_obligation_factor = 3;
  // Market ID these liquidity parameters apply to. Required for key generation
  string market_id = 4;
}

message LiquidityPendingProvisions {
  repeated string pending_provisions = 1;
  // Market ID these liquidity provisions apply to. Required for key generation
  string market_id = 2;
}

message LiquidityPartiesLiquidityOrders {
  repeated PartyOrders party_orders = 1;
  // Market ID these liquidity orders apply to. Required for key generation
  string market_id = 2;
}

message PartyOrders {
  string party = 1;
  repeated vega.Order orders = 2;
}

message LiquidityPartiesOrders {
  repeated PartyOrders party_orders = 1;
  // Market ID these orders apply to.
  string market_id = 2;
}

message LiquidityProvisions {
  repeated vega.LiquidityProvision liquidity_provisions = 1;
  // Market ID these provisions apply to.
  string market_id = 2;
}

message LiquidityScores {
  int32 running_average_counter = 1;
  repeated LiquidityScore scores = 2;
  string market_id = 3;
}

message LiquidityScore {
  string score = 1;
  string party_id = 2;
}

message LiquidityV2Parameters {
  // Market ID these liquidity parameters apply to. Required for key generation
  string market_id = 1;
  // market specific SLA parameters, will be different than the ones in the market
  // snapshot since they apply at the end of an epoch
  vega.LiquiditySLAParameters market_sla_parameters = 2;
  // network wide SLA parameters, will be different than network paramters in the
  // snapshot since they apply at the end of an epoch
  string stake_to_volume = 3;
  string bond_penalty_slope = 4;
  string bond_penalty_max = 5;
}

message LiquidityV2PaidFeesStats {
  // Market ID these liquidity parameters apply to. Required for key generation
  string market_id = 1;

  vega.events.v1.PaidLiquidityFeesStats stats = 2;
}

message LiquidityV2Provisions {
  // Market ID these liquidity parameters apply to. Required for key generation
  string market_id = 1;

  repeated vega.LiquidityProvision liquidity_provisions = 2;
}

message LiquidityV2PendingProvisions {
  // Market ID these liquidity parameters apply to. Required for key generation
  string market_id = 1;

  repeated vega.LiquidityProvision pending_liquidity_provisions = 2;
}

message LiquidityV2Performances {
  // Market ID these liquidity parameters apply to. Required for key generation
  string market_id = 1;

  int64 epoch_start_time = 2;

  repeated LiquidityV2PerformancePerParty performance_per_party = 3;
}

message LiquidityV2PerformancePerParty {
  string party = 1;

  int64 elapsed_time_meeting_sla_during_epoch = 2;
  int64 commitment_start_time = 3;
  repeated string registered_penalties_per_epoch = 4;
  uint32 position_in_penalties_per_epoch = 5;
  string last_epoch_fraction_of_time_on_book = 6;
  string last_epoch_fee_penalty = 7;
  string last_epoch_bond_penalty = 8;
  string required_liquidity = 9;
  string notional_volume_buys = 10;
  string notional_volume_sells = 11;
}

message LiquidityV2Scores {
  // Market ID these liquidity parameters apply to. Required for key generation
  string market_id = 1;

  int32 running_average_counter = 2;
  repeated LiquidityScore scores = 3;
  int64 last_fee_distribution_time = 4;
  int64 fee_calculation_time_step = 5;
}

message LiquidityV2Supplied {
  // Market ID these liquidity parameters apply to. Required for key generation
  string market_id = 1;

  bool consensus_reached = 2;
  repeated LiquidityOffsetProbabilityPair bid_cache = 3;
  repeated LiquidityOffsetProbabilityPair ask_cache = 4;
}

// Snapshot payload for floating point consensus
message FloatingPointConsensus {
  repeated NextTimeTrigger next_time_trigger = 1;
  repeated StateVarInternalState state_variables = 2;
}

message StateVarInternalState {
  string id = 1;
  int32 state = 2;
  string event_id = 3;
  repeated FloatingPointValidatorResult validators_results = 4;
  int32 rounds_since_meaningful_update = 5;
}

message FloatingPointValidatorResult {
  string id = 1;
  repeated vega.KeyValueBundle bundle = 2;
}

message NextTimeTrigger {
  string asset = 1;
  string market = 2;
  string id = 3;
  int64 next_trigger = 4;
}

message MarketTracker {
  repeated checkpoint.v1.MarketActivityTracker market_activity = 1;
  repeated checkpoint.v1.TakerNotionalVolume taker_notional_volume = 2;
  repeated checkpoint.v1.MarketToPartyTakerNotionalVolume market_to_party_taker_notional_volume = 3;
}

message SignerEventsPerAddress {
  string address = 1;
  repeated vega.events.v1.ERC20MultiSigSignerEvent events = 2;
}

message ERC20MultiSigTopologyVerified {
  repeated string signers = 1;
  repeated SignerEventsPerAddress events_per_address = 2;
  vega.events.v1.ERC20MultiSigThresholdSetEvent threshold = 3;
  repeated string seen_events = 4;
}

message ERC20MultiSigTopologyPending {
  repeated vega.events.v1.ERC20MultiSigSignerEvent pending_signers = 1;
  repeated vega.events.v1.ERC20MultiSigThresholdSetEvent pending_threshold_set = 2;
  repeated string witnessed_signers = 3;
  repeated string witnessed_threshold_sets = 4;
}

message ProofOfWork {
  repeated uint64 block_height = 1;
  repeated string block_hash = 2;
  repeated TransactionsAtHeight tx_at_height = 4;
  repeated TransactionsAtHeight tid_at_height = 6;
  repeated BannedParty banned = 7;
  repeated ProofOfWorkParams pow_params = 8;
  repeated ProofOfWorkState pow_state = 9;
  uint64 last_pruning_block = 10;
  repeated NonceRefsAtHeight nonce_refs_at_height = 11;
}

message BannedParty {
  string party = 1;
  int64 until = 2;
}

message ProofOfWorkParams {
  uint64 spam_pow_number_of_past_blocks = 1;
  uint32 spam_pow_difficulty = 2;
  string spam_pow_hash_function = 3;
  uint64 spam_pow_number_of_tx_per_block = 4;
  bool spam_pow_increasing_difficulty = 5;
  uint64 from_block = 6;
  int64 until_block = 7;
}

message ProofOfWorkState {
  repeated ProofOfWorkBlockState pow_state = 1;
}

message ProofOfWorkBlockState {
  uint64 block_height = 1;
  repeated ProofOfWorkPartyStateForBlock party_state = 2;
}

message ProofOfWorkPartyStateForBlock {
  string party = 1;
  uint64 seen_count = 2;
  uint64 observed_difficulty = 3;
}

message TransactionsAtHeight {
  uint64 height = 1;
  repeated string transactions = 2;
}

message NonceRef {
  string party = 1;
  uint64 nonce = 2;
}

message NonceRefsAtHeight {
  uint64 height = 1;
  repeated NonceRef refs = 2;
}

message ProtocolUpgradeProposals {
  repeated vega.events.v1.ProtocolUpgradeEvent active_proposals = 1;
  AcceptedProtocolUpgradeProposal accepted_proposal = 2;
}

message AcceptedProtocolUpgradeProposal {
  // Block height at which to perform the upgrade
  uint64 upgrade_block_height = 1;
  // Release tag for the vega binary
  string vega_release_tag = 2;
}

message Teams {
  repeated Team teams = 1;
}

message Team {
  string id = 1;
  Membership referrer = 2;
  repeated Membership referees = 3;
  string name = 4;
  string team_url = 5;
  string avatar_url = 6;
  int64 created_at = 7;
  bool closed = 8;
  repeated string allow_list = 9;
}

message Membership {
  string party_id = 1;
  int64 joined_at = 2;
  uint64 started_at_epoch = 3;
}

message TeamSwitches {
  repeated TeamSwitch team_switches = 1;
}

message TeamSwitch {
  string from_team_id = 1;
  string to_team_id = 2;
  string party_id = 3;
}

message Vesting {
  repeated PartyReward parties_reward = 1;
}

message PartyReward {
  string party = 1;
  repeated AssetLocked asset_locked = 2;
  repeated InVesting in_vesting = 3;
}

message ReferralProgramData {
  repeated FactorByReferee factor_by_referee = 1;
  vega.ReferralProgram current_program = 2;
  vega.ReferralProgram new_program = 3;
  uint64 last_program_version = 4;
  bool program_has_ended = 5;
  repeated ReferralSet sets = 6;
}

message ReferralSet {
  string id = 1;
  int64 created_at = 2;
  int64 updated_at = 3;
  Membership referrer = 4;
  repeated Membership referees = 5;
  repeated RunningVolume running_volumes = 6;
  string current_reward_factor = 7;
  string current_rewards_multiplier = 8;
  string current_rewards_factor_multiplier = 9;
}

message RunningVolume {
  uint64 epoch = 1;
  bytes volume = 2;
}

message FactorByReferee {
  string party = 1;
  bytes discount_factor = 2;
  bytes taker_volume = 3;
}

message AssetLocked {
  string asset = 1;
  repeated EpochBalance epoch_balances = 2;
}

message EpochBalance {
  uint64 epoch = 1;
  string balance = 2;
}

message InVesting {
  string asset = 1;
  string balance = 2;
}

message ActivityStreak {
  repeated PartyActivityStreak parties_activity_streak = 1;
}

message PartyActivityStreak {
  string party = 1;
  uint64 active = 2;
  uint64 inactive = 3;
  bytes reward_distribution_multiplier = 4;
  bytes reward_vesting_multiplier = 5;
}

message VolumeDiscountProgram {
  repeated string parties = 1;
  repeated EpochPartyVolumes epoch_party_volumes = 2;
  uint64 epoch_data_index = 3;
  repeated PartyVolume average_party_volume = 4;
  vega.VolumeDiscountProgram current_program = 5;
  vega.VolumeDiscountProgram new_program = 6;
  repeated VolumeDiscountStats factors_by_party = 7;
  uint64 last_program_version = 8;
  bool program_has_ended = 9;
}

message VolumeDiscountStats {
  string party = 1;
  string discount_factor = 2;
}

message EpochPartyVolumes {
  repeated PartyVolume party_volume = 1;
}

message PartyVolume {
  string party = 1;
  bytes volume = 2;
}

message Liquidation {
  string market_id = 1;
  int64 network_pos = 2;
  int64 next_step = 3;
  vega.LiquidationStrategy config = 4;
}

message PartyAssetAmount {
  string party = 1;
  string asset = 2;
  string amount = 3;
}

message BankingTransferFeeDiscounts {
  repeated PartyAssetAmount party_asset_discount = 1;
}

message CompositePriceCalculator {
  string composite_price = 1;
  vega.CompositePriceConfiguration price_configuration = 2;
  repeated vega.Trade trades = 3;
  repeated string price_sources = 4;
  repeated int64 price_source_last_update = 5;
  repeated TimePrice book_price_at_time = 6;
}

message Parties {
  repeated PartyProfile profiles = 1;
}

message PartyProfile {
  string party_id = 1;
  string alias = 2;
  repeated vega.Metadata metadata = 3;
}
