// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/commands/v1/transaction.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transaction versions to maintain backwards compatibility of transaction formats.
type TxVersion int32

const (
	// Transaction version is unspecified.
	TxVersion_TX_VERSION_UNSPECIFIED TxVersion = 0
	// Transaction requires the addition of a proof-of-work calculation.
	TxVersion_TX_VERSION_V2 TxVersion = 2
	// Transaction input data contains a prepended chain ID to prevent use of a single transaction across multiple networks.
	TxVersion_TX_VERSION_V3 TxVersion = 3
)

// Enum value maps for TxVersion.
var (
	TxVersion_name = map[int32]string{
		0: "TX_VERSION_UNSPECIFIED",
		2: "TX_VERSION_V2",
		3: "TX_VERSION_V3",
	}
	TxVersion_value = map[string]int32{
		"TX_VERSION_UNSPECIFIED": 0,
		"TX_VERSION_V2":          2,
		"TX_VERSION_V3":          3,
	}
)

func (x TxVersion) Enum() *TxVersion {
	p := new(TxVersion)
	*p = x
	return p
}

func (x TxVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_commands_v1_transaction_proto_enumTypes[0].Descriptor()
}

func (TxVersion) Type() protoreflect.EnumType {
	return &file_vega_commands_v1_transaction_proto_enumTypes[0]
}

func (x TxVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxVersion.Descriptor instead.
func (TxVersion) EnumDescriptor() ([]byte, []int) {
	return file_vega_commands_v1_transaction_proto_rawDescGZIP(), []int{0}
}

// Input data for a transaction containing a network command for the Vega network to execute.
// Once populated the protobuf message should be marshalled into a byte array and included in a transaction message.
type InputData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arbitrary number used to provide uniqueness to the signature of two otherwise identical input data, preventing replay attacks.
	// Must be set to a different value for all new transactions sent by a party. It is advised to generate this number randomly.
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Block height which has been used to calculate the transaction proof-of-work.
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Types that are assignable to Command:
	//
	//	*InputData_OrderSubmission
	//	*InputData_OrderCancellation
	//	*InputData_OrderAmendment
	//	*InputData_WithdrawSubmission
	//	*InputData_ProposalSubmission
	//	*InputData_VoteSubmission
	//	*InputData_LiquidityProvisionSubmission
	//	*InputData_DelegateSubmission
	//	*InputData_UndelegateSubmission
	//	*InputData_LiquidityProvisionCancellation
	//	*InputData_LiquidityProvisionAmendment
	//	*InputData_Transfer
	//	*InputData_CancelTransfer
	//	*InputData_AnnounceNode
	//	*InputData_BatchMarketInstructions
	//	*InputData_StopOrdersSubmission
	//	*InputData_StopOrdersCancellation
	//	*InputData_CreateReferralSet
	//	*InputData_UpdateReferralSet
	//	*InputData_ApplyReferralCode
	//	*InputData_UpdateMarginMode
	//	*InputData_JoinTeam
	//	*InputData_NodeVote
	//	*InputData_NodeSignature
	//	*InputData_ChainEvent
	//	*InputData_KeyRotateSubmission
	//	*InputData_StateVariableProposal
	//	*InputData_ValidatorHeartbeat
	//	*InputData_EthereumKeyRotateSubmission
	//	*InputData_ProtocolUpgradeProposal
	//	*InputData_IssueSignatures
	//	*InputData_OracleDataSubmission
	//	*InputData_BatchProposalSubmission
	Command isInputData_Command `protobuf_oneof:"command"`
}

func (x *InputData) Reset() {
	*x = InputData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputData) ProtoMessage() {}

func (x *InputData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputData.ProtoReflect.Descriptor instead.
func (*InputData) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *InputData) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *InputData) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (m *InputData) GetCommand() isInputData_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *InputData) GetOrderSubmission() *OrderSubmission {
	if x, ok := x.GetCommand().(*InputData_OrderSubmission); ok {
		return x.OrderSubmission
	}
	return nil
}

func (x *InputData) GetOrderCancellation() *OrderCancellation {
	if x, ok := x.GetCommand().(*InputData_OrderCancellation); ok {
		return x.OrderCancellation
	}
	return nil
}

func (x *InputData) GetOrderAmendment() *OrderAmendment {
	if x, ok := x.GetCommand().(*InputData_OrderAmendment); ok {
		return x.OrderAmendment
	}
	return nil
}

func (x *InputData) GetWithdrawSubmission() *WithdrawSubmission {
	if x, ok := x.GetCommand().(*InputData_WithdrawSubmission); ok {
		return x.WithdrawSubmission
	}
	return nil
}

func (x *InputData) GetProposalSubmission() *ProposalSubmission {
	if x, ok := x.GetCommand().(*InputData_ProposalSubmission); ok {
		return x.ProposalSubmission
	}
	return nil
}

func (x *InputData) GetVoteSubmission() *VoteSubmission {
	if x, ok := x.GetCommand().(*InputData_VoteSubmission); ok {
		return x.VoteSubmission
	}
	return nil
}

func (x *InputData) GetLiquidityProvisionSubmission() *LiquidityProvisionSubmission {
	if x, ok := x.GetCommand().(*InputData_LiquidityProvisionSubmission); ok {
		return x.LiquidityProvisionSubmission
	}
	return nil
}

func (x *InputData) GetDelegateSubmission() *DelegateSubmission {
	if x, ok := x.GetCommand().(*InputData_DelegateSubmission); ok {
		return x.DelegateSubmission
	}
	return nil
}

func (x *InputData) GetUndelegateSubmission() *UndelegateSubmission {
	if x, ok := x.GetCommand().(*InputData_UndelegateSubmission); ok {
		return x.UndelegateSubmission
	}
	return nil
}

func (x *InputData) GetLiquidityProvisionCancellation() *LiquidityProvisionCancellation {
	if x, ok := x.GetCommand().(*InputData_LiquidityProvisionCancellation); ok {
		return x.LiquidityProvisionCancellation
	}
	return nil
}

func (x *InputData) GetLiquidityProvisionAmendment() *LiquidityProvisionAmendment {
	if x, ok := x.GetCommand().(*InputData_LiquidityProvisionAmendment); ok {
		return x.LiquidityProvisionAmendment
	}
	return nil
}

func (x *InputData) GetTransfer() *Transfer {
	if x, ok := x.GetCommand().(*InputData_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *InputData) GetCancelTransfer() *CancelTransfer {
	if x, ok := x.GetCommand().(*InputData_CancelTransfer); ok {
		return x.CancelTransfer
	}
	return nil
}

func (x *InputData) GetAnnounceNode() *AnnounceNode {
	if x, ok := x.GetCommand().(*InputData_AnnounceNode); ok {
		return x.AnnounceNode
	}
	return nil
}

func (x *InputData) GetBatchMarketInstructions() *BatchMarketInstructions {
	if x, ok := x.GetCommand().(*InputData_BatchMarketInstructions); ok {
		return x.BatchMarketInstructions
	}
	return nil
}

func (x *InputData) GetStopOrdersSubmission() *StopOrdersSubmission {
	if x, ok := x.GetCommand().(*InputData_StopOrdersSubmission); ok {
		return x.StopOrdersSubmission
	}
	return nil
}

func (x *InputData) GetStopOrdersCancellation() *StopOrdersCancellation {
	if x, ok := x.GetCommand().(*InputData_StopOrdersCancellation); ok {
		return x.StopOrdersCancellation
	}
	return nil
}

func (x *InputData) GetCreateReferralSet() *CreateReferralSet {
	if x, ok := x.GetCommand().(*InputData_CreateReferralSet); ok {
		return x.CreateReferralSet
	}
	return nil
}

func (x *InputData) GetUpdateReferralSet() *UpdateReferralSet {
	if x, ok := x.GetCommand().(*InputData_UpdateReferralSet); ok {
		return x.UpdateReferralSet
	}
	return nil
}

func (x *InputData) GetApplyReferralCode() *ApplyReferralCode {
	if x, ok := x.GetCommand().(*InputData_ApplyReferralCode); ok {
		return x.ApplyReferralCode
	}
	return nil
}

func (x *InputData) GetUpdateMarginMode() *UpdateMarginMode {
	if x, ok := x.GetCommand().(*InputData_UpdateMarginMode); ok {
		return x.UpdateMarginMode
	}
	return nil
}

func (x *InputData) GetJoinTeam() *JoinTeam {
	if x, ok := x.GetCommand().(*InputData_JoinTeam); ok {
		return x.JoinTeam
	}
	return nil
}

func (x *InputData) GetNodeVote() *NodeVote {
	if x, ok := x.GetCommand().(*InputData_NodeVote); ok {
		return x.NodeVote
	}
	return nil
}

func (x *InputData) GetNodeSignature() *NodeSignature {
	if x, ok := x.GetCommand().(*InputData_NodeSignature); ok {
		return x.NodeSignature
	}
	return nil
}

func (x *InputData) GetChainEvent() *ChainEvent {
	if x, ok := x.GetCommand().(*InputData_ChainEvent); ok {
		return x.ChainEvent
	}
	return nil
}

func (x *InputData) GetKeyRotateSubmission() *KeyRotateSubmission {
	if x, ok := x.GetCommand().(*InputData_KeyRotateSubmission); ok {
		return x.KeyRotateSubmission
	}
	return nil
}

func (x *InputData) GetStateVariableProposal() *StateVariableProposal {
	if x, ok := x.GetCommand().(*InputData_StateVariableProposal); ok {
		return x.StateVariableProposal
	}
	return nil
}

func (x *InputData) GetValidatorHeartbeat() *ValidatorHeartbeat {
	if x, ok := x.GetCommand().(*InputData_ValidatorHeartbeat); ok {
		return x.ValidatorHeartbeat
	}
	return nil
}

func (x *InputData) GetEthereumKeyRotateSubmission() *EthereumKeyRotateSubmission {
	if x, ok := x.GetCommand().(*InputData_EthereumKeyRotateSubmission); ok {
		return x.EthereumKeyRotateSubmission
	}
	return nil
}

func (x *InputData) GetProtocolUpgradeProposal() *ProtocolUpgradeProposal {
	if x, ok := x.GetCommand().(*InputData_ProtocolUpgradeProposal); ok {
		return x.ProtocolUpgradeProposal
	}
	return nil
}

func (x *InputData) GetIssueSignatures() *IssueSignatures {
	if x, ok := x.GetCommand().(*InputData_IssueSignatures); ok {
		return x.IssueSignatures
	}
	return nil
}

func (x *InputData) GetOracleDataSubmission() *OracleDataSubmission {
	if x, ok := x.GetCommand().(*InputData_OracleDataSubmission); ok {
		return x.OracleDataSubmission
	}
	return nil
}

func (x *InputData) GetBatchProposalSubmission() *BatchProposalSubmission {
	if x, ok := x.GetCommand().(*InputData_BatchProposalSubmission); ok {
		return x.BatchProposalSubmission
	}
	return nil
}

type isInputData_Command interface {
	isInputData_Command()
}

type InputData_OrderSubmission struct {
	// Command to submit an order.
	OrderSubmission *OrderSubmission `protobuf:"bytes,1001,opt,name=order_submission,json=orderSubmission,proto3,oneof"`
}

type InputData_OrderCancellation struct {
	// Command to cancel an order.
	OrderCancellation *OrderCancellation `protobuf:"bytes,1002,opt,name=order_cancellation,json=orderCancellation,proto3,oneof"`
}

type InputData_OrderAmendment struct {
	// Command to amend an order.
	OrderAmendment *OrderAmendment `protobuf:"bytes,1003,opt,name=order_amendment,json=orderAmendment,proto3,oneof"`
}

type InputData_WithdrawSubmission struct {
	// Command to submit a withdrawal.
	WithdrawSubmission *WithdrawSubmission `protobuf:"bytes,1004,opt,name=withdraw_submission,json=withdrawSubmission,proto3,oneof"`
}

type InputData_ProposalSubmission struct {
	// Command to submit a governance proposal.
	ProposalSubmission *ProposalSubmission `protobuf:"bytes,1005,opt,name=proposal_submission,json=proposalSubmission,proto3,oneof"`
}

type InputData_VoteSubmission struct {
	// Command to submit a vote on a governance proposal.
	VoteSubmission *VoteSubmission `protobuf:"bytes,1006,opt,name=vote_submission,json=voteSubmission,proto3,oneof"`
}

type InputData_LiquidityProvisionSubmission struct {
	// Command to submit a liquidity commitment.
	LiquidityProvisionSubmission *LiquidityProvisionSubmission `protobuf:"bytes,1007,opt,name=liquidity_provision_submission,json=liquidityProvisionSubmission,proto3,oneof"`
}

type InputData_DelegateSubmission struct {
	// Command to delegate tokens to a validator.
	DelegateSubmission *DelegateSubmission `protobuf:"bytes,1008,opt,name=delegate_submission,json=delegateSubmission,proto3,oneof"`
}

type InputData_UndelegateSubmission struct {
	// Command to remove tokens delegated to a validator.
	UndelegateSubmission *UndelegateSubmission `protobuf:"bytes,1009,opt,name=undelegate_submission,json=undelegateSubmission,proto3,oneof"`
}

type InputData_LiquidityProvisionCancellation struct {
	// Command to cancel a liquidity commitment.
	LiquidityProvisionCancellation *LiquidityProvisionCancellation `protobuf:"bytes,1010,opt,name=liquidity_provision_cancellation,json=liquidityProvisionCancellation,proto3,oneof"`
}

type InputData_LiquidityProvisionAmendment struct {
	// Command to amend a liquidity commitment.
	LiquidityProvisionAmendment *LiquidityProvisionAmendment `protobuf:"bytes,1011,opt,name=liquidity_provision_amendment,json=liquidityProvisionAmendment,proto3,oneof"`
}

type InputData_Transfer struct {
	// Command to submit a transfer.
	Transfer *Transfer `protobuf:"bytes,1012,opt,name=transfer,proto3,oneof"`
}

type InputData_CancelTransfer struct {
	// Command to cancel a recurring transfer.
	CancelTransfer *CancelTransfer `protobuf:"bytes,1013,opt,name=cancel_transfer,json=cancelTransfer,proto3,oneof"`
}

type InputData_AnnounceNode struct {
	// Command used by a node operator to announce its node as a pending validator.
	AnnounceNode *AnnounceNode `protobuf:"bytes,1014,opt,name=announce_node,json=announceNode,proto3,oneof"`
}

type InputData_BatchMarketInstructions struct {
	// Command to submit a batch of order instructions.
	BatchMarketInstructions *BatchMarketInstructions `protobuf:"bytes,1015,opt,name=batch_market_instructions,json=batchMarketInstructions,proto3,oneof"`
}

type InputData_StopOrdersSubmission struct {
	// Command to submit a pair of stop orders.
	StopOrdersSubmission *StopOrdersSubmission `protobuf:"bytes,1016,opt,name=stop_orders_submission,json=stopOrdersSubmission,proto3,oneof"`
}

type InputData_StopOrdersCancellation struct {
	// Command to cancel stop orders.
	StopOrdersCancellation *StopOrdersCancellation `protobuf:"bytes,1017,opt,name=stop_orders_cancellation,json=stopOrdersCancellation,proto3,oneof"`
}

type InputData_CreateReferralSet struct {
	// Command to create a referral set.
	CreateReferralSet *CreateReferralSet `protobuf:"bytes,1018,opt,name=create_referral_set,json=createReferralSet,proto3,oneof"`
}

type InputData_UpdateReferralSet struct {
	// Command to update a referral set.
	UpdateReferralSet *UpdateReferralSet `protobuf:"bytes,1019,opt,name=update_referral_set,json=updateReferralSet,proto3,oneof"`
}

type InputData_ApplyReferralCode struct {
	// Command to apply a referral code.
	ApplyReferralCode *ApplyReferralCode `protobuf:"bytes,1020,opt,name=apply_referral_code,json=applyReferralCode,proto3,oneof"`
}

type InputData_UpdateMarginMode struct {
	// Command to update the margin mode of a party in a market.
	UpdateMarginMode *UpdateMarginMode `protobuf:"bytes,1021,opt,name=update_margin_mode,json=updateMarginMode,proto3,oneof"`
}

type InputData_JoinTeam struct {
	// Command to join a team.
	JoinTeam *JoinTeam `protobuf:"bytes,1022,opt,name=join_team,json=joinTeam,proto3,oneof"`
}

type InputData_NodeVote struct {
	// Validator command sent automatically to vote on that validity of an external resource.
	NodeVote *NodeVote `protobuf:"bytes,2002,opt,name=node_vote,json=nodeVote,proto3,oneof"`
}

type InputData_NodeSignature struct {
	// Validator command sent automatically to provide signatures for the Ethereum bridge.
	NodeSignature *NodeSignature `protobuf:"bytes,2003,opt,name=node_signature,json=nodeSignature,proto3,oneof"`
}

type InputData_ChainEvent struct {
	// Validator command sent automatically to notify the Vega chain of an off-chain event.
	ChainEvent *ChainEvent `protobuf:"bytes,2004,opt,name=chain_event,json=chainEvent,proto3,oneof"`
}

type InputData_KeyRotateSubmission struct {
	// Validator command sent manually by a node operator to rotate their node's Vega keys.
	KeyRotateSubmission *KeyRotateSubmission `protobuf:"bytes,2005,opt,name=key_rotate_submission,json=keyRotateSubmission,proto3,oneof"`
}

type InputData_StateVariableProposal struct {
	// Validator command sent automatically to reach consensus on floating point values.
	StateVariableProposal *StateVariableProposal `protobuf:"bytes,2006,opt,name=state_variable_proposal,json=stateVariableProposal,proto3,oneof"`
}

type InputData_ValidatorHeartbeat struct {
	// Validator command sent automatically to signal regular participation in the network.
	ValidatorHeartbeat *ValidatorHeartbeat `protobuf:"bytes,2007,opt,name=validator_heartbeat,json=validatorHeartbeat,proto3,oneof"`
}

type InputData_EthereumKeyRotateSubmission struct {
	// Validator command sent manually by a node operator to rotate their node's Ethereum keys.
	EthereumKeyRotateSubmission *EthereumKeyRotateSubmission `protobuf:"bytes,2008,opt,name=ethereum_key_rotate_submission,json=ethereumKeyRotateSubmission,proto3,oneof"`
}

type InputData_ProtocolUpgradeProposal struct {
	// Validator command sent manually to propose a protocol upgrade.
	ProtocolUpgradeProposal *ProtocolUpgradeProposal `protobuf:"bytes,2009,opt,name=protocol_upgrade_proposal,json=protocolUpgradeProposal,proto3,oneof"`
}

type InputData_IssueSignatures struct {
	// Command to request signatures to amend the multisig-control contract.
	IssueSignatures *IssueSignatures `protobuf:"bytes,2010,opt,name=issue_signatures,json=issueSignatures,proto3,oneof"`
}

type InputData_OracleDataSubmission struct {
	// Command to submit external oracle data.
	OracleDataSubmission *OracleDataSubmission `protobuf:"bytes,3001,opt,name=oracle_data_submission,json=oracleDataSubmission,proto3,oneof"`
}

type InputData_BatchProposalSubmission struct {
	// Command to submit a batch governance proposal.
	BatchProposalSubmission *BatchProposalSubmission `protobuf:"bytes,3002,opt,name=batch_proposal_submission,json=batchProposalSubmission,proto3,oneof"`
}

func (*InputData_OrderSubmission) isInputData_Command() {}

func (*InputData_OrderCancellation) isInputData_Command() {}

func (*InputData_OrderAmendment) isInputData_Command() {}

func (*InputData_WithdrawSubmission) isInputData_Command() {}

func (*InputData_ProposalSubmission) isInputData_Command() {}

func (*InputData_VoteSubmission) isInputData_Command() {}

func (*InputData_LiquidityProvisionSubmission) isInputData_Command() {}

func (*InputData_DelegateSubmission) isInputData_Command() {}

func (*InputData_UndelegateSubmission) isInputData_Command() {}

func (*InputData_LiquidityProvisionCancellation) isInputData_Command() {}

func (*InputData_LiquidityProvisionAmendment) isInputData_Command() {}

func (*InputData_Transfer) isInputData_Command() {}

func (*InputData_CancelTransfer) isInputData_Command() {}

func (*InputData_AnnounceNode) isInputData_Command() {}

func (*InputData_BatchMarketInstructions) isInputData_Command() {}

func (*InputData_StopOrdersSubmission) isInputData_Command() {}

func (*InputData_StopOrdersCancellation) isInputData_Command() {}

func (*InputData_CreateReferralSet) isInputData_Command() {}

func (*InputData_UpdateReferralSet) isInputData_Command() {}

func (*InputData_ApplyReferralCode) isInputData_Command() {}

func (*InputData_UpdateMarginMode) isInputData_Command() {}

func (*InputData_JoinTeam) isInputData_Command() {}

func (*InputData_NodeVote) isInputData_Command() {}

func (*InputData_NodeSignature) isInputData_Command() {}

func (*InputData_ChainEvent) isInputData_Command() {}

func (*InputData_KeyRotateSubmission) isInputData_Command() {}

func (*InputData_StateVariableProposal) isInputData_Command() {}

func (*InputData_ValidatorHeartbeat) isInputData_Command() {}

func (*InputData_EthereumKeyRotateSubmission) isInputData_Command() {}

func (*InputData_ProtocolUpgradeProposal) isInputData_Command() {}

func (*InputData_IssueSignatures) isInputData_Command() {}

func (*InputData_OracleDataSubmission) isInputData_Command() {}

func (*InputData_BatchProposalSubmission) isInputData_Command() {}

// Transaction containing a command that can be sent to instruct the network to execute an action.
// A transaction contains a byte string representation of the input data which must then be signed, with the signature added to the transaction.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protobuf message of type `InputData` marshalled into bytes. If the transaction version is V3 or higher then this bytes
	// string must be prepended with `chain_id_as_byes + \0`.
	InputData []byte `protobuf:"bytes,1,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// Signature of the input data field, signed by the sender of this transaction.
	Signature *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Sender of the transaction.
	//
	// Types that are assignable to From:
	//
	//	*Transaction_Address
	//	*Transaction_PubKey
	From isTransaction_From `protobuf_oneof:"from"`
	// Version of the transaction.
	Version TxVersion `protobuf:"varint,2000,opt,name=version,proto3,enum=vega.commands.v1.TxVersion" json:"version,omitempty"`
	// Proof-of-work containing the random transaction ID used by the client and the nonce.
	Pow *ProofOfWork `protobuf:"bytes,3000,opt,name=pow,proto3" json:"pow,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetInputData() []byte {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *Transaction) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (m *Transaction) GetFrom() isTransaction_From {
	if m != nil {
		return m.From
	}
	return nil
}

func (x *Transaction) GetAddress() string {
	if x, ok := x.GetFrom().(*Transaction_Address); ok {
		return x.Address
	}
	return ""
}

func (x *Transaction) GetPubKey() string {
	if x, ok := x.GetFrom().(*Transaction_PubKey); ok {
		return x.PubKey
	}
	return ""
}

func (x *Transaction) GetVersion() TxVersion {
	if x != nil {
		return x.Version
	}
	return TxVersion_TX_VERSION_UNSPECIFIED
}

func (x *Transaction) GetPow() *ProofOfWork {
	if x != nil {
		return x.Pow
	}
	return nil
}

type isTransaction_From interface {
	isTransaction_From()
}

type Transaction_Address struct {
	// Hex-encoded address of the sender. Not supported yet.
	Address string `protobuf:"bytes,1001,opt,name=address,proto3,oneof"`
}

type Transaction_PubKey struct {
	// Hex-encoded public key of the sender.
	PubKey string `protobuf:"bytes,1002,opt,name=pub_key,json=pubKey,proto3,oneof"`
}

func (*Transaction_Address) isTransaction_From() {}

func (*Transaction_PubKey) isTransaction_From() {}

// Components needed for the network to verify proof-of-work.
type ProofOfWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique transaction identifier used to seed the proof-of-work hash.
	Tid string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty"`
	// Number which, combined with the transaction identifier, will produce a hash with the required number of leading zeros to be accepted by the network.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *ProofOfWork) Reset() {
	*x = ProofOfWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_commands_v1_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfWork) ProtoMessage() {}

func (x *ProofOfWork) ProtoReflect() protoreflect.Message {
	mi := &file_vega_commands_v1_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfWork.ProtoReflect.Descriptor instead.
func (*ProofOfWork) Descriptor() ([]byte, []int) {
	return file_vega_commands_v1_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *ProofOfWork) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *ProofOfWork) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

var File_vega_commands_v1_transaction_proto protoreflect.FileDescriptor

var file_vega_commands_v1_transaction_proto_rawDesc = []byte{
	0x0a, 0x22, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf5, 0x17, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x12, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58,
	0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x77, 0x0a, 0x1e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xf1, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x75,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x20, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x17, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xf8, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x18, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xfb, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x18, 0xd2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x49, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xd4, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a,
	0x15, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x6b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x17, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0xd6, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x58, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0xd7, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x75, 0x0a, 0x1e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd8, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65,
	0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x1b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x68, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0xd9, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x10, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0xda,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x19,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xba, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x4a, 0x06, 0x08, 0xa1, 0x1f, 0x10, 0xa2, 0x1f, 0x22, 0x92, 0x02, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe9,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xea, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x77, 0x18, 0xb8, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f, 0x72,
	0x6b, 0x52, 0x03, 0x70, 0x6f, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x35,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x2a, 0x53, 0x0a, 0x09, 0x54, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x58, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x58, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x58, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x33, 0x10, 0x03, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_commands_v1_transaction_proto_rawDescOnce sync.Once
	file_vega_commands_v1_transaction_proto_rawDescData = file_vega_commands_v1_transaction_proto_rawDesc
)

func file_vega_commands_v1_transaction_proto_rawDescGZIP() []byte {
	file_vega_commands_v1_transaction_proto_rawDescOnce.Do(func() {
		file_vega_commands_v1_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_commands_v1_transaction_proto_rawDescData)
	})
	return file_vega_commands_v1_transaction_proto_rawDescData
}

var file_vega_commands_v1_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vega_commands_v1_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_vega_commands_v1_transaction_proto_goTypes = []interface{}{
	(TxVersion)(0),                         // 0: vega.commands.v1.TxVersion
	(*InputData)(nil),                      // 1: vega.commands.v1.InputData
	(*Transaction)(nil),                    // 2: vega.commands.v1.Transaction
	(*ProofOfWork)(nil),                    // 3: vega.commands.v1.ProofOfWork
	(*OrderSubmission)(nil),                // 4: vega.commands.v1.OrderSubmission
	(*OrderCancellation)(nil),              // 5: vega.commands.v1.OrderCancellation
	(*OrderAmendment)(nil),                 // 6: vega.commands.v1.OrderAmendment
	(*WithdrawSubmission)(nil),             // 7: vega.commands.v1.WithdrawSubmission
	(*ProposalSubmission)(nil),             // 8: vega.commands.v1.ProposalSubmission
	(*VoteSubmission)(nil),                 // 9: vega.commands.v1.VoteSubmission
	(*LiquidityProvisionSubmission)(nil),   // 10: vega.commands.v1.LiquidityProvisionSubmission
	(*DelegateSubmission)(nil),             // 11: vega.commands.v1.DelegateSubmission
	(*UndelegateSubmission)(nil),           // 12: vega.commands.v1.UndelegateSubmission
	(*LiquidityProvisionCancellation)(nil), // 13: vega.commands.v1.LiquidityProvisionCancellation
	(*LiquidityProvisionAmendment)(nil),    // 14: vega.commands.v1.LiquidityProvisionAmendment
	(*Transfer)(nil),                       // 15: vega.commands.v1.Transfer
	(*CancelTransfer)(nil),                 // 16: vega.commands.v1.CancelTransfer
	(*AnnounceNode)(nil),                   // 17: vega.commands.v1.AnnounceNode
	(*BatchMarketInstructions)(nil),        // 18: vega.commands.v1.BatchMarketInstructions
	(*StopOrdersSubmission)(nil),           // 19: vega.commands.v1.StopOrdersSubmission
	(*StopOrdersCancellation)(nil),         // 20: vega.commands.v1.StopOrdersCancellation
	(*CreateReferralSet)(nil),              // 21: vega.commands.v1.CreateReferralSet
	(*UpdateReferralSet)(nil),              // 22: vega.commands.v1.UpdateReferralSet
	(*ApplyReferralCode)(nil),              // 23: vega.commands.v1.ApplyReferralCode
	(*UpdateMarginMode)(nil),               // 24: vega.commands.v1.UpdateMarginMode
	(*JoinTeam)(nil),                       // 25: vega.commands.v1.JoinTeam
	(*NodeVote)(nil),                       // 26: vega.commands.v1.NodeVote
	(*NodeSignature)(nil),                  // 27: vega.commands.v1.NodeSignature
	(*ChainEvent)(nil),                     // 28: vega.commands.v1.ChainEvent
	(*KeyRotateSubmission)(nil),            // 29: vega.commands.v1.KeyRotateSubmission
	(*StateVariableProposal)(nil),          // 30: vega.commands.v1.StateVariableProposal
	(*ValidatorHeartbeat)(nil),             // 31: vega.commands.v1.ValidatorHeartbeat
	(*EthereumKeyRotateSubmission)(nil),    // 32: vega.commands.v1.EthereumKeyRotateSubmission
	(*ProtocolUpgradeProposal)(nil),        // 33: vega.commands.v1.ProtocolUpgradeProposal
	(*IssueSignatures)(nil),                // 34: vega.commands.v1.IssueSignatures
	(*OracleDataSubmission)(nil),           // 35: vega.commands.v1.OracleDataSubmission
	(*BatchProposalSubmission)(nil),        // 36: vega.commands.v1.BatchProposalSubmission
	(*Signature)(nil),                      // 37: vega.commands.v1.Signature
}
var file_vega_commands_v1_transaction_proto_depIdxs = []int32{
	4,  // 0: vega.commands.v1.InputData.order_submission:type_name -> vega.commands.v1.OrderSubmission
	5,  // 1: vega.commands.v1.InputData.order_cancellation:type_name -> vega.commands.v1.OrderCancellation
	6,  // 2: vega.commands.v1.InputData.order_amendment:type_name -> vega.commands.v1.OrderAmendment
	7,  // 3: vega.commands.v1.InputData.withdraw_submission:type_name -> vega.commands.v1.WithdrawSubmission
	8,  // 4: vega.commands.v1.InputData.proposal_submission:type_name -> vega.commands.v1.ProposalSubmission
	9,  // 5: vega.commands.v1.InputData.vote_submission:type_name -> vega.commands.v1.VoteSubmission
	10, // 6: vega.commands.v1.InputData.liquidity_provision_submission:type_name -> vega.commands.v1.LiquidityProvisionSubmission
	11, // 7: vega.commands.v1.InputData.delegate_submission:type_name -> vega.commands.v1.DelegateSubmission
	12, // 8: vega.commands.v1.InputData.undelegate_submission:type_name -> vega.commands.v1.UndelegateSubmission
	13, // 9: vega.commands.v1.InputData.liquidity_provision_cancellation:type_name -> vega.commands.v1.LiquidityProvisionCancellation
	14, // 10: vega.commands.v1.InputData.liquidity_provision_amendment:type_name -> vega.commands.v1.LiquidityProvisionAmendment
	15, // 11: vega.commands.v1.InputData.transfer:type_name -> vega.commands.v1.Transfer
	16, // 12: vega.commands.v1.InputData.cancel_transfer:type_name -> vega.commands.v1.CancelTransfer
	17, // 13: vega.commands.v1.InputData.announce_node:type_name -> vega.commands.v1.AnnounceNode
	18, // 14: vega.commands.v1.InputData.batch_market_instructions:type_name -> vega.commands.v1.BatchMarketInstructions
	19, // 15: vega.commands.v1.InputData.stop_orders_submission:type_name -> vega.commands.v1.StopOrdersSubmission
	20, // 16: vega.commands.v1.InputData.stop_orders_cancellation:type_name -> vega.commands.v1.StopOrdersCancellation
	21, // 17: vega.commands.v1.InputData.create_referral_set:type_name -> vega.commands.v1.CreateReferralSet
	22, // 18: vega.commands.v1.InputData.update_referral_set:type_name -> vega.commands.v1.UpdateReferralSet
	23, // 19: vega.commands.v1.InputData.apply_referral_code:type_name -> vega.commands.v1.ApplyReferralCode
	24, // 20: vega.commands.v1.InputData.update_margin_mode:type_name -> vega.commands.v1.UpdateMarginMode
	25, // 21: vega.commands.v1.InputData.join_team:type_name -> vega.commands.v1.JoinTeam
	26, // 22: vega.commands.v1.InputData.node_vote:type_name -> vega.commands.v1.NodeVote
	27, // 23: vega.commands.v1.InputData.node_signature:type_name -> vega.commands.v1.NodeSignature
	28, // 24: vega.commands.v1.InputData.chain_event:type_name -> vega.commands.v1.ChainEvent
	29, // 25: vega.commands.v1.InputData.key_rotate_submission:type_name -> vega.commands.v1.KeyRotateSubmission
	30, // 26: vega.commands.v1.InputData.state_variable_proposal:type_name -> vega.commands.v1.StateVariableProposal
	31, // 27: vega.commands.v1.InputData.validator_heartbeat:type_name -> vega.commands.v1.ValidatorHeartbeat
	32, // 28: vega.commands.v1.InputData.ethereum_key_rotate_submission:type_name -> vega.commands.v1.EthereumKeyRotateSubmission
	33, // 29: vega.commands.v1.InputData.protocol_upgrade_proposal:type_name -> vega.commands.v1.ProtocolUpgradeProposal
	34, // 30: vega.commands.v1.InputData.issue_signatures:type_name -> vega.commands.v1.IssueSignatures
	35, // 31: vega.commands.v1.InputData.oracle_data_submission:type_name -> vega.commands.v1.OracleDataSubmission
	36, // 32: vega.commands.v1.InputData.batch_proposal_submission:type_name -> vega.commands.v1.BatchProposalSubmission
	37, // 33: vega.commands.v1.Transaction.signature:type_name -> vega.commands.v1.Signature
	0,  // 34: vega.commands.v1.Transaction.version:type_name -> vega.commands.v1.TxVersion
	3,  // 35: vega.commands.v1.Transaction.pow:type_name -> vega.commands.v1.ProofOfWork
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_vega_commands_v1_transaction_proto_init() }
func file_vega_commands_v1_transaction_proto_init() {
	if File_vega_commands_v1_transaction_proto != nil {
		return
	}
	file_vega_commands_v1_commands_proto_init()
	file_vega_commands_v1_data_proto_init()
	file_vega_commands_v1_signature_proto_init()
	file_vega_commands_v1_validator_commands_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vega_commands_v1_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_commands_v1_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_commands_v1_transaction_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InputData_OrderSubmission)(nil),
		(*InputData_OrderCancellation)(nil),
		(*InputData_OrderAmendment)(nil),
		(*InputData_WithdrawSubmission)(nil),
		(*InputData_ProposalSubmission)(nil),
		(*InputData_VoteSubmission)(nil),
		(*InputData_LiquidityProvisionSubmission)(nil),
		(*InputData_DelegateSubmission)(nil),
		(*InputData_UndelegateSubmission)(nil),
		(*InputData_LiquidityProvisionCancellation)(nil),
		(*InputData_LiquidityProvisionAmendment)(nil),
		(*InputData_Transfer)(nil),
		(*InputData_CancelTransfer)(nil),
		(*InputData_AnnounceNode)(nil),
		(*InputData_BatchMarketInstructions)(nil),
		(*InputData_StopOrdersSubmission)(nil),
		(*InputData_StopOrdersCancellation)(nil),
		(*InputData_CreateReferralSet)(nil),
		(*InputData_UpdateReferralSet)(nil),
		(*InputData_ApplyReferralCode)(nil),
		(*InputData_UpdateMarginMode)(nil),
		(*InputData_JoinTeam)(nil),
		(*InputData_NodeVote)(nil),
		(*InputData_NodeSignature)(nil),
		(*InputData_ChainEvent)(nil),
		(*InputData_KeyRotateSubmission)(nil),
		(*InputData_StateVariableProposal)(nil),
		(*InputData_ValidatorHeartbeat)(nil),
		(*InputData_EthereumKeyRotateSubmission)(nil),
		(*InputData_ProtocolUpgradeProposal)(nil),
		(*InputData_IssueSignatures)(nil),
		(*InputData_OracleDataSubmission)(nil),
		(*InputData_BatchProposalSubmission)(nil),
	}
	file_vega_commands_v1_transaction_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Transaction_Address)(nil),
		(*Transaction_PubKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_commands_v1_transaction_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_commands_v1_transaction_proto_goTypes,
		DependencyIndexes: file_vega_commands_v1_transaction_proto_depIdxs,
		EnumInfos:         file_vega_commands_v1_transaction_proto_enumTypes,
		MessageInfos:      file_vega_commands_v1_transaction_proto_msgTypes,
	}.Build()
	File_vega_commands_v1_transaction_proto = out.File
	file_vega_commands_v1_transaction_proto_rawDesc = nil
	file_vega_commands_v1_transaction_proto_goTypes = nil
	file_vega_commands_v1_transaction_proto_depIdxs = nil
}
