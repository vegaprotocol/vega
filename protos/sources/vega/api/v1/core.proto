syntax = "proto3";

package vega.api.v1;


import "vega/vega.proto";
import "vega/events/v1/events.proto";
import "vega/commands/v1/transaction.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "code.vegaprotocol.io/vega/protos/vega/api/v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Vega core APIs";
    version: "0.57.0";
  }
  schemes: [HTTP, HTTPS]
  host: "lb.testnet.vega.xyz"
};


service CoreService {
  // Submit Transaction
  //
  // Submit a signed transaction
  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);

  // Chain event
  //
  // Propagate a chain event
  rpc PropagateChainEvent(PropagateChainEventRequest) returns (PropagateChainEventResponse);

  // Statistics
  //
  // Get Statistics on Vega
  rpc Statistics(StatisticsRequest) returns (StatisticsResponse);

  // Blockchain height
  //
  // Get the height of the last tendermint block
  rpc LastBlockHeight(LastBlockHeightRequest) returns (LastBlockHeightResponse);

  // Vega time
  //
  // Get Time
  rpc GetVegaTime(GetVegaTimeRequest) returns (GetVegaTimeResponse);

  // Subscribe to a stream of events from the core
  rpc ObserveEventBus(stream ObserveEventBusRequest) returns (stream ObserveEventBusResponse);

  // Submit raw transaction
  //
  // Submit a version agnostic signed transaction
  rpc SubmitRawTransaction(SubmitRawTransactionRequest) returns (SubmitRawTransactionResponse);

  // Check transaction
  //
  // Check a signed transaction
  rpc CheckTransaction(CheckTransactionRequest) returns (CheckTransactionResponse);

  // Check raw transaction
  //
  // Check a raw signed transaction
  rpc CheckRawTransaction(CheckRawTransactionRequest) returns (CheckRawTransactionResponse);
}

// Request for a new event sent by the blockchain queue to be propagated on Vega
message PropagateChainEventRequest {
  // Chain event
  bytes event = 1;
  // Public key
  string pub_key = 2;
  // Signature
  bytes signature = 3;
}

// Response for a new event sent by the blockchain queue to be propagated on Vega
message PropagateChainEventResponse {
  // Success will be true if the event was accepted by the node,
  // **Important** - success does not mean that the event is confirmed by consensus
  bool success = 1;
}

// Request for submitting a transaction v2 on Vega
message SubmitTransactionRequest {
  // Blockchain transaction type
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // The transaction will be submitted without waiting for response
    TYPE_ASYNC = 1;
    // The transaction will be submitted, and blocking until the
    // tendermint mempool return a response
    TYPE_SYNC = 2;
    // The transaction will submitted, and blocking until the tendermint
    // network will have committed it into a block
    TYPE_COMMIT = 3;
  }

  // A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
  vega.commands.v1.Transaction tx = 1;
  // Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
  Type type = 2;
}

// Response for submitting a transaction v2 on Vega
message SubmitTransactionResponse {
  // Success will be true if the transaction was accepted by the node,
  // **Important** - success does not mean that the event is confirmed by consensus
  bool success = 1;
  // Hash of the transaction, if accepted
  string tx_hash = 2;
  // Result code success if unsucessful
  uint32 code     = 3;
  // Data for details
  string data     = 4;
  string log = 5 ;
  // Height for commit
  int64 height = 6;
}

// Request for checking a transaction v2 on Vega
message CheckTransactionRequest {
  // A bundle of signed payload and signature, to form a transaction that would be submitted to the Vega blockchain
  vega.commands.v1.Transaction tx = 1;
}

message CheckTransactionResponse {
  // Success will be true if the transaction was checked by the node
  bool success      = 1;

  // Check code result
  uint32 code       = 2;
  // Gas wanted for transaction
  int64 gas_wanted  = 3;
  // Gas used for transaction
  int64 gas_used    = 4;
}

// Request for submitting a version agnostic transaction on Vega
message SubmitRawTransactionRequest {
  // Blockchain transaction type
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // The transaction will be submitted without waiting for response
    TYPE_ASYNC = 1;
    // The transaction will be submitted, and blocking until the
    // tendermint mempool return a response
    TYPE_SYNC = 2;
    // The transaction will submitted, and blocking until the tendermint
    // network will have committed it into a block
    TYPE_COMMIT = 3;
  }

  // A bundle of signed payload and signature marshalled into a byte array, to form a transaction that will be submitted to the Vega blockchain
  bytes tx = 1;
  // Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
  Type type = 2;
}

// Response for submitting a version agnostic transaction on Vega
message SubmitRawTransactionResponse {
  // Success will be true if the transaction was accepted by the node,
  // **Important** - success does not mean that the event is confirmed by consensus
  bool success   = 1;
  // Hash of the transaction, if accepted
  string tx_hash = 2;

  uint32 code    = 3;
  string data    = 4;
  string log     = 5;
  int64 height   = 6;
}

// Request for checking a version agnostic transaction on Vega
message CheckRawTransactionRequest {
  // A bundle of signed payload and signature marshalled into a byte array, to form a transaction that would be submitted to the Vega blockchain
  bytes tx = 1;
}

// Response for checking a version agnostic transaction on Vega
message CheckRawTransactionResponse {
  // Success will be true if the transaction was checked by the node
  bool success      = 1;

  // Check code result
  uint32 code       = 2;
  // Gas wanted for transaction
  int64 gas_wanted  = 3;
  // Gas used for transaction
  int64 gas_used    = 4;
}

// Request for the current time of the vega network
message GetVegaTimeRequest {}

// Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
message GetVegaTimeResponse {
  // Timestamp representation of current VegaTime as represented in
  // Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`
  int64 timestamp = 1;
}

// Request to subscribe to a stream of one or more event types from the Vega event bus
message ObserveEventBusRequest {
  // One or more types of event, required field
  repeated vega.events.v1.BusEventType type = 1;
  // Market identifier, optional field
  string market_id = 2;
  // Party identifier, optional field
  string party_id = 3;
  // Batch size, optional field -
  // If not specified, any events received will be sent immediately. If the client is not ready
  // for the next data-set, data may be dropped a number of times, and eventually the stream is closed.
  // if specified, the first batch will be sent when ready. To receive the next set of events, the client
  // must write an `ObserveEventBatch` message on the stream to flush the buffer.
  // If no message is received in 5 seconds, the stream is closed.
  // Default: 0, send any and all events when they are available.
  int64 batch_size = 4;
}

// Response to a subscribed stream of events from the Vega event bus
message ObserveEventBusResponse {
  // One or more events
  repeated vega.events.v1.BusEvent events = 1;
}

// A a request for statistics about the Vega network
message StatisticsRequest {}

message StatisticsResponse {
  Statistics statistics = 1;
}

// Vega domain specific statistics as reported by the node the caller is connected to
message Statistics {
  // Current block height as reported by the Vega blockchain
  uint64 block_height = 1;
  // Current backlog length (number of transactions) that are waiting to be included in a block
  uint64 backlog_length = 2;
  // Total number of connected peers to this node
  uint64 total_peers = 3;
  // Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision
  string genesis_time = 4;
  // Current system date and time formatted in ISO-8601 datetime format with nanosecond precision
  string current_time = 5;
  // Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision
  string vega_time = 6;
  // Status of the connection to the Vega blockchain
  // - See [`ChainStatus`](#vega.ChainStatus)
  vega.ChainStatus status = 7;
  // Transactions per block
  uint64 tx_per_block = 8;
  // Average transaction size in bytes
  uint64 average_tx_bytes = 9;
  // Average orders per block
  uint64 average_orders_per_block = 10;
  // Trades emitted per second
  uint64 trades_per_second = 11;
  // Orders processed per second
  uint64 orders_per_second = 12;
  // Total markets on this Vega network
  uint64 total_markets = 13;
  // Total number of order amendments since genesis (on all markets)
  uint64 total_amend_order = 16;
  // Total number of order cancellations since genesis (on all markets)
  uint64 total_cancel_order = 17;
  // Total number of order submissions since genesis (on all markets)
  uint64 total_create_order = 18;
  // Total number of orders processed since genesis (on all markets)
  uint64 total_orders = 19;
  // Total number of trades emitted since genesis (on all markets)
  uint64 total_trades = 20;
  // Current number of stream subscribers to order data
  uint32 order_subscriptions = 21;
  // Current number of stream subscribers to trade data
  uint32 trade_subscriptions = 22;
  // Current number of stream subscribers to candle-stick data
  uint32 candle_subscriptions = 23;
  // Current number of stream subscribers to market depth data
  uint32 market_depth_subscriptions = 24;
  // Current number of stream subscribers to positions data
  uint32 positions_subscriptions = 25;
  // Current number of stream subscribers to account data
  uint32 account_subscriptions = 26;
  // Current number of stream subscribers to market data
  uint32 market_data_subscriptions = 27;
  // The version hash of the Vega node software
  string app_version_hash = 28;
  // The version of the Vega node software
  string app_version = 29;
  // The version of the underlying Vega blockchain
  string chain_version = 30;
  // Current block duration, in nanoseconds
  uint64 block_duration = 31;
  // Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision
  string uptime = 32;
  // Unique identifier for the underlying Vega blockchain
  string chain_id = 33;
  // Current number of stream subscribers to market depth update data
  uint32 market_depth_updates_subscriptions = 34;
  // Current block hash
  string block_hash = 35;
}

// A request to get the height of the very last block processed
// by tendermint
message LastBlockHeightRequest {}

// A response with the height of the last block processed by
// tendermint
message LastBlockHeightResponse {
  // last block height
  uint64 height = 1;
  // last block hash
  string hash = 2;
  // supported proof of work hash function
  string spam_pow_hash_function = 3;
  // the difficulty of the proof of work (target number of zeros)
  uint32 spam_pow_difficulty = 4;
  // supported proof of work number of blocks behind current height allowed
  uint32 spam_pow_number_of_past_blocks = 5;
  // allowed number of transactions per block
  uint32 spam_pow_number_of_tx_per_block = 6;
  // is increasing difficulty allowed for using the same height for more than `spam_pow_number_of_past_blocks` transactions
  bool spam_pow_increasing_difficulty = 7;
  // the network chain id from which the block comes from
  string chain_id = 8;
}
