// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/validators/erc20multisig (interfaces: MultiSigOnChainVerifier)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "code.vegaprotocol.io/vega/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockMultiSigOnChainVerifier is a mock of MultiSigOnChainVerifier interface.
type MockMultiSigOnChainVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockMultiSigOnChainVerifierMockRecorder
}

// MockMultiSigOnChainVerifierMockRecorder is the mock recorder for MockMultiSigOnChainVerifier.
type MockMultiSigOnChainVerifierMockRecorder struct {
	mock *MockMultiSigOnChainVerifier
}

// NewMockMultiSigOnChainVerifier creates a new mock instance.
func NewMockMultiSigOnChainVerifier(ctrl *gomock.Controller) *MockMultiSigOnChainVerifier {
	mock := &MockMultiSigOnChainVerifier{ctrl: ctrl}
	mock.recorder = &MockMultiSigOnChainVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiSigOnChainVerifier) EXPECT() *MockMultiSigOnChainVerifierMockRecorder {
	return m.recorder
}

// CheckSignerEvent mocks base method.
func (m *MockMultiSigOnChainVerifier) CheckSignerEvent(arg0 *types.SignerEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSignerEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSignerEvent indicates an expected call of CheckSignerEvent.
func (mr *MockMultiSigOnChainVerifierMockRecorder) CheckSignerEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSignerEvent", reflect.TypeOf((*MockMultiSigOnChainVerifier)(nil).CheckSignerEvent), arg0)
}

// CheckThresholdSetEvent mocks base method.
func (m *MockMultiSigOnChainVerifier) CheckThresholdSetEvent(arg0 *types.SignerThresholdSetEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckThresholdSetEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckThresholdSetEvent indicates an expected call of CheckThresholdSetEvent.
func (mr *MockMultiSigOnChainVerifierMockRecorder) CheckThresholdSetEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckThresholdSetEvent", reflect.TypeOf((*MockMultiSigOnChainVerifier)(nil).CheckThresholdSetEvent), arg0)
}
