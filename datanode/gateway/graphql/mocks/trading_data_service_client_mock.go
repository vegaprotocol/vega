// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/gateway/graphql (interfaces: TradingDataServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "code.vegaprotocol.io/vega/protos/data-node/api/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTradingDataServiceClient is a mock of TradingDataServiceClient interface.
type MockTradingDataServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTradingDataServiceClientMockRecorder
}

// MockTradingDataServiceClientMockRecorder is the mock recorder for MockTradingDataServiceClient.
type MockTradingDataServiceClientMockRecorder struct {
	mock *MockTradingDataServiceClient
}

// NewMockTradingDataServiceClient creates a new mock instance.
func NewMockTradingDataServiceClient(ctrl *gomock.Controller) *MockTradingDataServiceClient {
	mock := &MockTradingDataServiceClient{ctrl: ctrl}
	mock.recorder = &MockTradingDataServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradingDataServiceClient) EXPECT() *MockTradingDataServiceClientMockRecorder {
	return m.recorder
}

// AccountsSubscribe mocks base method.
func (m *MockTradingDataServiceClient) AccountsSubscribe(arg0 context.Context, arg1 *v1.AccountsSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_AccountsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountsSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_AccountsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountsSubscribe indicates an expected call of AccountsSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) AccountsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountsSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).AccountsSubscribe), varargs...)
}

// AssetByID mocks base method.
func (m *MockTradingDataServiceClient) AssetByID(arg0 context.Context, arg1 *v1.AssetByIDRequest, arg2 ...grpc.CallOption) (*v1.AssetByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssetByID", varargs...)
	ret0, _ := ret[0].(*v1.AssetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssetByID indicates an expected call of AssetByID.
func (mr *MockTradingDataServiceClientMockRecorder) AssetByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).AssetByID), varargs...)
}

// Assets mocks base method.
func (m *MockTradingDataServiceClient) Assets(arg0 context.Context, arg1 *v1.AssetsRequest, arg2 ...grpc.CallOption) (*v1.AssetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assets", varargs...)
	ret0, _ := ret[0].(*v1.AssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assets indicates an expected call of Assets.
func (mr *MockTradingDataServiceClientMockRecorder) Assets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assets", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Assets), varargs...)
}

// Candles mocks base method.
func (m *MockTradingDataServiceClient) Candles(arg0 context.Context, arg1 *v1.CandlesRequest, arg2 ...grpc.CallOption) (*v1.CandlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Candles", varargs...)
	ret0, _ := ret[0].(*v1.CandlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Candles indicates an expected call of Candles.
func (mr *MockTradingDataServiceClientMockRecorder) Candles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Candles", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Candles), varargs...)
}

// CandlesSubscribe mocks base method.
func (m *MockTradingDataServiceClient) CandlesSubscribe(arg0 context.Context, arg1 *v1.CandlesSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_CandlesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CandlesSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_CandlesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CandlesSubscribe indicates an expected call of CandlesSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) CandlesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CandlesSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).CandlesSubscribe), varargs...)
}

// Checkpoints mocks base method.
func (m *MockTradingDataServiceClient) Checkpoints(arg0 context.Context, arg1 *v1.CheckpointsRequest, arg2 ...grpc.CallOption) (*v1.CheckpointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Checkpoints", varargs...)
	ret0, _ := ret[0].(*v1.CheckpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkpoints indicates an expected call of Checkpoints.
func (mr *MockTradingDataServiceClientMockRecorder) Checkpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkpoints", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Checkpoints), varargs...)
}

// Delegations mocks base method.
func (m *MockTradingDataServiceClient) Delegations(arg0 context.Context, arg1 *v1.DelegationsRequest, arg2 ...grpc.CallOption) (*v1.DelegationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delegations", varargs...)
	ret0, _ := ret[0].(*v1.DelegationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delegations indicates an expected call of Delegations.
func (mr *MockTradingDataServiceClientMockRecorder) Delegations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegations", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Delegations), varargs...)
}

// Deposit mocks base method.
func (m *MockTradingDataServiceClient) Deposit(arg0 context.Context, arg1 *v1.DepositRequest, arg2 ...grpc.CallOption) (*v1.DepositResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposit", varargs...)
	ret0, _ := ret[0].(*v1.DepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockTradingDataServiceClientMockRecorder) Deposit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Deposit), varargs...)
}

// Deposits mocks base method.
func (m *MockTradingDataServiceClient) Deposits(arg0 context.Context, arg1 *v1.DepositsRequest, arg2 ...grpc.CallOption) (*v1.DepositsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deposits", varargs...)
	ret0, _ := ret[0].(*v1.DepositsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposits indicates an expected call of Deposits.
func (mr *MockTradingDataServiceClientMockRecorder) Deposits(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposits", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Deposits), varargs...)
}

// ERC20WithdrawalApproval mocks base method.
func (m *MockTradingDataServiceClient) ERC20WithdrawalApproval(arg0 context.Context, arg1 *v1.ERC20WithdrawalApprovalRequest, arg2 ...grpc.CallOption) (*v1.ERC20WithdrawalApprovalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ERC20WithdrawalApproval", varargs...)
	ret0, _ := ret[0].(*v1.ERC20WithdrawalApprovalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ERC20WithdrawalApproval indicates an expected call of ERC20WithdrawalApproval.
func (mr *MockTradingDataServiceClientMockRecorder) ERC20WithdrawalApproval(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ERC20WithdrawalApproval", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ERC20WithdrawalApproval), varargs...)
}

// EstimateFee mocks base method.
func (m *MockTradingDataServiceClient) EstimateFee(arg0 context.Context, arg1 *v1.EstimateFeeRequest, arg2 ...grpc.CallOption) (*v1.EstimateFeeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateFee", varargs...)
	ret0, _ := ret[0].(*v1.EstimateFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateFee indicates an expected call of EstimateFee.
func (mr *MockTradingDataServiceClientMockRecorder) EstimateFee(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateFee", reflect.TypeOf((*MockTradingDataServiceClient)(nil).EstimateFee), varargs...)
}

// EstimateMargin mocks base method.
func (m *MockTradingDataServiceClient) EstimateMargin(arg0 context.Context, arg1 *v1.EstimateMarginRequest, arg2 ...grpc.CallOption) (*v1.EstimateMarginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateMargin", varargs...)
	ret0, _ := ret[0].(*v1.EstimateMarginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateMargin indicates an expected call of EstimateMargin.
func (mr *MockTradingDataServiceClientMockRecorder) EstimateMargin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateMargin", reflect.TypeOf((*MockTradingDataServiceClient)(nil).EstimateMargin), varargs...)
}

// FeeInfrastructureAccounts mocks base method.
func (m *MockTradingDataServiceClient) FeeInfrastructureAccounts(arg0 context.Context, arg1 *v1.FeeInfrastructureAccountsRequest, arg2 ...grpc.CallOption) (*v1.FeeInfrastructureAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FeeInfrastructureAccounts", varargs...)
	ret0, _ := ret[0].(*v1.FeeInfrastructureAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeInfrastructureAccounts indicates an expected call of FeeInfrastructureAccounts.
func (mr *MockTradingDataServiceClientMockRecorder) FeeInfrastructureAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeInfrastructureAccounts", reflect.TypeOf((*MockTradingDataServiceClient)(nil).FeeInfrastructureAccounts), varargs...)
}

// GetEpoch mocks base method.
func (m *MockTradingDataServiceClient) GetEpoch(arg0 context.Context, arg1 *v1.GetEpochRequest, arg2 ...grpc.CallOption) (*v1.GetEpochResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpoch", varargs...)
	ret0, _ := ret[0].(*v1.GetEpochResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockTradingDataServiceClientMockRecorder) GetEpoch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetEpoch), varargs...)
}

// GetKeyRotations mocks base method.
func (m *MockTradingDataServiceClient) GetKeyRotations(arg0 context.Context, arg1 *v1.GetKeyRotationsRequest, arg2 ...grpc.CallOption) (*v1.GetKeyRotationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyRotations", varargs...)
	ret0, _ := ret[0].(*v1.GetKeyRotationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRotations indicates an expected call of GetKeyRotations.
func (mr *MockTradingDataServiceClientMockRecorder) GetKeyRotations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRotations", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetKeyRotations), varargs...)
}

// GetKeyRotationsByNode mocks base method.
func (m *MockTradingDataServiceClient) GetKeyRotationsByNode(arg0 context.Context, arg1 *v1.GetKeyRotationsByNodeRequest, arg2 ...grpc.CallOption) (*v1.GetKeyRotationsByNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyRotationsByNode", varargs...)
	ret0, _ := ret[0].(*v1.GetKeyRotationsByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyRotationsByNode indicates an expected call of GetKeyRotationsByNode.
func (mr *MockTradingDataServiceClientMockRecorder) GetKeyRotationsByNode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyRotationsByNode", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetKeyRotationsByNode), varargs...)
}

// GetNetworkParametersProposals mocks base method.
func (m *MockTradingDataServiceClient) GetNetworkParametersProposals(arg0 context.Context, arg1 *v1.GetNetworkParametersProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetNetworkParametersProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkParametersProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetNetworkParametersProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkParametersProposals indicates an expected call of GetNetworkParametersProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetNetworkParametersProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkParametersProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNetworkParametersProposals), varargs...)
}

// GetNewAssetProposals mocks base method.
func (m *MockTradingDataServiceClient) GetNewAssetProposals(arg0 context.Context, arg1 *v1.GetNewAssetProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetNewAssetProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewAssetProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetNewAssetProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewAssetProposals indicates an expected call of GetNewAssetProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetNewAssetProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewAssetProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNewAssetProposals), varargs...)
}

// GetNewFreeformProposals mocks base method.
func (m *MockTradingDataServiceClient) GetNewFreeformProposals(arg0 context.Context, arg1 *v1.GetNewFreeformProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetNewFreeformProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewFreeformProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetNewFreeformProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewFreeformProposals indicates an expected call of GetNewFreeformProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetNewFreeformProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewFreeformProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNewFreeformProposals), varargs...)
}

// GetNewMarketProposals mocks base method.
func (m *MockTradingDataServiceClient) GetNewMarketProposals(arg0 context.Context, arg1 *v1.GetNewMarketProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetNewMarketProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewMarketProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetNewMarketProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewMarketProposals indicates an expected call of GetNewMarketProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetNewMarketProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewMarketProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNewMarketProposals), varargs...)
}

// GetNodeByID mocks base method.
func (m *MockTradingDataServiceClient) GetNodeByID(arg0 context.Context, arg1 *v1.GetNodeByIDRequest, arg2 ...grpc.CallOption) (*v1.GetNodeByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeByID", varargs...)
	ret0, _ := ret[0].(*v1.GetNodeByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByID indicates an expected call of GetNodeByID.
func (mr *MockTradingDataServiceClientMockRecorder) GetNodeByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNodeByID), varargs...)
}

// GetNodeData mocks base method.
func (m *MockTradingDataServiceClient) GetNodeData(arg0 context.Context, arg1 *v1.GetNodeDataRequest, arg2 ...grpc.CallOption) (*v1.GetNodeDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeData", varargs...)
	ret0, _ := ret[0].(*v1.GetNodeDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeData indicates an expected call of GetNodeData.
func (mr *MockTradingDataServiceClientMockRecorder) GetNodeData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeData", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNodeData), varargs...)
}

// GetNodeSignaturesAggregate mocks base method.
func (m *MockTradingDataServiceClient) GetNodeSignaturesAggregate(arg0 context.Context, arg1 *v1.GetNodeSignaturesAggregateRequest, arg2 ...grpc.CallOption) (*v1.GetNodeSignaturesAggregateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeSignaturesAggregate", varargs...)
	ret0, _ := ret[0].(*v1.GetNodeSignaturesAggregateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeSignaturesAggregate indicates an expected call of GetNodeSignaturesAggregate.
func (mr *MockTradingDataServiceClientMockRecorder) GetNodeSignaturesAggregate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeSignaturesAggregate", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNodeSignaturesAggregate), varargs...)
}

// GetNodes mocks base method.
func (m *MockTradingDataServiceClient) GetNodes(arg0 context.Context, arg1 *v1.GetNodesRequest, arg2 ...grpc.CallOption) (*v1.GetNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodes", varargs...)
	ret0, _ := ret[0].(*v1.GetNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockTradingDataServiceClientMockRecorder) GetNodes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetNodes), varargs...)
}

// GetProposalByID mocks base method.
func (m *MockTradingDataServiceClient) GetProposalByID(arg0 context.Context, arg1 *v1.GetProposalByIDRequest, arg2 ...grpc.CallOption) (*v1.GetProposalByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalByID", varargs...)
	ret0, _ := ret[0].(*v1.GetProposalByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByID indicates an expected call of GetProposalByID.
func (mr *MockTradingDataServiceClientMockRecorder) GetProposalByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetProposalByID), varargs...)
}

// GetProposalByReference mocks base method.
func (m *MockTradingDataServiceClient) GetProposalByReference(arg0 context.Context, arg1 *v1.GetProposalByReferenceRequest, arg2 ...grpc.CallOption) (*v1.GetProposalByReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalByReference", varargs...)
	ret0, _ := ret[0].(*v1.GetProposalByReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByReference indicates an expected call of GetProposalByReference.
func (mr *MockTradingDataServiceClientMockRecorder) GetProposalByReference(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByReference", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetProposalByReference), varargs...)
}

// GetProposals mocks base method.
func (m *MockTradingDataServiceClient) GetProposals(arg0 context.Context, arg1 *v1.GetProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposals indicates an expected call of GetProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetProposals), varargs...)
}

// GetProposalsByParty mocks base method.
func (m *MockTradingDataServiceClient) GetProposalsByParty(arg0 context.Context, arg1 *v1.GetProposalsByPartyRequest, arg2 ...grpc.CallOption) (*v1.GetProposalsByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProposalsByParty", varargs...)
	ret0, _ := ret[0].(*v1.GetProposalsByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalsByParty indicates an expected call of GetProposalsByParty.
func (mr *MockTradingDataServiceClientMockRecorder) GetProposalsByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetProposalsByParty), varargs...)
}

// GetRewardSummaries mocks base method.
func (m *MockTradingDataServiceClient) GetRewardSummaries(arg0 context.Context, arg1 *v1.GetRewardSummariesRequest, arg2 ...grpc.CallOption) (*v1.GetRewardSummariesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRewardSummaries", varargs...)
	ret0, _ := ret[0].(*v1.GetRewardSummariesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardSummaries indicates an expected call of GetRewardSummaries.
func (mr *MockTradingDataServiceClientMockRecorder) GetRewardSummaries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardSummaries", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetRewardSummaries), varargs...)
}

// GetRewards mocks base method.
func (m *MockTradingDataServiceClient) GetRewards(arg0 context.Context, arg1 *v1.GetRewardsRequest, arg2 ...grpc.CallOption) (*v1.GetRewardsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRewards", varargs...)
	ret0, _ := ret[0].(*v1.GetRewardsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewards indicates an expected call of GetRewards.
func (mr *MockTradingDataServiceClientMockRecorder) GetRewards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewards", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetRewards), varargs...)
}

// GetRiskFactors mocks base method.
func (m *MockTradingDataServiceClient) GetRiskFactors(arg0 context.Context, arg1 *v1.GetRiskFactorsRequest, arg2 ...grpc.CallOption) (*v1.GetRiskFactorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRiskFactors", varargs...)
	ret0, _ := ret[0].(*v1.GetRiskFactorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRiskFactors indicates an expected call of GetRiskFactors.
func (mr *MockTradingDataServiceClientMockRecorder) GetRiskFactors(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRiskFactors", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetRiskFactors), varargs...)
}

// GetUpdateMarketProposals mocks base method.
func (m *MockTradingDataServiceClient) GetUpdateMarketProposals(arg0 context.Context, arg1 *v1.GetUpdateMarketProposalsRequest, arg2 ...grpc.CallOption) (*v1.GetUpdateMarketProposalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpdateMarketProposals", varargs...)
	ret0, _ := ret[0].(*v1.GetUpdateMarketProposalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateMarketProposals indicates an expected call of GetUpdateMarketProposals.
func (mr *MockTradingDataServiceClientMockRecorder) GetUpdateMarketProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateMarketProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetUpdateMarketProposals), varargs...)
}

// GetVegaTime mocks base method.
func (m *MockTradingDataServiceClient) GetVegaTime(arg0 context.Context, arg1 *v1.GetVegaTimeRequest, arg2 ...grpc.CallOption) (*v1.GetVegaTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVegaTime", varargs...)
	ret0, _ := ret[0].(*v1.GetVegaTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVegaTime indicates an expected call of GetVegaTime.
func (mr *MockTradingDataServiceClientMockRecorder) GetVegaTime(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVegaTime", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetVegaTime), varargs...)
}

// GetVotesByParty mocks base method.
func (m *MockTradingDataServiceClient) GetVotesByParty(arg0 context.Context, arg1 *v1.GetVotesByPartyRequest, arg2 ...grpc.CallOption) (*v1.GetVotesByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVotesByParty", varargs...)
	ret0, _ := ret[0].(*v1.GetVotesByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotesByParty indicates an expected call of GetVotesByParty.
func (mr *MockTradingDataServiceClientMockRecorder) GetVotesByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotesByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GetVotesByParty), varargs...)
}

// GlobalRewardPoolAccounts mocks base method.
func (m *MockTradingDataServiceClient) GlobalRewardPoolAccounts(arg0 context.Context, arg1 *v1.GlobalRewardPoolAccountsRequest, arg2 ...grpc.CallOption) (*v1.GlobalRewardPoolAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GlobalRewardPoolAccounts", varargs...)
	ret0, _ := ret[0].(*v1.GlobalRewardPoolAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalRewardPoolAccounts indicates an expected call of GlobalRewardPoolAccounts.
func (mr *MockTradingDataServiceClientMockRecorder) GlobalRewardPoolAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalRewardPoolAccounts", reflect.TypeOf((*MockTradingDataServiceClient)(nil).GlobalRewardPoolAccounts), varargs...)
}

// LastTrade mocks base method.
func (m *MockTradingDataServiceClient) LastTrade(arg0 context.Context, arg1 *v1.LastTradeRequest, arg2 ...grpc.CallOption) (*v1.LastTradeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LastTrade", varargs...)
	ret0, _ := ret[0].(*v1.LastTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastTrade indicates an expected call of LastTrade.
func (mr *MockTradingDataServiceClientMockRecorder) LastTrade(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTrade", reflect.TypeOf((*MockTradingDataServiceClient)(nil).LastTrade), varargs...)
}

// LiquidityProvisions mocks base method.
func (m *MockTradingDataServiceClient) LiquidityProvisions(arg0 context.Context, arg1 *v1.LiquidityProvisionsRequest, arg2 ...grpc.CallOption) (*v1.LiquidityProvisionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LiquidityProvisions", varargs...)
	ret0, _ := ret[0].(*v1.LiquidityProvisionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LiquidityProvisions indicates an expected call of LiquidityProvisions.
func (mr *MockTradingDataServiceClientMockRecorder) LiquidityProvisions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiquidityProvisions", reflect.TypeOf((*MockTradingDataServiceClient)(nil).LiquidityProvisions), varargs...)
}

// ListOracleData mocks base method.
func (m *MockTradingDataServiceClient) ListOracleData(arg0 context.Context, arg1 *v1.ListOracleDataRequest, arg2 ...grpc.CallOption) (*v1.ListOracleDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOracleData", varargs...)
	ret0, _ := ret[0].(*v1.ListOracleDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOracleData indicates an expected call of ListOracleData.
func (mr *MockTradingDataServiceClientMockRecorder) ListOracleData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOracleData", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ListOracleData), varargs...)
}

// MarginLevels mocks base method.
func (m *MockTradingDataServiceClient) MarginLevels(arg0 context.Context, arg1 *v1.MarginLevelsRequest, arg2 ...grpc.CallOption) (*v1.MarginLevelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarginLevels", varargs...)
	ret0, _ := ret[0].(*v1.MarginLevelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarginLevels indicates an expected call of MarginLevels.
func (mr *MockTradingDataServiceClientMockRecorder) MarginLevels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarginLevels", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarginLevels), varargs...)
}

// MarginLevelsSubscribe mocks base method.
func (m *MockTradingDataServiceClient) MarginLevelsSubscribe(arg0 context.Context, arg1 *v1.MarginLevelsSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_MarginLevelsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarginLevelsSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_MarginLevelsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarginLevelsSubscribe indicates an expected call of MarginLevelsSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) MarginLevelsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarginLevelsSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarginLevelsSubscribe), varargs...)
}

// MarketAccounts mocks base method.
func (m *MockTradingDataServiceClient) MarketAccounts(arg0 context.Context, arg1 *v1.MarketAccountsRequest, arg2 ...grpc.CallOption) (*v1.MarketAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketAccounts", varargs...)
	ret0, _ := ret[0].(*v1.MarketAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketAccounts indicates an expected call of MarketAccounts.
func (mr *MockTradingDataServiceClientMockRecorder) MarketAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketAccounts", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketAccounts), varargs...)
}

// MarketByID mocks base method.
func (m *MockTradingDataServiceClient) MarketByID(arg0 context.Context, arg1 *v1.MarketByIDRequest, arg2 ...grpc.CallOption) (*v1.MarketByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketByID", varargs...)
	ret0, _ := ret[0].(*v1.MarketByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketByID indicates an expected call of MarketByID.
func (mr *MockTradingDataServiceClientMockRecorder) MarketByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketByID), varargs...)
}

// MarketDataByID mocks base method.
func (m *MockTradingDataServiceClient) MarketDataByID(arg0 context.Context, arg1 *v1.MarketDataByIDRequest, arg2 ...grpc.CallOption) (*v1.MarketDataByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDataByID", varargs...)
	ret0, _ := ret[0].(*v1.MarketDataByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDataByID indicates an expected call of MarketDataByID.
func (mr *MockTradingDataServiceClientMockRecorder) MarketDataByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDataByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketDataByID), varargs...)
}

// MarketDepth mocks base method.
func (m *MockTradingDataServiceClient) MarketDepth(arg0 context.Context, arg1 *v1.MarketDepthRequest, arg2 ...grpc.CallOption) (*v1.MarketDepthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDepth", varargs...)
	ret0, _ := ret[0].(*v1.MarketDepthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDepth indicates an expected call of MarketDepth.
func (mr *MockTradingDataServiceClientMockRecorder) MarketDepth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDepth", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketDepth), varargs...)
}

// MarketDepthSubscribe mocks base method.
func (m *MockTradingDataServiceClient) MarketDepthSubscribe(arg0 context.Context, arg1 *v1.MarketDepthSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_MarketDepthSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDepthSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_MarketDepthSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDepthSubscribe indicates an expected call of MarketDepthSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) MarketDepthSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDepthSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketDepthSubscribe), varargs...)
}

// MarketDepthUpdatesSubscribe mocks base method.
func (m *MockTradingDataServiceClient) MarketDepthUpdatesSubscribe(arg0 context.Context, arg1 *v1.MarketDepthUpdatesSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_MarketDepthUpdatesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketDepthUpdatesSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_MarketDepthUpdatesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDepthUpdatesSubscribe indicates an expected call of MarketDepthUpdatesSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) MarketDepthUpdatesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDepthUpdatesSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketDepthUpdatesSubscribe), varargs...)
}

// Markets mocks base method.
func (m *MockTradingDataServiceClient) Markets(arg0 context.Context, arg1 *v1.MarketsRequest, arg2 ...grpc.CallOption) (*v1.MarketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Markets", varargs...)
	ret0, _ := ret[0].(*v1.MarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Markets indicates an expected call of Markets.
func (mr *MockTradingDataServiceClientMockRecorder) Markets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markets", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Markets), varargs...)
}

// MarketsData mocks base method.
func (m *MockTradingDataServiceClient) MarketsData(arg0 context.Context, arg1 *v1.MarketsDataRequest, arg2 ...grpc.CallOption) (*v1.MarketsDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketsData", varargs...)
	ret0, _ := ret[0].(*v1.MarketsDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketsData indicates an expected call of MarketsData.
func (mr *MockTradingDataServiceClientMockRecorder) MarketsData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketsData", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketsData), varargs...)
}

// MarketsDataSubscribe mocks base method.
func (m *MockTradingDataServiceClient) MarketsDataSubscribe(arg0 context.Context, arg1 *v1.MarketsDataSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_MarketsDataSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarketsDataSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_MarketsDataSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketsDataSubscribe indicates an expected call of MarketsDataSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) MarketsDataSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketsDataSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).MarketsDataSubscribe), varargs...)
}

// NetworkParameters mocks base method.
func (m *MockTradingDataServiceClient) NetworkParameters(arg0 context.Context, arg1 *v1.NetworkParametersRequest, arg2 ...grpc.CallOption) (*v1.NetworkParametersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NetworkParameters", varargs...)
	ret0, _ := ret[0].(*v1.NetworkParametersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkParameters indicates an expected call of NetworkParameters.
func (mr *MockTradingDataServiceClientMockRecorder) NetworkParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkParameters", reflect.TypeOf((*MockTradingDataServiceClient)(nil).NetworkParameters), varargs...)
}

// ObserveDelegations mocks base method.
func (m *MockTradingDataServiceClient) ObserveDelegations(arg0 context.Context, arg1 *v1.ObserveDelegationsRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObserveDelegationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveDelegations", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveDelegationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveDelegations indicates an expected call of ObserveDelegations.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveDelegations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDelegations", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveDelegations), varargs...)
}

// ObserveEventBus mocks base method.
func (m *MockTradingDataServiceClient) ObserveEventBus(arg0 context.Context, arg1 ...grpc.CallOption) (v1.TradingDataService_ObserveEventBusClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveEventBus", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveEventBusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveEventBus indicates an expected call of ObserveEventBus.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveEventBus(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveEventBus", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveEventBus), varargs...)
}

// ObserveGovernance mocks base method.
func (m *MockTradingDataServiceClient) ObserveGovernance(arg0 context.Context, arg1 *v1.ObserveGovernanceRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObserveGovernanceClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveGovernance", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveGovernanceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveGovernance indicates an expected call of ObserveGovernance.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveGovernance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveGovernance", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveGovernance), varargs...)
}

// ObservePartyProposals mocks base method.
func (m *MockTradingDataServiceClient) ObservePartyProposals(arg0 context.Context, arg1 *v1.ObservePartyProposalsRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObservePartyProposalsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObservePartyProposals", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObservePartyProposalsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObservePartyProposals indicates an expected call of ObservePartyProposals.
func (mr *MockTradingDataServiceClientMockRecorder) ObservePartyProposals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservePartyProposals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObservePartyProposals), varargs...)
}

// ObservePartyVotes mocks base method.
func (m *MockTradingDataServiceClient) ObservePartyVotes(arg0 context.Context, arg1 *v1.ObservePartyVotesRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObservePartyVotesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObservePartyVotes", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObservePartyVotesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObservePartyVotes indicates an expected call of ObservePartyVotes.
func (mr *MockTradingDataServiceClientMockRecorder) ObservePartyVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObservePartyVotes", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObservePartyVotes), varargs...)
}

// ObserveProposalVotes mocks base method.
func (m *MockTradingDataServiceClient) ObserveProposalVotes(arg0 context.Context, arg1 *v1.ObserveProposalVotesRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObserveProposalVotesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveProposalVotes", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveProposalVotesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveProposalVotes indicates an expected call of ObserveProposalVotes.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveProposalVotes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveProposalVotes", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveProposalVotes), varargs...)
}

// ObserveRewards mocks base method.
func (m *MockTradingDataServiceClient) ObserveRewards(arg0 context.Context, arg1 *v1.ObserveRewardsRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_ObserveRewardsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObserveRewards", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_ObserveRewardsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveRewards indicates an expected call of ObserveRewards.
func (mr *MockTradingDataServiceClientMockRecorder) ObserveRewards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveRewards", reflect.TypeOf((*MockTradingDataServiceClient)(nil).ObserveRewards), varargs...)
}

// OracleDataBySpec mocks base method.
func (m *MockTradingDataServiceClient) OracleDataBySpec(arg0 context.Context, arg1 *v1.OracleDataBySpecRequest, arg2 ...grpc.CallOption) (*v1.OracleDataBySpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OracleDataBySpec", varargs...)
	ret0, _ := ret[0].(*v1.OracleDataBySpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OracleDataBySpec indicates an expected call of OracleDataBySpec.
func (mr *MockTradingDataServiceClientMockRecorder) OracleDataBySpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OracleDataBySpec", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OracleDataBySpec), varargs...)
}

// OracleSpec mocks base method.
func (m *MockTradingDataServiceClient) OracleSpec(arg0 context.Context, arg1 *v1.OracleSpecRequest, arg2 ...grpc.CallOption) (*v1.OracleSpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OracleSpec", varargs...)
	ret0, _ := ret[0].(*v1.OracleSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OracleSpec indicates an expected call of OracleSpec.
func (mr *MockTradingDataServiceClientMockRecorder) OracleSpec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OracleSpec", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OracleSpec), varargs...)
}

// OracleSpecs mocks base method.
func (m *MockTradingDataServiceClient) OracleSpecs(arg0 context.Context, arg1 *v1.OracleSpecsRequest, arg2 ...grpc.CallOption) (*v1.OracleSpecsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OracleSpecs", varargs...)
	ret0, _ := ret[0].(*v1.OracleSpecsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OracleSpecs indicates an expected call of OracleSpecs.
func (mr *MockTradingDataServiceClientMockRecorder) OracleSpecs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OracleSpecs", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OracleSpecs), varargs...)
}

// OrderByID mocks base method.
func (m *MockTradingDataServiceClient) OrderByID(arg0 context.Context, arg1 *v1.OrderByIDRequest, arg2 ...grpc.CallOption) (*v1.OrderByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByID", varargs...)
	ret0, _ := ret[0].(*v1.OrderByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByID indicates an expected call of OrderByID.
func (mr *MockTradingDataServiceClientMockRecorder) OrderByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrderByID), varargs...)
}

// OrderByMarketAndID mocks base method.
func (m *MockTradingDataServiceClient) OrderByMarketAndID(arg0 context.Context, arg1 *v1.OrderByMarketAndIDRequest, arg2 ...grpc.CallOption) (*v1.OrderByMarketAndIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByMarketAndID", varargs...)
	ret0, _ := ret[0].(*v1.OrderByMarketAndIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByMarketAndID indicates an expected call of OrderByMarketAndID.
func (mr *MockTradingDataServiceClientMockRecorder) OrderByMarketAndID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByMarketAndID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrderByMarketAndID), varargs...)
}

// OrderByReference mocks base method.
func (m *MockTradingDataServiceClient) OrderByReference(arg0 context.Context, arg1 *v1.OrderByReferenceRequest, arg2 ...grpc.CallOption) (*v1.OrderByReferenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderByReference", varargs...)
	ret0, _ := ret[0].(*v1.OrderByReferenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderByReference indicates an expected call of OrderByReference.
func (mr *MockTradingDataServiceClientMockRecorder) OrderByReference(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByReference", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrderByReference), varargs...)
}

// OrderVersionsByID mocks base method.
func (m *MockTradingDataServiceClient) OrderVersionsByID(arg0 context.Context, arg1 *v1.OrderVersionsByIDRequest, arg2 ...grpc.CallOption) (*v1.OrderVersionsByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderVersionsByID", varargs...)
	ret0, _ := ret[0].(*v1.OrderVersionsByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderVersionsByID indicates an expected call of OrderVersionsByID.
func (mr *MockTradingDataServiceClientMockRecorder) OrderVersionsByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderVersionsByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrderVersionsByID), varargs...)
}

// OrdersByMarket mocks base method.
func (m *MockTradingDataServiceClient) OrdersByMarket(arg0 context.Context, arg1 *v1.OrdersByMarketRequest, arg2 ...grpc.CallOption) (*v1.OrdersByMarketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersByMarket", varargs...)
	ret0, _ := ret[0].(*v1.OrdersByMarketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByMarket indicates an expected call of OrdersByMarket.
func (mr *MockTradingDataServiceClientMockRecorder) OrdersByMarket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByMarket", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrdersByMarket), varargs...)
}

// OrdersByParty mocks base method.
func (m *MockTradingDataServiceClient) OrdersByParty(arg0 context.Context, arg1 *v1.OrdersByPartyRequest, arg2 ...grpc.CallOption) (*v1.OrdersByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersByParty", varargs...)
	ret0, _ := ret[0].(*v1.OrdersByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersByParty indicates an expected call of OrdersByParty.
func (mr *MockTradingDataServiceClientMockRecorder) OrdersByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrdersByParty), varargs...)
}

// OrdersSubscribe mocks base method.
func (m *MockTradingDataServiceClient) OrdersSubscribe(arg0 context.Context, arg1 *v1.OrdersSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_OrdersSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrdersSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_OrdersSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersSubscribe indicates an expected call of OrdersSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) OrdersSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).OrdersSubscribe), varargs...)
}

// Parties mocks base method.
func (m *MockTradingDataServiceClient) Parties(arg0 context.Context, arg1 *v1.PartiesRequest, arg2 ...grpc.CallOption) (*v1.PartiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parties", varargs...)
	ret0, _ := ret[0].(*v1.PartiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parties indicates an expected call of Parties.
func (mr *MockTradingDataServiceClientMockRecorder) Parties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parties", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Parties), varargs...)
}

// PartyAccounts mocks base method.
func (m *MockTradingDataServiceClient) PartyAccounts(arg0 context.Context, arg1 *v1.PartyAccountsRequest, arg2 ...grpc.CallOption) (*v1.PartyAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartyAccounts", varargs...)
	ret0, _ := ret[0].(*v1.PartyAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyAccounts indicates an expected call of PartyAccounts.
func (mr *MockTradingDataServiceClientMockRecorder) PartyAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyAccounts", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PartyAccounts), varargs...)
}

// PartyByID mocks base method.
func (m *MockTradingDataServiceClient) PartyByID(arg0 context.Context, arg1 *v1.PartyByIDRequest, arg2 ...grpc.CallOption) (*v1.PartyByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartyByID", varargs...)
	ret0, _ := ret[0].(*v1.PartyByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyByID indicates an expected call of PartyByID.
func (mr *MockTradingDataServiceClientMockRecorder) PartyByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyByID", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PartyByID), varargs...)
}

// PartyStake mocks base method.
func (m *MockTradingDataServiceClient) PartyStake(arg0 context.Context, arg1 *v1.PartyStakeRequest, arg2 ...grpc.CallOption) (*v1.PartyStakeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PartyStake", varargs...)
	ret0, _ := ret[0].(*v1.PartyStakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyStake indicates an expected call of PartyStake.
func (mr *MockTradingDataServiceClientMockRecorder) PartyStake(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyStake", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PartyStake), varargs...)
}

// PositionsByParty mocks base method.
func (m *MockTradingDataServiceClient) PositionsByParty(arg0 context.Context, arg1 *v1.PositionsByPartyRequest, arg2 ...grpc.CallOption) (*v1.PositionsByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PositionsByParty", varargs...)
	ret0, _ := ret[0].(*v1.PositionsByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionsByParty indicates an expected call of PositionsByParty.
func (mr *MockTradingDataServiceClientMockRecorder) PositionsByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PositionsByParty), varargs...)
}

// PositionsSubscribe mocks base method.
func (m *MockTradingDataServiceClient) PositionsSubscribe(arg0 context.Context, arg1 *v1.PositionsSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_PositionsSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PositionsSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_PositionsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionsSubscribe indicates an expected call of PositionsSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) PositionsSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).PositionsSubscribe), varargs...)
}

// TradesByMarket mocks base method.
func (m *MockTradingDataServiceClient) TradesByMarket(arg0 context.Context, arg1 *v1.TradesByMarketRequest, arg2 ...grpc.CallOption) (*v1.TradesByMarketResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByMarket", varargs...)
	ret0, _ := ret[0].(*v1.TradesByMarketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByMarket indicates an expected call of TradesByMarket.
func (mr *MockTradingDataServiceClientMockRecorder) TradesByMarket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByMarket", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TradesByMarket), varargs...)
}

// TradesByOrder mocks base method.
func (m *MockTradingDataServiceClient) TradesByOrder(arg0 context.Context, arg1 *v1.TradesByOrderRequest, arg2 ...grpc.CallOption) (*v1.TradesByOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByOrder", varargs...)
	ret0, _ := ret[0].(*v1.TradesByOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByOrder indicates an expected call of TradesByOrder.
func (mr *MockTradingDataServiceClientMockRecorder) TradesByOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByOrder", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TradesByOrder), varargs...)
}

// TradesByParty mocks base method.
func (m *MockTradingDataServiceClient) TradesByParty(arg0 context.Context, arg1 *v1.TradesByPartyRequest, arg2 ...grpc.CallOption) (*v1.TradesByPartyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesByParty", varargs...)
	ret0, _ := ret[0].(*v1.TradesByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesByParty indicates an expected call of TradesByParty.
func (mr *MockTradingDataServiceClientMockRecorder) TradesByParty(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesByParty", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TradesByParty), varargs...)
}

// TradesSubscribe mocks base method.
func (m *MockTradingDataServiceClient) TradesSubscribe(arg0 context.Context, arg1 *v1.TradesSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_TradesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TradesSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_TradesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TradesSubscribe indicates an expected call of TradesSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) TradesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TradesSubscribe), varargs...)
}

// TransferResponsesSubscribe mocks base method.
func (m *MockTradingDataServiceClient) TransferResponsesSubscribe(arg0 context.Context, arg1 *v1.TransferResponsesSubscribeRequest, arg2 ...grpc.CallOption) (v1.TradingDataService_TransferResponsesSubscribeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransferResponsesSubscribe", varargs...)
	ret0, _ := ret[0].(v1.TradingDataService_TransferResponsesSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferResponsesSubscribe indicates an expected call of TransferResponsesSubscribe.
func (mr *MockTradingDataServiceClientMockRecorder) TransferResponsesSubscribe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferResponsesSubscribe", reflect.TypeOf((*MockTradingDataServiceClient)(nil).TransferResponsesSubscribe), varargs...)
}

// Transfers mocks base method.
func (m *MockTradingDataServiceClient) Transfers(arg0 context.Context, arg1 *v1.TransfersRequest, arg2 ...grpc.CallOption) (*v1.TransfersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transfers", varargs...)
	ret0, _ := ret[0].(*v1.TransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfers indicates an expected call of Transfers.
func (mr *MockTradingDataServiceClientMockRecorder) Transfers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfers", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Transfers), varargs...)
}

// Withdrawal mocks base method.
func (m *MockTradingDataServiceClient) Withdrawal(arg0 context.Context, arg1 *v1.WithdrawalRequest, arg2 ...grpc.CallOption) (*v1.WithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Withdrawal", varargs...)
	ret0, _ := ret[0].(*v1.WithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockTradingDataServiceClientMockRecorder) Withdrawal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Withdrawal), varargs...)
}

// Withdrawals mocks base method.
func (m *MockTradingDataServiceClient) Withdrawals(arg0 context.Context, arg1 *v1.WithdrawalsRequest, arg2 ...grpc.CallOption) (*v1.WithdrawalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Withdrawals", varargs...)
	ret0, _ := ret[0].(*v1.WithdrawalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockTradingDataServiceClientMockRecorder) Withdrawals(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockTradingDataServiceClient)(nil).Withdrawals), varargs...)
}
