// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/sqlsubscribers (interfaces: DepositStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockDepositStore is a mock of DepositStore interface.
type MockDepositStore struct {
	ctrl     *gomock.Controller
	recorder *MockDepositStoreMockRecorder
}

// MockDepositStoreMockRecorder is the mock recorder for MockDepositStore.
type MockDepositStoreMockRecorder struct {
	mock *MockDepositStore
}

// NewMockDepositStore creates a new mock instance.
func NewMockDepositStore(ctrl *gomock.Controller) *MockDepositStore {
	mock := &MockDepositStore{ctrl: ctrl}
	mock.recorder = &MockDepositStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepositStore) EXPECT() *MockDepositStoreMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockDepositStore) Upsert(arg0 context.Context, arg1 *entities.Deposit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockDepositStoreMockRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDepositStore)(nil).Upsert), arg0, arg1)
}
