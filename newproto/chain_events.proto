syntax = "proto3";

package vega;
option go_package = "code.vegaprotocol.io/vega/proto";

// A deposit for a Vega built-in asset.
message BuiltinAssetDeposit {

  // A Vega network internal asset identifier.
  string vegaAssetID = 1;
  // A Vega party identifier (pub-key)
  string partyID = 2;
  // The amount to be deposited.
  uint64 amount = 3;
}

// A withdrawal for a Vega built-in asset.
message BuiltinAssetWithdrawal {

  // A Vega network internal asset identifier.
  string vegaAssetID = 1;
  // A Vega network party identifier (pub-key)
  string partyID = 2;
  // The amount to be withdrawn.
  uint64 amount = 3;
}

// An event related to a Vega built-in asset.
message BuiltinAssetEvent {

  oneof action {
    // Built-in asset deposit.
    BuiltinAssetDeposit deposit = 1001;
    // Built-in asset withdrawal.
    BuiltinAssetWithdrawal withdrawal = 1002;
  }
}

// An asset allowlisting for an ERC20 token.
message ERC20AssetList {

  // The Vega network internal identifier of the asset.
  string vegaAssetID = 1;
}

// An asset denylisting for an ERC20 token.
message ERC20AssetDelist {

  // The Vega network internal identifier of the asset.
  string vegaAssetID = 1;
}

// An asset deposit for an ERC20 token.
message ERC20Deposit {

  // The vega network internal identifier of the asset.
  string vegaAssetID = 1;
  // The Ethereum wallet that initiated the deposit.
  string sourceEthereumAddress = 2;
  // The Vega party identifier (pub-key) which is the target of the deposit.
  string targetPartyID = 3;
  // The amount to be deposited
  string amount = 4;
}

// An asset withdrawal for an ERC20 token.
message ERC20Withdrawal {

  // The Vega network internal identifier of the asset.
  string vegaAssetID = 1;
  // The target Ethereum wallet address.
  string targetEthereumAddress = 2;
  // The reference nonce used for the transaction.
  string referenceNonce = 3;
}

// An event related to an ERC20 token.
message ERC20Event {

  // Index of the transaction
  uint64 index = 1;
  // The block in which the transaction was added
  uint64 block = 2;
  // The action.
  oneof action {
    // List an ERC20 asset.
    ERC20AssetList assetList = 1001;
    // De-list an ERC20 asset.
    ERC20AssetDelist assetDelist = 1002;
    // Deposit ERC20 asset.
    ERC20Deposit deposit = 1003;
    // Withdraw ERC20 asset.
    ERC20Withdrawal withdrawal = 1004;
  }
}

// A Bitcoin deposit into Vega.
message BTCDeposit {

  // The Vega network internal identifier of the asset.
  string vegaAssetID = 1;
  // The BTC wallet initiating the deposit.
  string sourceBTCAddress = 2;
  // The Vega party identifier (pub-key) which is the target of the deposit.
  string targetPartyId = 3;
}

// A Bitcoin withdrawal from Vega.
message BTCWithdrawal {

  // The vega network internal identifier of the asset.
  string vegaAssetID = 1;
  // The party identifier (pub-key) initiating the withdrawal.
  string sourcePartyId = 2;
  // Target Bitcoin wallet address.
  string targetBTCAddress = 3;
  // The nonce reference of the transaction.
  string referenceNonce = 4;
}

// An event from the Bitcoin network.
message BTCEvent {

  // The index of the transaction.
  uint64 index = 1;
  // The block in which the transaction happened.
  uint64 block = 2;
  // The action.
  oneof action {
    // Deposit BTC asset.
    BTCDeposit deposit = 1001;
    // Withdraw BTC asset.
    BTCWithdrawal withdrawal = 1002;
  }
}

// Used as a wrapper for an Ethereum address (wallet/contract).
message EthereumAddress {

  // An Ethereum address.
  string address = 1;
}

// Used as a wrapper for a Bitcoin address (wallet).
message BitcoinAddress {

  // A Bitcoin address.
  string address = 1;
}

// Used as a wrapper type on any possible network address supported by Vega.
message Identifier {

  // The identifier.
  oneof identifier {
    // Ethereum network.
    EthereumAddress ethereumAddress = 1;
    // Bitcoin network.
    BitcoinAddress bitcoinAddress = 2;
  }
}

// A message to notify when a new validator is being added to the Vega network.
message AddValidator {

  // The identifier of the validator.
  Identifier id = 1;
}

// A message to notify when a validator is being removed from the Vega network.
message RemoveValidator {

  // The identifier of the validator.
  Identifier id = 1;
}

// An event related to validator management with foreign networks.
message ValidatorEvent {

  // The source identifier of the event.
  string sourceID = 1;
  // The action.
  oneof action {
    // Add a new validator.
    AddValidator add = 1001;
    // Remove an existing validator.
    RemoveValidator rm = 1002;
  }
}

// An event forwarded to the Vega network to provide information on events happening on other networks.
message ChainEvent {

  // The identifier of the transaction in which the events happened, usually a hash.
  string txID = 1;
  // Arbitrary one-time integer used to prevent replay attacks.
  uint64 nonce = 2;
  // The event.
  oneof event {
    // Built-in asset event.
    BuiltinAssetEvent builtin = 1001;
    // Ethereum ERC20 event.
    ERC20Event erc20 = 1002;
    // Bitcoin BTC event.
    BTCEvent btc = 1003;
    // Validator event.
    ValidatorEvent validator = 1004;
  }
}
