// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/api/v1/core.proto

package v1

import (
	vega "code.vegaprotocol.io/vega/protos/vega"
	v1 "code.vegaprotocol.io/vega/protos/vega/commands/v1"
	v11 "code.vegaprotocol.io/vega/protos/vega/events/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Blockchain transaction type
type SubmitTransactionRequest_Type int32

const (
	SubmitTransactionRequest_TYPE_UNSPECIFIED SubmitTransactionRequest_Type = 0
	// The transaction will be submitted without waiting for response
	SubmitTransactionRequest_TYPE_ASYNC SubmitTransactionRequest_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response
	SubmitTransactionRequest_TYPE_SYNC SubmitTransactionRequest_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block
	SubmitTransactionRequest_TYPE_COMMIT SubmitTransactionRequest_Type = 3
)

// Enum value maps for SubmitTransactionRequest_Type.
var (
	SubmitTransactionRequest_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_ASYNC",
		2: "TYPE_SYNC",
		3: "TYPE_COMMIT",
	}
	SubmitTransactionRequest_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_ASYNC":       1,
		"TYPE_SYNC":        2,
		"TYPE_COMMIT":      3,
	}
)

func (x SubmitTransactionRequest_Type) Enum() *SubmitTransactionRequest_Type {
	p := new(SubmitTransactionRequest_Type)
	*p = x
	return p
}

func (x SubmitTransactionRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitTransactionRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_api_v1_core_proto_enumTypes[0].Descriptor()
}

func (SubmitTransactionRequest_Type) Type() protoreflect.EnumType {
	return &file_vega_api_v1_core_proto_enumTypes[0]
}

func (x SubmitTransactionRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitTransactionRequest_Type.Descriptor instead.
func (SubmitTransactionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{2, 0}
}

// Blockchain transaction type
type SubmitRawTransactionRequest_Type int32

const (
	SubmitRawTransactionRequest_TYPE_UNSPECIFIED SubmitRawTransactionRequest_Type = 0
	// The transaction will be submitted without waiting for response
	SubmitRawTransactionRequest_TYPE_ASYNC SubmitRawTransactionRequest_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response
	SubmitRawTransactionRequest_TYPE_SYNC SubmitRawTransactionRequest_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block
	SubmitRawTransactionRequest_TYPE_COMMIT SubmitRawTransactionRequest_Type = 3
)

// Enum value maps for SubmitRawTransactionRequest_Type.
var (
	SubmitRawTransactionRequest_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_ASYNC",
		2: "TYPE_SYNC",
		3: "TYPE_COMMIT",
	}
	SubmitRawTransactionRequest_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_ASYNC":       1,
		"TYPE_SYNC":        2,
		"TYPE_COMMIT":      3,
	}
)

func (x SubmitRawTransactionRequest_Type) Enum() *SubmitRawTransactionRequest_Type {
	p := new(SubmitRawTransactionRequest_Type)
	*p = x
	return p
}

func (x SubmitRawTransactionRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitRawTransactionRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_api_v1_core_proto_enumTypes[1].Descriptor()
}

func (SubmitRawTransactionRequest_Type) Type() protoreflect.EnumType {
	return &file_vega_api_v1_core_proto_enumTypes[1]
}

func (x SubmitRawTransactionRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitRawTransactionRequest_Type.Descriptor instead.
func (SubmitRawTransactionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{6, 0}
}

// Request for a new event sent by the blockchain queue to be propagated on Vega
type PropagateChainEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain event
	Event []byte `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// Public key
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// Signature
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PropagateChainEventRequest) Reset() {
	*x = PropagateChainEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagateChainEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagateChainEventRequest) ProtoMessage() {}

func (x *PropagateChainEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagateChainEventRequest.ProtoReflect.Descriptor instead.
func (*PropagateChainEventRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{0}
}

func (x *PropagateChainEventRequest) GetEvent() []byte {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *PropagateChainEventRequest) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *PropagateChainEventRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Response for a new event sent by the blockchain queue to be propagated on Vega
type PropagateChainEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the event was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PropagateChainEventResponse) Reset() {
	*x = PropagateChainEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagateChainEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagateChainEventResponse) ProtoMessage() {}

func (x *PropagateChainEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagateChainEventResponse.ProtoReflect.Descriptor instead.
func (*PropagateChainEventResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{1}
}

func (x *PropagateChainEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request for submitting a transaction v2 on Vega
type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
	Tx *v1.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
	Type SubmitTransactionRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vega.api.v1.SubmitTransactionRequest_Type" json:"type,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitTransactionRequest) GetTx() *v1.Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SubmitTransactionRequest) GetType() SubmitTransactionRequest_Type {
	if x != nil {
		return x.Type
	}
	return SubmitTransactionRequest_TYPE_UNSPECIFIED
}

// Response for submitting a transaction v2 on Vega
type SubmitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the transaction was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Hash of the transaction, if accepted
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Result code success if unsucessful
	Code uint32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	// Data for details
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Log  string `protobuf:"bytes,5,opt,name=log,proto3" json:"log,omitempty"`
	// Height for commit
	Height int64 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *SubmitTransactionResponse) Reset() {
	*x = SubmitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionResponse) ProtoMessage() {}

func (x *SubmitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitTransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitTransactionResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *SubmitTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubmitTransactionResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SubmitTransactionResponse) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *SubmitTransactionResponse) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Request for checking a transaction v2 on Vega
type CheckTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bundle of signed payload and signature, to form a transaction that would be submitted to the Vega blockchain
	Tx *v1.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *CheckTransactionRequest) Reset() {
	*x = CheckTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTransactionRequest) ProtoMessage() {}

func (x *CheckTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTransactionRequest.ProtoReflect.Descriptor instead.
func (*CheckTransactionRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{4}
}

func (x *CheckTransactionRequest) GetTx() *v1.Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type CheckTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the transaction was checked by the node
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Check code result
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// Gas wanted for transaction
	GasWanted int64 `protobuf:"varint,3,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	// Gas used for transaction
	GasUsed int64 `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (x *CheckTransactionResponse) Reset() {
	*x = CheckTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTransactionResponse) ProtoMessage() {}

func (x *CheckTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTransactionResponse.ProtoReflect.Descriptor instead.
func (*CheckTransactionResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{5}
}

func (x *CheckTransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CheckTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckTransactionResponse) GetGasWanted() int64 {
	if x != nil {
		return x.GasWanted
	}
	return 0
}

func (x *CheckTransactionResponse) GetGasUsed() int64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

// Request for submitting a version agnostic transaction on Vega
type SubmitRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bundle of signed payload and signature marshalled into a byte array, to form a transaction that will be submitted to the Vega blockchain
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
	Type SubmitRawTransactionRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vega.api.v1.SubmitRawTransactionRequest_Type" json:"type,omitempty"`
}

func (x *SubmitRawTransactionRequest) Reset() {
	*x = SubmitRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRawTransactionRequest) ProtoMessage() {}

func (x *SubmitRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{6}
}

func (x *SubmitRawTransactionRequest) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SubmitRawTransactionRequest) GetType() SubmitRawTransactionRequest_Type {
	if x != nil {
		return x.Type
	}
	return SubmitRawTransactionRequest_TYPE_UNSPECIFIED
}

// Response for submitting a version agnostic transaction on Vega
type SubmitRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the transaction was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Hash of the transaction, if accepted
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Code   uint32 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Data   string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Log    string `protobuf:"bytes,5,opt,name=log,proto3" json:"log,omitempty"`
	Height int64  `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *SubmitRawTransactionResponse) Reset() {
	*x = SubmitRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRawTransactionResponse) ProtoMessage() {}

func (x *SubmitRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{7}
}

func (x *SubmitRawTransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitRawTransactionResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *SubmitRawTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubmitRawTransactionResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SubmitRawTransactionResponse) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *SubmitRawTransactionResponse) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Request for checking a version agnostic transaction on Vega
type CheckRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bundle of signed payload and signature marshalled into a byte array, to form a transaction that would be submitted to the Vega blockchain
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *CheckRawTransactionRequest) Reset() {
	*x = CheckRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRawTransactionRequest) ProtoMessage() {}

func (x *CheckRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*CheckRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{8}
}

func (x *CheckRawTransactionRequest) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Response for checking a version agnostic transaction on Vega
type CheckRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success will be true if the transaction was checked by the node
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Check code result
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// Gas wanted for transaction
	GasWanted int64 `protobuf:"varint,3,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	// Gas used for transaction
	GasUsed int64 `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (x *CheckRawTransactionResponse) Reset() {
	*x = CheckRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRawTransactionResponse) ProtoMessage() {}

func (x *CheckRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*CheckRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{9}
}

func (x *CheckRawTransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CheckRawTransactionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckRawTransactionResponse) GetGasWanted() int64 {
	if x != nil {
		return x.GasWanted
	}
	return 0
}

func (x *CheckRawTransactionResponse) GetGasUsed() int64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

// Request for the current time of the vega network
type GetVegaTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVegaTimeRequest) Reset() {
	*x = GetVegaTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVegaTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVegaTimeRequest) ProtoMessage() {}

func (x *GetVegaTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVegaTimeRequest.ProtoReflect.Descriptor instead.
func (*GetVegaTimeRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{10}
}

// Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
type GetVegaTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp representation of current VegaTime as represented in
	// Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetVegaTimeResponse) Reset() {
	*x = GetVegaTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVegaTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVegaTimeResponse) ProtoMessage() {}

func (x *GetVegaTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVegaTimeResponse.ProtoReflect.Descriptor instead.
func (*GetVegaTimeResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{11}
}

func (x *GetVegaTimeResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Request to subscribe to a stream of one or more event types from the Vega event bus
type ObserveEventBusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more types of event, required field
	Type []v11.BusEventType `protobuf:"varint,1,rep,packed,name=type,proto3,enum=vega.events.v1.BusEventType" json:"type,omitempty"`
	// Market identifier, optional field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier, optional field
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Batch size, optional field -
	// If not specified, any events received will be sent immediately. If the client is not ready
	// for the next data-set, data may be dropped a number of times, and eventually the stream is closed.
	// if specified, the first batch will be sent when ready. To receive the next set of events, the client
	// must write an `ObserveEventBatch` message on the stream to flush the buffer.
	// If no message is received in 5 seconds, the stream is closed.
	// Default: 0, send any and all events when they are available.
	BatchSize int64 `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *ObserveEventBusRequest) Reset() {
	*x = ObserveEventBusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveEventBusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveEventBusRequest) ProtoMessage() {}

func (x *ObserveEventBusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveEventBusRequest.ProtoReflect.Descriptor instead.
func (*ObserveEventBusRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{12}
}

func (x *ObserveEventBusRequest) GetType() []v11.BusEventType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ObserveEventBusRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ObserveEventBusRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *ObserveEventBusRequest) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Response to a subscribed stream of events from the Vega event bus
type ObserveEventBusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more events
	Events []*v11.BusEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ObserveEventBusResponse) Reset() {
	*x = ObserveEventBusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveEventBusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveEventBusResponse) ProtoMessage() {}

func (x *ObserveEventBusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveEventBusResponse.ProtoReflect.Descriptor instead.
func (*ObserveEventBusResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{13}
}

func (x *ObserveEventBusResponse) GetEvents() []*v11.BusEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// A a request for statistics about the Vega network
type StatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatisticsRequest) Reset() {
	*x = StatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsRequest) ProtoMessage() {}

func (x *StatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsRequest.ProtoReflect.Descriptor instead.
func (*StatisticsRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{14}
}

type StatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statistics *Statistics `protobuf:"bytes,1,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *StatisticsResponse) Reset() {
	*x = StatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsResponse) ProtoMessage() {}

func (x *StatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsResponse.ProtoReflect.Descriptor instead.
func (*StatisticsResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{15}
}

func (x *StatisticsResponse) GetStatistics() *Statistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// Vega domain specific statistics as reported by the node the caller is connected to
type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current block height as reported by the Vega blockchain
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Current backlog length (number of transactions) that are waiting to be included in a block
	BacklogLength uint64 `protobuf:"varint,2,opt,name=backlog_length,json=backlogLength,proto3" json:"backlog_length,omitempty"`
	// Total number of connected peers to this node
	TotalPeers uint64 `protobuf:"varint,3,opt,name=total_peers,json=totalPeers,proto3" json:"total_peers,omitempty"`
	// Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision
	GenesisTime string `protobuf:"bytes,4,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	// Current system date and time formatted in ISO-8601 datetime format with nanosecond precision
	CurrentTime string `protobuf:"bytes,5,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	// Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision
	VegaTime string `protobuf:"bytes,6,opt,name=vega_time,json=vegaTime,proto3" json:"vega_time,omitempty"`
	// Status of the connection to the Vega blockchain
	// - See [`ChainStatus`](#vega.ChainStatus)
	Status vega.ChainStatus `protobuf:"varint,7,opt,name=status,proto3,enum=vega.ChainStatus" json:"status,omitempty"`
	// Transactions per block
	TxPerBlock uint64 `protobuf:"varint,8,opt,name=tx_per_block,json=txPerBlock,proto3" json:"tx_per_block,omitempty"`
	// Average transaction size in bytes
	AverageTxBytes uint64 `protobuf:"varint,9,opt,name=average_tx_bytes,json=averageTxBytes,proto3" json:"average_tx_bytes,omitempty"`
	// Average orders per block
	AverageOrdersPerBlock uint64 `protobuf:"varint,10,opt,name=average_orders_per_block,json=averageOrdersPerBlock,proto3" json:"average_orders_per_block,omitempty"`
	// Trades emitted per second
	TradesPerSecond uint64 `protobuf:"varint,11,opt,name=trades_per_second,json=tradesPerSecond,proto3" json:"trades_per_second,omitempty"`
	// Orders processed per second
	OrdersPerSecond uint64 `protobuf:"varint,12,opt,name=orders_per_second,json=ordersPerSecond,proto3" json:"orders_per_second,omitempty"`
	// Total markets on this Vega network
	TotalMarkets uint64 `protobuf:"varint,13,opt,name=total_markets,json=totalMarkets,proto3" json:"total_markets,omitempty"`
	// Total number of order amendments since genesis (on all markets)
	TotalAmendOrder uint64 `protobuf:"varint,16,opt,name=total_amend_order,json=totalAmendOrder,proto3" json:"total_amend_order,omitempty"`
	// Total number of order cancellations since genesis (on all markets)
	TotalCancelOrder uint64 `protobuf:"varint,17,opt,name=total_cancel_order,json=totalCancelOrder,proto3" json:"total_cancel_order,omitempty"`
	// Total number of order submissions since genesis (on all markets)
	TotalCreateOrder uint64 `protobuf:"varint,18,opt,name=total_create_order,json=totalCreateOrder,proto3" json:"total_create_order,omitempty"`
	// Total number of orders processed since genesis (on all markets)
	TotalOrders uint64 `protobuf:"varint,19,opt,name=total_orders,json=totalOrders,proto3" json:"total_orders,omitempty"`
	// Total number of trades emitted since genesis (on all markets)
	TotalTrades uint64 `protobuf:"varint,20,opt,name=total_trades,json=totalTrades,proto3" json:"total_trades,omitempty"`
	// Current number of stream subscribers to order data
	OrderSubscriptions uint32 `protobuf:"varint,21,opt,name=order_subscriptions,json=orderSubscriptions,proto3" json:"order_subscriptions,omitempty"`
	// Current number of stream subscribers to trade data
	TradeSubscriptions uint32 `protobuf:"varint,22,opt,name=trade_subscriptions,json=tradeSubscriptions,proto3" json:"trade_subscriptions,omitempty"`
	// Current number of stream subscribers to candle-stick data
	CandleSubscriptions uint32 `protobuf:"varint,23,opt,name=candle_subscriptions,json=candleSubscriptions,proto3" json:"candle_subscriptions,omitempty"`
	// Current number of stream subscribers to market depth data
	MarketDepthSubscriptions uint32 `protobuf:"varint,24,opt,name=market_depth_subscriptions,json=marketDepthSubscriptions,proto3" json:"market_depth_subscriptions,omitempty"`
	// Current number of stream subscribers to positions data
	PositionsSubscriptions uint32 `protobuf:"varint,25,opt,name=positions_subscriptions,json=positionsSubscriptions,proto3" json:"positions_subscriptions,omitempty"`
	// Current number of stream subscribers to account data
	AccountSubscriptions uint32 `protobuf:"varint,26,opt,name=account_subscriptions,json=accountSubscriptions,proto3" json:"account_subscriptions,omitempty"`
	// Current number of stream subscribers to market data
	MarketDataSubscriptions uint32 `protobuf:"varint,27,opt,name=market_data_subscriptions,json=marketDataSubscriptions,proto3" json:"market_data_subscriptions,omitempty"`
	// The version hash of the Vega node software
	AppVersionHash string `protobuf:"bytes,28,opt,name=app_version_hash,json=appVersionHash,proto3" json:"app_version_hash,omitempty"`
	// The version of the Vega node software
	AppVersion string `protobuf:"bytes,29,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// The version of the underlying Vega blockchain
	ChainVersion string `protobuf:"bytes,30,opt,name=chain_version,json=chainVersion,proto3" json:"chain_version,omitempty"`
	// Current block duration, in nanoseconds
	BlockDuration uint64 `protobuf:"varint,31,opt,name=block_duration,json=blockDuration,proto3" json:"block_duration,omitempty"`
	// Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision
	Uptime string `protobuf:"bytes,32,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Unique identifier for the underlying Vega blockchain
	ChainId string `protobuf:"bytes,33,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current number of stream subscribers to market depth update data
	MarketDepthUpdatesSubscriptions uint32 `protobuf:"varint,34,opt,name=market_depth_updates_subscriptions,json=marketDepthUpdatesSubscriptions,proto3" json:"market_depth_updates_subscriptions,omitempty"`
	// Current block hash
	BlockHash string `protobuf:"bytes,35,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Current epoch
	EpochSeq uint64 `protobuf:"varint,36,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// Epoch start time
	EpochStartTime string `protobuf:"bytes,37,opt,name=epoch_start_time,json=epochStartTime,proto3" json:"epoch_start_time,omitempty"`
	// Epoch expected end time
	EpochExpiryTime string `protobuf:"bytes,38,opt,name=epoch_expiry_time,json=epochExpiryTime,proto3" json:"epoch_expiry_time,omitempty"`
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{16}
}

func (x *Statistics) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *Statistics) GetBacklogLength() uint64 {
	if x != nil {
		return x.BacklogLength
	}
	return 0
}

func (x *Statistics) GetTotalPeers() uint64 {
	if x != nil {
		return x.TotalPeers
	}
	return 0
}

func (x *Statistics) GetGenesisTime() string {
	if x != nil {
		return x.GenesisTime
	}
	return ""
}

func (x *Statistics) GetCurrentTime() string {
	if x != nil {
		return x.CurrentTime
	}
	return ""
}

func (x *Statistics) GetVegaTime() string {
	if x != nil {
		return x.VegaTime
	}
	return ""
}

func (x *Statistics) GetStatus() vega.ChainStatus {
	if x != nil {
		return x.Status
	}
	return vega.ChainStatus(0)
}

func (x *Statistics) GetTxPerBlock() uint64 {
	if x != nil {
		return x.TxPerBlock
	}
	return 0
}

func (x *Statistics) GetAverageTxBytes() uint64 {
	if x != nil {
		return x.AverageTxBytes
	}
	return 0
}

func (x *Statistics) GetAverageOrdersPerBlock() uint64 {
	if x != nil {
		return x.AverageOrdersPerBlock
	}
	return 0
}

func (x *Statistics) GetTradesPerSecond() uint64 {
	if x != nil {
		return x.TradesPerSecond
	}
	return 0
}

func (x *Statistics) GetOrdersPerSecond() uint64 {
	if x != nil {
		return x.OrdersPerSecond
	}
	return 0
}

func (x *Statistics) GetTotalMarkets() uint64 {
	if x != nil {
		return x.TotalMarkets
	}
	return 0
}

func (x *Statistics) GetTotalAmendOrder() uint64 {
	if x != nil {
		return x.TotalAmendOrder
	}
	return 0
}

func (x *Statistics) GetTotalCancelOrder() uint64 {
	if x != nil {
		return x.TotalCancelOrder
	}
	return 0
}

func (x *Statistics) GetTotalCreateOrder() uint64 {
	if x != nil {
		return x.TotalCreateOrder
	}
	return 0
}

func (x *Statistics) GetTotalOrders() uint64 {
	if x != nil {
		return x.TotalOrders
	}
	return 0
}

func (x *Statistics) GetTotalTrades() uint64 {
	if x != nil {
		return x.TotalTrades
	}
	return 0
}

func (x *Statistics) GetOrderSubscriptions() uint32 {
	if x != nil {
		return x.OrderSubscriptions
	}
	return 0
}

func (x *Statistics) GetTradeSubscriptions() uint32 {
	if x != nil {
		return x.TradeSubscriptions
	}
	return 0
}

func (x *Statistics) GetCandleSubscriptions() uint32 {
	if x != nil {
		return x.CandleSubscriptions
	}
	return 0
}

func (x *Statistics) GetMarketDepthSubscriptions() uint32 {
	if x != nil {
		return x.MarketDepthSubscriptions
	}
	return 0
}

func (x *Statistics) GetPositionsSubscriptions() uint32 {
	if x != nil {
		return x.PositionsSubscriptions
	}
	return 0
}

func (x *Statistics) GetAccountSubscriptions() uint32 {
	if x != nil {
		return x.AccountSubscriptions
	}
	return 0
}

func (x *Statistics) GetMarketDataSubscriptions() uint32 {
	if x != nil {
		return x.MarketDataSubscriptions
	}
	return 0
}

func (x *Statistics) GetAppVersionHash() string {
	if x != nil {
		return x.AppVersionHash
	}
	return ""
}

func (x *Statistics) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Statistics) GetChainVersion() string {
	if x != nil {
		return x.ChainVersion
	}
	return ""
}

func (x *Statistics) GetBlockDuration() uint64 {
	if x != nil {
		return x.BlockDuration
	}
	return 0
}

func (x *Statistics) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *Statistics) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Statistics) GetMarketDepthUpdatesSubscriptions() uint32 {
	if x != nil {
		return x.MarketDepthUpdatesSubscriptions
	}
	return 0
}

func (x *Statistics) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Statistics) GetEpochSeq() uint64 {
	if x != nil {
		return x.EpochSeq
	}
	return 0
}

func (x *Statistics) GetEpochStartTime() string {
	if x != nil {
		return x.EpochStartTime
	}
	return ""
}

func (x *Statistics) GetEpochExpiryTime() string {
	if x != nil {
		return x.EpochExpiryTime
	}
	return ""
}

// A request to get the height of the very last block processed
// by tendermint
type LastBlockHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LastBlockHeightRequest) Reset() {
	*x = LastBlockHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastBlockHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastBlockHeightRequest) ProtoMessage() {}

func (x *LastBlockHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastBlockHeightRequest.ProtoReflect.Descriptor instead.
func (*LastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{17}
}

// A response with the height of the last block processed by
// tendermint
type LastBlockHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last block height
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// last block hash
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// supported proof of work hash function
	SpamPowHashFunction string `protobuf:"bytes,3,opt,name=spam_pow_hash_function,json=spamPowHashFunction,proto3" json:"spam_pow_hash_function,omitempty"`
	// the difficulty of the proof of work (target number of zeros)
	SpamPowDifficulty uint32 `protobuf:"varint,4,opt,name=spam_pow_difficulty,json=spamPowDifficulty,proto3" json:"spam_pow_difficulty,omitempty"`
	// supported proof of work number of blocks behind current height allowed
	SpamPowNumberOfPastBlocks uint32 `protobuf:"varint,5,opt,name=spam_pow_number_of_past_blocks,json=spamPowNumberOfPastBlocks,proto3" json:"spam_pow_number_of_past_blocks,omitempty"`
	// allowed number of transactions per block
	SpamPowNumberOfTxPerBlock uint32 `protobuf:"varint,6,opt,name=spam_pow_number_of_tx_per_block,json=spamPowNumberOfTxPerBlock,proto3" json:"spam_pow_number_of_tx_per_block,omitempty"`
	// is increasing difficulty allowed for using the same height for more than `spam_pow_number_of_past_blocks` transactions
	SpamPowIncreasingDifficulty bool `protobuf:"varint,7,opt,name=spam_pow_increasing_difficulty,json=spamPowIncreasingDifficulty,proto3" json:"spam_pow_increasing_difficulty,omitempty"`
	// the network chain id from which the block comes from
	ChainId string `protobuf:"bytes,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *LastBlockHeightResponse) Reset() {
	*x = LastBlockHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_api_v1_core_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastBlockHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastBlockHeightResponse) ProtoMessage() {}

func (x *LastBlockHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_api_v1_core_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastBlockHeightResponse.ProtoReflect.Descriptor instead.
func (*LastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return file_vega_api_v1_core_proto_rawDescGZIP(), []int{18}
}

func (x *LastBlockHeightResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *LastBlockHeightResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *LastBlockHeightResponse) GetSpamPowHashFunction() string {
	if x != nil {
		return x.SpamPowHashFunction
	}
	return ""
}

func (x *LastBlockHeightResponse) GetSpamPowDifficulty() uint32 {
	if x != nil {
		return x.SpamPowDifficulty
	}
	return 0
}

func (x *LastBlockHeightResponse) GetSpamPowNumberOfPastBlocks() uint32 {
	if x != nil {
		return x.SpamPowNumberOfPastBlocks
	}
	return 0
}

func (x *LastBlockHeightResponse) GetSpamPowNumberOfTxPerBlock() uint32 {
	if x != nil {
		return x.SpamPowNumberOfTxPerBlock
	}
	return 0
}

func (x *LastBlockHeightResponse) GetSpamPowIncreasingDifficulty() bool {
	if x != nil {
		return x.SpamPowIncreasingDifficulty
	}
	return false
}

func (x *LastBlockHeightResponse) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

var File_vega_api_v1_core_proto protoreflect.FileDescriptor

var file_vega_api_v1_core_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x37, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x18,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x48, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x74, 0x78, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x61, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x67, 0x61, 0x73, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2c,
	0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x22, 0x85, 0x01, 0x0a,
	0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x73, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x67, 0x61, 0x73, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x67, 0x61, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xa1, 0x01, 0x0a, 0x16, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x4b, 0x0a, 0x17, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x13, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0xfb, 0x0b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x37, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x22, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x03, 0x0a,
	0x17, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x77,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x77, 0x48, 0x61, 0x73,
	0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x61,
	0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x77, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x1e, 0x73, 0x70, 0x61,
	0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x70, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x50, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x1f,
	0x73, 0x70, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x77, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x43, 0x0a, 0x1e, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f,
	0x77, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x32, 0xf4, 0x06, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x62, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x0f, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x67, 0x61,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x67,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73,
	0x12, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x6b, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x5a, 0x2c, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f,
	0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x67, 0x61,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x92, 0x41, 0x34, 0x12, 0x19, 0x0a, 0x0e, 0x56, 0x65,
	0x67, 0x61, 0x20, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x41, 0x50, 0x49, 0x73, 0x32, 0x07, 0x76, 0x30,
	0x2e, 0x35, 0x39, 0x2e, 0x30, 0x1a, 0x13, 0x6c, 0x62, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x65,
	0x74, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x2a, 0x02, 0x01, 0x02, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_api_v1_core_proto_rawDescOnce sync.Once
	file_vega_api_v1_core_proto_rawDescData = file_vega_api_v1_core_proto_rawDesc
)

func file_vega_api_v1_core_proto_rawDescGZIP() []byte {
	file_vega_api_v1_core_proto_rawDescOnce.Do(func() {
		file_vega_api_v1_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_api_v1_core_proto_rawDescData)
	})
	return file_vega_api_v1_core_proto_rawDescData
}

var file_vega_api_v1_core_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_vega_api_v1_core_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_vega_api_v1_core_proto_goTypes = []interface{}{
	(SubmitTransactionRequest_Type)(0),    // 0: vega.api.v1.SubmitTransactionRequest.Type
	(SubmitRawTransactionRequest_Type)(0), // 1: vega.api.v1.SubmitRawTransactionRequest.Type
	(*PropagateChainEventRequest)(nil),    // 2: vega.api.v1.PropagateChainEventRequest
	(*PropagateChainEventResponse)(nil),   // 3: vega.api.v1.PropagateChainEventResponse
	(*SubmitTransactionRequest)(nil),      // 4: vega.api.v1.SubmitTransactionRequest
	(*SubmitTransactionResponse)(nil),     // 5: vega.api.v1.SubmitTransactionResponse
	(*CheckTransactionRequest)(nil),       // 6: vega.api.v1.CheckTransactionRequest
	(*CheckTransactionResponse)(nil),      // 7: vega.api.v1.CheckTransactionResponse
	(*SubmitRawTransactionRequest)(nil),   // 8: vega.api.v1.SubmitRawTransactionRequest
	(*SubmitRawTransactionResponse)(nil),  // 9: vega.api.v1.SubmitRawTransactionResponse
	(*CheckRawTransactionRequest)(nil),    // 10: vega.api.v1.CheckRawTransactionRequest
	(*CheckRawTransactionResponse)(nil),   // 11: vega.api.v1.CheckRawTransactionResponse
	(*GetVegaTimeRequest)(nil),            // 12: vega.api.v1.GetVegaTimeRequest
	(*GetVegaTimeResponse)(nil),           // 13: vega.api.v1.GetVegaTimeResponse
	(*ObserveEventBusRequest)(nil),        // 14: vega.api.v1.ObserveEventBusRequest
	(*ObserveEventBusResponse)(nil),       // 15: vega.api.v1.ObserveEventBusResponse
	(*StatisticsRequest)(nil),             // 16: vega.api.v1.StatisticsRequest
	(*StatisticsResponse)(nil),            // 17: vega.api.v1.StatisticsResponse
	(*Statistics)(nil),                    // 18: vega.api.v1.Statistics
	(*LastBlockHeightRequest)(nil),        // 19: vega.api.v1.LastBlockHeightRequest
	(*LastBlockHeightResponse)(nil),       // 20: vega.api.v1.LastBlockHeightResponse
	(*v1.Transaction)(nil),                // 21: vega.commands.v1.Transaction
	(v11.BusEventType)(0),                 // 22: vega.events.v1.BusEventType
	(*v11.BusEvent)(nil),                  // 23: vega.events.v1.BusEvent
	(vega.ChainStatus)(0),                 // 24: vega.ChainStatus
}
var file_vega_api_v1_core_proto_depIdxs = []int32{
	21, // 0: vega.api.v1.SubmitTransactionRequest.tx:type_name -> vega.commands.v1.Transaction
	0,  // 1: vega.api.v1.SubmitTransactionRequest.type:type_name -> vega.api.v1.SubmitTransactionRequest.Type
	21, // 2: vega.api.v1.CheckTransactionRequest.tx:type_name -> vega.commands.v1.Transaction
	1,  // 3: vega.api.v1.SubmitRawTransactionRequest.type:type_name -> vega.api.v1.SubmitRawTransactionRequest.Type
	22, // 4: vega.api.v1.ObserveEventBusRequest.type:type_name -> vega.events.v1.BusEventType
	23, // 5: vega.api.v1.ObserveEventBusResponse.events:type_name -> vega.events.v1.BusEvent
	18, // 6: vega.api.v1.StatisticsResponse.statistics:type_name -> vega.api.v1.Statistics
	24, // 7: vega.api.v1.Statistics.status:type_name -> vega.ChainStatus
	4,  // 8: vega.api.v1.CoreService.SubmitTransaction:input_type -> vega.api.v1.SubmitTransactionRequest
	2,  // 9: vega.api.v1.CoreService.PropagateChainEvent:input_type -> vega.api.v1.PropagateChainEventRequest
	16, // 10: vega.api.v1.CoreService.Statistics:input_type -> vega.api.v1.StatisticsRequest
	19, // 11: vega.api.v1.CoreService.LastBlockHeight:input_type -> vega.api.v1.LastBlockHeightRequest
	12, // 12: vega.api.v1.CoreService.GetVegaTime:input_type -> vega.api.v1.GetVegaTimeRequest
	14, // 13: vega.api.v1.CoreService.ObserveEventBus:input_type -> vega.api.v1.ObserveEventBusRequest
	8,  // 14: vega.api.v1.CoreService.SubmitRawTransaction:input_type -> vega.api.v1.SubmitRawTransactionRequest
	6,  // 15: vega.api.v1.CoreService.CheckTransaction:input_type -> vega.api.v1.CheckTransactionRequest
	10, // 16: vega.api.v1.CoreService.CheckRawTransaction:input_type -> vega.api.v1.CheckRawTransactionRequest
	5,  // 17: vega.api.v1.CoreService.SubmitTransaction:output_type -> vega.api.v1.SubmitTransactionResponse
	3,  // 18: vega.api.v1.CoreService.PropagateChainEvent:output_type -> vega.api.v1.PropagateChainEventResponse
	17, // 19: vega.api.v1.CoreService.Statistics:output_type -> vega.api.v1.StatisticsResponse
	20, // 20: vega.api.v1.CoreService.LastBlockHeight:output_type -> vega.api.v1.LastBlockHeightResponse
	13, // 21: vega.api.v1.CoreService.GetVegaTime:output_type -> vega.api.v1.GetVegaTimeResponse
	15, // 22: vega.api.v1.CoreService.ObserveEventBus:output_type -> vega.api.v1.ObserveEventBusResponse
	9,  // 23: vega.api.v1.CoreService.SubmitRawTransaction:output_type -> vega.api.v1.SubmitRawTransactionResponse
	7,  // 24: vega.api.v1.CoreService.CheckTransaction:output_type -> vega.api.v1.CheckTransactionResponse
	11, // 25: vega.api.v1.CoreService.CheckRawTransaction:output_type -> vega.api.v1.CheckRawTransactionResponse
	17, // [17:26] is the sub-list for method output_type
	8,  // [8:17] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_vega_api_v1_core_proto_init() }
func file_vega_api_v1_core_proto_init() {
	if File_vega_api_v1_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vega_api_v1_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagateChainEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagateChainEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVegaTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVegaTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveEventBusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveEventBusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastBlockHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_api_v1_core_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastBlockHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_api_v1_core_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vega_api_v1_core_proto_goTypes,
		DependencyIndexes: file_vega_api_v1_core_proto_depIdxs,
		EnumInfos:         file_vega_api_v1_core_proto_enumTypes,
		MessageInfos:      file_vega_api_v1_core_proto_msgTypes,
	}.Build()
	File_vega_api_v1_core_proto = out.File
	file_vega_api_v1_core_proto_rawDesc = nil
	file_vega_api_v1_core_proto_goTypes = nil
	file_vega_api_v1_core_proto_depIdxs = nil
}
