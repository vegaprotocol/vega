// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: vega.proto

package golang

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A side relates to the direction of an order, to Buy, or Sell.
type Side int32

const (
	// Default value, always invalid.
	Side_SIDE_UNSPECIFIED Side = 0
	// Buy order.
	Side_SIDE_BUY Side = 1
	// Sell order.
	Side_SIDE_SELL Side = 2
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "SIDE_UNSPECIFIED",
		1: "SIDE_BUY",
		2: "SIDE_SELL",
	}
	Side_value = map[string]int32{
		"SIDE_UNSPECIFIED": 0,
		"SIDE_BUY":         1,
		"SIDE_SELL":        2,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[0].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[0]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{0}
}

// Represents a set of time intervals that are used when querying for candle-stick data.
type Interval int32

const (
	// Default value, always invalid.
	Interval_INTERVAL_UNSPECIFIED Interval = 0
	// 1 minute.
	Interval_INTERVAL_I1M Interval = 60
	// 5 minutes.
	Interval_INTERVAL_I5M Interval = 300
	// 15 minutes.
	Interval_INTERVAL_I15M Interval = 900
	// 1 hour.
	Interval_INTERVAL_I1H Interval = 3600
	// 6 hours.
	Interval_INTERVAL_I6H Interval = 21600
	// 1 day.
	Interval_INTERVAL_I1D Interval = 86400
)

// Enum value maps for Interval.
var (
	Interval_name = map[int32]string{
		0:     "INTERVAL_UNSPECIFIED",
		60:    "INTERVAL_I1M",
		300:   "INTERVAL_I5M",
		900:   "INTERVAL_I15M",
		3600:  "INTERVAL_I1H",
		21600: "INTERVAL_I6H",
		86400: "INTERVAL_I1D",
	}
	Interval_value = map[string]int32{
		"INTERVAL_UNSPECIFIED": 0,
		"INTERVAL_I1M":         60,
		"INTERVAL_I5M":         300,
		"INTERVAL_I15M":        900,
		"INTERVAL_I1H":         3600,
		"INTERVAL_I6H":         21600,
		"INTERVAL_I1D":         86400,
	}
)

func (x Interval) Enum() *Interval {
	p := new(Interval)
	*p = x
	return p
}

func (x Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[1].Descriptor()
}

func (Interval) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[1]
}

func (x Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interval.Descriptor instead.
func (Interval) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{1}
}

// What mode is the market currently running, also known as market state.
type MarketState int32

const (
	// Default value, this is invalid
	MarketState_MARKET_STATE_UNSPECIFIED MarketState = 0
	// Normal trading
	MarketState_MARKET_STATE_CONTINUOUS MarketState = 1
	// Auction trading (FBA)
	MarketState_MARKET_STATE_BATCH_AUCTION MarketState = 2
	// Opening auction
	MarketState_MARKET_STATE_OPENING_AUCTION MarketState = 3
	// Auction triggered by monitoring
	MarketState_MARKET_STATE_MONITORING_AUCTION MarketState = 4
)

// Enum value maps for MarketState.
var (
	MarketState_name = map[int32]string{
		0: "MARKET_STATE_UNSPECIFIED",
		1: "MARKET_STATE_CONTINUOUS",
		2: "MARKET_STATE_BATCH_AUCTION",
		3: "MARKET_STATE_OPENING_AUCTION",
		4: "MARKET_STATE_MONITORING_AUCTION",
	}
	MarketState_value = map[string]int32{
		"MARKET_STATE_UNSPECIFIED":        0,
		"MARKET_STATE_CONTINUOUS":         1,
		"MARKET_STATE_BATCH_AUCTION":      2,
		"MARKET_STATE_OPENING_AUCTION":    3,
		"MARKET_STATE_MONITORING_AUCTION": 4,
	}
)

func (x MarketState) Enum() *MarketState {
	p := new(MarketState)
	*p = x
	return p
}

func (x MarketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketState) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[2].Descriptor()
}

func (MarketState) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[2]
}

func (x MarketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketState.Descriptor instead.
func (MarketState) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{2}
}

// What triggered an auction (if any)
type AuctionTrigger int32

const (
	// No auction triggered
	AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED AuctionTrigger = 0
	// Batch auction
	AuctionTrigger_AUCTION_TRIGGER_BATCH AuctionTrigger = 1
	// Opening auction
	AuctionTrigger_AUCTION_TRIGGER_OPENING AuctionTrigger = 2
	// Price monitoring trigger
	AuctionTrigger_AUCTION_TRIGGER_PRICE AuctionTrigger = 3
	// liquidity monitoring trigger
	AuctionTrigger_AUCTION_TRIGGER_LIQUIDITY AuctionTrigger = 4
)

// Enum value maps for AuctionTrigger.
var (
	AuctionTrigger_name = map[int32]string{
		0: "AUCTION_TRIGGER_UNSPECIFIED",
		1: "AUCTION_TRIGGER_BATCH",
		2: "AUCTION_TRIGGER_OPENING",
		3: "AUCTION_TRIGGER_PRICE",
		4: "AUCTION_TRIGGER_LIQUIDITY",
	}
	AuctionTrigger_value = map[string]int32{
		"AUCTION_TRIGGER_UNSPECIFIED": 0,
		"AUCTION_TRIGGER_BATCH":       1,
		"AUCTION_TRIGGER_OPENING":     2,
		"AUCTION_TRIGGER_PRICE":       3,
		"AUCTION_TRIGGER_LIQUIDITY":   4,
	}
)

func (x AuctionTrigger) Enum() *AuctionTrigger {
	p := new(AuctionTrigger)
	*p = x
	return p
}

func (x AuctionTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[3].Descriptor()
}

func (AuctionTrigger) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[3]
}

func (x AuctionTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuctionTrigger.Descriptor instead.
func (AuctionTrigger) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{3}
}

// Which price point is the pegged order linked to
type PeggedReference int32

const (
	// No reference given
	PeggedReference_PEGGED_REFERENCE_UNSPECIFIED PeggedReference = 0
	// MID price
	PeggedReference_PEGGED_REFERENCE_MID PeggedReference = 1
	// BEST BID price
	PeggedReference_PEGGED_REFERENCE_BEST_BID PeggedReference = 2
	// BEST ASK price
	PeggedReference_PEGGED_REFERENCE_BEST_ASK PeggedReference = 3
)

// Enum value maps for PeggedReference.
var (
	PeggedReference_name = map[int32]string{
		0: "PEGGED_REFERENCE_UNSPECIFIED",
		1: "PEGGED_REFERENCE_MID",
		2: "PEGGED_REFERENCE_BEST_BID",
		3: "PEGGED_REFERENCE_BEST_ASK",
	}
	PeggedReference_value = map[string]int32{
		"PEGGED_REFERENCE_UNSPECIFIED": 0,
		"PEGGED_REFERENCE_MID":         1,
		"PEGGED_REFERENCE_BEST_BID":    2,
		"PEGGED_REFERENCE_BEST_ASK":    3,
	}
)

func (x PeggedReference) Enum() *PeggedReference {
	p := new(PeggedReference)
	*p = x
	return p
}

func (x PeggedReference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeggedReference) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[4].Descriptor()
}

func (PeggedReference) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[4]
}

func (x PeggedReference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeggedReference.Descriptor instead.
func (PeggedReference) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{4}
}

// OrderError codes are returned in the `[Order](#vega.Order).reason` field.
// If there is an issue with an order during it's life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`.
type OrderError int32

const (
	// Default value, no error reported.
	OrderError_ORDER_ERROR_NONE OrderError = 0
	// Order was submitted for a market that does not exist.
	OrderError_ORDER_ERROR_INVALID_MARKET_ID OrderError = 1
	// Order was submitted with an invalid identifier.
	OrderError_ORDER_ERROR_INVALID_ORDER_ID OrderError = 2
	// Order was amended with a sequence number that was not previous version + 1.
	OrderError_ORDER_ERROR_OUT_OF_SEQUENCE OrderError = 3
	// Order was amended with an invalid remaining size (e.g. remaining greater than total size).
	OrderError_ORDER_ERROR_INVALID_REMAINING_SIZE OrderError = 4
	// Node was unable to get Vega (blockchain) time.
	OrderError_ORDER_ERROR_TIME_FAILURE OrderError = 5
	// Failed to remove an order from the book.
	OrderError_ORDER_ERROR_REMOVAL_FAILURE OrderError = 6
	// An order with `TimeInForce.TIF_GTT` was submitted or amended
	// with an expiration that was badly formatted or otherwise invalid.
	OrderError_ORDER_ERROR_INVALID_EXPIRATION_DATETIME OrderError = 7
	// Order was submitted or amended with an invalid reference field.
	OrderError_ORDER_ERROR_INVALID_ORDER_REFERENCE OrderError = 8
	// Order amend was submitted for an order field that cannot not be amended (e.g. order identifier).
	OrderError_ORDER_ERROR_EDIT_NOT_ALLOWED OrderError = 9
	// Amend failure because amend details do not match original order.
	OrderError_ORDER_ERROR_AMEND_FAILURE OrderError = 10
	// Order not found in an order book or store.
	OrderError_ORDER_ERROR_NOT_FOUND OrderError = 11
	// Order was submitted with an invalid or missing party identifier.
	OrderError_ORDER_ERROR_INVALID_PARTY_ID OrderError = 12
	// Order was submitted for a market that has closed.
	OrderError_ORDER_ERROR_MARKET_CLOSED OrderError = 13
	// Order was submitted, but the party did not have enough collateral to cover the order.
	OrderError_ORDER_ERROR_MARGIN_CHECK_FAILED OrderError = 14
	// Order was submitted, but the party did not have an account for this asset.
	OrderError_ORDER_ERROR_MISSING_GENERAL_ACCOUNT OrderError = 15
	// Unspecified internal error.
	OrderError_ORDER_ERROR_INTERNAL_ERROR OrderError = 16
	// Order was submitted with an invalid or missing size (e.g. 0).
	OrderError_ORDER_ERROR_INVALID_SIZE OrderError = 17
	// Order was submitted with an invalid persistence for its type.
	OrderError_ORDER_ERROR_INVALID_PERSISTENCE OrderError = 18
	// Order was submitted with an invalid type field.
	OrderError_ORDER_ERROR_INVALID_TYPE OrderError = 19
	// Order was stopped as it would have traded with another order submitted from the same party.
	OrderError_ORDER_ERROR_SELF_TRADING OrderError = 20
	// Order was submitted, but the party did not have enough collateral to cover the fees for the order.
	OrderError_ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES OrderError = 21
	// Order was submitted with an incorrect or invalid market type.
	OrderError_ORDER_ERROR_INCORRECT_MARKET_TYPE OrderError = 22
	// Order was submitted with invalid time in force
	OrderError_ORDER_ERROR_INVALID_TIME_IN_FORCE OrderError = 23
	// A GFN order has got to the market when it is in auction mode
	OrderError_ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION OrderError = 24
	// A GFA order has got to the market when it is in continuous trading mode
	OrderError_ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING OrderError = 25
	// Attempt to amend order to GTT without ExpiryAt
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT OrderError = 26
	// Attempt to amend ExpiryAt to a value before CreatedAt
	OrderError_ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT OrderError = 27
	// Attempt to amend to GTC without an ExpiryAt value
	OrderError_ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT OrderError = 28
	// Amending to FOK or IOC is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC OrderError = 29
	// Amending to GFA or GFN is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN OrderError = 30
	// Amending from GFA or GFN is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN OrderError = 31
	// IOC orders are not allowed during auction
	OrderError_ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION OrderError = 32
	// FOK orders are not allowed during auction
	OrderError_ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION OrderError = 33
	// Pegged orders must be LIMIT orders
	OrderError_ORDER_ERROR_MUST_BE_LIMIT_ORDER OrderError = 34
	// Pegged orders can only have TIF GTC or GTT
	OrderError_ORDER_ERROR_MUST_BE_GTT_OR_GTC OrderError = 35
	// Pegged order must have a reference price
	OrderError_ORDER_ERROR_WITHOUT_REFERENCE_PRICE OrderError = 36
	// Buy pegged order cannot reference best ask price
	OrderError_ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE OrderError = 37
	// Pegged order offset must be <= 0
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO OrderError = 38
	// Pegged order offset must be < 0
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO OrderError = 39
	// Pegged order offset must be >= 0
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO OrderError = 40
	// Sell pegged order cannot reference best bid price
	OrderError_ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE OrderError = 41
	// Pegged order offset must be > zero
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO OrderError = 42
	// The party have an insufficient balance, or don't have
	// a general account to submit the order (no deposits made
	// for the required asset).
	OrderError_ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE OrderError = 43
	// Cannot amend a non pegged orders details
	OrderError_ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER OrderError = 44
	// We are unable to reprice a pegged order because a market price is unavailable
	OrderError_ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER OrderError = 45
	// Users cannot amend the price of a pegged order
	OrderError_ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER OrderError = 46
)

// Enum value maps for OrderError.
var (
	OrderError_name = map[int32]string{
		0:  "ORDER_ERROR_NONE",
		1:  "ORDER_ERROR_INVALID_MARKET_ID",
		2:  "ORDER_ERROR_INVALID_ORDER_ID",
		3:  "ORDER_ERROR_OUT_OF_SEQUENCE",
		4:  "ORDER_ERROR_INVALID_REMAINING_SIZE",
		5:  "ORDER_ERROR_TIME_FAILURE",
		6:  "ORDER_ERROR_REMOVAL_FAILURE",
		7:  "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
		8:  "ORDER_ERROR_INVALID_ORDER_REFERENCE",
		9:  "ORDER_ERROR_EDIT_NOT_ALLOWED",
		10: "ORDER_ERROR_AMEND_FAILURE",
		11: "ORDER_ERROR_NOT_FOUND",
		12: "ORDER_ERROR_INVALID_PARTY_ID",
		13: "ORDER_ERROR_MARKET_CLOSED",
		14: "ORDER_ERROR_MARGIN_CHECK_FAILED",
		15: "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
		16: "ORDER_ERROR_INTERNAL_ERROR",
		17: "ORDER_ERROR_INVALID_SIZE",
		18: "ORDER_ERROR_INVALID_PERSISTENCE",
		19: "ORDER_ERROR_INVALID_TYPE",
		20: "ORDER_ERROR_SELF_TRADING",
		21: "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
		22: "ORDER_ERROR_INCORRECT_MARKET_TYPE",
		23: "ORDER_ERROR_INVALID_TIME_IN_FORCE",
		24: "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
		25: "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
		26: "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
		27: "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
		28: "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
		29: "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
		30: "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
		31: "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
		32: "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
		33: "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
		34: "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
		35: "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
		36: "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
		37: "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
		38: "ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO",
		39: "ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO",
		40: "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
		41: "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
		42: "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
		43: "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
		44: "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
		45: "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
		46: "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
	}
	OrderError_value = map[string]int32{
		"ORDER_ERROR_NONE":                                                  0,
		"ORDER_ERROR_INVALID_MARKET_ID":                                     1,
		"ORDER_ERROR_INVALID_ORDER_ID":                                      2,
		"ORDER_ERROR_OUT_OF_SEQUENCE":                                       3,
		"ORDER_ERROR_INVALID_REMAINING_SIZE":                                4,
		"ORDER_ERROR_TIME_FAILURE":                                          5,
		"ORDER_ERROR_REMOVAL_FAILURE":                                       6,
		"ORDER_ERROR_INVALID_EXPIRATION_DATETIME":                           7,
		"ORDER_ERROR_INVALID_ORDER_REFERENCE":                               8,
		"ORDER_ERROR_EDIT_NOT_ALLOWED":                                      9,
		"ORDER_ERROR_AMEND_FAILURE":                                         10,
		"ORDER_ERROR_NOT_FOUND":                                             11,
		"ORDER_ERROR_INVALID_PARTY_ID":                                      12,
		"ORDER_ERROR_MARKET_CLOSED":                                         13,
		"ORDER_ERROR_MARGIN_CHECK_FAILED":                                   14,
		"ORDER_ERROR_MISSING_GENERAL_ACCOUNT":                               15,
		"ORDER_ERROR_INTERNAL_ERROR":                                        16,
		"ORDER_ERROR_INVALID_SIZE":                                          17,
		"ORDER_ERROR_INVALID_PERSISTENCE":                                   18,
		"ORDER_ERROR_INVALID_TYPE":                                          19,
		"ORDER_ERROR_SELF_TRADING":                                          20,
		"ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES":                        21,
		"ORDER_ERROR_INCORRECT_MARKET_TYPE":                                 22,
		"ORDER_ERROR_INVALID_TIME_IN_FORCE":                                 23,
		"ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION":                           24,
		"ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING":                   25,
		"ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT":                  26,
		"ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT":                             27,
		"ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT":                          28,
		"ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC":                            29,
		"ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN":                            30,
		"ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN":                          31,
		"ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION":                  32,
		"ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION":                  33,
		"ORDER_ERROR_MUST_BE_LIMIT_ORDER":                                   34,
		"ORDER_ERROR_MUST_BE_GTT_OR_GTC":                                    35,
		"ORDER_ERROR_WITHOUT_REFERENCE_PRICE":                               36,
		"ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE":                   37,
		"ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO":                  38,
		"ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO":                         39,
		"ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO":               40,
		"ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE":                  41,
		"ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO":                      42,
		"ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE":                            43,
		"ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER": 44,
		"ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER":                        45,
		"ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER":                 46,
	}
)

func (x OrderError) Enum() *OrderError {
	p := new(OrderError)
	*p = x
	return p
}

func (x OrderError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderError) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[5].Descriptor()
}

func (OrderError) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[5]
}

func (x OrderError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderError.Descriptor instead.
func (OrderError) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{5}
}

// The Vega blockchain status as reported by the node the caller is connected to.
type ChainStatus int32

const (
	// Default value, always invalid.
	ChainStatus_CHAIN_STATUS_UNSPECIFIED ChainStatus = 0
	// Blockchain is disconnected.
	ChainStatus_CHAIN_STATUS_DISCONNECTED ChainStatus = 1
	// Blockchain is replaying historic transactions.
	ChainStatus_CHAIN_STATUS_REPLAYING ChainStatus = 2
	// Blockchain is connected and receiving transactions.
	ChainStatus_CHAIN_STATUS_CONNECTED ChainStatus = 3
)

// Enum value maps for ChainStatus.
var (
	ChainStatus_name = map[int32]string{
		0: "CHAIN_STATUS_UNSPECIFIED",
		1: "CHAIN_STATUS_DISCONNECTED",
		2: "CHAIN_STATUS_REPLAYING",
		3: "CHAIN_STATUS_CONNECTED",
	}
	ChainStatus_value = map[string]int32{
		"CHAIN_STATUS_UNSPECIFIED":  0,
		"CHAIN_STATUS_DISCONNECTED": 1,
		"CHAIN_STATUS_REPLAYING":    2,
		"CHAIN_STATUS_CONNECTED":    3,
	}
)

func (x ChainStatus) Enum() *ChainStatus {
	p := new(ChainStatus)
	*p = x
	return p
}

func (x ChainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[6].Descriptor()
}

func (ChainStatus) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[6]
}

func (x ChainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainStatus.Descriptor instead.
func (ChainStatus) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{6}
}

// Various collateral/account types as used by Vega.
type AccountType int32

const (
	// Default value.
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0
	// Insurance pool accounts contain insurance pool funds for a market.
	AccountType_ACCOUNT_TYPE_INSURANCE AccountType = 1
	// Settlement accounts exist only during settlement or mark-to-market.
	AccountType_ACCOUNT_TYPE_SETTLEMENT AccountType = 2
	// Margin accounts contain margin funds for a party and each party will
	// have multiple margin accounts, one for each market they have traded in.
	//
	// Margin account funds will alter as margin requirements on positions change.
	AccountType_ACCOUNT_TYPE_MARGIN AccountType = 3
	// General accounts contains general funds for a party. A party will
	// have multiple general accounts, one for each asset they want
	// to trade with.
	//
	// General accounts are where funds are initially deposited or withdrawn from.
	// It is also the account where funds are taken to fulfil fees and initial margin requirements.
	AccountType_ACCOUNT_TYPE_GENERAL AccountType = 4
	// Infrastructure accounts contain fees earned by providing infrastructure on Vega.
	AccountType_ACCOUNT_TYPE_FEES_INFRASTRUCTURE AccountType = 5
	// Liquidity accounts contain fees earned by providing liquidity on Vega markets.
	AccountType_ACCOUNT_TYPE_FEES_LIQUIDITY AccountType = 6
	// This account is created to hold fees earned by placing orders that sit on the book
	// and are then matched with an incoming order to create a trade.
	// These fees reward traders who provide the best priced liquidity that actually allows trading to take place.
	AccountType_ACCOUNT_TYPE_FEES_MAKER AccountType = 7
	// This account is created to lock funds to be withdrawn by parties
	AccountType_ACCOUNT_TYPE_LOCK_WITHDRAW AccountType = 8
	// This account is created to maintain liquidity providers funds commitments
	AccountType_ACCOUNT_TYPE_BOND AccountType = 9
	// External account represents an external source (deposit/withdrawal)
	AccountType_ACCOUNT_TYPE_EXTERNAL AccountType = 10
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0:  "ACCOUNT_TYPE_UNSPECIFIED",
		1:  "ACCOUNT_TYPE_INSURANCE",
		2:  "ACCOUNT_TYPE_SETTLEMENT",
		3:  "ACCOUNT_TYPE_MARGIN",
		4:  "ACCOUNT_TYPE_GENERAL",
		5:  "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
		6:  "ACCOUNT_TYPE_FEES_LIQUIDITY",
		7:  "ACCOUNT_TYPE_FEES_MAKER",
		8:  "ACCOUNT_TYPE_LOCK_WITHDRAW",
		9:  "ACCOUNT_TYPE_BOND",
		10: "ACCOUNT_TYPE_EXTERNAL",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED":         0,
		"ACCOUNT_TYPE_INSURANCE":           1,
		"ACCOUNT_TYPE_SETTLEMENT":          2,
		"ACCOUNT_TYPE_MARGIN":              3,
		"ACCOUNT_TYPE_GENERAL":             4,
		"ACCOUNT_TYPE_FEES_INFRASTRUCTURE": 5,
		"ACCOUNT_TYPE_FEES_LIQUIDITY":      6,
		"ACCOUNT_TYPE_FEES_MAKER":          7,
		"ACCOUNT_TYPE_LOCK_WITHDRAW":       8,
		"ACCOUNT_TYPE_BOND":                9,
		"ACCOUNT_TYPE_EXTERNAL":            10,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[7].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[7]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{7}
}

// Transfers can occur between parties on Vega, these are the types that indicate why a transfer took place.
type TransferType int32

const (
	// Default value, always invalid.
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	// Loss.
	TransferType_TRANSFER_TYPE_LOSS TransferType = 1
	// Win.
	TransferType_TRANSFER_TYPE_WIN TransferType = 2
	// Close.
	TransferType_TRANSFER_TYPE_CLOSE TransferType = 3
	// Mark to market loss.
	TransferType_TRANSFER_TYPE_MTM_LOSS TransferType = 4
	// Mark to market win.
	TransferType_TRANSFER_TYPE_MTM_WIN TransferType = 5
	// Margin too low.
	TransferType_TRANSFER_TYPE_MARGIN_LOW TransferType = 6
	// Margin too high.
	TransferType_TRANSFER_TYPE_MARGIN_HIGH TransferType = 7
	// Margin was confiscated.
	TransferType_TRANSFER_TYPE_MARGIN_CONFISCATED TransferType = 8
	// Pay maker fee.
	TransferType_TRANSFER_TYPE_MAKER_FEE_PAY TransferType = 9
	// Receive maker fee.
	TransferType_TRANSFER_TYPE_MAKER_FEE_RECEIVE TransferType = 10
	// Pay infrastructure fee.
	TransferType_TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY TransferType = 11
	// Pay liquidity fee.
	TransferType_TRANSFER_TYPE_LIQUIDITY_FEE_PAY TransferType = 12
	// Bond too low.
	TransferType_TRANSFER_TYPE_BOND_LOW TransferType = 13
	// Bond too high.
	TransferType_TRANSFER_TYPE_BOND_HIGH TransferType = 14
	// Lock amount for withdraw.
	TransferType_TRANSFER_TYPE_WITHDRAW_LOCK TransferType = 15
	// Actual withdraw from system.
	TransferType_TRANSFER_TYPE_WITHDRAW TransferType = 16
	// Deposit funds.
	TransferType_TRANSFER_TYPE_DEPOSIT TransferType = 17
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0:  "TRANSFER_TYPE_UNSPECIFIED",
		1:  "TRANSFER_TYPE_LOSS",
		2:  "TRANSFER_TYPE_WIN",
		3:  "TRANSFER_TYPE_CLOSE",
		4:  "TRANSFER_TYPE_MTM_LOSS",
		5:  "TRANSFER_TYPE_MTM_WIN",
		6:  "TRANSFER_TYPE_MARGIN_LOW",
		7:  "TRANSFER_TYPE_MARGIN_HIGH",
		8:  "TRANSFER_TYPE_MARGIN_CONFISCATED",
		9:  "TRANSFER_TYPE_MAKER_FEE_PAY",
		10: "TRANSFER_TYPE_MAKER_FEE_RECEIVE",
		11: "TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY",
		12: "TRANSFER_TYPE_LIQUIDITY_FEE_PAY",
		13: "TRANSFER_TYPE_BOND_LOW",
		14: "TRANSFER_TYPE_BOND_HIGH",
		15: "TRANSFER_TYPE_WITHDRAW_LOCK",
		16: "TRANSFER_TYPE_WITHDRAW",
		17: "TRANSFER_TYPE_DEPOSIT",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED":            0,
		"TRANSFER_TYPE_LOSS":                   1,
		"TRANSFER_TYPE_WIN":                    2,
		"TRANSFER_TYPE_CLOSE":                  3,
		"TRANSFER_TYPE_MTM_LOSS":               4,
		"TRANSFER_TYPE_MTM_WIN":                5,
		"TRANSFER_TYPE_MARGIN_LOW":             6,
		"TRANSFER_TYPE_MARGIN_HIGH":            7,
		"TRANSFER_TYPE_MARGIN_CONFISCATED":     8,
		"TRANSFER_TYPE_MAKER_FEE_PAY":          9,
		"TRANSFER_TYPE_MAKER_FEE_RECEIVE":      10,
		"TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY": 11,
		"TRANSFER_TYPE_LIQUIDITY_FEE_PAY":      12,
		"TRANSFER_TYPE_BOND_LOW":               13,
		"TRANSFER_TYPE_BOND_HIGH":              14,
		"TRANSFER_TYPE_WITHDRAW_LOCK":          15,
		"TRANSFER_TYPE_WITHDRAW":               16,
		"TRANSFER_TYPE_DEPOSIT":                17,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[8].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[8]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{8}
}

// The kind of the signature created by a node, for example, allowlisting a new asset, withdrawal etc.
type NodeSignatureKind int32

const (
	// represents a unspecified / missing value from the input
	NodeSignatureKind_NODE_SIGNATURE_KIND_UNSPECIFIED NodeSignatureKind = 0
	// represents a signature for a new asset allowlisting
	NodeSignatureKind_NODE_SIGNATURE_KIND_ASSET_NEW NodeSignatureKind = 1
	// represents a signature for a asset withdrawal
	NodeSignatureKind_NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL NodeSignatureKind = 2
)

// Enum value maps for NodeSignatureKind.
var (
	NodeSignatureKind_name = map[int32]string{
		0: "NODE_SIGNATURE_KIND_UNSPECIFIED",
		1: "NODE_SIGNATURE_KIND_ASSET_NEW",
		2: "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL",
	}
	NodeSignatureKind_value = map[string]int32{
		"NODE_SIGNATURE_KIND_UNSPECIFIED":      0,
		"NODE_SIGNATURE_KIND_ASSET_NEW":        1,
		"NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL": 2,
	}
)

func (x NodeSignatureKind) Enum() *NodeSignatureKind {
	p := new(NodeSignatureKind)
	*p = x
	return p
}

func (x NodeSignatureKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeSignatureKind) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[9].Descriptor()
}

func (NodeSignatureKind) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[9]
}

func (x NodeSignatureKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeSignatureKind.Descriptor instead.
func (NodeSignatureKind) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{9}
}

// Time in Force for an order.
// See [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.
type Order_TimeInForce int32

const (
	// Default value for TimeInForce, can be valid for an amend.
	Order_TIF_UNSPECIFIED Order_TimeInForce = 0
	// Good until cancelled.
	Order_TIF_GTC Order_TimeInForce = 1
	// Good until specified time.
	Order_TIF_GTT Order_TimeInForce = 2
	// Immediate or cancel.
	Order_TIF_IOC Order_TimeInForce = 3
	// Fill or kill.
	Order_TIF_FOK Order_TimeInForce = 4
	// good for auction
	Order_TIF_GFA Order_TimeInForce = 5
	// good for normal
	Order_TIF_GFN Order_TimeInForce = 6
)

// Enum value maps for Order_TimeInForce.
var (
	Order_TimeInForce_name = map[int32]string{
		0: "TIF_UNSPECIFIED",
		1: "TIF_GTC",
		2: "TIF_GTT",
		3: "TIF_IOC",
		4: "TIF_FOK",
		5: "TIF_GFA",
		6: "TIF_GFN",
	}
	Order_TimeInForce_value = map[string]int32{
		"TIF_UNSPECIFIED": 0,
		"TIF_GTC":         1,
		"TIF_GTT":         2,
		"TIF_IOC":         3,
		"TIF_FOK":         4,
		"TIF_GFA":         5,
		"TIF_GFN":         6,
	}
)

func (x Order_TimeInForce) Enum() *Order_TimeInForce {
	p := new(Order_TimeInForce)
	*p = x
	return p
}

func (x Order_TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[10].Descriptor()
}

func (Order_TimeInForce) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[10]
}

func (x Order_TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_TimeInForce.Descriptor instead.
func (Order_TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{6, 0}
}

// Type values for an order.
type Order_Type int32

const (
	// Default value, always invalid.
	Order_TYPE_UNSPECIFIED Order_Type = 0
	// Used for Limit orders.
	Order_TYPE_LIMIT Order_Type = 1
	// Used for Market orders.
	Order_TYPE_MARKET Order_Type = 2
	// Used for orders where the initiating party is the network (with distressed traders).
	Order_TYPE_NETWORK Order_Type = 3
)

// Enum value maps for Order_Type.
var (
	Order_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_LIMIT",
		2: "TYPE_MARKET",
		3: "TYPE_NETWORK",
	}
	Order_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_LIMIT":       1,
		"TYPE_MARKET":      2,
		"TYPE_NETWORK":     3,
	}
)

func (x Order_Type) Enum() *Order_Type {
	p := new(Order_Type)
	*p = x
	return p
}

func (x Order_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[11].Descriptor()
}

func (Order_Type) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[11]
}

func (x Order_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Type.Descriptor instead.
func (Order_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{6, 1}
}

// Status values for an order.
// See resulting status in [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.
type Order_Status int32

const (
	// Default value, always invalid.
	Order_STATUS_INVALID Order_Status = 0
	// Used for active unfilled or partially filled orders.
	Order_STATUS_ACTIVE Order_Status = 1
	// Used for expired GTT orders.
	Order_STATUS_EXPIRED Order_Status = 2
	// Used for orders cancelled by the party that created the order.
	Order_STATUS_CANCELLED Order_Status = 3
	// Used for unfilled FOK or IOC orders, and for orders that were stopped by the network.
	Order_STATUS_STOPPED Order_Status = 4
	// Used for closed fully filled orders.
	Order_STATUS_FILLED Order_Status = 5
	// Used for orders when not enough collateral was available to fill the margin requirements.
	Order_STATUS_REJECTED Order_Status = 6
	// Used for closed partially filled IOC orders.
	Order_STATUS_PARTIALLY_FILLED Order_Status = 7
	// The order ha been removed from the book and has been parked, applies to pegged order only
	Order_STATUS_PARKED Order_Status = 8
)

// Enum value maps for Order_Status.
var (
	Order_Status_name = map[int32]string{
		0: "STATUS_INVALID",
		1: "STATUS_ACTIVE",
		2: "STATUS_EXPIRED",
		3: "STATUS_CANCELLED",
		4: "STATUS_STOPPED",
		5: "STATUS_FILLED",
		6: "STATUS_REJECTED",
		7: "STATUS_PARTIALLY_FILLED",
		8: "STATUS_PARKED",
	}
	Order_Status_value = map[string]int32{
		"STATUS_INVALID":          0,
		"STATUS_ACTIVE":           1,
		"STATUS_EXPIRED":          2,
		"STATUS_CANCELLED":        3,
		"STATUS_STOPPED":          4,
		"STATUS_FILLED":           5,
		"STATUS_REJECTED":         6,
		"STATUS_PARTIALLY_FILLED": 7,
		"STATUS_PARKED":           8,
	}
)

func (x Order_Status) Enum() *Order_Status {
	p := new(Order_Status)
	*p = x
	return p
}

func (x Order_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[12].Descriptor()
}

func (Order_Status) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[12]
}

func (x Order_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Status.Descriptor instead.
func (Order_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{6, 2}
}

// Type values for a trade.
//
type Trade_Type int32

const (
	// Default value, always invalid.
	Trade_TYPE_UNSPECIFIED Trade_Type = 0
	// Normal trading between two parties.
	Trade_TYPE_DEFAULT Trade_Type = 1
	// Trading initiated by the network with another party on the book,
	// which helps to zero-out the positions of one or more distressed parties.
	Trade_TYPE_NETWORK_CLOSE_OUT_GOOD Trade_Type = 2
	// Trading initiated by the network with another party off the book,
	// with a distressed party in order to zero-out the position of the party.
	Trade_TYPE_NETWORK_CLOSE_OUT_BAD Trade_Type = 3
)

// Enum value maps for Trade_Type.
var (
	Trade_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DEFAULT",
		2: "TYPE_NETWORK_CLOSE_OUT_GOOD",
		3: "TYPE_NETWORK_CLOSE_OUT_BAD",
	}
	Trade_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":            0,
		"TYPE_DEFAULT":                1,
		"TYPE_NETWORK_CLOSE_OUT_GOOD": 2,
		"TYPE_NETWORK_CLOSE_OUT_BAD":  3,
	}
)

func (x Trade_Type) Enum() *Trade_Type {
	p := new(Trade_Type)
	*p = x
	return p
}

func (x Trade_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trade_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[13].Descriptor()
}

func (Trade_Type) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[13]
}

func (x Trade_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trade_Type.Descriptor instead.
func (Trade_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{10, 0}
}

// The status of the deposit
type Deposit_Status int32

const (
	// Default value, always invalid.
	Deposit_DEPOSIT_STATUS_UNSPECIFIED Deposit_Status = 0
	// The deposit is being processed by the network
	Deposit_DEPOSIT_STATUS_OPEN Deposit_Status = 1
	// The deposit has been cancelled by the network
	Deposit_DEPOSIT_STATUS_CANCELLED Deposit_Status = 2
	// The deposit has been finalized and accounts have been updated
	Deposit_DEPOSIT_STATUS_FINALIZED Deposit_Status = 3
)

// Enum value maps for Deposit_Status.
var (
	Deposit_Status_name = map[int32]string{
		0: "DEPOSIT_STATUS_UNSPECIFIED",
		1: "DEPOSIT_STATUS_OPEN",
		2: "DEPOSIT_STATUS_CANCELLED",
		3: "DEPOSIT_STATUS_FINALIZED",
	}
	Deposit_Status_value = map[string]int32{
		"DEPOSIT_STATUS_UNSPECIFIED": 0,
		"DEPOSIT_STATUS_OPEN":        1,
		"DEPOSIT_STATUS_CANCELLED":   2,
		"DEPOSIT_STATUS_FINALIZED":   3,
	}
)

func (x Deposit_Status) Enum() *Deposit_Status {
	p := new(Deposit_Status)
	*p = x
	return p
}

func (x Deposit_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deposit_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[14].Descriptor()
}

func (Deposit_Status) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[14]
}

func (x Deposit_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deposit_Status.Descriptor instead.
func (Deposit_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{20, 0}
}

// The status of the withdrawal
type Withdrawal_Status int32

const (
	// The default value
	Withdrawal_WITHDRAWAL_STATUS_UNSPECIFIED Withdrawal_Status = 0
	// The withdrawal is open and being processed by the network
	Withdrawal_WITHDRAWAL_STATUS_OPEN Withdrawal_Status = 1
	// The withdrawal have been cancelled
	Withdrawal_WITHDRAWAL_STATUS_CANCELLED Withdrawal_Status = 2
	// The withdrawal went through and is fully finalized (funds remove from the
	// vega network, and unlocked from the foreign chain bridge)
	Withdrawal_WITHDRAWAL_STATUS_FINALIZED Withdrawal_Status = 3
)

// Enum value maps for Withdrawal_Status.
var (
	Withdrawal_Status_name = map[int32]string{
		0: "WITHDRAWAL_STATUS_UNSPECIFIED",
		1: "WITHDRAWAL_STATUS_OPEN",
		2: "WITHDRAWAL_STATUS_CANCELLED",
		3: "WITHDRAWAL_STATUS_FINALIZED",
	}
	Withdrawal_Status_value = map[string]int32{
		"WITHDRAWAL_STATUS_UNSPECIFIED": 0,
		"WITHDRAWAL_STATUS_OPEN":        1,
		"WITHDRAWAL_STATUS_CANCELLED":   2,
		"WITHDRAWAL_STATUS_FINALIZED":   3,
	}
)

func (x Withdrawal_Status) Enum() *Withdrawal_Status {
	p := new(Withdrawal_Status)
	*p = x
	return p
}

func (x Withdrawal_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Withdrawal_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[15].Descriptor()
}

func (Withdrawal_Status) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[15]
}

func (x Withdrawal_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Withdrawal_Status.Descriptor instead.
func (Withdrawal_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{21, 0}
}

// the status of a liquidity provision order
type LiquidityProvision_Status int32

const (
	// The default value
	LiquidityProvision_LIQUIDITY_PROVISION_STATUS_UNSPECIFIED LiquidityProvision_Status = 0
	// The liquidity provision is active
	LiquidityProvision_LIQUIDITY_PROVISION_STATUS_ACTIVE LiquidityProvision_Status = 1
	// The liquidity provision was stopped by the network
	LiquidityProvision_LIQUIDITY_PROVISION_STATUS_STOPPED LiquidityProvision_Status = 2
	// The liquidity provision was cancelled by the MM.
	LiquidityProvision_LIQUIDITY_PROVISION_STATUS_CANCELLED LiquidityProvision_Status = 3
	// The liquidity provision was invalid and got rejected.
	LiquidityProvision_LIQUIDITY_PROVISION_STATUS_REJECTED LiquidityProvision_Status = 4
)

// Enum value maps for LiquidityProvision_Status.
var (
	LiquidityProvision_Status_name = map[int32]string{
		0: "LIQUIDITY_PROVISION_STATUS_UNSPECIFIED",
		1: "LIQUIDITY_PROVISION_STATUS_ACTIVE",
		2: "LIQUIDITY_PROVISION_STATUS_STOPPED",
		3: "LIQUIDITY_PROVISION_STATUS_CANCELLED",
		4: "LIQUIDITY_PROVISION_STATUS_REJECTED",
	}
	LiquidityProvision_Status_value = map[string]int32{
		"LIQUIDITY_PROVISION_STATUS_UNSPECIFIED": 0,
		"LIQUIDITY_PROVISION_STATUS_ACTIVE":      1,
		"LIQUIDITY_PROVISION_STATUS_STOPPED":     2,
		"LIQUIDITY_PROVISION_STATUS_CANCELLED":   3,
		"LIQUIDITY_PROVISION_STATUS_REJECTED":    4,
	}
)

func (x LiquidityProvision_Status) Enum() *LiquidityProvision_Status {
	p := new(LiquidityProvision_Status)
	*p = x
	return p
}

func (x LiquidityProvision_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiquidityProvision_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_proto_enumTypes[16].Descriptor()
}

func (LiquidityProvision_Status) Type() protoreflect.EnumType {
	return &file_vega_proto_enumTypes[16]
}

func (x LiquidityProvision_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiquidityProvision_Status.Descriptor instead.
func (LiquidityProvision_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{49, 0}
}

type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price value, given as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{0}
}

func (x *Price) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A timestamp in nanoseconds since epoch.
// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp value.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{1}
}

func (x *Timestamp) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A party represents an entity who wishes to trade on or query a Vega network.
type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the party, typically represented by a public key.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{2}
}

func (x *Party) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Risk factors are used to calculate the current risk associated with orders trading on a given market.
type RiskFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID that relates to this risk factor.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Short Risk factor value.
	Short float64 `protobuf:"fixed64,2,opt,name=short,proto3" json:"short,omitempty"`
	// Long Risk factor value.
	Long float64 `protobuf:"fixed64,3,opt,name=long,proto3" json:"long,omitempty"`
}

func (x *RiskFactor) Reset() {
	*x = RiskFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFactor) ProtoMessage() {}

func (x *RiskFactor) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFactor.ProtoReflect.Descriptor instead.
func (*RiskFactor) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{3}
}

func (x *RiskFactor) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *RiskFactor) GetShort() float64 {
	if x != nil {
		return x.Short
	}
	return 0
}

func (x *RiskFactor) GetLong() float64 {
	if x != nil {
		return x.Long
	}
	return 0
}

// Risk results are calculated internally by Vega to attempt to maintain safe trading.
type RiskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for when risk factors were generated.
	UpdatedTimestamp int64 `protobuf:"varint,1,opt,name=updatedTimestamp,proto3" json:"updatedTimestamp,omitempty"`
	// Risk factors (long and short) for each margin-able asset/currency (usually == settlement assets) in the market.
	RiskFactors map[string]*RiskFactor `protobuf:"bytes,2,rep,name=riskFactors,proto3" json:"riskFactors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timestamp for when risk factors are expected to change (or empty if risk factors are continually updated).
	NextUpdateTimestamp int64 `protobuf:"varint,3,opt,name=nextUpdateTimestamp,proto3" json:"nextUpdateTimestamp,omitempty"`
	// Predicted risk factors at next change (what they would be if the change occurred now).
	PredictedNextRiskFactors map[string]*RiskFactor `protobuf:"bytes,4,rep,name=predictedNextRiskFactors,proto3" json:"predictedNextRiskFactors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RiskResult) Reset() {
	*x = RiskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskResult) ProtoMessage() {}

func (x *RiskResult) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskResult.ProtoReflect.Descriptor instead.
func (*RiskResult) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{4}
}

func (x *RiskResult) GetUpdatedTimestamp() int64 {
	if x != nil {
		return x.UpdatedTimestamp
	}
	return 0
}

func (x *RiskResult) GetRiskFactors() map[string]*RiskFactor {
	if x != nil {
		return x.RiskFactors
	}
	return nil
}

func (x *RiskResult) GetNextUpdateTimestamp() int64 {
	if x != nil {
		return x.NextUpdateTimestamp
	}
	return 0
}

func (x *RiskResult) GetPredictedNextRiskFactors() map[string]*RiskFactor {
	if x != nil {
		return x.PredictedNextRiskFactors
	}
	return nil
}

type PeggedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which price point are we linked to
	Reference PeggedReference `protobuf:"varint,1,opt,name=reference,proto3,enum=vega.PeggedReference" json:"reference,omitempty"`
	// Offset from the price reference
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PeggedOrder) Reset() {
	*x = PeggedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeggedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeggedOrder) ProtoMessage() {}

func (x *PeggedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeggedOrder.ProtoReflect.Descriptor instead.
func (*PeggedOrder) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{5}
}

func (x *PeggedOrder) GetReference() PeggedReference {
	if x != nil {
		return x.Reference
	}
	return PeggedReference_PEGGED_REFERENCE_UNSPECIFIED
}

func (x *PeggedOrder) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the order (set by the system after consensus).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier for the order.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier for the order.
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Side for the order, e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side).
	Side Side `protobuf:"varint,4,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Price uint64 `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of contracts.
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED.
	Remaining uint64 `protobuf:"varint,7,opt,name=remaining,proto3" json:"remaining,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires.
	// See [`Order.TimeInForce`](#vega.Order.TimeInForce).
	TimeInForce Order_TimeInForce `protobuf:"varint,8,opt,name=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"timeInForce,omitempty"`
	// Type for the order. See [`Order.Type`](#vega.Order.Type).
	Type Order_Type `protobuf:"varint,9,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Timestamp for when the order was created at, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	CreatedAt int64 `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// The current status for the order. See [`Order.Status`](#vega.Order.Status).
	// For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field.
	Status Order_Status `protobuf:"varint,11,opt,name=status,proto3,enum=vega.Order_Status" json:"status,omitempty"`
	// Timestamp for when the order will expire, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`. Valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIF_GTT`.
	ExpiresAt int64 `protobuf:"varint,12,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	// Reference given for the order, this is typically used to retrieve an order submitted through consensus. Currently
	// set internally by the node to return a unique reference identifier for the order submission.
	Reference string `protobuf:"bytes,13,opt,name=reference,proto3" json:"reference,omitempty"`
	// If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified.
	// The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors.
	Reason OrderError `protobuf:"varint,14,opt,name=reason,proto3,enum=vega.OrderError" json:"reason,omitempty"`
	// Timestamp for when the Order was last updated, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	UpdatedAt int64 `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// The version for the order, initial value is version 1 and is incremented after each successful amend
	Version uint64 `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
	// Batch identifier for the order, used internally for orders submitted during auctions
	// to keep track of the auction batch this order falls under (required for fees calculation).
	BatchID uint64 `protobuf:"varint,17,opt,name=batchID,proto3" json:"batchID,omitempty"`
	// If this order represents a pegged order, the details are supplied here
	PeggedOrder *PeggedOrder `protobuf:"bytes,18,opt,name=peggedOrder,proto3" json:"peggedOrder,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{6}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *Order) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *Order) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Order) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Order) GetRemaining() uint64 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *Order) GetTimeInForce() Order_TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return Order_TIF_UNSPECIFIED
}

func (x *Order) GetType() Order_Type {
	if x != nil {
		return x.Type
	}
	return Order_TYPE_UNSPECIFIED
}

func (x *Order) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Order) GetStatus() Order_Status {
	if x != nil {
		return x.Status
	}
	return Order_STATUS_INVALID
}

func (x *Order) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *Order) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Order) GetReason() OrderError {
	if x != nil {
		return x.Reason
	}
	return OrderError_ORDER_ERROR_NONE
}

func (x *Order) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Order) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Order) GetBatchID() uint64 {
	if x != nil {
		return x.BatchID
	}
	return 0
}

func (x *Order) GetPeggedOrder() *PeggedOrder {
	if x != nil {
		return x.PeggedOrder
	}
	return nil
}

// Used when cancelling an Order.
type OrderCancellationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The order that was cancelled.
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderCancellationConfirmation) Reset() {
	*x = OrderCancellationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancellationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancellationConfirmation) ProtoMessage() {}

func (x *OrderCancellationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancellationConfirmation.ProtoReflect.Descriptor instead.
func (*OrderCancellationConfirmation) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{7}
}

func (x *OrderCancellationConfirmation) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Used when confirming an Order.
type OrderConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The order that was confirmed.
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	// 0 or more trades that were emitted.
	Trades []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
	// 0 or more passive orders that were affected.
	PassiveOrdersAffected []*Order `protobuf:"bytes,3,rep,name=passiveOrdersAffected,proto3" json:"passiveOrdersAffected,omitempty"`
}

func (x *OrderConfirmation) Reset() {
	*x = OrderConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderConfirmation) ProtoMessage() {}

func (x *OrderConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderConfirmation.ProtoReflect.Descriptor instead.
func (*OrderConfirmation) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{8}
}

func (x *OrderConfirmation) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *OrderConfirmation) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *OrderConfirmation) GetPassiveOrdersAffected() []*Order {
	if x != nil {
		return x.PassiveOrdersAffected
	}
	return nil
}

// AuctionIndicativeState is used to emit an event with the indicative price/volume per market during an auction.
type AuctionIndicativeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market identifier for which this state relates to.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// The Indicative Uncrossing Price is the price at which all trades would occur if we uncrossed the auction now.
	IndicativePrice uint64 `protobuf:"varint,2,opt,name=indicativePrice,proto3" json:"indicativePrice,omitempty"`
	// The Indicative Uncrossing Volume is the volume available at the Indicative crossing price if we uncrossed the auction now.
	IndicativeVolume uint64 `protobuf:"varint,3,opt,name=indicativeVolume,proto3" json:"indicativeVolume,omitempty"`
	// The timestamp at which the auction started.
	AuctionStart int64 `protobuf:"varint,4,opt,name=auctionStart,proto3" json:"auctionStart,omitempty"`
	// The timestamp at which the auction is meant to stop.
	AuctionEnd int64 `protobuf:"varint,5,opt,name=auctionEnd,proto3" json:"auctionEnd,omitempty"`
}

func (x *AuctionIndicativeState) Reset() {
	*x = AuctionIndicativeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionIndicativeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionIndicativeState) ProtoMessage() {}

func (x *AuctionIndicativeState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionIndicativeState.ProtoReflect.Descriptor instead.
func (*AuctionIndicativeState) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{9}
}

func (x *AuctionIndicativeState) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *AuctionIndicativeState) GetIndicativePrice() uint64 {
	if x != nil {
		return x.IndicativePrice
	}
	return 0
}

func (x *AuctionIndicativeState) GetIndicativeVolume() uint64 {
	if x != nil {
		return x.IndicativeVolume
	}
	return 0
}

func (x *AuctionIndicativeState) GetAuctionStart() int64 {
	if x != nil {
		return x.AuctionStart
	}
	return 0
}

func (x *AuctionIndicativeState) GetAuctionEnd() int64 {
	if x != nil {
		return x.AuctionEnd
	}
	return 0
}

// A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega.
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the trade (generated by Vega).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier (the market that the trade occurred on).
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Price for the trade, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// Size filled for the trade.
	Size uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// Unique party identifier for the buyer.
	Buyer string `protobuf:"bytes,5,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// Unique party identifier for the seller.
	Seller string `protobuf:"bytes,6,opt,name=seller,proto3" json:"seller,omitempty"`
	// Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side).
	Aggressor Side `protobuf:"varint,7,opt,name=aggressor,proto3,enum=vega.Side" json:"aggressor,omitempty"`
	// Identifier of the order from the buy side.
	BuyOrder string `protobuf:"bytes,8,opt,name=buyOrder,proto3" json:"buyOrder,omitempty"`
	// Identifier of the order from the sell side.
	SellOrder string `protobuf:"bytes,9,opt,name=sellOrder,proto3" json:"sellOrder,omitempty"`
	// Timestamp for when the trade occurred, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Type for the trade. See [`Trade.Type`](#vega.Trade.Type).
	Type Trade_Type `protobuf:"varint,11,opt,name=type,proto3,enum=vega.Trade_Type" json:"type,omitempty"`
	// Fee amount charged to the buyer party for the trade.
	BuyerFee *Fee `protobuf:"bytes,12,opt,name=buyerFee,proto3" json:"buyerFee,omitempty"`
	// Fee amount charged to the seller party for the trade.
	SellerFee *Fee `protobuf:"bytes,13,opt,name=sellerFee,proto3" json:"sellerFee,omitempty"`
	// Auction batch number that the buy side order was placed in.
	BuyerAuctionBatch uint64 `protobuf:"varint,14,opt,name=buyerAuctionBatch,proto3" json:"buyerAuctionBatch,omitempty"`
	// Auction batch number that the sell side order was placed in.
	SellerAuctionBatch uint64 `protobuf:"varint,15,opt,name=sellerAuctionBatch,proto3" json:"sellerAuctionBatch,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{10}
}

func (x *Trade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trade) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *Trade) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Trade) GetBuyer() string {
	if x != nil {
		return x.Buyer
	}
	return ""
}

func (x *Trade) GetSeller() string {
	if x != nil {
		return x.Seller
	}
	return ""
}

func (x *Trade) GetAggressor() Side {
	if x != nil {
		return x.Aggressor
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Trade) GetBuyOrder() string {
	if x != nil {
		return x.BuyOrder
	}
	return ""
}

func (x *Trade) GetSellOrder() string {
	if x != nil {
		return x.SellOrder
	}
	return ""
}

func (x *Trade) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Trade) GetType() Trade_Type {
	if x != nil {
		return x.Type
	}
	return Trade_TYPE_UNSPECIFIED
}

func (x *Trade) GetBuyerFee() *Fee {
	if x != nil {
		return x.BuyerFee
	}
	return nil
}

func (x *Trade) GetSellerFee() *Fee {
	if x != nil {
		return x.SellerFee
	}
	return nil
}

func (x *Trade) GetBuyerAuctionBatch() uint64 {
	if x != nil {
		return x.BuyerAuctionBatch
	}
	return 0
}

func (x *Trade) GetSellerAuctionBatch() uint64 {
	if x != nil {
		return x.SellerAuctionBatch
	}
	return 0
}

// Represents any fees paid by a party, resulting from a trade.
type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee amount paid to the non-aggressive party of the trade.
	MakerFee uint64 `protobuf:"varint,1,opt,name=makerFee,proto3" json:"makerFee,omitempty"`
	// Fee amount paid for maintaining the Vega infrastructure.
	InfrastructureFee uint64 `protobuf:"varint,2,opt,name=infrastructureFee,proto3" json:"infrastructureFee,omitempty"`
	// Fee amount paid to market makers.
	LiquidityFee uint64 `protobuf:"varint,3,opt,name=liquidityFee,proto3" json:"liquidityFee,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{11}
}

func (x *Fee) GetMakerFee() uint64 {
	if x != nil {
		return x.MakerFee
	}
	return 0
}

func (x *Fee) GetInfrastructureFee() uint64 {
	if x != nil {
		return x.InfrastructureFee
	}
	return 0
}

func (x *Fee) GetLiquidityFee() uint64 {
	if x != nil {
		return x.LiquidityFee
	}
	return 0
}

type TradeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of one or more trades.
	Trades []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradeSet) Reset() {
	*x = TradeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSet) ProtoMessage() {}

func (x *TradeSet) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSet.ProtoReflect.Descriptor instead.
func (*TradeSet) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{12}
}

func (x *TradeSet) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Represents the high, low, open, and closing prices for an interval of trading,
// referred to commonly as a candlestick or candle.
type Candle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// An ISO-8601 datetime with nanosecond precision for when the candle was last updated.
	Datetime string `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// Highest price for trading during the candle interval.
	High uint64 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	// Lowest price for trading during the candle interval.
	Low uint64 `protobuf:"varint,4,opt,name=low,proto3" json:"low,omitempty"`
	// Open trade price.
	Open uint64 `protobuf:"varint,5,opt,name=open,proto3" json:"open,omitempty"`
	// Closing trade price.
	Close uint64 `protobuf:"varint,6,opt,name=close,proto3" json:"close,omitempty"`
	// Total trading volume during the candle interval.
	Volume uint64 `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`
	// Time interval for the candle. See [`Interval`](#vega.Interval).
	Interval Interval `protobuf:"varint,8,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
}

func (x *Candle) Reset() {
	*x = Candle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Candle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candle) ProtoMessage() {}

func (x *Candle) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candle.ProtoReflect.Descriptor instead.
func (*Candle) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{13}
}

func (x *Candle) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Candle) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *Candle) GetHigh() uint64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Candle) GetLow() uint64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Candle) GetOpen() uint64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Candle) GetClose() uint64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Candle) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Candle) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_INTERVAL_UNSPECIFIED
}

// Represents a price level from market depth or order book data.
type PriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price for the price level, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Price uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	// Number of orders at the price level.
	NumberOfOrders uint64 `protobuf:"varint,2,opt,name=numberOfOrders,proto3" json:"numberOfOrders,omitempty"`
	// Volume at the price level.
	Volume uint64 `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *PriceLevel) Reset() {
	*x = PriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceLevel) ProtoMessage() {}

func (x *PriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceLevel.ProtoReflect.Descriptor instead.
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{14}
}

func (x *PriceLevel) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceLevel) GetNumberOfOrders() uint64 {
	if x != nil {
		return x.NumberOfOrders
	}
	return 0
}

func (x *PriceLevel) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Represents market depth or order book data for the specified market on Vega.
type MarketDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Collection of price levels for the buy side of the book.
	Buy []*PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Collection of price levels for the sell side of the book.
	Sell []*PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Sequence number for the market depth dump
	SequenceNumber uint64 `protobuf:"varint,4,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
}

func (x *MarketDepth) Reset() {
	*x = MarketDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepth) ProtoMessage() {}

func (x *MarketDepth) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepth.ProtoReflect.Descriptor instead.
func (*MarketDepth) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{15}
}

func (x *MarketDepth) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *MarketDepth) GetBuy() []*PriceLevel {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *MarketDepth) GetSell() []*PriceLevel {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *MarketDepth) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Represents the changed market depth since the last update
type MarketDepthUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Collection of updated price levels for the buy side of the book.
	Buy []*PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Collection of updated price levels for the sell side of the book.
	Sell []*PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Sequence number for the market depth update
	SequenceNumber uint64 `protobuf:"varint,4,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
}

func (x *MarketDepthUpdate) Reset() {
	*x = MarketDepthUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdate) ProtoMessage() {}

func (x *MarketDepthUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdate.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdate) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{16}
}

func (x *MarketDepthUpdate) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *MarketDepthUpdate) GetBuy() []*PriceLevel {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *MarketDepthUpdate) GetSell() []*PriceLevel {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *MarketDepthUpdate) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Represents position data for a party on the specified market on Vega.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier.
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Open volume for the position. Value is signed +ve for long and -ve for short.
	OpenVolume int64 `protobuf:"varint,3,opt,name=openVolume,proto3" json:"openVolume,omitempty"`
	// Realised profit and loss for the position. Value is signed +ve for long and -ve for short.
	RealisedPNL int64 `protobuf:"varint,4,opt,name=realisedPNL,proto3" json:"realisedPNL,omitempty"`
	// Unrealised profit and loss for the position. Value is signed +ve for long and -ve for short.
	UnrealisedPNL int64 `protobuf:"varint,5,opt,name=unrealisedPNL,proto3" json:"unrealisedPNL,omitempty"`
	// Average entry price for the position, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	AverageEntryPrice uint64 `protobuf:"varint,6,opt,name=averageEntryPrice,proto3" json:"averageEntryPrice,omitempty"`
	// last time the position was updated
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{17}
}

func (x *Position) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *Position) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *Position) GetOpenVolume() int64 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

func (x *Position) GetRealisedPNL() int64 {
	if x != nil {
		return x.RealisedPNL
	}
	return 0
}

func (x *Position) GetUnrealisedPNL() int64 {
	if x != nil {
		return x.UnrealisedPNL
	}
	return 0
}

func (x *Position) GetAverageEntryPrice() uint64 {
	if x != nil {
		return x.AverageEntryPrice
	}
	return 0
}

func (x *Position) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PositionTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume for the position trade. Value is signed +ve for long and -ve for short.
	Volume int64 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// Price for the position trade, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Price uint64 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PositionTrade) Reset() {
	*x = PositionTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionTrade) ProtoMessage() {}

func (x *PositionTrade) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionTrade.ProtoReflect.Descriptor instead.
func (*PositionTrade) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{18}
}

func (x *PositionTrade) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PositionTrade) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// Vega domain specific statistics as reported by the node the caller is connected to.
type Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current block height as reported by the Vega blockchain.
	BlockHeight uint64 `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	// Current backlog length (number of transactions) that are waiting to be included in a block.
	BacklogLength uint64 `protobuf:"varint,2,opt,name=backlogLength,proto3" json:"backlogLength,omitempty"`
	// Total number of connected peers to this node.
	TotalPeers uint64 `protobuf:"varint,3,opt,name=totalPeers,proto3" json:"totalPeers,omitempty"`
	// Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision.
	GenesisTime string `protobuf:"bytes,4,opt,name=genesisTime,proto3" json:"genesisTime,omitempty"`
	// Current system date and time formatted in ISO-8601 datetime format with nanosecond precision.
	CurrentTime string `protobuf:"bytes,5,opt,name=currentTime,proto3" json:"currentTime,omitempty"`
	// Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision.
	VegaTime string `protobuf:"bytes,6,opt,name=vegaTime,proto3" json:"vegaTime,omitempty"`
	// Status of the connection to the Vega blockchain.
	// See [`ChainStatus`](#vega.ChainStatus).
	Status ChainStatus `protobuf:"varint,7,opt,name=status,proto3,enum=vega.ChainStatus" json:"status,omitempty"`
	// Transactions per block.
	TxPerBlock uint64 `protobuf:"varint,8,opt,name=txPerBlock,proto3" json:"txPerBlock,omitempty"`
	// Average transaction size in bytes.
	AverageTxBytes uint64 `protobuf:"varint,9,opt,name=averageTxBytes,proto3" json:"averageTxBytes,omitempty"`
	// Average orders per block.
	AverageOrdersPerBlock uint64 `protobuf:"varint,10,opt,name=averageOrdersPerBlock,proto3" json:"averageOrdersPerBlock,omitempty"`
	// Trades emitted per second.
	TradesPerSecond uint64 `protobuf:"varint,11,opt,name=tradesPerSecond,proto3" json:"tradesPerSecond,omitempty"`
	// Orders affected per second.
	OrdersPerSecond uint64 `protobuf:"varint,12,opt,name=ordersPerSecond,proto3" json:"ordersPerSecond,omitempty"`
	// Total markets on this Vega network.
	TotalMarkets uint64 `protobuf:"varint,13,opt,name=totalMarkets,proto3" json:"totalMarkets,omitempty"`
	// Total number of order amendments since genesis (on all markets).
	TotalAmendOrder uint64 `protobuf:"varint,16,opt,name=totalAmendOrder,proto3" json:"totalAmendOrder,omitempty"`
	// Total number of order cancellations since genesis (on all markets).
	TotalCancelOrder uint64 `protobuf:"varint,17,opt,name=totalCancelOrder,proto3" json:"totalCancelOrder,omitempty"`
	// Total number of order submissions since genesis (on all markets).
	TotalCreateOrder uint64 `protobuf:"varint,18,opt,name=totalCreateOrder,proto3" json:"totalCreateOrder,omitempty"`
	// Total number of orders affected since genesis (on all markets).
	TotalOrders uint64 `protobuf:"varint,19,opt,name=totalOrders,proto3" json:"totalOrders,omitempty"`
	// Total number of trades emitted since genesis (on all markets).
	TotalTrades uint64 `protobuf:"varint,20,opt,name=totalTrades,proto3" json:"totalTrades,omitempty"`
	// Current number of stream subscribers to order data.
	OrderSubscriptions uint32 `protobuf:"varint,21,opt,name=orderSubscriptions,proto3" json:"orderSubscriptions,omitempty"`
	// Current number of stream subscribers to trade data.
	TradeSubscriptions uint32 `protobuf:"varint,22,opt,name=tradeSubscriptions,proto3" json:"tradeSubscriptions,omitempty"`
	// Current number of stream subscribers to candle-stick data.
	CandleSubscriptions uint32 `protobuf:"varint,23,opt,name=candleSubscriptions,proto3" json:"candleSubscriptions,omitempty"`
	// Current number of stream subscribers to market depth data.
	MarketDepthSubscriptions uint32 `protobuf:"varint,24,opt,name=marketDepthSubscriptions,proto3" json:"marketDepthSubscriptions,omitempty"`
	// Current number of stream subscribers to positions data.
	PositionsSubscriptions uint32 `protobuf:"varint,25,opt,name=positionsSubscriptions,proto3" json:"positionsSubscriptions,omitempty"`
	// Current number of stream subscribers to account data.
	AccountSubscriptions uint32 `protobuf:"varint,26,opt,name=accountSubscriptions,proto3" json:"accountSubscriptions,omitempty"`
	// Current number of stream subscribers to market data.
	MarketDataSubscriptions uint32 `protobuf:"varint,27,opt,name=marketDataSubscriptions,proto3" json:"marketDataSubscriptions,omitempty"`
	// The version hash of the Vega node software.
	AppVersionHash string `protobuf:"bytes,28,opt,name=appVersionHash,proto3" json:"appVersionHash,omitempty"`
	// The version of the Vega node software.
	AppVersion string `protobuf:"bytes,29,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	// The version of the underlying Vega blockchain.
	ChainVersion string `protobuf:"bytes,30,opt,name=chainVersion,proto3" json:"chainVersion,omitempty"`
	// Current block duration, in nanoseconds.
	BlockDuration uint64 `protobuf:"varint,31,opt,name=blockDuration,proto3" json:"blockDuration,omitempty"`
	// Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision.
	Uptime string `protobuf:"bytes,32,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Unique identifier for the underlying Vega blockchain.
	ChainID string `protobuf:"bytes,33,opt,name=chainID,proto3" json:"chainID,omitempty"`
	// Current number of stream subscribers to market depth update data.
	MarketDepthUpdatesSubscriptions uint32 `protobuf:"varint,34,opt,name=marketDepthUpdatesSubscriptions,proto3" json:"marketDepthUpdatesSubscriptions,omitempty"`
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{19}
}

func (x *Statistics) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *Statistics) GetBacklogLength() uint64 {
	if x != nil {
		return x.BacklogLength
	}
	return 0
}

func (x *Statistics) GetTotalPeers() uint64 {
	if x != nil {
		return x.TotalPeers
	}
	return 0
}

func (x *Statistics) GetGenesisTime() string {
	if x != nil {
		return x.GenesisTime
	}
	return ""
}

func (x *Statistics) GetCurrentTime() string {
	if x != nil {
		return x.CurrentTime
	}
	return ""
}

func (x *Statistics) GetVegaTime() string {
	if x != nil {
		return x.VegaTime
	}
	return ""
}

func (x *Statistics) GetStatus() ChainStatus {
	if x != nil {
		return x.Status
	}
	return ChainStatus_CHAIN_STATUS_UNSPECIFIED
}

func (x *Statistics) GetTxPerBlock() uint64 {
	if x != nil {
		return x.TxPerBlock
	}
	return 0
}

func (x *Statistics) GetAverageTxBytes() uint64 {
	if x != nil {
		return x.AverageTxBytes
	}
	return 0
}

func (x *Statistics) GetAverageOrdersPerBlock() uint64 {
	if x != nil {
		return x.AverageOrdersPerBlock
	}
	return 0
}

func (x *Statistics) GetTradesPerSecond() uint64 {
	if x != nil {
		return x.TradesPerSecond
	}
	return 0
}

func (x *Statistics) GetOrdersPerSecond() uint64 {
	if x != nil {
		return x.OrdersPerSecond
	}
	return 0
}

func (x *Statistics) GetTotalMarkets() uint64 {
	if x != nil {
		return x.TotalMarkets
	}
	return 0
}

func (x *Statistics) GetTotalAmendOrder() uint64 {
	if x != nil {
		return x.TotalAmendOrder
	}
	return 0
}

func (x *Statistics) GetTotalCancelOrder() uint64 {
	if x != nil {
		return x.TotalCancelOrder
	}
	return 0
}

func (x *Statistics) GetTotalCreateOrder() uint64 {
	if x != nil {
		return x.TotalCreateOrder
	}
	return 0
}

func (x *Statistics) GetTotalOrders() uint64 {
	if x != nil {
		return x.TotalOrders
	}
	return 0
}

func (x *Statistics) GetTotalTrades() uint64 {
	if x != nil {
		return x.TotalTrades
	}
	return 0
}

func (x *Statistics) GetOrderSubscriptions() uint32 {
	if x != nil {
		return x.OrderSubscriptions
	}
	return 0
}

func (x *Statistics) GetTradeSubscriptions() uint32 {
	if x != nil {
		return x.TradeSubscriptions
	}
	return 0
}

func (x *Statistics) GetCandleSubscriptions() uint32 {
	if x != nil {
		return x.CandleSubscriptions
	}
	return 0
}

func (x *Statistics) GetMarketDepthSubscriptions() uint32 {
	if x != nil {
		return x.MarketDepthSubscriptions
	}
	return 0
}

func (x *Statistics) GetPositionsSubscriptions() uint32 {
	if x != nil {
		return x.PositionsSubscriptions
	}
	return 0
}

func (x *Statistics) GetAccountSubscriptions() uint32 {
	if x != nil {
		return x.AccountSubscriptions
	}
	return 0
}

func (x *Statistics) GetMarketDataSubscriptions() uint32 {
	if x != nil {
		return x.MarketDataSubscriptions
	}
	return 0
}

func (x *Statistics) GetAppVersionHash() string {
	if x != nil {
		return x.AppVersionHash
	}
	return ""
}

func (x *Statistics) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Statistics) GetChainVersion() string {
	if x != nil {
		return x.ChainVersion
	}
	return ""
}

func (x *Statistics) GetBlockDuration() uint64 {
	if x != nil {
		return x.BlockDuration
	}
	return 0
}

func (x *Statistics) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *Statistics) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *Statistics) GetMarketDepthUpdatesSubscriptions() uint32 {
	if x != nil {
		return x.MarketDepthUpdatesSubscriptions
	}
	return 0
}

// The representation of a deposit in the vega network
type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the deposit
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status of the deposit
	Status Deposit_Status `protobuf:"varint,2,opt,name=status,proto3,enum=vega.Deposit_Status" json:"status,omitempty"`
	// The party initiating the deposit
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The vega asset targeted by this deposit
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The amount to be deposited
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The hash of the transaction from the foreign chain
	TxHash string `protobuf:"bytes,6,opt,name=txHash,proto3" json:"txHash,omitempty"`
	// The time where the vega account got updated with the deposit
	CreditedTimestamp int64 `protobuf:"varint,7,opt,name=creditedTimestamp,proto3" json:"creditedTimestamp,omitempty"`
	// The time the deposit has been created in the vega network
	CreatedTimestamp int64 `protobuf:"varint,8,opt,name=createdTimestamp,proto3" json:"createdTimestamp,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{20}
}

func (x *Deposit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deposit) GetStatus() Deposit_Status {
	if x != nil {
		return x.Status
	}
	return Deposit_DEPOSIT_STATUS_UNSPECIFIED
}

func (x *Deposit) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *Deposit) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Deposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Deposit) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Deposit) GetCreditedTimestamp() int64 {
	if x != nil {
		return x.CreditedTimestamp
	}
	return 0
}

func (x *Deposit) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

// The representation of a withdrawal in the vega network
type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the withdrawal
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The party initiating the withdrawal
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The amount to be withdrawn
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The asset we want to withdraw funds from
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The status of this withdrawal
	Status Withdrawal_Status `protobuf:"varint,5,opt,name=status,proto3,enum=vega.Withdrawal_Status" json:"status,omitempty"`
	// The reference which is used by the foreign chain
	// to refer to this withdrawal
	Ref string `protobuf:"bytes,6,opt,name=ref,proto3" json:"ref,omitempty"`
	// The time until when the withdrawal is valid
	Expiry int64 `protobuf:"varint,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The hash of the foreign chain for this transaction
	TxHash string `protobuf:"bytes,8,opt,name=txHash,proto3" json:"txHash,omitempty"`
	// The time at which the network started to process this withdrawal
	CreatedTimestamp int64 `protobuf:"varint,9,opt,name=createdTimestamp,proto3" json:"createdTimestamp,omitempty"`
	// The time at which the withdrawal was finalized by the network
	WithdrawnTimestamp int64 `protobuf:"varint,10,opt,name=withdrawnTimestamp,proto3" json:"withdrawnTimestamp,omitempty"`
	// foreign chain specifis
	Ext *WithdrawExt `protobuf:"bytes,11,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{21}
}

func (x *Withdrawal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Withdrawal) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *Withdrawal) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Withdrawal) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Withdrawal) GetStatus() Withdrawal_Status {
	if x != nil {
		return x.Status
	}
	return Withdrawal_WITHDRAWAL_STATUS_UNSPECIFIED
}

func (x *Withdrawal) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Withdrawal) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Withdrawal) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Withdrawal) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *Withdrawal) GetWithdrawnTimestamp() int64 {
	if x != nil {
		return x.WithdrawnTimestamp
	}
	return 0
}

func (x *Withdrawal) GetExt() *WithdrawExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

// A request for withdrawing funds from a trader
type WithdrawSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party which wants to withdraw funds
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The amount to be withdrawn
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The asset we want to withdraw
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// foreign chain specifics
	Ext *WithdrawExt `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (x *WithdrawSubmission) Reset() {
	*x = WithdrawSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawSubmission) ProtoMessage() {}

func (x *WithdrawSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawSubmission.ProtoReflect.Descriptor instead.
func (*WithdrawSubmission) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{22}
}

func (x *WithdrawSubmission) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *WithdrawSubmission) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WithdrawSubmission) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *WithdrawSubmission) GetExt() *WithdrawExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

type WithdrawExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// foreign chain specifics
	//
	// Types that are assignable to Ext:
	//	*WithdrawExt_Erc20
	Ext isWithdrawExt_Ext `protobuf_oneof:"ext"`
}

func (x *WithdrawExt) Reset() {
	*x = WithdrawExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawExt) ProtoMessage() {}

func (x *WithdrawExt) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawExt.ProtoReflect.Descriptor instead.
func (*WithdrawExt) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{23}
}

func (m *WithdrawExt) GetExt() isWithdrawExt_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (x *WithdrawExt) GetErc20() *Erc20WithdrawExt {
	if x, ok := x.GetExt().(*WithdrawExt_Erc20); ok {
		return x.Erc20
	}
	return nil
}

type isWithdrawExt_Ext interface {
	isWithdrawExt_Ext()
}

type WithdrawExt_Erc20 struct {
	Erc20 *Erc20WithdrawExt `protobuf:"bytes,1,opt,name=erc20,proto3,oneof"`
}

func (*WithdrawExt_Erc20) isWithdrawExt_Ext() {}

// An extension of data required for the withdraw submissions
type Erc20WithdrawExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address into which the bridge will release the funds
	ReceiverAddress string `protobuf:"bytes,1,opt,name=receiverAddress,proto3" json:"receiverAddress,omitempty"`
}

func (x *Erc20WithdrawExt) Reset() {
	*x = Erc20WithdrawExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erc20WithdrawExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erc20WithdrawExt) ProtoMessage() {}

func (x *Erc20WithdrawExt) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erc20WithdrawExt.ProtoReflect.Descriptor instead.
func (*Erc20WithdrawExt) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{24}
}

func (x *Erc20WithdrawExt) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

// An order amendment is a request to amend or update an existing order on Vega.
type OrderAmendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier, this is required to find the order and will not be updated. Required field.
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// Party identifier, this is required to find the order and will not be updated. Required field.
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier, this is required to find the order and will not be updated.
	MarketID string `protobuf:"bytes,3,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Amend the price for the order, if the Price value is set, otherwise price will remain unchanged. See [`Price`](#vega.Price).
	Price *Price `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Amend the size for the order by the delta specified.
	// To reduce the size from the current value set a negative integer value.
	// To increase the size from the current value, set a positive integer value.
	// To leave the size unchanged set a value of zero.
	SizeDelta int64 `protobuf:"varint,5,opt,name=sizeDelta,proto3" json:"sizeDelta,omitempty"`
	// Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	ExpiresAt *Timestamp `protobuf:"bytes,6,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	// Amend the time in force for the order, set to TIF_UNSPECIFIED to remain unchanged.
	// See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`.
	TimeInForce Order_TimeInForce `protobuf:"varint,7,opt,name=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"timeInForce,omitempty"`
	// Amend the pegged order offset for the order
	PeggedOffset *wrappers.Int64Value `protobuf:"bytes,8,opt,name=peggedOffset,proto3" json:"peggedOffset,omitempty"`
	// Amend the pegged order reference for the order
	// See [`PeggedReference`](#api.PeggedReference).
	PeggedReference PeggedReference `protobuf:"varint,9,opt,name=peggedReference,proto3,enum=vega.PeggedReference" json:"peggedReference,omitempty"`
}

func (x *OrderAmendment) Reset() {
	*x = OrderAmendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAmendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAmendment) ProtoMessage() {}

func (x *OrderAmendment) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAmendment.ProtoReflect.Descriptor instead.
func (*OrderAmendment) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{25}
}

func (x *OrderAmendment) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *OrderAmendment) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *OrderAmendment) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *OrderAmendment) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderAmendment) GetSizeDelta() int64 {
	if x != nil {
		return x.SizeDelta
	}
	return 0
}

func (x *OrderAmendment) GetExpiresAt() *Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *OrderAmendment) GetTimeInForce() Order_TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return Order_TIF_UNSPECIFIED
}

func (x *OrderAmendment) GetPeggedOffset() *wrappers.Int64Value {
	if x != nil {
		return x.PeggedOffset
	}
	return nil
}

func (x *OrderAmendment) GetPeggedReference() PeggedReference {
	if x != nil {
		return x.PeggedReference
	}
	return PeggedReference_PEGGED_REFERENCE_UNSPECIFIED
}

// An order submission is a request to submit or create a new order on Vega.
type OrderSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the order (set by the system after consensus).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier for the order. Required field.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier for the order. Required field.
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	// Required field for Limit orders, however it is not required for market orders.
	Price uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of contracts. Cannot be negative.
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// Side for the order, e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side). Required field.
	Side Side `protobuf:"varint,6,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires.
	// See [`Order.TimeInForce`](#vega.Order.TimeInForce). Required field.
	TimeInForce Order_TimeInForce `protobuf:"varint,7,opt,name=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"timeInForce,omitempty"`
	// Timestamp for when the order will expire, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	// Required field only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIF_GTT`.
	ExpiresAt int64 `protobuf:"varint,8,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	// Type for the order. See [`Order.Type`](#vega.Order.Type). Required field.
	Type Order_Type `protobuf:"varint,9,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Reference given for the order, this is typically used to retrieve an order submitted through consensus. Currently
	// set internally by the node to return a unique reference identifier for the order submission.
	Reference string `protobuf:"bytes,10,opt,name=reference,proto3" json:"reference,omitempty"`
	// Pegged order details. If this sub message is supplied then the fields are used to configure a pegged order
	PeggedOrder *PeggedOrder `protobuf:"bytes,11,opt,name=peggedOrder,proto3" json:"peggedOrder,omitempty"`
}

func (x *OrderSubmission) Reset() {
	*x = OrderSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSubmission) ProtoMessage() {}

func (x *OrderSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSubmission.ProtoReflect.Descriptor instead.
func (*OrderSubmission) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{26}
}

func (x *OrderSubmission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderSubmission) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *OrderSubmission) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *OrderSubmission) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderSubmission) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OrderSubmission) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *OrderSubmission) GetTimeInForce() Order_TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return Order_TIF_UNSPECIFIED
}

func (x *OrderSubmission) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *OrderSubmission) GetType() Order_Type {
	if x != nil {
		return x.Type
	}
	return Order_TYPE_UNSPECIFIED
}

func (x *OrderSubmission) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *OrderSubmission) GetPeggedOrder() *PeggedOrder {
	if x != nil {
		return x.PeggedOrder
	}
	return nil
}

// An order cancellation is a request to cancel an existing order on Vega.
type OrderCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the order (set by the system after consensus). Required field.
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// Market identifier for the order. Required field.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier for the order. Required field.
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *OrderCancellation) Reset() {
	*x = OrderCancellation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancellation) ProtoMessage() {}

func (x *OrderCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancellation.ProtoReflect.Descriptor instead.
func (*OrderCancellation) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{27}
}

func (x *OrderCancellation) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *OrderCancellation) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *OrderCancellation) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

// Used to Register a node as a validator during network start-up.
type NodeRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key, required field.
	PubKey []byte `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	// Public key for the blockchain, required field.
	ChainPubKey []byte `protobuf:"bytes,2,opt,name=chainPubKey,proto3" json:"chainPubKey,omitempty"`
}

func (x *NodeRegistration) Reset() {
	*x = NodeRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRegistration) ProtoMessage() {}

func (x *NodeRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRegistration.ProtoReflect.Descriptor instead.
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{28}
}

func (x *NodeRegistration) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *NodeRegistration) GetChainPubKey() []byte {
	if x != nil {
		return x.ChainPubKey
	}
	return nil
}

// Used when a node votes for validating a given resource exists or is valid.
// For example, an ERC20 deposit is valid and exists on ethereum.
type NodeVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public key, required field.
	PubKey []byte `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	// Reference, required field.
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *NodeVote) Reset() {
	*x = NodeVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeVote) ProtoMessage() {}

func (x *NodeVote) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeVote.ProtoReflect.Descriptor instead.
func (*NodeVote) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{29}
}

func (x *NodeVote) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *NodeVote) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Represents an account for an asset on Vega for a particular owner or party.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique account identifier (used internally by Vega).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The party that the account belongs to. Special values include `network`, which represents the Vega network and is
	// most commonly seen during liquidation of distressed trading positions.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Balance of the asset, the balance is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places. Balances cannot be negative.
	Balance uint64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// Asset identifier for the account.
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// Market identifier for the account. If [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty.
	MarketID string `protobuf:"bytes,5,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// The account type related to this account.
	Type AccountType `protobuf:"varint,6,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{30}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Account) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Account) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Account) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *Account) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

// Asset value information used within a transfer.
type FinancialAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A signed integer amount of asset.
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Asset identifier.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *FinancialAmount) Reset() {
	*x = FinancialAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialAmount) ProtoMessage() {}

func (x *FinancialAmount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialAmount.ProtoReflect.Descriptor instead.
func (*FinancialAmount) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{31}
}

func (x *FinancialAmount) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FinancialAmount) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Represents a financial transfer within Vega.
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier for the owner of the transfer.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// A financial amount (of an asset) to transfer.
	Amount *FinancialAmount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The type of transfer, gives the reason for the transfer.
	Type TransferType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.TransferType" json:"type,omitempty"`
	// A minimum amount.
	MinAmount int64 `protobuf:"varint,4,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{32}
}

func (x *Transfer) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Transfer) GetAmount() *FinancialAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Transfer) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *Transfer) GetMinAmount() int64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

// Represents a request to transfer from one set of accounts to another.
type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more accounts to transfer from.
	FromAccount []*Account `protobuf:"bytes,1,rep,name=fromAccount,proto3" json:"fromAccount,omitempty"`
	// One or more accounts to transfer to.
	ToAccount []*Account `protobuf:"bytes,2,rep,name=toAccount,proto3" json:"toAccount,omitempty"`
	// An amount to transfer for the asset.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// A minimum amount.
	MinAmount uint64 `protobuf:"varint,4,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
	// Asset identifier.
	Asset string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	// A reference for auditing purposes.
	Reference string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{33}
}

func (x *TransferRequest) GetFromAccount() []*Account {
	if x != nil {
		return x.FromAccount
	}
	return nil
}

func (x *TransferRequest) GetToAccount() []*Account {
	if x != nil {
		return x.ToAccount
	}
	return nil
}

func (x *TransferRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferRequest) GetMinAmount() uint64 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *TransferRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TransferRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Represents a ledger entry on Vega.
type LedgerEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more accounts to transfer from.
	FromAccount string `protobuf:"bytes,1,opt,name=fromAccount,proto3" json:"fromAccount,omitempty"`
	// One or more accounts to transfer to.
	ToAccount string `protobuf:"bytes,2,opt,name=toAccount,proto3" json:"toAccount,omitempty"`
	// An amount to transfer.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// A reference for auditing purposes.
	Reference string `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	// Type of ledger entry.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Timestamp for the time the ledger entry was created, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LedgerEntry) Reset() {
	*x = LedgerEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerEntry) ProtoMessage() {}

func (x *LedgerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerEntry.ProtoReflect.Descriptor instead.
func (*LedgerEntry) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{34}
}

func (x *LedgerEntry) GetFromAccount() string {
	if x != nil {
		return x.FromAccount
	}
	return ""
}

func (x *LedgerEntry) GetToAccount() string {
	if x != nil {
		return x.ToAccount
	}
	return ""
}

func (x *LedgerEntry) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LedgerEntry) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *LedgerEntry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LedgerEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Represents the balance for an account during a transfer.
type TransferBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account relating to the transfer
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The balance relating to the transfer
	Balance uint64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TransferBalance) Reset() {
	*x = TransferBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferBalance) ProtoMessage() {}

func (x *TransferBalance) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferBalance.ProtoReflect.Descriptor instead.
func (*TransferBalance) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{35}
}

func (x *TransferBalance) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *TransferBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// Represents the response from a transfer.
type TransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more ledger entries representing the transfers.
	Transfers []*LedgerEntry `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
	// One or more account balances.
	Balances []*TransferBalance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{36}
}

func (x *TransferResponse) GetTransfers() []*LedgerEntry {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *TransferResponse) GetBalances() []*TransferBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// Represents the margin levels for a party on a market at a given time.
type MarginLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maintenance margin value.
	MaintenanceMargin uint64 `protobuf:"varint,1,opt,name=maintenanceMargin,proto3" json:"maintenanceMargin,omitempty"`
	// Search level value.
	SearchLevel uint64 `protobuf:"varint,2,opt,name=searchLevel,proto3" json:"searchLevel,omitempty"`
	// Initial margin value.
	InitialMargin uint64 `protobuf:"varint,3,opt,name=initialMargin,proto3" json:"initialMargin,omitempty"`
	// Collateral release level value.
	CollateralReleaseLevel uint64 `protobuf:"varint,4,opt,name=collateralReleaseLevel,proto3" json:"collateralReleaseLevel,omitempty"`
	// Party identifier.
	PartyID string `protobuf:"bytes,5,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier.
	MarketID string `protobuf:"bytes,6,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Asset identifier.
	Asset string `protobuf:"bytes,7,opt,name=asset,proto3" json:"asset,omitempty"`
	// Timestamp for the time the ledger entry was created, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp int64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *MarginLevels) Reset() {
	*x = MarginLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevels) ProtoMessage() {}

func (x *MarginLevels) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevels.ProtoReflect.Descriptor instead.
func (*MarginLevels) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{37}
}

func (x *MarginLevels) GetMaintenanceMargin() uint64 {
	if x != nil {
		return x.MaintenanceMargin
	}
	return 0
}

func (x *MarginLevels) GetSearchLevel() uint64 {
	if x != nil {
		return x.SearchLevel
	}
	return 0
}

func (x *MarginLevels) GetInitialMargin() uint64 {
	if x != nil {
		return x.InitialMargin
	}
	return 0
}

func (x *MarginLevels) GetCollateralReleaseLevel() uint64 {
	if x != nil {
		return x.CollateralReleaseLevel
	}
	return 0
}

func (x *MarginLevels) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *MarginLevels) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *MarginLevels) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *MarginLevels) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Represents data generated by a market when open.
type MarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mark price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	MarkPrice uint64 `protobuf:"varint,1,opt,name=markPrice,proto3" json:"markPrice,omitempty"`
	// Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	BestBidPrice uint64 `protobuf:"varint,2,opt,name=bestBidPrice,proto3" json:"bestBidPrice,omitempty"`
	// Aggregated volume being bid at the best bid price.
	BestBidVolume uint64 `protobuf:"varint,3,opt,name=bestBidVolume,proto3" json:"bestBidVolume,omitempty"`
	// Lowest price level on an order book for offer orders.
	BestOfferPrice uint64 `protobuf:"varint,4,opt,name=bestOfferPrice,proto3" json:"bestOfferPrice,omitempty"`
	// Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly
	//  // formatted price of `1.23456` assuming market configured to 5 decimal places.
	BestOfferVolume uint64 `protobuf:"varint,5,opt,name=bestOfferVolume,proto3" json:"bestOfferVolume,omitempty"`
	// Highest price on the order book for buy orders not including pegged orders
	BestStaticBidPrice uint64 `protobuf:"varint,6,opt,name=bestStaticBidPrice,proto3" json:"bestStaticBidPrice,omitempty"`
	// Total volume at the best static bid price excluding pegged orders
	BestStaticBidVolume uint64 `protobuf:"varint,7,opt,name=bestStaticBidVolume,proto3" json:"bestStaticBidVolume,omitempty"`
	// Lowest price on the order book for sell orders not including pegged orders
	BestStaticOfferPrice uint64 `protobuf:"varint,8,opt,name=bestStaticOfferPrice,proto3" json:"bestStaticOfferPrice,omitempty"`
	// Total volume at the best static offer price excluding pegged orders
	BestStaticOfferVolume uint64 `protobuf:"varint,9,opt,name=bestStaticOfferVolume,proto3" json:"bestStaticOfferVolume,omitempty"`
	// Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly
	//  // formatted price of `1.23456` assuming market configured to 5 decimal places.
	MidPrice uint64 `protobuf:"varint,10,opt,name=midPrice,proto3" json:"midPrice,omitempty"`
	// Arithmetic average of the best static bid price and best static offer price
	StaticMidPrice uint64 `protobuf:"varint,11,opt,name=staticMidPrice,proto3" json:"staticMidPrice,omitempty"`
	// Market identifier for the data.
	Market string `protobuf:"bytes,12,opt,name=market,proto3" json:"market,omitempty"`
	// Timestamp at which this mark price was relevant, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp int64 `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The sum of the size of all positions greater than 0 on the market.
	OpenInterest uint64 `protobuf:"varint,14,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	// Time in seconds until the end of the auction (0 if currently not in auction period).
	AuctionEnd int64 `protobuf:"varint,15,opt,name=auctionEnd,proto3" json:"auctionEnd,omitempty"`
	// Time until next auction (used in FBA's) - currently always 0.
	AuctionStart int64 `protobuf:"varint,16,opt,name=auctionStart,proto3" json:"auctionStart,omitempty"`
	// indicative price (zero if not in auction)
	IndicativePrice uint64 `protobuf:"varint,17,opt,name=indicativePrice,proto3" json:"indicativePrice,omitempty"`
	// indicative volume (zero if not in auction)
	IndicativeVolume uint64 `protobuf:"varint,18,opt,name=indicativeVolume,proto3" json:"indicativeVolume,omitempty"`
	// the current state of the market
	MarketState MarketState `protobuf:"varint,19,opt,name=marketState,proto3,enum=vega.MarketState" json:"marketState,omitempty"`
	// if the market is in auction state, this field indicates what triggered the auction
	Trigger AuctionTrigger `protobuf:"varint,20,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
	// the targeted stake for the given market
	TargetStake string `protobuf:"bytes,21,opt,name=targetStake,proto3" json:"targetStake,omitempty"`
	// the available stake fo the given market
	SuppliedStake string `protobuf:"bytes,22,opt,name=suppliedStake,proto3" json:"suppliedStake,omitempty"`
	// a list of price monitoring bounds per current time
	PriceMonitoringBounds []*PriceMonitoringBounds `protobuf:"bytes,23,rep,name=priceMonitoringBounds,proto3" json:"priceMonitoringBounds,omitempty"`
}

func (x *MarketData) Reset() {
	*x = MarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketData) ProtoMessage() {}

func (x *MarketData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketData.ProtoReflect.Descriptor instead.
func (*MarketData) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{38}
}

func (x *MarketData) GetMarkPrice() uint64 {
	if x != nil {
		return x.MarkPrice
	}
	return 0
}

func (x *MarketData) GetBestBidPrice() uint64 {
	if x != nil {
		return x.BestBidPrice
	}
	return 0
}

func (x *MarketData) GetBestBidVolume() uint64 {
	if x != nil {
		return x.BestBidVolume
	}
	return 0
}

func (x *MarketData) GetBestOfferPrice() uint64 {
	if x != nil {
		return x.BestOfferPrice
	}
	return 0
}

func (x *MarketData) GetBestOfferVolume() uint64 {
	if x != nil {
		return x.BestOfferVolume
	}
	return 0
}

func (x *MarketData) GetBestStaticBidPrice() uint64 {
	if x != nil {
		return x.BestStaticBidPrice
	}
	return 0
}

func (x *MarketData) GetBestStaticBidVolume() uint64 {
	if x != nil {
		return x.BestStaticBidVolume
	}
	return 0
}

func (x *MarketData) GetBestStaticOfferPrice() uint64 {
	if x != nil {
		return x.BestStaticOfferPrice
	}
	return 0
}

func (x *MarketData) GetBestStaticOfferVolume() uint64 {
	if x != nil {
		return x.BestStaticOfferVolume
	}
	return 0
}

func (x *MarketData) GetMidPrice() uint64 {
	if x != nil {
		return x.MidPrice
	}
	return 0
}

func (x *MarketData) GetStaticMidPrice() uint64 {
	if x != nil {
		return x.StaticMidPrice
	}
	return 0
}

func (x *MarketData) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *MarketData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MarketData) GetOpenInterest() uint64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *MarketData) GetAuctionEnd() int64 {
	if x != nil {
		return x.AuctionEnd
	}
	return 0
}

func (x *MarketData) GetAuctionStart() int64 {
	if x != nil {
		return x.AuctionStart
	}
	return 0
}

func (x *MarketData) GetIndicativePrice() uint64 {
	if x != nil {
		return x.IndicativePrice
	}
	return 0
}

func (x *MarketData) GetIndicativeVolume() uint64 {
	if x != nil {
		return x.IndicativeVolume
	}
	return 0
}

func (x *MarketData) GetMarketState() MarketState {
	if x != nil {
		return x.MarketState
	}
	return MarketState_MARKET_STATE_UNSPECIFIED
}

func (x *MarketData) GetTrigger() AuctionTrigger {
	if x != nil {
		return x.Trigger
	}
	return AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

func (x *MarketData) GetTargetStake() string {
	if x != nil {
		return x.TargetStake
	}
	return ""
}

func (x *MarketData) GetSuppliedStake() string {
	if x != nil {
		return x.SuppliedStake
	}
	return ""
}

func (x *MarketData) GetPriceMonitoringBounds() []*PriceMonitoringBounds {
	if x != nil {
		return x.PriceMonitoringBounds
	}
	return nil
}

// Represents a list of valid (at the current time) price ranges per associated trigger
type PriceMonitoringBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum price that isn't currently breaching the specified price monitoring trigger
	MinValidPrice uint64 `protobuf:"varint,1,opt,name=minValidPrice,proto3" json:"minValidPrice,omitempty"`
	// Maximum price that isn't currently breaching the specified price monitoring trigger
	MaxValidPrice uint64 `protobuf:"varint,2,opt,name=maxValidPrice,proto3" json:"maxValidPrice,omitempty"`
	// Price monitoring trigger associated with the bounds
	Trigger *PriceMonitoringTrigger `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// Reference price used to calculate the valid price range
	ReferencePrice float64 `protobuf:"fixed64,4,opt,name=referencePrice,proto3" json:"referencePrice,omitempty"`
}

func (x *PriceMonitoringBounds) Reset() {
	*x = PriceMonitoringBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitoringBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitoringBounds) ProtoMessage() {}

func (x *PriceMonitoringBounds) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitoringBounds.ProtoReflect.Descriptor instead.
func (*PriceMonitoringBounds) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{39}
}

func (x *PriceMonitoringBounds) GetMinValidPrice() uint64 {
	if x != nil {
		return x.MinValidPrice
	}
	return 0
}

func (x *PriceMonitoringBounds) GetMaxValidPrice() uint64 {
	if x != nil {
		return x.MaxValidPrice
	}
	return 0
}

func (x *PriceMonitoringBounds) GetTrigger() *PriceMonitoringTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *PriceMonitoringBounds) GetReferencePrice() float64 {
	if x != nil {
		return x.ReferencePrice
	}
	return 0
}

// Represents Vega domain specific error information over gRPC/Protobuf.
type ErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Vega API domain specific unique error code, useful for client side mappings. e.g. 10004
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message that describes the error in more detail, should describe the problem encountered.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Any inner error information that could add more context, or be helpful for error reporting.
	Inner string `protobuf:"bytes,3,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ErrorDetail) Reset() {
	*x = ErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetail) ProtoMessage() {}

func (x *ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetail.ProtoReflect.Descriptor instead.
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{40}
}

func (x *ErrorDetail) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorDetail) GetInner() string {
	if x != nil {
		return x.Inner
	}
	return ""
}

// Represents a transaction to be sent to Vega.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the set of Vega commands (proto marshalled).
	InputData []byte `protobuf:"bytes,1,opt,name=inputData,proto3" json:"inputData,omitempty"`
	// A random number used to provided uniqueness and prevents
	// against replay attack.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The block height associated to the transaction.
	// This should always be current height of the node at the time of sending the Tx.
	// BlockHeight is used as a mechanism for replay protection.
	BlockHeight uint64 `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	// The sender of the transaction.
	// Any of the following would be valid:
	//
	// Types that are assignable to From:
	//	*Transaction_Address
	//	*Transaction_PubKey
	From isTransaction_From `protobuf_oneof:"from"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{41}
}

func (x *Transaction) GetInputData() []byte {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *Transaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (m *Transaction) GetFrom() isTransaction_From {
	if m != nil {
		return m.From
	}
	return nil
}

func (x *Transaction) GetAddress() []byte {
	if x, ok := x.GetFrom().(*Transaction_Address); ok {
		return x.Address
	}
	return nil
}

func (x *Transaction) GetPubKey() []byte {
	if x, ok := x.GetFrom().(*Transaction_PubKey); ok {
		return x.PubKey
	}
	return nil
}

type isTransaction_From interface {
	isTransaction_From()
}

type Transaction_Address struct {
	// The address of the sender.
	Address []byte `protobuf:"bytes,1001,opt,name=address,proto3,oneof"`
}

type Transaction_PubKey struct {
	// The public key of the sender.
	PubKey []byte `protobuf:"bytes,1002,opt,name=pubKey,proto3,oneof"`
}

func (*Transaction_Address) isTransaction_From() {}

func (*Transaction_PubKey) isTransaction_From() {}

// A signature to be authenticate a transaction
// and to be verified by the vega network
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bytes of the signature
	Sig []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	// The algorithm used to create the signature
	Algo string `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
	// The version of the signature used to create the signature
	Version uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{42}
}

func (x *Signature) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *Signature) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *Signature) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// A bundle of a transaction and it's signature.
type SignedBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction payload (proto marshalled).
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The signature authenticating the transaction.
	Sig *Signature `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *SignedBundle) Reset() {
	*x = SignedBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBundle) ProtoMessage() {}

func (x *SignedBundle) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBundle.ProtoReflect.Descriptor instead.
func (*SignedBundle) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{43}
}

func (x *SignedBundle) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SignedBundle) GetSig() *Signature {
	if x != nil {
		return x.Sig
	}
	return nil
}

// Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network.
type NodeSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the resource being signed.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// The signature.
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	// The kind of resource being signed.
	Kind NodeSignatureKind `protobuf:"varint,3,opt,name=kind,proto3,enum=vega.NodeSignatureKind" json:"kind,omitempty"`
}

func (x *NodeSignature) Reset() {
	*x = NodeSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSignature) ProtoMessage() {}

func (x *NodeSignature) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSignature.ProtoReflect.Descriptor instead.
func (*NodeSignature) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{44}
}

func (x *NodeSignature) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NodeSignature) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *NodeSignature) GetKind() NodeSignatureKind {
	if x != nil {
		return x.Kind
	}
	return NodeSignatureKind_NODE_SIGNATURE_KIND_UNSPECIFIED
}

type NetworkParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *NetworkParameter) Reset() {
	*x = NetworkParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParameter) ProtoMessage() {}

func (x *NetworkParameter) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParameter.ProtoReflect.Descriptor instead.
func (*NetworkParameter) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{45}
}

func (x *NetworkParameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NetworkParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LiquidityOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference  PeggedReference `protobuf:"varint,1,opt,name=reference,proto3,enum=vega.PeggedReference" json:"reference,omitempty"`
	Proportion uint32          `protobuf:"varint,2,opt,name=proportion,proto3" json:"proportion,omitempty"`
	Offset     int64           `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *LiquidityOrder) Reset() {
	*x = LiquidityOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityOrder) ProtoMessage() {}

func (x *LiquidityOrder) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityOrder.ProtoReflect.Descriptor instead.
func (*LiquidityOrder) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{46}
}

func (x *LiquidityOrder) GetReference() PeggedReference {
	if x != nil {
		return x.Reference
	}
	return PeggedReference_PEGGED_REFERENCE_UNSPECIFIED
}

func (x *LiquidityOrder) GetProportion() uint32 {
	if x != nil {
		return x.Proportion
	}
	return 0
}

func (x *LiquidityOrder) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type LiquidityProvisionSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier for the order. Required field.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Specified as a unitless number that represents the amount of settlement asset of the market.
	CommitmentAmount uint64 `protobuf:"varint,2,opt,name=commitmentAmount,proto3" json:"commitmentAmount,omitempty"`
	// nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers.
	Fee string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// a set of liquidity sell orders to meet the liquidity provision obligation, see MM orders spec.
	Sells []*LiquidityOrder `protobuf:"bytes,4,rep,name=Sells,proto3" json:"Sells,omitempty"`
	// a set of liquidity buy orders to meet the liquidity provision obligation, see MM orders spec.
	Buys []*LiquidityOrder `protobuf:"bytes,5,rep,name=Buys,proto3" json:"Buys,omitempty"`
}

func (x *LiquidityProvisionSubmission) Reset() {
	*x = LiquidityProvisionSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionSubmission) ProtoMessage() {}

func (x *LiquidityProvisionSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionSubmission.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionSubmission) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{47}
}

func (x *LiquidityProvisionSubmission) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *LiquidityProvisionSubmission) GetCommitmentAmount() uint64 {
	if x != nil {
		return x.CommitmentAmount
	}
	return 0
}

func (x *LiquidityProvisionSubmission) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *LiquidityProvisionSubmission) GetSells() []*LiquidityOrder {
	if x != nil {
		return x.Sells
	}
	return nil
}

func (x *LiquidityProvisionSubmission) GetBuys() []*LiquidityOrder {
	if x != nil {
		return x.Buys
	}
	return nil
}

// A pair of a liquidity order and the id of the generated order by the core
type LiquidityOrderReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the pegged order generated by the core to fullfill this liquidityOrder
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// The liquidity order from the original submission
	LiquidityOrder *LiquidityOrder `protobuf:"bytes,2,opt,name=liquidityOrder,proto3" json:"liquidityOrder,omitempty"`
}

func (x *LiquidityOrderReference) Reset() {
	*x = LiquidityOrderReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityOrderReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityOrderReference) ProtoMessage() {}

func (x *LiquidityOrderReference) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityOrderReference.ProtoReflect.Descriptor instead.
func (*LiquidityOrderReference) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{48}
}

func (x *LiquidityOrderReference) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *LiquidityOrderReference) GetLiquidityOrder() *LiquidityOrder {
	if x != nil {
		return x.LiquidityOrder
	}
	return nil
}

// An Liquidity provider commitment
type LiquidityProvision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LiquidityProvision identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Party who created the provision
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Timestamp for when the order was created at, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	CreatedAt int64 `protobuf:"varint,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// Timestamp for when the order was updated at, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	UpdatedAt int64 `protobuf:"varint,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// Market identifier for the order. Required field.
	MarketID string `protobuf:"bytes,5,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Specified as a unitless number that represents the amount of settlement asset of the market.
	CommitmentAmount uint64 `protobuf:"varint,6,opt,name=commitmentAmount,proto3" json:"commitmentAmount,omitempty"`
	// nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers.
	Fee string `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
	// a set of liquidity sell orders to meet the liquidity provision obligation, see MM orders spec.
	Sells []*LiquidityOrderReference `protobuf:"bytes,8,rep,name=sells,proto3" json:"sells,omitempty"`
	// a set of liquidity buy orders to meet the liquidity provision obligation, see MM orders spec.
	Buys []*LiquidityOrderReference `protobuf:"bytes,9,rep,name=buys,proto3" json:"buys,omitempty"`
	// version of this LiquidityProvision order
	Version string `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// the status of this liquidity provision
	Status LiquidityProvision_Status `protobuf:"varint,11,opt,name=status,proto3,enum=vega.LiquidityProvision_Status" json:"status,omitempty"`
}

func (x *LiquidityProvision) Reset() {
	*x = LiquidityProvision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvision) ProtoMessage() {}

func (x *LiquidityProvision) ProtoReflect() protoreflect.Message {
	mi := &file_vega_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvision.ProtoReflect.Descriptor instead.
func (*LiquidityProvision) Descriptor() ([]byte, []int) {
	return file_vega_proto_rawDescGZIP(), []int{49}
}

func (x *LiquidityProvision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LiquidityProvision) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

func (x *LiquidityProvision) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LiquidityProvision) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LiquidityProvision) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

func (x *LiquidityProvision) GetCommitmentAmount() uint64 {
	if x != nil {
		return x.CommitmentAmount
	}
	return 0
}

func (x *LiquidityProvision) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *LiquidityProvision) GetSells() []*LiquidityOrderReference {
	if x != nil {
		return x.Sells
	}
	return nil
}

func (x *LiquidityProvision) GetBuys() []*LiquidityOrderReference {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *LiquidityProvision) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LiquidityProvision) GetStatus() LiquidityProvision_Status {
	if x != nil {
		return x.Status
	}
	return LiquidityProvision_LIQUIDITY_PROVISION_STATUS_UNSPECIFIED
}

var File_vega_proto protoreflect.FileDescriptor

var file_vega_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x76, 0x65,
	0x67, 0x61, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a, 0x05, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x0a,
	0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x22, 0xcc, 0x03, 0x0a,
	0x0a, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52,
	0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x6e, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x6a,
	0x0a, 0x18, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x52,
	0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x18, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x52,
	0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x50, 0x0a, 0x10, 0x52, 0x69,
	0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x1d,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x0b, 0x50,
	0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xd8, 0x07, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x39, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50,
	0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x65, 0x67, 0x67,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x49, 0x46, 0x5f, 0x47, 0x54, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f,
	0x47, 0x54, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f, 0x49, 0x4f, 0x43,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f, 0x47, 0x46, 0x41, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x49, 0x46, 0x5f, 0x47, 0x46, 0x4e, 0x10, 0x06, 0x22, 0x4f, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x22, 0xc5, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x4b, 0x45, 0x44,
	0x10, 0x08, 0x22, 0x42, 0x0a, 0x1d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x22, 0xd2, 0x04, 0x0a, 0x05, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x08, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x46, 0x65, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x6f, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x41, 0x44, 0x10, 0x03, 0x22, 0x73, 0x0a,
	0x03, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x22, 0x2f, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x62, 0x0a, 0x0a,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x03,
	0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x03, 0x62, 0x75, 0x79,
	0x12, 0x24, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa1,
	0x01, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x03, 0x62, 0x75, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x64, 0x50, 0x4e, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x73, 0x65, 0x64, 0x50, 0x4e, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x64, 0x50, 0x4e, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x50, 0x4e, 0x4c, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xbd, 0x0a, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x78,
	0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x48,
	0x0a, 0x1f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x07, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7d, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x22, 0xe4, 0x03, 0x0a, 0x0a,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x2e, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78,
	0x74, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x03, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78,
	0x74, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x44, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x45, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x63, 0x32, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x72, 0x63, 0x32,
	0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x63, 0x32, 0x30, 0x42, 0x05, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x22, 0x3c, 0x0a, 0x10,
	0x45, 0x72, 0x63, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9d, 0x03, 0x0a, 0x0e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x21, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2d,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x65, 0x67, 0x67,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x65, 0x67,
	0x67, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x65, 0x67,
	0x67, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x67, 0x67, 0x65,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xae, 0x03, 0x0a, 0x0f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x88, 0x01,
	0x01, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x88, 0x01, 0x01, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x88,
	0x01, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b,
	0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x11, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x50, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a,
	0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x95,
	0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x74,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x74,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x54, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x76, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xca, 0x07, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x42,
	0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4d, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x4d, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0xc3,
	0x01, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x4b, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x6c, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0c, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x21, 0x0a, 0x03, 0x73, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0x5e, 0x0a,
	0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67,
	0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x3a, 0x0a,
	0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x0e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x53,
	0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x53, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x42, 0x75, 0x79, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x42, 0x75, 0x79,
	0x73, 0x22, 0x71, 0x0a, 0x17, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0xf0, 0x04, 0x0a, 0x12, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x75, 0x79, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd6,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x26, 0x4c, 0x49, 0x51,
	0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22,
	0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x27,
	0x0a, 0x23, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55,
	0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x02, 0x2a, 0x98, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x31, 0x4d, 0x10, 0x3c, 0x12, 0x11, 0x0a, 0x0c, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x35, 0x4d, 0x10, 0xac, 0x02, 0x12, 0x12,
	0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x31, 0x35, 0x4d, 0x10,
	0x84, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49,
	0x31, 0x48, 0x10, 0x90, 0x1c, 0x12, 0x12, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x49, 0x36, 0x48, 0x10, 0xe0, 0xa8, 0x01, 0x12, 0x12, 0x0a, 0x0c, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x31, 0x44, 0x10, 0x80, 0xa3, 0x05, 0x2a, 0xaf, 0x01,
	0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54,
	0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a,
	0xa3, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44,
	0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0x8b, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x47,
	0x47, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x4d, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x42,
	0x49, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x53,
	0x4b, 0x10, 0x03, 0x2a, 0xb7, 0x0f, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x26,
	0x0a, 0x22, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a,
	0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4d, 0x45,
	0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x27, 0x0a,
	0x23, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x46,
	0x45, 0x45, 0x53, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x16, 0x12, 0x25, 0x0a, 0x21,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x10, 0x17, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x47, 0x46, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18,
	0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x47, 0x46, 0x41, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4d, 0x45, 0x4e,
	0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x54, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x41, 0x54, 0x10, 0x1a, 0x12, 0x29, 0x0a, 0x25, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x59, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x41, 0x54, 0x10, 0x1b, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56,
	0x45, 0x5f, 0x47, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59,
	0x41, 0x54, 0x10, 0x1c, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x4b, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x1d,
	0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x47, 0x46, 0x41, 0x5f, 0x4f, 0x52, 0x5f, 0x47, 0x46, 0x4e, 0x10, 0x1e, 0x12, 0x2c, 0x0a, 0x28,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x47, 0x46,
	0x41, 0x5f, 0x4f, 0x52, 0x5f, 0x47, 0x46, 0x4e, 0x10, 0x1f, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4f, 0x43, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x20,
	0x12, 0x34, 0x0a, 0x30, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x4b, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x21, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x22, 0x12, 0x22, 0x0a, 0x1e, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f,
	0x42, 0x45, 0x5f, 0x47, 0x54, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x47, 0x54, 0x43, 0x10, 0x23, 0x12,
	0x27, 0x0a, 0x23, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x24, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x53,
	0x54, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x25, 0x12, 0x34, 0x0a,
	0x30, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45, 0x52,
	0x4f, 0x10, 0x26, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42,
	0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f,
	0x10, 0x27, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45,
	0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x28, 0x12, 0x34, 0x0a, 0x30, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10,
	0x29, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x5a, 0x45, 0x52,
	0x4f, 0x10, 0x2a, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x2b, 0x12,
	0x45, 0x0a, 0x41, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x47, 0x47,
	0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53,
	0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x2c, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x52, 0x45, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x2d, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x50,
	0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x2e, 0x2a, 0x82, 0x01,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0xcd, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45,
	0x53, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54,
	0x59, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x0a, 0x2a, 0xb5, 0x04, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x54, 0x4d, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x54, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x06, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x07, 0x12, 0x24,
	0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x53, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f,
	0x50, 0x41, 0x59, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x52,
	0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x10, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x11, 0x2a, 0x85, 0x01, 0x0a, 0x11, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c,
	0x10, 0x02, 0x42, 0x2c, 0x5a, 0x2a, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_proto_rawDescOnce sync.Once
	file_vega_proto_rawDescData = file_vega_proto_rawDesc
)

func file_vega_proto_rawDescGZIP() []byte {
	file_vega_proto_rawDescOnce.Do(func() {
		file_vega_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_proto_rawDescData)
	})
	return file_vega_proto_rawDescData
}

var file_vega_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_vega_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_vega_proto_goTypes = []interface{}{
	(Side)(0),                             // 0: vega.Side
	(Interval)(0),                         // 1: vega.Interval
	(MarketState)(0),                      // 2: vega.MarketState
	(AuctionTrigger)(0),                   // 3: vega.AuctionTrigger
	(PeggedReference)(0),                  // 4: vega.PeggedReference
	(OrderError)(0),                       // 5: vega.OrderError
	(ChainStatus)(0),                      // 6: vega.ChainStatus
	(AccountType)(0),                      // 7: vega.AccountType
	(TransferType)(0),                     // 8: vega.TransferType
	(NodeSignatureKind)(0),                // 9: vega.NodeSignatureKind
	(Order_TimeInForce)(0),                // 10: vega.Order.TimeInForce
	(Order_Type)(0),                       // 11: vega.Order.Type
	(Order_Status)(0),                     // 12: vega.Order.Status
	(Trade_Type)(0),                       // 13: vega.Trade.Type
	(Deposit_Status)(0),                   // 14: vega.Deposit.Status
	(Withdrawal_Status)(0),                // 15: vega.Withdrawal.Status
	(LiquidityProvision_Status)(0),        // 16: vega.LiquidityProvision.Status
	(*Price)(nil),                         // 17: vega.Price
	(*Timestamp)(nil),                     // 18: vega.Timestamp
	(*Party)(nil),                         // 19: vega.Party
	(*RiskFactor)(nil),                    // 20: vega.RiskFactor
	(*RiskResult)(nil),                    // 21: vega.RiskResult
	(*PeggedOrder)(nil),                   // 22: vega.PeggedOrder
	(*Order)(nil),                         // 23: vega.Order
	(*OrderCancellationConfirmation)(nil), // 24: vega.OrderCancellationConfirmation
	(*OrderConfirmation)(nil),             // 25: vega.OrderConfirmation
	(*AuctionIndicativeState)(nil),        // 26: vega.AuctionIndicativeState
	(*Trade)(nil),                         // 27: vega.Trade
	(*Fee)(nil),                           // 28: vega.Fee
	(*TradeSet)(nil),                      // 29: vega.TradeSet
	(*Candle)(nil),                        // 30: vega.Candle
	(*PriceLevel)(nil),                    // 31: vega.PriceLevel
	(*MarketDepth)(nil),                   // 32: vega.MarketDepth
	(*MarketDepthUpdate)(nil),             // 33: vega.MarketDepthUpdate
	(*Position)(nil),                      // 34: vega.Position
	(*PositionTrade)(nil),                 // 35: vega.PositionTrade
	(*Statistics)(nil),                    // 36: vega.Statistics
	(*Deposit)(nil),                       // 37: vega.Deposit
	(*Withdrawal)(nil),                    // 38: vega.Withdrawal
	(*WithdrawSubmission)(nil),            // 39: vega.WithdrawSubmission
	(*WithdrawExt)(nil),                   // 40: vega.WithdrawExt
	(*Erc20WithdrawExt)(nil),              // 41: vega.Erc20WithdrawExt
	(*OrderAmendment)(nil),                // 42: vega.OrderAmendment
	(*OrderSubmission)(nil),               // 43: vega.OrderSubmission
	(*OrderCancellation)(nil),             // 44: vega.OrderCancellation
	(*NodeRegistration)(nil),              // 45: vega.NodeRegistration
	(*NodeVote)(nil),                      // 46: vega.NodeVote
	(*Account)(nil),                       // 47: vega.Account
	(*FinancialAmount)(nil),               // 48: vega.FinancialAmount
	(*Transfer)(nil),                      // 49: vega.Transfer
	(*TransferRequest)(nil),               // 50: vega.TransferRequest
	(*LedgerEntry)(nil),                   // 51: vega.LedgerEntry
	(*TransferBalance)(nil),               // 52: vega.TransferBalance
	(*TransferResponse)(nil),              // 53: vega.TransferResponse
	(*MarginLevels)(nil),                  // 54: vega.MarginLevels
	(*MarketData)(nil),                    // 55: vega.MarketData
	(*PriceMonitoringBounds)(nil),         // 56: vega.PriceMonitoringBounds
	(*ErrorDetail)(nil),                   // 57: vega.ErrorDetail
	(*Transaction)(nil),                   // 58: vega.Transaction
	(*Signature)(nil),                     // 59: vega.Signature
	(*SignedBundle)(nil),                  // 60: vega.SignedBundle
	(*NodeSignature)(nil),                 // 61: vega.NodeSignature
	(*NetworkParameter)(nil),              // 62: vega.NetworkParameter
	(*LiquidityOrder)(nil),                // 63: vega.LiquidityOrder
	(*LiquidityProvisionSubmission)(nil),  // 64: vega.LiquidityProvisionSubmission
	(*LiquidityOrderReference)(nil),       // 65: vega.LiquidityOrderReference
	(*LiquidityProvision)(nil),            // 66: vega.LiquidityProvision
	nil,                                   // 67: vega.RiskResult.RiskFactorsEntry
	nil,                                   // 68: vega.RiskResult.PredictedNextRiskFactorsEntry
	(*wrappers.Int64Value)(nil),           // 69: google.protobuf.Int64Value
	(*PriceMonitoringTrigger)(nil),        // 70: vega.PriceMonitoringTrigger
}
var file_vega_proto_depIdxs = []int32{
	67, // 0: vega.RiskResult.riskFactors:type_name -> vega.RiskResult.RiskFactorsEntry
	68, // 1: vega.RiskResult.predictedNextRiskFactors:type_name -> vega.RiskResult.PredictedNextRiskFactorsEntry
	4,  // 2: vega.PeggedOrder.reference:type_name -> vega.PeggedReference
	0,  // 3: vega.Order.side:type_name -> vega.Side
	10, // 4: vega.Order.timeInForce:type_name -> vega.Order.TimeInForce
	11, // 5: vega.Order.type:type_name -> vega.Order.Type
	12, // 6: vega.Order.status:type_name -> vega.Order.Status
	5,  // 7: vega.Order.reason:type_name -> vega.OrderError
	22, // 8: vega.Order.peggedOrder:type_name -> vega.PeggedOrder
	23, // 9: vega.OrderCancellationConfirmation.order:type_name -> vega.Order
	23, // 10: vega.OrderConfirmation.order:type_name -> vega.Order
	27, // 11: vega.OrderConfirmation.trades:type_name -> vega.Trade
	23, // 12: vega.OrderConfirmation.passiveOrdersAffected:type_name -> vega.Order
	0,  // 13: vega.Trade.aggressor:type_name -> vega.Side
	13, // 14: vega.Trade.type:type_name -> vega.Trade.Type
	28, // 15: vega.Trade.buyerFee:type_name -> vega.Fee
	28, // 16: vega.Trade.sellerFee:type_name -> vega.Fee
	27, // 17: vega.TradeSet.trades:type_name -> vega.Trade
	1,  // 18: vega.Candle.interval:type_name -> vega.Interval
	31, // 19: vega.MarketDepth.buy:type_name -> vega.PriceLevel
	31, // 20: vega.MarketDepth.sell:type_name -> vega.PriceLevel
	31, // 21: vega.MarketDepthUpdate.buy:type_name -> vega.PriceLevel
	31, // 22: vega.MarketDepthUpdate.sell:type_name -> vega.PriceLevel
	6,  // 23: vega.Statistics.status:type_name -> vega.ChainStatus
	14, // 24: vega.Deposit.status:type_name -> vega.Deposit.Status
	15, // 25: vega.Withdrawal.status:type_name -> vega.Withdrawal.Status
	40, // 26: vega.Withdrawal.ext:type_name -> vega.WithdrawExt
	40, // 27: vega.WithdrawSubmission.ext:type_name -> vega.WithdrawExt
	41, // 28: vega.WithdrawExt.erc20:type_name -> vega.Erc20WithdrawExt
	17, // 29: vega.OrderAmendment.price:type_name -> vega.Price
	18, // 30: vega.OrderAmendment.expiresAt:type_name -> vega.Timestamp
	10, // 31: vega.OrderAmendment.timeInForce:type_name -> vega.Order.TimeInForce
	69, // 32: vega.OrderAmendment.peggedOffset:type_name -> google.protobuf.Int64Value
	4,  // 33: vega.OrderAmendment.peggedReference:type_name -> vega.PeggedReference
	0,  // 34: vega.OrderSubmission.side:type_name -> vega.Side
	10, // 35: vega.OrderSubmission.timeInForce:type_name -> vega.Order.TimeInForce
	11, // 36: vega.OrderSubmission.type:type_name -> vega.Order.Type
	22, // 37: vega.OrderSubmission.peggedOrder:type_name -> vega.PeggedOrder
	7,  // 38: vega.Account.type:type_name -> vega.AccountType
	48, // 39: vega.Transfer.amount:type_name -> vega.FinancialAmount
	8,  // 40: vega.Transfer.type:type_name -> vega.TransferType
	47, // 41: vega.TransferRequest.fromAccount:type_name -> vega.Account
	47, // 42: vega.TransferRequest.toAccount:type_name -> vega.Account
	47, // 43: vega.TransferBalance.account:type_name -> vega.Account
	51, // 44: vega.TransferResponse.transfers:type_name -> vega.LedgerEntry
	52, // 45: vega.TransferResponse.balances:type_name -> vega.TransferBalance
	2,  // 46: vega.MarketData.marketState:type_name -> vega.MarketState
	3,  // 47: vega.MarketData.trigger:type_name -> vega.AuctionTrigger
	56, // 48: vega.MarketData.priceMonitoringBounds:type_name -> vega.PriceMonitoringBounds
	70, // 49: vega.PriceMonitoringBounds.trigger:type_name -> vega.PriceMonitoringTrigger
	59, // 50: vega.SignedBundle.sig:type_name -> vega.Signature
	9,  // 51: vega.NodeSignature.kind:type_name -> vega.NodeSignatureKind
	4,  // 52: vega.LiquidityOrder.reference:type_name -> vega.PeggedReference
	63, // 53: vega.LiquidityProvisionSubmission.Sells:type_name -> vega.LiquidityOrder
	63, // 54: vega.LiquidityProvisionSubmission.Buys:type_name -> vega.LiquidityOrder
	63, // 55: vega.LiquidityOrderReference.liquidityOrder:type_name -> vega.LiquidityOrder
	65, // 56: vega.LiquidityProvision.sells:type_name -> vega.LiquidityOrderReference
	65, // 57: vega.LiquidityProvision.buys:type_name -> vega.LiquidityOrderReference
	16, // 58: vega.LiquidityProvision.status:type_name -> vega.LiquidityProvision.Status
	20, // 59: vega.RiskResult.RiskFactorsEntry.value:type_name -> vega.RiskFactor
	20, // 60: vega.RiskResult.PredictedNextRiskFactorsEntry.value:type_name -> vega.RiskFactor
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_vega_proto_init() }
func file_vega_proto_init() {
	if File_vega_proto != nil {
		return
	}
	file_markets_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vega_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeggedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancellationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionIndicativeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Candle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erc20WithdrawExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAmendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancellation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitoringBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityOrderReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*WithdrawExt_Erc20)(nil),
	}
	file_vega_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*Transaction_Address)(nil),
		(*Transaction_PubKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_proto_goTypes,
		DependencyIndexes: file_vega_proto_depIdxs,
		EnumInfos:         file_vega_proto_enumTypes,
		MessageInfos:      file_vega_proto_msgTypes,
	}.Build()
	File_vega_proto = out.File
	file_vega_proto_rawDesc = nil
	file_vega_proto_goTypes = nil
	file_vega_proto_depIdxs = nil
}
