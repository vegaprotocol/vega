// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/oracles (interfaces: EthCallSpecSource)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	oracles "code.vegaprotocol.io/vega/core/oracles"
	gomock "github.com/golang/mock/gomock"
)

// MockEthCallSpecSource is a mock of EthCallSpecSource interface.
type MockEthCallSpecSource struct {
	ctrl     *gomock.Controller
	recorder *MockEthCallSpecSourceMockRecorder
}

// MockEthCallSpecSourceMockRecorder is the mock recorder for MockEthCallSpecSource.
type MockEthCallSpecSourceMockRecorder struct {
	mock *MockEthCallSpecSource
}

// NewMockEthCallSpecSource creates a new mock instance.
func NewMockEthCallSpecSource(ctrl *gomock.Controller) *MockEthCallSpecSource {
	mock := &MockEthCallSpecSource{ctrl: ctrl}
	mock.recorder = &MockEthCallSpecSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthCallSpecSource) EXPECT() *MockEthCallSpecSourceMockRecorder {
	return m.recorder
}

// GetSpec mocks base method.
func (m *MockEthCallSpecSource) GetSpec(arg0 string) (oracles.EthCallSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpec", arg0)
	ret0, _ := ret[0].(oracles.EthCallSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpec indicates an expected call of GetSpec.
func (mr *MockEthCallSpecSourceMockRecorder) GetSpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpec", reflect.TypeOf((*MockEthCallSpecSource)(nil).GetSpec), arg0)
}
