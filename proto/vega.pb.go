// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/vega.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A side relates to the direction of an order, to Buy, or Sell.
type Side int32

const (
	// Default value, always invalid.
	Side_SIDE_UNSPECIFIED Side = 0
	// Buy order.
	Side_SIDE_BUY Side = 1
	// Sell order.
	Side_SIDE_SELL Side = 2
)

var Side_name = map[int32]string{
	0: "SIDE_UNSPECIFIED",
	1: "SIDE_BUY",
	2: "SIDE_SELL",
}

var Side_value = map[string]int32{
	"SIDE_UNSPECIFIED": 0,
	"SIDE_BUY":         1,
	"SIDE_SELL":        2,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}

func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{0}
}

// Represents a set of time intervals that are used when querying for candle-stick data.
type Interval int32

const (
	// Default value, always invalid.
	Interval_INTERVAL_UNSPECIFIED Interval = 0
	// 1 minute.
	Interval_INTERVAL_I1M Interval = 60
	// 5 minutes.
	Interval_INTERVAL_I5M Interval = 300
	// 15 minutes.
	Interval_INTERVAL_I15M Interval = 900
	// 1 hour.
	Interval_INTERVAL_I1H Interval = 3600
	// 6 hours.
	Interval_INTERVAL_I6H Interval = 21600
	// 1 day.
	Interval_INTERVAL_I1D Interval = 86400
)

var Interval_name = map[int32]string{
	0:     "INTERVAL_UNSPECIFIED",
	60:    "INTERVAL_I1M",
	300:   "INTERVAL_I5M",
	900:   "INTERVAL_I15M",
	3600:  "INTERVAL_I1H",
	21600: "INTERVAL_I6H",
	86400: "INTERVAL_I1D",
}

var Interval_value = map[string]int32{
	"INTERVAL_UNSPECIFIED": 0,
	"INTERVAL_I1M":         60,
	"INTERVAL_I5M":         300,
	"INTERVAL_I15M":        900,
	"INTERVAL_I1H":         3600,
	"INTERVAL_I6H":         21600,
	"INTERVAL_I1D":         86400,
}

func (x Interval) String() string {
	return proto.EnumName(Interval_name, int32(x))
}

func (Interval) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{1}
}

// What mode is the market currently running, also known as market state.
type MarketState int32

const (
	// Default value, this is invalid
	MarketState_MARKET_STATE_UNSPECIFIED MarketState = 0
	// Normal trading
	MarketState_MARKET_STATE_CONTINUOUS MarketState = 1
	// Auction trading
	MarketState_MARKET_STATE_AUCTION MarketState = 2
)

var MarketState_name = map[int32]string{
	0: "MARKET_STATE_UNSPECIFIED",
	1: "MARKET_STATE_CONTINUOUS",
	2: "MARKET_STATE_AUCTION",
}

var MarketState_value = map[string]int32{
	"MARKET_STATE_UNSPECIFIED": 0,
	"MARKET_STATE_CONTINUOUS":  1,
	"MARKET_STATE_AUCTION":     2,
}

func (x MarketState) String() string {
	return proto.EnumName(MarketState_name, int32(x))
}

func (MarketState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{2}
}

// OrderError codes are returned in the `[Order](#vega.Order).reason` field.
// If there is an issue with an order during it's life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`.
type OrderError int32

const (
	// Default value, no error reported.
	OrderError_ORDER_ERROR_NONE OrderError = 0
	// Order was submitted for a market that does not exist.
	OrderError_ORDER_ERROR_INVALID_MARKET_ID OrderError = 1
	// Order was submitted with an invalid identifier.
	OrderError_ORDER_ERROR_INVALID_ORDER_ID OrderError = 2
	// Order was amended with a sequence number that was not previous version + 1.
	OrderError_ORDER_ERROR_OUT_OF_SEQUENCE OrderError = 3
	// Order was amended with an invalid remaining size (e.g. remaining greater than total size).
	OrderError_ORDER_ERROR_INVALID_REMAINING_SIZE OrderError = 4
	// Node was unable to get Vega (blockchain) time.
	OrderError_ORDER_ERROR_TIME_FAILURE OrderError = 5
	// Failed to remove an order from the book.
	OrderError_ORDER_ERROR_REMOVAL_FAILURE OrderError = 6
	// An order with `TimeInForce.TIF_GTT` was submitted or amended
	// with an expiration that was badly formatted or otherwise invalid.
	OrderError_ORDER_ERROR_INVALID_EXPIRATION_DATETIME OrderError = 7
	// Order was submitted or amended with an invalid reference field.
	OrderError_ORDER_ERROR_INVALID_ORDER_REFERENCE OrderError = 8
	// Order amend was submitted for an order field that cannot not be amended (e.g. order identifier).
	OrderError_ORDER_ERROR_EDIT_NOT_ALLOWED OrderError = 9
	// Amend failure because amend details do not match original order.
	OrderError_ORDER_ERROR_AMEND_FAILURE OrderError = 10
	// Order not found in an order book or store.
	OrderError_ORDER_ERROR_NOT_FOUND OrderError = 11
	// Order was submitted with an invalid or missing party identifier.
	OrderError_ORDER_ERROR_INVALID_PARTY_ID OrderError = 12
	// Order was submitted for a market that has closed.
	OrderError_ORDER_ERROR_MARKET_CLOSED OrderError = 13
	// Order was submitted, but the party did not have enough collateral to cover the order.
	OrderError_ORDER_ERROR_MARGIN_CHECK_FAILED OrderError = 14
	// Order was submitted, but the party did not have an account for this asset.
	OrderError_ORDER_ERROR_MISSING_GENERAL_ACCOUNT OrderError = 15
	// Unspecified internal error.
	OrderError_ORDER_ERROR_INTERNAL_ERROR OrderError = 16
	// Order was submitted with an invalid or missing size (e.g. 0).
	OrderError_ORDER_ERROR_INVALID_SIZE OrderError = 17
	// Order was submitted with an invalid persistence for its type.
	OrderError_ORDER_ERROR_INVALID_PERSISTENCE OrderError = 18
	// Order was submitted with an invalid type field.
	OrderError_ORDER_ERROR_INVALID_TYPE OrderError = 19
	// Order was stopped as it would have traded with another order submitted from the same party.
	OrderError_ORDER_ERROR_SELF_TRADING OrderError = 20
	// Order was submitted, but the party did not have enough collateral to cover the fees for the order.
	OrderError_ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES OrderError = 21
	// Order was submitted with an incorrect or invalid market type.
	OrderError_ORDER_ERROR_INCORRECT_MARKET_TYPE OrderError = 22
	// Order was submitted with invalid time in force
	OrderError_ORDER_ERROR_INVALID_TIME_IN_FORCE OrderError = 23
	// A GFN order has got to the market when it is in auction mode
	OrderError_ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION OrderError = 24
	// A GFA order has got to the market when it is in continuous trading mode
	OrderError_ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING OrderError = 25
	// Attempt to amend order to GTT without ExpiryAt
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT OrderError = 26
	// Attempt to amend ExpiryAt to a value before CreatedAt
	OrderError_ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT OrderError = 27
	// Attempt to amend to GTC without an ExpiryAt value
	OrderError_ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT OrderError = 28
	// Amending to FOK or IOC is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC OrderError = 29
	// Amending to GFA or GFN is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN OrderError = 30
	// Amending from GFA or GFN is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN OrderError = 31
)

var OrderError_name = map[int32]string{
	0:  "ORDER_ERROR_NONE",
	1:  "ORDER_ERROR_INVALID_MARKET_ID",
	2:  "ORDER_ERROR_INVALID_ORDER_ID",
	3:  "ORDER_ERROR_OUT_OF_SEQUENCE",
	4:  "ORDER_ERROR_INVALID_REMAINING_SIZE",
	5:  "ORDER_ERROR_TIME_FAILURE",
	6:  "ORDER_ERROR_REMOVAL_FAILURE",
	7:  "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
	8:  "ORDER_ERROR_INVALID_ORDER_REFERENCE",
	9:  "ORDER_ERROR_EDIT_NOT_ALLOWED",
	10: "ORDER_ERROR_AMEND_FAILURE",
	11: "ORDER_ERROR_NOT_FOUND",
	12: "ORDER_ERROR_INVALID_PARTY_ID",
	13: "ORDER_ERROR_MARKET_CLOSED",
	14: "ORDER_ERROR_MARGIN_CHECK_FAILED",
	15: "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
	16: "ORDER_ERROR_INTERNAL_ERROR",
	17: "ORDER_ERROR_INVALID_SIZE",
	18: "ORDER_ERROR_INVALID_PERSISTENCE",
	19: "ORDER_ERROR_INVALID_TYPE",
	20: "ORDER_ERROR_SELF_TRADING",
	21: "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
	22: "ORDER_ERROR_INCORRECT_MARKET_TYPE",
	23: "ORDER_ERROR_INVALID_TIME_IN_FORCE",
	24: "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
	25: "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
	26: "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
	27: "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
	28: "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
	29: "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
	30: "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
	31: "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
}

var OrderError_value = map[string]int32{
	"ORDER_ERROR_NONE":                                 0,
	"ORDER_ERROR_INVALID_MARKET_ID":                    1,
	"ORDER_ERROR_INVALID_ORDER_ID":                     2,
	"ORDER_ERROR_OUT_OF_SEQUENCE":                      3,
	"ORDER_ERROR_INVALID_REMAINING_SIZE":               4,
	"ORDER_ERROR_TIME_FAILURE":                         5,
	"ORDER_ERROR_REMOVAL_FAILURE":                      6,
	"ORDER_ERROR_INVALID_EXPIRATION_DATETIME":          7,
	"ORDER_ERROR_INVALID_ORDER_REFERENCE":              8,
	"ORDER_ERROR_EDIT_NOT_ALLOWED":                     9,
	"ORDER_ERROR_AMEND_FAILURE":                        10,
	"ORDER_ERROR_NOT_FOUND":                            11,
	"ORDER_ERROR_INVALID_PARTY_ID":                     12,
	"ORDER_ERROR_MARKET_CLOSED":                        13,
	"ORDER_ERROR_MARGIN_CHECK_FAILED":                  14,
	"ORDER_ERROR_MISSING_GENERAL_ACCOUNT":              15,
	"ORDER_ERROR_INTERNAL_ERROR":                       16,
	"ORDER_ERROR_INVALID_SIZE":                         17,
	"ORDER_ERROR_INVALID_PERSISTENCE":                  18,
	"ORDER_ERROR_INVALID_TYPE":                         19,
	"ORDER_ERROR_SELF_TRADING":                         20,
	"ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES":       21,
	"ORDER_ERROR_INCORRECT_MARKET_TYPE":                22,
	"ORDER_ERROR_INVALID_TIME_IN_FORCE":                23,
	"ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION":          24,
	"ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING":  25,
	"ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT": 26,
	"ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT":            27,
	"ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT":         28,
	"ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC":           29,
	"ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN":           30,
	"ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN":         31,
}

func (x OrderError) String() string {
	return proto.EnumName(OrderError_name, int32(x))
}

func (OrderError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{3}
}

// The Vega blockchain status as reported by the node the caller is connected to.
type ChainStatus int32

const (
	// Default value, always invalid.
	ChainStatus_CHAIN_STATUS_UNSPECIFIED ChainStatus = 0
	// Blockchain is disconnected.
	ChainStatus_CHAIN_STATUS_DISCONNECTED ChainStatus = 1
	// Blockchain is replaying historic transactions.
	ChainStatus_CHAIN_STATUS_REPLAYING ChainStatus = 2
	// Blockchain is connected and receiving transactions.
	ChainStatus_CHAIN_STATUS_CONNECTED ChainStatus = 3
)

var ChainStatus_name = map[int32]string{
	0: "CHAIN_STATUS_UNSPECIFIED",
	1: "CHAIN_STATUS_DISCONNECTED",
	2: "CHAIN_STATUS_REPLAYING",
	3: "CHAIN_STATUS_CONNECTED",
}

var ChainStatus_value = map[string]int32{
	"CHAIN_STATUS_UNSPECIFIED":  0,
	"CHAIN_STATUS_DISCONNECTED": 1,
	"CHAIN_STATUS_REPLAYING":    2,
	"CHAIN_STATUS_CONNECTED":    3,
}

func (x ChainStatus) String() string {
	return proto.EnumName(ChainStatus_name, int32(x))
}

func (ChainStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{4}
}

// Various collateral/account types as used by Vega.
type AccountType int32

const (
	// Default value.
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0
	// Insurance pool accounts contain insurance pool funds for a market.
	AccountType_ACCOUNT_TYPE_INSURANCE AccountType = 1
	// Settlement accounts exist only during settlement or mark-to-market.
	AccountType_ACCOUNT_TYPE_SETTLEMENT AccountType = 2
	// Margin accounts contain margin funds for a party and each party will
	// have multiple margin accounts, one for each market they have traded in.
	//
	// Margin account funds will alter as margin requirements on positions change.
	AccountType_ACCOUNT_TYPE_MARGIN AccountType = 3
	// General accounts contains general funds for a party. A party will
	// have multiple general accounts, one for each asset they want
	// to trade with.
	//
	// General accounts are where funds are initially deposited or withdrawn from.
	// It is also the account where funds are taken to fulfil fees and initial margin requirements.
	AccountType_ACCOUNT_TYPE_GENERAL AccountType = 4
	// Infrastructure accounts contain fees earned by providing infrastructure on Vega.
	AccountType_ACCOUNT_TYPE_FEES_INFRASTRUCTURE AccountType = 5
	// Liquidity accounts contain fees earned by providing liquidity on Vega markets.
	AccountType_ACCOUNT_TYPE_FEES_LIQUIDITY AccountType = 6
	// This account is created to hold fees earned by placing orders that sit on the book
	// and are then matched with an incoming order to create a trade.
	// These fees reward traders who provide the best priced liquidity that actually allows trading to take place.
	AccountType_ACCOUNT_TYPE_FEES_MAKER AccountType = 7
	// This account is created to lock funds to be withdrawn by parties
	AccountType_ACCOUNT_TYPE_LOCK_WITHDRAW AccountType = 8
)

var AccountType_name = map[int32]string{
	0: "ACCOUNT_TYPE_UNSPECIFIED",
	1: "ACCOUNT_TYPE_INSURANCE",
	2: "ACCOUNT_TYPE_SETTLEMENT",
	3: "ACCOUNT_TYPE_MARGIN",
	4: "ACCOUNT_TYPE_GENERAL",
	5: "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
	6: "ACCOUNT_TYPE_FEES_LIQUIDITY",
	7: "ACCOUNT_TYPE_FEES_MAKER",
	8: "ACCOUNT_TYPE_LOCK_WITHDRAW",
}

var AccountType_value = map[string]int32{
	"ACCOUNT_TYPE_UNSPECIFIED":         0,
	"ACCOUNT_TYPE_INSURANCE":           1,
	"ACCOUNT_TYPE_SETTLEMENT":          2,
	"ACCOUNT_TYPE_MARGIN":              3,
	"ACCOUNT_TYPE_GENERAL":             4,
	"ACCOUNT_TYPE_FEES_INFRASTRUCTURE": 5,
	"ACCOUNT_TYPE_FEES_LIQUIDITY":      6,
	"ACCOUNT_TYPE_FEES_MAKER":          7,
	"ACCOUNT_TYPE_LOCK_WITHDRAW":       8,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{5}
}

// Transfers can occur between parties on Vega, these are the types that indicate why a transfer took place.
type TransferType int32

const (
	// Default value, always invalid.
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	// Loss.
	TransferType_TRANSFER_TYPE_LOSS TransferType = 1
	// Win.
	TransferType_TRANSFER_TYPE_WIN TransferType = 2
	// Close.
	TransferType_TRANSFER_TYPE_CLOSE TransferType = 3
	// Mark to market loss.
	TransferType_TRANSFER_TYPE_MTM_LOSS TransferType = 4
	// Mark to market win.
	TransferType_TRANSFER_TYPE_MTM_WIN TransferType = 5
	// Margin too low.
	TransferType_TRANSFER_TYPE_MARGIN_LOW TransferType = 6
	// Margin too high.
	TransferType_TRANSFER_TYPE_MARGIN_HIGH TransferType = 7
	// Margin was confiscated.
	TransferType_TRANSFER_TYPE_MARGIN_CONFISCATED TransferType = 8
	// Pay maker fee.
	TransferType_TRANSFER_TYPE_MAKER_FEE_PAY TransferType = 9
	// Receive maker fee.
	TransferType_TRANSFER_TYPE_MAKER_FEE_RECEIVE TransferType = 10
	// Pay infrastructure fee.
	TransferType_TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY TransferType = 11
	// Pay liquidity fee.
	TransferType_TRANSFER_TYPE_LIQUIDITY_FEE_PAY TransferType = 12
)

var TransferType_name = map[int32]string{
	0:  "TRANSFER_TYPE_UNSPECIFIED",
	1:  "TRANSFER_TYPE_LOSS",
	2:  "TRANSFER_TYPE_WIN",
	3:  "TRANSFER_TYPE_CLOSE",
	4:  "TRANSFER_TYPE_MTM_LOSS",
	5:  "TRANSFER_TYPE_MTM_WIN",
	6:  "TRANSFER_TYPE_MARGIN_LOW",
	7:  "TRANSFER_TYPE_MARGIN_HIGH",
	8:  "TRANSFER_TYPE_MARGIN_CONFISCATED",
	9:  "TRANSFER_TYPE_MAKER_FEE_PAY",
	10: "TRANSFER_TYPE_MAKER_FEE_RECEIVE",
	11: "TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY",
	12: "TRANSFER_TYPE_LIQUIDITY_FEE_PAY",
}

var TransferType_value = map[string]int32{
	"TRANSFER_TYPE_UNSPECIFIED":            0,
	"TRANSFER_TYPE_LOSS":                   1,
	"TRANSFER_TYPE_WIN":                    2,
	"TRANSFER_TYPE_CLOSE":                  3,
	"TRANSFER_TYPE_MTM_LOSS":               4,
	"TRANSFER_TYPE_MTM_WIN":                5,
	"TRANSFER_TYPE_MARGIN_LOW":             6,
	"TRANSFER_TYPE_MARGIN_HIGH":            7,
	"TRANSFER_TYPE_MARGIN_CONFISCATED":     8,
	"TRANSFER_TYPE_MAKER_FEE_PAY":          9,
	"TRANSFER_TYPE_MAKER_FEE_RECEIVE":      10,
	"TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY": 11,
	"TRANSFER_TYPE_LIQUIDITY_FEE_PAY":      12,
}

func (x TransferType) String() string {
	return proto.EnumName(TransferType_name, int32(x))
}

func (TransferType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{6}
}

// The kind of the signature created by a node, for example, whitelisting a new asset, withdrawal etc.
type NodeSignatureKind int32

const (
	// represents a unspecified / missing value from the input
	NodeSignatureKind_NODE_SIGNATURE_KIND_UNSPECIFIED NodeSignatureKind = 0
	// represents a signature for a new asset whitelisting
	NodeSignatureKind_NODE_SIGNATURE_KIND_ASSET_NEW NodeSignatureKind = 1
	// represents a signature for a asset withdrawal
	NodeSignatureKind_NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL NodeSignatureKind = 2
)

var NodeSignatureKind_name = map[int32]string{
	0: "NODE_SIGNATURE_KIND_UNSPECIFIED",
	1: "NODE_SIGNATURE_KIND_ASSET_NEW",
	2: "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL",
}

var NodeSignatureKind_value = map[string]int32{
	"NODE_SIGNATURE_KIND_UNSPECIFIED":      0,
	"NODE_SIGNATURE_KIND_ASSET_NEW":        1,
	"NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL": 2,
}

func (x NodeSignatureKind) String() string {
	return proto.EnumName(NodeSignatureKind_name, int32(x))
}

func (NodeSignatureKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{7}
}

// Time in Force for an order.
// See [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.
type Order_TimeInForce int32

const (
	// Default value for TimeInForce, can be valid for an amend.
	Order_TIF_UNSPECIFIED Order_TimeInForce = 0
	// Good until cancelled.
	Order_TIF_GTC Order_TimeInForce = 1
	// Good until specified time.
	Order_TIF_GTT Order_TimeInForce = 2
	// Immediate or cancel.
	Order_TIF_IOC Order_TimeInForce = 3
	// Fill or kill.
	Order_TIF_FOK Order_TimeInForce = 4
	// good for auction
	Order_TIF_GFA Order_TimeInForce = 5
	// good for normal
	Order_TIF_GFN Order_TimeInForce = 6
)

var Order_TimeInForce_name = map[int32]string{
	0: "TIF_UNSPECIFIED",
	1: "TIF_GTC",
	2: "TIF_GTT",
	3: "TIF_IOC",
	4: "TIF_FOK",
	5: "TIF_GFA",
	6: "TIF_GFN",
}

var Order_TimeInForce_value = map[string]int32{
	"TIF_UNSPECIFIED": 0,
	"TIF_GTC":         1,
	"TIF_GTT":         2,
	"TIF_IOC":         3,
	"TIF_FOK":         4,
	"TIF_GFA":         5,
	"TIF_GFN":         6,
}

func (x Order_TimeInForce) String() string {
	return proto.EnumName(Order_TimeInForce_name, int32(x))
}

func (Order_TimeInForce) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{5, 0}
}

// Type values for an order.
type Order_Type int32

const (
	// Default value, always invalid.
	Order_TYPE_UNSPECIFIED Order_Type = 0
	// Used for Limit orders.
	Order_TYPE_LIMIT Order_Type = 1
	// Used for Market orders.
	Order_TYPE_MARKET Order_Type = 2
	// Used for orders where the initiating party is the network (with distressed traders).
	Order_TYPE_NETWORK Order_Type = 3
)

var Order_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_LIMIT",
	2: "TYPE_MARKET",
	3: "TYPE_NETWORK",
}

var Order_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_LIMIT":       1,
	"TYPE_MARKET":      2,
	"TYPE_NETWORK":     3,
}

func (x Order_Type) String() string {
	return proto.EnumName(Order_Type_name, int32(x))
}

func (Order_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{5, 1}
}

// Status values for an order.
// See resulting status in [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.
type Order_Status int32

const (
	// Default value, always invalid.
	Order_STATUS_INVALID Order_Status = 0
	// Used for active unfilled or partially filled orders.
	Order_STATUS_ACTIVE Order_Status = 1
	// Used for expired GTT orders.
	Order_STATUS_EXPIRED Order_Status = 2
	// Used for orders cancelled by the party that created the order.
	Order_STATUS_CANCELLED Order_Status = 3
	// Used for unfilled FOK or IOC orders, and for orders that were stopped by the network.
	Order_STATUS_STOPPED Order_Status = 4
	// Used for closed fully filled orders.
	Order_STATUS_FILLED Order_Status = 5
	// Used for orders when not enough collateral was available to fill the margin requirements.
	Order_STATUS_REJECTED Order_Status = 6
	// Used for closed partially filled IOC orders.
	Order_STATUS_PARTIALLY_FILLED Order_Status = 7
)

var Order_Status_name = map[int32]string{
	0: "STATUS_INVALID",
	1: "STATUS_ACTIVE",
	2: "STATUS_EXPIRED",
	3: "STATUS_CANCELLED",
	4: "STATUS_STOPPED",
	5: "STATUS_FILLED",
	6: "STATUS_REJECTED",
	7: "STATUS_PARTIALLY_FILLED",
}

var Order_Status_value = map[string]int32{
	"STATUS_INVALID":          0,
	"STATUS_ACTIVE":           1,
	"STATUS_EXPIRED":          2,
	"STATUS_CANCELLED":        3,
	"STATUS_STOPPED":          4,
	"STATUS_FILLED":           5,
	"STATUS_REJECTED":         6,
	"STATUS_PARTIALLY_FILLED": 7,
}

func (x Order_Status) String() string {
	return proto.EnumName(Order_Status_name, int32(x))
}

func (Order_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{5, 2}
}

// Type values for a trade.
//
type Trade_Type int32

const (
	// Default value, always invalid.
	Trade_TYPE_UNSPECIFIED Trade_Type = 0
	// Normal trading between two parties.
	Trade_TYPE_DEFAULT Trade_Type = 1
	// Trading initiated by the network with another party on the book,
	// which helps to zero-out the positions of one or more distressed parties.
	Trade_TYPE_NETWORK_CLOSE_OUT_GOOD Trade_Type = 2
	// Trading initiated by the network with another party off the book,
	// with a distressed party in order to zero-out the position of the party.
	Trade_TYPE_NETWORK_CLOSE_OUT_BAD Trade_Type = 3
)

var Trade_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_DEFAULT",
	2: "TYPE_NETWORK_CLOSE_OUT_GOOD",
	3: "TYPE_NETWORK_CLOSE_OUT_BAD",
}

var Trade_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":            0,
	"TYPE_DEFAULT":                1,
	"TYPE_NETWORK_CLOSE_OUT_GOOD": 2,
	"TYPE_NETWORK_CLOSE_OUT_BAD":  3,
}

func (x Trade_Type) String() string {
	return proto.EnumName(Trade_Type_name, int32(x))
}

func (Trade_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{9, 0}
}

// The status of the deposit
type Deposit_Status int32

const (
	// Default value, always invalid.
	Deposit_DEPOSIT_STATUS_UNSPECIFIED Deposit_Status = 0
	// The deposit is being processed by the network
	Deposit_DEPOSIT_STATUS_OPEN Deposit_Status = 1
	// The deposit has been cancelled by the network
	Deposit_DEPOSIT_STATUS_CANCELLED Deposit_Status = 2
	// The deposit has been finalized and accounts have been updated
	Deposit_DEPOSIT_STATUS_FINALIZED Deposit_Status = 3
)

var Deposit_Status_name = map[int32]string{
	0: "DEPOSIT_STATUS_UNSPECIFIED",
	1: "DEPOSIT_STATUS_OPEN",
	2: "DEPOSIT_STATUS_CANCELLED",
	3: "DEPOSIT_STATUS_FINALIZED",
}

var Deposit_Status_value = map[string]int32{
	"DEPOSIT_STATUS_UNSPECIFIED": 0,
	"DEPOSIT_STATUS_OPEN":        1,
	"DEPOSIT_STATUS_CANCELLED":   2,
	"DEPOSIT_STATUS_FINALIZED":   3,
}

func (x Deposit_Status) String() string {
	return proto.EnumName(Deposit_Status_name, int32(x))
}

func (Deposit_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{19, 0}
}

// The status of the withdrawal
type Withdrawal_Status int32

const (
	// The default value
	Withdrawal_WITHDRAWAL_STATUS_UNSPECIFIED Withdrawal_Status = 0
	// The withdrawal is open and being processed by the network
	Withdrawal_WITHDRAWAL_STATUS_OPEN Withdrawal_Status = 1
	// The withdrawal have been cancelled
	Withdrawal_WITHDRAWAL_STATUS_CANCELLED Withdrawal_Status = 2
	// The withdrawal went through and is fully finalized (funds remove from the
	// vega network, and unlocked from the foreign chain bridge)
	Withdrawal_WITHDRAWAL_STATUS_FINALIZED Withdrawal_Status = 3
)

var Withdrawal_Status_name = map[int32]string{
	0: "WITHDRAWAL_STATUS_UNSPECIFIED",
	1: "WITHDRAWAL_STATUS_OPEN",
	2: "WITHDRAWAL_STATUS_CANCELLED",
	3: "WITHDRAWAL_STATUS_FINALIZED",
}

var Withdrawal_Status_value = map[string]int32{
	"WITHDRAWAL_STATUS_UNSPECIFIED": 0,
	"WITHDRAWAL_STATUS_OPEN":        1,
	"WITHDRAWAL_STATUS_CANCELLED":   2,
	"WITHDRAWAL_STATUS_FINALIZED":   3,
}

func (x Withdrawal_Status) String() string {
	return proto.EnumName(Withdrawal_Status_name, int32(x))
}

func (Withdrawal_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{20, 0}
}

type Price struct {
	// Price value, given as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Value                uint64   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Price) Reset()         { *m = Price{} }
func (m *Price) String() string { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()    {}
func (*Price) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{0}
}

func (m *Price) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Price.Unmarshal(m, b)
}
func (m *Price) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Price.Marshal(b, m, deterministic)
}
func (m *Price) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Price.Merge(m, src)
}
func (m *Price) XXX_Size() int {
	return xxx_messageInfo_Price.Size(m)
}
func (m *Price) XXX_DiscardUnknown() {
	xxx_messageInfo_Price.DiscardUnknown(m)
}

var xxx_messageInfo_Price proto.InternalMessageInfo

func (m *Price) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// A timestamp in nanoseconds since epoch.
// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
type Timestamp struct {
	// Timestamp value.
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{1}
}

func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timestamp.Unmarshal(m, b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
}
func (m *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(m, src)
}
func (m *Timestamp) XXX_Size() int {
	return xxx_messageInfo_Timestamp.Size(m)
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// A party represents an entity who wishes to trade on or query a Vega network.
type Party struct {
	// A unique identifier for the party, typically represented by a public key.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Party) Reset()         { *m = Party{} }
func (m *Party) String() string { return proto.CompactTextString(m) }
func (*Party) ProtoMessage()    {}
func (*Party) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{2}
}

func (m *Party) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Party.Unmarshal(m, b)
}
func (m *Party) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Party.Marshal(b, m, deterministic)
}
func (m *Party) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Party.Merge(m, src)
}
func (m *Party) XXX_Size() int {
	return xxx_messageInfo_Party.Size(m)
}
func (m *Party) XXX_DiscardUnknown() {
	xxx_messageInfo_Party.DiscardUnknown(m)
}

var xxx_messageInfo_Party proto.InternalMessageInfo

func (m *Party) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Risk factors are used to calculate the current risk associated with orders trading on a given market.
type RiskFactor struct {
	// Market ID that relates to this risk factor.
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Short Risk factor value.
	Short float64 `protobuf:"fixed64,2,opt,name=short,proto3" json:"short,omitempty"`
	// Long Risk factor value.
	Long                 float64  `protobuf:"fixed64,3,opt,name=long,proto3" json:"long,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RiskFactor) Reset()         { *m = RiskFactor{} }
func (m *RiskFactor) String() string { return proto.CompactTextString(m) }
func (*RiskFactor) ProtoMessage()    {}
func (*RiskFactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{3}
}

func (m *RiskFactor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RiskFactor.Unmarshal(m, b)
}
func (m *RiskFactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RiskFactor.Marshal(b, m, deterministic)
}
func (m *RiskFactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiskFactor.Merge(m, src)
}
func (m *RiskFactor) XXX_Size() int {
	return xxx_messageInfo_RiskFactor.Size(m)
}
func (m *RiskFactor) XXX_DiscardUnknown() {
	xxx_messageInfo_RiskFactor.DiscardUnknown(m)
}

var xxx_messageInfo_RiskFactor proto.InternalMessageInfo

func (m *RiskFactor) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *RiskFactor) GetShort() float64 {
	if m != nil {
		return m.Short
	}
	return 0
}

func (m *RiskFactor) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

// Risk results are calculated internally by Vega to attempt to maintain safe trading.
type RiskResult struct {
	// Timestamp for when risk factors were generated.
	UpdatedTimestamp int64 `protobuf:"varint,1,opt,name=updatedTimestamp,proto3" json:"updatedTimestamp,omitempty"`
	// Risk factors (long and short) for each margin-able asset/currency (usually == settlement assets) in the market.
	RiskFactors map[string]*RiskFactor `protobuf:"bytes,2,rep,name=riskFactors,proto3" json:"riskFactors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timestamp for when risk factors are expected to change (or empty if risk factors are continually updated).
	NextUpdateTimestamp int64 `protobuf:"varint,3,opt,name=nextUpdateTimestamp,proto3" json:"nextUpdateTimestamp,omitempty"`
	// Predicted risk factors at next change (what they would be if the change occurred now).
	PredictedNextRiskFactors map[string]*RiskFactor `protobuf:"bytes,4,rep,name=predictedNextRiskFactors,proto3" json:"predictedNextRiskFactors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral     struct{}               `json:"-"`
	XXX_unrecognized         []byte                 `json:"-"`
	XXX_sizecache            int32                  `json:"-"`
}

func (m *RiskResult) Reset()         { *m = RiskResult{} }
func (m *RiskResult) String() string { return proto.CompactTextString(m) }
func (*RiskResult) ProtoMessage()    {}
func (*RiskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{4}
}

func (m *RiskResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RiskResult.Unmarshal(m, b)
}
func (m *RiskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RiskResult.Marshal(b, m, deterministic)
}
func (m *RiskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RiskResult.Merge(m, src)
}
func (m *RiskResult) XXX_Size() int {
	return xxx_messageInfo_RiskResult.Size(m)
}
func (m *RiskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RiskResult.DiscardUnknown(m)
}

var xxx_messageInfo_RiskResult proto.InternalMessageInfo

func (m *RiskResult) GetUpdatedTimestamp() int64 {
	if m != nil {
		return m.UpdatedTimestamp
	}
	return 0
}

func (m *RiskResult) GetRiskFactors() map[string]*RiskFactor {
	if m != nil {
		return m.RiskFactors
	}
	return nil
}

func (m *RiskResult) GetNextUpdateTimestamp() int64 {
	if m != nil {
		return m.NextUpdateTimestamp
	}
	return 0
}

func (m *RiskResult) GetPredictedNextRiskFactors() map[string]*RiskFactor {
	if m != nil {
		return m.PredictedNextRiskFactors
	}
	return nil
}

// An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties.
type Order struct {
	// Unique identifier for the order (set by the system after consensus).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier for the order.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier for the order.
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Side for the order, e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side).
	Side Side `protobuf:"varint,4,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Price uint64 `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of contracts.
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED.
	Remaining uint64 `protobuf:"varint,7,opt,name=remaining,proto3" json:"remaining,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires.
	// See [`Order.TimeInForce`](#vega.Order.TimeInForce).
	TimeInForce Order_TimeInForce `protobuf:"varint,8,opt,name=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"timeInForce,omitempty"`
	// Type for the order. See [`Order.Type`](#vega.Order.Type).
	Type Order_Type `protobuf:"varint,9,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Timestamp for when the order was created at, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	CreatedAt int64 `protobuf:"varint,10,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// The current status for the order. See [`Order.Status`](#vega.Order.Status).
	// For detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field.
	Status Order_Status `protobuf:"varint,11,opt,name=status,proto3,enum=vega.Order_Status" json:"status,omitempty"`
	// Timestamp for when the order will expire, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`. Valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIF_GTT`.
	ExpiresAt int64 `protobuf:"varint,12,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	// Reference given for the order, this is typically used to retrieve an order submitted through consensus. Currently
	// set internally by the node to return a unique reference identifier for the order submission.
	Reference string `protobuf:"bytes,13,opt,name=reference,proto3" json:"reference,omitempty"`
	// If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified.
	// The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors.
	Reason OrderError `protobuf:"varint,14,opt,name=reason,proto3,enum=vega.OrderError" json:"reason,omitempty"`
	// Timestamp for when the Order was last updated, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	UpdatedAt int64 `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// The version for the order, initial value is version 1 and is incremented after each successful amend
	Version uint64 `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
	// Batch identifier for the order, used internally for orders submitted during auctions
	// to keep track of the auction batch this order falls under (required for fees calculation).
	BatchID              uint64   `protobuf:"varint,17,opt,name=batchID,proto3" json:"batchID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{5}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *Order) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *Order) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (m *Order) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Order) GetRemaining() uint64 {
	if m != nil {
		return m.Remaining
	}
	return 0
}

func (m *Order) GetTimeInForce() Order_TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return Order_TIF_UNSPECIFIED
}

func (m *Order) GetType() Order_Type {
	if m != nil {
		return m.Type
	}
	return Order_TYPE_UNSPECIFIED
}

func (m *Order) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Order) GetStatus() Order_Status {
	if m != nil {
		return m.Status
	}
	return Order_STATUS_INVALID
}

func (m *Order) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *Order) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *Order) GetReason() OrderError {
	if m != nil {
		return m.Reason
	}
	return OrderError_ORDER_ERROR_NONE
}

func (m *Order) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Order) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Order) GetBatchID() uint64 {
	if m != nil {
		return m.BatchID
	}
	return 0
}

// Used when cancelling an Order.
type OrderCancellationConfirmation struct {
	// The order that was cancelled.
	Order                *Order   `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderCancellationConfirmation) Reset()         { *m = OrderCancellationConfirmation{} }
func (m *OrderCancellationConfirmation) String() string { return proto.CompactTextString(m) }
func (*OrderCancellationConfirmation) ProtoMessage()    {}
func (*OrderCancellationConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{6}
}

func (m *OrderCancellationConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderCancellationConfirmation.Unmarshal(m, b)
}
func (m *OrderCancellationConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderCancellationConfirmation.Marshal(b, m, deterministic)
}
func (m *OrderCancellationConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderCancellationConfirmation.Merge(m, src)
}
func (m *OrderCancellationConfirmation) XXX_Size() int {
	return xxx_messageInfo_OrderCancellationConfirmation.Size(m)
}
func (m *OrderCancellationConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderCancellationConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_OrderCancellationConfirmation proto.InternalMessageInfo

func (m *OrderCancellationConfirmation) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

// Used when confirming an Order.
type OrderConfirmation struct {
	// The order that was confirmed.
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	// 0 or more trades that were emitted.
	Trades []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
	// 0 or more passive orders that were affected.
	PassiveOrdersAffected []*Order `protobuf:"bytes,3,rep,name=passiveOrdersAffected,proto3" json:"passiveOrdersAffected,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *OrderConfirmation) Reset()         { *m = OrderConfirmation{} }
func (m *OrderConfirmation) String() string { return proto.CompactTextString(m) }
func (*OrderConfirmation) ProtoMessage()    {}
func (*OrderConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{7}
}

func (m *OrderConfirmation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderConfirmation.Unmarshal(m, b)
}
func (m *OrderConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderConfirmation.Marshal(b, m, deterministic)
}
func (m *OrderConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderConfirmation.Merge(m, src)
}
func (m *OrderConfirmation) XXX_Size() int {
	return xxx_messageInfo_OrderConfirmation.Size(m)
}
func (m *OrderConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_OrderConfirmation proto.InternalMessageInfo

func (m *OrderConfirmation) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderConfirmation) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

func (m *OrderConfirmation) GetPassiveOrdersAffected() []*Order {
	if m != nil {
		return m.PassiveOrdersAffected
	}
	return nil
}

// AuctionIndicativeState is used to emit an event with the indicative price/volume per market during an auction.
type AuctionIndicativeState struct {
	// The market identifier for which this state relates to.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// The Indicative Uncrossing Price is the price at which all trades would occur if we uncrossed the auction now.
	IndicativePrice uint64 `protobuf:"varint,2,opt,name=indicativePrice,proto3" json:"indicativePrice,omitempty"`
	// The Indicative Uncrossing Volume is the volume available at the Indicative crossing price if we uncrossed the auction now.
	IndicativeVolume uint64 `protobuf:"varint,3,opt,name=indicativeVolume,proto3" json:"indicativeVolume,omitempty"`
	// The timestamp at which the auction started.
	AuctionStart int64 `protobuf:"varint,4,opt,name=auctionStart,proto3" json:"auctionStart,omitempty"`
	// The timestamp at which the auction is meant to stop.
	AuctionEnd           int64    `protobuf:"varint,5,opt,name=auctionEnd,proto3" json:"auctionEnd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuctionIndicativeState) Reset()         { *m = AuctionIndicativeState{} }
func (m *AuctionIndicativeState) String() string { return proto.CompactTextString(m) }
func (*AuctionIndicativeState) ProtoMessage()    {}
func (*AuctionIndicativeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{8}
}

func (m *AuctionIndicativeState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionIndicativeState.Unmarshal(m, b)
}
func (m *AuctionIndicativeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionIndicativeState.Marshal(b, m, deterministic)
}
func (m *AuctionIndicativeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionIndicativeState.Merge(m, src)
}
func (m *AuctionIndicativeState) XXX_Size() int {
	return xxx_messageInfo_AuctionIndicativeState.Size(m)
}
func (m *AuctionIndicativeState) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionIndicativeState.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionIndicativeState proto.InternalMessageInfo

func (m *AuctionIndicativeState) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *AuctionIndicativeState) GetIndicativePrice() uint64 {
	if m != nil {
		return m.IndicativePrice
	}
	return 0
}

func (m *AuctionIndicativeState) GetIndicativeVolume() uint64 {
	if m != nil {
		return m.IndicativeVolume
	}
	return 0
}

func (m *AuctionIndicativeState) GetAuctionStart() int64 {
	if m != nil {
		return m.AuctionStart
	}
	return 0
}

func (m *AuctionIndicativeState) GetAuctionEnd() int64 {
	if m != nil {
		return m.AuctionEnd
	}
	return 0
}

// A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega.
type Trade struct {
	// Unique identifier for the trade (generated by Vega).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier (the market that the trade occurred on).
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Price for the trade, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// Size filled for the trade.
	Size uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// Unique party identifier for the buyer.
	Buyer string `protobuf:"bytes,5,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// Unique party identifier for the seller.
	Seller string `protobuf:"bytes,6,opt,name=seller,proto3" json:"seller,omitempty"`
	// Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side).
	Aggressor Side `protobuf:"varint,7,opt,name=aggressor,proto3,enum=vega.Side" json:"aggressor,omitempty"`
	// Identifier of the order from the buy side.
	BuyOrder string `protobuf:"bytes,8,opt,name=buyOrder,proto3" json:"buyOrder,omitempty"`
	// Identifier of the order from the sell side.
	SellOrder string `protobuf:"bytes,9,opt,name=sellOrder,proto3" json:"sellOrder,omitempty"`
	// Timestamp for when the trade occurred, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Type for the trade. See [`Trade.Type`](#vega.Trade.Type).
	Type Trade_Type `protobuf:"varint,11,opt,name=type,proto3,enum=vega.Trade_Type" json:"type,omitempty"`
	// Fee amount charged to the buyer party for the trade.
	BuyerFee *Fee `protobuf:"bytes,12,opt,name=buyerFee,proto3" json:"buyerFee,omitempty"`
	// Fee amount charged to the seller party for the trade.
	SellerFee *Fee `protobuf:"bytes,13,opt,name=sellerFee,proto3" json:"sellerFee,omitempty"`
	// Auction batch number that the buy side order was placed in.
	BuyerAuctionBatch uint64 `protobuf:"varint,14,opt,name=buyerAuctionBatch,proto3" json:"buyerAuctionBatch,omitempty"`
	// Auction batch number that the sell side order was placed in.
	SellerAuctionBatch   uint64   `protobuf:"varint,15,opt,name=sellerAuctionBatch,proto3" json:"sellerAuctionBatch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{9}
}

func (m *Trade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trade.Unmarshal(m, b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return xxx_messageInfo_Trade.Size(m)
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trade) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *Trade) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trade) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Trade) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *Trade) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *Trade) GetAggressor() Side {
	if m != nil {
		return m.Aggressor
	}
	return Side_SIDE_UNSPECIFIED
}

func (m *Trade) GetBuyOrder() string {
	if m != nil {
		return m.BuyOrder
	}
	return ""
}

func (m *Trade) GetSellOrder() string {
	if m != nil {
		return m.SellOrder
	}
	return ""
}

func (m *Trade) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Trade) GetType() Trade_Type {
	if m != nil {
		return m.Type
	}
	return Trade_TYPE_UNSPECIFIED
}

func (m *Trade) GetBuyerFee() *Fee {
	if m != nil {
		return m.BuyerFee
	}
	return nil
}

func (m *Trade) GetSellerFee() *Fee {
	if m != nil {
		return m.SellerFee
	}
	return nil
}

func (m *Trade) GetBuyerAuctionBatch() uint64 {
	if m != nil {
		return m.BuyerAuctionBatch
	}
	return 0
}

func (m *Trade) GetSellerAuctionBatch() uint64 {
	if m != nil {
		return m.SellerAuctionBatch
	}
	return 0
}

// Represents any fees paid by a party, resulting from a trade.
type Fee struct {
	// Fee amount paid to the non-aggressive party of the trade.
	MakerFee uint64 `protobuf:"varint,1,opt,name=makerFee,proto3" json:"makerFee,omitempty"`
	// Fee amount paid for maintaining the Vega infrastructure.
	InfrastructureFee uint64 `protobuf:"varint,2,opt,name=infrastructureFee,proto3" json:"infrastructureFee,omitempty"`
	// Fee amount paid to market makers.
	LiquidityFee         uint64   `protobuf:"varint,3,opt,name=liquidityFee,proto3" json:"liquidityFee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fee) Reset()         { *m = Fee{} }
func (m *Fee) String() string { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()    {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{10}
}

func (m *Fee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fee.Unmarshal(m, b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
}
func (m *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(m, src)
}
func (m *Fee) XXX_Size() int {
	return xxx_messageInfo_Fee.Size(m)
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

func (m *Fee) GetMakerFee() uint64 {
	if m != nil {
		return m.MakerFee
	}
	return 0
}

func (m *Fee) GetInfrastructureFee() uint64 {
	if m != nil {
		return m.InfrastructureFee
	}
	return 0
}

func (m *Fee) GetLiquidityFee() uint64 {
	if m != nil {
		return m.LiquidityFee
	}
	return 0
}

type TradeSet struct {
	// A set of one or more trades.
	Trades               []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeSet) Reset()         { *m = TradeSet{} }
func (m *TradeSet) String() string { return proto.CompactTextString(m) }
func (*TradeSet) ProtoMessage()    {}
func (*TradeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{11}
}

func (m *TradeSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeSet.Unmarshal(m, b)
}
func (m *TradeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeSet.Marshal(b, m, deterministic)
}
func (m *TradeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeSet.Merge(m, src)
}
func (m *TradeSet) XXX_Size() int {
	return xxx_messageInfo_TradeSet.Size(m)
}
func (m *TradeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeSet.DiscardUnknown(m)
}

var xxx_messageInfo_TradeSet proto.InternalMessageInfo

func (m *TradeSet) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

// Represents the high, low, open, and closing prices for an interval of trading,
// referred to commonly as a candlestick or candle.
type Candle struct {
	// Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// An ISO-8601 datetime with nanosecond precision for when the candle was last updated.
	Datetime string `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// Highest price for trading during the candle interval.
	High uint64 `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	// Lowest price for trading during the candle interval.
	Low uint64 `protobuf:"varint,4,opt,name=low,proto3" json:"low,omitempty"`
	// Open trade price.
	Open uint64 `protobuf:"varint,5,opt,name=open,proto3" json:"open,omitempty"`
	// Closing trade price.
	Close uint64 `protobuf:"varint,6,opt,name=close,proto3" json:"close,omitempty"`
	// Total trading volume during the candle interval.
	Volume uint64 `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`
	// Time interval for the candle. See [`Interval`](#vega.Interval).
	Interval             Interval `protobuf:"varint,8,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Candle) Reset()         { *m = Candle{} }
func (m *Candle) String() string { return proto.CompactTextString(m) }
func (*Candle) ProtoMessage()    {}
func (*Candle) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{12}
}

func (m *Candle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Candle.Unmarshal(m, b)
}
func (m *Candle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Candle.Marshal(b, m, deterministic)
}
func (m *Candle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candle.Merge(m, src)
}
func (m *Candle) XXX_Size() int {
	return xxx_messageInfo_Candle.Size(m)
}
func (m *Candle) XXX_DiscardUnknown() {
	xxx_messageInfo_Candle.DiscardUnknown(m)
}

var xxx_messageInfo_Candle proto.InternalMessageInfo

func (m *Candle) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Candle) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

func (m *Candle) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Candle) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Candle) GetOpen() uint64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Candle) GetClose() uint64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *Candle) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Candle) GetInterval() Interval {
	if m != nil {
		return m.Interval
	}
	return Interval_INTERVAL_UNSPECIFIED
}

// Represents a price level from market depth or order book data.
type PriceLevel struct {
	// Price for the price level, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Price uint64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	// Number of orders at the price level.
	NumberOfOrders uint64 `protobuf:"varint,2,opt,name=numberOfOrders,proto3" json:"numberOfOrders,omitempty"`
	// Volume at the price level.
	Volume               uint64   `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceLevel) Reset()         { *m = PriceLevel{} }
func (m *PriceLevel) String() string { return proto.CompactTextString(m) }
func (*PriceLevel) ProtoMessage()    {}
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{13}
}

func (m *PriceLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceLevel.Unmarshal(m, b)
}
func (m *PriceLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceLevel.Marshal(b, m, deterministic)
}
func (m *PriceLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceLevel.Merge(m, src)
}
func (m *PriceLevel) XXX_Size() int {
	return xxx_messageInfo_PriceLevel.Size(m)
}
func (m *PriceLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceLevel.DiscardUnknown(m)
}

var xxx_messageInfo_PriceLevel proto.InternalMessageInfo

func (m *PriceLevel) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PriceLevel) GetNumberOfOrders() uint64 {
	if m != nil {
		return m.NumberOfOrders
	}
	return 0
}

func (m *PriceLevel) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

// Represents market depth or order book data for the specified market on Vega.
type MarketDepth struct {
	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Collection of price levels for the buy side of the book.
	Buy []*PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Collection of price levels for the sell side of the book.
	Sell []*PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Sequence number for the market depth dump
	SequenceNumber       uint64   `protobuf:"varint,4,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepth) Reset()         { *m = MarketDepth{} }
func (m *MarketDepth) String() string { return proto.CompactTextString(m) }
func (*MarketDepth) ProtoMessage()    {}
func (*MarketDepth) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{14}
}

func (m *MarketDepth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepth.Unmarshal(m, b)
}
func (m *MarketDepth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepth.Marshal(b, m, deterministic)
}
func (m *MarketDepth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepth.Merge(m, src)
}
func (m *MarketDepth) XXX_Size() int {
	return xxx_messageInfo_MarketDepth.Size(m)
}
func (m *MarketDepth) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepth.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepth proto.InternalMessageInfo

func (m *MarketDepth) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *MarketDepth) GetBuy() []*PriceLevel {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *MarketDepth) GetSell() []*PriceLevel {
	if m != nil {
		return m.Sell
	}
	return nil
}

func (m *MarketDepth) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// Represents the changed market depth since the last update
type MarketDepthUpdate struct {
	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Collection of updated price levels for the buy side of the book.
	Buy []*PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Collection of updated price levels for the sell side of the book.
	Sell []*PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Sequence number for the market depth update
	SequenceNumber       uint64   `protobuf:"varint,4,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepthUpdate) Reset()         { *m = MarketDepthUpdate{} }
func (m *MarketDepthUpdate) String() string { return proto.CompactTextString(m) }
func (*MarketDepthUpdate) ProtoMessage()    {}
func (*MarketDepthUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{15}
}

func (m *MarketDepthUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthUpdate.Unmarshal(m, b)
}
func (m *MarketDepthUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthUpdate.Marshal(b, m, deterministic)
}
func (m *MarketDepthUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthUpdate.Merge(m, src)
}
func (m *MarketDepthUpdate) XXX_Size() int {
	return xxx_messageInfo_MarketDepthUpdate.Size(m)
}
func (m *MarketDepthUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthUpdate proto.InternalMessageInfo

func (m *MarketDepthUpdate) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *MarketDepthUpdate) GetBuy() []*PriceLevel {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *MarketDepthUpdate) GetSell() []*PriceLevel {
	if m != nil {
		return m.Sell
	}
	return nil
}

func (m *MarketDepthUpdate) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// Represents position data for a party on the specified market on Vega.
type Position struct {
	// Market identifier.
	MarketID string `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier.
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Open volume for the position. Value is signed +ve for long and -ve for short.
	OpenVolume int64 `protobuf:"varint,3,opt,name=openVolume,proto3" json:"openVolume,omitempty"`
	// Realised profit and loss for the position. Value is signed +ve for long and -ve for short.
	RealisedPNL int64 `protobuf:"varint,4,opt,name=realisedPNL,proto3" json:"realisedPNL,omitempty"`
	// Unrealised profit and loss for the position. Value is signed +ve for long and -ve for short.
	UnrealisedPNL int64 `protobuf:"varint,5,opt,name=unrealisedPNL,proto3" json:"unrealisedPNL,omitempty"`
	// Average entry price for the position, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	AverageEntryPrice uint64 `protobuf:"varint,6,opt,name=averageEntryPrice,proto3" json:"averageEntryPrice,omitempty"`
	// last time the position was updated
	UpdatedAt            int64    `protobuf:"varint,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{16}
}

func (m *Position) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Position.Unmarshal(m, b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Position.Marshal(b, m, deterministic)
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return xxx_messageInfo_Position.Size(m)
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *Position) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *Position) GetOpenVolume() int64 {
	if m != nil {
		return m.OpenVolume
	}
	return 0
}

func (m *Position) GetRealisedPNL() int64 {
	if m != nil {
		return m.RealisedPNL
	}
	return 0
}

func (m *Position) GetUnrealisedPNL() int64 {
	if m != nil {
		return m.UnrealisedPNL
	}
	return 0
}

func (m *Position) GetAverageEntryPrice() uint64 {
	if m != nil {
		return m.AverageEntryPrice
	}
	return 0
}

func (m *Position) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type PositionTrade struct {
	// Volume for the position trade. Value is signed +ve for long and -ve for short.
	Volume int64 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// Price for the position trade, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	Price                uint64   `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionTrade) Reset()         { *m = PositionTrade{} }
func (m *PositionTrade) String() string { return proto.CompactTextString(m) }
func (*PositionTrade) ProtoMessage()    {}
func (*PositionTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{17}
}

func (m *PositionTrade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionTrade.Unmarshal(m, b)
}
func (m *PositionTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionTrade.Marshal(b, m, deterministic)
}
func (m *PositionTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionTrade.Merge(m, src)
}
func (m *PositionTrade) XXX_Size() int {
	return xxx_messageInfo_PositionTrade.Size(m)
}
func (m *PositionTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionTrade.DiscardUnknown(m)
}

var xxx_messageInfo_PositionTrade proto.InternalMessageInfo

func (m *PositionTrade) GetVolume() int64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *PositionTrade) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// Vega domain specific statistics as reported by the node the caller is connected to.
type Statistics struct {
	// Current block height as reported by the Vega blockchain.
	BlockHeight uint64 `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	// Current backlog length (number of transactions) that are waiting to be included in a block.
	BacklogLength uint64 `protobuf:"varint,2,opt,name=backlogLength,proto3" json:"backlogLength,omitempty"`
	// Total number of connected peers to this node.
	TotalPeers uint64 `protobuf:"varint,3,opt,name=totalPeers,proto3" json:"totalPeers,omitempty"`
	// Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision.
	GenesisTime string `protobuf:"bytes,4,opt,name=genesisTime,proto3" json:"genesisTime,omitempty"`
	// Current system date and time formatted in ISO-8601 datetime format with nanosecond precision.
	CurrentTime string `protobuf:"bytes,5,opt,name=currentTime,proto3" json:"currentTime,omitempty"`
	// Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision.
	VegaTime string `protobuf:"bytes,6,opt,name=vegaTime,proto3" json:"vegaTime,omitempty"`
	// Status of the connection to the Vega blockchain.
	// See [`ChainStatus`](#vega.ChainStatus).
	Status ChainStatus `protobuf:"varint,7,opt,name=status,proto3,enum=vega.ChainStatus" json:"status,omitempty"`
	// Transactions per block.
	TxPerBlock uint64 `protobuf:"varint,8,opt,name=txPerBlock,proto3" json:"txPerBlock,omitempty"`
	// Average transaction size in bytes.
	AverageTxBytes uint64 `protobuf:"varint,9,opt,name=averageTxBytes,proto3" json:"averageTxBytes,omitempty"`
	// Average orders per block.
	AverageOrdersPerBlock uint64 `protobuf:"varint,10,opt,name=averageOrdersPerBlock,proto3" json:"averageOrdersPerBlock,omitempty"`
	// Trades emitted per second.
	TradesPerSecond uint64 `protobuf:"varint,11,opt,name=tradesPerSecond,proto3" json:"tradesPerSecond,omitempty"`
	// Orders affected per second.
	OrdersPerSecond uint64 `protobuf:"varint,12,opt,name=ordersPerSecond,proto3" json:"ordersPerSecond,omitempty"`
	// Total markets on this Vega network.
	TotalMarkets uint64 `protobuf:"varint,13,opt,name=totalMarkets,proto3" json:"totalMarkets,omitempty"`
	// Total number of order amendments since genesis (on all markets).
	TotalAmendOrder uint64 `protobuf:"varint,16,opt,name=totalAmendOrder,proto3" json:"totalAmendOrder,omitempty"`
	// Total number of order cancellations since genesis (on all markets).
	TotalCancelOrder uint64 `protobuf:"varint,17,opt,name=totalCancelOrder,proto3" json:"totalCancelOrder,omitempty"`
	// Total number of order submissions since genesis (on all markets).
	TotalCreateOrder uint64 `protobuf:"varint,18,opt,name=totalCreateOrder,proto3" json:"totalCreateOrder,omitempty"`
	// Total number of orders affected since genesis (on all markets).
	TotalOrders uint64 `protobuf:"varint,19,opt,name=totalOrders,proto3" json:"totalOrders,omitempty"`
	// Total number of trades emitted since genesis (on all markets).
	TotalTrades uint64 `protobuf:"varint,20,opt,name=totalTrades,proto3" json:"totalTrades,omitempty"`
	// Current number of stream subscribers to order data.
	OrderSubscriptions uint32 `protobuf:"varint,21,opt,name=orderSubscriptions,proto3" json:"orderSubscriptions,omitempty"`
	// Current number of stream subscribers to trade data.
	TradeSubscriptions uint32 `protobuf:"varint,22,opt,name=tradeSubscriptions,proto3" json:"tradeSubscriptions,omitempty"`
	// Current number of stream subscribers to candle-stick data.
	CandleSubscriptions uint32 `protobuf:"varint,23,opt,name=candleSubscriptions,proto3" json:"candleSubscriptions,omitempty"`
	// Current number of stream subscribers to market depth data.
	MarketDepthSubscriptions uint32 `protobuf:"varint,24,opt,name=marketDepthSubscriptions,proto3" json:"marketDepthSubscriptions,omitempty"`
	// Current number of stream subscribers to positions data.
	PositionsSubscriptions uint32 `protobuf:"varint,25,opt,name=positionsSubscriptions,proto3" json:"positionsSubscriptions,omitempty"`
	// Current number of stream subscribers to account data.
	AccountSubscriptions uint32 `protobuf:"varint,26,opt,name=accountSubscriptions,proto3" json:"accountSubscriptions,omitempty"`
	// Current number of stream subscribers to market data.
	MarketDataSubscriptions uint32 `protobuf:"varint,27,opt,name=marketDataSubscriptions,proto3" json:"marketDataSubscriptions,omitempty"`
	// The version hash of the Vega node software.
	AppVersionHash string `protobuf:"bytes,28,opt,name=appVersionHash,proto3" json:"appVersionHash,omitempty"`
	// The version of the Vega node software.
	AppVersion string `protobuf:"bytes,29,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	// The version of the underlying Vega blockchain.
	ChainVersion string `protobuf:"bytes,30,opt,name=chainVersion,proto3" json:"chainVersion,omitempty"`
	// Current block duration, in nanoseconds.
	BlockDuration uint64 `protobuf:"varint,31,opt,name=blockDuration,proto3" json:"blockDuration,omitempty"`
	// Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision.
	Uptime string `protobuf:"bytes,32,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Unique identifier for the underlying Vega blockchain.
	ChainID              string   `protobuf:"bytes,33,opt,name=chainID,proto3" json:"chainID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Statistics) Reset()         { *m = Statistics{} }
func (m *Statistics) String() string { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()    {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{18}
}

func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statistics.Unmarshal(m, b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
}
func (m *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(m, src)
}
func (m *Statistics) XXX_Size() int {
	return xxx_messageInfo_Statistics.Size(m)
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Statistics) GetBacklogLength() uint64 {
	if m != nil {
		return m.BacklogLength
	}
	return 0
}

func (m *Statistics) GetTotalPeers() uint64 {
	if m != nil {
		return m.TotalPeers
	}
	return 0
}

func (m *Statistics) GetGenesisTime() string {
	if m != nil {
		return m.GenesisTime
	}
	return ""
}

func (m *Statistics) GetCurrentTime() string {
	if m != nil {
		return m.CurrentTime
	}
	return ""
}

func (m *Statistics) GetVegaTime() string {
	if m != nil {
		return m.VegaTime
	}
	return ""
}

func (m *Statistics) GetStatus() ChainStatus {
	if m != nil {
		return m.Status
	}
	return ChainStatus_CHAIN_STATUS_UNSPECIFIED
}

func (m *Statistics) GetTxPerBlock() uint64 {
	if m != nil {
		return m.TxPerBlock
	}
	return 0
}

func (m *Statistics) GetAverageTxBytes() uint64 {
	if m != nil {
		return m.AverageTxBytes
	}
	return 0
}

func (m *Statistics) GetAverageOrdersPerBlock() uint64 {
	if m != nil {
		return m.AverageOrdersPerBlock
	}
	return 0
}

func (m *Statistics) GetTradesPerSecond() uint64 {
	if m != nil {
		return m.TradesPerSecond
	}
	return 0
}

func (m *Statistics) GetOrdersPerSecond() uint64 {
	if m != nil {
		return m.OrdersPerSecond
	}
	return 0
}

func (m *Statistics) GetTotalMarkets() uint64 {
	if m != nil {
		return m.TotalMarkets
	}
	return 0
}

func (m *Statistics) GetTotalAmendOrder() uint64 {
	if m != nil {
		return m.TotalAmendOrder
	}
	return 0
}

func (m *Statistics) GetTotalCancelOrder() uint64 {
	if m != nil {
		return m.TotalCancelOrder
	}
	return 0
}

func (m *Statistics) GetTotalCreateOrder() uint64 {
	if m != nil {
		return m.TotalCreateOrder
	}
	return 0
}

func (m *Statistics) GetTotalOrders() uint64 {
	if m != nil {
		return m.TotalOrders
	}
	return 0
}

func (m *Statistics) GetTotalTrades() uint64 {
	if m != nil {
		return m.TotalTrades
	}
	return 0
}

func (m *Statistics) GetOrderSubscriptions() uint32 {
	if m != nil {
		return m.OrderSubscriptions
	}
	return 0
}

func (m *Statistics) GetTradeSubscriptions() uint32 {
	if m != nil {
		return m.TradeSubscriptions
	}
	return 0
}

func (m *Statistics) GetCandleSubscriptions() uint32 {
	if m != nil {
		return m.CandleSubscriptions
	}
	return 0
}

func (m *Statistics) GetMarketDepthSubscriptions() uint32 {
	if m != nil {
		return m.MarketDepthSubscriptions
	}
	return 0
}

func (m *Statistics) GetPositionsSubscriptions() uint32 {
	if m != nil {
		return m.PositionsSubscriptions
	}
	return 0
}

func (m *Statistics) GetAccountSubscriptions() uint32 {
	if m != nil {
		return m.AccountSubscriptions
	}
	return 0
}

func (m *Statistics) GetMarketDataSubscriptions() uint32 {
	if m != nil {
		return m.MarketDataSubscriptions
	}
	return 0
}

func (m *Statistics) GetAppVersionHash() string {
	if m != nil {
		return m.AppVersionHash
	}
	return ""
}

func (m *Statistics) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *Statistics) GetChainVersion() string {
	if m != nil {
		return m.ChainVersion
	}
	return ""
}

func (m *Statistics) GetBlockDuration() uint64 {
	if m != nil {
		return m.BlockDuration
	}
	return 0
}

func (m *Statistics) GetUptime() string {
	if m != nil {
		return m.Uptime
	}
	return ""
}

func (m *Statistics) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

// The representation of a deposit in the vega network
type Deposit struct {
	// The ID of the deposit
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status of the deposit
	Status Deposit_Status `protobuf:"varint,2,opt,name=status,proto3,enum=vega.Deposit_Status" json:"status,omitempty"`
	// The party initiating the deposit
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The vega asset targeted by this deposit
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The amount to be deposited
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The hash of the transaction from the foreign chain
	TxHash string `protobuf:"bytes,6,opt,name=txHash,proto3" json:"txHash,omitempty"`
	// The time where the vega account got updated with the deposit
	CreditedTimestamp int64 `protobuf:"varint,7,opt,name=creditedTimestamp,proto3" json:"creditedTimestamp,omitempty"`
	// The time the deposit has been created in the vega network
	CreatedTimestamp     int64    `protobuf:"varint,8,opt,name=createdTimestamp,proto3" json:"createdTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{19}
}

func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deposit.Unmarshal(m, b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return xxx_messageInfo_Deposit.Size(m)
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Deposit) GetStatus() Deposit_Status {
	if m != nil {
		return m.Status
	}
	return Deposit_DEPOSIT_STATUS_UNSPECIFIED
}

func (m *Deposit) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *Deposit) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Deposit) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Deposit) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Deposit) GetCreditedTimestamp() int64 {
	if m != nil {
		return m.CreditedTimestamp
	}
	return 0
}

func (m *Deposit) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

// The representation of a withdrawal in the vega network
type Withdrawal struct {
	// The id of the withdrawal
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The party initiating the withdrawal
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The amount to be withdrawn
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The asset we want to withdraw funds from
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The status of this withdrawal
	Status Withdrawal_Status `protobuf:"varint,5,opt,name=status,proto3,enum=vega.Withdrawal_Status" json:"status,omitempty"`
	// The reference which is used by the foreign chain
	// to refer to this withdrawal
	Ref string `protobuf:"bytes,6,opt,name=ref,proto3" json:"ref,omitempty"`
	// The time until when the withdrawal is valid
	Expiry int64 `protobuf:"varint,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The hash of the foreign chain for this transaction
	TxHash string `protobuf:"bytes,8,opt,name=txHash,proto3" json:"txHash,omitempty"`
	// The time at which the network started to process this withdrawal
	CreatedTimestamp int64 `protobuf:"varint,9,opt,name=createdTimestamp,proto3" json:"createdTimestamp,omitempty"`
	// The time at which the withdrawal was finalized by the network
	WithdrawnTimestamp int64 `protobuf:"varint,10,opt,name=withdrawnTimestamp,proto3" json:"withdrawnTimestamp,omitempty"`
	// foreign chain specifis
	Ext                  *WithdrawExt `protobuf:"bytes,11,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Withdrawal) Reset()         { *m = Withdrawal{} }
func (m *Withdrawal) String() string { return proto.CompactTextString(m) }
func (*Withdrawal) ProtoMessage()    {}
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{20}
}

func (m *Withdrawal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Withdrawal.Unmarshal(m, b)
}
func (m *Withdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Withdrawal.Marshal(b, m, deterministic)
}
func (m *Withdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdrawal.Merge(m, src)
}
func (m *Withdrawal) XXX_Size() int {
	return xxx_messageInfo_Withdrawal.Size(m)
}
func (m *Withdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_Withdrawal proto.InternalMessageInfo

func (m *Withdrawal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Withdrawal) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *Withdrawal) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Withdrawal) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Withdrawal) GetStatus() Withdrawal_Status {
	if m != nil {
		return m.Status
	}
	return Withdrawal_WITHDRAWAL_STATUS_UNSPECIFIED
}

func (m *Withdrawal) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Withdrawal) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Withdrawal) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Withdrawal) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *Withdrawal) GetWithdrawnTimestamp() int64 {
	if m != nil {
		return m.WithdrawnTimestamp
	}
	return 0
}

func (m *Withdrawal) GetExt() *WithdrawExt {
	if m != nil {
		return m.Ext
	}
	return nil
}

// A request for withdrawing funds from a trader
type WithdrawSubmission struct {
	// The party which wants to withdraw funds
	PartyID string `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The amount to be withdrawn
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The asset we want to withdraw
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// foreign chain specifics
	Ext                  *WithdrawExt `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *WithdrawSubmission) Reset()         { *m = WithdrawSubmission{} }
func (m *WithdrawSubmission) String() string { return proto.CompactTextString(m) }
func (*WithdrawSubmission) ProtoMessage()    {}
func (*WithdrawSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{21}
}

func (m *WithdrawSubmission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawSubmission.Unmarshal(m, b)
}
func (m *WithdrawSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawSubmission.Marshal(b, m, deterministic)
}
func (m *WithdrawSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawSubmission.Merge(m, src)
}
func (m *WithdrawSubmission) XXX_Size() int {
	return xxx_messageInfo_WithdrawSubmission.Size(m)
}
func (m *WithdrawSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawSubmission proto.InternalMessageInfo

func (m *WithdrawSubmission) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *WithdrawSubmission) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *WithdrawSubmission) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *WithdrawSubmission) GetExt() *WithdrawExt {
	if m != nil {
		return m.Ext
	}
	return nil
}

type WithdrawExt struct {
	// foreign chain specifics
	//
	// Types that are valid to be assigned to Ext:
	//	*WithdrawExt_Erc20
	Ext                  isWithdrawExt_Ext `protobuf_oneof:"ext"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WithdrawExt) Reset()         { *m = WithdrawExt{} }
func (m *WithdrawExt) String() string { return proto.CompactTextString(m) }
func (*WithdrawExt) ProtoMessage()    {}
func (*WithdrawExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{22}
}

func (m *WithdrawExt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawExt.Unmarshal(m, b)
}
func (m *WithdrawExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawExt.Marshal(b, m, deterministic)
}
func (m *WithdrawExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawExt.Merge(m, src)
}
func (m *WithdrawExt) XXX_Size() int {
	return xxx_messageInfo_WithdrawExt.Size(m)
}
func (m *WithdrawExt) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawExt.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawExt proto.InternalMessageInfo

type isWithdrawExt_Ext interface {
	isWithdrawExt_Ext()
}

type WithdrawExt_Erc20 struct {
	Erc20 *Erc20WithdrawExt `protobuf:"bytes,1,opt,name=erc20,proto3,oneof"`
}

func (*WithdrawExt_Erc20) isWithdrawExt_Ext() {}

func (m *WithdrawExt) GetExt() isWithdrawExt_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *WithdrawExt) GetErc20() *Erc20WithdrawExt {
	if x, ok := m.GetExt().(*WithdrawExt_Erc20); ok {
		return x.Erc20
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WithdrawExt) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WithdrawExt_Erc20)(nil),
	}
}

// An extension of data required for the withdraw submissions
type Erc20WithdrawExt struct {
	// The address into which the bridge will release the funds
	ReceiverAddress      string   `protobuf:"bytes,1,opt,name=receiverAddress,proto3" json:"receiverAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Erc20WithdrawExt) Reset()         { *m = Erc20WithdrawExt{} }
func (m *Erc20WithdrawExt) String() string { return proto.CompactTextString(m) }
func (*Erc20WithdrawExt) ProtoMessage()    {}
func (*Erc20WithdrawExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{23}
}

func (m *Erc20WithdrawExt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Erc20WithdrawExt.Unmarshal(m, b)
}
func (m *Erc20WithdrawExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Erc20WithdrawExt.Marshal(b, m, deterministic)
}
func (m *Erc20WithdrawExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Erc20WithdrawExt.Merge(m, src)
}
func (m *Erc20WithdrawExt) XXX_Size() int {
	return xxx_messageInfo_Erc20WithdrawExt.Size(m)
}
func (m *Erc20WithdrawExt) XXX_DiscardUnknown() {
	xxx_messageInfo_Erc20WithdrawExt.DiscardUnknown(m)
}

var xxx_messageInfo_Erc20WithdrawExt proto.InternalMessageInfo

func (m *Erc20WithdrawExt) GetReceiverAddress() string {
	if m != nil {
		return m.ReceiverAddress
	}
	return ""
}

// An order amendment is a request to amend or update an existing order on Vega.
type OrderAmendment struct {
	// Order identifier, this is required to find the order and will not be updated. Required field.
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// Party identifier, this is required to find the order and will not be updated. Required field.
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier, this is required to find the order and will not be updated.
	MarketID string `protobuf:"bytes,3,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Amend the price for the order, if the Price value is set, otherwise price will remain unchanged. See [`Price`](#vega.Price).
	Price *Price `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Amend the size for the order by the delta specified.
	// To reduce the size from the current value set a negative integer value.
	// To increase the size from the current value, set a positive integer value.
	// To leave the size unchanged set a value of zero.
	SizeDelta int64 `protobuf:"varint,5,opt,name=sizeDelta,proto3" json:"sizeDelta,omitempty"`
	// Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	ExpiresAt *Timestamp `protobuf:"bytes,6,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	// Amend the time in force for the order, set to TIF_UNSPECIFIED to remain unchanged.
	// See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`.
	TimeInForce          Order_TimeInForce `protobuf:"varint,7,opt,name=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"timeInForce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OrderAmendment) Reset()         { *m = OrderAmendment{} }
func (m *OrderAmendment) String() string { return proto.CompactTextString(m) }
func (*OrderAmendment) ProtoMessage()    {}
func (*OrderAmendment) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{24}
}

func (m *OrderAmendment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderAmendment.Unmarshal(m, b)
}
func (m *OrderAmendment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderAmendment.Marshal(b, m, deterministic)
}
func (m *OrderAmendment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderAmendment.Merge(m, src)
}
func (m *OrderAmendment) XXX_Size() int {
	return xxx_messageInfo_OrderAmendment.Size(m)
}
func (m *OrderAmendment) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderAmendment.DiscardUnknown(m)
}

var xxx_messageInfo_OrderAmendment proto.InternalMessageInfo

func (m *OrderAmendment) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrderAmendment) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *OrderAmendment) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *OrderAmendment) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *OrderAmendment) GetSizeDelta() int64 {
	if m != nil {
		return m.SizeDelta
	}
	return 0
}

func (m *OrderAmendment) GetExpiresAt() *Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *OrderAmendment) GetTimeInForce() Order_TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return Order_TIF_UNSPECIFIED
}

// An order submission is a request to submit or create a new order on Vega.
type OrderSubmission struct {
	// Unique identifier for the order (set by the system after consensus).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier for the order. Required field.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier for the order. Required field.
	PartyID string `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	// Required field for Limit orders, however it is not required for market orders.
	Price uint64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of contracts. Cannot be negative.
	Size uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	// Side for the order, e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side). Required field.
	Side Side `protobuf:"varint,6,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires.
	// See [`Order.TimeInForce`](#vega.Order.TimeInForce). Required field.
	TimeInForce Order_TimeInForce `protobuf:"varint,7,opt,name=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"timeInForce,omitempty"`
	// Timestamp for when the order will expire, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	// Required field only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIF_GTT`.
	ExpiresAt int64 `protobuf:"varint,8,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	// Type for the order. See [`Order.Type`](#vega.Order.Type). Required field.
	Type Order_Type `protobuf:"varint,9,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Reference given for the order, this is typically used to retrieve an order submitted through consensus. Currently
	// set internally by the node to return a unique reference identifier for the order submission.
	Reference            string   `protobuf:"bytes,10,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderSubmission) Reset()         { *m = OrderSubmission{} }
func (m *OrderSubmission) String() string { return proto.CompactTextString(m) }
func (*OrderSubmission) ProtoMessage()    {}
func (*OrderSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{25}
}

func (m *OrderSubmission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderSubmission.Unmarshal(m, b)
}
func (m *OrderSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderSubmission.Marshal(b, m, deterministic)
}
func (m *OrderSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSubmission.Merge(m, src)
}
func (m *OrderSubmission) XXX_Size() int {
	return xxx_messageInfo_OrderSubmission.Size(m)
}
func (m *OrderSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSubmission proto.InternalMessageInfo

func (m *OrderSubmission) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderSubmission) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *OrderSubmission) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *OrderSubmission) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderSubmission) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *OrderSubmission) GetSide() Side {
	if m != nil {
		return m.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (m *OrderSubmission) GetTimeInForce() Order_TimeInForce {
	if m != nil {
		return m.TimeInForce
	}
	return Order_TIF_UNSPECIFIED
}

func (m *OrderSubmission) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *OrderSubmission) GetType() Order_Type {
	if m != nil {
		return m.Type
	}
	return Order_TYPE_UNSPECIFIED
}

func (m *OrderSubmission) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

// An order cancellation is a request to cancel an existing order on Vega.
type OrderCancellation struct {
	// Unique identifier for the order (set by the system after consensus). Required field.
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// Market identifier for the order. Required field.
	MarketID string `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Party identifier for the order. Required field.
	PartyID              string   `protobuf:"bytes,3,opt,name=partyID,proto3" json:"partyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderCancellation) Reset()         { *m = OrderCancellation{} }
func (m *OrderCancellation) String() string { return proto.CompactTextString(m) }
func (*OrderCancellation) ProtoMessage()    {}
func (*OrderCancellation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{26}
}

func (m *OrderCancellation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderCancellation.Unmarshal(m, b)
}
func (m *OrderCancellation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderCancellation.Marshal(b, m, deterministic)
}
func (m *OrderCancellation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderCancellation.Merge(m, src)
}
func (m *OrderCancellation) XXX_Size() int {
	return xxx_messageInfo_OrderCancellation.Size(m)
}
func (m *OrderCancellation) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderCancellation.DiscardUnknown(m)
}

var xxx_messageInfo_OrderCancellation proto.InternalMessageInfo

func (m *OrderCancellation) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrderCancellation) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *OrderCancellation) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

// Used to Register a node as a validator during network start-up.
type NodeRegistration struct {
	// Public key, required field.
	PubKey []byte `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	// Public key for the blockchain, required field.
	ChainPubKey          []byte   `protobuf:"bytes,2,opt,name=chainPubKey,proto3" json:"chainPubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeRegistration) Reset()         { *m = NodeRegistration{} }
func (m *NodeRegistration) String() string { return proto.CompactTextString(m) }
func (*NodeRegistration) ProtoMessage()    {}
func (*NodeRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{27}
}

func (m *NodeRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRegistration.Unmarshal(m, b)
}
func (m *NodeRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRegistration.Marshal(b, m, deterministic)
}
func (m *NodeRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRegistration.Merge(m, src)
}
func (m *NodeRegistration) XXX_Size() int {
	return xxx_messageInfo_NodeRegistration.Size(m)
}
func (m *NodeRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRegistration proto.InternalMessageInfo

func (m *NodeRegistration) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *NodeRegistration) GetChainPubKey() []byte {
	if m != nil {
		return m.ChainPubKey
	}
	return nil
}

// Used when a node votes for validating a given resource exists or is valid.
// For example, an ERC20 deposit is valid and exists on ethereum.
type NodeVote struct {
	// Public key, required field.
	PubKey []byte `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	// Reference, required field.
	Reference            string   `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeVote) Reset()         { *m = NodeVote{} }
func (m *NodeVote) String() string { return proto.CompactTextString(m) }
func (*NodeVote) ProtoMessage()    {}
func (*NodeVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{28}
}

func (m *NodeVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeVote.Unmarshal(m, b)
}
func (m *NodeVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeVote.Marshal(b, m, deterministic)
}
func (m *NodeVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeVote.Merge(m, src)
}
func (m *NodeVote) XXX_Size() int {
	return xxx_messageInfo_NodeVote.Size(m)
}
func (m *NodeVote) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeVote.DiscardUnknown(m)
}

var xxx_messageInfo_NodeVote proto.InternalMessageInfo

func (m *NodeVote) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *NodeVote) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

// Represents an account for an asset on Vega for a particular owner or party.
type Account struct {
	// Unique account identifier (used internally by Vega).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The party that the account belongs to. Special values include `network`, which represents the Vega network and is
	// most commonly seen during liquidation of distressed trading positions.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Balance of the asset, the balance is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places. Balances cannot be negative.
	Balance uint64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// Asset identifier for the account.
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// Market identifier for the account. If [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty.
	MarketID string `protobuf:"bytes,5,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// The account type related to this account.
	Type                 AccountType `protobuf:"varint,6,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{29}
}

func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Account) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *Account) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *Account) GetType() AccountType {
	if m != nil {
		return m.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

// Asset value information used within a transfer.
type FinancialAmount struct {
	// A signed integer amount of asset.
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Asset identifier.
	Asset                string   `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinancialAmount) Reset()         { *m = FinancialAmount{} }
func (m *FinancialAmount) String() string { return proto.CompactTextString(m) }
func (*FinancialAmount) ProtoMessage()    {}
func (*FinancialAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{30}
}

func (m *FinancialAmount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinancialAmount.Unmarshal(m, b)
}
func (m *FinancialAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinancialAmount.Marshal(b, m, deterministic)
}
func (m *FinancialAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinancialAmount.Merge(m, src)
}
func (m *FinancialAmount) XXX_Size() int {
	return xxx_messageInfo_FinancialAmount.Size(m)
}
func (m *FinancialAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_FinancialAmount.DiscardUnknown(m)
}

var xxx_messageInfo_FinancialAmount proto.InternalMessageInfo

func (m *FinancialAmount) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FinancialAmount) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

// Represents a financial transfer within Vega.
type Transfer struct {
	// Party identifier for the owner of the transfer.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// A financial amount (of an asset) to transfer.
	Amount *FinancialAmount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The type of transfer, gives the reason for the transfer.
	Type TransferType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.TransferType" json:"type,omitempty"`
	// A minimum amount.
	MinAmount            int64    `protobuf:"varint,4,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{31}
}

func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transfer.Unmarshal(m, b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return xxx_messageInfo_Transfer.Size(m)
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Transfer) GetAmount() *FinancialAmount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Transfer) GetType() TransferType {
	if m != nil {
		return m.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (m *Transfer) GetMinAmount() int64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

// Represents a request to transfer from one set of accounts to another.
type TransferRequest struct {
	// One or more accounts to transfer from.
	FromAccount []*Account `protobuf:"bytes,1,rep,name=fromAccount,proto3" json:"fromAccount,omitempty"`
	// One or more accounts to transfer to.
	ToAccount []*Account `protobuf:"bytes,2,rep,name=toAccount,proto3" json:"toAccount,omitempty"`
	// An amount to transfer for the asset.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// A minimum amount.
	MinAmount uint64 `protobuf:"varint,4,opt,name=minAmount,proto3" json:"minAmount,omitempty"`
	// Asset identifier.
	Asset string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	// A reference for auditing purposes.
	Reference            string   `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferRequest) Reset()         { *m = TransferRequest{} }
func (m *TransferRequest) String() string { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()    {}
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{32}
}

func (m *TransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferRequest.Unmarshal(m, b)
}
func (m *TransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferRequest.Marshal(b, m, deterministic)
}
func (m *TransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequest.Merge(m, src)
}
func (m *TransferRequest) XXX_Size() int {
	return xxx_messageInfo_TransferRequest.Size(m)
}
func (m *TransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequest proto.InternalMessageInfo

func (m *TransferRequest) GetFromAccount() []*Account {
	if m != nil {
		return m.FromAccount
	}
	return nil
}

func (m *TransferRequest) GetToAccount() []*Account {
	if m != nil {
		return m.ToAccount
	}
	return nil
}

func (m *TransferRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransferRequest) GetMinAmount() uint64 {
	if m != nil {
		return m.MinAmount
	}
	return 0
}

func (m *TransferRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *TransferRequest) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

// Represents a ledger entry on Vega.
type LedgerEntry struct {
	// One or more accounts to transfer from.
	FromAccount string `protobuf:"bytes,1,opt,name=fromAccount,proto3" json:"fromAccount,omitempty"`
	// One or more accounts to transfer to.
	ToAccount string `protobuf:"bytes,2,opt,name=toAccount,proto3" json:"toAccount,omitempty"`
	// An amount to transfer.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// A reference for auditing purposes.
	Reference string `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	// Type of ledger entry.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Timestamp for the time the ledger entry was created, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp            int64    `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LedgerEntry) Reset()         { *m = LedgerEntry{} }
func (m *LedgerEntry) String() string { return proto.CompactTextString(m) }
func (*LedgerEntry) ProtoMessage()    {}
func (*LedgerEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{33}
}

func (m *LedgerEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedgerEntry.Unmarshal(m, b)
}
func (m *LedgerEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedgerEntry.Marshal(b, m, deterministic)
}
func (m *LedgerEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerEntry.Merge(m, src)
}
func (m *LedgerEntry) XXX_Size() int {
	return xxx_messageInfo_LedgerEntry.Size(m)
}
func (m *LedgerEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerEntry proto.InternalMessageInfo

func (m *LedgerEntry) GetFromAccount() string {
	if m != nil {
		return m.FromAccount
	}
	return ""
}

func (m *LedgerEntry) GetToAccount() string {
	if m != nil {
		return m.ToAccount
	}
	return ""
}

func (m *LedgerEntry) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *LedgerEntry) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *LedgerEntry) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LedgerEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Represents the balance for an account during a transfer.
type TransferBalance struct {
	// The account relating to the transfer
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The balance relating to the transfer
	Balance              uint64   `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferBalance) Reset()         { *m = TransferBalance{} }
func (m *TransferBalance) String() string { return proto.CompactTextString(m) }
func (*TransferBalance) ProtoMessage()    {}
func (*TransferBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{34}
}

func (m *TransferBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferBalance.Unmarshal(m, b)
}
func (m *TransferBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferBalance.Marshal(b, m, deterministic)
}
func (m *TransferBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferBalance.Merge(m, src)
}
func (m *TransferBalance) XXX_Size() int {
	return xxx_messageInfo_TransferBalance.Size(m)
}
func (m *TransferBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferBalance.DiscardUnknown(m)
}

var xxx_messageInfo_TransferBalance proto.InternalMessageInfo

func (m *TransferBalance) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *TransferBalance) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

// Represents the response from a transfer.
type TransferResponse struct {
	// One or more ledger entries representing the transfers.
	Transfers []*LedgerEntry `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
	// One or more account balances.
	Balances             []*TransferBalance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TransferResponse) Reset()         { *m = TransferResponse{} }
func (m *TransferResponse) String() string { return proto.CompactTextString(m) }
func (*TransferResponse) ProtoMessage()    {}
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{35}
}

func (m *TransferResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferResponse.Unmarshal(m, b)
}
func (m *TransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferResponse.Marshal(b, m, deterministic)
}
func (m *TransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResponse.Merge(m, src)
}
func (m *TransferResponse) XXX_Size() int {
	return xxx_messageInfo_TransferResponse.Size(m)
}
func (m *TransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResponse proto.InternalMessageInfo

func (m *TransferResponse) GetTransfers() []*LedgerEntry {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (m *TransferResponse) GetBalances() []*TransferBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

// Represents the margin levels for a party on a market at a given time.
type MarginLevels struct {
	// Maintenance margin value.
	MaintenanceMargin uint64 `protobuf:"varint,1,opt,name=maintenanceMargin,proto3" json:"maintenanceMargin,omitempty"`
	// Search level value.
	SearchLevel uint64 `protobuf:"varint,2,opt,name=searchLevel,proto3" json:"searchLevel,omitempty"`
	// Initial margin value.
	InitialMargin uint64 `protobuf:"varint,3,opt,name=initialMargin,proto3" json:"initialMargin,omitempty"`
	// Collateral release level value.
	CollateralReleaseLevel uint64 `protobuf:"varint,4,opt,name=collateralReleaseLevel,proto3" json:"collateralReleaseLevel,omitempty"`
	// Party identifier.
	PartyID string `protobuf:"bytes,5,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// Market identifier.
	MarketID string `protobuf:"bytes,6,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Asset identifier.
	Asset string `protobuf:"bytes,7,opt,name=asset,proto3" json:"asset,omitempty"`
	// Timestamp for the time the ledger entry was created, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp            int64    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarginLevels) Reset()         { *m = MarginLevels{} }
func (m *MarginLevels) String() string { return proto.CompactTextString(m) }
func (*MarginLevels) ProtoMessage()    {}
func (*MarginLevels) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{36}
}

func (m *MarginLevels) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginLevels.Unmarshal(m, b)
}
func (m *MarginLevels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginLevels.Marshal(b, m, deterministic)
}
func (m *MarginLevels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginLevels.Merge(m, src)
}
func (m *MarginLevels) XXX_Size() int {
	return xxx_messageInfo_MarginLevels.Size(m)
}
func (m *MarginLevels) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginLevels.DiscardUnknown(m)
}

var xxx_messageInfo_MarginLevels proto.InternalMessageInfo

func (m *MarginLevels) GetMaintenanceMargin() uint64 {
	if m != nil {
		return m.MaintenanceMargin
	}
	return 0
}

func (m *MarginLevels) GetSearchLevel() uint64 {
	if m != nil {
		return m.SearchLevel
	}
	return 0
}

func (m *MarginLevels) GetInitialMargin() uint64 {
	if m != nil {
		return m.InitialMargin
	}
	return 0
}

func (m *MarginLevels) GetCollateralReleaseLevel() uint64 {
	if m != nil {
		return m.CollateralReleaseLevel
	}
	return 0
}

func (m *MarginLevels) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *MarginLevels) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *MarginLevels) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *MarginLevels) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Represents data generated by a market when open.
type MarketData struct {
	// Mark price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	MarkPrice uint64 `protobuf:"varint,1,opt,name=markPrice,proto3" json:"markPrice,omitempty"`
	// Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places.
	BestBidPrice uint64 `protobuf:"varint,2,opt,name=bestBidPrice,proto3" json:"bestBidPrice,omitempty"`
	// Aggregated volume being bid at the best bid price.
	BestBidVolume uint64 `protobuf:"varint,3,opt,name=bestBidVolume,proto3" json:"bestBidVolume,omitempty"`
	// Lowest price level on an order book for offer orders.
	BestOfferPrice uint64 `protobuf:"varint,4,opt,name=bestOfferPrice,proto3" json:"bestOfferPrice,omitempty"`
	// Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly
	//  // formatted price of `1.23456` assuming market configured to 5 decimal places.
	BestOfferVolume uint64 `protobuf:"varint,5,opt,name=bestOfferVolume,proto3" json:"bestOfferVolume,omitempty"`
	// Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly
	//  // formatted price of `1.23456` assuming market configured to 5 decimal places.
	MidPrice uint64 `protobuf:"varint,6,opt,name=midPrice,proto3" json:"midPrice,omitempty"`
	// Market identifier for the data.
	Market string `protobuf:"bytes,7,opt,name=market,proto3" json:"market,omitempty"`
	// Timestamp at which this mark price was relevant, in nanoseconds since the epoch.
	// See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.
	Timestamp int64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The sum of the size of all positions greater than 0 on the market.
	OpenInterest uint64 `protobuf:"varint,9,opt,name=openInterest,proto3" json:"openInterest,omitempty"`
	// Time in seconds until the end of the auction (0 if currently not in auction period).
	AuctionEnd int64 `protobuf:"varint,10,opt,name=auctionEnd,proto3" json:"auctionEnd,omitempty"`
	// Time until next auction (used in FBA's) - currently always 0.
	AuctionStart int64 `protobuf:"varint,11,opt,name=auctionStart,proto3" json:"auctionStart,omitempty"`
	// indicative price (zero if not in auction)
	IndicativePrice uint64 `protobuf:"varint,12,opt,name=indicativePrice,proto3" json:"indicativePrice,omitempty"`
	// indicative volume (zero if not in auction)
	IndicativeVolume uint64 `protobuf:"varint,13,opt,name=indicativeVolume,proto3" json:"indicativeVolume,omitempty"`
	// the current state of the market
	MarketState          MarketState `protobuf:"varint,14,opt,name=marketState,proto3,enum=vega.MarketState" json:"marketState,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MarketData) Reset()         { *m = MarketData{} }
func (m *MarketData) String() string { return proto.CompactTextString(m) }
func (*MarketData) ProtoMessage()    {}
func (*MarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{37}
}

func (m *MarketData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketData.Unmarshal(m, b)
}
func (m *MarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketData.Marshal(b, m, deterministic)
}
func (m *MarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketData.Merge(m, src)
}
func (m *MarketData) XXX_Size() int {
	return xxx_messageInfo_MarketData.Size(m)
}
func (m *MarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketData.DiscardUnknown(m)
}

var xxx_messageInfo_MarketData proto.InternalMessageInfo

func (m *MarketData) GetMarkPrice() uint64 {
	if m != nil {
		return m.MarkPrice
	}
	return 0
}

func (m *MarketData) GetBestBidPrice() uint64 {
	if m != nil {
		return m.BestBidPrice
	}
	return 0
}

func (m *MarketData) GetBestBidVolume() uint64 {
	if m != nil {
		return m.BestBidVolume
	}
	return 0
}

func (m *MarketData) GetBestOfferPrice() uint64 {
	if m != nil {
		return m.BestOfferPrice
	}
	return 0
}

func (m *MarketData) GetBestOfferVolume() uint64 {
	if m != nil {
		return m.BestOfferVolume
	}
	return 0
}

func (m *MarketData) GetMidPrice() uint64 {
	if m != nil {
		return m.MidPrice
	}
	return 0
}

func (m *MarketData) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func (m *MarketData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MarketData) GetOpenInterest() uint64 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *MarketData) GetAuctionEnd() int64 {
	if m != nil {
		return m.AuctionEnd
	}
	return 0
}

func (m *MarketData) GetAuctionStart() int64 {
	if m != nil {
		return m.AuctionStart
	}
	return 0
}

func (m *MarketData) GetIndicativePrice() uint64 {
	if m != nil {
		return m.IndicativePrice
	}
	return 0
}

func (m *MarketData) GetIndicativeVolume() uint64 {
	if m != nil {
		return m.IndicativeVolume
	}
	return 0
}

func (m *MarketData) GetMarketState() MarketState {
	if m != nil {
		return m.MarketState
	}
	return MarketState_MARKET_STATE_UNSPECIFIED
}

// Represents Vega domain specific error information over gRPC/Protobuf.
type ErrorDetail struct {
	// A Vega API domain specific unique error code, useful for client side mappings. e.g. 10004
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message that describes the error in more detail, should describe the problem encountered.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Any inner error information that could add more context, or be helpful for error reporting.
	Inner                string   `protobuf:"bytes,3,opt,name=inner,proto3" json:"inner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorDetail) Reset()         { *m = ErrorDetail{} }
func (m *ErrorDetail) String() string { return proto.CompactTextString(m) }
func (*ErrorDetail) ProtoMessage()    {}
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{38}
}

func (m *ErrorDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorDetail.Unmarshal(m, b)
}
func (m *ErrorDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorDetail.Marshal(b, m, deterministic)
}
func (m *ErrorDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorDetail.Merge(m, src)
}
func (m *ErrorDetail) XXX_Size() int {
	return xxx_messageInfo_ErrorDetail.Size(m)
}
func (m *ErrorDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorDetail proto.InternalMessageInfo

func (m *ErrorDetail) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorDetail) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorDetail) GetInner() string {
	if m != nil {
		return m.Inner
	}
	return ""
}

// Represents a transaction to be sent to Vega.
type Transaction struct {
	// One of the set of Vega commands (proto marshalled).
	InputData []byte `protobuf:"bytes,1,opt,name=inputData,proto3" json:"inputData,omitempty"`
	// A random number used to provided uniqueness and prevents
	// against replay attack.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The block height associated to the transaction.
	// This should always be current height of the node at the time of sending the Tx.
	// BlockHeight is used as a mechanism for replay protection.
	BlockHeight uint64 `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	// The sender of the transaction.
	// Any of the following would be valid:
	//
	// Types that are valid to be assigned to From:
	//	*Transaction_Address
	//	*Transaction_PubKey
	From                 isTransaction_From `protobuf_oneof:"from"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{39}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetInputData() []byte {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type isTransaction_From interface {
	isTransaction_From()
}

type Transaction_Address struct {
	Address []byte `protobuf:"bytes,1001,opt,name=address,proto3,oneof"`
}

type Transaction_PubKey struct {
	PubKey []byte `protobuf:"bytes,1002,opt,name=pubKey,proto3,oneof"`
}

func (*Transaction_Address) isTransaction_From() {}

func (*Transaction_PubKey) isTransaction_From() {}

func (m *Transaction) GetFrom() isTransaction_From {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetAddress() []byte {
	if x, ok := m.GetFrom().(*Transaction_Address); ok {
		return x.Address
	}
	return nil
}

func (m *Transaction) GetPubKey() []byte {
	if x, ok := m.GetFrom().(*Transaction_PubKey); ok {
		return x.PubKey
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Transaction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Transaction_Address)(nil),
		(*Transaction_PubKey)(nil),
	}
}

// A signature to be authenticate a transaction
// and to be verified by the vega network
type Signature struct {
	// The bytes of the signature
	Sig []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	// The algorithm used to create the signature
	Algo string `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
	// The version of the signature used to create the signature
	Version              uint64   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{40}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Signature) GetAlgo() string {
	if m != nil {
		return m.Algo
	}
	return ""
}

func (m *Signature) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// A bundle of a transaction and it's signature.
type SignedBundle struct {
	// Transaction payload (proto marshalled).
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The signature authenticating the transaction.
	Sig                  *Signature `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SignedBundle) Reset()         { *m = SignedBundle{} }
func (m *SignedBundle) String() string { return proto.CompactTextString(m) }
func (*SignedBundle) ProtoMessage()    {}
func (*SignedBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{41}
}

func (m *SignedBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedBundle.Unmarshal(m, b)
}
func (m *SignedBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedBundle.Marshal(b, m, deterministic)
}
func (m *SignedBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBundle.Merge(m, src)
}
func (m *SignedBundle) XXX_Size() int {
	return xxx_messageInfo_SignedBundle.Size(m)
}
func (m *SignedBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBundle.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBundle proto.InternalMessageInfo

func (m *SignedBundle) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SignedBundle) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network.
type NodeSignature struct {
	// The identifier of the resource being signed.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// The signature.
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	// The kind of resource being signed.
	Kind                 NodeSignatureKind `protobuf:"varint,3,opt,name=kind,proto3,enum=vega.NodeSignatureKind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeSignature) Reset()         { *m = NodeSignature{} }
func (m *NodeSignature) String() string { return proto.CompactTextString(m) }
func (*NodeSignature) ProtoMessage()    {}
func (*NodeSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb6b8173ee11af27, []int{42}
}

func (m *NodeSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeSignature.Unmarshal(m, b)
}
func (m *NodeSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeSignature.Marshal(b, m, deterministic)
}
func (m *NodeSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSignature.Merge(m, src)
}
func (m *NodeSignature) XXX_Size() int {
	return xxx_messageInfo_NodeSignature.Size(m)
}
func (m *NodeSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSignature.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSignature proto.InternalMessageInfo

func (m *NodeSignature) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *NodeSignature) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *NodeSignature) GetKind() NodeSignatureKind {
	if m != nil {
		return m.Kind
	}
	return NodeSignatureKind_NODE_SIGNATURE_KIND_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("vega.Side", Side_name, Side_value)
	proto.RegisterEnum("vega.Interval", Interval_name, Interval_value)
	proto.RegisterEnum("vega.MarketState", MarketState_name, MarketState_value)
	proto.RegisterEnum("vega.OrderError", OrderError_name, OrderError_value)
	proto.RegisterEnum("vega.ChainStatus", ChainStatus_name, ChainStatus_value)
	proto.RegisterEnum("vega.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("vega.TransferType", TransferType_name, TransferType_value)
	proto.RegisterEnum("vega.NodeSignatureKind", NodeSignatureKind_name, NodeSignatureKind_value)
	proto.RegisterEnum("vega.Order_TimeInForce", Order_TimeInForce_name, Order_TimeInForce_value)
	proto.RegisterEnum("vega.Order_Type", Order_Type_name, Order_Type_value)
	proto.RegisterEnum("vega.Order_Status", Order_Status_name, Order_Status_value)
	proto.RegisterEnum("vega.Trade_Type", Trade_Type_name, Trade_Type_value)
	proto.RegisterEnum("vega.Deposit_Status", Deposit_Status_name, Deposit_Status_value)
	proto.RegisterEnum("vega.Withdrawal_Status", Withdrawal_Status_name, Withdrawal_Status_value)
	proto.RegisterType((*Price)(nil), "vega.Price")
	proto.RegisterType((*Timestamp)(nil), "vega.Timestamp")
	proto.RegisterType((*Party)(nil), "vega.Party")
	proto.RegisterType((*RiskFactor)(nil), "vega.RiskFactor")
	proto.RegisterType((*RiskResult)(nil), "vega.RiskResult")
	proto.RegisterMapType((map[string]*RiskFactor)(nil), "vega.RiskResult.PredictedNextRiskFactorsEntry")
	proto.RegisterMapType((map[string]*RiskFactor)(nil), "vega.RiskResult.RiskFactorsEntry")
	proto.RegisterType((*Order)(nil), "vega.Order")
	proto.RegisterType((*OrderCancellationConfirmation)(nil), "vega.OrderCancellationConfirmation")
	proto.RegisterType((*OrderConfirmation)(nil), "vega.OrderConfirmation")
	proto.RegisterType((*AuctionIndicativeState)(nil), "vega.AuctionIndicativeState")
	proto.RegisterType((*Trade)(nil), "vega.Trade")
	proto.RegisterType((*Fee)(nil), "vega.Fee")
	proto.RegisterType((*TradeSet)(nil), "vega.TradeSet")
	proto.RegisterType((*Candle)(nil), "vega.Candle")
	proto.RegisterType((*PriceLevel)(nil), "vega.PriceLevel")
	proto.RegisterType((*MarketDepth)(nil), "vega.MarketDepth")
	proto.RegisterType((*MarketDepthUpdate)(nil), "vega.MarketDepthUpdate")
	proto.RegisterType((*Position)(nil), "vega.Position")
	proto.RegisterType((*PositionTrade)(nil), "vega.PositionTrade")
	proto.RegisterType((*Statistics)(nil), "vega.Statistics")
	proto.RegisterType((*Deposit)(nil), "vega.Deposit")
	proto.RegisterType((*Withdrawal)(nil), "vega.Withdrawal")
	proto.RegisterType((*WithdrawSubmission)(nil), "vega.WithdrawSubmission")
	proto.RegisterType((*WithdrawExt)(nil), "vega.WithdrawExt")
	proto.RegisterType((*Erc20WithdrawExt)(nil), "vega.Erc20WithdrawExt")
	proto.RegisterType((*OrderAmendment)(nil), "vega.OrderAmendment")
	proto.RegisterType((*OrderSubmission)(nil), "vega.OrderSubmission")
	proto.RegisterType((*OrderCancellation)(nil), "vega.OrderCancellation")
	proto.RegisterType((*NodeRegistration)(nil), "vega.NodeRegistration")
	proto.RegisterType((*NodeVote)(nil), "vega.NodeVote")
	proto.RegisterType((*Account)(nil), "vega.Account")
	proto.RegisterType((*FinancialAmount)(nil), "vega.FinancialAmount")
	proto.RegisterType((*Transfer)(nil), "vega.Transfer")
	proto.RegisterType((*TransferRequest)(nil), "vega.TransferRequest")
	proto.RegisterType((*LedgerEntry)(nil), "vega.LedgerEntry")
	proto.RegisterType((*TransferBalance)(nil), "vega.TransferBalance")
	proto.RegisterType((*TransferResponse)(nil), "vega.TransferResponse")
	proto.RegisterType((*MarginLevels)(nil), "vega.MarginLevels")
	proto.RegisterType((*MarketData)(nil), "vega.MarketData")
	proto.RegisterType((*ErrorDetail)(nil), "vega.ErrorDetail")
	proto.RegisterType((*Transaction)(nil), "vega.Transaction")
	proto.RegisterType((*Signature)(nil), "vega.Signature")
	proto.RegisterType((*SignedBundle)(nil), "vega.SignedBundle")
	proto.RegisterType((*NodeSignature)(nil), "vega.NodeSignature")
}

func init() { proto.RegisterFile("proto/vega.proto", fileDescriptor_bb6b8173ee11af27) }

var fileDescriptor_bb6b8173ee11af27 = []byte{
	// 4360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x24, 0x49,
	0x56, 0xef, 0xac, 0x2f, 0xbb, 0x5e, 0xd9, 0xdd, 0xd9, 0xd1, 0x5f, 0xd5, 0xee, 0x2f, 0x77, 0xce,
	0x97, 0xd7, 0x3b, 0xd3, 0x3d, 0xd3, 0xb3, 0x3b, 0xda, 0x5d, 0x2d, 0x42, 0xe9, 0xaa, 0x2c, 0x3b,
	0x71, 0x39, 0xab, 0x26, 0x2a, 0xdd, 0x3d, 0x3d, 0x02, 0x4a, 0xe9, 0xaa, 0xb0, 0x9d, 0x74, 0x39,
	0xab, 0x36, 0x33, 0xcb, 0xdd, 0x5e, 0x09, 0x69, 0x41, 0x20, 0x81, 0xb8, 0xec, 0x05, 0x09, 0x69,
	0x24, 0x24, 0x58, 0x84, 0x38, 0x70, 0x42, 0xe2, 0x3f, 0xe0, 0x88, 0x38, 0x70, 0x40, 0xe2, 0xb4,
	0x68, 0xc5, 0x05, 0xae, 0x70, 0xe1, 0x86, 0x5e, 0x44, 0x64, 0x66, 0x64, 0x56, 0xb9, 0x67, 0x46,
	0x5c, 0x38, 0x55, 0xc5, 0xef, 0xbd, 0x88, 0x78, 0xf1, 0xde, 0x8b, 0x17, 0x2f, 0x5e, 0x24, 0xe8,
	0xb3, 0x70, 0x1a, 0x4f, 0x9f, 0x9e, 0xb3, 0x13, 0xef, 0x09, 0xff, 0x4b, 0x2a, 0xf8, 0x7f, 0xe3,
	0xb3, 0x13, 0x3f, 0x3e, 0x9d, 0x1f, 0x3d, 0x19, 0x4d, 0xcf, 0x9e, 0x9e, 0xbd, 0xf6, 0xe3, 0x57,
	0xd3, 0xd7, 0x4f, 0x4f, 0xa6, 0x1f, 0x71, 0x96, 0x8f, 0xce, 0xbd, 0x89, 0x3f, 0xf6, 0xe2, 0x69,
	0x18, 0x3d, 0x4d, 0xff, 0x8a, 0xde, 0xc6, 0x03, 0xa8, 0xf6, 0x43, 0x7f, 0xc4, 0xc8, 0x4d, 0xa8,
	0x9e, 0x7b, 0x93, 0x39, 0x6b, 0x6a, 0x9b, 0xda, 0x56, 0x85, 0x8a, 0x86, 0xf1, 0x18, 0xea, 0xae,
	0x7f, 0xc6, 0xa2, 0xd8, 0x3b, 0x9b, 0xe5, 0x59, 0xca, 0x09, 0xcb, 0x23, 0xa8, 0xf6, 0xbd, 0x30,
	0xbe, 0x20, 0xb7, 0xa1, 0xe4, 0x8f, 0x39, 0xad, 0xbe, 0x53, 0xfb, 0xd5, 0x2f, 0x1f, 0x95, 0x36,
	0x35, 0x5a, 0xf2, 0xc7, 0x86, 0x03, 0x40, 0xfd, 0xe8, 0x55, 0xc7, 0x1b, 0xc5, 0xd3, 0x90, 0xdc,
	0x86, 0xda, 0x99, 0x17, 0xbe, 0x62, 0xb1, 0xe0, 0xa4, 0xb2, 0x85, 0x83, 0x47, 0xa7, 0xd3, 0x30,
	0x6e, 0x96, 0x36, 0xb5, 0x2d, 0x8d, 0x8a, 0x06, 0x21, 0x50, 0x99, 0x4c, 0x83, 0x93, 0x66, 0x99,
	0x83, 0xfc, 0xbf, 0xf1, 0x8f, 0x65, 0x31, 0x20, 0x65, 0xd1, 0x7c, 0x12, 0x93, 0x6d, 0xd0, 0xe7,
	0xb3, 0xb1, 0x17, 0xb3, 0x71, 0x2a, 0xa9, 0x14, 0x70, 0x01, 0x27, 0x2d, 0x68, 0x84, 0xa9, 0x28,
	0x51, 0xb3, 0xb4, 0x59, 0xde, 0x6a, 0x3c, 0x7b, 0xfc, 0x84, 0x6b, 0x33, 0x1b, 0xf2, 0x49, 0x26,
	0x6e, 0x64, 0x05, 0x71, 0x78, 0x41, 0xd5, 0x5e, 0xe4, 0x63, 0xb8, 0x11, 0xb0, 0x37, 0xf1, 0x21,
	0x1f, 0x3c, 0x9b, 0xb3, 0xcc, 0xe7, 0x5c, 0x46, 0x22, 0xbf, 0x03, 0xcd, 0x59, 0xc8, 0xc6, 0xfe,
	0x28, 0x66, 0x63, 0x87, 0xbd, 0x89, 0x95, 0xf1, 0x9b, 0x15, 0x2e, 0xc3, 0x93, 0x05, 0x19, 0xfa,
	0x97, 0x74, 0x10, 0x02, 0x5d, 0x3a, 0xde, 0x46, 0x1f, 0xf4, 0x22, 0x37, 0xd1, 0xa1, 0xfc, 0x8a,
	0x5d, 0x48, 0x85, 0xe3, 0x5f, 0xf2, 0x7e, 0x62, 0x4a, 0xd4, 0x76, 0xe3, 0x99, 0x9e, 0x4d, 0x2f,
	0x3a, 0x4a, 0xe3, 0xfe, 0xa8, 0xf4, 0x03, 0x6d, 0xe3, 0xb7, 0xe0, 0xc1, 0x5b, 0x85, 0xf9, 0xbf,
	0x0d, 0x6f, 0xfc, 0x7c, 0x05, 0xaa, 0xbd, 0x70, 0xcc, 0x42, 0x72, 0x35, 0x73, 0x20, 0x74, 0x1c,
	0xb2, 0x01, 0xab, 0xc2, 0x39, 0xec, 0x36, 0x1f, 0xa8, 0x4e, 0xd3, 0x36, 0x69, 0xc2, 0xca, 0x0c,
	0xbd, 0xce, 0x6e, 0x73, 0xc5, 0xd7, 0x69, 0xd2, 0x24, 0x0f, 0xa1, 0x12, 0xf9, 0x63, 0xd6, 0xac,
	0x6c, 0x6a, 0x5b, 0x57, 0x9f, 0x81, 0x98, 0x7a, 0xe0, 0x8f, 0x19, 0xe5, 0x38, 0x3a, 0xda, 0x0c,
	0x3d, 0xbe, 0x59, 0x15, 0x8e, 0xce, 0x1b, 0xe8, 0x68, 0x91, 0xff, 0x53, 0xd6, 0xac, 0x71, 0x90,
	0xff, 0x27, 0xf7, 0xa1, 0x1e, 0xb2, 0x33, 0xcf, 0x0f, 0xfc, 0xe0, 0xa4, 0xb9, 0xc2, 0x09, 0x19,
	0x40, 0x7e, 0x08, 0x8d, 0xd8, 0x3f, 0x63, 0x76, 0xd0, 0x99, 0x86, 0x23, 0xd6, 0x5c, 0xe5, 0xd3,
	0xdd, 0x11, 0xd3, 0xf1, 0xf5, 0x3c, 0x71, 0x33, 0x32, 0x55, 0x79, 0xc9, 0xbb, 0x50, 0x89, 0x2f,
	0x66, 0xac, 0x59, 0xe7, 0x7d, 0xf4, 0x5c, 0x9f, 0x8b, 0x19, 0xa3, 0x9c, 0x8a, 0xd3, 0x8f, 0x42,
	0x86, 0x0e, 0x6c, 0xc6, 0x4d, 0xe0, 0xde, 0x95, 0x01, 0x64, 0x1b, 0x6a, 0x51, 0xec, 0xc5, 0xf3,
	0xa8, 0xd9, 0xe0, 0xa3, 0x10, 0x75, 0x94, 0x01, 0xa7, 0x50, 0xc9, 0x81, 0x23, 0xb1, 0x37, 0x33,
	0x3f, 0x64, 0x91, 0x19, 0x37, 0xd7, 0xc4, 0x48, 0x29, 0x20, 0x96, 0x79, 0xcc, 0x42, 0x16, 0x8c,
	0x58, 0x73, 0x9d, 0x2b, 0x33, 0x03, 0xc8, 0x16, 0xd4, 0x42, 0xe6, 0x45, 0xd3, 0xa0, 0x79, 0x75,
	0x41, 0x5a, 0x2b, 0x0c, 0xa7, 0x21, 0x95, 0x74, 0x1c, 0x47, 0x6e, 0x38, 0x33, 0x6e, 0x5e, 0x13,
	0xb3, 0xa4, 0x00, 0x1a, 0xec, 0x9c, 0x85, 0x91, 0x3f, 0x0d, 0x9a, 0x3a, 0x57, 0x65, 0xd2, 0x44,
	0xca, 0x91, 0x17, 0x8f, 0x4e, 0xed, 0x76, 0xf3, 0xba, 0xa0, 0xc8, 0xa6, 0x31, 0x83, 0x86, 0xa2,
	0x43, 0x72, 0x03, 0xae, 0xb9, 0x76, 0x67, 0x78, 0xe8, 0x0c, 0xfa, 0x56, 0xcb, 0xee, 0xd8, 0x56,
	0x5b, 0xbf, 0x42, 0x1a, 0xb0, 0x82, 0xe0, 0xae, 0xdb, 0xd2, 0xb5, 0xac, 0xe1, 0xea, 0xa5, 0xa4,
	0x61, 0xf7, 0x5a, 0x7a, 0x39, 0x69, 0x74, 0x7a, 0xfb, 0x7a, 0x25, 0x65, 0xeb, 0x98, 0x7a, 0x35,
	0x6b, 0x38, 0x7a, 0xcd, 0xe8, 0x41, 0x05, 0x2d, 0x40, 0x6e, 0x82, 0xee, 0xbe, 0xec, 0x5b, 0x85,
	0xb9, 0xae, 0x02, 0x70, 0xb4, 0x6b, 0x1f, 0xd8, 0xae, 0xae, 0x91, 0x6b, 0xd0, 0xe0, 0xed, 0x03,
	0x93, 0xee, 0x5b, 0x38, 0xa5, 0x0e, 0x6b, 0x1c, 0x70, 0x2c, 0xf7, 0x45, 0x8f, 0xee, 0xeb, 0x65,
	0xe3, 0xef, 0x34, 0xa8, 0x09, 0x6b, 0x10, 0x02, 0x57, 0x07, 0xae, 0xe9, 0x1e, 0x0e, 0x86, 0xb6,
	0xf3, 0xdc, 0xec, 0xda, 0x38, 0xe2, 0x75, 0x58, 0x97, 0x98, 0xd9, 0x72, 0xed, 0xe7, 0x96, 0xae,
	0x29, 0x6c, 0xd6, 0x17, 0x7d, 0x9b, 0x5a, 0x6d, 0xbd, 0x84, 0xe2, 0x48, 0xac, 0x65, 0x3a, 0x2d,
	0xab, 0xdb, 0xb5, 0xda, 0x7a, 0x59, 0xe1, 0x1c, 0xb8, 0xbd, 0x7e, 0xdf, 0x6a, 0xeb, 0x15, 0x65,
	0xc0, 0x8e, 0xcd, 0xd9, 0xaa, 0xa8, 0x36, 0x09, 0x51, 0xeb, 0x37, 0xac, 0x96, 0x6b, 0xb5, 0xf5,
	0x1a, 0xb9, 0x07, 0x77, 0x24, 0xd8, 0x37, 0xa9, 0x6b, 0x9b, 0xdd, 0xee, 0xcb, 0xa4, 0xc7, 0x8a,
	0xb1, 0x03, 0x0f, 0xb8, 0x7d, 0x5b, 0x5e, 0x30, 0x62, 0x93, 0x89, 0x17, 0xfb, 0xd3, 0xa0, 0x35,
	0x0d, 0x8e, 0xfd, 0xf0, 0x8c, 0xff, 0x27, 0x8f, 0xa1, 0x3a, 0x45, 0x06, 0xbe, 0x59, 0x1b, 0xcf,
	0x1a, 0x8a, 0x4f, 0x50, 0x41, 0x31, 0xfe, 0x5c, 0x83, 0xeb, 0x62, 0x90, 0x6f, 0xd7, 0x91, 0xbc,
	0x03, 0xb5, 0x38, 0xf4, 0xc6, 0x2c, 0x09, 0xcf, 0x92, 0xc7, 0x45, 0x8c, 0x4a, 0x12, 0x31, 0xe1,
	0xd6, 0xcc, 0x8b, 0x22, 0xff, 0x9c, 0xf1, 0xbe, 0x91, 0x79, 0x7c, 0xcc, 0x30, 0x3e, 0x35, 0xcb,
	0x6a, 0x1f, 0x31, 0xee, 0x72, 0x4e, 0xe3, 0x9f, 0x34, 0xb8, 0x6d, 0xce, 0x47, 0x28, 0x96, 0x1d,
	0x8c, 0xfd, 0x91, 0x17, 0xfb, 0xe7, 0x0c, 0x4d, 0xc5, 0x72, 0x81, 0x47, 0x2b, 0x04, 0x9e, 0x2d,
	0xb8, 0xe6, 0xa7, 0xec, 0xfc, 0xe8, 0xe4, 0xb1, 0xa9, 0x42, 0x8b, 0x30, 0x1e, 0x4c, 0x19, 0xf4,
	0x7c, 0x3a, 0x99, 0x9f, 0x31, 0x1e, 0xab, 0x2a, 0x74, 0x01, 0x27, 0x06, 0xac, 0x79, 0x42, 0x96,
	0x41, 0xec, 0x85, 0x31, 0x0f, 0x5e, 0x65, 0x9a, 0xc3, 0xc8, 0x43, 0x00, 0xd9, 0xb6, 0x82, 0x31,
	0x8f, 0x5e, 0x65, 0xaa, 0x20, 0xc6, 0x3f, 0x57, 0xa0, 0xca, 0xb5, 0xf4, 0xad, 0x02, 0x69, 0x1a,
	0x0e, 0xcb, 0xcb, 0xc2, 0x61, 0x45, 0x09, 0x87, 0x37, 0xa1, 0x7a, 0x34, 0xbf, 0x60, 0x21, 0x9f,
	0xba, 0x4e, 0x45, 0x03, 0xcf, 0xf3, 0x88, 0x4d, 0x26, 0x2c, 0xe4, 0xa1, 0xb3, 0x4e, 0x65, 0x8b,
	0x6c, 0x41, 0xdd, 0x3b, 0x39, 0x09, 0x59, 0x14, 0x4d, 0x43, 0x1e, 0x3c, 0xf3, 0xb1, 0x38, 0x23,
	0xa2, 0x74, 0x47, 0xf3, 0x0b, 0x6e, 0x1d, 0x1e, 0x45, 0xeb, 0x34, 0x6d, 0x63, 0x4c, 0xc1, 0xf1,
	0x04, 0xb1, 0x2e, 0x62, 0x53, 0x0a, 0x20, 0x35, 0x4e, 0xcf, 0x5f, 0x19, 0x21, 0x53, 0x20, 0x8d,
	0xb2, 0x0d, 0x35, 0x6e, 0x71, 0x05, 0xa9, 0x51, 0xf6, 0x3d, 0x3e, 0x3b, 0x0b, 0x3b, 0x8c, 0xf1,
	0xd0, 0xd8, 0x78, 0x56, 0x17, 0x9c, 0x1d, 0xc6, 0x68, 0x4a, 0x22, 0x1f, 0x08, 0x41, 0x04, 0xdf,
	0x7a, 0x91, 0x2f, 0xa3, 0x91, 0x0f, 0xe1, 0x3a, 0xef, 0x24, 0x5d, 0x6b, 0x07, 0x43, 0x19, 0x0f,
	0x9d, 0x15, 0xba, 0x48, 0x20, 0x4f, 0x80, 0x88, 0xae, 0x39, 0xf6, 0x6b, 0x9c, 0x7d, 0x09, 0xc5,
	0x98, 0xbe, 0x35, 0x3e, 0x25, 0xe1, 0xa7, 0x6d, 0x75, 0xcc, 0xc3, 0x2e, 0x46, 0xa8, 0x47, 0x70,
	0x4f, 0x0d, 0x48, 0xc3, 0x56, 0xb7, 0x37, 0xb0, 0x86, 0xbd, 0x43, 0x77, 0xb8, 0xdb, 0xeb, 0x61,
	0x64, 0x79, 0x08, 0x1b, 0x97, 0x30, 0xec, 0x98, 0x6d, 0xbd, 0x6c, 0x44, 0x50, 0xc6, 0x55, 0x71,
	0x0f, 0x7a, 0x25, 0x56, 0x2f, 0x12, 0xc4, 0xb4, 0x8d, 0x2b, 0xf6, 0x83, 0xe3, 0xd0, 0x8b, 0xe2,
	0x70, 0x3e, 0x8a, 0xe7, 0x21, 0x43, 0x26, 0xb1, 0x27, 0x16, 0x09, 0xe8, 0xe9, 0x13, 0xff, 0x27,
	0x73, 0x7f, 0xec, 0xc7, 0x17, 0xc8, 0x28, 0xdc, 0x2e, 0x87, 0x19, 0x4f, 0x61, 0x95, 0xdb, 0x69,
	0xc0, 0x62, 0x25, 0x1c, 0x68, 0x97, 0x86, 0x03, 0xe3, 0x5f, 0x34, 0xa8, 0xb5, 0xbc, 0x60, 0x3c,
	0x61, 0x79, 0x9f, 0xd0, 0x8a, 0x3e, 0xb1, 0x01, 0xab, 0x78, 0x20, 0x21, 0x90, 0xec, 0x84, 0xa4,
	0x8d, 0x3e, 0x7f, 0xea, 0x9f, 0x9c, 0x4a, 0x89, 0xf8, 0x7f, 0x4c, 0x6d, 0x26, 0xd3, 0xd7, 0x72,
	0x1b, 0xe0, 0x5f, 0xe4, 0x9a, 0xce, 0x58, 0x20, 0xb3, 0x07, 0xfe, 0x1f, 0x77, 0xc6, 0x68, 0x32,
	0x8d, 0x92, 0xec, 0x41, 0x34, 0x70, 0x67, 0x9c, 0x8b, 0x5d, 0x2f, 0x72, 0x07, 0xd9, 0x22, 0xdb,
	0xb0, 0xea, 0x07, 0x31, 0x0b, 0xcf, 0xbd, 0x89, 0xcc, 0x1a, 0xae, 0x8a, 0x35, 0xd9, 0x12, 0xa5,
	0x29, 0xdd, 0x38, 0x02, 0xe0, 0xc1, 0xa4, 0xcb, 0xce, 0xd9, 0x24, 0xdb, 0xab, 0x9a, 0xba, 0x57,
	0xdf, 0x87, 0xab, 0xc1, 0xfc, 0xec, 0x88, 0x85, 0xbd, 0x63, 0x11, 0xe2, 0xa4, 0xf2, 0x0b, 0xa8,
	0x22, 0x4f, 0x59, 0x95, 0xc7, 0xf8, 0x4a, 0x83, 0xc6, 0x01, 0x0f, 0x07, 0x6d, 0x36, 0x8b, 0x4f,
	0xdf, 0x1a, 0xfd, 0x0c, 0x28, 0x1f, 0xcd, 0x2f, 0x64, 0x64, 0x96, 0x5b, 0x2a, 0x13, 0x90, 0x22,
	0x11, 0xf7, 0x1d, 0x7a, 0xae, 0x0c, 0xc5, 0x8b, 0x4c, 0x9c, 0x8a, 0x52, 0x47, 0xec, 0x27, 0x73,
	0xcc, 0x31, 0x1c, 0x2e, 0xa7, 0x54, 0x72, 0x01, 0x35, 0xfe, 0x42, 0x83, 0xeb, 0x8a, 0x74, 0x22,
	0xb5, 0xfe, 0x7f, 0x26, 0xe3, 0x7f, 0x6b, 0xb0, 0xda, 0x9f, 0x46, 0x3e, 0x3f, 0xe2, 0xde, 0x26,
	0x9a, 0x92, 0xb5, 0x96, 0x8a, 0x59, 0x2b, 0xa0, 0x2b, 0x29, 0xc7, 0x44, 0x99, 0x2a, 0x08, 0xd9,
	0x84, 0x46, 0xc8, 0xbc, 0x89, 0x1f, 0xb1, 0x71, 0xdf, 0xe9, 0xca, 0xf3, 0x41, 0x85, 0xc8, 0xbb,
	0xb0, 0x3e, 0x0f, 0x54, 0x1e, 0x71, 0x42, 0xe4, 0x41, 0xdc, 0xac, 0xde, 0x39, 0x0b, 0xbd, 0x13,
	0xc6, 0x73, 0x77, 0x71, 0x80, 0x09, 0xb7, 0x5d, 0x24, 0xe4, 0x53, 0xba, 0x95, 0x42, 0x4a, 0x67,
	0xfc, 0x1a, 0xac, 0x27, 0xab, 0x16, 0xe7, 0x4e, 0xe6, 0x61, 0x62, 0xe3, 0x25, 0x1e, 0x9f, 0xfa,
	0x6d, 0x49, 0xf1, 0x5b, 0xe3, 0xbf, 0xea, 0x00, 0x78, 0xde, 0xfa, 0x51, 0xec, 0x8f, 0x22, 0x5c,
	0xe1, 0xd1, 0x64, 0x3a, 0x7a, 0xb5, 0xc7, 0xfc, 0x93, 0xd3, 0x58, 0xba, 0xb8, 0x0a, 0xe1, 0x0a,
	0x8f, 0xbc, 0xd1, 0xab, 0xc9, 0xf4, 0xa4, 0xcb, 0x82, 0x93, 0xf8, 0x54, 0x0e, 0x97, 0x07, 0x51,
	0x93, 0xf1, 0x34, 0xf6, 0x26, 0x7d, 0x86, 0x5b, 0x41, 0xb8, 0xba, 0x82, 0xe0, 0x3c, 0x27, 0x2c,
	0x60, 0x91, 0x1f, 0x61, 0x6e, 0xc9, 0x35, 0x59, 0xa7, 0x2a, 0x84, 0x1c, 0xa3, 0x79, 0x18, 0xb2,
	0x20, 0xe6, 0x1c, 0xe2, 0xb8, 0x53, 0x21, 0xb4, 0x31, 0x7a, 0x0c, 0x27, 0x8b, 0x63, 0x2f, 0x6d,
	0x93, 0xef, 0xa4, 0x89, 0xb9, 0x38, 0xf5, 0xae, 0x0b, 0xe7, 0x6a, 0x9d, 0x7a, 0x7e, 0x50, 0xc8,
	0xcb, 0x51, 0xd4, 0x37, 0x7d, 0x16, 0xee, 0xe0, 0x22, 0x79, 0x2c, 0x40, 0x51, 0x53, 0x04, 0xfd,
	0x4f, 0xda, 0xc4, 0x7d, 0xb3, 0x73, 0x11, 0xb3, 0x88, 0x1f, 0x81, 0x15, 0x5a, 0x40, 0xc9, 0xf7,
	0xe0, 0x96, 0x44, 0xc4, 0x56, 0x4f, 0x87, 0x04, 0xce, 0xbe, 0x9c, 0x88, 0x99, 0x8c, 0x08, 0x9f,
	0x7d, 0x16, 0x0e, 0xd8, 0x68, 0x1a, 0x8c, 0xf9, 0x51, 0x59, 0xa1, 0x45, 0x18, 0x39, 0xa7, 0x49,
	0x5f, 0xc9, 0xb9, 0x26, 0x38, 0x0b, 0x30, 0x46, 0x77, 0xae, 0x6a, 0xb1, 0x63, 0x23, 0x7e, 0x52,
	0x56, 0x68, 0x0e, 0xe3, 0xf3, 0x62, 0xdb, 0x3c, 0x63, 0xc1, 0x58, 0x9c, 0xec, 0xba, 0x9c, 0x37,
	0x0f, 0x63, 0x06, 0xc5, 0x21, 0x91, 0x87, 0x0a, 0x56, 0x71, 0x45, 0x58, 0xc0, 0x33, 0x5e, 0x7e,
	0x43, 0x12, 0xbc, 0x44, 0xe5, 0xcd, 0x70, 0x34, 0x30, 0xc7, 0x64, 0xb8, 0xbc, 0x21, 0x5c, 0x4d,
	0x81, 0x52, 0x0e, 0x57, 0x1c, 0x3d, 0x37, 0x15, 0x0e, 0x01, 0xe1, 0xc9, 0xcd, 0x17, 0x3f, 0x98,
	0x1f, 0x45, 0xa3, 0xd0, 0x9f, 0xe1, 0x2e, 0x88, 0x9a, 0xb7, 0x36, 0xb5, 0xad, 0x75, 0xba, 0x84,
	0x82, 0xfc, 0x5c, 0xad, 0x79, 0xfe, 0xdb, 0x82, 0x7f, 0x91, 0x42, 0x3e, 0x86, 0x1b, 0x23, 0x7e,
	0xa2, 0xe5, 0x3b, 0xdc, 0xe1, 0x1d, 0x96, 0x91, 0xc8, 0x8f, 0xa0, 0x79, 0x96, 0x05, 0xca, 0x7c,
	0xb7, 0x26, 0xef, 0x76, 0x29, 0x9d, 0x7c, 0x06, 0xb7, 0x67, 0x72, 0x2b, 0x47, 0xf9, 0x9e, 0x77,
	0x79, 0xcf, 0x4b, 0xa8, 0xe4, 0x19, 0xdc, 0xf4, 0x46, 0xa3, 0xe9, 0x3c, 0x88, 0xf3, 0xbd, 0x36,
	0x78, 0xaf, 0xa5, 0x34, 0xf2, 0x03, 0xb8, 0x23, 0xe5, 0xf0, 0x62, 0x2f, 0xdf, 0xed, 0x1e, 0xef,
	0x76, 0x19, 0x99, 0xef, 0x87, 0xd9, 0xec, 0xb9, 0xb8, 0x37, 0xee, 0x79, 0xd1, 0x69, 0xf3, 0x3e,
	0xdf, 0x7c, 0x05, 0x94, 0x67, 0xca, 0x29, 0xd2, 0x7c, 0xc0, 0x79, 0x14, 0x04, 0xbd, 0x74, 0x84,
	0xdb, 0x31, 0xe1, 0x78, 0xc8, 0x39, 0x72, 0x18, 0x0f, 0x36, 0xb8, 0x4d, 0xda, 0xf3, 0x90, 0x5f,
	0x5d, 0x9a, 0x8f, 0x64, 0xb0, 0x51, 0x41, 0x8c, 0x78, 0xf3, 0x19, 0xcf, 0x26, 0x36, 0x45, 0xf6,
	0x2b, 0x5a, 0x18, 0xe8, 0xf9, 0x68, 0x76, 0xbb, 0xf9, 0x58, 0x04, 0x7a, 0xd9, 0x34, 0x7e, 0x56,
	0x86, 0x95, 0x36, 0xe3, 0xea, 0x5c, 0xc8, 0xd3, 0x3f, 0x4c, 0x43, 0x47, 0x89, 0x87, 0x8e, 0x9b,
	0x22, 0x74, 0x48, 0xf6, 0xe2, 0xad, 0xfe, 0xf2, 0x12, 0xc8, 0x4d, 0xa8, 0x7a, 0x51, 0xc4, 0x62,
	0x19, 0xdc, 0x44, 0x03, 0x65, 0xf5, 0xce, 0xd0, 0x1c, 0x32, 0xa2, 0xc9, 0x16, 0xe2, 0xf1, 0x1b,
	0xae, 0x4d, 0x99, 0xc1, 0x8b, 0x16, 0x1e, 0x15, 0xa3, 0x90, 0x8d, 0xfd, 0x5c, 0x65, 0x4d, 0x1c,
	0x02, 0x8b, 0x04, 0xdc, 0x7f, 0xb2, 0x38, 0x91, 0x31, 0xaf, 0x8a, 0x32, 0x5c, 0x11, 0x37, 0x7e,
	0x37, 0xbd, 0x13, 0x3f, 0x84, 0x8d, 0xb6, 0xd5, 0xef, 0x0d, 0x6c, 0x77, 0x28, 0xaf, 0xa3, 0xf9,
	0x8c, 0xf6, 0x0e, 0xdc, 0x28, 0xd0, 0x7b, 0x7d, 0xcb, 0xd1, 0x35, 0x72, 0x1f, 0x9a, 0x05, 0x42,
	0x76, 0x33, 0x2e, 0x2d, 0xa1, 0x76, 0x6c, 0xc7, 0xec, 0xda, 0x5f, 0xe2, 0xbd, 0xd9, 0xf8, 0xf7,
	0x32, 0xc0, 0x0b, 0x3f, 0x3e, 0x1d, 0x87, 0xde, 0x6b, 0x6f, 0xb2, 0x60, 0x85, 0xcb, 0x0f, 0xe9,
	0x4c, 0x83, 0x32, 0x83, 0x92, 0x1a, 0x5c, 0xae, 0xef, 0xa7, 0xa9, 0x35, 0xab, 0x6a, 0x6d, 0x28,
	0x9b, 0xb9, 0x68, 0x50, 0x1d, 0xca, 0x21, 0x3b, 0x96, 0x56, 0xc0, 0xbf, 0x38, 0x21, 0xaf, 0xd3,
	0x5c, 0x48, 0xbd, 0xcb, 0x96, 0x62, 0xb2, 0xd5, 0x9c, 0xc9, 0x96, 0x19, 0xa1, 0xbe, 0xdc, 0x08,
	0x18, 0x90, 0x5e, 0x4b, 0x51, 0x02, 0xb7, 0x70, 0x8b, 0x5a, 0x42, 0x21, 0xef, 0x40, 0x99, 0xbd,
	0x89, 0xf9, 0x11, 0xd1, 0x48, 0x0e, 0xb5, 0x64, 0x2d, 0xd6, 0x9b, 0x98, 0x22, 0xd5, 0xf8, 0xe3,
	0xac, 0xdc, 0xf1, 0x18, 0x1e, 0xbc, 0xb0, 0xdd, 0xbd, 0x36, 0x35, 0x5f, 0x98, 0xdd, 0xe5, 0xd6,
	0xdd, 0x80, 0xdb, 0x8b, 0x2c, 0xd2, 0xc0, 0x8f, 0xe0, 0xde, 0x22, 0x4d, 0xb5, 0xf1, 0x52, 0x06,
	0xd5, 0xcc, 0xbf, 0xa7, 0x01, 0x49, 0x04, 0x1c, 0xcc, 0x8f, 0xce, 0xfc, 0x28, 0x29, 0x37, 0x25,
	0xe6, 0xd5, 0x2e, 0x33, 0x6f, 0x69, 0xb9, 0x79, 0xcb, 0xaa, 0x79, 0xa5, 0x3e, 0x2a, 0x6f, 0xd5,
	0x47, 0x1b, 0x1a, 0x0a, 0x46, 0x9e, 0x40, 0x95, 0x85, 0xa3, 0x67, 0x1f, 0xcb, 0xf2, 0xc7, 0x6d,
	0xd1, 0xcb, 0x42, 0x48, 0x61, 0xdb, 0xbb, 0x42, 0x05, 0xdb, 0x4e, 0x95, 0xcf, 0x61, 0xfc, 0x18,
	0xf4, 0x22, 0x0f, 0x9e, 0xa2, 0x21, 0x1b, 0x31, 0xff, 0x9c, 0x85, 0xe6, 0x78, 0x8c, 0x57, 0x69,
	0xb9, 0x9c, 0x22, 0x6c, 0x7c, 0x55, 0x82, 0xab, 0xfc, 0x58, 0xe3, 0x27, 0xeb, 0x19, 0x0b, 0x62,
	0xb2, 0x09, 0x2b, 0xfc, 0x88, 0x4a, 0x74, 0x20, 0xea, 0xf5, 0x5f, 0x68, 0x34, 0x81, 0x91, 0x23,
	0xb7, 0x09, 0x32, 0x8e, 0x44, 0x5b, 0x6a, 0x9e, 0x5b, 0x2e, 0xe4, 0xb9, 0x8f, 0x93, 0x84, 0xaf,
	0xa2, 0x96, 0x79, 0x78, 0x4e, 0x99, 0xdc, 0x5a, 0xf0, 0x66, 0xef, 0xff, 0x94, 0xb5, 0xd9, 0x24,
	0xf6, 0x64, 0xaa, 0x9a, 0x01, 0xe4, 0x23, 0xb5, 0x62, 0x59, 0xe3, 0x83, 0x5c, 0x93, 0x17, 0xbf,
	0xc4, 0x21, 0xd5, 0x12, 0x66, 0xa1, 0x16, 0xbb, 0xf2, 0xcd, 0x6b, 0xb1, 0xc6, 0xff, 0x94, 0xe0,
	0x5a, 0x4f, 0x1e, 0xd7, 0x89, 0x8b, 0x2c, 0xbc, 0x64, 0x7c, 0x71, 0x85, 0x47, 0x06, 0xa3, 0x58,
	0x47, 0x49, 0xb5, 0x92, 0x2d, 0x7d, 0xb3, 0x10, 0x95, 0x17, 0x15, 0x77, 0x53, 0x55, 0x4e, 0x7a,
	0x8b, 0xdb, 0x90, 0x15, 0x17, 0x7e, 0xaf, 0x14, 0x9d, 0xf4, 0x2b, 0xb2, 0xf2, 0xf2, 0x81, 0x2c,
	0x69, 0xd7, 0x8a, 0x65, 0x94, 0x9d, 0x95, 0x5f, 0xfd, 0xf2, 0x51, 0xf9, 0x8f, 0x34, 0x4d, 0xd6,
	0xb6, 0x77, 0xbe, 0x8d, 0x1e, 0xb2, 0xce, 0xb9, 0xe2, 0x74, 0xae, 0x58, 0xbc, 0x5a, 0x2c, 0x16,
	0x7f, 0xf4, 0xf6, 0xd2, 0xb5, 0x22, 0x50, 0x52, 0xc3, 0xce, 0x6a, 0xcb, 0x50, 0xa8, 0x2d, 0x1b,
	0xaf, 0x92, 0x12, 0xa1, 0x52, 0x67, 0xc4, 0xfd, 0x99, 0xf3, 0xcd, 0xcc, 0x27, 0xdf, 0x56, 0xc6,
	0xfa, 0x5a, 0xb5, 0x1b, 0xbf, 0x09, 0xba, 0x33, 0x1d, 0x33, 0xca, 0x4e, 0xfc, 0x28, 0x96, 0xc7,
	0xf7, 0x43, 0xa8, 0xcd, 0xe6, 0x47, 0xfb, 0xf2, 0xf1, 0x62, 0x2d, 0xed, 0x24, 0x51, 0xb2, 0x05,
	0x0d, 0x7e, 0x6e, 0xf7, 0x05, 0x53, 0x29, 0xc7, 0xa4, 0x92, 0x8c, 0x3e, 0xac, 0xe2, 0xe8, 0xcf,
	0xa7, 0x31, 0xfb, 0xda, 0x51, 0xdf, 0x55, 0x95, 0x92, 0xf7, 0x23, 0x45, 0x39, 0x7f, 0xa9, 0xc1,
	0x8a, 0x29, 0xf2, 0xa7, 0x85, 0x23, 0xea, 0x26, 0x54, 0xa7, 0xaf, 0x03, 0x16, 0x4a, 0x35, 0x88,
	0x86, 0x28, 0xa4, 0x4f, 0x50, 0x97, 0xf2, 0x7c, 0x4a, 0x9a, 0x97, 0x1c, 0x50, 0xaa, 0x3e, 0xab,
	0x05, 0x7d, 0xbe, 0x27, 0xed, 0x5c, 0x53, 0xef, 0x30, 0x52, 0x9c, 0xac, 0x7a, 0x66, 0xfc, 0x3a,
	0x5c, 0xeb, 0xf8, 0x81, 0x17, 0x8c, 0x7c, 0x4c, 0xdc, 0x93, 0x74, 0x42, 0x46, 0x51, 0x79, 0x09,
	0x2c, 0x46, 0xd1, 0x92, 0x22, 0x83, 0xf1, 0xa7, 0x1a, 0xaf, 0xf5, 0x04, 0xd1, 0x31, 0x0b, 0xb3,
	0x65, 0x69, 0xea, 0xb2, 0x3e, 0xca, 0x85, 0xe5, 0xc6, 0xb3, 0x5b, 0xb2, 0xee, 0x96, 0x9f, 0x37,
	0x9d, 0xe7, 0x7d, 0x29, 0x79, 0x59, 0x7d, 0x16, 0x49, 0xa6, 0xc8, 0x3f, 0xaf, 0x9c, 0xf9, 0x81,
	0xe8, 0x2c, 0xef, 0xd3, 0x19, 0x60, 0xfc, 0xab, 0x06, 0xd7, 0x92, 0x4e, 0x14, 0x6f, 0xfb, 0x11,
	0x1e, 0xe8, 0x8d, 0xe3, 0x70, 0x7a, 0x26, 0xb5, 0x20, 0xeb, 0x51, 0xeb, 0x39, 0xd5, 0x50, 0x95,
	0x83, 0x7c, 0x17, 0xea, 0xf1, 0x34, 0x61, 0x2f, 0x2d, 0x63, 0xcf, 0xe8, 0x97, 0x26, 0x17, 0x0b,
	0x72, 0x56, 0x14, 0x39, 0x33, 0xad, 0x56, 0x55, 0xcb, 0xe6, 0xb6, 0x5d, 0xad, 0xb8, 0xed, 0xfe,
	0x5e, 0x83, 0x46, 0x97, 0x8d, 0x4f, 0x58, 0x28, 0xde, 0xef, 0x36, 0x8b, 0xeb, 0xe2, 0xf7, 0x5d,
	0x75, 0x21, 0xf7, 0xf3, 0x0b, 0xe1, 0xe3, 0x7d, 0x23, 0xc9, 0x33, 0x29, 0x2a, 0xc5, 0x87, 0x25,
	0x22, 0xed, 0x24, 0x04, 0x4f, 0x6d, 0x92, 0x15, 0xef, 0x6a, 0x85, 0xe2, 0x9d, 0xe1, 0x66, 0x26,
	0xd9, 0x91, 0x8e, 0xfd, 0x01, 0xac, 0x78, 0x8a, 0xd8, 0x0b, 0xfa, 0x4d, 0xa8, 0xea, 0xde, 0x28,
	0xe5, 0xf6, 0x86, 0x71, 0x0e, 0x7a, 0x66, 0xe8, 0x68, 0x36, 0x0d, 0x22, 0x46, 0x9e, 0x42, 0x3d,
	0x96, 0x58, 0x52, 0x77, 0x94, 0x5b, 0x40, 0xd1, 0x1b, 0xcd, 0x78, 0xc8, 0x27, 0xb0, 0x2a, 0xc7,
	0x4b, 0x9e, 0x2d, 0x6e, 0xe5, 0x1d, 0x4f, 0x0a, 0x4c, 0x53, 0x36, 0xe3, 0xaf, 0x4b, 0xb0, 0x76,
	0xe0, 0x85, 0x27, 0x7e, 0xc0, 0x4b, 0x4e, 0x11, 0xe6, 0xdb, 0x67, 0x9e, 0x1f, 0xc4, 0x0c, 0xfd,
	0x9a, 0x09, 0x92, 0x2c, 0x83, 0x2c, 0x12, 0xd0, 0x68, 0x11, 0xf3, 0xc2, 0xd1, 0x29, 0xef, 0x2d,
	0x17, 0xa5, 0x42, 0x78, 0x83, 0xf1, 0x03, 0x3f, 0xf6, 0xf9, 0xcd, 0x1b, 0xc7, 0x12, 0xd6, 0xc9,
	0x83, 0x78, 0xf3, 0x1b, 0x4d, 0x31, 0xf6, 0xb2, 0xd0, 0x9b, 0x50, 0x36, 0x61, 0x5e, 0x24, 0x6a,
	0x60, 0xd2, 0xd7, 0x2e, 0xa1, 0xaa, 0x69, 0x54, 0x35, 0x9f, 0x46, 0xa9, 0x61, 0xa5, 0xb6, 0xf8,
	0xda, 0x20, 0xdc, 0x75, 0xa5, 0xe0, 0xae, 0x71, 0xe1, 0xd2, 0xa0, 0x98, 0xfd, 0x4f, 0x2a, 0x00,
	0x07, 0xe9, 0x8d, 0x90, 0xef, 0x07, 0x2f, 0x7c, 0xd5, 0x57, 0x0a, 0xa1, 0x19, 0x80, 0x57, 0xbb,
	0x23, 0x16, 0xc5, 0x3b, 0xfe, 0x58, 0x7d, 0x9b, 0xc9, 0x61, 0xfc, 0x6a, 0x27, 0xda, 0xb9, 0x57,
	0x99, 0x3c, 0x88, 0x97, 0x4d, 0x04, 0x7a, 0xc7, 0xc7, 0x2c, 0xec, 0x2b, 0xe7, 0x75, 0x01, 0xc5,
	0x44, 0x2c, 0x45, 0xe4, 0x78, 0xa2, 0x36, 0x5c, 0x84, 0xb9, 0x62, 0x12, 0xb9, 0x6a, 0xb2, 0x88,
	0x9e, 0xc8, 0x94, 0x7d, 0x16, 0xb1, 0x92, 0xfb, 0x2c, 0xe2, 0xad, 0xaa, 0xc1, 0xd5, 0x4e, 0x67,
	0x2c, 0xe0, 0x85, 0x63, 0x16, 0xc5, 0xb2, 0x3c, 0x94, 0xc3, 0x0a, 0xcf, 0x46, 0x50, 0x7c, 0x36,
	0x5a, 0x78, 0x7a, 0x6a, 0x2c, 0x79, 0x7a, 0x5a, 0xf2, 0xe8, 0xb5, 0xf6, 0xcd, 0x1f, 0xbd, 0xd6,
	0x2f, 0x79, 0xf4, 0xfa, 0x14, 0x1a, 0x62, 0x95, 0xfc, 0xd5, 0x4d, 0xbe, 0x2f, 0xcb, 0x7d, 0x76,
	0x90, 0x11, 0xa8, 0xca, 0x65, 0x7c, 0x0e, 0x0d, 0xfe, 0xec, 0xdc, 0x66, 0xb1, 0xe7, 0x4f, 0x30,
	0x8a, 0x8c, 0xa6, 0x63, 0xe1, 0x08, 0x55, 0xca, 0xff, 0xa3, 0x6b, 0x9e, 0xb1, 0x28, 0xf2, 0x4e,
	0x92, 0x1a, 0x7f, 0xd2, 0x44, 0xf7, 0xf3, 0x03, 0x3c, 0x60, 0x64, 0x26, 0xcf, 0x1b, 0xc6, 0x2f,
	0x34, 0x68, 0xf0, 0x7d, 0xea, 0xf1, 0x25, 0xa3, 0xce, 0xfd, 0x60, 0x36, 0xe7, 0xee, 0x26, 0x8e,
	0x70, 0x9a, 0x01, 0x38, 0x46, 0x30, 0xcd, 0xe2, 0x88, 0x68, 0x14, 0xab, 0x97, 0xe5, 0xc5, 0xea,
	0xe5, 0x3d, 0x58, 0xf1, 0x64, 0xa2, 0xfe, 0x1f, 0x68, 0xe3, 0xb5, 0xbd, 0x2b, 0x34, 0x41, 0xc8,
	0xdd, 0x34, 0x65, 0xf8, 0xcf, 0x84, 0x26, 0x81, 0x9d, 0x1a, 0x54, 0x30, 0x14, 0x1b, 0xfb, 0x50,
	0x1f, 0xf8, 0x27, 0x81, 0x17, 0xcf, 0x43, 0x86, 0x57, 0xc5, 0xc8, 0x3f, 0x91, 0xc2, 0xe1, 0x5f,
	0x54, 0x84, 0x37, 0x39, 0x99, 0xca, 0x15, 0xf3, 0xff, 0xea, 0x9b, 0x7b, 0x39, 0xf7, 0xe6, 0x6e,
	0x98, 0xb0, 0x86, 0x83, 0xb1, 0xf1, 0xce, 0x9c, 0xbf, 0x9a, 0x5c, 0x85, 0x52, 0xfc, 0x46, 0x0e,
	0x57, 0x8a, 0xdf, 0x90, 0xc7, 0x62, 0xfc, 0x92, 0x9a, 0x79, 0xa7, 0xb3, 0xf3, 0x09, 0x8d, 0xdf,
	0x86, 0x75, 0xcc, 0x78, 0x32, 0x99, 0xae, 0x42, 0x29, 0xcd, 0xd9, 0x4a, 0x76, 0x3b, 0x91, 0xb1,
	0x94, 0xc9, 0xf8, 0x5d, 0xa8, 0xbc, 0xf2, 0x83, 0xb1, 0x3c, 0x9a, 0x65, 0x5e, 0x9a, 0x1b, 0x64,
	0xdf, 0x0f, 0xc6, 0x94, 0x33, 0x6d, 0xff, 0x10, 0x2a, 0x03, 0xf1, 0xbd, 0x86, 0x3e, 0xb0, 0xdb,
	0xc5, 0xa7, 0xae, 0x35, 0x58, 0xe5, 0xe8, 0xce, 0xe1, 0x4b, 0x5d, 0x23, 0xeb, 0x50, 0xe7, 0xad,
	0x81, 0xd5, 0xed, 0xea, 0xa5, 0xed, 0x3f, 0xd3, 0x60, 0x35, 0x79, 0x4c, 0x21, 0x4d, 0xb8, 0x69,
	0x3b, 0xae, 0x45, 0x9f, 0x9b, 0xdd, 0xc5, 0xe7, 0xb2, 0x94, 0x62, 0x7f, 0x72, 0xa0, 0xff, 0x98,
	0x5c, 0x57, 0x91, 0xef, 0x1f, 0xe8, 0x7f, 0x5b, 0x22, 0x04, 0xd6, 0x15, 0xa6, 0xef, 0x1f, 0xe8,
	0x7f, 0xb0, 0x92, 0x67, 0xfb, 0x64, 0x4f, 0xff, 0xf9, 0x7d, 0x42, 0x54, 0xe8, 0xb3, 0x3d, 0xfd,
	0xdf, 0xfe, 0x46, 0xcb, 0x63, 0x9f, 0xb4, 0xf5, 0x9f, 0xfd, 0xa2, 0xba, 0x7d, 0x94, 0xbc, 0xb5,
	0x88, 0x97, 0xe6, 0xfb, 0xd0, 0x14, 0x1f, 0x0f, 0xf0, 0x0b, 0x6c, 0x71, 0x91, 0xf7, 0xe0, 0x4e,
	0x8e, 0xda, 0xea, 0x39, 0xae, 0xed, 0x1c, 0xf6, 0x0e, 0x07, 0xba, 0x86, 0xeb, 0xca, 0x11, 0xcd,
	0xc3, 0x96, 0x6b, 0xf7, 0x1c, 0xbd, 0xb4, 0xfd, 0x0f, 0x75, 0x80, 0xec, 0xfb, 0x0c, 0x54, 0x60,
	0x8f, 0xb6, 0x2d, 0x3a, 0xb4, 0x28, 0xed, 0xd1, 0xa1, 0xd3, 0x73, 0x2c, 0xfd, 0x0a, 0x5e, 0xcf,
	0x55, 0x54, 0x7e, 0x92, 0x20, 0x3f, 0x65, 0x18, 0xda, 0x6d, 0x5d, 0x23, 0x9b, 0x70, 0x7f, 0x19,
	0x8b, 0xc0, 0x6c, 0x79, 0x07, 0x57, 0x39, 0x7a, 0x87, 0xee, 0xb0, 0xd7, 0x19, 0x0e, 0xac, 0xcf,
	0x0f, 0x2d, 0xa7, 0x65, 0xe9, 0x65, 0xf2, 0x3e, 0x18, 0xcb, 0x86, 0xa0, 0xd6, 0x81, 0x69, 0x3b,
	0xb6, 0xb3, 0x3b, 0x1c, 0xd8, 0x5f, 0x5a, 0x7a, 0x05, 0xf5, 0xa0, 0xf2, 0xb9, 0xf6, 0x81, 0x35,
	0xec, 0x98, 0x76, 0xf7, 0x90, 0x5a, 0x7a, 0xb5, 0x38, 0x0d, 0xb5, 0x0e, 0x7a, 0xa8, 0xd3, 0x84,
	0xa1, 0x46, 0xbe, 0x0b, 0x1f, 0x2c, 0x9b, 0x86, 0x7f, 0x40, 0x61, 0xa2, 0x56, 0x86, 0x6d, 0xd3,
	0xb5, 0x70, 0x54, 0x7d, 0x85, 0x7c, 0x00, 0xef, 0x5c, 0xbe, 0x2c, 0x6a, 0x75, 0x2c, 0xca, 0x85,
	0x5f, 0x2d, 0xae, 0xdf, 0x6a, 0xdb, 0xee, 0xd0, 0xe9, 0xb9, 0x43, 0xb3, 0xdb, 0xed, 0xbd, 0xb0,
	0xda, 0x7a, 0x9d, 0x3c, 0x80, 0xbb, 0x2a, 0x87, 0x79, 0x60, 0x39, 0xed, 0x54, 0x2c, 0x20, 0x77,
	0xe1, 0x56, 0x5e, 0xf3, 0xee, 0xb0, 0xd3, 0x3b, 0x74, 0xda, 0x7a, 0xe3, 0x32, 0xdd, 0xf6, 0x4d,
	0xea, 0xbe, 0x44, 0xdd, 0xae, 0x15, 0xc7, 0x96, 0x86, 0xe1, 0xef, 0xb3, 0x6d, 0x7d, 0x9d, 0xbc,
	0x03, 0x8f, 0x0a, 0xe4, 0x5d, 0xdb, 0x19, 0xb6, 0xf6, 0xac, 0xd6, 0x3e, 0x97, 0xc0, 0x6a, 0xeb,
	0x57, 0x8b, 0x4b, 0x3d, 0xb0, 0x07, 0x03, 0x54, 0xfa, 0xae, 0xe5, 0x58, 0xd4, 0xec, 0x0e, 0xcd,
	0x56, 0xab, 0x77, 0xe8, 0xb8, 0xfa, 0x35, 0xf2, 0x10, 0x36, 0xf2, 0xe2, 0xb8, 0x16, 0x75, 0xcc,
	0xae, 0x68, 0xea, 0x7a, 0xd1, 0x3e, 0x89, 0xb8, 0xdc, 0x7a, 0xd7, 0x8b, 0xb2, 0xa4, 0x8b, 0xb1,
	0xe8, 0xc0, 0x1e, 0xb8, 0x5c, 0x9b, 0xe4, 0xb2, 0x21, 0xdc, 0x97, 0x7d, 0x4b, 0xbf, 0x51, 0xa4,
	0x0e, 0xac, 0x6e, 0x67, 0xe8, 0x52, 0xb3, 0x6d, 0x3b, 0xbb, 0xfa, 0x4d, 0xf2, 0x04, 0xb6, 0xf3,
	0x7d, 0x07, 0x87, 0x9d, 0x8e, 0xdd, 0xb2, 0x2d, 0xc7, 0x1d, 0x76, 0x0e, 0x9d, 0xf6, 0x60, 0xe8,
	0xf6, 0x86, 0x7d, 0xf3, 0xe5, 0xb0, 0x63, 0x59, 0x03, 0xfd, 0x16, 0x79, 0x0f, 0x1e, 0xe7, 0xf9,
	0x5b, 0x3d, 0x4a, 0xad, 0x96, 0x9b, 0x68, 0x91, 0x4f, 0x7a, 0x7b, 0x91, 0x4d, 0x8a, 0x84, 0xde,
	0x67, 0x3b, 0xc3, 0x4e, 0x8f, 0xb6, 0x2c, 0xfd, 0x4e, 0xd1, 0xbb, 0x76, 0x3b, 0x8e, 0x74, 0x96,
	0xf6, 0x21, 0x45, 0x75, 0x9a, 0x4e, 0xba, 0xf9, 0x9a, 0xe4, 0x53, 0x78, 0x9a, 0x67, 0x36, 0xf3,
	0xcc, 0xd9, 0x1e, 0x4e, 0xd7, 0x77, 0x97, 0x7c, 0x0f, 0x3e, 0x56, 0x3b, 0xb5, 0x4c, 0x87, 0xfb,
	0x19, 0x77, 0x27, 0xb7, 0x37, 0xdc, 0x75, 0xdd, 0xe1, 0x0b, 0xdb, 0xdd, 0xc3, 0xfd, 0xc5, 0x7d,
	0xfa, 0xa5, 0xe9, 0xea, 0x1b, 0xe4, 0x3b, 0xf0, 0x5e, 0xce, 0x3f, 0x25, 0x65, 0xb8, 0x63, 0x75,
	0x7a, 0xd4, 0x1a, 0xb6, 0xa8, 0x65, 0xba, 0x56, 0xdb, 0x74, 0xf5, 0x7b, 0xe4, 0x43, 0xd8, 0x5a,
	0x32, 0xc1, 0x9e, 0xf9, 0xdc, 0x1a, 0xee, 0xba, 0xad, 0xa1, 0xe9, 0xb4, 0xb3, 0x81, 0xef, 0x93,
	0x6d, 0x78, 0xff, 0x6d, 0xe2, 0x74, 0x7a, 0xfb, 0x43, 0x54, 0x57, 0xaf, 0xa5, 0x3f, 0xf8, 0x3a,
	0x5e, 0xb1, 0x7e, 0xfe, 0x75, 0xd5, 0xc3, 0x4b, 0xa4, 0x90, 0xbb, 0x86, 0xf6, 0x0e, 0x54, 0xee,
	0x47, 0xdb, 0xbf, 0xaf, 0x41, 0x43, 0x79, 0x35, 0x43, 0x17, 0x69, 0xed, 0x99, 0xb6, 0xb3, 0xbc,
	0x96, 0xf8, 0x00, 0xee, 0xe6, 0xa8, 0x6d, 0x7b, 0xd0, 0xea, 0x39, 0x8e, 0xf8, 0xde, 0x49, 0x23,
	0x1b, 0x70, 0x3b, 0x47, 0xa6, 0x56, 0xbf, 0x6b, 0xbe, 0x44, 0xed, 0x97, 0x16, 0x68, 0x59, 0xbf,
	0xf2, 0xf6, 0x57, 0x25, 0x68, 0x28, 0xd7, 0x5e, 0x14, 0x42, 0xee, 0x9a, 0xe1, 0x92, 0x0f, 0x30,
	0x36, 0xe0, 0x76, 0x8e, 0x8a, 0x8e, 0x4a, 0x4d, 0xf4, 0x7f, 0x0d, 0x83, 0x79, 0x8e, 0x36, 0xb0,
	0x5c, 0xb7, 0x6b, 0x1d, 0x58, 0x8e, 0xab, 0x97, 0xc8, 0x1d, 0xb8, 0x91, 0x23, 0x8a, 0xed, 0xac,
	0x97, 0x31, 0xca, 0xe7, 0x08, 0x72, 0xeb, 0xea, 0x15, 0xf2, 0x2e, 0x6c, 0xe6, 0x28, 0xe8, 0xfa,
	0x43, 0xdb, 0xe9, 0x50, 0x73, 0xe0, 0xd2, 0xc3, 0x96, 0x9b, 0x86, 0xce, 0x45, 0xae, 0xae, 0xfd,
	0xf9, 0xa1, 0xdd, 0xb6, 0xdd, 0x97, 0xe2, 0x43, 0xb0, 0x45, 0x86, 0x03, 0x73, 0xdf, 0xa2, 0xfa,
	0x0a, 0x86, 0x85, 0x1c, 0xb1, 0xdb, 0x6b, 0xed, 0x0f, 0x93, 0xaa, 0xab, 0xbe, 0xba, 0xfd, 0x57,
	0x65, 0x58, 0x53, 0xaf, 0xd6, 0x68, 0x05, 0x97, 0x9a, 0xce, 0xa0, 0x63, 0xd1, 0x65, 0xfa, 0xb9,
	0x0d, 0x24, 0x4f, 0xee, 0xf6, 0x06, 0x78, 0x96, 0xdd, 0x82, 0xeb, 0x79, 0xfc, 0x85, 0xed, 0x08,
	0xad, 0xe4, 0x61, 0x1e, 0xfd, 0xf4, 0x32, 0xea, 0x39, 0x4f, 0x38, 0x70, 0x0f, 0xc4, 0x58, 0x15,
	0x0c, 0xba, 0x8b, 0x34, 0x1c, 0xaf, 0x8a, 0xc6, 0x2b, 0x90, 0x44, 0xd4, 0xec, 0xf6, 0x5e, 0xe8,
	0xb5, 0x45, 0xd9, 0x25, 0x75, 0xcf, 0xde, 0xdd, 0xd3, 0x57, 0x50, 0xdf, 0x4b, 0xc9, 0xad, 0x9e,
	0xd3, 0xb1, 0x07, 0x2d, 0xdc, 0x6a, 0xfa, 0x2a, 0xff, 0xe0, 0xa6, 0xc0, 0xb5, 0x6f, 0x51, 0xd4,
	0x2a, 0xc6, 0x27, 0xbd, 0x8e, 0xb1, 0xf2, 0x32, 0x06, 0x6a, 0xb5, 0x2c, 0xfb, 0x39, 0x1e, 0x1c,
	0x5b, 0xf0, 0x6e, 0x9e, 0x29, 0x6f, 0xd7, 0x74, 0xb8, 0xc6, 0xe2, 0x70, 0xa9, 0x6d, 0x53, 0xa6,
	0xb5, 0xed, 0x3f, 0xd4, 0xe0, 0xfa, 0x42, 0x9a, 0x85, 0x5d, 0x9d, 0x1e, 0x26, 0x4d, 0xf6, 0xae,
	0x63, 0xf2, 0x61, 0xf7, 0x6d, 0xa7, 0x5d, 0xb0, 0xd8, 0x63, 0x78, 0xb0, 0x8c, 0xc9, 0x1c, 0x0c,
	0x2c, 0x77, 0xe8, 0x58, 0x2f, 0x74, 0x0d, 0x85, 0xbd, 0x9c, 0x25, 0x2b, 0xd1, 0xeb, 0xa5, 0x9d,
	0xc7, 0x5f, 0x3e, 0xc2, 0x04, 0x9d, 0xe7, 0x7d, 0xfc, 0xf3, 0xf3, 0xd1, 0x74, 0xf2, 0xc4, 0x17,
	0x5f, 0xb3, 0x3f, 0xe5, 0xc0, 0x51, 0x8d, 0xff, 0x7c, 0xfa, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x28, 0x33, 0x4d, 0xc6, 0xe8, 0x2e, 0x00, 0x00,
}
