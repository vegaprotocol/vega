// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/chain_events.proto

package vega

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deposit for a Vega built-in asset
type BuiltinAssetDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega network internal asset ID.
	VegaAssetId string `protobuf:"bytes,1,opt,name=vega_asset_id,json=vegaAssetId,proto3" json:"vega_asset_id,omitempty"`
	// Vega party ID i.e. public key.
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Amount to be deposited
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BuiltinAssetDeposit) Reset() {
	*x = BuiltinAssetDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinAssetDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinAssetDeposit) ProtoMessage() {}

func (x *BuiltinAssetDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinAssetDeposit.ProtoReflect.Descriptor instead.
func (*BuiltinAssetDeposit) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{0}
}

func (x *BuiltinAssetDeposit) GetVegaAssetId() string {
	if x != nil {
		return x.VegaAssetId
	}
	return ""
}

func (x *BuiltinAssetDeposit) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *BuiltinAssetDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Withdrawal for a Vega built-in asset
type BuiltinAssetWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega network internal asset ID.
	VegaAssetId string `protobuf:"bytes,1,opt,name=vega_asset_id,json=vegaAssetId,proto3" json:"vega_asset_id,omitempty"`
	// Vega network party ID i.e. public key.
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The amount to be withdrawn
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BuiltinAssetWithdrawal) Reset() {
	*x = BuiltinAssetWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinAssetWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinAssetWithdrawal) ProtoMessage() {}

func (x *BuiltinAssetWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinAssetWithdrawal.ProtoReflect.Descriptor instead.
func (*BuiltinAssetWithdrawal) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{1}
}

func (x *BuiltinAssetWithdrawal) GetVegaAssetId() string {
	if x != nil {
		return x.VegaAssetId
	}
	return ""
}

func (x *BuiltinAssetWithdrawal) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *BuiltinAssetWithdrawal) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Event related to a Vega built-in asset
type BuiltinAssetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*BuiltinAssetEvent_Deposit
	//	*BuiltinAssetEvent_Withdrawal
	Action isBuiltinAssetEvent_Action `protobuf_oneof:"action"`
}

func (x *BuiltinAssetEvent) Reset() {
	*x = BuiltinAssetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinAssetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinAssetEvent) ProtoMessage() {}

func (x *BuiltinAssetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinAssetEvent.ProtoReflect.Descriptor instead.
func (*BuiltinAssetEvent) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{2}
}

func (m *BuiltinAssetEvent) GetAction() isBuiltinAssetEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *BuiltinAssetEvent) GetDeposit() *BuiltinAssetDeposit {
	if x, ok := x.GetAction().(*BuiltinAssetEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *BuiltinAssetEvent) GetWithdrawal() *BuiltinAssetWithdrawal {
	if x, ok := x.GetAction().(*BuiltinAssetEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

type isBuiltinAssetEvent_Action interface {
	isBuiltinAssetEvent_Action()
}

type BuiltinAssetEvent_Deposit struct {
	// Built-in asset deposit.
	Deposit *BuiltinAssetDeposit `protobuf:"bytes,1001,opt,name=deposit,proto3,oneof"`
}

type BuiltinAssetEvent_Withdrawal struct {
	// Built-in asset withdrawal.
	Withdrawal *BuiltinAssetWithdrawal `protobuf:"bytes,1002,opt,name=withdrawal,proto3,oneof"`
}

func (*BuiltinAssetEvent_Deposit) isBuiltinAssetEvent_Action() {}

func (*BuiltinAssetEvent_Withdrawal) isBuiltinAssetEvent_Action() {}

// Asset allow-listing for an ERC20 token
type ERC20AssetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega network internal asset ID.
	VegaAssetId string `protobuf:"bytes,1,opt,name=vega_asset_id,json=vegaAssetId,proto3" json:"vega_asset_id,omitempty"`
	// Ethereum address of the asset.
	AssetSource string `protobuf:"bytes,2,opt,name=asset_source,json=assetSource,proto3" json:"asset_source,omitempty"`
}

func (x *ERC20AssetList) Reset() {
	*x = ERC20AssetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20AssetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20AssetList) ProtoMessage() {}

func (x *ERC20AssetList) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20AssetList.ProtoReflect.Descriptor instead.
func (*ERC20AssetList) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{3}
}

func (x *ERC20AssetList) GetVegaAssetId() string {
	if x != nil {
		return x.VegaAssetId
	}
	return ""
}

func (x *ERC20AssetList) GetAssetSource() string {
	if x != nil {
		return x.AssetSource
	}
	return ""
}

// Asset deny-listing for an ERC20 token
type ERC20AssetDelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega network internal asset ID.
	VegaAssetId string `protobuf:"bytes,1,opt,name=vega_asset_id,json=vegaAssetId,proto3" json:"vega_asset_id,omitempty"`
}

func (x *ERC20AssetDelist) Reset() {
	*x = ERC20AssetDelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20AssetDelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20AssetDelist) ProtoMessage() {}

func (x *ERC20AssetDelist) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20AssetDelist.ProtoReflect.Descriptor instead.
func (*ERC20AssetDelist) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{4}
}

func (x *ERC20AssetDelist) GetVegaAssetId() string {
	if x != nil {
		return x.VegaAssetId
	}
	return ""
}

type ERC20AssetLimitsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega network internal asset ID.
	VegaAssetId string `protobuf:"bytes,1,opt,name=vega_asset_id,json=vegaAssetId,proto3" json:"vega_asset_id,omitempty"`
	// Ethereum wallet that initiated the deposit.
	SourceEthereumAddress string `protobuf:"bytes,2,opt,name=source_ethereum_address,json=sourceEthereumAddress,proto3" json:"source_ethereum_address,omitempty"`
	// Updated lifetime limits.
	LifetimeLimits string `protobuf:"bytes,3,opt,name=lifetime_limits,json=lifetimeLimits,proto3" json:"lifetime_limits,omitempty"`
	// Updated withdrawal threshold.
	WithdrawThreshold string `protobuf:"bytes,4,opt,name=withdraw_threshold,json=withdrawThreshold,proto3" json:"withdraw_threshold,omitempty"`
}

func (x *ERC20AssetLimitsUpdated) Reset() {
	*x = ERC20AssetLimitsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20AssetLimitsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20AssetLimitsUpdated) ProtoMessage() {}

func (x *ERC20AssetLimitsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20AssetLimitsUpdated.ProtoReflect.Descriptor instead.
func (*ERC20AssetLimitsUpdated) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{5}
}

func (x *ERC20AssetLimitsUpdated) GetVegaAssetId() string {
	if x != nil {
		return x.VegaAssetId
	}
	return ""
}

func (x *ERC20AssetLimitsUpdated) GetSourceEthereumAddress() string {
	if x != nil {
		return x.SourceEthereumAddress
	}
	return ""
}

func (x *ERC20AssetLimitsUpdated) GetLifetimeLimits() string {
	if x != nil {
		return x.LifetimeLimits
	}
	return ""
}

func (x *ERC20AssetLimitsUpdated) GetWithdrawThreshold() string {
	if x != nil {
		return x.WithdrawThreshold
	}
	return ""
}

// Asset deposit for an ERC20 token
type ERC20Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega network internal asset ID.
	VegaAssetId string `protobuf:"bytes,1,opt,name=vega_asset_id,json=vegaAssetId,proto3" json:"vega_asset_id,omitempty"`
	// Ethereum wallet that initiated the deposit.
	SourceEthereumAddress string `protobuf:"bytes,2,opt,name=source_ethereum_address,json=sourceEthereumAddress,proto3" json:"source_ethereum_address,omitempty"`
	// Vega party ID i.e. public key that is the target of the deposit.
	TargetPartyId string `protobuf:"bytes,3,opt,name=target_party_id,json=targetPartyId,proto3" json:"target_party_id,omitempty"`
	// Amount to be deposited.
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ERC20Deposit) Reset() {
	*x = ERC20Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Deposit) ProtoMessage() {}

func (x *ERC20Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Deposit.ProtoReflect.Descriptor instead.
func (*ERC20Deposit) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{6}
}

func (x *ERC20Deposit) GetVegaAssetId() string {
	if x != nil {
		return x.VegaAssetId
	}
	return ""
}

func (x *ERC20Deposit) GetSourceEthereumAddress() string {
	if x != nil {
		return x.SourceEthereumAddress
	}
	return ""
}

func (x *ERC20Deposit) GetTargetPartyId() string {
	if x != nil {
		return x.TargetPartyId
	}
	return ""
}

func (x *ERC20Deposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Asset withdrawal for an ERC20 token
type ERC20Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vega network internal asset ID.
	VegaAssetId string `protobuf:"bytes,1,opt,name=vega_asset_id,json=vegaAssetId,proto3" json:"vega_asset_id,omitempty"`
	// Target Ethereum wallet address.
	TargetEthereumAddress string `protobuf:"bytes,2,opt,name=target_ethereum_address,json=targetEthereumAddress,proto3" json:"target_ethereum_address,omitempty"`
	// Reference nonce used for the transaction.
	ReferenceNonce string `protobuf:"bytes,3,opt,name=reference_nonce,json=referenceNonce,proto3" json:"reference_nonce,omitempty"`
}

func (x *ERC20Withdrawal) Reset() {
	*x = ERC20Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Withdrawal) ProtoMessage() {}

func (x *ERC20Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Withdrawal.ProtoReflect.Descriptor instead.
func (*ERC20Withdrawal) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{7}
}

func (x *ERC20Withdrawal) GetVegaAssetId() string {
	if x != nil {
		return x.VegaAssetId
	}
	return ""
}

func (x *ERC20Withdrawal) GetTargetEthereumAddress() string {
	if x != nil {
		return x.TargetEthereumAddress
	}
	return ""
}

func (x *ERC20Withdrawal) GetReferenceNonce() string {
	if x != nil {
		return x.ReferenceNonce
	}
	return ""
}

// Event related to an ERC20 token
type ERC20Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the log in the transaction.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Block in which the transaction was added.
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// Action undertaken as a result of the event.
	//
	// Types that are assignable to Action:
	//
	//	*ERC20Event_AssetList
	//	*ERC20Event_AssetDelist
	//	*ERC20Event_Deposit
	//	*ERC20Event_Withdrawal
	//	*ERC20Event_AssetLimitsUpdated
	//	*ERC20Event_BridgeStopped
	//	*ERC20Event_BridgeResumed
	Action isERC20Event_Action `protobuf_oneof:"action"`
}

func (x *ERC20Event) Reset() {
	*x = ERC20Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Event) ProtoMessage() {}

func (x *ERC20Event) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20Event.ProtoReflect.Descriptor instead.
func (*ERC20Event) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{8}
}

func (x *ERC20Event) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ERC20Event) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (m *ERC20Event) GetAction() isERC20Event_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ERC20Event) GetAssetList() *ERC20AssetList {
	if x, ok := x.GetAction().(*ERC20Event_AssetList); ok {
		return x.AssetList
	}
	return nil
}

func (x *ERC20Event) GetAssetDelist() *ERC20AssetDelist {
	if x, ok := x.GetAction().(*ERC20Event_AssetDelist); ok {
		return x.AssetDelist
	}
	return nil
}

func (x *ERC20Event) GetDeposit() *ERC20Deposit {
	if x, ok := x.GetAction().(*ERC20Event_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *ERC20Event) GetWithdrawal() *ERC20Withdrawal {
	if x, ok := x.GetAction().(*ERC20Event_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

func (x *ERC20Event) GetAssetLimitsUpdated() *ERC20AssetLimitsUpdated {
	if x, ok := x.GetAction().(*ERC20Event_AssetLimitsUpdated); ok {
		return x.AssetLimitsUpdated
	}
	return nil
}

func (x *ERC20Event) GetBridgeStopped() bool {
	if x, ok := x.GetAction().(*ERC20Event_BridgeStopped); ok {
		return x.BridgeStopped
	}
	return false
}

func (x *ERC20Event) GetBridgeResumed() bool {
	if x, ok := x.GetAction().(*ERC20Event_BridgeResumed); ok {
		return x.BridgeResumed
	}
	return false
}

type isERC20Event_Action interface {
	isERC20Event_Action()
}

type ERC20Event_AssetList struct {
	// List an ERC20 asset.
	AssetList *ERC20AssetList `protobuf:"bytes,1001,opt,name=asset_list,json=assetList,proto3,oneof"`
}

type ERC20Event_AssetDelist struct {
	// De-list an ERC20 asset.
	AssetDelist *ERC20AssetDelist `protobuf:"bytes,1002,opt,name=asset_delist,json=assetDelist,proto3,oneof"`
}

type ERC20Event_Deposit struct {
	// Deposit ERC20 asset.
	Deposit *ERC20Deposit `protobuf:"bytes,1003,opt,name=deposit,proto3,oneof"`
}

type ERC20Event_Withdrawal struct {
	// Withdraw ERC20 asset.
	Withdrawal *ERC20Withdrawal `protobuf:"bytes,1004,opt,name=withdrawal,proto3,oneof"`
}

type ERC20Event_AssetLimitsUpdated struct {
	// Update an ERC20 asset.
	AssetLimitsUpdated *ERC20AssetLimitsUpdated `protobuf:"bytes,1005,opt,name=asset_limits_updated,json=assetLimitsUpdated,proto3,oneof"`
}

type ERC20Event_BridgeStopped struct {
	// Bridge operations has been stopped.
	BridgeStopped bool `protobuf:"varint,1006,opt,name=bridge_stopped,json=bridgeStopped,proto3,oneof"`
}

type ERC20Event_BridgeResumed struct {
	// Bridge operations has been resumed.
	BridgeResumed bool `protobuf:"varint,1007,opt,name=bridge_resumed,json=bridgeResumed,proto3,oneof"`
}

func (*ERC20Event_AssetList) isERC20Event_Action() {}

func (*ERC20Event_AssetDelist) isERC20Event_Action() {}

func (*ERC20Event_Deposit) isERC20Event_Action() {}

func (*ERC20Event_Withdrawal) isERC20Event_Action() {}

func (*ERC20Event_AssetLimitsUpdated) isERC20Event_Action() {}

func (*ERC20Event_BridgeStopped) isERC20Event_Action() {}

func (*ERC20Event_BridgeResumed) isERC20Event_Action() {}

// New signer added to the ERC20 bridge
type ERC20SignerAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum address of the new signer
	NewSigner string `protobuf:"bytes,1,opt,name=new_signer,json=newSigner,proto3" json:"new_signer,omitempty"`
	// Nonce created by the Vega network used for this new signer
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Time at which the block was produced
	// will be used to inform the core at what time
	// the stake was made unavailable.
	BlockTime int64 `protobuf:"varint,3,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *ERC20SignerAdded) Reset() {
	*x = ERC20SignerAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20SignerAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20SignerAdded) ProtoMessage() {}

func (x *ERC20SignerAdded) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20SignerAdded.ProtoReflect.Descriptor instead.
func (*ERC20SignerAdded) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{9}
}

func (x *ERC20SignerAdded) GetNewSigner() string {
	if x != nil {
		return x.NewSigner
	}
	return ""
}

func (x *ERC20SignerAdded) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20SignerAdded) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

// Signer removed from the ERC20 bridge
type ERC20SignerRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum address of the old signer
	OldSigner string `protobuf:"bytes,1,opt,name=old_signer,json=oldSigner,proto3" json:"old_signer,omitempty"`
	// Nonce created by the Vega network used for this old signer
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Time at which the block was produced.
	// Will be used to inform the core at what time
	// the stake was made unavailable.
	BlockTime int64 `protobuf:"varint,3,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *ERC20SignerRemoved) Reset() {
	*x = ERC20SignerRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20SignerRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20SignerRemoved) ProtoMessage() {}

func (x *ERC20SignerRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20SignerRemoved.ProtoReflect.Descriptor instead.
func (*ERC20SignerRemoved) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{10}
}

func (x *ERC20SignerRemoved) GetOldSigner() string {
	if x != nil {
		return x.OldSigner
	}
	return ""
}

func (x *ERC20SignerRemoved) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20SignerRemoved) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

// Threshold has been updated on the multisig control
type ERC20ThresholdSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New threshold value to set
	NewThreshold uint32 `protobuf:"varint,1,opt,name=new_threshold,json=newThreshold,proto3" json:"new_threshold,omitempty"`
	// Nonce created by the Vega network
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Time at which the block was produced.
	// Will be used to inform the core at what time
	// the stake was made unavailable.
	BlockTime int64 `protobuf:"varint,3,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *ERC20ThresholdSet) Reset() {
	*x = ERC20ThresholdSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20ThresholdSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20ThresholdSet) ProtoMessage() {}

func (x *ERC20ThresholdSet) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20ThresholdSet.ProtoReflect.Descriptor instead.
func (*ERC20ThresholdSet) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{11}
}

func (x *ERC20ThresholdSet) GetNewThreshold() uint32 {
	if x != nil {
		return x.NewThreshold
	}
	return 0
}

func (x *ERC20ThresholdSet) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20ThresholdSet) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

// Event related to the ERC20 MultiSig
type ERC20MultiSigEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the log in the transaction
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Block in which the transaction was added
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// Action undertaken as a result of the event.
	//
	// Types that are assignable to Action:
	//
	//	*ERC20MultiSigEvent_SignerAdded
	//	*ERC20MultiSigEvent_SignerRemoved
	//	*ERC20MultiSigEvent_ThresholdSet
	Action isERC20MultiSigEvent_Action `protobuf_oneof:"action"`
}

func (x *ERC20MultiSigEvent) Reset() {
	*x = ERC20MultiSigEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20MultiSigEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20MultiSigEvent) ProtoMessage() {}

func (x *ERC20MultiSigEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20MultiSigEvent.ProtoReflect.Descriptor instead.
func (*ERC20MultiSigEvent) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{12}
}

func (x *ERC20MultiSigEvent) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ERC20MultiSigEvent) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (m *ERC20MultiSigEvent) GetAction() isERC20MultiSigEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ERC20MultiSigEvent) GetSignerAdded() *ERC20SignerAdded {
	if x, ok := x.GetAction().(*ERC20MultiSigEvent_SignerAdded); ok {
		return x.SignerAdded
	}
	return nil
}

func (x *ERC20MultiSigEvent) GetSignerRemoved() *ERC20SignerRemoved {
	if x, ok := x.GetAction().(*ERC20MultiSigEvent_SignerRemoved); ok {
		return x.SignerRemoved
	}
	return nil
}

func (x *ERC20MultiSigEvent) GetThresholdSet() *ERC20ThresholdSet {
	if x, ok := x.GetAction().(*ERC20MultiSigEvent_ThresholdSet); ok {
		return x.ThresholdSet
	}
	return nil
}

type isERC20MultiSigEvent_Action interface {
	isERC20MultiSigEvent_Action()
}

type ERC20MultiSigEvent_SignerAdded struct {
	// Add a signer to the erc20 bridge
	SignerAdded *ERC20SignerAdded `protobuf:"bytes,1001,opt,name=signer_added,json=signerAdded,proto3,oneof"`
}

type ERC20MultiSigEvent_SignerRemoved struct {
	// Remove a signer from the erc20 bridge
	SignerRemoved *ERC20SignerRemoved `protobuf:"bytes,1002,opt,name=signer_removed,json=signerRemoved,proto3,oneof"`
}

type ERC20MultiSigEvent_ThresholdSet struct {
	// Threshold set
	ThresholdSet *ERC20ThresholdSet `protobuf:"bytes,1003,opt,name=threshold_set,json=thresholdSet,proto3,oneof"`
}

func (*ERC20MultiSigEvent_SignerAdded) isERC20MultiSigEvent_Action() {}

func (*ERC20MultiSigEvent_SignerRemoved) isERC20MultiSigEvent_Action() {}

func (*ERC20MultiSigEvent_ThresholdSet) isERC20MultiSigEvent_Action() {}

// Event related to staking on the Vega network.
type StakingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the log in the transaction.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Block in which the transaction was added.
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// Action undertaken by the event.
	//
	// Types that are assignable to Action:
	//
	//	*StakingEvent_StakeDeposited
	//	*StakingEvent_StakeRemoved
	//	*StakingEvent_TotalSupply
	Action isStakingEvent_Action `protobuf_oneof:"action"`
}

func (x *StakingEvent) Reset() {
	*x = StakingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingEvent) ProtoMessage() {}

func (x *StakingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingEvent.ProtoReflect.Descriptor instead.
func (*StakingEvent) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{13}
}

func (x *StakingEvent) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *StakingEvent) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (m *StakingEvent) GetAction() isStakingEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *StakingEvent) GetStakeDeposited() *StakeDeposited {
	if x, ok := x.GetAction().(*StakingEvent_StakeDeposited); ok {
		return x.StakeDeposited
	}
	return nil
}

func (x *StakingEvent) GetStakeRemoved() *StakeRemoved {
	if x, ok := x.GetAction().(*StakingEvent_StakeRemoved); ok {
		return x.StakeRemoved
	}
	return nil
}

func (x *StakingEvent) GetTotalSupply() *StakeTotalSupply {
	if x, ok := x.GetAction().(*StakingEvent_TotalSupply); ok {
		return x.TotalSupply
	}
	return nil
}

type isStakingEvent_Action interface {
	isStakingEvent_Action()
}

type StakingEvent_StakeDeposited struct {
	StakeDeposited *StakeDeposited `protobuf:"bytes,1001,opt,name=stake_deposited,json=stakeDeposited,proto3,oneof"`
}

type StakingEvent_StakeRemoved struct {
	StakeRemoved *StakeRemoved `protobuf:"bytes,1002,opt,name=stake_removed,json=stakeRemoved,proto3,oneof"`
}

type StakingEvent_TotalSupply struct {
	TotalSupply *StakeTotalSupply `protobuf:"bytes,1003,opt,name=total_supply,json=totalSupply,proto3,oneof"`
}

func (*StakingEvent_StakeDeposited) isStakingEvent_Action() {}

func (*StakingEvent_StakeRemoved) isStakingEvent_Action() {}

func (*StakingEvent_TotalSupply) isStakingEvent_Action() {}

type StakeDeposited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum Address of the user depositing stake (hex encode with 0x prefix)
	EthereumAddress string `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	// Hex encoded public key of the party receiving the stake deposit.
	VegaPublicKey string `protobuf:"bytes,2,opt,name=vega_public_key,json=vegaPublicKey,proto3" json:"vega_public_key,omitempty"`
	// Amount deposited as an unsigned base 10 integer.
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Time at which the block was produced.
	// Will be used to inform the core at what time
	// the stake started to be available.
	BlockTime int64 `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *StakeDeposited) Reset() {
	*x = StakeDeposited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeDeposited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeDeposited) ProtoMessage() {}

func (x *StakeDeposited) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeDeposited.ProtoReflect.Descriptor instead.
func (*StakeDeposited) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{14}
}

func (x *StakeDeposited) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *StakeDeposited) GetVegaPublicKey() string {
	if x != nil {
		return x.VegaPublicKey
	}
	return ""
}

func (x *StakeDeposited) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeDeposited) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type StakeRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum address of the user removing stake. This should be hex encoded with 0x prefix.
	EthereumAddress string `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	// Hex encoded public key of the party from which to remove stake.
	VegaPublicKey string `protobuf:"bytes,2,opt,name=vega_public_key,json=vegaPublicKey,proto3" json:"vega_public_key,omitempty"`
	// Amount removed as a base 10 unsigned integer.
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places for the staking token.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The time at which the block was produced
	// will be used to inform the core at what time
	// the stake was made unavailable.
	BlockTime int64 `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *StakeRemoved) Reset() {
	*x = StakeRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeRemoved) ProtoMessage() {}

func (x *StakeRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeRemoved.ProtoReflect.Descriptor instead.
func (*StakeRemoved) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{15}
}

func (x *StakeRemoved) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *StakeRemoved) GetVegaPublicKey() string {
	if x != nil {
		return x.VegaPublicKey
	}
	return ""
}

func (x *StakeRemoved) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeRemoved) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type StakeTotalSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the staking asset
	TokenAddress string `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	// Total supply observed for the token as an unsigned based 10 integer.
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places for the staking token.
	TotalSupply string `protobuf:"bytes,2,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
}

func (x *StakeTotalSupply) Reset() {
	*x = StakeTotalSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_chain_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeTotalSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeTotalSupply) ProtoMessage() {}

func (x *StakeTotalSupply) ProtoReflect() protoreflect.Message {
	mi := &file_vega_chain_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeTotalSupply.ProtoReflect.Descriptor instead.
func (*StakeTotalSupply) Descriptor() ([]byte, []int) {
	return file_vega_chain_events_proto_rawDescGZIP(), []int{16}
}

func (x *StakeTotalSupply) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *StakeTotalSupply) GetTotalSupply() string {
	if x != nil {
		return x.TotalSupply
	}
	return ""
}

var File_vega_chain_events_proto protoreflect.FileDescriptor

var file_vega_chain_events_proto_rawDesc = []byte{
	0x0a, 0x17, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x76, 0x65, 0x67, 0x61, 0x22,
	0x6c, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6f, 0x0a,
	0x16, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65, 0x67, 0x61, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96,
	0x01, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x0e, 0x45, 0x52, 0x43, 0x32, 0x30,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65, 0x67,
	0x61, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x36, 0x0a, 0x10, 0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x67,
	0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x67,
	0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65, 0x67,
	0x61, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65, 0x67,
	0x61, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xcb,
	0x03, 0x0a, 0x0a, 0x45, 0x52, 0x43, 0x32, 0x30, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0xec,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x14, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x10,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x12, 0x45, 0x52, 0x43, 0x32, 0x30, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x6c, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6d,
	0x0a, 0x11, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x02,
	0x0a, 0x12, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x42,
	0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45,
	0x52, 0x43, 0x32, 0x30, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x53, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x02,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0xea, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x67, 0x61, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65, 0x67,
	0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x67, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x42, 0x27, 0x5a, 0x25, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67,
	0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_chain_events_proto_rawDescOnce sync.Once
	file_vega_chain_events_proto_rawDescData = file_vega_chain_events_proto_rawDesc
)

func file_vega_chain_events_proto_rawDescGZIP() []byte {
	file_vega_chain_events_proto_rawDescOnce.Do(func() {
		file_vega_chain_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_chain_events_proto_rawDescData)
	})
	return file_vega_chain_events_proto_rawDescData
}

var file_vega_chain_events_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_vega_chain_events_proto_goTypes = []interface{}{
	(*BuiltinAssetDeposit)(nil),     // 0: vega.BuiltinAssetDeposit
	(*BuiltinAssetWithdrawal)(nil),  // 1: vega.BuiltinAssetWithdrawal
	(*BuiltinAssetEvent)(nil),       // 2: vega.BuiltinAssetEvent
	(*ERC20AssetList)(nil),          // 3: vega.ERC20AssetList
	(*ERC20AssetDelist)(nil),        // 4: vega.ERC20AssetDelist
	(*ERC20AssetLimitsUpdated)(nil), // 5: vega.ERC20AssetLimitsUpdated
	(*ERC20Deposit)(nil),            // 6: vega.ERC20Deposit
	(*ERC20Withdrawal)(nil),         // 7: vega.ERC20Withdrawal
	(*ERC20Event)(nil),              // 8: vega.ERC20Event
	(*ERC20SignerAdded)(nil),        // 9: vega.ERC20SignerAdded
	(*ERC20SignerRemoved)(nil),      // 10: vega.ERC20SignerRemoved
	(*ERC20ThresholdSet)(nil),       // 11: vega.ERC20ThresholdSet
	(*ERC20MultiSigEvent)(nil),      // 12: vega.ERC20MultiSigEvent
	(*StakingEvent)(nil),            // 13: vega.StakingEvent
	(*StakeDeposited)(nil),          // 14: vega.StakeDeposited
	(*StakeRemoved)(nil),            // 15: vega.StakeRemoved
	(*StakeTotalSupply)(nil),        // 16: vega.StakeTotalSupply
}
var file_vega_chain_events_proto_depIdxs = []int32{
	0,  // 0: vega.BuiltinAssetEvent.deposit:type_name -> vega.BuiltinAssetDeposit
	1,  // 1: vega.BuiltinAssetEvent.withdrawal:type_name -> vega.BuiltinAssetWithdrawal
	3,  // 2: vega.ERC20Event.asset_list:type_name -> vega.ERC20AssetList
	4,  // 3: vega.ERC20Event.asset_delist:type_name -> vega.ERC20AssetDelist
	6,  // 4: vega.ERC20Event.deposit:type_name -> vega.ERC20Deposit
	7,  // 5: vega.ERC20Event.withdrawal:type_name -> vega.ERC20Withdrawal
	5,  // 6: vega.ERC20Event.asset_limits_updated:type_name -> vega.ERC20AssetLimitsUpdated
	9,  // 7: vega.ERC20MultiSigEvent.signer_added:type_name -> vega.ERC20SignerAdded
	10, // 8: vega.ERC20MultiSigEvent.signer_removed:type_name -> vega.ERC20SignerRemoved
	11, // 9: vega.ERC20MultiSigEvent.threshold_set:type_name -> vega.ERC20ThresholdSet
	14, // 10: vega.StakingEvent.stake_deposited:type_name -> vega.StakeDeposited
	15, // 11: vega.StakingEvent.stake_removed:type_name -> vega.StakeRemoved
	16, // 12: vega.StakingEvent.total_supply:type_name -> vega.StakeTotalSupply
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_vega_chain_events_proto_init() }
func file_vega_chain_events_proto_init() {
	if File_vega_chain_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vega_chain_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuiltinAssetDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuiltinAssetWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuiltinAssetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20AssetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20AssetDelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20AssetLimitsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20SignerAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20SignerRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20ThresholdSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20MultiSigEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeDeposited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_chain_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeTotalSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_chain_events_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*BuiltinAssetEvent_Deposit)(nil),
		(*BuiltinAssetEvent_Withdrawal)(nil),
	}
	file_vega_chain_events_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ERC20Event_AssetList)(nil),
		(*ERC20Event_AssetDelist)(nil),
		(*ERC20Event_Deposit)(nil),
		(*ERC20Event_Withdrawal)(nil),
		(*ERC20Event_AssetLimitsUpdated)(nil),
		(*ERC20Event_BridgeStopped)(nil),
		(*ERC20Event_BridgeResumed)(nil),
	}
	file_vega_chain_events_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ERC20MultiSigEvent_SignerAdded)(nil),
		(*ERC20MultiSigEvent_SignerRemoved)(nil),
		(*ERC20MultiSigEvent_ThresholdSet)(nil),
	}
	file_vega_chain_events_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*StakingEvent_StakeDeposited)(nil),
		(*StakingEvent_StakeRemoved)(nil),
		(*StakingEvent_TotalSupply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_chain_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_chain_events_proto_goTypes,
		DependencyIndexes: file_vega_chain_events_proto_depIdxs,
		MessageInfos:      file_vega_chain_events_proto_msgTypes,
	}.Build()
	File_vega_chain_events_proto = out.File
	file_vega_chain_events_proto_rawDesc = nil
	file_vega_chain_events_proto_goTypes = nil
	file_vega_chain_events_proto_depIdxs = nil
}
