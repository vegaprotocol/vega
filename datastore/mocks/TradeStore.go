// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import datastore "vega/datastore"
import mock "github.com/stretchr/testify/mock"
import msg "vega/services/msg"

// TradeStore is an autogenerated mock type for the TradeStore type
type TradeStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: r
func (_m *TradeStore) Delete(r datastore.Trade) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Trade) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: market, id
func (_m *TradeStore) Get(market string, id string) (datastore.Trade, error) {
	ret := _m.Called(market, id)

	var r0 datastore.Trade
	if rf, ok := ret.Get(0).(func(string, string) datastore.Trade); ok {
		r0 = rf(market, id)
	} else {
		r0 = ret.Get(0).(datastore.Trade)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: market, params
func (_m *TradeStore) GetAll(market string, params datastore.GetParams) ([]datastore.Trade, error) {
	ret := _m.Called(market, params)

	var r0 []datastore.Trade
	if rf, ok := ret.Get(0).(func(string, datastore.GetParams) []datastore.Trade); ok {
		r0 = rf(market, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, datastore.GetParams) error); ok {
		r1 = rf(market, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderId provides a mock function with given fields: market, orderId, params
func (_m *TradeStore) GetByOrderId(market string, orderId string, params datastore.GetParams) ([]datastore.Trade, error) {
	ret := _m.Called(market, orderId, params)

	var r0 []datastore.Trade
	if rf, ok := ret.Get(0).(func(string, string, datastore.GetParams) []datastore.Trade); ok {
		r0 = rf(market, orderId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastore.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, datastore.GetParams) error); ok {
		r1 = rf(market, orderId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandles provides a mock function with given fields: market, sinceBlock, currentBlock, interval
func (_m *TradeStore) GetCandles(market string, sinceBlock uint64, currentBlock uint64, interval uint64) (msg.Candles, error) {
	ret := _m.Called(market, sinceBlock, currentBlock, interval)

	var r0 msg.Candles
	if rf, ok := ret.Get(0).(func(string, uint64, uint64, uint64) msg.Candles); ok {
		r0 = rf(market, sinceBlock, currentBlock, interval)
	} else {
		r0 = ret.Get(0).(msg.Candles)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, uint64, uint64) error); ok {
		r1 = rf(market, sinceBlock, currentBlock, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: r
func (_m *TradeStore) Post(r datastore.Trade) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Trade) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: r
func (_m *TradeStore) Put(r datastore.Trade) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(datastore.Trade) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
