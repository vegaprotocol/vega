syntax = "proto3";

package vega.data.v1;

option go_package = "code.vegaprotocol.io/vega/protos/vega/data/v1";

message ETHAddress {
  string address = 1;
}

// PubKey is the public key that signed this data.
// Different public keys coming from different sources will be further separated.
message PubKey {
  string key = 1;
}

message Signer {
  oneof signer {
    // List of authorized public keys that signed the data for this
    // source. All the public keys in the data should be contained in these
    // public keys.
    PubKey pub_key = 1;
    // In case of an open oracle - Ethereum address will be submitted.
    ETHAddress eth_address = 2;
  }
}

// Property describes one property of data spec with a key with its value.
message Property {
  // Name of the property.
  string name = 1;
  // Value of the property.
  string value = 2;
}

// Data describes valid source data that has been received by the node.
// It represents both matched and unmatched data.
message Data {
  repeated Signer signers = 1;
  // Data holds all the properties of the data
  repeated Property data = 2;
  // `matched_specs_ids` lists all the specs that matched this data.
  // When the array is empty, it means no spec matched this data.
  repeated string matched_spec_ids = 3;
  // Timestamp in Unix nanoseconds for when the data was broadcast to the markets
  // with a matching spec. It has no value when the data did not match any spec.
  int64 broadcast_at = 4;
  // Holds all metadata properties
  repeated Property meta_data = 5;
  // Error is the error message if the data could not be sourced.
  optional string error = 6;
}

message ExternalData {
  Data data = 1;
}
