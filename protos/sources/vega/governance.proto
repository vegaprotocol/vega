syntax = "proto3";

package vega;
option go_package = "code.vegaprotocol.io/vega/protos/vega";

import "vega/markets.proto";
import "vega/vega.proto";
import "vega/assets.proto";
import "vega/oracles/v1/spec.proto";

// Future product configuration
message FutureProduct {
  // Asset ID for the product's settlement asset
  string settlement_asset = 2 ;
  // Product quote name
  string quote_name = 3;
  // The oracle spec describing the oracle data for settlement
  oracles.v1.OracleSpecConfiguration oracle_spec_for_settlement_data = 5;
  // The oracle spec describing the oracle data of trading termination
  oracles.v1.OracleSpecConfiguration oracle_spec_for_trading_termination = 6;
  // The binding between the oracle spec and the settlement data
  OracleSpecToFutureBinding oracle_spec_binding = 7;
  // The number of decimal places implied by the settlement data (such as price) emitted by the settlement oracle
  uint32 settlement_data_decimals = 8;
}

// Instrument configuration
message InstrumentConfiguration {
  // Instrument name
  string name = 1;
  // Instrument code, human-readable shortcode used to describe the instrument
  string code = 2;
  // Product specification
  oneof product {
    // Future
    FutureProduct future = 100;
  }
}

// Configuration for a new market on Vega
message NewMarketConfiguration {
  // New market instrument configuration
  InstrumentConfiguration instrument = 1;
  // Decimal places used for the new market, sets the smallest price increment on the book
  uint64 decimal_places = 2;
  // Optional new market meta data, tags
  repeated string metadata = 3;
  // Price monitoring parameters
  PriceMonitoringParameters price_monitoring_parameters = 4;
  // Liquidity monitoring parameters
  LiquidityMonitoringParameters liquidity_monitoring_parameters = 5;
  // New market risk model parameters
  oneof risk_parameters {
    // Simple risk model parameters, valid only if MODEL_SIMPLE is selected
    SimpleModelParams simple = 100;
    // Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected
    LogNormalRiskModel log_normal = 101;
  }
  // Decimal places for order sizes, sets what size the smallest order / position on the market can be
  uint64 position_decimal_places = 6;
}

// New market on Vega
message NewMarket {
  // The configuration of the new market
  NewMarketConfiguration changes = 1;
}

// Update an existing market on Vega
message UpdateMarket {
  // The identifier of the market to update
  string market_id = 1;
  // The updated configuration of the market
  UpdateMarketConfiguration changes = 2;
}

// Configuration to update a market on Vega
message UpdateMarketConfiguration {
  // Updated market instrument configuration
  UpdateInstrumentConfiguration instrument = 1;
  // Optional market metadata, tags
  repeated string metadata = 2;
  // Price monitoring parameters
  PriceMonitoringParameters price_monitoring_parameters = 3;
  // Liquidity monitoring parameters
  LiquidityMonitoringParameters liquidity_monitoring_parameters = 4;
  // Updated market risk model parameters
  oneof risk_parameters {
    // Simple risk model parameters, valid only if MODEL_SIMPLE is selected
    SimpleModelParams simple = 100;
    // Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected
    LogNormalRiskModel log_normal = 101;
  }
}

// Instrument configuration
message UpdateInstrumentConfiguration {
  // Instrument code, human-readable shortcode used to describe the instrument
  string code = 1;
  // Product specification
  oneof product {
    // Future
    UpdateFutureProduct future = 100;
  }
}

// Future product configuration
message UpdateFutureProduct {
  // Human-readable name/abbreviation of the quote name
  string quote_name = 1;
  // The oracle spec describing the oracle data of settlement data
  oracles.v1.OracleSpecConfiguration oracle_spec_for_settlement_data = 2;
  // The oracle spec describing the oracle data of trading termination
  oracles.v1.OracleSpecConfiguration oracle_spec_for_trading_termination = 3;
  // The binding between the oracle spec and the settlement data
  OracleSpecToFutureBinding oracle_spec_binding = 4;
  // The number of decimal places implied by the settlement data (such as price) emitted by the settlement oracle
  uint32 settlement_data_decimals = 5;
}

// Update network configuration on Vega
message UpdateNetworkParameter {
  // The network parameter to update
  NetworkParameter changes = 1;
}

// New asset on Vega
message NewAsset {
  // The configuration of the new asset
  AssetDetails changes = 1;
}

// Update an existing asset on Vega
message UpdateAsset {
  // The ID of the asset to be updated
  string asset_id = 1;
  // The changes to apply on an existing asset
  AssetDetailsUpdate changes = 2;
}

// Freeform proposal
// This message is just used as a placeholder to sort out the nature of the
// proposal once parsed.
message NewFreeform {}

// Terms for a governance proposal on Vega
message ProposalTerms {
  // Timestamp (Unix time in seconds) when voting closes for this proposal,
  // constrained by `minClose` and `maxClose` network parameters
  int64 closing_timestamp = 1;
  // Timestamp (Unix time in seconds) when proposal gets enacted (if passed),
  // constrained by `minEnact` and `maxEnact` network parameters
  int64 enactment_timestamp = 2;
  // Validation timestamp (Unix time in seconds)
  int64 validation_timestamp = 3;
  // Changes being proposed
  oneof change {
    // Proposal change for modifying an existing market on Vega
    UpdateMarket update_market = 101;
    // Proposal change for creating new market on Vega
    NewMarket new_market = 102;
    // Proposal change for updating Vega network parameters
    UpdateNetworkParameter update_network_parameter = 103;
    // Proposal change for creating new assets on Vega
    NewAsset new_asset = 104;
    // Proposal change for a freeform request, which can be voted on but does not change the behaviour of the system,
    // and can be used to gauge community sentiment
    NewFreeform new_freeform = 105;
    // Proposal change for updating an asset
    UpdateAsset update_asset = 106;
  };
}

// The rationale behind a proposal.
message ProposalRationale {
  reserved 2, 3;
  // Description to show a short title / something in case the link goes offline.
  // This is to be between 0 and 20k unicode characters.
  // This is mandatory for all proposals.
  string description = 1;
  // Title to be used to give a short description of the proposal in lists.
  // This is to be between 0 and 100 unicode characters.
  // This is mandatory for all proposals.
  string title = 4;
}

// Governance data
message GovernanceData {
  // The governance proposal
  Proposal proposal = 1;
  // All YES votes in favour of the proposal above
  repeated Vote yes = 2;
  // All NO votes against the proposal above
  repeated Vote no = 3;
  // All latest YES votes by party (guaranteed to be unique),
  // where key (string) is the party ID (public key) and
  // value (Vote) is the vote cast by the given party
  map<string, Vote> yes_party = 4;
  // All latest NO votes by party (guaranteed to be unique),
  // where key (string) is the party ID (public key) and
  // value (Vote) is the vote cast by the given party
  map<string, Vote> no_party = 5;
}

// Governance proposal
message Proposal {

  // Proposal state transition:
  // Open ->
  //   - Passed -> Enacted.
  //   - Passed -> Failed.
  //   - Declined
  // Rejected
  // Proposal can enter Failed state from any other state
  enum State {
    // Default value, always invalid
    STATE_UNSPECIFIED = 0;
    // Proposal enactment has failed - even though proposal has passed, its execution could not be performed
    STATE_FAILED = 1;
    // Proposal is open for voting
    STATE_OPEN = 2;
    // Proposal has gained enough support to be executed
    STATE_PASSED = 3;
    // Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements)
    STATE_REJECTED = 4;
    // Proposal didn't get enough votes (either failing to gain required participation or majority level)
    STATE_DECLINED = 5;
    // Proposal enacted
    STATE_ENACTED = 6;
    // Waiting for node validation of the proposal
    STATE_WAITING_FOR_NODE_VOTE = 7;

    // Note: If adding an enum value, add a matching entry in:
    //       - gateway/graphql/helpers_enum.go
    //       - gateway/graphql/schema.graphql (enum ProposalState)
  }

  // Unique proposal identifier
  string id = 1;
  // Proposal reference
  string reference = 2;
  // Party identifier (public key) of the author (the party submitting the proposal)
  string party_id = 3;
  // Proposal state - See (Proposal.State)[#vega.Proposal.State] definition
  State state = 4;
  // Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network
  int64 timestamp = 5;
  // Proposal configuration and the actual change that is meant to be executed when proposal is enacted
  ProposalTerms terms = 6;
  // A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses
  ProposalError reason = 7;
  // The detailed error associated to the reason
  string error_details = 8;
  // The rationale behind a proposal
  ProposalRationale rationale = 9;
  // The required vote participation for this proposal
  string required_participation = 10;
  // The required majority for this proposal
  string required_majority = 11;
  // The required participation from liquidity providers, optional (required for market update proposal)
  optional string required_liquidity_provider_participation = 12;
  // The require majority from liquidity providers, optional (required for market update proposal)
  optional string required_liquidity_provider_majority = 13;
}

// A list of possible errors that can cause a proposal to be in state rejected or failed
enum ProposalError {

  // Default value
  PROPOSAL_ERROR_UNSPECIFIED = 0;
  // The specified close time is too early based on network parameters
  PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON = 1;
  // The specified close time is too late based on network parameters
  PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE = 2;
  // The specified enactment time is too early based on network parameters
  PROPOSAL_ERROR_ENACT_TIME_TOO_SOON = 3;
  // The specified enactment time is too late based on network parameters
  PROPOSAL_ERROR_ENACT_TIME_TOO_LATE = 4;
  // The proposer for this proposal has insufficient tokens
  PROPOSAL_ERROR_INSUFFICIENT_TOKENS = 5;
  // The instrument quote name and base name were the same
  PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY = 6;
  // The proposal has no product
  PROPOSAL_ERROR_NO_PRODUCT = 7;
  // The specified product is not supported
  PROPOSAL_ERROR_UNSUPPORTED_PRODUCT = 8;
  // The proposal has no trading mode
  PROPOSAL_ERROR_NO_TRADING_MODE = 11;
  // The proposal has an unsupported trading mode
  PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE = 12;
  // The proposal failed node validation
  PROPOSAL_ERROR_NODE_VALIDATION_FAILED = 13;
  // A field is missing in a builtin asset source
  PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD = 14;
  // The contract address is missing in the ERC20 asset source
  PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS = 15;
  // The asset ID is invalid or does not exist on the Vega network
  PROPOSAL_ERROR_INVALID_ASSET = 16;
  // Proposal terms timestamps are not compatible (Validation < Closing < Enactment)
  PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS = 17;
  // No risk parameters were specified
  PROPOSAL_ERROR_NO_RISK_PARAMETERS = 18;
  // Invalid key in update network parameter proposal
  PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY = 19;
  // Invalid value in update network parameter proposal
  PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE = 20;
  // Validation failed for network parameter proposal
  PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED = 21;
  // Opening auction duration is less than the network minimum opening auction time
  PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL = 22;
  // Opening auction duration is more than the network minimum opening auction time
  PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE = 23;
  // Market proposal market could not be instantiated in execution
  PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET = 25;
  // Market proposal market contained invalid product definition
  PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT = 26;
  // Market proposal has invalid risk parameter
  PROPOSAL_ERROR_INVALID_RISK_PARAMETER = 30;
  // Proposal was declined because vote didn't reach the majority threshold required
  PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED = 31;
  // Proposal declined because the participation threshold was not reached
  PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED = 32;
  // Asset proposal has invalid asset details
  PROPOSAL_ERROR_INVALID_ASSET_DETAILS = 33;
  // Proposal is an unknown type
  PROPOSAL_ERROR_UNKNOWN_TYPE = 34;
  // Proposal has an unknown risk parameter type
  PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE = 35;
  // Validation failed for freeform proposal
  PROPOSAL_ERROR_INVALID_FREEFORM = 36;
  // The party doesn't have enough equity-like share to propose an update on the market
  // targeted by the proposal
  PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE = 37;
  // The market targeted by the proposal does not exist or is not eligible for modification
  PROPOSAL_ERROR_INVALID_MARKET = 38;
  // The market proposal decimal place is higher than the market settlement asset decimal places
  PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES = 39;
  // The market proposal contains too many price monitoring triggers
  PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS = 40;
  // The market proposal contains too many price monitoring triggers
  PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE = 41;
}

// Governance vote
message Vote {

  // Vote value
  enum Value {
    // Default value, always invalid
    VALUE_UNSPECIFIED = 0;
    // A vote against the proposal
    VALUE_NO = 1;
    // A vote in favour of the proposal
    VALUE_YES = 2;

    // Note: If adding an enum value, add a matching entry in:
    //       - gateway/graphql/helpers_enum.go
    //       - gateway/graphql/schema.graphql (enum VoteValue)
  }

  // Voter's party identifier
  string party_id = 1;
  // Actual vote
  Value value = 2;
  // Identifier of the proposal being voted on
  string proposal_id = 3;
  // Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network
  int64 timestamp = 4;
  // Total number of governance token for the party that casted the vote
  string total_governance_token_balance = 5;
  // The weight of this vote based on the total of governance token
  string total_governance_token_weight = 6;
  // The weight of the vote compared to the total number of equity-like share on the market.
  string total_equity_like_share_weight = 7;
}
