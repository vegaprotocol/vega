// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/plugins/positions (interfaces: PlugBuffer)

// Package mocks is a generated GoMock package.
package mocks

import (
	buffer "code.vegaprotocol.io/vega/buffer"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlugBuffer is a mock of PlugBuffer interface
type MockPlugBuffer struct {
	ctrl     *gomock.Controller
	recorder *MockPlugBufferMockRecorder
}

// MockPlugBufferMockRecorder is the mock recorder for MockPlugBuffer
type MockPlugBufferMockRecorder struct {
	mock *MockPlugBuffer
}

// NewMockPlugBuffer creates a new mock instance
func NewMockPlugBuffer(ctrl *gomock.Controller) *MockPlugBuffer {
	mock := &MockPlugBuffer{ctrl: ctrl}
	mock.recorder = &MockPlugBufferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugBuffer) EXPECT() *MockPlugBufferMockRecorder {
	return m.recorder
}

// MarketsSub mocks base method
func (m *MockPlugBuffer) MarketsSub(arg0 int) buffer.MarketSub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketsSub", arg0)
	ret0, _ := ret[0].(buffer.MarketSub)
	return ret0
}

// MarketsSub indicates an expected call of MarketsSub
func (mr *MockPlugBufferMockRecorder) MarketsSub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketsSub", reflect.TypeOf((*MockPlugBuffer)(nil).MarketsSub), arg0)
}

// OrdersSub mocks base method
func (m *MockPlugBuffer) OrdersSub(arg0 int) buffer.OrderSub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersSub", arg0)
	ret0, _ := ret[0].(buffer.OrderSub)
	return ret0
}

// OrdersSub indicates an expected call of OrdersSub
func (mr *MockPlugBufferMockRecorder) OrdersSub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersSub", reflect.TypeOf((*MockPlugBuffer)(nil).OrdersSub), arg0)
}

// PositionsSub mocks base method
func (m *MockPlugBuffer) PositionsSub(arg0 int) *buffer.SettleSub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PositionsSub", arg0)
	ret0, _ := ret[0].(*buffer.SettleSub)
	return ret0
}

// PositionsSub indicates an expected call of PositionsSub
func (mr *MockPlugBufferMockRecorder) PositionsSub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsSub", reflect.TypeOf((*MockPlugBuffer)(nil).PositionsSub), arg0)
}

// TradesSub mocks base method
func (m *MockPlugBuffer) TradesSub(arg0 int) buffer.TradeSub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TradesSub", arg0)
	ret0, _ := ret[0].(buffer.TradeSub)
	return ret0
}

// TradesSub indicates an expected call of TradesSub
func (mr *MockPlugBufferMockRecorder) TradesSub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradesSub", reflect.TypeOf((*MockPlugBuffer)(nil).TradesSub), arg0)
}
