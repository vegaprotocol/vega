// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/service (interfaces: ChainStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockChainStore is a mock of ChainStore interface.
type MockChainStore struct {
	ctrl     *gomock.Controller
	recorder *MockChainStoreMockRecorder
}

// MockChainStoreMockRecorder is the mock recorder for MockChainStore.
type MockChainStoreMockRecorder struct {
	mock *MockChainStore
}

// NewMockChainStore creates a new mock instance.
func NewMockChainStore(ctrl *gomock.Controller) *MockChainStore {
	mock := &MockChainStore{ctrl: ctrl}
	mock.recorder = &MockChainStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainStore) EXPECT() *MockChainStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockChainStore) Get(arg0 context.Context) (entities.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(entities.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChainStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChainStore)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockChainStore) Set(arg0 context.Context, arg1 entities.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockChainStoreMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockChainStore)(nil).Set), arg0, arg1)
}
