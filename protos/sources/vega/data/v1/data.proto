syntax = "proto3";

package vega.data.v1;

option go_package = "code.vegaprotocol.io/vega/protos/vega/data/v1";

message ETHAddress {
  string address = 1;
}

// PubKey is the public key that signed this data.
// Different public keys coming from different sources will be further separated.
message PubKey {
  string key = 1;
}

message Signer {
  oneof signer {
    // pubKeys is the list of authorized public keys that signed the data for this
    // source. All the public keys in the data should be contained in these
    // public keys.
    PubKey pub_key = 1;
    // in case of an open oracle - Ethereum address will be submitted
    ETHAddress eth_address = 2;
  }
}

// Property describes one property of data spec with a key with its value.
message Property {
  // name is the name of the property.
  string name = 1;
  // value is the value of the property.
  string value = 2;
  // An optional decimal place to be be applied on the provided value
  // valid only for PropertyType of Type DECIMAL and INTEGER
  uint32 number_decimal_places = 3;
}

// Data describes valid source data that has been received by the node.
// It represents both matched and unmatched data.
message Data {
  repeated Signer signers = 1;
  // data holds all the properties of the data
  repeated Property data = 2;
  // matched_specs_ids lists all the specs that matched this data.
  // When the array is empty, it means no spec matched this data.
  repeated string matched_spec_ids = 3;
  // broadcast_at is the time at which the data was broadcast to the markets
  // with a matching spec.
  // It has no value when the date did not match any spec.
  // The value is a Unix timestamp in nanoseconds.
  int64 broadcast_at = 4;
}

message ExternalData {
  Data data = 1;
}
