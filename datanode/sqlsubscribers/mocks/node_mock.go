// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/sqlsubscribers (interfaces: NodeStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockNodeStore is a mock of NodeStore interface.
type MockNodeStore struct {
	ctrl     *gomock.Controller
	recorder *MockNodeStoreMockRecorder
}

// MockNodeStoreMockRecorder is the mock recorder for MockNodeStore.
type MockNodeStoreMockRecorder struct {
	mock *MockNodeStore
}

// NewMockNodeStore creates a new mock instance.
func NewMockNodeStore(ctrl *gomock.Controller) *MockNodeStore {
	mock := &MockNodeStore{ctrl: ctrl}
	mock.recorder = &MockNodeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeStore) EXPECT() *MockNodeStoreMockRecorder {
	return m.recorder
}

// AddNodeAnnoucedEvent mocks base method.
func (m *MockNodeStore) AddNodeAnnoucedEvent(arg0 context.Context, arg1 entities.NodeID, arg2 time.Time, arg3 *entities.ValidatorUpdateAux) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNodeAnnoucedEvent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNodeAnnoucedEvent indicates an expected call of AddNodeAnnoucedEvent.
func (mr *MockNodeStoreMockRecorder) AddNodeAnnoucedEvent(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeAnnoucedEvent", reflect.TypeOf((*MockNodeStore)(nil).AddNodeAnnoucedEvent), arg0, arg1, arg2, arg3)
}

// UpdatePublicKey mocks base method.
func (m *MockNodeStore) UpdatePublicKey(arg0 context.Context, arg1 *entities.KeyRotation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePublicKey indicates an expected call of UpdatePublicKey.
func (mr *MockNodeStoreMockRecorder) UpdatePublicKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicKey", reflect.TypeOf((*MockNodeStore)(nil).UpdatePublicKey), arg0, arg1)
}

// UpsertNode mocks base method.
func (m *MockNodeStore) UpsertNode(arg0 context.Context, arg1 *entities.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNode indicates an expected call of UpsertNode.
func (mr *MockNodeStoreMockRecorder) UpsertNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNode", reflect.TypeOf((*MockNodeStore)(nil).UpsertNode), arg0, arg1)
}

// UpsertRanking mocks base method.
func (m *MockNodeStore) UpsertRanking(arg0 context.Context, arg1 *entities.RankingScore, arg2 *entities.RankingScoreAux) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRanking", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRanking indicates an expected call of UpsertRanking.
func (mr *MockNodeStoreMockRecorder) UpsertRanking(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRanking", reflect.TypeOf((*MockNodeStore)(nil).UpsertRanking), arg0, arg1, arg2)
}

// UpsertScore mocks base method.
func (m *MockNodeStore) UpsertScore(arg0 context.Context, arg1 *entities.RewardScore, arg2 *entities.RewardScoreAux) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertScore", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertScore indicates an expected call of UpsertScore.
func (mr *MockNodeStoreMockRecorder) UpsertScore(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertScore", reflect.TypeOf((*MockNodeStore)(nil).UpsertScore), arg0, arg1, arg2)
}
