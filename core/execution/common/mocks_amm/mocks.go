// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/execution/common (interfaces: AMMPool,AMM)

// Package mocks_amm is a generated GoMock package.
package mocks_amm

import (
	reflect "reflect"

	common "code.vegaprotocol.io/vega/core/execution/common"
	idgeneration "code.vegaprotocol.io/vega/core/idgeneration"
	types "code.vegaprotocol.io/vega/core/types"
	num "code.vegaprotocol.io/vega/libs/num"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockAMMPool is a mock of AMMPool interface.
type MockAMMPool struct {
	ctrl     *gomock.Controller
	recorder *MockAMMPoolMockRecorder
}

// MockAMMPoolMockRecorder is the mock recorder for MockAMMPool.
type MockAMMPoolMockRecorder struct {
	mock *MockAMMPool
}

// NewMockAMMPool creates a new mock instance.
func NewMockAMMPool(ctrl *gomock.Controller) *MockAMMPool {
	mock := &MockAMMPool{ctrl: ctrl}
	mock.recorder = &MockAMMPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAMMPool) EXPECT() *MockAMMPoolMockRecorder {
	return m.recorder
}

// CommitmentAmount mocks base method.
func (m *MockAMMPool) CommitmentAmount() *num.Uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentAmount")
	ret0, _ := ret[0].(*num.Uint)
	return ret0
}

// CommitmentAmount indicates an expected call of CommitmentAmount.
func (mr *MockAMMPoolMockRecorder) CommitmentAmount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentAmount", reflect.TypeOf((*MockAMMPool)(nil).CommitmentAmount))
}

// LiquidityFee mocks base method.
func (m *MockAMMPool) LiquidityFee() decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiquidityFee")
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// LiquidityFee indicates an expected call of LiquidityFee.
func (mr *MockAMMPoolMockRecorder) LiquidityFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiquidityFee", reflect.TypeOf((*MockAMMPool)(nil).LiquidityFee))
}

// OrderbookShape mocks base method.
func (m *MockAMMPool) OrderbookShape(arg0, arg1 *num.Uint, arg2 *idgeneration.IDGenerator) ([]*types.Order, []*types.Order) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderbookShape", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*types.Order)
	ret1, _ := ret[1].([]*types.Order)
	return ret0, ret1
}

// OrderbookShape indicates an expected call of OrderbookShape.
func (mr *MockAMMPoolMockRecorder) OrderbookShape(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderbookShape", reflect.TypeOf((*MockAMMPool)(nil).OrderbookShape), arg0, arg1, arg2)
}

// MockAMM is a mock of AMM interface.
type MockAMM struct {
	ctrl     *gomock.Controller
	recorder *MockAMMMockRecorder
}

// MockAMMMockRecorder is the mock recorder for MockAMM.
type MockAMMMockRecorder struct {
	mock *MockAMM
}

// NewMockAMM creates a new mock instance.
func NewMockAMM(ctrl *gomock.Controller) *MockAMM {
	mock := &MockAMM{ctrl: ctrl}
	mock.recorder = &MockAMMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAMM) EXPECT() *MockAMMMockRecorder {
	return m.recorder
}

// GetAMMPoolsBySubAccount mocks base method.
func (m *MockAMM) GetAMMPoolsBySubAccount() map[string]common.AMMPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAMMPoolsBySubAccount")
	ret0, _ := ret[0].(map[string]common.AMMPool)
	return ret0
}

// GetAMMPoolsBySubAccount indicates an expected call of GetAMMPoolsBySubAccount.
func (mr *MockAMMMockRecorder) GetAMMPoolsBySubAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAMMPoolsBySubAccount", reflect.TypeOf((*MockAMM)(nil).GetAMMPoolsBySubAccount))
}

// GetAllSubAccounts mocks base method.
func (m *MockAMM) GetAllSubAccounts() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubAccounts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllSubAccounts indicates an expected call of GetAllSubAccounts.
func (mr *MockAMMMockRecorder) GetAllSubAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubAccounts", reflect.TypeOf((*MockAMM)(nil).GetAllSubAccounts))
}

// IsAMMPartyID mocks base method.
func (m *MockAMM) IsAMMPartyID(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAMMPartyID", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAMMPartyID indicates an expected call of IsAMMPartyID.
func (mr *MockAMMMockRecorder) IsAMMPartyID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAMMPartyID", reflect.TypeOf((*MockAMM)(nil).IsAMMPartyID), arg0)
}
