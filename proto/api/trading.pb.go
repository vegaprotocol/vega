// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/api/trading.proto

package api

import (
	proto1 "code.vegaprotocol.io/vega/proto"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WithdrawRequest struct {
	Withdraw             *proto1.Withdraw `protobuf:"bytes,1,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *WithdrawRequest) Reset()         { *m = WithdrawRequest{} }
func (m *WithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawRequest) ProtoMessage()    {}
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{0}
}

func (m *WithdrawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawRequest.Unmarshal(m, b)
}
func (m *WithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawRequest.Marshal(b, m, deterministic)
}
func (m *WithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRequest.Merge(m, src)
}
func (m *WithdrawRequest) XXX_Size() int {
	return xxx_messageInfo_WithdrawRequest.Size(m)
}
func (m *WithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRequest proto.InternalMessageInfo

func (m *WithdrawRequest) GetWithdraw() *proto1.Withdraw {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

type WithdrawResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WithdrawResponse) Reset()         { *m = WithdrawResponse{} }
func (m *WithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*WithdrawResponse) ProtoMessage()    {}
func (*WithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{1}
}

func (m *WithdrawResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawResponse.Unmarshal(m, b)
}
func (m *WithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawResponse.Marshal(b, m, deterministic)
}
func (m *WithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawResponse.Merge(m, src)
}
func (m *WithdrawResponse) XXX_Size() int {
	return xxx_messageInfo_WithdrawResponse.Size(m)
}
func (m *WithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawResponse proto.InternalMessageInfo

func (m *WithdrawResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type NotifyTraderAccountRequest struct {
	Notif                *proto1.NotifyTraderAccount `protobuf:"bytes,1,opt,name=notif,proto3" json:"notif,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NotifyTraderAccountRequest) Reset()         { *m = NotifyTraderAccountRequest{} }
func (m *NotifyTraderAccountRequest) String() string { return proto.CompactTextString(m) }
func (*NotifyTraderAccountRequest) ProtoMessage()    {}
func (*NotifyTraderAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{2}
}

func (m *NotifyTraderAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyTraderAccountRequest.Unmarshal(m, b)
}
func (m *NotifyTraderAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyTraderAccountRequest.Marshal(b, m, deterministic)
}
func (m *NotifyTraderAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTraderAccountRequest.Merge(m, src)
}
func (m *NotifyTraderAccountRequest) XXX_Size() int {
	return xxx_messageInfo_NotifyTraderAccountRequest.Size(m)
}
func (m *NotifyTraderAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTraderAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTraderAccountRequest proto.InternalMessageInfo

func (m *NotifyTraderAccountRequest) GetNotif() *proto1.NotifyTraderAccount {
	if m != nil {
		return m.Notif
	}
	return nil
}

type NotifyTraderAccountResponse struct {
	Submitted            bool     `protobuf:"varint,1,opt,name=submitted,proto3" json:"submitted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyTraderAccountResponse) Reset()         { *m = NotifyTraderAccountResponse{} }
func (m *NotifyTraderAccountResponse) String() string { return proto.CompactTextString(m) }
func (*NotifyTraderAccountResponse) ProtoMessage()    {}
func (*NotifyTraderAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{3}
}

func (m *NotifyTraderAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyTraderAccountResponse.Unmarshal(m, b)
}
func (m *NotifyTraderAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyTraderAccountResponse.Marshal(b, m, deterministic)
}
func (m *NotifyTraderAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyTraderAccountResponse.Merge(m, src)
}
func (m *NotifyTraderAccountResponse) XXX_Size() int {
	return xxx_messageInfo_NotifyTraderAccountResponse.Size(m)
}
func (m *NotifyTraderAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyTraderAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyTraderAccountResponse proto.InternalMessageInfo

func (m *NotifyTraderAccountResponse) GetSubmitted() bool {
	if m != nil {
		return m.Submitted
	}
	return false
}

type SignInRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignInRequest) Reset()         { *m = SignInRequest{} }
func (m *SignInRequest) String() string { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()    {}
func (*SignInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{4}
}

func (m *SignInRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignInRequest.Unmarshal(m, b)
}
func (m *SignInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignInRequest.Marshal(b, m, deterministic)
}
func (m *SignInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInRequest.Merge(m, src)
}
func (m *SignInRequest) XXX_Size() int {
	return xxx_messageInfo_SignInRequest.Size(m)
}
func (m *SignInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignInRequest proto.InternalMessageInfo

func (m *SignInRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SignInRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignInResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignInResponse) Reset()         { *m = SignInResponse{} }
func (m *SignInResponse) String() string { return proto.CompactTextString(m) }
func (*SignInResponse) ProtoMessage()    {}
func (*SignInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{5}
}

func (m *SignInResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignInResponse.Unmarshal(m, b)
}
func (m *SignInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignInResponse.Marshal(b, m, deterministic)
}
func (m *SignInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInResponse.Merge(m, src)
}
func (m *SignInResponse) XXX_Size() int {
	return xxx_messageInfo_SignInResponse.Size(m)
}
func (m *SignInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignInResponse proto.InternalMessageInfo

func (m *SignInResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SubmitOrderRequest struct {
	Submission           *proto1.OrderSubmission `protobuf:"bytes,1,opt,name=submission,proto3" json:"submission,omitempty"`
	Token                string                  `protobuf:"bytes,101,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SubmitOrderRequest) Reset()         { *m = SubmitOrderRequest{} }
func (m *SubmitOrderRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitOrderRequest) ProtoMessage()    {}
func (*SubmitOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{6}
}

func (m *SubmitOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitOrderRequest.Unmarshal(m, b)
}
func (m *SubmitOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitOrderRequest.Marshal(b, m, deterministic)
}
func (m *SubmitOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitOrderRequest.Merge(m, src)
}
func (m *SubmitOrderRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitOrderRequest.Size(m)
}
func (m *SubmitOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitOrderRequest proto.InternalMessageInfo

func (m *SubmitOrderRequest) GetSubmission() *proto1.OrderSubmission {
	if m != nil {
		return m.Submission
	}
	return nil
}

func (m *SubmitOrderRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type CancelOrderRequest struct {
	Cancellation         *proto1.OrderCancellation `protobuf:"bytes,1,opt,name=cancellation,proto3" json:"cancellation,omitempty"`
	Token                string                    `protobuf:"bytes,101,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CancelOrderRequest) Reset()         { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()    {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{7}
}

func (m *CancelOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelOrderRequest.Unmarshal(m, b)
}
func (m *CancelOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelOrderRequest.Marshal(b, m, deterministic)
}
func (m *CancelOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOrderRequest.Merge(m, src)
}
func (m *CancelOrderRequest) XXX_Size() int {
	return xxx_messageInfo_CancelOrderRequest.Size(m)
}
func (m *CancelOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOrderRequest proto.InternalMessageInfo

func (m *CancelOrderRequest) GetCancellation() *proto1.OrderCancellation {
	if m != nil {
		return m.Cancellation
	}
	return nil
}

func (m *CancelOrderRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type AmendOrderRequest struct {
	Amendment            *proto1.OrderAmendment `protobuf:"bytes,1,opt,name=amendment,proto3" json:"amendment,omitempty"`
	Token                string                 `protobuf:"bytes,101,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *AmendOrderRequest) Reset()         { *m = AmendOrderRequest{} }
func (m *AmendOrderRequest) String() string { return proto.CompactTextString(m) }
func (*AmendOrderRequest) ProtoMessage()    {}
func (*AmendOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{8}
}

func (m *AmendOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmendOrderRequest.Unmarshal(m, b)
}
func (m *AmendOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmendOrderRequest.Marshal(b, m, deterministic)
}
func (m *AmendOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmendOrderRequest.Merge(m, src)
}
func (m *AmendOrderRequest) XXX_Size() int {
	return xxx_messageInfo_AmendOrderRequest.Size(m)
}
func (m *AmendOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AmendOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AmendOrderRequest proto.InternalMessageInfo

func (m *AmendOrderRequest) GetAmendment() *proto1.OrderAmendment {
	if m != nil {
		return m.Amendment
	}
	return nil
}

func (m *AmendOrderRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type LastTradeRequest struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastTradeRequest) Reset()         { *m = LastTradeRequest{} }
func (m *LastTradeRequest) String() string { return proto.CompactTextString(m) }
func (*LastTradeRequest) ProtoMessage()    {}
func (*LastTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{9}
}

func (m *LastTradeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastTradeRequest.Unmarshal(m, b)
}
func (m *LastTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastTradeRequest.Marshal(b, m, deterministic)
}
func (m *LastTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastTradeRequest.Merge(m, src)
}
func (m *LastTradeRequest) XXX_Size() int {
	return xxx_messageInfo_LastTradeRequest.Size(m)
}
func (m *LastTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastTradeRequest proto.InternalMessageInfo

func (m *LastTradeRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

type LastTradeResponse struct {
	Trade                *proto1.Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LastTradeResponse) Reset()         { *m = LastTradeResponse{} }
func (m *LastTradeResponse) String() string { return proto.CompactTextString(m) }
func (*LastTradeResponse) ProtoMessage()    {}
func (*LastTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{10}
}

func (m *LastTradeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastTradeResponse.Unmarshal(m, b)
}
func (m *LastTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastTradeResponse.Marshal(b, m, deterministic)
}
func (m *LastTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastTradeResponse.Merge(m, src)
}
func (m *LastTradeResponse) XXX_Size() int {
	return xxx_messageInfo_LastTradeResponse.Size(m)
}
func (m *LastTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastTradeResponse proto.InternalMessageInfo

func (m *LastTradeResponse) GetTrade() *proto1.Trade {
	if m != nil {
		return m.Trade
	}
	return nil
}

type MarketByIDRequest struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketByIDRequest) Reset()         { *m = MarketByIDRequest{} }
func (m *MarketByIDRequest) String() string { return proto.CompactTextString(m) }
func (*MarketByIDRequest) ProtoMessage()    {}
func (*MarketByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{11}
}

func (m *MarketByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketByIDRequest.Unmarshal(m, b)
}
func (m *MarketByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketByIDRequest.Marshal(b, m, deterministic)
}
func (m *MarketByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketByIDRequest.Merge(m, src)
}
func (m *MarketByIDRequest) XXX_Size() int {
	return xxx_messageInfo_MarketByIDRequest.Size(m)
}
func (m *MarketByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketByIDRequest proto.InternalMessageInfo

func (m *MarketByIDRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

type MarketByIDResponse struct {
	Market               *proto1.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MarketByIDResponse) Reset()         { *m = MarketByIDResponse{} }
func (m *MarketByIDResponse) String() string { return proto.CompactTextString(m) }
func (*MarketByIDResponse) ProtoMessage()    {}
func (*MarketByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{12}
}

func (m *MarketByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketByIDResponse.Unmarshal(m, b)
}
func (m *MarketByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketByIDResponse.Marshal(b, m, deterministic)
}
func (m *MarketByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketByIDResponse.Merge(m, src)
}
func (m *MarketByIDResponse) XXX_Size() int {
	return xxx_messageInfo_MarketByIDResponse.Size(m)
}
func (m *MarketByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketByIDResponse proto.InternalMessageInfo

func (m *MarketByIDResponse) GetMarket() *proto1.Market {
	if m != nil {
		return m.Market
	}
	return nil
}

type PartyByIDRequest struct {
	PartyID              string   `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartyByIDRequest) Reset()         { *m = PartyByIDRequest{} }
func (m *PartyByIDRequest) String() string { return proto.CompactTextString(m) }
func (*PartyByIDRequest) ProtoMessage()    {}
func (*PartyByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{13}
}

func (m *PartyByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartyByIDRequest.Unmarshal(m, b)
}
func (m *PartyByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartyByIDRequest.Marshal(b, m, deterministic)
}
func (m *PartyByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyByIDRequest.Merge(m, src)
}
func (m *PartyByIDRequest) XXX_Size() int {
	return xxx_messageInfo_PartyByIDRequest.Size(m)
}
func (m *PartyByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartyByIDRequest proto.InternalMessageInfo

func (m *PartyByIDRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

type PartyByIDResponse struct {
	Party                *proto1.Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PartyByIDResponse) Reset()         { *m = PartyByIDResponse{} }
func (m *PartyByIDResponse) String() string { return proto.CompactTextString(m) }
func (*PartyByIDResponse) ProtoMessage()    {}
func (*PartyByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{14}
}

func (m *PartyByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartyByIDResponse.Unmarshal(m, b)
}
func (m *PartyByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartyByIDResponse.Marshal(b, m, deterministic)
}
func (m *PartyByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyByIDResponse.Merge(m, src)
}
func (m *PartyByIDResponse) XXX_Size() int {
	return xxx_messageInfo_PartyByIDResponse.Size(m)
}
func (m *PartyByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartyByIDResponse proto.InternalMessageInfo

func (m *PartyByIDResponse) GetParty() *proto1.Party {
	if m != nil {
		return m.Party
	}
	return nil
}

type PartiesResponse struct {
	Parties              []*proto1.Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PartiesResponse) Reset()         { *m = PartiesResponse{} }
func (m *PartiesResponse) String() string { return proto.CompactTextString(m) }
func (*PartiesResponse) ProtoMessage()    {}
func (*PartiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{15}
}

func (m *PartiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartiesResponse.Unmarshal(m, b)
}
func (m *PartiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartiesResponse.Marshal(b, m, deterministic)
}
func (m *PartiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartiesResponse.Merge(m, src)
}
func (m *PartiesResponse) XXX_Size() int {
	return xxx_messageInfo_PartiesResponse.Size(m)
}
func (m *PartiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartiesResponse proto.InternalMessageInfo

func (m *PartiesResponse) GetParties() []*proto1.Party {
	if m != nil {
		return m.Parties
	}
	return nil
}

type TradesByPartyRequest struct {
	PartyID              string      `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	MarketID             string      `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TradesByPartyRequest) Reset()         { *m = TradesByPartyRequest{} }
func (m *TradesByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*TradesByPartyRequest) ProtoMessage()    {}
func (*TradesByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{16}
}

func (m *TradesByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByPartyRequest.Unmarshal(m, b)
}
func (m *TradesByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByPartyRequest.Marshal(b, m, deterministic)
}
func (m *TradesByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByPartyRequest.Merge(m, src)
}
func (m *TradesByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_TradesByPartyRequest.Size(m)
}
func (m *TradesByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByPartyRequest proto.InternalMessageInfo

func (m *TradesByPartyRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *TradesByPartyRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *TradesByPartyRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type TradesByOrderRequest struct {
	OrderID              string   `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradesByOrderRequest) Reset()         { *m = TradesByOrderRequest{} }
func (m *TradesByOrderRequest) String() string { return proto.CompactTextString(m) }
func (*TradesByOrderRequest) ProtoMessage()    {}
func (*TradesByOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{17}
}

func (m *TradesByOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByOrderRequest.Unmarshal(m, b)
}
func (m *TradesByOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByOrderRequest.Marshal(b, m, deterministic)
}
func (m *TradesByOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByOrderRequest.Merge(m, src)
}
func (m *TradesByOrderRequest) XXX_Size() int {
	return xxx_messageInfo_TradesByOrderRequest.Size(m)
}
func (m *TradesByOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByOrderRequest proto.InternalMessageInfo

func (m *TradesByOrderRequest) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

type AccountsSubscribeRequest struct {
	MarketID             string             `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	PartyID              string             `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Asset                string             `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	Type                 proto1.AccountType `protobuf:"varint,4,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AccountsSubscribeRequest) Reset()         { *m = AccountsSubscribeRequest{} }
func (m *AccountsSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*AccountsSubscribeRequest) ProtoMessage()    {}
func (*AccountsSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{18}
}

func (m *AccountsSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsSubscribeRequest.Unmarshal(m, b)
}
func (m *AccountsSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *AccountsSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsSubscribeRequest.Merge(m, src)
}
func (m *AccountsSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_AccountsSubscribeRequest.Size(m)
}
func (m *AccountsSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsSubscribeRequest proto.InternalMessageInfo

func (m *AccountsSubscribeRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *AccountsSubscribeRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *AccountsSubscribeRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *AccountsSubscribeRequest) GetType() proto1.AccountType {
	if m != nil {
		return m.Type
	}
	return proto1.AccountType_NO_ACC
}

type OrdersSubscribeRequest struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	PartyID              string   `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrdersSubscribeRequest) Reset()         { *m = OrdersSubscribeRequest{} }
func (m *OrdersSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*OrdersSubscribeRequest) ProtoMessage()    {}
func (*OrdersSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{19}
}

func (m *OrdersSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersSubscribeRequest.Unmarshal(m, b)
}
func (m *OrdersSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *OrdersSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersSubscribeRequest.Merge(m, src)
}
func (m *OrdersSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_OrdersSubscribeRequest.Size(m)
}
func (m *OrdersSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersSubscribeRequest proto.InternalMessageInfo

func (m *OrdersSubscribeRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *OrdersSubscribeRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

type TradesSubscribeRequest struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	PartyID              string   `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradesSubscribeRequest) Reset()         { *m = TradesSubscribeRequest{} }
func (m *TradesSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*TradesSubscribeRequest) ProtoMessage()    {}
func (*TradesSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{20}
}

func (m *TradesSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesSubscribeRequest.Unmarshal(m, b)
}
func (m *TradesSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *TradesSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesSubscribeRequest.Merge(m, src)
}
func (m *TradesSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_TradesSubscribeRequest.Size(m)
}
func (m *TradesSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradesSubscribeRequest proto.InternalMessageInfo

func (m *TradesSubscribeRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *TradesSubscribeRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

type CandlesSubscribeRequest struct {
	MarketID             string          `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	Interval             proto1.Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CandlesSubscribeRequest) Reset()         { *m = CandlesSubscribeRequest{} }
func (m *CandlesSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*CandlesSubscribeRequest) ProtoMessage()    {}
func (*CandlesSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{21}
}

func (m *CandlesSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandlesSubscribeRequest.Unmarshal(m, b)
}
func (m *CandlesSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandlesSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *CandlesSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandlesSubscribeRequest.Merge(m, src)
}
func (m *CandlesSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_CandlesSubscribeRequest.Size(m)
}
func (m *CandlesSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CandlesSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CandlesSubscribeRequest proto.InternalMessageInfo

func (m *CandlesSubscribeRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *CandlesSubscribeRequest) GetInterval() proto1.Interval {
	if m != nil {
		return m.Interval
	}
	return proto1.Interval_I1M
}

type MarketDepthSubscribeRequest struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepthSubscribeRequest) Reset()         { *m = MarketDepthSubscribeRequest{} }
func (m *MarketDepthSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDepthSubscribeRequest) ProtoMessage()    {}
func (*MarketDepthSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{22}
}

func (m *MarketDepthSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthSubscribeRequest.Unmarshal(m, b)
}
func (m *MarketDepthSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *MarketDepthSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthSubscribeRequest.Merge(m, src)
}
func (m *MarketDepthSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_MarketDepthSubscribeRequest.Size(m)
}
func (m *MarketDepthSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthSubscribeRequest proto.InternalMessageInfo

func (m *MarketDepthSubscribeRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

type PositionsSubscribeRequest struct {
	PartyID              string   `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionsSubscribeRequest) Reset()         { *m = PositionsSubscribeRequest{} }
func (m *PositionsSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*PositionsSubscribeRequest) ProtoMessage()    {}
func (*PositionsSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{23}
}

func (m *PositionsSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionsSubscribeRequest.Unmarshal(m, b)
}
func (m *PositionsSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionsSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *PositionsSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsSubscribeRequest.Merge(m, src)
}
func (m *PositionsSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_PositionsSubscribeRequest.Size(m)
}
func (m *PositionsSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsSubscribeRequest proto.InternalMessageInfo

func (m *PositionsSubscribeRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

type OrdersByMarketRequest struct {
	MarketID             string      `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Open                 bool        `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrdersByMarketRequest) Reset()         { *m = OrdersByMarketRequest{} }
func (m *OrdersByMarketRequest) String() string { return proto.CompactTextString(m) }
func (*OrdersByMarketRequest) ProtoMessage()    {}
func (*OrdersByMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{24}
}

func (m *OrdersByMarketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersByMarketRequest.Unmarshal(m, b)
}
func (m *OrdersByMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersByMarketRequest.Marshal(b, m, deterministic)
}
func (m *OrdersByMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersByMarketRequest.Merge(m, src)
}
func (m *OrdersByMarketRequest) XXX_Size() int {
	return xxx_messageInfo_OrdersByMarketRequest.Size(m)
}
func (m *OrdersByMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersByMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersByMarketRequest proto.InternalMessageInfo

func (m *OrdersByMarketRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *OrdersByMarketRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *OrdersByMarketRequest) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

type OrdersResponse struct {
	Orders               []*proto1.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OrdersResponse) Reset()         { *m = OrdersResponse{} }
func (m *OrdersResponse) String() string { return proto.CompactTextString(m) }
func (*OrdersResponse) ProtoMessage()    {}
func (*OrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{25}
}

func (m *OrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersResponse.Unmarshal(m, b)
}
func (m *OrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersResponse.Marshal(b, m, deterministic)
}
func (m *OrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersResponse.Merge(m, src)
}
func (m *OrdersResponse) XXX_Size() int {
	return xxx_messageInfo_OrdersResponse.Size(m)
}
func (m *OrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersResponse proto.InternalMessageInfo

func (m *OrdersResponse) GetOrders() []*proto1.Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrdersByPartyRequest struct {
	PartyID              string      `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Open                 bool        `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *OrdersByPartyRequest) Reset()         { *m = OrdersByPartyRequest{} }
func (m *OrdersByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*OrdersByPartyRequest) ProtoMessage()    {}
func (*OrdersByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{26}
}

func (m *OrdersByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersByPartyRequest.Unmarshal(m, b)
}
func (m *OrdersByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersByPartyRequest.Marshal(b, m, deterministic)
}
func (m *OrdersByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersByPartyRequest.Merge(m, src)
}
func (m *OrdersByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_OrdersByPartyRequest.Size(m)
}
func (m *OrdersByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersByPartyRequest proto.InternalMessageInfo

func (m *OrdersByPartyRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *OrdersByPartyRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *OrdersByPartyRequest) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

type OrderByMarketAndIdRequest struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	OrderID              string   `protobuf:"bytes,2,opt,name=orderID,proto3" json:"orderID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderByMarketAndIdRequest) Reset()         { *m = OrderByMarketAndIdRequest{} }
func (m *OrderByMarketAndIdRequest) String() string { return proto.CompactTextString(m) }
func (*OrderByMarketAndIdRequest) ProtoMessage()    {}
func (*OrderByMarketAndIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{27}
}

func (m *OrderByMarketAndIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderByMarketAndIdRequest.Unmarshal(m, b)
}
func (m *OrderByMarketAndIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderByMarketAndIdRequest.Marshal(b, m, deterministic)
}
func (m *OrderByMarketAndIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderByMarketAndIdRequest.Merge(m, src)
}
func (m *OrderByMarketAndIdRequest) XXX_Size() int {
	return xxx_messageInfo_OrderByMarketAndIdRequest.Size(m)
}
func (m *OrderByMarketAndIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderByMarketAndIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderByMarketAndIdRequest proto.InternalMessageInfo

func (m *OrderByMarketAndIdRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *OrderByMarketAndIdRequest) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

type OrderResponse struct {
	Order                *proto1.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OrderResponse) Reset()         { *m = OrderResponse{} }
func (m *OrderResponse) String() string { return proto.CompactTextString(m) }
func (*OrderResponse) ProtoMessage()    {}
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{28}
}

func (m *OrderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderResponse.Unmarshal(m, b)
}
func (m *OrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderResponse.Marshal(b, m, deterministic)
}
func (m *OrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderResponse.Merge(m, src)
}
func (m *OrderResponse) XXX_Size() int {
	return xxx_messageInfo_OrderResponse.Size(m)
}
func (m *OrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderResponse proto.InternalMessageInfo

func (m *OrderResponse) GetOrder() *proto1.Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type OrderByReferenceRequest struct {
	Reference            string   `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderByReferenceRequest) Reset()         { *m = OrderByReferenceRequest{} }
func (m *OrderByReferenceRequest) String() string { return proto.CompactTextString(m) }
func (*OrderByReferenceRequest) ProtoMessage()    {}
func (*OrderByReferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{29}
}

func (m *OrderByReferenceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderByReferenceRequest.Unmarshal(m, b)
}
func (m *OrderByReferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderByReferenceRequest.Marshal(b, m, deterministic)
}
func (m *OrderByReferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderByReferenceRequest.Merge(m, src)
}
func (m *OrderByReferenceRequest) XXX_Size() int {
	return xxx_messageInfo_OrderByReferenceRequest.Size(m)
}
func (m *OrderByReferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderByReferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderByReferenceRequest proto.InternalMessageInfo

func (m *OrderByReferenceRequest) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

type MarketsResponse struct {
	Markets              []*proto1.Market `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MarketsResponse) Reset()         { *m = MarketsResponse{} }
func (m *MarketsResponse) String() string { return proto.CompactTextString(m) }
func (*MarketsResponse) ProtoMessage()    {}
func (*MarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{30}
}

func (m *MarketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketsResponse.Unmarshal(m, b)
}
func (m *MarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketsResponse.Marshal(b, m, deterministic)
}
func (m *MarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketsResponse.Merge(m, src)
}
func (m *MarketsResponse) XXX_Size() int {
	return xxx_messageInfo_MarketsResponse.Size(m)
}
func (m *MarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketsResponse proto.InternalMessageInfo

func (m *MarketsResponse) GetMarkets() []*proto1.Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

type CandlesRequest struct {
	MarketID             string          `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	SinceTimestamp       int64           `protobuf:"varint,2,opt,name=sinceTimestamp,proto3" json:"sinceTimestamp,omitempty"`
	Interval             proto1.Interval `protobuf:"varint,3,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CandlesRequest) Reset()         { *m = CandlesRequest{} }
func (m *CandlesRequest) String() string { return proto.CompactTextString(m) }
func (*CandlesRequest) ProtoMessage()    {}
func (*CandlesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{31}
}

func (m *CandlesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandlesRequest.Unmarshal(m, b)
}
func (m *CandlesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandlesRequest.Marshal(b, m, deterministic)
}
func (m *CandlesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandlesRequest.Merge(m, src)
}
func (m *CandlesRequest) XXX_Size() int {
	return xxx_messageInfo_CandlesRequest.Size(m)
}
func (m *CandlesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CandlesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CandlesRequest proto.InternalMessageInfo

func (m *CandlesRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *CandlesRequest) GetSinceTimestamp() int64 {
	if m != nil {
		return m.SinceTimestamp
	}
	return 0
}

func (m *CandlesRequest) GetInterval() proto1.Interval {
	if m != nil {
		return m.Interval
	}
	return proto1.Interval_I1M
}

type CandlesResponse struct {
	Candles              []*proto1.Candle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CandlesResponse) Reset()         { *m = CandlesResponse{} }
func (m *CandlesResponse) String() string { return proto.CompactTextString(m) }
func (*CandlesResponse) ProtoMessage()    {}
func (*CandlesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{32}
}

func (m *CandlesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CandlesResponse.Unmarshal(m, b)
}
func (m *CandlesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CandlesResponse.Marshal(b, m, deterministic)
}
func (m *CandlesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CandlesResponse.Merge(m, src)
}
func (m *CandlesResponse) XXX_Size() int {
	return xxx_messageInfo_CandlesResponse.Size(m)
}
func (m *CandlesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CandlesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CandlesResponse proto.InternalMessageInfo

func (m *CandlesResponse) GetCandles() []*proto1.Candle {
	if m != nil {
		return m.Candles
	}
	return nil
}

type MarketDepthRequest struct {
	MarketID             string   `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketDepthRequest) Reset()         { *m = MarketDepthRequest{} }
func (m *MarketDepthRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDepthRequest) ProtoMessage()    {}
func (*MarketDepthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{33}
}

func (m *MarketDepthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthRequest.Unmarshal(m, b)
}
func (m *MarketDepthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthRequest.Marshal(b, m, deterministic)
}
func (m *MarketDepthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthRequest.Merge(m, src)
}
func (m *MarketDepthRequest) XXX_Size() int {
	return xxx_messageInfo_MarketDepthRequest.Size(m)
}
func (m *MarketDepthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthRequest proto.InternalMessageInfo

func (m *MarketDepthRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

type MarketDepthResponse struct {
	MarketID             string               `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	Buy                  []*proto1.PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	Sell                 []*proto1.PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	LastTrade            *proto1.Trade        `protobuf:"bytes,4,opt,name=lastTrade,proto3" json:"lastTrade,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MarketDepthResponse) Reset()         { *m = MarketDepthResponse{} }
func (m *MarketDepthResponse) String() string { return proto.CompactTextString(m) }
func (*MarketDepthResponse) ProtoMessage()    {}
func (*MarketDepthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{34}
}

func (m *MarketDepthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDepthResponse.Unmarshal(m, b)
}
func (m *MarketDepthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDepthResponse.Marshal(b, m, deterministic)
}
func (m *MarketDepthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDepthResponse.Merge(m, src)
}
func (m *MarketDepthResponse) XXX_Size() int {
	return xxx_messageInfo_MarketDepthResponse.Size(m)
}
func (m *MarketDepthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDepthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDepthResponse proto.InternalMessageInfo

func (m *MarketDepthResponse) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *MarketDepthResponse) GetBuy() []*proto1.PriceLevel {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *MarketDepthResponse) GetSell() []*proto1.PriceLevel {
	if m != nil {
		return m.Sell
	}
	return nil
}

func (m *MarketDepthResponse) GetLastTrade() *proto1.Trade {
	if m != nil {
		return m.LastTrade
	}
	return nil
}

type TradesByMarketRequest struct {
	MarketID             string      `protobuf:"bytes,1,opt,name=marketID,proto3" json:"marketID,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TradesByMarketRequest) Reset()         { *m = TradesByMarketRequest{} }
func (m *TradesByMarketRequest) String() string { return proto.CompactTextString(m) }
func (*TradesByMarketRequest) ProtoMessage()    {}
func (*TradesByMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{35}
}

func (m *TradesByMarketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesByMarketRequest.Unmarshal(m, b)
}
func (m *TradesByMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesByMarketRequest.Marshal(b, m, deterministic)
}
func (m *TradesByMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesByMarketRequest.Merge(m, src)
}
func (m *TradesByMarketRequest) XXX_Size() int {
	return xxx_messageInfo_TradesByMarketRequest.Size(m)
}
func (m *TradesByMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesByMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradesByMarketRequest proto.InternalMessageInfo

func (m *TradesByMarketRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *TradesByMarketRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type TradesResponse struct {
	Trades               []*proto1.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TradesResponse) Reset()         { *m = TradesResponse{} }
func (m *TradesResponse) String() string { return proto.CompactTextString(m) }
func (*TradesResponse) ProtoMessage()    {}
func (*TradesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{36}
}

func (m *TradesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesResponse.Unmarshal(m, b)
}
func (m *TradesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesResponse.Marshal(b, m, deterministic)
}
func (m *TradesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesResponse.Merge(m, src)
}
func (m *TradesResponse) XXX_Size() int {
	return xxx_messageInfo_TradesResponse.Size(m)
}
func (m *TradesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradesResponse proto.InternalMessageInfo

func (m *TradesResponse) GetTrades() []*proto1.Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type PositionsByPartyRequest struct {
	PartyID              string   `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionsByPartyRequest) Reset()         { *m = PositionsByPartyRequest{} }
func (m *PositionsByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*PositionsByPartyRequest) ProtoMessage()    {}
func (*PositionsByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{37}
}

func (m *PositionsByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionsByPartyRequest.Unmarshal(m, b)
}
func (m *PositionsByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionsByPartyRequest.Marshal(b, m, deterministic)
}
func (m *PositionsByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsByPartyRequest.Merge(m, src)
}
func (m *PositionsByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_PositionsByPartyRequest.Size(m)
}
func (m *PositionsByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsByPartyRequest proto.InternalMessageInfo

func (m *PositionsByPartyRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

type PositionsByPartyResponse struct {
	Positions            []*proto1.MarketPosition `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PositionsByPartyResponse) Reset()         { *m = PositionsByPartyResponse{} }
func (m *PositionsByPartyResponse) String() string { return proto.CompactTextString(m) }
func (*PositionsByPartyResponse) ProtoMessage()    {}
func (*PositionsByPartyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{38}
}

func (m *PositionsByPartyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionsByPartyResponse.Unmarshal(m, b)
}
func (m *PositionsByPartyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionsByPartyResponse.Marshal(b, m, deterministic)
}
func (m *PositionsByPartyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionsByPartyResponse.Merge(m, src)
}
func (m *PositionsByPartyResponse) XXX_Size() int {
	return xxx_messageInfo_PositionsByPartyResponse.Size(m)
}
func (m *PositionsByPartyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionsByPartyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PositionsByPartyResponse proto.InternalMessageInfo

func (m *PositionsByPartyResponse) GetPositions() []*proto1.MarketPosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

type VegaTimeResponse struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VegaTimeResponse) Reset()         { *m = VegaTimeResponse{} }
func (m *VegaTimeResponse) String() string { return proto.CompactTextString(m) }
func (*VegaTimeResponse) ProtoMessage()    {}
func (*VegaTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{39}
}

func (m *VegaTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VegaTimeResponse.Unmarshal(m, b)
}
func (m *VegaTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VegaTimeResponse.Marshal(b, m, deterministic)
}
func (m *VegaTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VegaTimeResponse.Merge(m, src)
}
func (m *VegaTimeResponse) XXX_Size() int {
	return xxx_messageInfo_VegaTimeResponse.Size(m)
}
func (m *VegaTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VegaTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VegaTimeResponse proto.InternalMessageInfo

func (m *VegaTimeResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Pagination struct {
	Skip                 uint64   `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit                uint64   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Descending           bool     `protobuf:"varint,3,opt,name=descending,proto3" json:"descending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{40}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetSkip() uint64 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *Pagination) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagination) GetDescending() bool {
	if m != nil {
		return m.Descending
	}
	return false
}

type OrdersStream struct {
	Orders               []*proto1.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OrdersStream) Reset()         { *m = OrdersStream{} }
func (m *OrdersStream) String() string { return proto.CompactTextString(m) }
func (*OrdersStream) ProtoMessage()    {}
func (*OrdersStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{41}
}

func (m *OrdersStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersStream.Unmarshal(m, b)
}
func (m *OrdersStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersStream.Marshal(b, m, deterministic)
}
func (m *OrdersStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersStream.Merge(m, src)
}
func (m *OrdersStream) XXX_Size() int {
	return xxx_messageInfo_OrdersStream.Size(m)
}
func (m *OrdersStream) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersStream.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersStream proto.InternalMessageInfo

func (m *OrdersStream) GetOrders() []*proto1.Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type TradesStream struct {
	Trades               []*proto1.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TradesStream) Reset()         { *m = TradesStream{} }
func (m *TradesStream) String() string { return proto.CompactTextString(m) }
func (*TradesStream) ProtoMessage()    {}
func (*TradesStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{42}
}

func (m *TradesStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradesStream.Unmarshal(m, b)
}
func (m *TradesStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradesStream.Marshal(b, m, deterministic)
}
func (m *TradesStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradesStream.Merge(m, src)
}
func (m *TradesStream) XXX_Size() int {
	return xxx_messageInfo_TradesStream.Size(m)
}
func (m *TradesStream) XXX_DiscardUnknown() {
	xxx_messageInfo_TradesStream.DiscardUnknown(m)
}

var xxx_messageInfo_TradesStream proto.InternalMessageInfo

func (m *TradesStream) GetTrades() []*proto1.Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type AccountsByPartyRequest struct {
	PartyID              string             `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Type                 proto1.AccountType `protobuf:"varint,2,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AccountsByPartyRequest) Reset()         { *m = AccountsByPartyRequest{} }
func (m *AccountsByPartyRequest) String() string { return proto.CompactTextString(m) }
func (*AccountsByPartyRequest) ProtoMessage()    {}
func (*AccountsByPartyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{43}
}

func (m *AccountsByPartyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsByPartyRequest.Unmarshal(m, b)
}
func (m *AccountsByPartyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsByPartyRequest.Marshal(b, m, deterministic)
}
func (m *AccountsByPartyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsByPartyRequest.Merge(m, src)
}
func (m *AccountsByPartyRequest) XXX_Size() int {
	return xxx_messageInfo_AccountsByPartyRequest.Size(m)
}
func (m *AccountsByPartyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsByPartyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsByPartyRequest proto.InternalMessageInfo

func (m *AccountsByPartyRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *AccountsByPartyRequest) GetType() proto1.AccountType {
	if m != nil {
		return m.Type
	}
	return proto1.AccountType_NO_ACC
}

type AccountsResponse struct {
	Accounts             []*proto1.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AccountsResponse) Reset()         { *m = AccountsResponse{} }
func (m *AccountsResponse) String() string { return proto.CompactTextString(m) }
func (*AccountsResponse) ProtoMessage()    {}
func (*AccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{44}
}

func (m *AccountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsResponse.Unmarshal(m, b)
}
func (m *AccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsResponse.Marshal(b, m, deterministic)
}
func (m *AccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsResponse.Merge(m, src)
}
func (m *AccountsResponse) XXX_Size() int {
	return xxx_messageInfo_AccountsResponse.Size(m)
}
func (m *AccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsResponse proto.InternalMessageInfo

func (m *AccountsResponse) GetAccounts() []*proto1.Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type AccountsByPartyAndMarketRequest struct {
	PartyID              string             `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	MarketID             string             `protobuf:"bytes,2,opt,name=marketID,proto3" json:"marketID,omitempty"`
	Type                 proto1.AccountType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AccountsByPartyAndMarketRequest) Reset()         { *m = AccountsByPartyAndMarketRequest{} }
func (m *AccountsByPartyAndMarketRequest) String() string { return proto.CompactTextString(m) }
func (*AccountsByPartyAndMarketRequest) ProtoMessage()    {}
func (*AccountsByPartyAndMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{45}
}

func (m *AccountsByPartyAndMarketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsByPartyAndMarketRequest.Unmarshal(m, b)
}
func (m *AccountsByPartyAndMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsByPartyAndMarketRequest.Marshal(b, m, deterministic)
}
func (m *AccountsByPartyAndMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsByPartyAndMarketRequest.Merge(m, src)
}
func (m *AccountsByPartyAndMarketRequest) XXX_Size() int {
	return xxx_messageInfo_AccountsByPartyAndMarketRequest.Size(m)
}
func (m *AccountsByPartyAndMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsByPartyAndMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsByPartyAndMarketRequest proto.InternalMessageInfo

func (m *AccountsByPartyAndMarketRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *AccountsByPartyAndMarketRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *AccountsByPartyAndMarketRequest) GetType() proto1.AccountType {
	if m != nil {
		return m.Type
	}
	return proto1.AccountType_NO_ACC
}

type AccountsByPartyAndTypeRequest struct {
	PartyID              string             `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Type                 proto1.AccountType `protobuf:"varint,2,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AccountsByPartyAndTypeRequest) Reset()         { *m = AccountsByPartyAndTypeRequest{} }
func (m *AccountsByPartyAndTypeRequest) String() string { return proto.CompactTextString(m) }
func (*AccountsByPartyAndTypeRequest) ProtoMessage()    {}
func (*AccountsByPartyAndTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{46}
}

func (m *AccountsByPartyAndTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsByPartyAndTypeRequest.Unmarshal(m, b)
}
func (m *AccountsByPartyAndTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsByPartyAndTypeRequest.Marshal(b, m, deterministic)
}
func (m *AccountsByPartyAndTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsByPartyAndTypeRequest.Merge(m, src)
}
func (m *AccountsByPartyAndTypeRequest) XXX_Size() int {
	return xxx_messageInfo_AccountsByPartyAndTypeRequest.Size(m)
}
func (m *AccountsByPartyAndTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsByPartyAndTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsByPartyAndTypeRequest proto.InternalMessageInfo

func (m *AccountsByPartyAndTypeRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *AccountsByPartyAndTypeRequest) GetType() proto1.AccountType {
	if m != nil {
		return m.Type
	}
	return proto1.AccountType_NO_ACC
}

type AccountsByPartyAndAssetRequest struct {
	PartyID              string   `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Asset                string   `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountsByPartyAndAssetRequest) Reset()         { *m = AccountsByPartyAndAssetRequest{} }
func (m *AccountsByPartyAndAssetRequest) String() string { return proto.CompactTextString(m) }
func (*AccountsByPartyAndAssetRequest) ProtoMessage()    {}
func (*AccountsByPartyAndAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{47}
}

func (m *AccountsByPartyAndAssetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountsByPartyAndAssetRequest.Unmarshal(m, b)
}
func (m *AccountsByPartyAndAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountsByPartyAndAssetRequest.Marshal(b, m, deterministic)
}
func (m *AccountsByPartyAndAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountsByPartyAndAssetRequest.Merge(m, src)
}
func (m *AccountsByPartyAndAssetRequest) XXX_Size() int {
	return xxx_messageInfo_AccountsByPartyAndAssetRequest.Size(m)
}
func (m *AccountsByPartyAndAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountsByPartyAndAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountsByPartyAndAssetRequest proto.InternalMessageInfo

func (m *AccountsByPartyAndAssetRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *AccountsByPartyAndAssetRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

type CheckTokenRequest struct {
	PartyID              string   `protobuf:"bytes,1,opt,name=partyID,proto3" json:"partyID,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckTokenRequest) Reset()         { *m = CheckTokenRequest{} }
func (m *CheckTokenRequest) String() string { return proto.CompactTextString(m) }
func (*CheckTokenRequest) ProtoMessage()    {}
func (*CheckTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{48}
}

func (m *CheckTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckTokenRequest.Unmarshal(m, b)
}
func (m *CheckTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckTokenRequest.Marshal(b, m, deterministic)
}
func (m *CheckTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTokenRequest.Merge(m, src)
}
func (m *CheckTokenRequest) XXX_Size() int {
	return xxx_messageInfo_CheckTokenRequest.Size(m)
}
func (m *CheckTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTokenRequest proto.InternalMessageInfo

func (m *CheckTokenRequest) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *CheckTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type CheckTokenResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckTokenResponse) Reset()         { *m = CheckTokenResponse{} }
func (m *CheckTokenResponse) String() string { return proto.CompactTextString(m) }
func (*CheckTokenResponse) ProtoMessage()    {}
func (*CheckTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{49}
}

func (m *CheckTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckTokenResponse.Unmarshal(m, b)
}
func (m *CheckTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckTokenResponse.Marshal(b, m, deterministic)
}
func (m *CheckTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTokenResponse.Merge(m, src)
}
func (m *CheckTokenResponse) XXX_Size() int {
	return xxx_messageInfo_CheckTokenResponse.Size(m)
}
func (m *CheckTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTokenResponse proto.InternalMessageInfo

func (m *CheckTokenResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ErrorResponse struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details              []string `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorResponse) Reset()         { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()    {}
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb848134bda36f4, []int{50}
}

func (m *ErrorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorResponse.Unmarshal(m, b)
}
func (m *ErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorResponse.Marshal(b, m, deterministic)
}
func (m *ErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResponse.Merge(m, src)
}
func (m *ErrorResponse) XXX_Size() int {
	return xxx_messageInfo_ErrorResponse.Size(m)
}
func (m *ErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResponse proto.InternalMessageInfo

func (m *ErrorResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorResponse) GetDetails() []string {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterType((*WithdrawRequest)(nil), "api.WithdrawRequest")
	proto.RegisterType((*WithdrawResponse)(nil), "api.WithdrawResponse")
	proto.RegisterType((*NotifyTraderAccountRequest)(nil), "api.NotifyTraderAccountRequest")
	proto.RegisterType((*NotifyTraderAccountResponse)(nil), "api.NotifyTraderAccountResponse")
	proto.RegisterType((*SignInRequest)(nil), "api.SignInRequest")
	proto.RegisterType((*SignInResponse)(nil), "api.SignInResponse")
	proto.RegisterType((*SubmitOrderRequest)(nil), "api.SubmitOrderRequest")
	proto.RegisterType((*CancelOrderRequest)(nil), "api.CancelOrderRequest")
	proto.RegisterType((*AmendOrderRequest)(nil), "api.AmendOrderRequest")
	proto.RegisterType((*LastTradeRequest)(nil), "api.LastTradeRequest")
	proto.RegisterType((*LastTradeResponse)(nil), "api.LastTradeResponse")
	proto.RegisterType((*MarketByIDRequest)(nil), "api.MarketByIDRequest")
	proto.RegisterType((*MarketByIDResponse)(nil), "api.MarketByIDResponse")
	proto.RegisterType((*PartyByIDRequest)(nil), "api.PartyByIDRequest")
	proto.RegisterType((*PartyByIDResponse)(nil), "api.PartyByIDResponse")
	proto.RegisterType((*PartiesResponse)(nil), "api.PartiesResponse")
	proto.RegisterType((*TradesByPartyRequest)(nil), "api.TradesByPartyRequest")
	proto.RegisterType((*TradesByOrderRequest)(nil), "api.TradesByOrderRequest")
	proto.RegisterType((*AccountsSubscribeRequest)(nil), "api.AccountsSubscribeRequest")
	proto.RegisterType((*OrdersSubscribeRequest)(nil), "api.OrdersSubscribeRequest")
	proto.RegisterType((*TradesSubscribeRequest)(nil), "api.TradesSubscribeRequest")
	proto.RegisterType((*CandlesSubscribeRequest)(nil), "api.CandlesSubscribeRequest")
	proto.RegisterType((*MarketDepthSubscribeRequest)(nil), "api.MarketDepthSubscribeRequest")
	proto.RegisterType((*PositionsSubscribeRequest)(nil), "api.PositionsSubscribeRequest")
	proto.RegisterType((*OrdersByMarketRequest)(nil), "api.OrdersByMarketRequest")
	proto.RegisterType((*OrdersResponse)(nil), "api.OrdersResponse")
	proto.RegisterType((*OrdersByPartyRequest)(nil), "api.OrdersByPartyRequest")
	proto.RegisterType((*OrderByMarketAndIdRequest)(nil), "api.OrderByMarketAndIdRequest")
	proto.RegisterType((*OrderResponse)(nil), "api.OrderResponse")
	proto.RegisterType((*OrderByReferenceRequest)(nil), "api.OrderByReferenceRequest")
	proto.RegisterType((*MarketsResponse)(nil), "api.MarketsResponse")
	proto.RegisterType((*CandlesRequest)(nil), "api.CandlesRequest")
	proto.RegisterType((*CandlesResponse)(nil), "api.CandlesResponse")
	proto.RegisterType((*MarketDepthRequest)(nil), "api.MarketDepthRequest")
	proto.RegisterType((*MarketDepthResponse)(nil), "api.MarketDepthResponse")
	proto.RegisterType((*TradesByMarketRequest)(nil), "api.TradesByMarketRequest")
	proto.RegisterType((*TradesResponse)(nil), "api.TradesResponse")
	proto.RegisterType((*PositionsByPartyRequest)(nil), "api.PositionsByPartyRequest")
	proto.RegisterType((*PositionsByPartyResponse)(nil), "api.PositionsByPartyResponse")
	proto.RegisterType((*VegaTimeResponse)(nil), "api.VegaTimeResponse")
	proto.RegisterType((*Pagination)(nil), "api.Pagination")
	proto.RegisterType((*OrdersStream)(nil), "api.OrdersStream")
	proto.RegisterType((*TradesStream)(nil), "api.TradesStream")
	proto.RegisterType((*AccountsByPartyRequest)(nil), "api.AccountsByPartyRequest")
	proto.RegisterType((*AccountsResponse)(nil), "api.AccountsResponse")
	proto.RegisterType((*AccountsByPartyAndMarketRequest)(nil), "api.AccountsByPartyAndMarketRequest")
	proto.RegisterType((*AccountsByPartyAndTypeRequest)(nil), "api.AccountsByPartyAndTypeRequest")
	proto.RegisterType((*AccountsByPartyAndAssetRequest)(nil), "api.AccountsByPartyAndAssetRequest")
	proto.RegisterType((*CheckTokenRequest)(nil), "api.CheckTokenRequest")
	proto.RegisterType((*CheckTokenResponse)(nil), "api.CheckTokenResponse")
	proto.RegisterType((*ErrorResponse)(nil), "api.ErrorResponse")
}

func init() { proto.RegisterFile("proto/api/trading.proto", fileDescriptor_efb848134bda36f4) }

var fileDescriptor_efb848134bda36f4 = []byte{
	// 2805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x5d, 0x73, 0x1c, 0x47,
	0xd5, 0x7e, 0x67, 0x25, 0x5b, 0xd2, 0x91, 0x2d, 0xad, 0x5a, 0xb2, 0x3e, 0x46, 0xb2, 0x3d, 0x1e,
	0x39, 0x7e, 0x13, 0x25, 0xbb, 0xb3, 0x51, 0xe2, 0x54, 0x6c, 0x57, 0x2a, 0x59, 0xd9, 0x89, 0xa3,
	0x90, 0x38, 0x66, 0xa4, 0xd8, 0x14, 0x10, 0xa8, 0xde, 0xd9, 0xd6, 0x6a, 0xd0, 0xee, 0xcc, 0x66,
	0x66, 0x24, 0x67, 0x71, 0xa9, 0x08, 0xdf, 0x29, 0x28, 0x28, 0x58, 0xee, 0x28, 0xae, 0xb8, 0xc8,
	0x15, 0x7f, 0x81, 0x4b, 0x7e, 0x01, 0x05, 0x57, 0x14, 0x54, 0x51, 0xfc, 0x10, 0xaa, 0xbb, 0x4f,
	0xcf, 0xf7, 0x4a, 0x56, 0x95, 0xb9, 0xd2, 0x74, 0x9f, 0xd3, 0xfd, 0x3c, 0xdd, 0x7d, 0xce, 0xe9,
	0x3e, 0x47, 0x0b, 0x4b, 0xfd, 0xc0, 0x8f, 0x7c, 0x8b, 0xf6, 0x5d, 0x2b, 0x0a, 0x68, 0xdb, 0xf5,
	0x3a, 0x75, 0xd1, 0x43, 0xc6, 0x68, 0xdf, 0xd5, 0xab, 0x52, 0x7a, 0xc4, 0x3a, 0x54, 0x76, 0xeb,
	0xf3, 0xb2, 0xa7, 0x47, 0x83, 0x03, 0x16, 0x85, 0xd8, 0xb9, 0xda, 0xf1, 0xfd, 0x4e, 0x97, 0x59,
	0xa2, 0xd5, 0x3a, 0xdc, 0xb3, 0x58, 0xaf, 0x1f, 0x0d, 0x50, 0xf8, 0x46, 0xc7, 0x8d, 0xf6, 0x0f,
	0x5b, 0x75, 0xc7, 0xef, 0x59, 0xbd, 0x27, 0x6e, 0x74, 0xe0, 0x3f, 0xb1, 0x3a, 0x7e, 0x4d, 0x08,
	0x6b, 0x47, 0xb4, 0xeb, 0xb6, 0x69, 0xe4, 0x07, 0xa1, 0x15, 0x7f, 0xe2, 0xb8, 0x35, 0x9c, 0x94,
	0x53, 0xa3, 0x9e, 0xe7, 0x47, 0x34, 0x72, 0x7d, 0x4f, 0x41, 0xbe, 0x22, 0xfe, 0x38, 0xb5, 0x0e,
	0xf3, 0x6a, 0xe1, 0x13, 0xda, 0xe9, 0xb0, 0xc0, 0xf2, 0xfb, 0x42, 0xa3, 0xa8, 0x6d, 0xbe, 0x05,
	0xb3, 0x8f, 0xdd, 0x68, 0xbf, 0x1d, 0xd0, 0x27, 0x36, 0xfb, 0xec, 0x90, 0x85, 0x11, 0xd9, 0x80,
	0xc9, 0x27, 0xd8, 0xb5, 0xac, 0x19, 0xda, 0x8b, 0xd3, 0x9b, 0x33, 0x75, 0xb1, 0xce, 0x58, 0x31,
	0x96, 0x9b, 0xaf, 0x40, 0x35, 0x19, 0x1e, 0xf6, 0x7d, 0x2f, 0x64, 0x64, 0x19, 0x26, 0xc2, 0x43,
	0xc7, 0x61, 0x61, 0x28, 0x86, 0x4f, 0xda, 0xaa, 0x69, 0x7e, 0x04, 0xfa, 0x03, 0x3f, 0x72, 0xf7,
	0x06, 0xbb, 0x01, 0x6d, 0xb3, 0xa0, 0xe9, 0x38, 0xfe, 0xa1, 0x17, 0x29, 0x5c, 0x0b, 0xce, 0x79,
	0x5c, 0x8a, 0xa0, 0x2b, 0x12, 0xb4, 0x6c, 0x80, 0xd4, 0x33, 0xef, 0xc0, 0x6a, 0xe9, 0x74, 0xc8,
	0x63, 0x0d, 0xa6, 0xc2, 0xc3, 0x56, 0xcf, 0x8d, 0x22, 0xd6, 0x46, 0x26, 0x49, 0x87, 0x79, 0x07,
	0x2e, 0xee, 0xb8, 0x1d, 0x6f, 0xdb, 0x53, 0xf0, 0x33, 0x50, 0x71, 0xa5, 0xde, 0x94, 0x5d, 0x71,
	0xdb, 0x44, 0x87, 0xc9, 0x3e, 0x0d, 0xc3, 0x27, 0x7e, 0xd0, 0x5e, 0xae, 0x88, 0xde, 0xb8, 0x6d,
	0xde, 0x80, 0x19, 0x35, 0x18, 0xc1, 0x16, 0xe0, 0x5c, 0xe4, 0x1f, 0x30, 0x0f, 0x27, 0x90, 0x0d,
	0x93, 0x02, 0xd9, 0x11, 0x88, 0x1f, 0x07, 0x6d, 0x16, 0x28, 0xa4, 0x9b, 0x00, 0x82, 0x47, 0x18,
	0xba, 0xbe, 0x87, 0xab, 0xbd, 0x24, 0x57, 0x2b, 0xf4, 0x76, 0x62, 0xa1, 0x9d, 0x52, 0x4c, 0x20,
	0x58, 0x1a, 0xa2, 0x03, 0xe4, 0x2e, 0xf5, 0x1c, 0xd6, 0xcd, 0x40, 0xdc, 0x81, 0x0b, 0x8e, 0xe8,
	0xed, 0x8a, 0xd3, 0x46, 0x90, 0xa5, 0x14, 0xc8, 0xdd, 0x94, 0xd8, 0xce, 0x28, 0x8f, 0x00, 0xfa,
	0x14, 0xe6, 0x9a, 0x3d, 0xe6, 0xb5, 0x33, 0x38, 0x9b, 0x30, 0x45, 0x79, 0x67, 0x8f, 0x79, 0x11,
	0x82, 0x2c, 0xa4, 0x40, 0x9a, 0x4a, 0x66, 0x27, 0x6a, 0x23, 0xa6, 0xaf, 0x43, 0xf5, 0x43, 0x1a,
	0x46, 0xe2, 0x28, 0xd5, 0xec, 0x3a, 0x4c, 0x4a, 0x77, 0xda, 0xbe, 0x87, 0xfb, 0x1a, 0xb7, 0xcd,
	0x37, 0x60, 0x2e, 0xa5, 0x8f, 0xa7, 0x70, 0x0d, 0xce, 0x71, 0x5f, 0x65, 0x48, 0x65, 0x5a, 0x52,
	0x91, 0x3a, 0x52, 0x62, 0x5a, 0x30, 0xf7, 0x91, 0x98, 0x63, 0x6b, 0xb0, 0x7d, 0xef, 0x59, 0x80,
	0x6e, 0x03, 0x49, 0x0f, 0x40, 0xa4, 0xeb, 0x70, 0x5e, 0x6a, 0x20, 0xd4, 0x05, 0x09, 0x25, 0x35,
	0x6d, 0x94, 0x71, 0xf7, 0x78, 0x48, 0x83, 0x68, 0x90, 0xc6, 0x5a, 0x86, 0x89, 0x3e, 0xef, 0x8b,
	0xa1, 0x54, 0x93, 0x2f, 0x29, 0xa5, 0x9d, 0x2c, 0x49, 0xc8, 0xb3, 0x4b, 0x12, 0x7a, 0xb6, 0x94,
	0x98, 0x6f, 0xc2, 0x2c, 0x6f, 0xbb, 0x2c, 0x8c, 0x47, 0xbd, 0x20, 0x41, 0x5c, 0xc6, 0x7d, 0x70,
	0x2c, 0x3f, 0x4e, 0xc9, 0xcc, 0x63, 0x58, 0x10, 0x9b, 0x13, 0x6e, 0x0d, 0xa4, 0xe4, 0x34, 0x8e,
	0x99, 0x9d, 0xaa, 0x64, 0x77, 0x8a, 0x58, 0x00, 0x7d, 0xda, 0x71, 0x3d, 0x69, 0x72, 0x63, 0x82,
	0xef, 0x6c, 0x9d, 0xf6, 0xdd, 0xfa, 0xc3, 0xb8, 0xdb, 0x4e, 0xa9, 0x98, 0x8d, 0x04, 0x3e, 0x63,
	0x55, 0xcb, 0x30, 0xe1, 0xf3, 0x76, 0x02, 0x8f, 0x4d, 0xf3, 0x57, 0x1a, 0x2c, 0xa3, 0x9f, 0x87,
	0x3b, 0x87, 0xad, 0xd0, 0x09, 0xdc, 0xd6, 0xb3, 0x98, 0x4b, 0x7a, 0x45, 0x95, 0xec, 0x8a, 0x16,
	0xe0, 0x1c, 0x0d, 0x43, 0x16, 0x09, 0xc2, 0x53, 0xb6, 0x6c, 0x90, 0x17, 0x60, 0x3c, 0x1a, 0xf4,
	0xd9, 0xf2, 0xb8, 0xa1, 0xbd, 0x38, 0xb3, 0x39, 0x27, 0x77, 0x0f, 0x91, 0x77, 0x07, 0x7d, 0x66,
	0x0b, 0xb1, 0xf9, 0x00, 0x16, 0x05, 0xf3, 0xe7, 0x44, 0x86, 0xcf, 0x27, 0x77, 0xe4, 0x39, 0xcd,
	0x47, 0x61, 0xe9, 0x2e, 0xf5, 0xda, 0xdd, 0x33, 0x4e, 0xb8, 0x01, 0x93, 0xae, 0x17, 0xb1, 0xe0,
	0x88, 0x76, 0xc5, 0x8c, 0x33, 0xea, 0x0a, 0xd8, 0xc6, 0x5e, 0x3b, 0x96, 0x9b, 0xb7, 0x60, 0x55,
	0x5a, 0xfd, 0x3d, 0xd6, 0x8f, 0xf6, 0xcf, 0x02, 0x63, 0xde, 0x84, 0x95, 0x87, 0x7e, 0xe8, 0x8a,
	0xfb, 0xa8, 0x30, 0x70, 0xb4, 0x9f, 0x7c, 0xa1, 0xc1, 0x25, 0xb9, 0xeb, 0x5b, 0x03, 0x74, 0x38,
	0x1c, 0x63, 0xe6, 0xc1, 0xb6, 0xce, 0xff, 0xfb, 0x5f, 0x57, 0x2b, 0x86, 0x36, 0xd2, 0x4a, 0x2b,
	0xa7, 0x5a, 0x29, 0x21, 0x30, 0xee, 0xf7, 0x99, 0x34, 0xe8, 0x49, 0x5b, 0x7c, 0x9b, 0x37, 0x61,
	0x46, 0x32, 0x88, 0x3d, 0x6e, 0x1d, 0xce, 0x0b, 0x23, 0xcd, 0x39, 0x9c, 0xb4, 0x6b, 0x14, 0x71,
	0x7f, 0x53, 0xc4, 0x33, 0xfe, 0x66, 0xe4, 0xd6, 0x1a, 0xd3, 0x8e, 0xad, 0xf4, 0xb9, 0xb0, 0xa6,
	0xb0, 0x22, 0xe0, 0xd5, 0xb6, 0x35, 0xbd, 0xf6, 0x76, 0xfb, 0x2c, 0x7b, 0x67, 0x24, 0x8e, 0x59,
	0xc9, 0xf2, 0x54, 0x0e, 0xba, 0x09, 0x17, 0xd1, 0x95, 0x93, 0xf8, 0x25, 0x64, 0xd9, 0xf8, 0x25,
	0x75, 0xa4, 0x84, 0x3b, 0xf5, 0x12, 0xf2, 0xb2, 0xd9, 0x1e, 0x0b, 0x98, 0xe7, 0xc4, 0x56, 0x10,
	0xc0, 0x54, 0xa0, 0xfa, 0x90, 0xd6, 0xee, 0xb0, 0xf9, 0xf5, 0x2f, 0x34, 0xed, 0x17, 0xda, 0xd7,
	0xbe, 0x45, 0x6b, 0x7b, 0xcd, 0xda, 0x7b, 0x8d, 0xda, 0xad, 0x4f, 0x9f, 0xbe, 0x79, 0x5c, 0x4b,
	0x37, 0x5f, 0x3f, 0x4b, 0xf3, 0xd5, 0xcd, 0x63, 0x3b, 0x81, 0x31, 0x6f, 0xc1, 0xac, 0xdc, 0x9f,
	0xe4, 0x74, 0x6f, 0xc0, 0x04, 0x3e, 0xec, 0xf0, 0x78, 0xb3, 0xf1, 0x5e, 0x09, 0xcd, 0xdf, 0x68,
	0x30, 0x83, 0x0e, 0x77, 0x96, 0x7d, 0xad, 0xc3, 0x4c, 0xe8, 0x7a, 0x0e, 0xdb, 0x75, 0x7b, 0x2c,
	0x8c, 0x68, 0xaf, 0x2f, 0xb6, 0x77, 0x4c, 0x6a, 0x56, 0xff, 0xcf, 0xce, 0x49, 0x33, 0xfe, 0x39,
	0x76, 0xaa, 0x7f, 0xce, 0xc6, 0x8c, 0x92, 0xd5, 0x38, 0xb2, 0x2b, 0xbb, 0x1a, 0xa9, 0x67, 0x2b,
	0xa1, 0xf9, 0xa6, 0xba, 0xfa, 0x84, 0x6b, 0x9f, 0x61, 0x41, 0xe6, 0x57, 0x1a, 0xcc, 0x67, 0x86,
	0x22, 0xf2, 0x49, 0x41, 0xc7, 0x84, 0xb1, 0xd6, 0xe1, 0x60, 0xb9, 0x22, 0x18, 0x55, 0xf1, 0xbe,
	0x0a, 0x5c, 0x87, 0x7d, 0xc8, 0x8e, 0x58, 0xd7, 0xe6, 0x42, 0x72, 0x1d, 0xc6, 0x43, 0xd6, 0xe5,
	0x8b, 0x2e, 0x57, 0x12, 0x52, 0xf2, 0x12, 0x4c, 0x75, 0xd5, 0xdb, 0x40, 0x44, 0xf0, 0xdc, 0x53,
	0x20, 0x91, 0x9a, 0x5d, 0xb8, 0xa4, 0xae, 0xa0, 0xff, 0x7d, 0x28, 0xe1, 0x61, 0x43, 0xa2, 0xa5,
	0xc3, 0x86, 0x78, 0x97, 0xe4, 0xc2, 0x86, 0xe4, 0x89, 0x22, 0xf3, 0x0e, 0x2c, 0xc5, 0x71, 0xf2,
	0xac, 0x91, 0xc3, 0x7c, 0x00, 0xcb, 0xc5, 0xc1, 0x88, 0xbe, 0x09, 0x53, 0x7d, 0x25, 0x43, 0x02,
	0x0b, 0x69, 0xc3, 0x56, 0x03, 0xed, 0x44, 0xcd, 0x6c, 0x40, 0xf5, 0x11, 0xeb, 0x50, 0x6e, 0x8c,
	0xe9, 0xa7, 0x76, 0x14, 0x9b, 0x2e, 0xe7, 0x31, 0x66, 0x27, 0x1d, 0xe6, 0x23, 0x80, 0x87, 0x99,
	0xc0, 0x14, 0x1e, 0xb8, 0x52, 0x6d, 0xdc, 0x16, 0xdf, 0xfc, 0x0e, 0xee, 0xba, 0x3d, 0x37, 0x12,
	0x7b, 0x38, 0x6e, 0xcb, 0x06, 0xb9, 0x02, 0xd0, 0x66, 0xa1, 0xc3, 0x3c, 0x9e, 0x7c, 0x61, 0x20,
	0x4b, 0xf5, 0x98, 0xaf, 0xc1, 0x05, 0xbc, 0x7c, 0xa3, 0x80, 0xd1, 0xde, 0xb3, 0x85, 0xe0, 0xd7,
	0xe0, 0x02, 0xde, 0xb0, 0xf1, 0xa0, 0xd3, 0x0f, 0x80, 0xc2, 0xa2, 0x7a, 0x75, 0x9c, 0x39, 0x72,
	0xab, 0x97, 0x44, 0xe5, 0xe4, 0x97, 0xc4, 0x5b, 0x50, 0x55, 0x10, 0xf1, 0xb6, 0xbe, 0x04, 0x93,
	0x14, 0xfb, 0x90, 0xdd, 0xc5, 0xcc, 0x70, 0x3b, 0x16, 0x9b, 0x3f, 0xd3, 0xe0, 0x6a, 0x8e, 0x62,
	0xd3, 0x6b, 0x67, 0x4d, 0xfa, 0x74, 0xae, 0x27, 0xbd, 0xee, 0xd4, 0x3a, 0xc6, 0x4e, 0x5e, 0xc7,
	0x3e, 0x5c, 0x2e, 0xf2, 0x10, 0xf2, 0xe7, 0xbd, 0x63, 0xdf, 0x80, 0x2b, 0x45, 0xa4, 0x26, 0x7f,
	0xbd, 0x3d, 0x3b, 0x54, 0xfc, 0xf8, 0xab, 0xa4, 0x1e, 0x7f, 0xe6, 0x0e, 0xcc, 0xdd, 0xdd, 0x67,
	0xce, 0xc1, 0x2e, 0xcf, 0x4c, 0x9e, 0x7d, 0xb2, 0x35, 0x95, 0xd8, 0x64, 0xef, 0x46, 0x4c, 0x70,
	0xae, 0x03, 0x49, 0x4f, 0x8a, 0x47, 0x3c, 0x03, 0x15, 0xff, 0x00, 0xb3, 0xd3, 0x8a, 0x7f, 0x60,
	0x3e, 0x86, 0x8b, 0xef, 0x06, 0x81, 0x9f, 0xdc, 0x9f, 0x04, 0xc6, 0x1d, 0x1f, 0x33, 0x9a, 0x31,
	0x5b, 0x7c, 0xf3, 0xa7, 0x51, 0x8f, 0x85, 0x21, 0xed, 0x30, 0xf5, 0xde, 0xc3, 0x26, 0x97, 0xb4,
	0x59, 0x44, 0xdd, 0x6e, 0x28, 0x42, 0xe4, 0x94, 0xad, 0x9a, 0x9b, 0xff, 0x9c, 0x84, 0x09, 0xac,
	0x63, 0x90, 0xbf, 0x6b, 0x70, 0x5e, 0xe6, 0xaf, 0x84, 0x88, 0x70, 0x95, 0xc9, 0x84, 0xf5, 0xf9,
	0x4c, 0x9f, 0xe4, 0x61, 0xfe, 0x51, 0x1b, 0x36, 0xbf, 0xd4, 0xc8, 0x04, 0xef, 0x36, 0xb6, 0x3d,
	0xfd, 0xbe, 0xf8, 0x70, 0x3d, 0x23, 0xf2, 0x8d, 0x68, 0x9f, 0x19, 0xe1, 0x20, 0x8c, 0x58, 0xaf,
	0x0e, 0x32, 0xdf, 0x35, 0xa8, 0x21, 0x76, 0xc5, 0xd8, 0xbe, 0x67, 0x50, 0xaf, 0x6d, 0xa8, 0xcc,
	0xf9, 0x15, 0x23, 0x60, 0x0e, 0x73, 0x8f, 0x98, 0x41, 0x0d, 0xb1, 0x2d, 0xf5, 0x0f, 0x5e, 0x87,
	0xb1, 0x9b, 0x8d, 0x06, 0xa9, 0xc1, 0xfc, 0xb6, 0x27, 0x2a, 0x1d, 0x86, 0x13, 0xb0, 0x36, 0xf3,
	0x22, 0x97, 0x76, 0x43, 0xb2, 0x08, 0x0b, 0xba, 0xe4, 0x98, 0xd9, 0x96, 0x1f, 0xfd, 0xf5, 0x3f,
	0xbf, 0xab, 0x54, 0xcd, 0x69, 0x8b, 0x1e, 0x46, 0xfb, 0x96, 0x98, 0xe9, 0xb6, 0xb6, 0x41, 0xfe,
	0x50, 0x01, 0x48, 0x36, 0x99, 0x2c, 0x8a, 0x81, 0x85, 0xa3, 0xd4, 0x97, 0x0a, 0xfd, 0xb8, 0xc8,
	0x7f, 0x68, 0xc3, 0xe6, 0x5f, 0x34, 0x22, 0x0f, 0xca, 0xa0, 0x9e, 0xd1, 0x7c, 0xb8, 0x2d, 0x79,
	0xea, 0x8f, 0x65, 0x1f, 0x5f, 0xaa, 0x60, 0xe9, 0x46, 0x03, 0xc3, 0xdf, 0xcb, 0xe8, 0x40, 0xcd,
	0xb8, 0xe7, 0xb3, 0xd0, 0x70, 0x23, 0xa3, 0x47, 0x23, 0x67, 0x5f, 0x28, 0x77, 0xdc, 0x23, 0xe6,
	0x19, 0x68, 0x22, 0x6f, 0x43, 0xcd, 0x78, 0x9f, 0x0a, 0x0d, 0xf6, 0x79, 0xdf, 0x0d, 0x58, 0xfb,
	0xed, 0x0f, 0x1e, 0xc1, 0xd8, 0x66, 0xa3, 0x41, 0x3e, 0x86, 0x86, 0xe0, 0x62, 0xf4, 0xe8, 0xc0,
	0xf0, 0x03, 0xf1, 0xc7, 0xf3, 0x23, 0xa3, 0xc5, 0x0c, 0xff, 0xa0, 0x6e, 0x48, 0xf4, 0x00, 0x89,
	0x1a, 0x2d, 0xbf, 0x3d, 0xa8, 0x93, 0x55, 0x58, 0x19, 0xb9, 0x16, 0xb1, 0x43, 0x17, 0x49, 0x7a,
	0x87, 0x48, 0x08, 0x90, 0xa4, 0xf0, 0xb8, 0x3b, 0x85, 0x9c, 0x5e, 0x27, 0x78, 0xab, 0xca, 0x28,
	0x2b, 0x44, 0xe6, 0xad, 0x61, 0xb3, 0x4a, 0x66, 0x84, 0x2e, 0x5f, 0xb2, 0xe8, 0x14, 0x08, 0x86,
	0xbe, 0x6a, 0xc9, 0xc8, 0x6a, 0x3d, 0x8d, 0x53, 0xfc, 0x3a, 0xbe, 0x06, 0x8f, 0xf9, 0x99, 0x1c,
	0xc1, 0x74, 0xaa, 0x40, 0x41, 0x90, 0x6f, 0xa1, 0x64, 0x51, 0x0a, 0x7b, 0x7b, 0xd8, 0x9c, 0x23,
	0xb3, 0x52, 0x39, 0x87, 0xbb, 0x71, 0x25, 0xc6, 0x4d, 0x17, 0x2f, 0x62, 0x68, 0xd2, 0x82, 0xe9,
	0x54, 0xed, 0x05, 0x71, 0x8b, 0xd5, 0x98, 0x52, 0xdc, 0x1b, 0x02, 0x57, 0x99, 0x72, 0x1a, 0xf7,
	0x82, 0x39, 0x81, 0xb8, 0x7c, 0x6d, 0x3f, 0xd5, 0x60, 0xbe, 0xa4, 0x04, 0x45, 0xae, 0x0a, 0xb0,
	0xd1, 0xb5, 0x2e, 0xdd, 0x18, 0xad, 0x80, 0xa6, 0xf8, 0xf2, 0xb0, 0xb9, 0x40, 0x08, 0xea, 0x1b,
	0x7b, 0x01, 0x63, 0x46, 0xcf, 0xf7, 0xd8, 0x40, 0xb0, 0x98, 0x31, 0xa7, 0xac, 0x3d, 0xae, 0x4e,
	0x5d, 0x61, 0xf7, 0x3f, 0xd4, 0x60, 0x52, 0xd5, 0xe1, 0xc8, 0x82, 0x98, 0x3b, 0x57, 0xd5, 0xd3,
	0x2f, 0xe5, 0x7a, 0x11, 0xe6, 0xfd, 0x0c, 0x8c, 0xaa, 0xeb, 0xd1, 0xae, 0x80, 0x79, 0xd9, 0xbc,
	0x61, 0x61, 0xa9, 0xc0, 0x7a, 0xaa, 0x64, 0x75, 0xb4, 0xe5, 0x63, 0x2b, 0xd1, 0xbe, 0xad, 0x6d,
	0x6c, 0xfe, 0x79, 0x19, 0x2e, 0x60, 0x80, 0xf9, 0x6e, 0x9b, 0x46, 0x94, 0xfc, 0x52, 0x53, 0x49,
	0x92, 0x7a, 0x5b, 0x11, 0x5d, 0x90, 0x28, 0xcd, 0xdd, 0x30, 0xea, 0x64, 0xb3, 0x2a, 0x4e, 0x6f,
	0x9d, 0x5c, 0xbb, 0xcf, 0x78, 0x40, 0xe9, 0xba, 0x61, 0xc4, 0x5d, 0x4e, 0xaa, 0x18, 0x7b, 0x7e,
	0x60, 0x50, 0x43, 0xce, 0x21, 0xd8, 0xae, 0x11, 0x5d, 0x55, 0x5f, 0xad, 0xa7, 0xea, 0xda, 0x3a,
	0xc6, 0xd3, 0x22, 0x3f, 0xd7, 0x30, 0x33, 0x51, 0x97, 0x05, 0x59, 0xc9, 0x90, 0x49, 0xdf, 0xea,
	0xe5, 0x5c, 0xde, 0x1b, 0x36, 0x4d, 0x62, 0x9c, 0xc0, 0x45, 0x4c, 0x21, 0xa8, 0xac, 0x92, 0x95,
	0x64, 0xe3, 0xe2, 0xfd, 0x42, 0x26, 0x5f, 0x69, 0x40, 0x8a, 0x69, 0x18, 0xb9, 0x92, 0x60, 0x96,
	0xe5, 0x67, 0x18, 0x05, 0x33, 0xc9, 0x95, 0xf9, 0xed, 0x61, 0xb3, 0x46, 0x5e, 0x16, 0x94, 0xd0,
	0x48, 0x33, 0xdb, 0x22, 0x42, 0xaf, 0x0c, 0x40, 0x1f, 0x4b, 0xb7, 0x10, 0xec, 0x6e, 0x90, 0xeb,
	0xa3, 0x37, 0xca, 0x7a, 0x1a, 0x7b, 0xd0, 0x0f, 0xa0, 0x9a, 0x4f, 0xcb, 0xc8, 0x5a, 0x9a, 0x65,
	0x3e, 0x5b, 0x2b, 0xe5, 0x78, 0x6b, 0xd8, 0x5c, 0x25, 0x2b, 0x19, 0x8e, 0xad, 0x81, 0x11, 0x67,
	0x5b, 0x82, 0xd1, 0x25, 0x32, 0x1f, 0xc3, 0xc7, 0x92, 0x63, 0xf2, 0x19, 0x40, 0x52, 0x7a, 0xc3,
	0x78, 0x55, 0x28, 0xde, 0x61, 0x04, 0x2c, 0xd6, 0xe8, 0xcc, 0x4d, 0x61, 0xdb, 0xf2, 0xc0, 0x70,
	0x43, 0x5a, 0xfc, 0x46, 0x8a, 0x21, 0x8b, 0x9b, 0x40, 0x1c, 0x98, 0xc0, 0xdc, 0x8f, 0x2c, 0xd6,
	0x65, 0x9d, 0xbd, 0xae, 0x8a, 0xf7, 0xf5, 0x77, 0x7b, 0xfd, 0x68, 0xa0, 0x2f, 0xa4, 0xf0, 0x12,
	0xeb, 0xd8, 0x18, 0x36, 0x97, 0xc8, 0xa5, 0xac, 0x75, 0xa0, 0x8e, 0xc0, 0x03, 0x32, 0xa9, 0xf0,
	0xb8, 0x67, 0x4c, 0xa7, 0xb2, 0x23, 0x92, 0x5e, 0x41, 0x3a, 0xd5, 0xd2, 0x97, 0x8b, 0x02, 0x84,
	0xdb, 0x1e, 0x36, 0x5f, 0x20, 0xeb, 0x1c, 0x0e, 0x57, 0x26, 0xc4, 0x78, 0xfa, 0xf2, 0xc8, 0x53,
	0xae, 0xc1, 0xed, 0xb1, 0xe4, 0xc4, 0xdb, 0x02, 0xfd, 0xb7, 0x1a, 0x4c, 0xc5, 0xa5, 0x54, 0x22,
	0xe3, 0x44, 0xbe, 0x14, 0xab, 0x2f, 0xe6, 0xbb, 0x91, 0xc7, 0x27, 0xc3, 0xe6, 0x4b, 0xe4, 0xff,
	0x39, 0x0f, 0x7e, 0xd9, 0x75, 0x69, 0xc4, 0xc3, 0x88, 0x50, 0x19, 0xc5, 0x65, 0x9d, 0x5c, 0x2b,
	0xe3, 0x22, 0x5f, 0xda, 0x96, 0x9c, 0x81, 0x74, 0x61, 0x2a, 0x2e, 0x85, 0x22, 0xa5, 0x7c, 0x21,
	0x15, 0x29, 0x15, 0x2a, 0xa6, 0x66, 0x63, 0xd8, 0x9c, 0x27, 0x73, 0xf2, 0x24, 0x84, 0x34, 0x75,
	0xea, 0x0b, 0x84, 0x14, 0x1d, 0x93, 0x1f, 0x3a, 0x16, 0x50, 0x4f, 0x39, 0xf4, 0x5c, 0x99, 0xb5,
	0xf4, 0xd0, 0x51, 0x27, 0x3e, 0x74, 0x84, 0x23, 0x5f, 0x6a, 0x2a, 0xf9, 0xcb, 0x85, 0xc3, 0xd2,
	0xfc, 0x13, 0x43, 0x50, 0x36, 0x5b, 0x34, 0xdf, 0x1d, 0x36, 0x0d, 0x72, 0x25, 0x8b, 0x27, 0x55,
	0xf8, 0x1a, 0x4f, 0x8f, 0x85, 0x72, 0x93, 0xc9, 0x4f, 0x34, 0xb8, 0x98, 0xa9, 0xfb, 0x62, 0x2c,
	0x2c, 0xab, 0x05, 0x97, 0x13, 0xb9, 0x3b, 0x6c, 0x5e, 0x25, 0x97, 0x47, 0x11, 0x39, 0x2d, 0x10,
	0x22, 0x8d, 0x1f, 0xa7, 0x68, 0xc8, 0x4b, 0x3a, 0x4b, 0x23, 0x73, 0x4d, 0x97, 0xd2, 0xd8, 0x3a,
	0x91, 0x46, 0x72, 0x6b, 0xeb, 0x64, 0xb9, 0x10, 0xde, 0x14, 0x8b, 0xdf, 0x6b, 0x50, 0xcd, 0x27,
	0xc8, 0x18, 0xe6, 0x46, 0x24, 0xdd, 0xfa, 0xe5, 0x11, 0xd2, 0xc4, 0x37, 0x0b, 0x17, 0x45, 0xac,
	0x9c, 0xdd, 0x9f, 0x2b, 0x64, 0xad, 0x64, 0x7f, 0xe2, 0x64, 0x9b, 0x1c, 0xc3, 0x04, 0x16, 0x6f,
	0xc8, 0xbc, 0x7a, 0x38, 0xa5, 0x8a, 0x4b, 0x68, 0x96, 0xb9, 0xfa, 0x8e, 0x79, 0x7f, 0xd8, 0xbc,
	0x46, 0xae, 0x66, 0x09, 0xa0, 0x4e, 0xce, 0x4e, 0x2e, 0x93, 0xd5, 0x32, 0x3b, 0xc1, 0x02, 0x10,
	0x61, 0x00, 0x3b, 0x11, 0x8d, 0xdc, 0x30, 0x72, 0x9d, 0xd1, 0xbe, 0x81, 0x65, 0x98, 0x44, 0xd3,
	0xac, 0xc5, 0x7e, 0x21, 0xd3, 0x02, 0x23, 0x91, 0xc5, 0xef, 0xd2, 0x30, 0x99, 0xd8, 0x87, 0xe9,
	0xfb, 0x2c, 0x52, 0x55, 0x85, 0x91, 0x38, 0x32, 0x0e, 0xe4, 0x8b, 0x0f, 0xe6, 0xab, 0xf1, 0x6a,
	0x79, 0x08, 0x72, 0x0e, 0x83, 0x80, 0x79, 0x91, 0xd1, 0xea, 0xfa, 0xce, 0x81, 0xb3, 0x4f, 0x79,
	0x86, 0xe2, 0xf6, 0xe4, 0x35, 0x33, 0x41, 0xce, 0x59, 0xbc, 0x41, 0xee, 0xc2, 0x6c, 0xae, 0x6c,
	0x4f, 0x56, 0x53, 0x57, 0x7e, 0xbe, 0x16, 0xad, 0xcf, 0xa5, 0x85, 0xa2, 0x6e, 0xd0, 0xd0, 0xf8,
	0x24, 0xb9, 0x5a, 0x3d, 0x4e, 0x52, 0x5e, 0xc1, 0xc7, 0x49, 0xd2, 0xc5, 0x87, 0x86, 0x46, 0xde,
	0x81, 0x6a, 0xbe, 0x40, 0x8f, 0xc6, 0x37, 0xa2, 0x6e, 0xaf, 0x67, 0x6a, 0x75, 0x0d, 0x8d, 0x7c,
	0x04, 0x0b, 0x65, 0xf5, 0x77, 0x62, 0xe4, 0xef, 0x8e, 0x12, 0x42, 0xa9, 0x52, 0x8f, 0x50, 0x69,
	0x68, 0xe4, 0x43, 0x20, 0xc5, 0x9a, 0x3c, 0x3e, 0x4e, 0x46, 0x16, 0xeb, 0xf5, 0xd2, 0xaa, 0x91,
	0xd8, 0xa3, 0xb9, 0xc2, 0xbf, 0x6b, 0x88, 0x74, 0x9f, 0x51, 0xff, 0xc6, 0xd1, 0xb3, 0x35, 0x8e,
	0x86, 0x46, 0x1e, 0x80, 0xbe, 0x1b, 0x50, 0x2f, 0xdc, 0x4b, 0x5e, 0x15, 0xa9, 0xd9, 0x46, 0x59,
	0xcb, 0x62, 0x5c, 0xc8, 0xc9, 0x8c, 0x6c, 0x68, 0xe4, 0xd7, 0x1a, 0xcc, 0xe6, 0x2a, 0x07, 0x78,
	0x72, 0xe5, 0x45, 0x1e, 0x34, 0xbc, 0x7c, 0x79, 0xa6, 0xd4, 0xcd, 0x94, 0x52, 0xd6, 0xcd, 0xb9,
	0x9b, 0x15, 0xdd, 0x5c, 0x15, 0x6f, 0xc8, 0xe3, 0xe4, 0x9f, 0x5a, 0xf9, 0xda, 0x0d, 0xb9, 0x5e,
	0x46, 0x2c, 0x5f, 0xda, 0x19, 0xc1, 0x90, 0xec, 0x14, 0xea, 0x56, 0x58, 0x8c, 0x21, 0xe6, 0x88,
	0x69, 0x53, 0x95, 0x9a, 0x51, 0x93, 0x7e, 0x02, 0x4b, 0x23, 0xea, 0x2e, 0x64, 0x7d, 0xc4, 0xac,
	0xe9, 0xaa, 0xcc, 0x88, 0x69, 0xb7, 0xfe, 0xa6, 0x0d, 0x9b, 0x7f, 0xd2, 0xc8, 0x77, 0x64, 0x79,
	0x51, 0x84, 0x71, 0xd7, 0xeb, 0xf0, 0xec, 0xda, 0xbc, 0x01, 0xe3, 0xbc, 0x8f, 0xcc, 0xed, 0x47,
	0x51, 0x3f, 0xbc, 0x6d, 0xc9, 0x9f, 0x5d, 0x7c, 0x3e, 0xf8, 0xbe, 0xa5, 0x4f, 0xef, 0xbb, 0xef,
	0xa8, 0xd6, 0xc6, 0x2a, 0x8c, 0xed, 0x6e, 0xdd, 0x23, 0x0b, 0x05, 0xb5, 0xa8, 0xd5, 0xde, 0x3c,
	0xd7, 0xa8, 0x37, 0xea, 0xaf, 0x6e, 0x68, 0x95, 0xcd, 0x2a, 0xed, 0xf7, 0xbb, 0xae, 0x23, 0xf2,
	0x45, 0xeb, 0x7b, 0xa1, 0xef, 0xdd, 0x2e, 0xf4, 0xd8, 0xeb, 0x32, 0x2b, 0x5f, 0x03, 0x7d, 0x77,
	0x9f, 0x19, 0x81, 0xca, 0x8f, 0x68, 0x68, 0xe0, 0x8f, 0x19, 0xf6, 0x0e, 0xbb, 0xdf, 0x5c, 0x77,
	0xfc, 0x36, 0x13, 0x66, 0x26, 0x7f, 0x73, 0xe1, 0x77, 0xeb, 0xae, 0xfc, 0x4d, 0x88, 0x15, 0xff,
	0x78, 0xa4, 0x75, 0x5e, 0x7c, 0xbe, 0xf6, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0xa0, 0x8d,
	0x84, 0x50, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TradingClient is the client API for Trading service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error)
	AmendOrder(ctx context.Context, in *AmendOrderRequest, opts ...grpc.CallOption) (*proto1.PendingOrder, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*proto1.PendingOrder, error)
	SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*proto1.PendingOrder, error)
	NotifyTraderAccount(ctx context.Context, in *NotifyTraderAccountRequest, opts ...grpc.CallOption) (*NotifyTraderAccountResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
}

type tradingClient struct {
	cc *grpc.ClientConn
}

func NewTradingClient(cc *grpc.ClientConn) TradingClient {
	return &tradingClient{cc}
}

func (c *tradingClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/api.trading/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error) {
	out := new(CheckTokenResponse)
	err := c.cc.Invoke(ctx, "/api.trading/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) AmendOrder(ctx context.Context, in *AmendOrderRequest, opts ...grpc.CallOption) (*proto1.PendingOrder, error) {
	out := new(proto1.PendingOrder)
	err := c.cc.Invoke(ctx, "/api.trading/AmendOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*proto1.PendingOrder, error) {
	out := new(proto1.PendingOrder)
	err := c.cc.Invoke(ctx, "/api.trading/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*proto1.PendingOrder, error) {
	out := new(proto1.PendingOrder)
	err := c.cc.Invoke(ctx, "/api.trading/SubmitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) NotifyTraderAccount(ctx context.Context, in *NotifyTraderAccountRequest, opts ...grpc.CallOption) (*NotifyTraderAccountResponse, error) {
	out := new(NotifyTraderAccountResponse)
	err := c.cc.Invoke(ctx, "/api.trading/NotifyTraderAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/api.trading/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingServer is the server API for Trading service.
type TradingServer interface {
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error)
	AmendOrder(context.Context, *AmendOrderRequest) (*proto1.PendingOrder, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*proto1.PendingOrder, error)
	SubmitOrder(context.Context, *SubmitOrderRequest) (*proto1.PendingOrder, error)
	NotifyTraderAccount(context.Context, *NotifyTraderAccountRequest) (*NotifyTraderAccountResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
}

func RegisterTradingServer(s *grpc.Server, srv TradingServer) {
	s.RegisterService(&_Trading_serviceDesc, srv)
}

func _Trading_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_AmendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AmendOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).AmendOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/AmendOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).AmendOrder(ctx, req.(*AmendOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/SubmitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).SubmitOrder(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_NotifyTraderAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTraderAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).NotifyTraderAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/NotifyTraderAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).NotifyTraderAccount(ctx, req.(*NotifyTraderAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trading_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trading_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.trading",
	HandlerType: (*TradingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Trading_SignIn_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _Trading_CheckToken_Handler,
		},
		{
			MethodName: "AmendOrder",
			Handler:    _Trading_AmendOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Trading_CancelOrder_Handler,
		},
		{
			MethodName: "SubmitOrder",
			Handler:    _Trading_SubmitOrder_Handler,
		},
		{
			MethodName: "NotifyTraderAccount",
			Handler:    _Trading_NotifyTraderAccount_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Trading_Withdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/trading.proto",
}

// TradingDataClient is the client API for TradingData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TradingDataClient interface {
	OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersResponse, error)
	OrdersByParty(ctx context.Context, in *OrdersByPartyRequest, opts ...grpc.CallOption) (*OrdersResponse, error)
	OrderByMarketAndId(ctx context.Context, in *OrderByMarketAndIdRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	OrderByReference(ctx context.Context, in *OrderByReferenceRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	MarketByID(ctx context.Context, in *MarketByIDRequest, opts ...grpc.CallOption) (*MarketByIDResponse, error)
	Markets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MarketsResponse, error)
	MarketDepth(ctx context.Context, in *MarketDepthRequest, opts ...grpc.CallOption) (*MarketDepthResponse, error)
	LastTrade(ctx context.Context, in *LastTradeRequest, opts ...grpc.CallOption) (*LastTradeResponse, error)
	PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error)
	Parties(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PartiesResponse, error)
	TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesResponse, error)
	TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesResponse, error)
	TradesByOrder(ctx context.Context, in *TradesByOrderRequest, opts ...grpc.CallOption) (*TradesResponse, error)
	PositionsByParty(ctx context.Context, in *PositionsByPartyRequest, opts ...grpc.CallOption) (*PositionsByPartyResponse, error)
	Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error)
	Statistics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.Statistics, error)
	GetVegaTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VegaTimeResponse, error)
	OrdersSubscribe(ctx context.Context, in *OrdersSubscribeRequest, opts ...grpc.CallOption) (TradingData_OrdersSubscribeClient, error)
	TradesSubscribe(ctx context.Context, in *TradesSubscribeRequest, opts ...grpc.CallOption) (TradingData_TradesSubscribeClient, error)
	CandlesSubscribe(ctx context.Context, in *CandlesSubscribeRequest, opts ...grpc.CallOption) (TradingData_CandlesSubscribeClient, error)
	MarketDepthSubscribe(ctx context.Context, in *MarketDepthSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarketDepthSubscribeClient, error)
	PositionsSubscribe(ctx context.Context, in *PositionsSubscribeRequest, opts ...grpc.CallOption) (TradingData_PositionsSubscribeClient, error)
	AccountsSubscribe(ctx context.Context, in *AccountsSubscribeRequest, opts ...grpc.CallOption) (TradingData_AccountsSubscribeClient, error)
	TransferResponsesSubscribe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TradingData_TransferResponsesSubscribeClient, error)
	AccountsByParty(ctx context.Context, in *AccountsByPartyRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	AccountsByPartyAndMarket(ctx context.Context, in *AccountsByPartyAndMarketRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	AccountsByPartyAndType(ctx context.Context, in *AccountsByPartyAndTypeRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	AccountsByPartyAndAsset(ctx context.Context, in *AccountsByPartyAndAssetRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
}

type tradingDataClient struct {
	cc *grpc.ClientConn
}

func NewTradingDataClient(cc *grpc.ClientConn) TradingDataClient {
	return &tradingDataClient{cc}
}

func (c *tradingDataClient) OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrdersByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrdersByParty(ctx context.Context, in *OrdersByPartyRequest, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrdersByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrderByMarketAndId(ctx context.Context, in *OrderByMarketAndIdRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrderByMarketAndId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrderByReference(ctx context.Context, in *OrderByReferenceRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/OrderByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) MarketByID(ctx context.Context, in *MarketByIDRequest, opts ...grpc.CallOption) (*MarketByIDResponse, error) {
	out := new(MarketByIDResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/MarketByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Markets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MarketsResponse, error) {
	out := new(MarketsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Markets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) MarketDepth(ctx context.Context, in *MarketDepthRequest, opts ...grpc.CallOption) (*MarketDepthResponse, error) {
	out := new(MarketDepthResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/MarketDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) LastTrade(ctx context.Context, in *LastTradeRequest, opts ...grpc.CallOption) (*LastTradeResponse, error) {
	out := new(LastTradeResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/LastTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error) {
	out := new(PartyByIDResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/PartyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Parties(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PartiesResponse, error) {
	out := new(PartiesResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Parties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesResponse, error) {
	out := new(TradesResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/TradesByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesResponse, error) {
	out := new(TradesResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/TradesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) TradesByOrder(ctx context.Context, in *TradesByOrderRequest, opts ...grpc.CallOption) (*TradesResponse, error) {
	out := new(TradesResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/TradesByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) PositionsByParty(ctx context.Context, in *PositionsByPartyRequest, opts ...grpc.CallOption) (*PositionsByPartyResponse, error) {
	out := new(PositionsByPartyResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/PositionsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error) {
	out := new(CandlesResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/Candles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) Statistics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*proto1.Statistics, error) {
	out := new(proto1.Statistics)
	err := c.cc.Invoke(ctx, "/api.trading_data/Statistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) GetVegaTime(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VegaTimeResponse, error) {
	out := new(VegaTimeResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/GetVegaTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) OrdersSubscribe(ctx context.Context, in *OrdersSubscribeRequest, opts ...grpc.CallOption) (TradingData_OrdersSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[0], "/api.trading_data/OrdersSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataOrdersSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_OrdersSubscribeClient interface {
	Recv() (*OrdersStream, error)
	grpc.ClientStream
}

type tradingDataOrdersSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataOrdersSubscribeClient) Recv() (*OrdersStream, error) {
	m := new(OrdersStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) TradesSubscribe(ctx context.Context, in *TradesSubscribeRequest, opts ...grpc.CallOption) (TradingData_TradesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[1], "/api.trading_data/TradesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataTradesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_TradesSubscribeClient interface {
	Recv() (*TradesStream, error)
	grpc.ClientStream
}

type tradingDataTradesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataTradesSubscribeClient) Recv() (*TradesStream, error) {
	m := new(TradesStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) CandlesSubscribe(ctx context.Context, in *CandlesSubscribeRequest, opts ...grpc.CallOption) (TradingData_CandlesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[2], "/api.trading_data/CandlesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataCandlesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_CandlesSubscribeClient interface {
	Recv() (*proto1.Candle, error)
	grpc.ClientStream
}

type tradingDataCandlesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataCandlesSubscribeClient) Recv() (*proto1.Candle, error) {
	m := new(proto1.Candle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) MarketDepthSubscribe(ctx context.Context, in *MarketDepthSubscribeRequest, opts ...grpc.CallOption) (TradingData_MarketDepthSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[3], "/api.trading_data/MarketDepthSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataMarketDepthSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_MarketDepthSubscribeClient interface {
	Recv() (*proto1.MarketDepth, error)
	grpc.ClientStream
}

type tradingDataMarketDepthSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataMarketDepthSubscribeClient) Recv() (*proto1.MarketDepth, error) {
	m := new(proto1.MarketDepth)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) PositionsSubscribe(ctx context.Context, in *PositionsSubscribeRequest, opts ...grpc.CallOption) (TradingData_PositionsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[4], "/api.trading_data/PositionsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataPositionsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_PositionsSubscribeClient interface {
	Recv() (*proto1.MarketPosition, error)
	grpc.ClientStream
}

type tradingDataPositionsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataPositionsSubscribeClient) Recv() (*proto1.MarketPosition, error) {
	m := new(proto1.MarketPosition)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) AccountsSubscribe(ctx context.Context, in *AccountsSubscribeRequest, opts ...grpc.CallOption) (TradingData_AccountsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[5], "/api.trading_data/AccountsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataAccountsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_AccountsSubscribeClient interface {
	Recv() (*proto1.Account, error)
	grpc.ClientStream
}

type tradingDataAccountsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataAccountsSubscribeClient) Recv() (*proto1.Account, error) {
	m := new(proto1.Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) TransferResponsesSubscribe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TradingData_TransferResponsesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TradingData_serviceDesc.Streams[6], "/api.trading_data/TransferResponsesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataTransferResponsesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingData_TransferResponsesSubscribeClient interface {
	Recv() (*proto1.TransferResponse, error)
	grpc.ClientStream
}

type tradingDataTransferResponsesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataTransferResponsesSubscribeClient) Recv() (*proto1.TransferResponse, error) {
	m := new(proto1.TransferResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataClient) AccountsByParty(ctx context.Context, in *AccountsByPartyRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/AccountsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) AccountsByPartyAndMarket(ctx context.Context, in *AccountsByPartyAndMarketRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/AccountsByPartyAndMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) AccountsByPartyAndType(ctx context.Context, in *AccountsByPartyAndTypeRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/AccountsByPartyAndType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataClient) AccountsByPartyAndAsset(ctx context.Context, in *AccountsByPartyAndAssetRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := c.cc.Invoke(ctx, "/api.trading_data/AccountsByPartyAndAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServer is the server API for TradingData service.
type TradingDataServer interface {
	OrdersByMarket(context.Context, *OrdersByMarketRequest) (*OrdersResponse, error)
	OrdersByParty(context.Context, *OrdersByPartyRequest) (*OrdersResponse, error)
	OrderByMarketAndId(context.Context, *OrderByMarketAndIdRequest) (*OrderResponse, error)
	OrderByReference(context.Context, *OrderByReferenceRequest) (*OrderResponse, error)
	MarketByID(context.Context, *MarketByIDRequest) (*MarketByIDResponse, error)
	Markets(context.Context, *empty.Empty) (*MarketsResponse, error)
	MarketDepth(context.Context, *MarketDepthRequest) (*MarketDepthResponse, error)
	LastTrade(context.Context, *LastTradeRequest) (*LastTradeResponse, error)
	PartyByID(context.Context, *PartyByIDRequest) (*PartyByIDResponse, error)
	Parties(context.Context, *empty.Empty) (*PartiesResponse, error)
	TradesByMarket(context.Context, *TradesByMarketRequest) (*TradesResponse, error)
	TradesByParty(context.Context, *TradesByPartyRequest) (*TradesResponse, error)
	TradesByOrder(context.Context, *TradesByOrderRequest) (*TradesResponse, error)
	PositionsByParty(context.Context, *PositionsByPartyRequest) (*PositionsByPartyResponse, error)
	Candles(context.Context, *CandlesRequest) (*CandlesResponse, error)
	Statistics(context.Context, *empty.Empty) (*proto1.Statistics, error)
	GetVegaTime(context.Context, *empty.Empty) (*VegaTimeResponse, error)
	OrdersSubscribe(*OrdersSubscribeRequest, TradingData_OrdersSubscribeServer) error
	TradesSubscribe(*TradesSubscribeRequest, TradingData_TradesSubscribeServer) error
	CandlesSubscribe(*CandlesSubscribeRequest, TradingData_CandlesSubscribeServer) error
	MarketDepthSubscribe(*MarketDepthSubscribeRequest, TradingData_MarketDepthSubscribeServer) error
	PositionsSubscribe(*PositionsSubscribeRequest, TradingData_PositionsSubscribeServer) error
	AccountsSubscribe(*AccountsSubscribeRequest, TradingData_AccountsSubscribeServer) error
	TransferResponsesSubscribe(*empty.Empty, TradingData_TransferResponsesSubscribeServer) error
	AccountsByParty(context.Context, *AccountsByPartyRequest) (*AccountsResponse, error)
	AccountsByPartyAndMarket(context.Context, *AccountsByPartyAndMarketRequest) (*AccountsResponse, error)
	AccountsByPartyAndType(context.Context, *AccountsByPartyAndTypeRequest) (*AccountsResponse, error)
	AccountsByPartyAndAsset(context.Context, *AccountsByPartyAndAssetRequest) (*AccountsResponse, error)
}

func RegisterTradingDataServer(s *grpc.Server, srv TradingDataServer) {
	s.RegisterService(&_TradingData_serviceDesc, srv)
}

func _TradingData_OrdersByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrdersByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrdersByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrdersByMarket(ctx, req.(*OrdersByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrdersByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrdersByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrdersByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrdersByParty(ctx, req.(*OrdersByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrderByMarketAndId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByMarketAndIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrderByMarketAndId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrderByMarketAndId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrderByMarketAndId(ctx, req.(*OrderByMarketAndIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrderByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).OrderByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/OrderByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).OrderByReference(ctx, req.(*OrderByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_MarketByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).MarketByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/MarketByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).MarketByID(ctx, req.(*MarketByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Markets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Markets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Markets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Markets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_MarketDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).MarketDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/MarketDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).MarketDepth(ctx, req.(*MarketDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_LastTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).LastTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/LastTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).LastTrade(ctx, req.(*LastTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_PartyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).PartyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/PartyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).PartyByID(ctx, req.(*PartyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Parties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Parties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Parties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Parties(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_TradesByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).TradesByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/TradesByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).TradesByMarket(ctx, req.(*TradesByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_TradesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).TradesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/TradesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).TradesByParty(ctx, req.(*TradesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_TradesByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).TradesByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/TradesByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).TradesByOrder(ctx, req.(*TradesByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_PositionsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionsByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).PositionsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/PositionsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).PositionsByParty(ctx, req.(*PositionsByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Candles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Candles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Candles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Candles(ctx, req.(*CandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).Statistics(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_GetVegaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).GetVegaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/GetVegaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).GetVegaTime(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_OrdersSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrdersSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).OrdersSubscribe(m, &tradingDataOrdersSubscribeServer{stream})
}

type TradingData_OrdersSubscribeServer interface {
	Send(*OrdersStream) error
	grpc.ServerStream
}

type tradingDataOrdersSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataOrdersSubscribeServer) Send(m *OrdersStream) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_TradesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TradesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).TradesSubscribe(m, &tradingDataTradesSubscribeServer{stream})
}

type TradingData_TradesSubscribeServer interface {
	Send(*TradesStream) error
	grpc.ServerStream
}

type tradingDataTradesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataTradesSubscribeServer) Send(m *TradesStream) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_CandlesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CandlesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).CandlesSubscribe(m, &tradingDataCandlesSubscribeServer{stream})
}

type TradingData_CandlesSubscribeServer interface {
	Send(*proto1.Candle) error
	grpc.ServerStream
}

type tradingDataCandlesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataCandlesSubscribeServer) Send(m *proto1.Candle) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_MarketDepthSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDepthSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).MarketDepthSubscribe(m, &tradingDataMarketDepthSubscribeServer{stream})
}

type TradingData_MarketDepthSubscribeServer interface {
	Send(*proto1.MarketDepth) error
	grpc.ServerStream
}

type tradingDataMarketDepthSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataMarketDepthSubscribeServer) Send(m *proto1.MarketDepth) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_PositionsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PositionsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).PositionsSubscribe(m, &tradingDataPositionsSubscribeServer{stream})
}

type TradingData_PositionsSubscribeServer interface {
	Send(*proto1.MarketPosition) error
	grpc.ServerStream
}

type tradingDataPositionsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataPositionsSubscribeServer) Send(m *proto1.MarketPosition) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_AccountsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).AccountsSubscribe(m, &tradingDataAccountsSubscribeServer{stream})
}

type TradingData_AccountsSubscribeServer interface {
	Send(*proto1.Account) error
	grpc.ServerStream
}

type tradingDataAccountsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataAccountsSubscribeServer) Send(m *proto1.Account) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_TransferResponsesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServer).TransferResponsesSubscribe(m, &tradingDataTransferResponsesSubscribeServer{stream})
}

type TradingData_TransferResponsesSubscribeServer interface {
	Send(*proto1.TransferResponse) error
	grpc.ServerStream
}

type tradingDataTransferResponsesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataTransferResponsesSubscribeServer) Send(m *proto1.TransferResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingData_AccountsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).AccountsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/AccountsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).AccountsByParty(ctx, req.(*AccountsByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_AccountsByPartyAndMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsByPartyAndMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).AccountsByPartyAndMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/AccountsByPartyAndMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).AccountsByPartyAndMarket(ctx, req.(*AccountsByPartyAndMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_AccountsByPartyAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsByPartyAndTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).AccountsByPartyAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/AccountsByPartyAndType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).AccountsByPartyAndType(ctx, req.(*AccountsByPartyAndTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingData_AccountsByPartyAndAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsByPartyAndAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServer).AccountsByPartyAndAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.trading_data/AccountsByPartyAndAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServer).AccountsByPartyAndAsset(ctx, req.(*AccountsByPartyAndAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradingData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.trading_data",
	HandlerType: (*TradingDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrdersByMarket",
			Handler:    _TradingData_OrdersByMarket_Handler,
		},
		{
			MethodName: "OrdersByParty",
			Handler:    _TradingData_OrdersByParty_Handler,
		},
		{
			MethodName: "OrderByMarketAndId",
			Handler:    _TradingData_OrderByMarketAndId_Handler,
		},
		{
			MethodName: "OrderByReference",
			Handler:    _TradingData_OrderByReference_Handler,
		},
		{
			MethodName: "MarketByID",
			Handler:    _TradingData_MarketByID_Handler,
		},
		{
			MethodName: "Markets",
			Handler:    _TradingData_Markets_Handler,
		},
		{
			MethodName: "MarketDepth",
			Handler:    _TradingData_MarketDepth_Handler,
		},
		{
			MethodName: "LastTrade",
			Handler:    _TradingData_LastTrade_Handler,
		},
		{
			MethodName: "PartyByID",
			Handler:    _TradingData_PartyByID_Handler,
		},
		{
			MethodName: "Parties",
			Handler:    _TradingData_Parties_Handler,
		},
		{
			MethodName: "TradesByMarket",
			Handler:    _TradingData_TradesByMarket_Handler,
		},
		{
			MethodName: "TradesByParty",
			Handler:    _TradingData_TradesByParty_Handler,
		},
		{
			MethodName: "TradesByOrder",
			Handler:    _TradingData_TradesByOrder_Handler,
		},
		{
			MethodName: "PositionsByParty",
			Handler:    _TradingData_PositionsByParty_Handler,
		},
		{
			MethodName: "Candles",
			Handler:    _TradingData_Candles_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _TradingData_Statistics_Handler,
		},
		{
			MethodName: "GetVegaTime",
			Handler:    _TradingData_GetVegaTime_Handler,
		},
		{
			MethodName: "AccountsByParty",
			Handler:    _TradingData_AccountsByParty_Handler,
		},
		{
			MethodName: "AccountsByPartyAndMarket",
			Handler:    _TradingData_AccountsByPartyAndMarket_Handler,
		},
		{
			MethodName: "AccountsByPartyAndType",
			Handler:    _TradingData_AccountsByPartyAndType_Handler,
		},
		{
			MethodName: "AccountsByPartyAndAsset",
			Handler:    _TradingData_AccountsByPartyAndAsset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OrdersSubscribe",
			Handler:       _TradingData_OrdersSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TradesSubscribe",
			Handler:       _TradingData_TradesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CandlesSubscribe",
			Handler:       _TradingData_CandlesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketDepthSubscribe",
			Handler:       _TradingData_MarketDepthSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PositionsSubscribe",
			Handler:       _TradingData_PositionsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountsSubscribe",
			Handler:       _TradingData_AccountsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransferResponsesSubscribe",
			Handler:       _TradingData_TransferResponsesSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api/trading.proto",
}
