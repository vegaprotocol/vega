// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: data-node/api/v1/trading_data.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingDataServiceClient is the client API for TradingDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingDataServiceClient interface {
	// Get a list of Accounts by Market
	MarketAccounts(ctx context.Context, in *MarketAccountsRequest, opts ...grpc.CallOption) (*MarketAccountsResponse, error)
	// Get a list of Accounts by Party
	PartyAccounts(ctx context.Context, in *PartyAccountsRequest, opts ...grpc.CallOption) (*PartyAccountsResponse, error)
	// Get a list of accounts holding infrastructure fees.
	// Can be filtered by asset, there will be 1 infrastructure fee account per
	// asset in the network.
	FeeInfrastructureAccounts(ctx context.Context, in *FeeInfrastructureAccountsRequest, opts ...grpc.CallOption) (*FeeInfrastructureAccountsResponse, error)
	// Get a list of accounts holding reward pools
	// Can be filtered by asset, there will be 1 reward pool account per
	// asset in the network.
	GlobalRewardPoolAccounts(ctx context.Context, in *GlobalRewardPoolAccountsRequest, opts ...grpc.CallOption) (*GlobalRewardPoolAccountsResponse, error)
	// Get a list of Candles by Market
	Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error)
	// Get Market Data by Market ID
	MarketDataByID(ctx context.Context, in *MarketDataByIDRequest, opts ...grpc.CallOption) (*MarketDataByIDResponse, error)
	// Get a list of Market Data
	MarketsData(ctx context.Context, in *MarketsDataRequest, opts ...grpc.CallOption) (*MarketsDataResponse, error)
	// Get a Market by ID
	MarketByID(ctx context.Context, in *MarketByIDRequest, opts ...grpc.CallOption) (*MarketByIDResponse, error)
	// Get Market Depth
	MarketDepth(ctx context.Context, in *MarketDepthRequest, opts ...grpc.CallOption) (*MarketDepthResponse, error)
	// Get a list of Markets
	Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error)
	// Get an Order by Market and Order ID
	OrderByMarketAndID(ctx context.Context, in *OrderByMarketAndIDRequest, opts ...grpc.CallOption) (*OrderByMarketAndIDResponse, error)
	// Get an Order by Pending Order reference (UUID)
	OrderByReference(ctx context.Context, in *OrderByReferenceRequest, opts ...grpc.CallOption) (*OrderByReferenceResponse, error)
	// Get a list of Orders by Market
	OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersByMarketResponse, error)
	// Get a list of Orders by Party
	OrdersByParty(ctx context.Context, in *OrdersByPartyRequest, opts ...grpc.CallOption) (*OrdersByPartyResponse, error)
	// Get a specific order by order ID
	OrderByID(ctx context.Context, in *OrderByIDRequest, opts ...grpc.CallOption) (*OrderByIDResponse, error)
	// Get all versions of the order by its orderID
	OrderVersionsByID(ctx context.Context, in *OrderVersionsByIDRequest, opts ...grpc.CallOption) (*OrderVersionsByIDResponse, error)
	// Get Margin Levels by Party ID
	MarginLevels(ctx context.Context, in *MarginLevelsRequest, opts ...grpc.CallOption) (*MarginLevelsResponse, error)
	// Get a list of Parties
	Parties(ctx context.Context, in *PartiesRequest, opts ...grpc.CallOption) (*PartiesResponse, error)
	// Get a Party by ID
	PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error)
	// Get a list of Positions by Party
	PositionsByParty(ctx context.Context, in *PositionsByPartyRequest, opts ...grpc.CallOption) (*PositionsByPartyResponse, error)
	// Get latest Trade
	LastTrade(ctx context.Context, in *LastTradeRequest, opts ...grpc.CallOption) (*LastTradeResponse, error)
	// Get a list of Trades by Market
	TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesByMarketResponse, error)
	// Get a list of Trades by Order
	TradesByOrder(ctx context.Context, in *TradesByOrderRequest, opts ...grpc.CallOption) (*TradesByOrderResponse, error)
	// Get a list of Trades by Party
	TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesByPartyResponse, error)
	// Get governance data (proposals and votes) for all proposals
	GetProposals(ctx context.Context, in *GetProposalsRequest, opts ...grpc.CallOption) (*GetProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals by party authoring them
	GetProposalsByParty(ctx context.Context, in *GetProposalsByPartyRequest, opts ...grpc.CallOption) (*GetProposalsByPartyResponse, error)
	// Get votes by party casting them
	GetVotesByParty(ctx context.Context, in *GetVotesByPartyRequest, opts ...grpc.CallOption) (*GetVotesByPartyResponse, error)
	// Get governance data (proposals and votes) for proposals that aim creating new markets
	GetNewMarketProposals(ctx context.Context, in *GetNewMarketProposalsRequest, opts ...grpc.CallOption) (*GetNewMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating markets
	GetUpdateMarketProposals(ctx context.Context, in *GetUpdateMarketProposalsRequest, opts ...grpc.CallOption) (*GetUpdateMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating Vega network parameters
	GetNetworkParametersProposals(ctx context.Context, in *GetNetworkParametersProposalsRequest, opts ...grpc.CallOption) (*GetNetworkParametersProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals aiming to create new assets
	GetNewAssetProposals(ctx context.Context, in *GetNewAssetProposalsRequest, opts ...grpc.CallOption) (*GetNewAssetProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals aiming to create freeform proposals
	GetNewFreeformProposals(ctx context.Context, in *GetNewFreeformProposalsRequest, opts ...grpc.CallOption) (*GetNewFreeformProposalsResponse, error)
	// Get governance data (proposals and votes) for a proposal located by ID
	GetProposalByID(ctx context.Context, in *GetProposalByIDRequest, opts ...grpc.CallOption) (*GetProposalByIDResponse, error)
	// Get governance data (proposals and votes) for a proposal located by reference
	GetProposalByReference(ctx context.Context, in *GetProposalByReferenceRequest, opts ...grpc.CallOption) (*GetProposalByReferenceResponse, error)
	// Subscribe to a stream of all governance updates
	ObserveGovernance(ctx context.Context, in *ObserveGovernanceRequest, opts ...grpc.CallOption) (TradingDataService_ObserveGovernanceClient, error)
	// Subscribe to a stream of proposal updates
	ObservePartyProposals(ctx context.Context, in *ObservePartyProposalsRequest, opts ...grpc.CallOption) (TradingDataService_ObservePartyProposalsClient, error)
	// Subscribe to a stream of votes cast by a specific party
	ObservePartyVotes(ctx context.Context, in *ObservePartyVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObservePartyVotesClient, error)
	// Subscribe to a stream of proposal votes
	ObserveProposalVotes(ctx context.Context, in *ObserveProposalVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveProposalVotesClient, error)
	// Subscribe to a stream of events from the core
	ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingDataService_ObserveEventBusClient, error)
	// Get data of current node
	GetNodeData(ctx context.Context, in *GetNodeDataRequest, opts ...grpc.CallOption) (*GetNodeDataResponse, error)
	// List all known network nodes
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	// Get a specific node by ID
	GetNodeByID(ctx context.Context, in *GetNodeByIDRequest, opts ...grpc.CallOption) (*GetNodeByIDResponse, error)
	// Get all key rotations
	GetKeyRotations(ctx context.Context, in *GetKeyRotationsRequest, opts ...grpc.CallOption) (*GetKeyRotationsResponse, error)
	// Get all key rotations by node
	GetKeyRotationsByNode(ctx context.Context, in *GetKeyRotationsByNodeRequest, opts ...grpc.CallOption) (*GetKeyRotationsByNodeResponse, error)
	// Get data for a specific epoch, if id omitted it gets the current epoch
	GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*GetEpochResponse, error)
	// Get Time
	GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error)
	// Subscribe to a stream of Accounts
	AccountsSubscribe(ctx context.Context, in *AccountsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_AccountsSubscribeClient, error)
	// Subscribe to a stream of Candles
	CandlesSubscribe(ctx context.Context, in *CandlesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_CandlesSubscribeClient, error)
	// Subscribe to a stream of Margin Levels
	MarginLevelsSubscribe(ctx context.Context, in *MarginLevelsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarginLevelsSubscribeClient, error)
	// Subscribe to a stream of Market Depth
	MarketDepthSubscribe(ctx context.Context, in *MarketDepthSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketDepthSubscribeClient, error)
	// Subscribe to a stream of Market Depth Price Level Updates
	MarketDepthUpdatesSubscribe(ctx context.Context, in *MarketDepthUpdatesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketDepthUpdatesSubscribeClient, error)
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketsDataSubscribeClient, error)
	// Subscribe to a stream of Orders
	OrdersSubscribe(ctx context.Context, in *OrdersSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_OrdersSubscribeClient, error)
	// Subscribe to a stream of Positions
	PositionsSubscribe(ctx context.Context, in *PositionsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_PositionsSubscribeClient, error)
	// Subscribe to a stream of Trades
	TradesSubscribe(ctx context.Context, in *TradesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_TradesSubscribeClient, error)
	// Subscribe to a stream of Transfer Responses
	TransferResponsesSubscribe(ctx context.Context, in *TransferResponsesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_TransferResponsesSubscribeClient, error)
	// Get an aggregate of signatures from all the nodes of the network
	GetNodeSignaturesAggregate(ctx context.Context, in *GetNodeSignaturesAggregateRequest, opts ...grpc.CallOption) (*GetNodeSignaturesAggregateResponse, error)
	// Get an asset by its identifier
	AssetByID(ctx context.Context, in *AssetByIDRequest, opts ...grpc.CallOption) (*AssetByIDResponse, error)
	// Get a list of all assets on Vega
	Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (*AssetsResponse, error)
	// Get an estimate for the fee to be paid for a given order
	EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error)
	// Get an estimate for the margin required for a new order
	EstimateMargin(ctx context.Context, in *EstimateMarginRequest, opts ...grpc.CallOption) (*EstimateMarginResponse, error)
	// Get the bundle approval for an ERC20 withdrawal,
	// these data are being used to bundle the call to the smart contract on the ethereum bridge
	ERC20WithdrawalApproval(ctx context.Context, in *ERC20WithdrawalApprovalRequest, opts ...grpc.CallOption) (*ERC20WithdrawalApprovalResponse, error)
	// Get a withdrawal by its identifier
	Withdrawal(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// Get withdrawals for a party
	Withdrawals(ctx context.Context, in *WithdrawalsRequest, opts ...grpc.CallOption) (*WithdrawalsResponse, error)
	// Get a deposit by its identifier
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	// Get deposits for a party
	Deposits(ctx context.Context, in *DepositsRequest, opts ...grpc.CallOption) (*DepositsResponse, error)
	// Get the network parameters
	NetworkParameters(ctx context.Context, in *NetworkParametersRequest, opts ...grpc.CallOption) (*NetworkParametersResponse, error)
	// Get the liquidity provision orders
	LiquidityProvisions(ctx context.Context, in *LiquidityProvisionsRequest, opts ...grpc.CallOption) (*LiquidityProvisionsResponse, error)
	// Get an oracle spec by ID.
	OracleSpec(ctx context.Context, in *OracleSpecRequest, opts ...grpc.CallOption) (*OracleSpecResponse, error)
	// Get the oracle specs
	OracleSpecs(ctx context.Context, in *OracleSpecsRequest, opts ...grpc.CallOption) (*OracleSpecsResponse, error)
	// Get oracle data that matched the given spec
	OracleDataBySpec(ctx context.Context, in *OracleDataBySpecRequest, opts ...grpc.CallOption) (*OracleDataBySpecResponse, error)
	// Get all oracle data
	ListOracleData(ctx context.Context, in *ListOracleDataRequest, opts ...grpc.CallOption) (*ListOracleDataResponse, error)
	// subscribe to rewards
	ObserveRewards(ctx context.Context, in *ObserveRewardsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveRewardsClient, error)
	// Get rewards
	GetRewards(ctx context.Context, in *GetRewardsRequest, opts ...grpc.CallOption) (*GetRewardsResponse, error)
	// Get reward summaries
	GetRewardSummaries(ctx context.Context, in *GetRewardSummariesRequest, opts ...grpc.CallOption) (*GetRewardSummariesResponse, error)
	Checkpoints(ctx context.Context, in *CheckpointsRequest, opts ...grpc.CallOption) (*CheckpointsResponse, error)
	// Get delegation data
	Delegations(ctx context.Context, in *DelegationsRequest, opts ...grpc.CallOption) (*DelegationsResponse, error)
	// subscribe to delegation events
	ObserveDelegations(ctx context.Context, in *ObserveDelegationsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveDelegationsClient, error)
	PartyStake(ctx context.Context, in *PartyStakeRequest, opts ...grpc.CallOption) (*PartyStakeResponse, error)
	Transfers(ctx context.Context, in *TransfersRequest, opts ...grpc.CallOption) (*TransfersResponse, error)
	// Get Risk Factor data for a given market
	GetRiskFactors(ctx context.Context, in *GetRiskFactorsRequest, opts ...grpc.CallOption) (*GetRiskFactorsResponse, error)
}

type tradingDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingDataServiceClient(cc grpc.ClientConnInterface) TradingDataServiceClient {
	return &tradingDataServiceClient{cc}
}

func (c *tradingDataServiceClient) MarketAccounts(ctx context.Context, in *MarketAccountsRequest, opts ...grpc.CallOption) (*MarketAccountsResponse, error) {
	out := new(MarketAccountsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/MarketAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) PartyAccounts(ctx context.Context, in *PartyAccountsRequest, opts ...grpc.CallOption) (*PartyAccountsResponse, error) {
	out := new(PartyAccountsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/PartyAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) FeeInfrastructureAccounts(ctx context.Context, in *FeeInfrastructureAccountsRequest, opts ...grpc.CallOption) (*FeeInfrastructureAccountsResponse, error) {
	out := new(FeeInfrastructureAccountsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/FeeInfrastructureAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GlobalRewardPoolAccounts(ctx context.Context, in *GlobalRewardPoolAccountsRequest, opts ...grpc.CallOption) (*GlobalRewardPoolAccountsResponse, error) {
	out := new(GlobalRewardPoolAccountsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GlobalRewardPoolAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Candles(ctx context.Context, in *CandlesRequest, opts ...grpc.CallOption) (*CandlesResponse, error) {
	out := new(CandlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Candles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketDataByID(ctx context.Context, in *MarketDataByIDRequest, opts ...grpc.CallOption) (*MarketDataByIDResponse, error) {
	out := new(MarketDataByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/MarketDataByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketsData(ctx context.Context, in *MarketsDataRequest, opts ...grpc.CallOption) (*MarketsDataResponse, error) {
	out := new(MarketsDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/MarketsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketByID(ctx context.Context, in *MarketByIDRequest, opts ...grpc.CallOption) (*MarketByIDResponse, error) {
	out := new(MarketByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/MarketByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarketDepth(ctx context.Context, in *MarketDepthRequest, opts ...grpc.CallOption) (*MarketDepthResponse, error) {
	out := new(MarketDepthResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/MarketDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error) {
	out := new(MarketsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Markets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderByMarketAndID(ctx context.Context, in *OrderByMarketAndIDRequest, opts ...grpc.CallOption) (*OrderByMarketAndIDResponse, error) {
	out := new(OrderByMarketAndIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OrderByMarketAndID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderByReference(ctx context.Context, in *OrderByReferenceRequest, opts ...grpc.CallOption) (*OrderByReferenceResponse, error) {
	out := new(OrderByReferenceResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OrderByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrdersByMarket(ctx context.Context, in *OrdersByMarketRequest, opts ...grpc.CallOption) (*OrdersByMarketResponse, error) {
	out := new(OrdersByMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OrdersByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrdersByParty(ctx context.Context, in *OrdersByPartyRequest, opts ...grpc.CallOption) (*OrdersByPartyResponse, error) {
	out := new(OrdersByPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OrdersByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderByID(ctx context.Context, in *OrderByIDRequest, opts ...grpc.CallOption) (*OrderByIDResponse, error) {
	out := new(OrderByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OrderVersionsByID(ctx context.Context, in *OrderVersionsByIDRequest, opts ...grpc.CallOption) (*OrderVersionsByIDResponse, error) {
	out := new(OrderVersionsByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OrderVersionsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) MarginLevels(ctx context.Context, in *MarginLevelsRequest, opts ...grpc.CallOption) (*MarginLevelsResponse, error) {
	out := new(MarginLevelsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/MarginLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Parties(ctx context.Context, in *PartiesRequest, opts ...grpc.CallOption) (*PartiesResponse, error) {
	out := new(PartiesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Parties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) PartyByID(ctx context.Context, in *PartyByIDRequest, opts ...grpc.CallOption) (*PartyByIDResponse, error) {
	out := new(PartyByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/PartyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) PositionsByParty(ctx context.Context, in *PositionsByPartyRequest, opts ...grpc.CallOption) (*PositionsByPartyResponse, error) {
	out := new(PositionsByPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/PositionsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) LastTrade(ctx context.Context, in *LastTradeRequest, opts ...grpc.CallOption) (*LastTradeResponse, error) {
	out := new(LastTradeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/LastTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) TradesByMarket(ctx context.Context, in *TradesByMarketRequest, opts ...grpc.CallOption) (*TradesByMarketResponse, error) {
	out := new(TradesByMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/TradesByMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) TradesByOrder(ctx context.Context, in *TradesByOrderRequest, opts ...grpc.CallOption) (*TradesByOrderResponse, error) {
	out := new(TradesByOrderResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/TradesByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) TradesByParty(ctx context.Context, in *TradesByPartyRequest, opts ...grpc.CallOption) (*TradesByPartyResponse, error) {
	out := new(TradesByPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/TradesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProposals(ctx context.Context, in *GetProposalsRequest, opts ...grpc.CallOption) (*GetProposalsResponse, error) {
	out := new(GetProposalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProposalsByParty(ctx context.Context, in *GetProposalsByPartyRequest, opts ...grpc.CallOption) (*GetProposalsByPartyResponse, error) {
	out := new(GetProposalsByPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetProposalsByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetVotesByParty(ctx context.Context, in *GetVotesByPartyRequest, opts ...grpc.CallOption) (*GetVotesByPartyResponse, error) {
	out := new(GetVotesByPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetVotesByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNewMarketProposals(ctx context.Context, in *GetNewMarketProposalsRequest, opts ...grpc.CallOption) (*GetNewMarketProposalsResponse, error) {
	out := new(GetNewMarketProposalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetNewMarketProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetUpdateMarketProposals(ctx context.Context, in *GetUpdateMarketProposalsRequest, opts ...grpc.CallOption) (*GetUpdateMarketProposalsResponse, error) {
	out := new(GetUpdateMarketProposalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetUpdateMarketProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkParametersProposals(ctx context.Context, in *GetNetworkParametersProposalsRequest, opts ...grpc.CallOption) (*GetNetworkParametersProposalsResponse, error) {
	out := new(GetNetworkParametersProposalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetNetworkParametersProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNewAssetProposals(ctx context.Context, in *GetNewAssetProposalsRequest, opts ...grpc.CallOption) (*GetNewAssetProposalsResponse, error) {
	out := new(GetNewAssetProposalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetNewAssetProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNewFreeformProposals(ctx context.Context, in *GetNewFreeformProposalsRequest, opts ...grpc.CallOption) (*GetNewFreeformProposalsResponse, error) {
	out := new(GetNewFreeformProposalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetNewFreeformProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProposalByID(ctx context.Context, in *GetProposalByIDRequest, opts ...grpc.CallOption) (*GetProposalByIDResponse, error) {
	out := new(GetProposalByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetProposalByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProposalByReference(ctx context.Context, in *GetProposalByReferenceRequest, opts ...grpc.CallOption) (*GetProposalByReferenceResponse, error) {
	out := new(GetProposalByReferenceResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetProposalByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveGovernance(ctx context.Context, in *ObserveGovernanceRequest, opts ...grpc.CallOption) (TradingDataService_ObserveGovernanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[0], "/datanode.api.v1.TradingDataService/ObserveGovernance", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveGovernanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveGovernanceClient interface {
	Recv() (*ObserveGovernanceResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveGovernanceClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveGovernanceClient) Recv() (*ObserveGovernanceResponse, error) {
	m := new(ObserveGovernanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObservePartyProposals(ctx context.Context, in *ObservePartyProposalsRequest, opts ...grpc.CallOption) (TradingDataService_ObservePartyProposalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[1], "/datanode.api.v1.TradingDataService/ObservePartyProposals", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObservePartyProposalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObservePartyProposalsClient interface {
	Recv() (*ObservePartyProposalsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObservePartyProposalsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObservePartyProposalsClient) Recv() (*ObservePartyProposalsResponse, error) {
	m := new(ObservePartyProposalsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObservePartyVotes(ctx context.Context, in *ObservePartyVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObservePartyVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[2], "/datanode.api.v1.TradingDataService/ObservePartyVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObservePartyVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObservePartyVotesClient interface {
	Recv() (*ObservePartyVotesResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObservePartyVotesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObservePartyVotesClient) Recv() (*ObservePartyVotesResponse, error) {
	m := new(ObservePartyVotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObserveProposalVotes(ctx context.Context, in *ObserveProposalVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveProposalVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[3], "/datanode.api.v1.TradingDataService/ObserveProposalVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveProposalVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveProposalVotesClient interface {
	Recv() (*ObserveProposalVotesResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveProposalVotesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveProposalVotesClient) Recv() (*ObserveProposalVotesResponse, error) {
	m := new(ObserveProposalVotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingDataService_ObserveEventBusClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[4], "/datanode.api.v1.TradingDataService/ObserveEventBus", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveEventBusClient{stream}
	return x, nil
}

type TradingDataService_ObserveEventBusClient interface {
	Send(*ObserveEventBusRequest) error
	Recv() (*ObserveEventBusResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveEventBusClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveEventBusClient) Send(m *ObserveEventBusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradingDataServiceObserveEventBusClient) Recv() (*ObserveEventBusResponse, error) {
	m := new(ObserveEventBusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetNodeData(ctx context.Context, in *GetNodeDataRequest, opts ...grpc.CallOption) (*GetNodeDataResponse, error) {
	out := new(GetNodeDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetNodeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNodeByID(ctx context.Context, in *GetNodeByIDRequest, opts ...grpc.CallOption) (*GetNodeByIDResponse, error) {
	out := new(GetNodeByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetNodeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetKeyRotations(ctx context.Context, in *GetKeyRotationsRequest, opts ...grpc.CallOption) (*GetKeyRotationsResponse, error) {
	out := new(GetKeyRotationsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetKeyRotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetKeyRotationsByNode(ctx context.Context, in *GetKeyRotationsByNodeRequest, opts ...grpc.CallOption) (*GetKeyRotationsByNodeResponse, error) {
	out := new(GetKeyRotationsByNodeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetKeyRotationsByNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*GetEpochResponse, error) {
	out := new(GetEpochResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error) {
	out := new(GetVegaTimeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetVegaTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) AccountsSubscribe(ctx context.Context, in *AccountsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_AccountsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[5], "/datanode.api.v1.TradingDataService/AccountsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceAccountsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_AccountsSubscribeClient interface {
	Recv() (*AccountsSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceAccountsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceAccountsSubscribeClient) Recv() (*AccountsSubscribeResponse, error) {
	m := new(AccountsSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) CandlesSubscribe(ctx context.Context, in *CandlesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_CandlesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[6], "/datanode.api.v1.TradingDataService/CandlesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceCandlesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_CandlesSubscribeClient interface {
	Recv() (*CandlesSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceCandlesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceCandlesSubscribeClient) Recv() (*CandlesSubscribeResponse, error) {
	m := new(CandlesSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) MarginLevelsSubscribe(ctx context.Context, in *MarginLevelsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarginLevelsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[7], "/datanode.api.v1.TradingDataService/MarginLevelsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarginLevelsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarginLevelsSubscribeClient interface {
	Recv() (*MarginLevelsSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarginLevelsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarginLevelsSubscribeClient) Recv() (*MarginLevelsSubscribeResponse, error) {
	m := new(MarginLevelsSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) MarketDepthSubscribe(ctx context.Context, in *MarketDepthSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketDepthSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[8], "/datanode.api.v1.TradingDataService/MarketDepthSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarketDepthSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarketDepthSubscribeClient interface {
	Recv() (*MarketDepthSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarketDepthSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarketDepthSubscribeClient) Recv() (*MarketDepthSubscribeResponse, error) {
	m := new(MarketDepthSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) MarketDepthUpdatesSubscribe(ctx context.Context, in *MarketDepthUpdatesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketDepthUpdatesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[9], "/datanode.api.v1.TradingDataService/MarketDepthUpdatesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarketDepthUpdatesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarketDepthUpdatesSubscribeClient interface {
	Recv() (*MarketDepthUpdatesSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarketDepthUpdatesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarketDepthUpdatesSubscribeClient) Recv() (*MarketDepthUpdatesSubscribeResponse, error) {
	m := new(MarketDepthUpdatesSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) MarketsDataSubscribe(ctx context.Context, in *MarketsDataSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_MarketsDataSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[10], "/datanode.api.v1.TradingDataService/MarketsDataSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceMarketsDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_MarketsDataSubscribeClient interface {
	Recv() (*MarketsDataSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceMarketsDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceMarketsDataSubscribeClient) Recv() (*MarketsDataSubscribeResponse, error) {
	m := new(MarketsDataSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) OrdersSubscribe(ctx context.Context, in *OrdersSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_OrdersSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[11], "/datanode.api.v1.TradingDataService/OrdersSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceOrdersSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_OrdersSubscribeClient interface {
	Recv() (*OrdersSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceOrdersSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceOrdersSubscribeClient) Recv() (*OrdersSubscribeResponse, error) {
	m := new(OrdersSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) PositionsSubscribe(ctx context.Context, in *PositionsSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_PositionsSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[12], "/datanode.api.v1.TradingDataService/PositionsSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServicePositionsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_PositionsSubscribeClient interface {
	Recv() (*PositionsSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServicePositionsSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServicePositionsSubscribeClient) Recv() (*PositionsSubscribeResponse, error) {
	m := new(PositionsSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) TradesSubscribe(ctx context.Context, in *TradesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_TradesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[13], "/datanode.api.v1.TradingDataService/TradesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceTradesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_TradesSubscribeClient interface {
	Recv() (*TradesSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceTradesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceTradesSubscribeClient) Recv() (*TradesSubscribeResponse, error) {
	m := new(TradesSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) TransferResponsesSubscribe(ctx context.Context, in *TransferResponsesSubscribeRequest, opts ...grpc.CallOption) (TradingDataService_TransferResponsesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[14], "/datanode.api.v1.TradingDataService/TransferResponsesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceTransferResponsesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_TransferResponsesSubscribeClient interface {
	Recv() (*TransferResponsesSubscribeResponse, error)
	grpc.ClientStream
}

type tradingDataServiceTransferResponsesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceTransferResponsesSubscribeClient) Recv() (*TransferResponsesSubscribeResponse, error) {
	m := new(TransferResponsesSubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetNodeSignaturesAggregate(ctx context.Context, in *GetNodeSignaturesAggregateRequest, opts ...grpc.CallOption) (*GetNodeSignaturesAggregateResponse, error) {
	out := new(GetNodeSignaturesAggregateResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetNodeSignaturesAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) AssetByID(ctx context.Context, in *AssetByIDRequest, opts ...grpc.CallOption) (*AssetByIDResponse, error) {
	out := new(AssetByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/AssetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Assets(ctx context.Context, in *AssetsRequest, opts ...grpc.CallOption) (*AssetsResponse, error) {
	out := new(AssetsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error) {
	out := new(EstimateFeeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/EstimateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) EstimateMargin(ctx context.Context, in *EstimateMarginRequest, opts ...grpc.CallOption) (*EstimateMarginResponse, error) {
	out := new(EstimateMarginResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/EstimateMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ERC20WithdrawalApproval(ctx context.Context, in *ERC20WithdrawalApprovalRequest, opts ...grpc.CallOption) (*ERC20WithdrawalApprovalResponse, error) {
	out := new(ERC20WithdrawalApprovalResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/ERC20WithdrawalApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Withdrawal(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Withdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Withdrawals(ctx context.Context, in *WithdrawalsRequest, opts ...grpc.CallOption) (*WithdrawalsResponse, error) {
	out := new(WithdrawalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Withdrawals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Deposits(ctx context.Context, in *DepositsRequest, opts ...grpc.CallOption) (*DepositsResponse, error) {
	out := new(DepositsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Deposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) NetworkParameters(ctx context.Context, in *NetworkParametersRequest, opts ...grpc.CallOption) (*NetworkParametersResponse, error) {
	out := new(NetworkParametersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/NetworkParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) LiquidityProvisions(ctx context.Context, in *LiquidityProvisionsRequest, opts ...grpc.CallOption) (*LiquidityProvisionsResponse, error) {
	out := new(LiquidityProvisionsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/LiquidityProvisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OracleSpec(ctx context.Context, in *OracleSpecRequest, opts ...grpc.CallOption) (*OracleSpecResponse, error) {
	out := new(OracleSpecResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OracleSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OracleSpecs(ctx context.Context, in *OracleSpecsRequest, opts ...grpc.CallOption) (*OracleSpecsResponse, error) {
	out := new(OracleSpecsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OracleSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) OracleDataBySpec(ctx context.Context, in *OracleDataBySpecRequest, opts ...grpc.CallOption) (*OracleDataBySpecResponse, error) {
	out := new(OracleDataBySpecResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/OracleDataBySpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOracleData(ctx context.Context, in *ListOracleDataRequest, opts ...grpc.CallOption) (*ListOracleDataResponse, error) {
	out := new(ListOracleDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/ListOracleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveRewards(ctx context.Context, in *ObserveRewardsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveRewardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[15], "/datanode.api.v1.TradingDataService/ObserveRewards", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveRewardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveRewardsClient interface {
	Recv() (*ObserveRewardsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveRewardsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveRewardsClient) Recv() (*ObserveRewardsResponse, error) {
	m := new(ObserveRewardsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetRewards(ctx context.Context, in *GetRewardsRequest, opts ...grpc.CallOption) (*GetRewardsResponse, error) {
	out := new(GetRewardsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetRewardSummaries(ctx context.Context, in *GetRewardSummariesRequest, opts ...grpc.CallOption) (*GetRewardSummariesResponse, error) {
	out := new(GetRewardSummariesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetRewardSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Checkpoints(ctx context.Context, in *CheckpointsRequest, opts ...grpc.CallOption) (*CheckpointsResponse, error) {
	out := new(CheckpointsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Checkpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Delegations(ctx context.Context, in *DelegationsRequest, opts ...grpc.CallOption) (*DelegationsResponse, error) {
	out := new(DelegationsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Delegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveDelegations(ctx context.Context, in *ObserveDelegationsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveDelegationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[16], "/datanode.api.v1.TradingDataService/ObserveDelegations", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveDelegationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveDelegationsClient interface {
	Recv() (*ObserveDelegationsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveDelegationsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveDelegationsClient) Recv() (*ObserveDelegationsResponse, error) {
	m := new(ObserveDelegationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) PartyStake(ctx context.Context, in *PartyStakeRequest, opts ...grpc.CallOption) (*PartyStakeResponse, error) {
	out := new(PartyStakeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/PartyStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) Transfers(ctx context.Context, in *TransfersRequest, opts ...grpc.CallOption) (*TransfersResponse, error) {
	out := new(TransfersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/Transfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetRiskFactors(ctx context.Context, in *GetRiskFactorsRequest, opts ...grpc.CallOption) (*GetRiskFactorsResponse, error) {
	out := new(GetRiskFactorsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v1.TradingDataService/GetRiskFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServiceServer is the server API for TradingDataService service.
// All implementations must embed UnimplementedTradingDataServiceServer
// for forward compatibility
type TradingDataServiceServer interface {
	// Get a list of Accounts by Market
	MarketAccounts(context.Context, *MarketAccountsRequest) (*MarketAccountsResponse, error)
	// Get a list of Accounts by Party
	PartyAccounts(context.Context, *PartyAccountsRequest) (*PartyAccountsResponse, error)
	// Get a list of accounts holding infrastructure fees.
	// Can be filtered by asset, there will be 1 infrastructure fee account per
	// asset in the network.
	FeeInfrastructureAccounts(context.Context, *FeeInfrastructureAccountsRequest) (*FeeInfrastructureAccountsResponse, error)
	// Get a list of accounts holding reward pools
	// Can be filtered by asset, there will be 1 reward pool account per
	// asset in the network.
	GlobalRewardPoolAccounts(context.Context, *GlobalRewardPoolAccountsRequest) (*GlobalRewardPoolAccountsResponse, error)
	// Get a list of Candles by Market
	Candles(context.Context, *CandlesRequest) (*CandlesResponse, error)
	// Get Market Data by Market ID
	MarketDataByID(context.Context, *MarketDataByIDRequest) (*MarketDataByIDResponse, error)
	// Get a list of Market Data
	MarketsData(context.Context, *MarketsDataRequest) (*MarketsDataResponse, error)
	// Get a Market by ID
	MarketByID(context.Context, *MarketByIDRequest) (*MarketByIDResponse, error)
	// Get Market Depth
	MarketDepth(context.Context, *MarketDepthRequest) (*MarketDepthResponse, error)
	// Get a list of Markets
	Markets(context.Context, *MarketsRequest) (*MarketsResponse, error)
	// Get an Order by Market and Order ID
	OrderByMarketAndID(context.Context, *OrderByMarketAndIDRequest) (*OrderByMarketAndIDResponse, error)
	// Get an Order by Pending Order reference (UUID)
	OrderByReference(context.Context, *OrderByReferenceRequest) (*OrderByReferenceResponse, error)
	// Get a list of Orders by Market
	OrdersByMarket(context.Context, *OrdersByMarketRequest) (*OrdersByMarketResponse, error)
	// Get a list of Orders by Party
	OrdersByParty(context.Context, *OrdersByPartyRequest) (*OrdersByPartyResponse, error)
	// Get a specific order by order ID
	OrderByID(context.Context, *OrderByIDRequest) (*OrderByIDResponse, error)
	// Get all versions of the order by its orderID
	OrderVersionsByID(context.Context, *OrderVersionsByIDRequest) (*OrderVersionsByIDResponse, error)
	// Get Margin Levels by Party ID
	MarginLevels(context.Context, *MarginLevelsRequest) (*MarginLevelsResponse, error)
	// Get a list of Parties
	Parties(context.Context, *PartiesRequest) (*PartiesResponse, error)
	// Get a Party by ID
	PartyByID(context.Context, *PartyByIDRequest) (*PartyByIDResponse, error)
	// Get a list of Positions by Party
	PositionsByParty(context.Context, *PositionsByPartyRequest) (*PositionsByPartyResponse, error)
	// Get latest Trade
	LastTrade(context.Context, *LastTradeRequest) (*LastTradeResponse, error)
	// Get a list of Trades by Market
	TradesByMarket(context.Context, *TradesByMarketRequest) (*TradesByMarketResponse, error)
	// Get a list of Trades by Order
	TradesByOrder(context.Context, *TradesByOrderRequest) (*TradesByOrderResponse, error)
	// Get a list of Trades by Party
	TradesByParty(context.Context, *TradesByPartyRequest) (*TradesByPartyResponse, error)
	// Get governance data (proposals and votes) for all proposals
	GetProposals(context.Context, *GetProposalsRequest) (*GetProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals by party authoring them
	GetProposalsByParty(context.Context, *GetProposalsByPartyRequest) (*GetProposalsByPartyResponse, error)
	// Get votes by party casting them
	GetVotesByParty(context.Context, *GetVotesByPartyRequest) (*GetVotesByPartyResponse, error)
	// Get governance data (proposals and votes) for proposals that aim creating new markets
	GetNewMarketProposals(context.Context, *GetNewMarketProposalsRequest) (*GetNewMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating markets
	GetUpdateMarketProposals(context.Context, *GetUpdateMarketProposalsRequest) (*GetUpdateMarketProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals that aim updating Vega network parameters
	GetNetworkParametersProposals(context.Context, *GetNetworkParametersProposalsRequest) (*GetNetworkParametersProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals aiming to create new assets
	GetNewAssetProposals(context.Context, *GetNewAssetProposalsRequest) (*GetNewAssetProposalsResponse, error)
	// Get governance data (proposals and votes) for proposals aiming to create freeform proposals
	GetNewFreeformProposals(context.Context, *GetNewFreeformProposalsRequest) (*GetNewFreeformProposalsResponse, error)
	// Get governance data (proposals and votes) for a proposal located by ID
	GetProposalByID(context.Context, *GetProposalByIDRequest) (*GetProposalByIDResponse, error)
	// Get governance data (proposals and votes) for a proposal located by reference
	GetProposalByReference(context.Context, *GetProposalByReferenceRequest) (*GetProposalByReferenceResponse, error)
	// Subscribe to a stream of all governance updates
	ObserveGovernance(*ObserveGovernanceRequest, TradingDataService_ObserveGovernanceServer) error
	// Subscribe to a stream of proposal updates
	ObservePartyProposals(*ObservePartyProposalsRequest, TradingDataService_ObservePartyProposalsServer) error
	// Subscribe to a stream of votes cast by a specific party
	ObservePartyVotes(*ObservePartyVotesRequest, TradingDataService_ObservePartyVotesServer) error
	// Subscribe to a stream of proposal votes
	ObserveProposalVotes(*ObserveProposalVotesRequest, TradingDataService_ObserveProposalVotesServer) error
	// Subscribe to a stream of events from the core
	ObserveEventBus(TradingDataService_ObserveEventBusServer) error
	// Get data of current node
	GetNodeData(context.Context, *GetNodeDataRequest) (*GetNodeDataResponse, error)
	// List all known network nodes
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	// Get a specific node by ID
	GetNodeByID(context.Context, *GetNodeByIDRequest) (*GetNodeByIDResponse, error)
	// Get all key rotations
	GetKeyRotations(context.Context, *GetKeyRotationsRequest) (*GetKeyRotationsResponse, error)
	// Get all key rotations by node
	GetKeyRotationsByNode(context.Context, *GetKeyRotationsByNodeRequest) (*GetKeyRotationsByNodeResponse, error)
	// Get data for a specific epoch, if id omitted it gets the current epoch
	GetEpoch(context.Context, *GetEpochRequest) (*GetEpochResponse, error)
	// Get Time
	GetVegaTime(context.Context, *GetVegaTimeRequest) (*GetVegaTimeResponse, error)
	// Subscribe to a stream of Accounts
	AccountsSubscribe(*AccountsSubscribeRequest, TradingDataService_AccountsSubscribeServer) error
	// Subscribe to a stream of Candles
	CandlesSubscribe(*CandlesSubscribeRequest, TradingDataService_CandlesSubscribeServer) error
	// Subscribe to a stream of Margin Levels
	MarginLevelsSubscribe(*MarginLevelsSubscribeRequest, TradingDataService_MarginLevelsSubscribeServer) error
	// Subscribe to a stream of Market Depth
	MarketDepthSubscribe(*MarketDepthSubscribeRequest, TradingDataService_MarketDepthSubscribeServer) error
	// Subscribe to a stream of Market Depth Price Level Updates
	MarketDepthUpdatesSubscribe(*MarketDepthUpdatesSubscribeRequest, TradingDataService_MarketDepthUpdatesSubscribeServer) error
	// Subscribe to a stream of Markets Data
	MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingDataService_MarketsDataSubscribeServer) error
	// Subscribe to a stream of Orders
	OrdersSubscribe(*OrdersSubscribeRequest, TradingDataService_OrdersSubscribeServer) error
	// Subscribe to a stream of Positions
	PositionsSubscribe(*PositionsSubscribeRequest, TradingDataService_PositionsSubscribeServer) error
	// Subscribe to a stream of Trades
	TradesSubscribe(*TradesSubscribeRequest, TradingDataService_TradesSubscribeServer) error
	// Subscribe to a stream of Transfer Responses
	TransferResponsesSubscribe(*TransferResponsesSubscribeRequest, TradingDataService_TransferResponsesSubscribeServer) error
	// Get an aggregate of signatures from all the nodes of the network
	GetNodeSignaturesAggregate(context.Context, *GetNodeSignaturesAggregateRequest) (*GetNodeSignaturesAggregateResponse, error)
	// Get an asset by its identifier
	AssetByID(context.Context, *AssetByIDRequest) (*AssetByIDResponse, error)
	// Get a list of all assets on Vega
	Assets(context.Context, *AssetsRequest) (*AssetsResponse, error)
	// Get an estimate for the fee to be paid for a given order
	EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error)
	// Get an estimate for the margin required for a new order
	EstimateMargin(context.Context, *EstimateMarginRequest) (*EstimateMarginResponse, error)
	// Get the bundle approval for an ERC20 withdrawal,
	// these data are being used to bundle the call to the smart contract on the ethereum bridge
	ERC20WithdrawalApproval(context.Context, *ERC20WithdrawalApprovalRequest) (*ERC20WithdrawalApprovalResponse, error)
	// Get a withdrawal by its identifier
	Withdrawal(context.Context, *WithdrawalRequest) (*WithdrawalResponse, error)
	// Get withdrawals for a party
	Withdrawals(context.Context, *WithdrawalsRequest) (*WithdrawalsResponse, error)
	// Get a deposit by its identifier
	Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	// Get deposits for a party
	Deposits(context.Context, *DepositsRequest) (*DepositsResponse, error)
	// Get the network parameters
	NetworkParameters(context.Context, *NetworkParametersRequest) (*NetworkParametersResponse, error)
	// Get the liquidity provision orders
	LiquidityProvisions(context.Context, *LiquidityProvisionsRequest) (*LiquidityProvisionsResponse, error)
	// Get an oracle spec by ID.
	OracleSpec(context.Context, *OracleSpecRequest) (*OracleSpecResponse, error)
	// Get the oracle specs
	OracleSpecs(context.Context, *OracleSpecsRequest) (*OracleSpecsResponse, error)
	// Get oracle data that matched the given spec
	OracleDataBySpec(context.Context, *OracleDataBySpecRequest) (*OracleDataBySpecResponse, error)
	// Get all oracle data
	ListOracleData(context.Context, *ListOracleDataRequest) (*ListOracleDataResponse, error)
	// subscribe to rewards
	ObserveRewards(*ObserveRewardsRequest, TradingDataService_ObserveRewardsServer) error
	// Get rewards
	GetRewards(context.Context, *GetRewardsRequest) (*GetRewardsResponse, error)
	// Get reward summaries
	GetRewardSummaries(context.Context, *GetRewardSummariesRequest) (*GetRewardSummariesResponse, error)
	Checkpoints(context.Context, *CheckpointsRequest) (*CheckpointsResponse, error)
	// Get delegation data
	Delegations(context.Context, *DelegationsRequest) (*DelegationsResponse, error)
	// subscribe to delegation events
	ObserveDelegations(*ObserveDelegationsRequest, TradingDataService_ObserveDelegationsServer) error
	PartyStake(context.Context, *PartyStakeRequest) (*PartyStakeResponse, error)
	Transfers(context.Context, *TransfersRequest) (*TransfersResponse, error)
	// Get Risk Factor data for a given market
	GetRiskFactors(context.Context, *GetRiskFactorsRequest) (*GetRiskFactorsResponse, error)
	mustEmbedUnimplementedTradingDataServiceServer()
}

// UnimplementedTradingDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingDataServiceServer struct {
}

func (UnimplementedTradingDataServiceServer) MarketAccounts(context.Context, *MarketAccountsRequest) (*MarketAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAccounts not implemented")
}
func (UnimplementedTradingDataServiceServer) PartyAccounts(context.Context, *PartyAccountsRequest) (*PartyAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyAccounts not implemented")
}
func (UnimplementedTradingDataServiceServer) FeeInfrastructureAccounts(context.Context, *FeeInfrastructureAccountsRequest) (*FeeInfrastructureAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeInfrastructureAccounts not implemented")
}
func (UnimplementedTradingDataServiceServer) GlobalRewardPoolAccounts(context.Context, *GlobalRewardPoolAccountsRequest) (*GlobalRewardPoolAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalRewardPoolAccounts not implemented")
}
func (UnimplementedTradingDataServiceServer) Candles(context.Context, *CandlesRequest) (*CandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candles not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketDataByID(context.Context, *MarketDataByIDRequest) (*MarketDataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDataByID not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketsData(context.Context, *MarketsDataRequest) (*MarketsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketsData not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketByID(context.Context, *MarketByIDRequest) (*MarketByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketByID not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketDepth(context.Context, *MarketDepthRequest) (*MarketDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDepth not implemented")
}
func (UnimplementedTradingDataServiceServer) Markets(context.Context, *MarketsRequest) (*MarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Markets not implemented")
}
func (UnimplementedTradingDataServiceServer) OrderByMarketAndID(context.Context, *OrderByMarketAndIDRequest) (*OrderByMarketAndIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByMarketAndID not implemented")
}
func (UnimplementedTradingDataServiceServer) OrderByReference(context.Context, *OrderByReferenceRequest) (*OrderByReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByReference not implemented")
}
func (UnimplementedTradingDataServiceServer) OrdersByMarket(context.Context, *OrdersByMarketRequest) (*OrdersByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) OrdersByParty(context.Context, *OrdersByPartyRequest) (*OrdersByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersByParty not implemented")
}
func (UnimplementedTradingDataServiceServer) OrderByID(context.Context, *OrderByIDRequest) (*OrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderByID not implemented")
}
func (UnimplementedTradingDataServiceServer) OrderVersionsByID(context.Context, *OrderVersionsByIDRequest) (*OrderVersionsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderVersionsByID not implemented")
}
func (UnimplementedTradingDataServiceServer) MarginLevels(context.Context, *MarginLevelsRequest) (*MarginLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarginLevels not implemented")
}
func (UnimplementedTradingDataServiceServer) Parties(context.Context, *PartiesRequest) (*PartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parties not implemented")
}
func (UnimplementedTradingDataServiceServer) PartyByID(context.Context, *PartyByIDRequest) (*PartyByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyByID not implemented")
}
func (UnimplementedTradingDataServiceServer) PositionsByParty(context.Context, *PositionsByPartyRequest) (*PositionsByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsByParty not implemented")
}
func (UnimplementedTradingDataServiceServer) LastTrade(context.Context, *LastTradeRequest) (*LastTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastTrade not implemented")
}
func (UnimplementedTradingDataServiceServer) TradesByMarket(context.Context, *TradesByMarketRequest) (*TradesByMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) TradesByOrder(context.Context, *TradesByOrderRequest) (*TradesByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByOrder not implemented")
}
func (UnimplementedTradingDataServiceServer) TradesByParty(context.Context, *TradesByPartyRequest) (*TradesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesByParty not implemented")
}
func (UnimplementedTradingDataServiceServer) GetProposals(context.Context, *GetProposalsRequest) (*GetProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposals not implemented")
}
func (UnimplementedTradingDataServiceServer) GetProposalsByParty(context.Context, *GetProposalsByPartyRequest) (*GetProposalsByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalsByParty not implemented")
}
func (UnimplementedTradingDataServiceServer) GetVotesByParty(context.Context, *GetVotesByPartyRequest) (*GetVotesByPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVotesByParty not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNewMarketProposals(context.Context, *GetNewMarketProposalsRequest) (*GetNewMarketProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewMarketProposals not implemented")
}
func (UnimplementedTradingDataServiceServer) GetUpdateMarketProposals(context.Context, *GetUpdateMarketProposalsRequest) (*GetUpdateMarketProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateMarketProposals not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkParametersProposals(context.Context, *GetNetworkParametersProposalsRequest) (*GetNetworkParametersProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkParametersProposals not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNewAssetProposals(context.Context, *GetNewAssetProposalsRequest) (*GetNewAssetProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAssetProposals not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNewFreeformProposals(context.Context, *GetNewFreeformProposalsRequest) (*GetNewFreeformProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewFreeformProposals not implemented")
}
func (UnimplementedTradingDataServiceServer) GetProposalByID(context.Context, *GetProposalByIDRequest) (*GetProposalByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalByID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetProposalByReference(context.Context, *GetProposalByReferenceRequest) (*GetProposalByReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalByReference not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveGovernance(*ObserveGovernanceRequest, TradingDataService_ObserveGovernanceServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveGovernance not implemented")
}
func (UnimplementedTradingDataServiceServer) ObservePartyProposals(*ObservePartyProposalsRequest, TradingDataService_ObservePartyProposalsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObservePartyProposals not implemented")
}
func (UnimplementedTradingDataServiceServer) ObservePartyVotes(*ObservePartyVotesRequest, TradingDataService_ObservePartyVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObservePartyVotes not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveProposalVotes(*ObserveProposalVotesRequest, TradingDataService_ObserveProposalVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveProposalVotes not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveEventBus(TradingDataService_ObserveEventBusServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveEventBus not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNodeData(context.Context, *GetNodeDataRequest) (*GetNodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNodeByID(context.Context, *GetNodeByIDRequest) (*GetNodeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeByID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetKeyRotations(context.Context, *GetKeyRotationsRequest) (*GetKeyRotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyRotations not implemented")
}
func (UnimplementedTradingDataServiceServer) GetKeyRotationsByNode(context.Context, *GetKeyRotationsByNodeRequest) (*GetKeyRotationsByNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyRotationsByNode not implemented")
}
func (UnimplementedTradingDataServiceServer) GetEpoch(context.Context, *GetEpochRequest) (*GetEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpoch not implemented")
}
func (UnimplementedTradingDataServiceServer) GetVegaTime(context.Context, *GetVegaTimeRequest) (*GetVegaTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVegaTime not implemented")
}
func (UnimplementedTradingDataServiceServer) AccountsSubscribe(*AccountsSubscribeRequest, TradingDataService_AccountsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountsSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) CandlesSubscribe(*CandlesSubscribeRequest, TradingDataService_CandlesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method CandlesSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) MarginLevelsSubscribe(*MarginLevelsSubscribeRequest, TradingDataService_MarginLevelsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarginLevelsSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketDepthSubscribe(*MarketDepthSubscribeRequest, TradingDataService_MarketDepthSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketDepthSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketDepthUpdatesSubscribe(*MarketDepthUpdatesSubscribeRequest, TradingDataService_MarketDepthUpdatesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketDepthUpdatesSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) MarketsDataSubscribe(*MarketsDataSubscribeRequest, TradingDataService_MarketsDataSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method MarketsDataSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) OrdersSubscribe(*OrdersSubscribeRequest, TradingDataService_OrdersSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method OrdersSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) PositionsSubscribe(*PositionsSubscribeRequest, TradingDataService_PositionsSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method PositionsSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) TradesSubscribe(*TradesSubscribeRequest, TradingDataService_TradesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method TradesSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) TransferResponsesSubscribe(*TransferResponsesSubscribeRequest, TradingDataService_TransferResponsesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferResponsesSubscribe not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNodeSignaturesAggregate(context.Context, *GetNodeSignaturesAggregateRequest) (*GetNodeSignaturesAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSignaturesAggregate not implemented")
}
func (UnimplementedTradingDataServiceServer) AssetByID(context.Context, *AssetByIDRequest) (*AssetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetByID not implemented")
}
func (UnimplementedTradingDataServiceServer) Assets(context.Context, *AssetsRequest) (*AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (UnimplementedTradingDataServiceServer) EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateFee not implemented")
}
func (UnimplementedTradingDataServiceServer) EstimateMargin(context.Context, *EstimateMarginRequest) (*EstimateMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMargin not implemented")
}
func (UnimplementedTradingDataServiceServer) ERC20WithdrawalApproval(context.Context, *ERC20WithdrawalApprovalRequest) (*ERC20WithdrawalApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20WithdrawalApproval not implemented")
}
func (UnimplementedTradingDataServiceServer) Withdrawal(context.Context, *WithdrawalRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawal not implemented")
}
func (UnimplementedTradingDataServiceServer) Withdrawals(context.Context, *WithdrawalsRequest) (*WithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawals not implemented")
}
func (UnimplementedTradingDataServiceServer) Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedTradingDataServiceServer) Deposits(context.Context, *DepositsRequest) (*DepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposits not implemented")
}
func (UnimplementedTradingDataServiceServer) NetworkParameters(context.Context, *NetworkParametersRequest) (*NetworkParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkParameters not implemented")
}
func (UnimplementedTradingDataServiceServer) LiquidityProvisions(context.Context, *LiquidityProvisionsRequest) (*LiquidityProvisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProvisions not implemented")
}
func (UnimplementedTradingDataServiceServer) OracleSpec(context.Context, *OracleSpecRequest) (*OracleSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSpec not implemented")
}
func (UnimplementedTradingDataServiceServer) OracleSpecs(context.Context, *OracleSpecsRequest) (*OracleSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSpecs not implemented")
}
func (UnimplementedTradingDataServiceServer) OracleDataBySpec(context.Context, *OracleDataBySpecRequest) (*OracleDataBySpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleDataBySpec not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOracleData(context.Context, *ListOracleDataRequest) (*ListOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOracleData not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveRewards(*ObserveRewardsRequest, TradingDataService_ObserveRewardsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveRewards not implemented")
}
func (UnimplementedTradingDataServiceServer) GetRewards(context.Context, *GetRewardsRequest) (*GetRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewards not implemented")
}
func (UnimplementedTradingDataServiceServer) GetRewardSummaries(context.Context, *GetRewardSummariesRequest) (*GetRewardSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardSummaries not implemented")
}
func (UnimplementedTradingDataServiceServer) Checkpoints(context.Context, *CheckpointsRequest) (*CheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpoints not implemented")
}
func (UnimplementedTradingDataServiceServer) Delegations(context.Context, *DelegationsRequest) (*DelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegations not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveDelegations(*ObserveDelegationsRequest, TradingDataService_ObserveDelegationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveDelegations not implemented")
}
func (UnimplementedTradingDataServiceServer) PartyStake(context.Context, *PartyStakeRequest) (*PartyStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyStake not implemented")
}
func (UnimplementedTradingDataServiceServer) Transfers(context.Context, *TransfersRequest) (*TransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfers not implemented")
}
func (UnimplementedTradingDataServiceServer) GetRiskFactors(context.Context, *GetRiskFactorsRequest) (*GetRiskFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskFactors not implemented")
}
func (UnimplementedTradingDataServiceServer) mustEmbedUnimplementedTradingDataServiceServer() {}

// UnsafeTradingDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingDataServiceServer will
// result in compilation errors.
type UnsafeTradingDataServiceServer interface {
	mustEmbedUnimplementedTradingDataServiceServer()
}

func RegisterTradingDataServiceServer(s grpc.ServiceRegistrar, srv TradingDataServiceServer) {
	s.RegisterService(&TradingDataService_ServiceDesc, srv)
}

func _TradingDataService_MarketAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/MarketAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketAccounts(ctx, req.(*MarketAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_PartyAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).PartyAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/PartyAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).PartyAccounts(ctx, req.(*PartyAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_FeeInfrastructureAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeInfrastructureAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).FeeInfrastructureAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/FeeInfrastructureAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).FeeInfrastructureAccounts(ctx, req.(*FeeInfrastructureAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GlobalRewardPoolAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalRewardPoolAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GlobalRewardPoolAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GlobalRewardPoolAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GlobalRewardPoolAccounts(ctx, req.(*GlobalRewardPoolAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Candles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Candles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Candles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Candles(ctx, req.(*CandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketDataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketDataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/MarketDataByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketDataByID(ctx, req.(*MarketDataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/MarketsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketsData(ctx, req.(*MarketsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/MarketByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketByID(ctx, req.(*MarketByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarketDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarketDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/MarketDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarketDepth(ctx, req.(*MarketDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Markets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Markets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Markets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Markets(ctx, req.(*MarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderByMarketAndID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByMarketAndIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderByMarketAndID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OrderByMarketAndID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderByMarketAndID(ctx, req.(*OrderByMarketAndIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OrderByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderByReference(ctx, req.(*OrderByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrdersByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrdersByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OrdersByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrdersByMarket(ctx, req.(*OrdersByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrdersByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrdersByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OrdersByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrdersByParty(ctx, req.(*OrdersByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderByID(ctx, req.(*OrderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OrderVersionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderVersionsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OrderVersionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OrderVersionsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OrderVersionsByID(ctx, req.(*OrderVersionsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_MarginLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarginLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).MarginLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/MarginLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).MarginLevels(ctx, req.(*MarginLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Parties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Parties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Parties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Parties(ctx, req.(*PartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_PartyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).PartyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/PartyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).PartyByID(ctx, req.(*PartyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_PositionsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionsByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).PositionsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/PositionsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).PositionsByParty(ctx, req.(*PositionsByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_LastTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).LastTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/LastTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).LastTrade(ctx, req.(*LastTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_TradesByMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).TradesByMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/TradesByMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).TradesByMarket(ctx, req.(*TradesByMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_TradesByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).TradesByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/TradesByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).TradesByOrder(ctx, req.(*TradesByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_TradesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).TradesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/TradesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).TradesByParty(ctx, req.(*TradesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProposals(ctx, req.(*GetProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProposalsByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalsByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProposalsByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetProposalsByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProposalsByParty(ctx, req.(*GetProposalsByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetVotesByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVotesByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetVotesByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetVotesByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetVotesByParty(ctx, req.(*GetVotesByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNewMarketProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewMarketProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNewMarketProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetNewMarketProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNewMarketProposals(ctx, req.(*GetNewMarketProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetUpdateMarketProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpdateMarketProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetUpdateMarketProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetUpdateMarketProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetUpdateMarketProposals(ctx, req.(*GetUpdateMarketProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkParametersProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkParametersProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkParametersProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetNetworkParametersProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkParametersProposals(ctx, req.(*GetNetworkParametersProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNewAssetProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAssetProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNewAssetProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetNewAssetProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNewAssetProposals(ctx, req.(*GetNewAssetProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNewFreeformProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewFreeformProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNewFreeformProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetNewFreeformProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNewFreeformProposals(ctx, req.(*GetNewFreeformProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProposalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProposalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetProposalByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProposalByID(ctx, req.(*GetProposalByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProposalByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProposalByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetProposalByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProposalByReference(ctx, req.(*GetProposalByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveGovernance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveGovernanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveGovernance(m, &tradingDataServiceObserveGovernanceServer{stream})
}

type TradingDataService_ObserveGovernanceServer interface {
	Send(*ObserveGovernanceResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveGovernanceServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveGovernanceServer) Send(m *ObserveGovernanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObservePartyProposals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObservePartyProposalsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObservePartyProposals(m, &tradingDataServiceObservePartyProposalsServer{stream})
}

type TradingDataService_ObservePartyProposalsServer interface {
	Send(*ObservePartyProposalsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObservePartyProposalsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObservePartyProposalsServer) Send(m *ObservePartyProposalsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObservePartyVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObservePartyVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObservePartyVotes(m, &tradingDataServiceObservePartyVotesServer{stream})
}

type TradingDataService_ObservePartyVotesServer interface {
	Send(*ObservePartyVotesResponse) error
	grpc.ServerStream
}

type tradingDataServiceObservePartyVotesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObservePartyVotesServer) Send(m *ObservePartyVotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObserveProposalVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveProposalVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveProposalVotes(m, &tradingDataServiceObserveProposalVotesServer{stream})
}

type TradingDataService_ObserveProposalVotesServer interface {
	Send(*ObserveProposalVotesResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveProposalVotesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveProposalVotesServer) Send(m *ObserveProposalVotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObserveEventBus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradingDataServiceServer).ObserveEventBus(&tradingDataServiceObserveEventBusServer{stream})
}

type TradingDataService_ObserveEventBusServer interface {
	Send(*ObserveEventBusResponse) error
	Recv() (*ObserveEventBusRequest, error)
	grpc.ServerStream
}

type tradingDataServiceObserveEventBusServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveEventBusServer) Send(m *ObserveEventBusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradingDataServiceObserveEventBusServer) Recv() (*ObserveEventBusRequest, error) {
	m := new(ObserveEventBusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TradingDataService_GetNodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetNodeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNodeData(ctx, req.(*GetNodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetNodeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNodeByID(ctx, req.(*GetNodeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetKeyRotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetKeyRotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetKeyRotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetKeyRotations(ctx, req.(*GetKeyRotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetKeyRotationsByNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRotationsByNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetKeyRotationsByNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetKeyRotationsByNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetKeyRotationsByNode(ctx, req.(*GetKeyRotationsByNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetEpoch(ctx, req.(*GetEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetVegaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVegaTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetVegaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetVegaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetVegaTime(ctx, req.(*GetVegaTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_AccountsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).AccountsSubscribe(m, &tradingDataServiceAccountsSubscribeServer{stream})
}

type TradingDataService_AccountsSubscribeServer interface {
	Send(*AccountsSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceAccountsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceAccountsSubscribeServer) Send(m *AccountsSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_CandlesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CandlesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).CandlesSubscribe(m, &tradingDataServiceCandlesSubscribeServer{stream})
}

type TradingDataService_CandlesSubscribeServer interface {
	Send(*CandlesSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceCandlesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceCandlesSubscribeServer) Send(m *CandlesSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_MarginLevelsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarginLevelsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarginLevelsSubscribe(m, &tradingDataServiceMarginLevelsSubscribeServer{stream})
}

type TradingDataService_MarginLevelsSubscribeServer interface {
	Send(*MarginLevelsSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarginLevelsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarginLevelsSubscribeServer) Send(m *MarginLevelsSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_MarketDepthSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDepthSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarketDepthSubscribe(m, &tradingDataServiceMarketDepthSubscribeServer{stream})
}

type TradingDataService_MarketDepthSubscribeServer interface {
	Send(*MarketDepthSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarketDepthSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarketDepthSubscribeServer) Send(m *MarketDepthSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_MarketDepthUpdatesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDepthUpdatesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarketDepthUpdatesSubscribe(m, &tradingDataServiceMarketDepthUpdatesSubscribeServer{stream})
}

type TradingDataService_MarketDepthUpdatesSubscribeServer interface {
	Send(*MarketDepthUpdatesSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarketDepthUpdatesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarketDepthUpdatesSubscribeServer) Send(m *MarketDepthUpdatesSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_MarketsDataSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketsDataSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).MarketsDataSubscribe(m, &tradingDataServiceMarketsDataSubscribeServer{stream})
}

type TradingDataService_MarketsDataSubscribeServer interface {
	Send(*MarketsDataSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceMarketsDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceMarketsDataSubscribeServer) Send(m *MarketsDataSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_OrdersSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrdersSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).OrdersSubscribe(m, &tradingDataServiceOrdersSubscribeServer{stream})
}

type TradingDataService_OrdersSubscribeServer interface {
	Send(*OrdersSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceOrdersSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceOrdersSubscribeServer) Send(m *OrdersSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_PositionsSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PositionsSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).PositionsSubscribe(m, &tradingDataServicePositionsSubscribeServer{stream})
}

type TradingDataService_PositionsSubscribeServer interface {
	Send(*PositionsSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServicePositionsSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServicePositionsSubscribeServer) Send(m *PositionsSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_TradesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TradesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).TradesSubscribe(m, &tradingDataServiceTradesSubscribeServer{stream})
}

type TradingDataService_TradesSubscribeServer interface {
	Send(*TradesSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceTradesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceTradesSubscribeServer) Send(m *TradesSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_TransferResponsesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransferResponsesSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).TransferResponsesSubscribe(m, &tradingDataServiceTransferResponsesSubscribeServer{stream})
}

type TradingDataService_TransferResponsesSubscribeServer interface {
	Send(*TransferResponsesSubscribeResponse) error
	grpc.ServerStream
}

type tradingDataServiceTransferResponsesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceTransferResponsesSubscribeServer) Send(m *TransferResponsesSubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetNodeSignaturesAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSignaturesAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNodeSignaturesAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetNodeSignaturesAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNodeSignaturesAggregate(ctx, req.(*GetNodeSignaturesAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_AssetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).AssetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/AssetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).AssetByID(ctx, req.(*AssetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Assets(ctx, req.(*AssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).EstimateFee(ctx, req.(*EstimateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_EstimateMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).EstimateMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/EstimateMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).EstimateMargin(ctx, req.(*EstimateMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ERC20WithdrawalApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ERC20WithdrawalApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ERC20WithdrawalApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/ERC20WithdrawalApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ERC20WithdrawalApproval(ctx, req.(*ERC20WithdrawalApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Withdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Withdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Withdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Withdrawal(ctx, req.(*WithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Withdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Withdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Withdrawals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Withdrawals(ctx, req.(*WithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Deposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Deposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Deposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Deposits(ctx, req.(*DepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_NetworkParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).NetworkParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/NetworkParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).NetworkParameters(ctx, req.(*NetworkParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_LiquidityProvisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityProvisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).LiquidityProvisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/LiquidityProvisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).LiquidityProvisions(ctx, req.(*LiquidityProvisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OracleSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OracleSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OracleSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OracleSpec(ctx, req.(*OracleSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OracleSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OracleSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OracleSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OracleSpecs(ctx, req.(*OracleSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_OracleDataBySpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleDataBySpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).OracleDataBySpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/OracleDataBySpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).OracleDataBySpec(ctx, req.(*OracleDataBySpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOracleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/ListOracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOracleData(ctx, req.(*ListOracleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveRewards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveRewardsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveRewards(m, &tradingDataServiceObserveRewardsServer{stream})
}

type TradingDataService_ObserveRewardsServer interface {
	Send(*ObserveRewardsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveRewardsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveRewardsServer) Send(m *ObserveRewardsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetRewards(ctx, req.(*GetRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetRewardSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetRewardSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetRewardSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetRewardSummaries(ctx, req.(*GetRewardSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Checkpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Checkpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Checkpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Checkpoints(ctx, req.(*CheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Delegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Delegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Delegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Delegations(ctx, req.(*DelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveDelegations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveDelegationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveDelegations(m, &tradingDataServiceObserveDelegationsServer{stream})
}

type TradingDataService_ObserveDelegationsServer interface {
	Send(*ObserveDelegationsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveDelegationsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveDelegationsServer) Send(m *ObserveDelegationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_PartyStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).PartyStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/PartyStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).PartyStake(ctx, req.(*PartyStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_Transfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Transfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/Transfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Transfers(ctx, req.(*TransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetRiskFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetRiskFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v1.TradingDataService/GetRiskFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetRiskFactors(ctx, req.(*GetRiskFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingDataService_ServiceDesc is the grpc.ServiceDesc for TradingDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.api.v1.TradingDataService",
	HandlerType: (*TradingDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarketAccounts",
			Handler:    _TradingDataService_MarketAccounts_Handler,
		},
		{
			MethodName: "PartyAccounts",
			Handler:    _TradingDataService_PartyAccounts_Handler,
		},
		{
			MethodName: "FeeInfrastructureAccounts",
			Handler:    _TradingDataService_FeeInfrastructureAccounts_Handler,
		},
		{
			MethodName: "GlobalRewardPoolAccounts",
			Handler:    _TradingDataService_GlobalRewardPoolAccounts_Handler,
		},
		{
			MethodName: "Candles",
			Handler:    _TradingDataService_Candles_Handler,
		},
		{
			MethodName: "MarketDataByID",
			Handler:    _TradingDataService_MarketDataByID_Handler,
		},
		{
			MethodName: "MarketsData",
			Handler:    _TradingDataService_MarketsData_Handler,
		},
		{
			MethodName: "MarketByID",
			Handler:    _TradingDataService_MarketByID_Handler,
		},
		{
			MethodName: "MarketDepth",
			Handler:    _TradingDataService_MarketDepth_Handler,
		},
		{
			MethodName: "Markets",
			Handler:    _TradingDataService_Markets_Handler,
		},
		{
			MethodName: "OrderByMarketAndID",
			Handler:    _TradingDataService_OrderByMarketAndID_Handler,
		},
		{
			MethodName: "OrderByReference",
			Handler:    _TradingDataService_OrderByReference_Handler,
		},
		{
			MethodName: "OrdersByMarket",
			Handler:    _TradingDataService_OrdersByMarket_Handler,
		},
		{
			MethodName: "OrdersByParty",
			Handler:    _TradingDataService_OrdersByParty_Handler,
		},
		{
			MethodName: "OrderByID",
			Handler:    _TradingDataService_OrderByID_Handler,
		},
		{
			MethodName: "OrderVersionsByID",
			Handler:    _TradingDataService_OrderVersionsByID_Handler,
		},
		{
			MethodName: "MarginLevels",
			Handler:    _TradingDataService_MarginLevels_Handler,
		},
		{
			MethodName: "Parties",
			Handler:    _TradingDataService_Parties_Handler,
		},
		{
			MethodName: "PartyByID",
			Handler:    _TradingDataService_PartyByID_Handler,
		},
		{
			MethodName: "PositionsByParty",
			Handler:    _TradingDataService_PositionsByParty_Handler,
		},
		{
			MethodName: "LastTrade",
			Handler:    _TradingDataService_LastTrade_Handler,
		},
		{
			MethodName: "TradesByMarket",
			Handler:    _TradingDataService_TradesByMarket_Handler,
		},
		{
			MethodName: "TradesByOrder",
			Handler:    _TradingDataService_TradesByOrder_Handler,
		},
		{
			MethodName: "TradesByParty",
			Handler:    _TradingDataService_TradesByParty_Handler,
		},
		{
			MethodName: "GetProposals",
			Handler:    _TradingDataService_GetProposals_Handler,
		},
		{
			MethodName: "GetProposalsByParty",
			Handler:    _TradingDataService_GetProposalsByParty_Handler,
		},
		{
			MethodName: "GetVotesByParty",
			Handler:    _TradingDataService_GetVotesByParty_Handler,
		},
		{
			MethodName: "GetNewMarketProposals",
			Handler:    _TradingDataService_GetNewMarketProposals_Handler,
		},
		{
			MethodName: "GetUpdateMarketProposals",
			Handler:    _TradingDataService_GetUpdateMarketProposals_Handler,
		},
		{
			MethodName: "GetNetworkParametersProposals",
			Handler:    _TradingDataService_GetNetworkParametersProposals_Handler,
		},
		{
			MethodName: "GetNewAssetProposals",
			Handler:    _TradingDataService_GetNewAssetProposals_Handler,
		},
		{
			MethodName: "GetNewFreeformProposals",
			Handler:    _TradingDataService_GetNewFreeformProposals_Handler,
		},
		{
			MethodName: "GetProposalByID",
			Handler:    _TradingDataService_GetProposalByID_Handler,
		},
		{
			MethodName: "GetProposalByReference",
			Handler:    _TradingDataService_GetProposalByReference_Handler,
		},
		{
			MethodName: "GetNodeData",
			Handler:    _TradingDataService_GetNodeData_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _TradingDataService_GetNodes_Handler,
		},
		{
			MethodName: "GetNodeByID",
			Handler:    _TradingDataService_GetNodeByID_Handler,
		},
		{
			MethodName: "GetKeyRotations",
			Handler:    _TradingDataService_GetKeyRotations_Handler,
		},
		{
			MethodName: "GetKeyRotationsByNode",
			Handler:    _TradingDataService_GetKeyRotationsByNode_Handler,
		},
		{
			MethodName: "GetEpoch",
			Handler:    _TradingDataService_GetEpoch_Handler,
		},
		{
			MethodName: "GetVegaTime",
			Handler:    _TradingDataService_GetVegaTime_Handler,
		},
		{
			MethodName: "GetNodeSignaturesAggregate",
			Handler:    _TradingDataService_GetNodeSignaturesAggregate_Handler,
		},
		{
			MethodName: "AssetByID",
			Handler:    _TradingDataService_AssetByID_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _TradingDataService_Assets_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _TradingDataService_EstimateFee_Handler,
		},
		{
			MethodName: "EstimateMargin",
			Handler:    _TradingDataService_EstimateMargin_Handler,
		},
		{
			MethodName: "ERC20WithdrawalApproval",
			Handler:    _TradingDataService_ERC20WithdrawalApproval_Handler,
		},
		{
			MethodName: "Withdrawal",
			Handler:    _TradingDataService_Withdrawal_Handler,
		},
		{
			MethodName: "Withdrawals",
			Handler:    _TradingDataService_Withdrawals_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _TradingDataService_Deposit_Handler,
		},
		{
			MethodName: "Deposits",
			Handler:    _TradingDataService_Deposits_Handler,
		},
		{
			MethodName: "NetworkParameters",
			Handler:    _TradingDataService_NetworkParameters_Handler,
		},
		{
			MethodName: "LiquidityProvisions",
			Handler:    _TradingDataService_LiquidityProvisions_Handler,
		},
		{
			MethodName: "OracleSpec",
			Handler:    _TradingDataService_OracleSpec_Handler,
		},
		{
			MethodName: "OracleSpecs",
			Handler:    _TradingDataService_OracleSpecs_Handler,
		},
		{
			MethodName: "OracleDataBySpec",
			Handler:    _TradingDataService_OracleDataBySpec_Handler,
		},
		{
			MethodName: "ListOracleData",
			Handler:    _TradingDataService_ListOracleData_Handler,
		},
		{
			MethodName: "GetRewards",
			Handler:    _TradingDataService_GetRewards_Handler,
		},
		{
			MethodName: "GetRewardSummaries",
			Handler:    _TradingDataService_GetRewardSummaries_Handler,
		},
		{
			MethodName: "Checkpoints",
			Handler:    _TradingDataService_Checkpoints_Handler,
		},
		{
			MethodName: "Delegations",
			Handler:    _TradingDataService_Delegations_Handler,
		},
		{
			MethodName: "PartyStake",
			Handler:    _TradingDataService_PartyStake_Handler,
		},
		{
			MethodName: "Transfers",
			Handler:    _TradingDataService_Transfers_Handler,
		},
		{
			MethodName: "GetRiskFactors",
			Handler:    _TradingDataService_GetRiskFactors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveGovernance",
			Handler:       _TradingDataService_ObserveGovernance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObservePartyProposals",
			Handler:       _TradingDataService_ObservePartyProposals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObservePartyVotes",
			Handler:       _TradingDataService_ObservePartyVotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveProposalVotes",
			Handler:       _TradingDataService_ObserveProposalVotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveEventBus",
			Handler:       _TradingDataService_ObserveEventBus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AccountsSubscribe",
			Handler:       _TradingDataService_AccountsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CandlesSubscribe",
			Handler:       _TradingDataService_CandlesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarginLevelsSubscribe",
			Handler:       _TradingDataService_MarginLevelsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketDepthSubscribe",
			Handler:       _TradingDataService_MarketDepthSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketDepthUpdatesSubscribe",
			Handler:       _TradingDataService_MarketDepthUpdatesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MarketsDataSubscribe",
			Handler:       _TradingDataService_MarketsDataSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OrdersSubscribe",
			Handler:       _TradingDataService_OrdersSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PositionsSubscribe",
			Handler:       _TradingDataService_PositionsSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TradesSubscribe",
			Handler:       _TradingDataService_TradesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransferResponsesSubscribe",
			Handler:       _TradingDataService_TransferResponsesSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveRewards",
			Handler:       _TradingDataService_ObserveRewards_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveDelegations",
			Handler:       _TradingDataService_ObserveDelegations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data-node/api/v1/trading_data.proto",
}
