syntax = "proto3";

package vega;
option go_package = "code.vegaprotocol.io/vega/tm";

message TmEvent {
  oneof Action {
    RequestInitChain reqInitChain = 1;
    ResponseInitChain resInitChain = 2;
    RequestDeliverTx reqDeliverTx = 3;
    ResponseDeliverTx resDeliverTx = 4;
    RequestBeginBlock reqBeginBlock = 5;
    ResponseBeginBlock resBeginBlock = 6;
  }
}

message RequestInitChain {
  int64 time = 1;
  string chainID = 2;
  ConsensusParams consensusParams = 3;
  repeated ValidatorUpdate validators = 4;
  bytes appStateBytes = 5;
  int64 initialHeight = 6;
}

message RequestBeginBlock {
  bytes hash = 1;
  Header header = 2;
  LastCommitInfo lastCommitInfo = 3;
  repeated Evidence byzantineValidators = 4;
}

message RequestDeliverTx {
  bytes tx = 1;
}

message ResponseInitChain {
  ConsensusParams consensusParams = 1;
  repeated ValidatorUpdate validators = 2;
  bytes appHash = 3;
}

message ResponseBeginBlock {
  repeated Event events = 1;
}

message ResponseDeliverTx {
  uint32 code = 1;
  bytes data = 2;
  string log = 3;  // nondeterministic
  string info = 4;  // nondeterministic
  int64 gasWanted = 5;
  int64 gasUsed = 6;
  repeated Event events = 7;
  string codespace = 8;
}

message Event {
  string type = 1;
  repeated EventAttribute attributes = 2;
}

message EventAttribute {
  bytes key = 1;
  bytes value = 2;
  bool index = 3;  // nondeterministic
}

message ValidatorUpdate {
  PublicKey pub_key = 1;
  int64 power = 2;
}

message ConsensusParams {
  BlockParams block = 1;
  EvidenceParams evidence = 2;
  ValidatorParams validator = 3;
  VersionParams version = 4;
}

message BlockParams {
  int64 maxBytes = 1;
  int64 maxGas = 2;
}

message Evidence {
  EvidenceType type = 1;
  Validator validator = 2;
  int64 height = 3;
  int64 time = 4;
  int64 totalVotingPower = 5;
}

enum EvidenceType {
  UNKNOWN               = 0;
  DUPLICATE_VOTE        = 1;
  LIGHT_CLIENT_ATTACK   = 2;
}

message Validator {
  bytes address = 1;
  int64 power = 3;
}

message LastCommitInfo {
  int32 round = 1;
  repeated VoteInfo votes = 2;
}

message VoteInfo {
  Validator validator = 1;
  bool signedLastBlock = 2;
}

message EvidenceParams {
  int64 maxAgeNumBlocks = 1;
  int64 maxAgeDuration = 2;
  uint32 max_num = 3;
}

message ValidatorParams {
  repeated string pubKeyTypes = 1;
}

message VersionParams {
  uint64 appVersion = 1;
}

message Header {}


message PublicKey {
  oneof sum {
    bytes ed25519 = 1;
  }
}