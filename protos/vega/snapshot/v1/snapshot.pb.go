// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/snapshot/v1/snapshot.proto

package v1

import (
	vega "code.vegaprotocol.io/vega/protos/vega"
	v11 "code.vegaprotocol.io/vega/protos/vega/checkpoint/v1"
	v1 "code.vegaprotocol.io/vega/protos/vega/data/v1"
	v12 "code.vegaprotocol.io/vega/protos/vega/events/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Format int32

const (
	// Default value, always invalid
	Format_FORMAT_UNSPECIFIED Format = 0
	// Standard proto encoding
	Format_FORMAT_PROTO Format = 1
	// Compressed proto, might come in handy
	Format_FORMAT_PROTO_COMPRESSED Format = 2
	// Simple JSON serialisation, probably not going to be used
	Format_FORMAT_JSON Format = 3
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "FORMAT_PROTO",
		2: "FORMAT_PROTO_COMPRESSED",
		3: "FORMAT_JSON",
	}
	Format_value = map[string]int32{
		"FORMAT_UNSPECIFIED":      0,
		"FORMAT_PROTO":            1,
		"FORMAT_PROTO_COMPRESSED": 2,
		"FORMAT_JSON":             3,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_snapshot_v1_snapshot_proto_enumTypes[0].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_vega_snapshot_v1_snapshot_proto_enumTypes[0]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{0}
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Format   Format `protobuf:"varint,2,opt,name=format,proto3,enum=vega.snapshot.v1.Format" json:"format,omitempty"`
	Chunks   uint32 `protobuf:"varint,3,opt,name=chunks,proto3" json:"chunks,omitempty"`
	Hash     []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Metadata []byte `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *Snapshot) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Snapshot) GetFormat() Format {
	if x != nil {
		return x.Format
	}
	return Format_FORMAT_UNSPECIFIED
}

func (x *Snapshot) GetChunks() uint32 {
	if x != nil {
		return x.Chunks
	}
	return 0
}

func (x *Snapshot) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Snapshot) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// NodeHash represents an exported node from the AVL tree and contains all the
// data necessary to reconstruct an identical copy of the AVL tree after it's
// been serialised
type NodeHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node's full key, for example epoch.all
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Hash of the node's value
	Hash string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	// Height of the node in the tree
	Height int32 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	// Version of that node i.e., how many times its value has changed during tree
	// updates
	Version int64 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// Whether or not the node contains a snapshot payload, only leaf nodes in the
	// AVL contain payloads
	IsLeaf bool `protobuf:"varint,7,opt,name=is_leaf,json=isLeaf,proto3" json:"is_leaf,omitempty"`
}

func (x *NodeHash) Reset() {
	*x = NodeHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHash) ProtoMessage() {}

func (x *NodeHash) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHash.ProtoReflect.Descriptor instead.
func (*NodeHash) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *NodeHash) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeHash) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *NodeHash) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NodeHash) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NodeHash) GetIsLeaf() bool {
	if x != nil {
		return x.IsLeaf
	}
	return false
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         int64       `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ChunkHashes     []string    `protobuf:"bytes,2,rep,name=chunk_hashes,json=chunkHashes,proto3" json:"chunk_hashes,omitempty"`
	NodeHashes      []*NodeHash `protobuf:"bytes,3,rep,name=node_hashes,json=nodeHashes,proto3" json:"node_hashes,omitempty"`
	ProtocolVersion string      `protobuf:"bytes,4,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	ProtocolUpgrade bool        `protobuf:"varint,5,opt,name=protocol_upgrade,json=protocolUpgrade,proto3" json:"protocol_upgrade,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Metadata) GetChunkHashes() []string {
	if x != nil {
		return x.ChunkHashes
	}
	return nil
}

func (x *Metadata) GetNodeHashes() []*NodeHash {
	if x != nil {
		return x.NodeHashes
	}
	return nil
}

func (x *Metadata) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *Metadata) GetProtocolUpgrade() bool {
	if x != nil {
		return x.ProtocolUpgrade
	}
	return false
}

// Chunk is simply an as-is chunk belonging to a snapshot
// not sure how usable this type would be
type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Payload `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Nr   int64      `protobuf:"varint,2,opt,name=nr,proto3" json:"nr,omitempty"` // in case of multi-part data, this is chunk nr...
	Of   int64      `protobuf:"varint,3,opt,name=of,proto3" json:"of,omitempty"` // ...of a total of N chunks
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *Chunk) GetData() []*Payload {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Chunk) GetNr() int64 {
	if x != nil {
		return x.Nr
	}
	return 0
}

func (x *Chunk) GetOf() int64 {
	if x != nil {
		return x.Of
	}
	return 0
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*Payload_ActiveAssets
	//	*Payload_PendingAssets
	//	*Payload_BankingWithdrawals
	//	*Payload_BankingDeposits
	//	*Payload_BankingSeen
	//	*Payload_BankingAssetActions
	//	*Payload_Checkpoint
	//	*Payload_CollateralAccounts
	//	*Payload_CollateralAssets
	//	*Payload_DelegationActive
	//	*Payload_DelegationPending
	//	*Payload_DelegationAuto
	//	*Payload_GovernanceActive
	//	*Payload_GovernanceEnacted
	//	*Payload_StakingAccounts
	//	*Payload_MatchingBook
	//	*Payload_NetworkParameters
	//	*Payload_ExecutionMarkets
	//	*Payload_MarketPositions
	//	*Payload_AppState
	//	*Payload_Epoch
	//	*Payload_RewardsPendingPayouts
	//	*Payload_GovernanceNode
	//	*Payload_LimitState
	//	*Payload_VoteSpamPolicy
	//	*Payload_SimpleSpamPolicy
	//	*Payload_Notary
	//	*Payload_EventForwarder
	//	*Payload_StakeVerifierDeposited
	//	*Payload_StakeVerifierRemoved
	//	*Payload_Witness
	//	*Payload_DelegationLastReconciliationTime
	//	*Payload_Topology
	//	*Payload_OracleData
	//	*Payload_LiquidityParameters
	//	*Payload_LiquidityPendingProvisions
	//	*Payload_LiquidityPartiesLiquidityOrders
	//	*Payload_LiquidityPartiesOrders
	//	*Payload_LiquidityProvisions
	//	*Payload_LiquiditySupplied
	//	*Payload_LiquidityTarget
	//	*Payload_FloatingPointConsensus
	//	*Payload_MarketTracker
	//	*Payload_BankingRecurringTransfers
	//	*Payload_BankingScheduledTransfers
	//	*Payload_Erc20MultisigTopologyVerified
	//	*Payload_Erc20MultisigTopologyPending
	//	*Payload_ProofOfWork
	//	*Payload_PendingAssetUpdates
	//	*Payload_ProtocolUpgradeProposals
	//	*Payload_BankingBridgeState
	//	*Payload_SettlementState
	//	*Payload_LiquidityScores
	//	*Payload_SpotLiquidityTarget
	//	*Payload_BankingRecurringGovernanceTransfers
	//	*Payload_BankingScheduledGovernanceTransfers
	//	*Payload_EthContractCallResults
	//	*Payload_EthOracleVerifierLastBlock
	//	*Payload_LiquidityV2Provisions
	//	*Payload_LiquidityV2PendingProvisions
	//	*Payload_LiquidityV2Performances
	//	*Payload_LiquidityV2Supplied
	//	*Payload_LiquidityV2Scores
	//	*Payload_HoldingAccountTracker
	//	*Payload_Teams
	//	*Payload_TeamSwitches
	//	*Payload_Vesting
	//	*Payload_ReferralProgram
	//	*Payload_ActivityStreak
	//	*Payload_VolumeDiscountProgram
	//	*Payload_LiquidityV2Parameters
	//	*Payload_LiquidityV2PaidFeesStats
	//	*Payload_Liquidation
	//	*Payload_BankingTransferFeeDiscounts
	//	*Payload_GovernanceBatchActive
	//	*Payload_Parties
	//	*Payload_L2EthOracles
	//	*Payload_EthOracleVerifierMisc
	Data isPayload_Data `protobuf_oneof:"data"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{4}
}

func (m *Payload) GetData() isPayload_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Payload) GetActiveAssets() *ActiveAssets {
	if x, ok := x.GetData().(*Payload_ActiveAssets); ok {
		return x.ActiveAssets
	}
	return nil
}

func (x *Payload) GetPendingAssets() *PendingAssets {
	if x, ok := x.GetData().(*Payload_PendingAssets); ok {
		return x.PendingAssets
	}
	return nil
}

func (x *Payload) GetBankingWithdrawals() *BankingWithdrawals {
	if x, ok := x.GetData().(*Payload_BankingWithdrawals); ok {
		return x.BankingWithdrawals
	}
	return nil
}

func (x *Payload) GetBankingDeposits() *BankingDeposits {
	if x, ok := x.GetData().(*Payload_BankingDeposits); ok {
		return x.BankingDeposits
	}
	return nil
}

func (x *Payload) GetBankingSeen() *BankingSeen {
	if x, ok := x.GetData().(*Payload_BankingSeen); ok {
		return x.BankingSeen
	}
	return nil
}

func (x *Payload) GetBankingAssetActions() *BankingAssetActions {
	if x, ok := x.GetData().(*Payload_BankingAssetActions); ok {
		return x.BankingAssetActions
	}
	return nil
}

func (x *Payload) GetCheckpoint() *Checkpoint {
	if x, ok := x.GetData().(*Payload_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (x *Payload) GetCollateralAccounts() *CollateralAccounts {
	if x, ok := x.GetData().(*Payload_CollateralAccounts); ok {
		return x.CollateralAccounts
	}
	return nil
}

func (x *Payload) GetCollateralAssets() *CollateralAssets {
	if x, ok := x.GetData().(*Payload_CollateralAssets); ok {
		return x.CollateralAssets
	}
	return nil
}

func (x *Payload) GetDelegationActive() *DelegationActive {
	if x, ok := x.GetData().(*Payload_DelegationActive); ok {
		return x.DelegationActive
	}
	return nil
}

func (x *Payload) GetDelegationPending() *DelegationPending {
	if x, ok := x.GetData().(*Payload_DelegationPending); ok {
		return x.DelegationPending
	}
	return nil
}

func (x *Payload) GetDelegationAuto() *DelegationAuto {
	if x, ok := x.GetData().(*Payload_DelegationAuto); ok {
		return x.DelegationAuto
	}
	return nil
}

func (x *Payload) GetGovernanceActive() *GovernanceActive {
	if x, ok := x.GetData().(*Payload_GovernanceActive); ok {
		return x.GovernanceActive
	}
	return nil
}

func (x *Payload) GetGovernanceEnacted() *GovernanceEnacted {
	if x, ok := x.GetData().(*Payload_GovernanceEnacted); ok {
		return x.GovernanceEnacted
	}
	return nil
}

func (x *Payload) GetStakingAccounts() *StakingAccounts {
	if x, ok := x.GetData().(*Payload_StakingAccounts); ok {
		return x.StakingAccounts
	}
	return nil
}

func (x *Payload) GetMatchingBook() *MatchingBook {
	if x, ok := x.GetData().(*Payload_MatchingBook); ok {
		return x.MatchingBook
	}
	return nil
}

func (x *Payload) GetNetworkParameters() *NetParams {
	if x, ok := x.GetData().(*Payload_NetworkParameters); ok {
		return x.NetworkParameters
	}
	return nil
}

func (x *Payload) GetExecutionMarkets() *ExecutionMarkets {
	if x, ok := x.GetData().(*Payload_ExecutionMarkets); ok {
		return x.ExecutionMarkets
	}
	return nil
}

func (x *Payload) GetMarketPositions() *MarketPositions {
	if x, ok := x.GetData().(*Payload_MarketPositions); ok {
		return x.MarketPositions
	}
	return nil
}

func (x *Payload) GetAppState() *AppState {
	if x, ok := x.GetData().(*Payload_AppState); ok {
		return x.AppState
	}
	return nil
}

func (x *Payload) GetEpoch() *EpochState {
	if x, ok := x.GetData().(*Payload_Epoch); ok {
		return x.Epoch
	}
	return nil
}

func (x *Payload) GetRewardsPendingPayouts() *RewardsPendingPayouts {
	if x, ok := x.GetData().(*Payload_RewardsPendingPayouts); ok {
		return x.RewardsPendingPayouts
	}
	return nil
}

func (x *Payload) GetGovernanceNode() *GovernanceNode {
	if x, ok := x.GetData().(*Payload_GovernanceNode); ok {
		return x.GovernanceNode
	}
	return nil
}

func (x *Payload) GetLimitState() *LimitState {
	if x, ok := x.GetData().(*Payload_LimitState); ok {
		return x.LimitState
	}
	return nil
}

func (x *Payload) GetVoteSpamPolicy() *VoteSpamPolicy {
	if x, ok := x.GetData().(*Payload_VoteSpamPolicy); ok {
		return x.VoteSpamPolicy
	}
	return nil
}

func (x *Payload) GetSimpleSpamPolicy() *SimpleSpamPolicy {
	if x, ok := x.GetData().(*Payload_SimpleSpamPolicy); ok {
		return x.SimpleSpamPolicy
	}
	return nil
}

func (x *Payload) GetNotary() *Notary {
	if x, ok := x.GetData().(*Payload_Notary); ok {
		return x.Notary
	}
	return nil
}

func (x *Payload) GetEventForwarder() *EventForwarder {
	if x, ok := x.GetData().(*Payload_EventForwarder); ok {
		return x.EventForwarder
	}
	return nil
}

func (x *Payload) GetStakeVerifierDeposited() *StakeVerifierDeposited {
	if x, ok := x.GetData().(*Payload_StakeVerifierDeposited); ok {
		return x.StakeVerifierDeposited
	}
	return nil
}

func (x *Payload) GetStakeVerifierRemoved() *StakeVerifierRemoved {
	if x, ok := x.GetData().(*Payload_StakeVerifierRemoved); ok {
		return x.StakeVerifierRemoved
	}
	return nil
}

func (x *Payload) GetWitness() *Witness {
	if x, ok := x.GetData().(*Payload_Witness); ok {
		return x.Witness
	}
	return nil
}

func (x *Payload) GetDelegationLastReconciliationTime() *DelegationLastReconciliationTime {
	if x, ok := x.GetData().(*Payload_DelegationLastReconciliationTime); ok {
		return x.DelegationLastReconciliationTime
	}
	return nil
}

func (x *Payload) GetTopology() *Topology {
	if x, ok := x.GetData().(*Payload_Topology); ok {
		return x.Topology
	}
	return nil
}

func (x *Payload) GetOracleData() *OracleDataBatch {
	if x, ok := x.GetData().(*Payload_OracleData); ok {
		return x.OracleData
	}
	return nil
}

func (x *Payload) GetLiquidityParameters() *LiquidityParameters {
	if x, ok := x.GetData().(*Payload_LiquidityParameters); ok {
		return x.LiquidityParameters
	}
	return nil
}

func (x *Payload) GetLiquidityPendingProvisions() *LiquidityPendingProvisions {
	if x, ok := x.GetData().(*Payload_LiquidityPendingProvisions); ok {
		return x.LiquidityPendingProvisions
	}
	return nil
}

func (x *Payload) GetLiquidityPartiesLiquidityOrders() *LiquidityPartiesLiquidityOrders {
	if x, ok := x.GetData().(*Payload_LiquidityPartiesLiquidityOrders); ok {
		return x.LiquidityPartiesLiquidityOrders
	}
	return nil
}

func (x *Payload) GetLiquidityPartiesOrders() *LiquidityPartiesOrders {
	if x, ok := x.GetData().(*Payload_LiquidityPartiesOrders); ok {
		return x.LiquidityPartiesOrders
	}
	return nil
}

func (x *Payload) GetLiquidityProvisions() *LiquidityProvisions {
	if x, ok := x.GetData().(*Payload_LiquidityProvisions); ok {
		return x.LiquidityProvisions
	}
	return nil
}

func (x *Payload) GetLiquiditySupplied() *LiquiditySupplied {
	if x, ok := x.GetData().(*Payload_LiquiditySupplied); ok {
		return x.LiquiditySupplied
	}
	return nil
}

func (x *Payload) GetLiquidityTarget() *LiquidityTarget {
	if x, ok := x.GetData().(*Payload_LiquidityTarget); ok {
		return x.LiquidityTarget
	}
	return nil
}

func (x *Payload) GetFloatingPointConsensus() *FloatingPointConsensus {
	if x, ok := x.GetData().(*Payload_FloatingPointConsensus); ok {
		return x.FloatingPointConsensus
	}
	return nil
}

func (x *Payload) GetMarketTracker() *MarketTracker {
	if x, ok := x.GetData().(*Payload_MarketTracker); ok {
		return x.MarketTracker
	}
	return nil
}

func (x *Payload) GetBankingRecurringTransfers() *BankingRecurringTransfers {
	if x, ok := x.GetData().(*Payload_BankingRecurringTransfers); ok {
		return x.BankingRecurringTransfers
	}
	return nil
}

func (x *Payload) GetBankingScheduledTransfers() *BankingScheduledTransfers {
	if x, ok := x.GetData().(*Payload_BankingScheduledTransfers); ok {
		return x.BankingScheduledTransfers
	}
	return nil
}

func (x *Payload) GetErc20MultisigTopologyVerified() *ERC20MultiSigTopologyVerified {
	if x, ok := x.GetData().(*Payload_Erc20MultisigTopologyVerified); ok {
		return x.Erc20MultisigTopologyVerified
	}
	return nil
}

func (x *Payload) GetErc20MultisigTopologyPending() *ERC20MultiSigTopologyPending {
	if x, ok := x.GetData().(*Payload_Erc20MultisigTopologyPending); ok {
		return x.Erc20MultisigTopologyPending
	}
	return nil
}

func (x *Payload) GetProofOfWork() *ProofOfWork {
	if x, ok := x.GetData().(*Payload_ProofOfWork); ok {
		return x.ProofOfWork
	}
	return nil
}

func (x *Payload) GetPendingAssetUpdates() *PendingAssetUpdates {
	if x, ok := x.GetData().(*Payload_PendingAssetUpdates); ok {
		return x.PendingAssetUpdates
	}
	return nil
}

func (x *Payload) GetProtocolUpgradeProposals() *ProtocolUpgradeProposals {
	if x, ok := x.GetData().(*Payload_ProtocolUpgradeProposals); ok {
		return x.ProtocolUpgradeProposals
	}
	return nil
}

func (x *Payload) GetBankingBridgeState() *BankingBridgeState {
	if x, ok := x.GetData().(*Payload_BankingBridgeState); ok {
		return x.BankingBridgeState
	}
	return nil
}

func (x *Payload) GetSettlementState() *SettlementState {
	if x, ok := x.GetData().(*Payload_SettlementState); ok {
		return x.SettlementState
	}
	return nil
}

func (x *Payload) GetLiquidityScores() *LiquidityScores {
	if x, ok := x.GetData().(*Payload_LiquidityScores); ok {
		return x.LiquidityScores
	}
	return nil
}

func (x *Payload) GetSpotLiquidityTarget() *SpotLiquidityTarget {
	if x, ok := x.GetData().(*Payload_SpotLiquidityTarget); ok {
		return x.SpotLiquidityTarget
	}
	return nil
}

func (x *Payload) GetBankingRecurringGovernanceTransfers() *BankingRecurringGovernanceTransfers {
	if x, ok := x.GetData().(*Payload_BankingRecurringGovernanceTransfers); ok {
		return x.BankingRecurringGovernanceTransfers
	}
	return nil
}

func (x *Payload) GetBankingScheduledGovernanceTransfers() *BankingScheduledGovernanceTransfers {
	if x, ok := x.GetData().(*Payload_BankingScheduledGovernanceTransfers); ok {
		return x.BankingScheduledGovernanceTransfers
	}
	return nil
}

func (x *Payload) GetEthContractCallResults() *EthContractCallResults {
	if x, ok := x.GetData().(*Payload_EthContractCallResults); ok {
		return x.EthContractCallResults
	}
	return nil
}

func (x *Payload) GetEthOracleVerifierLastBlock() *EthOracleVerifierLastBlock {
	if x, ok := x.GetData().(*Payload_EthOracleVerifierLastBlock); ok {
		return x.EthOracleVerifierLastBlock
	}
	return nil
}

func (x *Payload) GetLiquidityV2Provisions() *LiquidityV2Provisions {
	if x, ok := x.GetData().(*Payload_LiquidityV2Provisions); ok {
		return x.LiquidityV2Provisions
	}
	return nil
}

func (x *Payload) GetLiquidityV2PendingProvisions() *LiquidityV2PendingProvisions {
	if x, ok := x.GetData().(*Payload_LiquidityV2PendingProvisions); ok {
		return x.LiquidityV2PendingProvisions
	}
	return nil
}

func (x *Payload) GetLiquidityV2Performances() *LiquidityV2Performances {
	if x, ok := x.GetData().(*Payload_LiquidityV2Performances); ok {
		return x.LiquidityV2Performances
	}
	return nil
}

func (x *Payload) GetLiquidityV2Supplied() *LiquidityV2Supplied {
	if x, ok := x.GetData().(*Payload_LiquidityV2Supplied); ok {
		return x.LiquidityV2Supplied
	}
	return nil
}

func (x *Payload) GetLiquidityV2Scores() *LiquidityV2Scores {
	if x, ok := x.GetData().(*Payload_LiquidityV2Scores); ok {
		return x.LiquidityV2Scores
	}
	return nil
}

func (x *Payload) GetHoldingAccountTracker() *HoldingAccountTracker {
	if x, ok := x.GetData().(*Payload_HoldingAccountTracker); ok {
		return x.HoldingAccountTracker
	}
	return nil
}

func (x *Payload) GetTeams() *Teams {
	if x, ok := x.GetData().(*Payload_Teams); ok {
		return x.Teams
	}
	return nil
}

func (x *Payload) GetTeamSwitches() *TeamSwitches {
	if x, ok := x.GetData().(*Payload_TeamSwitches); ok {
		return x.TeamSwitches
	}
	return nil
}

func (x *Payload) GetVesting() *Vesting {
	if x, ok := x.GetData().(*Payload_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Payload) GetReferralProgram() *ReferralProgramData {
	if x, ok := x.GetData().(*Payload_ReferralProgram); ok {
		return x.ReferralProgram
	}
	return nil
}

func (x *Payload) GetActivityStreak() *ActivityStreak {
	if x, ok := x.GetData().(*Payload_ActivityStreak); ok {
		return x.ActivityStreak
	}
	return nil
}

func (x *Payload) GetVolumeDiscountProgram() *VolumeDiscountProgram {
	if x, ok := x.GetData().(*Payload_VolumeDiscountProgram); ok {
		return x.VolumeDiscountProgram
	}
	return nil
}

func (x *Payload) GetLiquidityV2Parameters() *LiquidityV2Parameters {
	if x, ok := x.GetData().(*Payload_LiquidityV2Parameters); ok {
		return x.LiquidityV2Parameters
	}
	return nil
}

func (x *Payload) GetLiquidityV2PaidFeesStats() *LiquidityV2PaidFeesStats {
	if x, ok := x.GetData().(*Payload_LiquidityV2PaidFeesStats); ok {
		return x.LiquidityV2PaidFeesStats
	}
	return nil
}

func (x *Payload) GetLiquidation() *Liquidation {
	if x, ok := x.GetData().(*Payload_Liquidation); ok {
		return x.Liquidation
	}
	return nil
}

func (x *Payload) GetBankingTransferFeeDiscounts() *BankingTransferFeeDiscounts {
	if x, ok := x.GetData().(*Payload_BankingTransferFeeDiscounts); ok {
		return x.BankingTransferFeeDiscounts
	}
	return nil
}

func (x *Payload) GetGovernanceBatchActive() *GovernanceBatchActive {
	if x, ok := x.GetData().(*Payload_GovernanceBatchActive); ok {
		return x.GovernanceBatchActive
	}
	return nil
}

func (x *Payload) GetParties() *Parties {
	if x, ok := x.GetData().(*Payload_Parties); ok {
		return x.Parties
	}
	return nil
}

func (x *Payload) GetL2EthOracles() *L2EthOracles {
	if x, ok := x.GetData().(*Payload_L2EthOracles); ok {
		return x.L2EthOracles
	}
	return nil
}

func (x *Payload) GetEthOracleVerifierMisc() *EthOracleVerifierMisc {
	if x, ok := x.GetData().(*Payload_EthOracleVerifierMisc); ok {
		return x.EthOracleVerifierMisc
	}
	return nil
}

type isPayload_Data interface {
	isPayload_Data()
}

type Payload_ActiveAssets struct {
	ActiveAssets *ActiveAssets `protobuf:"bytes,1,opt,name=active_assets,json=activeAssets,proto3,oneof"`
}

type Payload_PendingAssets struct {
	PendingAssets *PendingAssets `protobuf:"bytes,2,opt,name=pending_assets,json=pendingAssets,proto3,oneof"`
}

type Payload_BankingWithdrawals struct {
	BankingWithdrawals *BankingWithdrawals `protobuf:"bytes,3,opt,name=banking_withdrawals,json=bankingWithdrawals,proto3,oneof"`
}

type Payload_BankingDeposits struct {
	BankingDeposits *BankingDeposits `protobuf:"bytes,4,opt,name=banking_deposits,json=bankingDeposits,proto3,oneof"`
}

type Payload_BankingSeen struct {
	BankingSeen *BankingSeen `protobuf:"bytes,5,opt,name=banking_seen,json=bankingSeen,proto3,oneof"`
}

type Payload_BankingAssetActions struct {
	BankingAssetActions *BankingAssetActions `protobuf:"bytes,6,opt,name=banking_asset_actions,json=bankingAssetActions,proto3,oneof"`
}

type Payload_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,7,opt,name=checkpoint,proto3,oneof"`
}

type Payload_CollateralAccounts struct {
	CollateralAccounts *CollateralAccounts `protobuf:"bytes,8,opt,name=collateral_accounts,json=collateralAccounts,proto3,oneof"`
}

type Payload_CollateralAssets struct {
	CollateralAssets *CollateralAssets `protobuf:"bytes,9,opt,name=collateral_assets,json=collateralAssets,proto3,oneof"`
}

type Payload_DelegationActive struct {
	DelegationActive *DelegationActive `protobuf:"bytes,10,opt,name=delegation_active,json=delegationActive,proto3,oneof"`
}

type Payload_DelegationPending struct {
	DelegationPending *DelegationPending `protobuf:"bytes,11,opt,name=delegation_pending,json=delegationPending,proto3,oneof"`
}

type Payload_DelegationAuto struct {
	DelegationAuto *DelegationAuto `protobuf:"bytes,12,opt,name=delegation_auto,json=delegationAuto,proto3,oneof"`
}

type Payload_GovernanceActive struct {
	GovernanceActive *GovernanceActive `protobuf:"bytes,13,opt,name=governance_active,json=governanceActive,proto3,oneof"`
}

type Payload_GovernanceEnacted struct {
	GovernanceEnacted *GovernanceEnacted `protobuf:"bytes,14,opt,name=governance_enacted,json=governanceEnacted,proto3,oneof"`
}

type Payload_StakingAccounts struct {
	StakingAccounts *StakingAccounts `protobuf:"bytes,15,opt,name=staking_accounts,json=stakingAccounts,proto3,oneof"`
}

type Payload_MatchingBook struct {
	MatchingBook *MatchingBook `protobuf:"bytes,16,opt,name=matching_book,json=matchingBook,proto3,oneof"`
}

type Payload_NetworkParameters struct {
	NetworkParameters *NetParams `protobuf:"bytes,17,opt,name=network_parameters,json=networkParameters,proto3,oneof"`
}

type Payload_ExecutionMarkets struct {
	ExecutionMarkets *ExecutionMarkets `protobuf:"bytes,18,opt,name=execution_markets,json=executionMarkets,proto3,oneof"`
}

type Payload_MarketPositions struct {
	MarketPositions *MarketPositions `protobuf:"bytes,19,opt,name=market_positions,json=marketPositions,proto3,oneof"`
}

type Payload_AppState struct {
	AppState *AppState `protobuf:"bytes,20,opt,name=app_state,json=appState,proto3,oneof"`
}

type Payload_Epoch struct {
	Epoch *EpochState `protobuf:"bytes,21,opt,name=epoch,proto3,oneof"`
}

type Payload_RewardsPendingPayouts struct {
	RewardsPendingPayouts *RewardsPendingPayouts `protobuf:"bytes,23,opt,name=rewards_pending_payouts,json=rewardsPendingPayouts,proto3,oneof"`
}

type Payload_GovernanceNode struct {
	GovernanceNode *GovernanceNode `protobuf:"bytes,24,opt,name=governance_node,json=governanceNode,proto3,oneof"`
}

type Payload_LimitState struct {
	LimitState *LimitState `protobuf:"bytes,25,opt,name=limit_state,json=limitState,proto3,oneof"`
}

type Payload_VoteSpamPolicy struct {
	VoteSpamPolicy *VoteSpamPolicy `protobuf:"bytes,26,opt,name=vote_spam_policy,json=voteSpamPolicy,proto3,oneof"`
}

type Payload_SimpleSpamPolicy struct {
	SimpleSpamPolicy *SimpleSpamPolicy `protobuf:"bytes,27,opt,name=simple_spam_policy,json=simpleSpamPolicy,proto3,oneof"`
}

type Payload_Notary struct {
	Notary *Notary `protobuf:"bytes,28,opt,name=notary,proto3,oneof"`
}

type Payload_EventForwarder struct {
	EventForwarder *EventForwarder `protobuf:"bytes,31,opt,name=event_forwarder,json=eventForwarder,proto3,oneof"`
}

type Payload_StakeVerifierDeposited struct {
	StakeVerifierDeposited *StakeVerifierDeposited `protobuf:"bytes,32,opt,name=stake_verifier_deposited,json=stakeVerifierDeposited,proto3,oneof"`
}

type Payload_StakeVerifierRemoved struct {
	StakeVerifierRemoved *StakeVerifierRemoved `protobuf:"bytes,33,opt,name=stake_verifier_removed,json=stakeVerifierRemoved,proto3,oneof"`
}

type Payload_Witness struct {
	Witness *Witness `protobuf:"bytes,34,opt,name=witness,proto3,oneof"`
}

type Payload_DelegationLastReconciliationTime struct {
	DelegationLastReconciliationTime *DelegationLastReconciliationTime `protobuf:"bytes,35,opt,name=delegation_last_reconciliation_time,json=delegationLastReconciliationTime,proto3,oneof"`
}

type Payload_Topology struct {
	Topology *Topology `protobuf:"bytes,36,opt,name=topology,proto3,oneof"`
}

type Payload_OracleData struct {
	OracleData *OracleDataBatch `protobuf:"bytes,37,opt,name=oracle_data,json=oracleData,proto3,oneof"`
}

type Payload_LiquidityParameters struct {
	LiquidityParameters *LiquidityParameters `protobuf:"bytes,38,opt,name=liquidity_parameters,json=liquidityParameters,proto3,oneof"`
}

type Payload_LiquidityPendingProvisions struct {
	LiquidityPendingProvisions *LiquidityPendingProvisions `protobuf:"bytes,39,opt,name=liquidity_pending_provisions,json=liquidityPendingProvisions,proto3,oneof"`
}

type Payload_LiquidityPartiesLiquidityOrders struct {
	LiquidityPartiesLiquidityOrders *LiquidityPartiesLiquidityOrders `protobuf:"bytes,40,opt,name=liquidity_parties_liquidity_orders,json=liquidityPartiesLiquidityOrders,proto3,oneof"`
}

type Payload_LiquidityPartiesOrders struct {
	LiquidityPartiesOrders *LiquidityPartiesOrders `protobuf:"bytes,41,opt,name=liquidity_parties_orders,json=liquidityPartiesOrders,proto3,oneof"`
}

type Payload_LiquidityProvisions struct {
	LiquidityProvisions *LiquidityProvisions `protobuf:"bytes,42,opt,name=liquidity_provisions,json=liquidityProvisions,proto3,oneof"`
}

type Payload_LiquiditySupplied struct {
	LiquiditySupplied *LiquiditySupplied `protobuf:"bytes,43,opt,name=liquidity_supplied,json=liquiditySupplied,proto3,oneof"`
}

type Payload_LiquidityTarget struct {
	LiquidityTarget *LiquidityTarget `protobuf:"bytes,44,opt,name=liquidity_target,json=liquidityTarget,proto3,oneof"`
}

type Payload_FloatingPointConsensus struct {
	FloatingPointConsensus *FloatingPointConsensus `protobuf:"bytes,46,opt,name=floating_point_consensus,json=floatingPointConsensus,proto3,oneof"`
}

type Payload_MarketTracker struct {
	MarketTracker *MarketTracker `protobuf:"bytes,47,opt,name=market_tracker,json=marketTracker,proto3,oneof"`
}

type Payload_BankingRecurringTransfers struct {
	BankingRecurringTransfers *BankingRecurringTransfers `protobuf:"bytes,49,opt,name=banking_recurring_transfers,json=bankingRecurringTransfers,proto3,oneof"`
}

type Payload_BankingScheduledTransfers struct {
	BankingScheduledTransfers *BankingScheduledTransfers `protobuf:"bytes,50,opt,name=banking_scheduled_transfers,json=bankingScheduledTransfers,proto3,oneof"`
}

type Payload_Erc20MultisigTopologyVerified struct {
	Erc20MultisigTopologyVerified *ERC20MultiSigTopologyVerified `protobuf:"bytes,51,opt,name=erc20_multisig_topology_verified,json=erc20MultisigTopologyVerified,proto3,oneof"`
}

type Payload_Erc20MultisigTopologyPending struct {
	Erc20MultisigTopologyPending *ERC20MultiSigTopologyPending `protobuf:"bytes,52,opt,name=erc20_multisig_topology_pending,json=erc20MultisigTopologyPending,proto3,oneof"`
}

type Payload_ProofOfWork struct {
	ProofOfWork *ProofOfWork `protobuf:"bytes,53,opt,name=proof_of_work,json=proofOfWork,proto3,oneof"`
}

type Payload_PendingAssetUpdates struct {
	PendingAssetUpdates *PendingAssetUpdates `protobuf:"bytes,54,opt,name=pending_asset_updates,json=pendingAssetUpdates,proto3,oneof"`
}

type Payload_ProtocolUpgradeProposals struct {
	ProtocolUpgradeProposals *ProtocolUpgradeProposals `protobuf:"bytes,55,opt,name=protocol_upgrade_proposals,json=protocolUpgradeProposals,proto3,oneof"`
}

type Payload_BankingBridgeState struct {
	BankingBridgeState *BankingBridgeState `protobuf:"bytes,56,opt,name=banking_bridge_state,json=bankingBridgeState,proto3,oneof"`
}

type Payload_SettlementState struct {
	SettlementState *SettlementState `protobuf:"bytes,57,opt,name=settlement_state,json=settlementState,proto3,oneof"`
}

type Payload_LiquidityScores struct {
	LiquidityScores *LiquidityScores `protobuf:"bytes,58,opt,name=liquidity_scores,json=liquidityScores,proto3,oneof"`
}

type Payload_SpotLiquidityTarget struct {
	SpotLiquidityTarget *SpotLiquidityTarget `protobuf:"bytes,59,opt,name=spot_liquidity_target,json=spotLiquidityTarget,proto3,oneof"`
}

type Payload_BankingRecurringGovernanceTransfers struct {
	BankingRecurringGovernanceTransfers *BankingRecurringGovernanceTransfers `protobuf:"bytes,60,opt,name=banking_recurring_governance_transfers,json=bankingRecurringGovernanceTransfers,proto3,oneof"`
}

type Payload_BankingScheduledGovernanceTransfers struct {
	BankingScheduledGovernanceTransfers *BankingScheduledGovernanceTransfers `protobuf:"bytes,61,opt,name=banking_scheduled_governance_transfers,json=bankingScheduledGovernanceTransfers,proto3,oneof"`
}

type Payload_EthContractCallResults struct {
	EthContractCallResults *EthContractCallResults `protobuf:"bytes,62,opt,name=eth_contract_call_results,json=ethContractCallResults,proto3,oneof"`
}

type Payload_EthOracleVerifierLastBlock struct {
	EthOracleVerifierLastBlock *EthOracleVerifierLastBlock `protobuf:"bytes,63,opt,name=eth_oracle_verifier_last_block,json=ethOracleVerifierLastBlock,proto3,oneof"`
}

type Payload_LiquidityV2Provisions struct {
	LiquidityV2Provisions *LiquidityV2Provisions `protobuf:"bytes,64,opt,name=liquidity_v2_provisions,json=liquidityV2Provisions,proto3,oneof"`
}

type Payload_LiquidityV2PendingProvisions struct {
	LiquidityV2PendingProvisions *LiquidityV2PendingProvisions `protobuf:"bytes,65,opt,name=liquidity_v2_pending_provisions,json=liquidityV2PendingProvisions,proto3,oneof"`
}

type Payload_LiquidityV2Performances struct {
	LiquidityV2Performances *LiquidityV2Performances `protobuf:"bytes,66,opt,name=liquidity_v2_performances,json=liquidityV2Performances,proto3,oneof"`
}

type Payload_LiquidityV2Supplied struct {
	LiquidityV2Supplied *LiquidityV2Supplied `protobuf:"bytes,67,opt,name=liquidity_v2_supplied,json=liquidityV2Supplied,proto3,oneof"`
}

type Payload_LiquidityV2Scores struct {
	LiquidityV2Scores *LiquidityV2Scores `protobuf:"bytes,68,opt,name=liquidity_v2_scores,json=liquidityV2Scores,proto3,oneof"`
}

type Payload_HoldingAccountTracker struct {
	HoldingAccountTracker *HoldingAccountTracker `protobuf:"bytes,69,opt,name=holding_account_tracker,json=holdingAccountTracker,proto3,oneof"`
}

type Payload_Teams struct {
	Teams *Teams `protobuf:"bytes,70,opt,name=teams,proto3,oneof"`
}

type Payload_TeamSwitches struct {
	TeamSwitches *TeamSwitches `protobuf:"bytes,71,opt,name=team_switches,json=teamSwitches,proto3,oneof"`
}

type Payload_Vesting struct {
	Vesting *Vesting `protobuf:"bytes,72,opt,name=vesting,proto3,oneof"`
}

type Payload_ReferralProgram struct {
	ReferralProgram *ReferralProgramData `protobuf:"bytes,73,opt,name=referral_program,json=referralProgram,proto3,oneof"`
}

type Payload_ActivityStreak struct {
	ActivityStreak *ActivityStreak `protobuf:"bytes,76,opt,name=activity_streak,json=activityStreak,proto3,oneof"`
}

type Payload_VolumeDiscountProgram struct {
	VolumeDiscountProgram *VolumeDiscountProgram `protobuf:"bytes,77,opt,name=volume_discount_program,json=volumeDiscountProgram,proto3,oneof"`
}

type Payload_LiquidityV2Parameters struct {
	LiquidityV2Parameters *LiquidityV2Parameters `protobuf:"bytes,78,opt,name=liquidity_v2_parameters,json=liquidityV2Parameters,proto3,oneof"`
}

type Payload_LiquidityV2PaidFeesStats struct {
	LiquidityV2PaidFeesStats *LiquidityV2PaidFeesStats `protobuf:"bytes,79,opt,name=liquidity_v2_paid_fees_stats,json=liquidityV2PaidFeesStats,proto3,oneof"`
}

type Payload_Liquidation struct {
	Liquidation *Liquidation `protobuf:"bytes,80,opt,name=liquidation,proto3,oneof"`
}

type Payload_BankingTransferFeeDiscounts struct {
	BankingTransferFeeDiscounts *BankingTransferFeeDiscounts `protobuf:"bytes,81,opt,name=banking_transfer_fee_discounts,json=bankingTransferFeeDiscounts,proto3,oneof"`
}

type Payload_GovernanceBatchActive struct {
	GovernanceBatchActive *GovernanceBatchActive `protobuf:"bytes,82,opt,name=governance_batch_active,json=governanceBatchActive,proto3,oneof"`
}

type Payload_Parties struct {
	Parties *Parties `protobuf:"bytes,83,opt,name=parties,proto3,oneof"`
}

type Payload_L2EthOracles struct {
	L2EthOracles *L2EthOracles `protobuf:"bytes,84,opt,name=l2_eth_oracles,json=l2EthOracles,proto3,oneof"`
}

type Payload_EthOracleVerifierMisc struct {
	EthOracleVerifierMisc *EthOracleVerifierMisc `protobuf:"bytes,85,opt,name=eth_oracle_verifier_misc,json=ethOracleVerifierMisc,proto3,oneof"`
}

func (*Payload_ActiveAssets) isPayload_Data() {}

func (*Payload_PendingAssets) isPayload_Data() {}

func (*Payload_BankingWithdrawals) isPayload_Data() {}

func (*Payload_BankingDeposits) isPayload_Data() {}

func (*Payload_BankingSeen) isPayload_Data() {}

func (*Payload_BankingAssetActions) isPayload_Data() {}

func (*Payload_Checkpoint) isPayload_Data() {}

func (*Payload_CollateralAccounts) isPayload_Data() {}

func (*Payload_CollateralAssets) isPayload_Data() {}

func (*Payload_DelegationActive) isPayload_Data() {}

func (*Payload_DelegationPending) isPayload_Data() {}

func (*Payload_DelegationAuto) isPayload_Data() {}

func (*Payload_GovernanceActive) isPayload_Data() {}

func (*Payload_GovernanceEnacted) isPayload_Data() {}

func (*Payload_StakingAccounts) isPayload_Data() {}

func (*Payload_MatchingBook) isPayload_Data() {}

func (*Payload_NetworkParameters) isPayload_Data() {}

func (*Payload_ExecutionMarkets) isPayload_Data() {}

func (*Payload_MarketPositions) isPayload_Data() {}

func (*Payload_AppState) isPayload_Data() {}

func (*Payload_Epoch) isPayload_Data() {}

func (*Payload_RewardsPendingPayouts) isPayload_Data() {}

func (*Payload_GovernanceNode) isPayload_Data() {}

func (*Payload_LimitState) isPayload_Data() {}

func (*Payload_VoteSpamPolicy) isPayload_Data() {}

func (*Payload_SimpleSpamPolicy) isPayload_Data() {}

func (*Payload_Notary) isPayload_Data() {}

func (*Payload_EventForwarder) isPayload_Data() {}

func (*Payload_StakeVerifierDeposited) isPayload_Data() {}

func (*Payload_StakeVerifierRemoved) isPayload_Data() {}

func (*Payload_Witness) isPayload_Data() {}

func (*Payload_DelegationLastReconciliationTime) isPayload_Data() {}

func (*Payload_Topology) isPayload_Data() {}

func (*Payload_OracleData) isPayload_Data() {}

func (*Payload_LiquidityParameters) isPayload_Data() {}

func (*Payload_LiquidityPendingProvisions) isPayload_Data() {}

func (*Payload_LiquidityPartiesLiquidityOrders) isPayload_Data() {}

func (*Payload_LiquidityPartiesOrders) isPayload_Data() {}

func (*Payload_LiquidityProvisions) isPayload_Data() {}

func (*Payload_LiquiditySupplied) isPayload_Data() {}

func (*Payload_LiquidityTarget) isPayload_Data() {}

func (*Payload_FloatingPointConsensus) isPayload_Data() {}

func (*Payload_MarketTracker) isPayload_Data() {}

func (*Payload_BankingRecurringTransfers) isPayload_Data() {}

func (*Payload_BankingScheduledTransfers) isPayload_Data() {}

func (*Payload_Erc20MultisigTopologyVerified) isPayload_Data() {}

func (*Payload_Erc20MultisigTopologyPending) isPayload_Data() {}

func (*Payload_ProofOfWork) isPayload_Data() {}

func (*Payload_PendingAssetUpdates) isPayload_Data() {}

func (*Payload_ProtocolUpgradeProposals) isPayload_Data() {}

func (*Payload_BankingBridgeState) isPayload_Data() {}

func (*Payload_SettlementState) isPayload_Data() {}

func (*Payload_LiquidityScores) isPayload_Data() {}

func (*Payload_SpotLiquidityTarget) isPayload_Data() {}

func (*Payload_BankingRecurringGovernanceTransfers) isPayload_Data() {}

func (*Payload_BankingScheduledGovernanceTransfers) isPayload_Data() {}

func (*Payload_EthContractCallResults) isPayload_Data() {}

func (*Payload_EthOracleVerifierLastBlock) isPayload_Data() {}

func (*Payload_LiquidityV2Provisions) isPayload_Data() {}

func (*Payload_LiquidityV2PendingProvisions) isPayload_Data() {}

func (*Payload_LiquidityV2Performances) isPayload_Data() {}

func (*Payload_LiquidityV2Supplied) isPayload_Data() {}

func (*Payload_LiquidityV2Scores) isPayload_Data() {}

func (*Payload_HoldingAccountTracker) isPayload_Data() {}

func (*Payload_Teams) isPayload_Data() {}

func (*Payload_TeamSwitches) isPayload_Data() {}

func (*Payload_Vesting) isPayload_Data() {}

func (*Payload_ReferralProgram) isPayload_Data() {}

func (*Payload_ActivityStreak) isPayload_Data() {}

func (*Payload_VolumeDiscountProgram) isPayload_Data() {}

func (*Payload_LiquidityV2Parameters) isPayload_Data() {}

func (*Payload_LiquidityV2PaidFeesStats) isPayload_Data() {}

func (*Payload_Liquidation) isPayload_Data() {}

func (*Payload_BankingTransferFeeDiscounts) isPayload_Data() {}

func (*Payload_GovernanceBatchActive) isPayload_Data() {}

func (*Payload_Parties) isPayload_Data() {}

func (*Payload_L2EthOracles) isPayload_Data() {}

func (*Payload_EthOracleVerifierMisc) isPayload_Data() {}

type OrderHoldingQuantities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Quantity string `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Fee      string `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *OrderHoldingQuantities) Reset() {
	*x = OrderHoldingQuantities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHoldingQuantities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHoldingQuantities) ProtoMessage() {}

func (x *OrderHoldingQuantities) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHoldingQuantities.ProtoReflect.Descriptor instead.
func (*OrderHoldingQuantities) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{5}
}

func (x *OrderHoldingQuantities) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderHoldingQuantities) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *OrderHoldingQuantities) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type HoldingAccountTracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId     string                    `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	OrderHolding []*OrderHoldingQuantities `protobuf:"bytes,2,rep,name=order_holding,json=orderHolding,proto3" json:"order_holding,omitempty"`
}

func (x *HoldingAccountTracker) Reset() {
	*x = HoldingAccountTracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldingAccountTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldingAccountTracker) ProtoMessage() {}

func (x *HoldingAccountTracker) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldingAccountTracker.ProtoReflect.Descriptor instead.
func (*HoldingAccountTracker) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{6}
}

func (x *HoldingAccountTracker) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *HoldingAccountTracker) GetOrderHolding() []*OrderHoldingQuantities {
	if x != nil {
		return x.OrderHolding
	}
	return nil
}

type TimestampedTotalStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalStake uint64 `protobuf:"varint,1,opt,name=total_stake,json=totalStake,proto3" json:"total_stake,omitempty"`
	Time       int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TimestampedTotalStake) Reset() {
	*x = TimestampedTotalStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedTotalStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedTotalStake) ProtoMessage() {}

func (x *TimestampedTotalStake) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedTotalStake.ProtoReflect.Descriptor instead.
func (*TimestampedTotalStake) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{7}
}

func (x *TimestampedTotalStake) GetTotalStake() uint64 {
	if x != nil {
		return x.TotalStake
	}
	return 0
}

func (x *TimestampedTotalStake) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type TimestampedOpenInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenInterest uint64 `protobuf:"varint,1,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`
	Time         int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TimestampedOpenInterest) Reset() {
	*x = TimestampedOpenInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedOpenInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedOpenInterest) ProtoMessage() {}

func (x *TimestampedOpenInterest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedOpenInterest.ProtoReflect.Descriptor instead.
func (*TimestampedOpenInterest) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{8}
}

func (x *TimestampedOpenInterest) GetOpenInterest() uint64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *TimestampedOpenInterest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type LiquidityTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId              string                     `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	CurrentTime           int64                      `protobuf:"varint,2,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	ScheduledTruncate     int64                      `protobuf:"varint,3,opt,name=scheduled_truncate,json=scheduledTruncate,proto3" json:"scheduled_truncate,omitempty"`
	CurrentOpenInterests  []uint64                   `protobuf:"varint,4,rep,packed,name=current_open_interests,json=currentOpenInterests,proto3" json:"current_open_interests,omitempty"`
	PreviousOpenInterests []*TimestampedOpenInterest `protobuf:"bytes,5,rep,name=previous_open_interests,json=previousOpenInterests,proto3" json:"previous_open_interests,omitempty"`
	MaxOpenInterests      *TimestampedOpenInterest   `protobuf:"bytes,6,opt,name=max_open_interests,json=maxOpenInterests,proto3" json:"max_open_interests,omitempty"`
}

func (x *LiquidityTarget) Reset() {
	*x = LiquidityTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityTarget) ProtoMessage() {}

func (x *LiquidityTarget) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityTarget.ProtoReflect.Descriptor instead.
func (*LiquidityTarget) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{9}
}

func (x *LiquidityTarget) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityTarget) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *LiquidityTarget) GetScheduledTruncate() int64 {
	if x != nil {
		return x.ScheduledTruncate
	}
	return 0
}

func (x *LiquidityTarget) GetCurrentOpenInterests() []uint64 {
	if x != nil {
		return x.CurrentOpenInterests
	}
	return nil
}

func (x *LiquidityTarget) GetPreviousOpenInterests() []*TimestampedOpenInterest {
	if x != nil {
		return x.PreviousOpenInterests
	}
	return nil
}

func (x *LiquidityTarget) GetMaxOpenInterests() *TimestampedOpenInterest {
	if x != nil {
		return x.MaxOpenInterests
	}
	return nil
}

type SpotLiquidityTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId           string                   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	CurrentTime        int64                    `protobuf:"varint,2,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	ScheduledTruncate  int64                    `protobuf:"varint,3,opt,name=scheduled_truncate,json=scheduledTruncate,proto3" json:"scheduled_truncate,omitempty"`
	CurrentTotalStake  []uint64                 `protobuf:"varint,4,rep,packed,name=current_total_stake,json=currentTotalStake,proto3" json:"current_total_stake,omitempty"`
	PreviousTotalStake []*TimestampedTotalStake `protobuf:"bytes,5,rep,name=previous_total_stake,json=previousTotalStake,proto3" json:"previous_total_stake,omitempty"`
	MaxTotalStake      *TimestampedTotalStake   `protobuf:"bytes,6,opt,name=max_total_stake,json=maxTotalStake,proto3" json:"max_total_stake,omitempty"`
}

func (x *SpotLiquidityTarget) Reset() {
	*x = SpotLiquidityTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotLiquidityTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotLiquidityTarget) ProtoMessage() {}

func (x *SpotLiquidityTarget) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotLiquidityTarget.ProtoReflect.Descriptor instead.
func (*SpotLiquidityTarget) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{10}
}

func (x *SpotLiquidityTarget) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SpotLiquidityTarget) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *SpotLiquidityTarget) GetScheduledTruncate() int64 {
	if x != nil {
		return x.ScheduledTruncate
	}
	return 0
}

func (x *SpotLiquidityTarget) GetCurrentTotalStake() []uint64 {
	if x != nil {
		return x.CurrentTotalStake
	}
	return nil
}

func (x *SpotLiquidityTarget) GetPreviousTotalStake() []*TimestampedTotalStake {
	if x != nil {
		return x.PreviousTotalStake
	}
	return nil
}

func (x *SpotLiquidityTarget) GetMaxTotalStake() *TimestampedTotalStake {
	if x != nil {
		return x.MaxTotalStake
	}
	return nil
}

type LiquidityOffsetProbabilityPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset      uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Probability string `protobuf:"bytes,2,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (x *LiquidityOffsetProbabilityPair) Reset() {
	*x = LiquidityOffsetProbabilityPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityOffsetProbabilityPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityOffsetProbabilityPair) ProtoMessage() {}

func (x *LiquidityOffsetProbabilityPair) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityOffsetProbabilityPair.ProtoReflect.Descriptor instead.
func (*LiquidityOffsetProbabilityPair) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{11}
}

func (x *LiquidityOffsetProbabilityPair) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LiquidityOffsetProbabilityPair) GetProbability() string {
	if x != nil {
		return x.Probability
	}
	return ""
}

type LiquiditySupplied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId         string                            `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	ConsensusReached bool                              `protobuf:"varint,2,opt,name=consensus_reached,json=consensusReached,proto3" json:"consensus_reached,omitempty"`
	BidCache         []*LiquidityOffsetProbabilityPair `protobuf:"bytes,3,rep,name=bid_cache,json=bidCache,proto3" json:"bid_cache,omitempty"`
	AskCache         []*LiquidityOffsetProbabilityPair `protobuf:"bytes,4,rep,name=ask_cache,json=askCache,proto3" json:"ask_cache,omitempty"`
}

func (x *LiquiditySupplied) Reset() {
	*x = LiquiditySupplied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquiditySupplied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquiditySupplied) ProtoMessage() {}

func (x *LiquiditySupplied) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquiditySupplied.ProtoReflect.Descriptor instead.
func (*LiquiditySupplied) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{12}
}

func (x *LiquiditySupplied) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquiditySupplied) GetConsensusReached() bool {
	if x != nil {
		return x.ConsensusReached
	}
	return false
}

func (x *LiquiditySupplied) GetBidCache() []*LiquidityOffsetProbabilityPair {
	if x != nil {
		return x.BidCache
	}
	return nil
}

func (x *LiquiditySupplied) GetAskCache() []*LiquidityOffsetProbabilityPair {
	if x != nil {
		return x.AskCache
	}
	return nil
}

type OracleDataBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OracleData []*OracleData `protobuf:"bytes,1,rep,name=oracle_data,json=oracleData,proto3" json:"oracle_data,omitempty"`
}

func (x *OracleDataBatch) Reset() {
	*x = OracleDataBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDataBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDataBatch) ProtoMessage() {}

func (x *OracleDataBatch) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleDataBatch.ProtoReflect.Descriptor instead.
func (*OracleDataBatch) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{13}
}

func (x *OracleDataBatch) GetOracleData() []*OracleData {
	if x != nil {
		return x.OracleData
	}
	return nil
}

type OracleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signers  []*v1.Signer      `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	Data     []*OracleDataPair `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	MetaData []*v1.Property    `protobuf:"bytes,3,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *OracleData) Reset() {
	*x = OracleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleData) ProtoMessage() {}

func (x *OracleData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleData.ProtoReflect.Descriptor instead.
func (*OracleData) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{14}
}

func (x *OracleData) GetSigners() []*v1.Signer {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *OracleData) GetData() []*OracleDataPair {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *OracleData) GetMetaData() []*v1.Property {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type OracleDataPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OracleDataPair) Reset() {
	*x = OracleDataPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDataPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDataPair) ProtoMessage() {}

func (x *OracleDataPair) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleDataPair.ProtoReflect.Descriptor instead.
func (*OracleDataPair) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{15}
}

func (x *OracleDataPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OracleDataPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Witness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *Witness) Reset() {
	*x = Witness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Witness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Witness) ProtoMessage() {}

func (x *Witness) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Witness.ProtoReflect.Descriptor instead.
func (*Witness) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{16}
}

func (x *Witness) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckUntil int64    `protobuf:"varint,2,opt,name=check_until,json=checkUntil,proto3" json:"check_until,omitempty"`
	Votes      []string `protobuf:"bytes,3,rep,name=votes,proto3" json:"votes,omitempty"`
	State      uint32   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{17}
}

func (x *Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Resource) GetCheckUntil() int64 {
	if x != nil {
		return x.CheckUntil
	}
	return 0
}

func (x *Resource) GetVotes() []string {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *Resource) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type EventForwarderBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts     int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Hashes []string `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *EventForwarderBucket) Reset() {
	*x = EventForwarderBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventForwarderBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventForwarderBucket) ProtoMessage() {}

func (x *EventForwarderBucket) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventForwarderBucket.ProtoReflect.Descriptor instead.
func (*EventForwarderBucket) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{18}
}

func (x *EventForwarderBucket) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *EventForwarderBucket) GetHashes() []string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type EventForwarder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this is deprecated, use the other one now
	AckedEvents []string                `protobuf:"bytes,1,rep,name=acked_events,json=ackedEvents,proto3" json:"acked_events,omitempty"`
	Buckets     []*EventForwarderBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *EventForwarder) Reset() {
	*x = EventForwarder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventForwarder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventForwarder) ProtoMessage() {}

func (x *EventForwarder) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventForwarder.ProtoReflect.Descriptor instead.
func (*EventForwarder) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{19}
}

func (x *EventForwarder) GetAckedEvents() []string {
	if x != nil {
		return x.AckedEvents
	}
	return nil
}

func (x *EventForwarder) GetBuckets() []*EventForwarderBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type CollateralAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts            []*vega.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	NextBalanceSnapshot int64           `protobuf:"varint,2,opt,name=next_balance_snapshot,json=nextBalanceSnapshot,proto3" json:"next_balance_snapshot,omitempty"`
}

func (x *CollateralAccounts) Reset() {
	*x = CollateralAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollateralAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollateralAccounts) ProtoMessage() {}

func (x *CollateralAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollateralAccounts.ProtoReflect.Descriptor instead.
func (*CollateralAccounts) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{20}
}

func (x *CollateralAccounts) GetAccounts() []*vega.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *CollateralAccounts) GetNextBalanceSnapshot() int64 {
	if x != nil {
		return x.NextBalanceSnapshot
	}
	return 0
}

type CollateralAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*vega.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *CollateralAssets) Reset() {
	*x = CollateralAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollateralAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollateralAssets) ProtoMessage() {}

func (x *CollateralAssets) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollateralAssets.ProtoReflect.Descriptor instead.
func (*CollateralAssets) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{21}
}

func (x *CollateralAssets) GetAssets() []*vega.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type ActiveAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*vega.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *ActiveAssets) Reset() {
	*x = ActiveAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveAssets) ProtoMessage() {}

func (x *ActiveAssets) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveAssets.ProtoReflect.Descriptor instead.
func (*ActiveAssets) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{22}
}

func (x *ActiveAssets) GetAssets() []*vega.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type PendingAssets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*vega.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *PendingAssets) Reset() {
	*x = PendingAssets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingAssets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAssets) ProtoMessage() {}

func (x *PendingAssets) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAssets.ProtoReflect.Descriptor instead.
func (*PendingAssets) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{23}
}

func (x *PendingAssets) GetAssets() []*vega.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type PendingAssetUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*vega.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *PendingAssetUpdates) Reset() {
	*x = PendingAssetUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingAssetUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAssetUpdates) ProtoMessage() {}

func (x *PendingAssetUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAssetUpdates.ProtoReflect.Descriptor instead.
func (*PendingAssetUpdates) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{24}
}

func (x *PendingAssetUpdates) GetAssets() []*vega.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref        string           `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Withdrawal *vega.Withdrawal `protobuf:"bytes,2,opt,name=withdrawal,proto3" json:"withdrawal,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{25}
}

func (x *Withdrawal) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Withdrawal) GetWithdrawal() *vega.Withdrawal {
	if x != nil {
		return x.Withdrawal
	}
	return nil
}

type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Deposit *vega.Deposit `protobuf:"bytes,2,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{26}
}

func (x *Deposit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deposit) GetDeposit() *vega.Deposit {
	if x != nil {
		return x.Deposit
	}
	return nil
}

type TxRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset    string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	BlockNr  uint64 `protobuf:"varint,2,opt,name=block_nr,json=blockNr,proto3" json:"block_nr,omitempty"`
	Hash     string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	LogIndex uint64 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (x *TxRef) Reset() {
	*x = TxRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRef) ProtoMessage() {}

func (x *TxRef) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRef.ProtoReflect.Descriptor instead.
func (*TxRef) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{27}
}

func (x *TxRef) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TxRef) GetBlockNr() uint64 {
	if x != nil {
		return x.BlockNr
	}
	return 0
}

func (x *TxRef) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *TxRef) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

type BankingWithdrawals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Withdrawals []*Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (x *BankingWithdrawals) Reset() {
	*x = BankingWithdrawals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingWithdrawals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingWithdrawals) ProtoMessage() {}

func (x *BankingWithdrawals) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingWithdrawals.ProtoReflect.Descriptor instead.
func (*BankingWithdrawals) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{28}
}

func (x *BankingWithdrawals) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

type BankingDeposits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deposit []*Deposit `protobuf:"bytes,1,rep,name=deposit,proto3" json:"deposit,omitempty"`
}

func (x *BankingDeposits) Reset() {
	*x = BankingDeposits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingDeposits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingDeposits) ProtoMessage() {}

func (x *BankingDeposits) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingDeposits.ProtoReflect.Descriptor instead.
func (*BankingDeposits) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{29}
}

func (x *BankingDeposits) GetDeposit() []*Deposit {
	if x != nil {
		return x.Deposit
	}
	return nil
}

type BankingSeen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refs             []string `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
	LastSeenEthBlock uint64   `protobuf:"varint,2,opt,name=last_seen_eth_block,json=lastSeenEthBlock,proto3" json:"last_seen_eth_block,omitempty"`
}

func (x *BankingSeen) Reset() {
	*x = BankingSeen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingSeen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingSeen) ProtoMessage() {}

func (x *BankingSeen) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingSeen.ProtoReflect.Descriptor instead.
func (*BankingSeen) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{30}
}

func (x *BankingSeen) GetRefs() []string {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *BankingSeen) GetLastSeenEthBlock() uint64 {
	if x != nil {
		return x.LastSeenEthBlock
	}
	return 0
}

type BankingAssetActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetAction []*v11.AssetAction `protobuf:"bytes,1,rep,name=asset_action,json=assetAction,proto3" json:"asset_action,omitempty"`
}

func (x *BankingAssetActions) Reset() {
	*x = BankingAssetActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingAssetActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingAssetActions) ProtoMessage() {}

func (x *BankingAssetActions) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingAssetActions.ProtoReflect.Descriptor instead.
func (*BankingAssetActions) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{31}
}

func (x *BankingAssetActions) GetAssetAction() []*v11.AssetAction {
	if x != nil {
		return x.AssetAction
	}
	return nil
}

type BankingRecurringTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringTransfers *v11.RecurringTransfers `protobuf:"bytes,1,opt,name=recurring_transfers,json=recurringTransfers,proto3" json:"recurring_transfers,omitempty"`
}

func (x *BankingRecurringTransfers) Reset() {
	*x = BankingRecurringTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingRecurringTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingRecurringTransfers) ProtoMessage() {}

func (x *BankingRecurringTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingRecurringTransfers.ProtoReflect.Descriptor instead.
func (*BankingRecurringTransfers) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{32}
}

func (x *BankingRecurringTransfers) GetRecurringTransfers() *v11.RecurringTransfers {
	if x != nil {
		return x.RecurringTransfers
	}
	return nil
}

type BankingScheduledTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransfersAtTime []*v11.ScheduledTransferAtTime `protobuf:"bytes,1,rep,name=transfers_at_time,json=transfersAtTime,proto3" json:"transfers_at_time,omitempty"`
}

func (x *BankingScheduledTransfers) Reset() {
	*x = BankingScheduledTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingScheduledTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingScheduledTransfers) ProtoMessage() {}

func (x *BankingScheduledTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingScheduledTransfers.ProtoReflect.Descriptor instead.
func (*BankingScheduledTransfers) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{33}
}

func (x *BankingScheduledTransfers) GetTransfersAtTime() []*v11.ScheduledTransferAtTime {
	if x != nil {
		return x.TransfersAtTime
	}
	return nil
}

type BankingRecurringGovernanceTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecurringTransfers []*v11.GovernanceTransfer `protobuf:"bytes,1,rep,name=recurring_transfers,json=recurringTransfers,proto3" json:"recurring_transfers,omitempty"`
}

func (x *BankingRecurringGovernanceTransfers) Reset() {
	*x = BankingRecurringGovernanceTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingRecurringGovernanceTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingRecurringGovernanceTransfers) ProtoMessage() {}

func (x *BankingRecurringGovernanceTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingRecurringGovernanceTransfers.ProtoReflect.Descriptor instead.
func (*BankingRecurringGovernanceTransfers) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{34}
}

func (x *BankingRecurringGovernanceTransfers) GetRecurringTransfers() []*v11.GovernanceTransfer {
	if x != nil {
		return x.RecurringTransfers
	}
	return nil
}

type BankingScheduledGovernanceTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransfersAtTime []*v11.ScheduledGovernanceTransferAtTime `protobuf:"bytes,1,rep,name=transfers_at_time,json=transfersAtTime,proto3" json:"transfers_at_time,omitempty"`
}

func (x *BankingScheduledGovernanceTransfers) Reset() {
	*x = BankingScheduledGovernanceTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingScheduledGovernanceTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingScheduledGovernanceTransfers) ProtoMessage() {}

func (x *BankingScheduledGovernanceTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingScheduledGovernanceTransfers.ProtoReflect.Descriptor instead.
func (*BankingScheduledGovernanceTransfers) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{35}
}

func (x *BankingScheduledGovernanceTransfers) GetTransfersAtTime() []*v11.ScheduledGovernanceTransferAtTime {
	if x != nil {
		return x.TransfersAtTime
	}
	return nil
}

type BankingBridgeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeState *v11.BridgeState `protobuf:"bytes,1,opt,name=bridge_state,json=bridgeState,proto3" json:"bridge_state,omitempty"`
}

func (x *BankingBridgeState) Reset() {
	*x = BankingBridgeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingBridgeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingBridgeState) ProtoMessage() {}

func (x *BankingBridgeState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingBridgeState.ProtoReflect.Descriptor instead.
func (*BankingBridgeState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{36}
}

func (x *BankingBridgeState) GetBridgeState() *v11.BridgeState {
	if x != nil {
		return x.BridgeState
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextCp int64 `protobuf:"varint,1,opt,name=next_cp,json=nextCp,proto3" json:"next_cp,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{37}
}

func (x *Checkpoint) GetNextCp() int64 {
	if x != nil {
		return x.NextCp
	}
	return 0
}

type DelegationLastReconciliationTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastReconciliationTime int64 `protobuf:"varint,1,opt,name=last_reconciliation_time,json=lastReconciliationTime,proto3" json:"last_reconciliation_time,omitempty"`
}

func (x *DelegationLastReconciliationTime) Reset() {
	*x = DelegationLastReconciliationTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationLastReconciliationTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationLastReconciliationTime) ProtoMessage() {}

func (x *DelegationLastReconciliationTime) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationLastReconciliationTime.ProtoReflect.Descriptor instead.
func (*DelegationLastReconciliationTime) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{38}
}

func (x *DelegationLastReconciliationTime) GetLastReconciliationTime() int64 {
	if x != nil {
		return x.LastReconciliationTime
	}
	return 0
}

type DelegationActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegations []*vega.Delegation `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations,omitempty"`
}

func (x *DelegationActive) Reset() {
	*x = DelegationActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationActive) ProtoMessage() {}

func (x *DelegationActive) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationActive.ProtoReflect.Descriptor instead.
func (*DelegationActive) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{39}
}

func (x *DelegationActive) GetDelegations() []*vega.Delegation {
	if x != nil {
		return x.Delegations
	}
	return nil
}

type DelegationPending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegations  []*vega.Delegation `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations,omitempty"`
	Undelegation []*vega.Delegation `protobuf:"bytes,2,rep,name=undelegation,proto3" json:"undelegation,omitempty"`
}

func (x *DelegationPending) Reset() {
	*x = DelegationPending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationPending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationPending) ProtoMessage() {}

func (x *DelegationPending) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationPending.ProtoReflect.Descriptor instead.
func (*DelegationPending) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{40}
}

func (x *DelegationPending) GetDelegations() []*vega.Delegation {
	if x != nil {
		return x.Delegations
	}
	return nil
}

func (x *DelegationPending) GetUndelegation() []*vega.Delegation {
	if x != nil {
		return x.Undelegation
	}
	return nil
}

type DelegationAuto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties []string `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *DelegationAuto) Reset() {
	*x = DelegationAuto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationAuto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationAuto) ProtoMessage() {}

func (x *DelegationAuto) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationAuto.ProtoReflect.Descriptor instead.
func (*DelegationAuto) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{41}
}

func (x *DelegationAuto) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

type ProposalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal *vega.Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Yes      []*vega.Vote   `protobuf:"bytes,2,rep,name=yes,proto3" json:"yes,omitempty"`
	No       []*vega.Vote   `protobuf:"bytes,3,rep,name=no,proto3" json:"no,omitempty"`
	Invalid  []*vega.Vote   `protobuf:"bytes,4,rep,name=invalid,proto3" json:"invalid,omitempty"`
}

func (x *ProposalData) Reset() {
	*x = ProposalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalData) ProtoMessage() {}

func (x *ProposalData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalData.ProtoReflect.Descriptor instead.
func (*ProposalData) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{42}
}

func (x *ProposalData) GetProposal() *vega.Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ProposalData) GetYes() []*vega.Vote {
	if x != nil {
		return x.Yes
	}
	return nil
}

func (x *ProposalData) GetNo() []*vega.Vote {
	if x != nil {
		return x.No
	}
	return nil
}

func (x *ProposalData) GetInvalid() []*vega.Vote {
	if x != nil {
		return x.Invalid
	}
	return nil
}

type GovernanceEnacted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*ProposalData `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *GovernanceEnacted) Reset() {
	*x = GovernanceEnacted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceEnacted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceEnacted) ProtoMessage() {}

func (x *GovernanceEnacted) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceEnacted.ProtoReflect.Descriptor instead.
func (*GovernanceEnacted) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{43}
}

func (x *GovernanceEnacted) GetProposals() []*ProposalData {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type GovernanceActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*ProposalData `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *GovernanceActive) Reset() {
	*x = GovernanceActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceActive) ProtoMessage() {}

func (x *GovernanceActive) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceActive.ProtoReflect.Descriptor instead.
func (*GovernanceActive) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{44}
}

func (x *GovernanceActive) GetProposals() []*ProposalData {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type BatchProposalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchProposal *ProposalData    `protobuf:"bytes,1,opt,name=batch_proposal,json=batchProposal,proto3" json:"batch_proposal,omitempty"`
	Proposals     []*vega.Proposal `protobuf:"bytes,2,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *BatchProposalData) Reset() {
	*x = BatchProposalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProposalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProposalData) ProtoMessage() {}

func (x *BatchProposalData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProposalData.ProtoReflect.Descriptor instead.
func (*BatchProposalData) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{45}
}

func (x *BatchProposalData) GetBatchProposal() *ProposalData {
	if x != nil {
		return x.BatchProposal
	}
	return nil
}

func (x *BatchProposalData) GetProposals() []*vega.Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type GovernanceBatchActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchProposals []*BatchProposalData `protobuf:"bytes,1,rep,name=batch_proposals,json=batchProposals,proto3" json:"batch_proposals,omitempty"`
}

func (x *GovernanceBatchActive) Reset() {
	*x = GovernanceBatchActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceBatchActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceBatchActive) ProtoMessage() {}

func (x *GovernanceBatchActive) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceBatchActive.ProtoReflect.Descriptor instead.
func (*GovernanceBatchActive) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{46}
}

func (x *GovernanceBatchActive) GetBatchProposals() []*BatchProposalData {
	if x != nil {
		return x.BatchProposals
	}
	return nil
}

type GovernanceNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals    []*vega.Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
	ProposalData []*ProposalData  `protobuf:"bytes,2,rep,name=proposal_data,json=proposalData,proto3" json:"proposal_data,omitempty"` // includes votes
}

func (x *GovernanceNode) Reset() {
	*x = GovernanceNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceNode) ProtoMessage() {}

func (x *GovernanceNode) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceNode.ProtoReflect.Descriptor instead.
func (*GovernanceNode) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{47}
}

func (x *GovernanceNode) GetProposals() []*vega.Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *GovernanceNode) GetProposalData() []*ProposalData {
	if x != nil {
		return x.ProposalData
	}
	return nil
}

type StakingAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party   string              `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Balance string              `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Events  []*v12.StakeLinking `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *StakingAccount) Reset() {
	*x = StakingAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingAccount) ProtoMessage() {}

func (x *StakingAccount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingAccount.ProtoReflect.Descriptor instead.
func (*StakingAccount) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{48}
}

func (x *StakingAccount) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *StakingAccount) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *StakingAccount) GetEvents() []*v12.StakeLinking {
	if x != nil {
		return x.Events
	}
	return nil
}

type StakingAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts                []*StakingAccount      `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	StakingAssetTotalSupply string                 `protobuf:"bytes,2,opt,name=staking_asset_total_supply,json=stakingAssetTotalSupply,proto3" json:"staking_asset_total_supply,omitempty"`
	PendingStakeTotalSupply *vega.StakeTotalSupply `protobuf:"bytes,3,opt,name=pending_stake_total_supply,json=pendingStakeTotalSupply,proto3" json:"pending_stake_total_supply,omitempty"`
}

func (x *StakingAccounts) Reset() {
	*x = StakingAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingAccounts) ProtoMessage() {}

func (x *StakingAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingAccounts.ProtoReflect.Descriptor instead.
func (*StakingAccounts) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{49}
}

func (x *StakingAccounts) GetAccounts() []*StakingAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *StakingAccounts) GetStakingAssetTotalSupply() string {
	if x != nil {
		return x.StakingAssetTotalSupply
	}
	return ""
}

func (x *StakingAccounts) GetPendingStakeTotalSupply() *vega.StakeTotalSupply {
	if x != nil {
		return x.PendingStakeTotalSupply
	}
	return nil
}

type MatchingBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId        string        `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Buy             []*vega.Order `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	Sell            []*vega.Order `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	LastTradedPrice string        `protobuf:"bytes,4,opt,name=last_traded_price,json=lastTradedPrice,proto3" json:"last_traded_price,omitempty"`
	Auction         bool          `protobuf:"varint,5,opt,name=auction,proto3" json:"auction,omitempty"`
	BatchId         uint64        `protobuf:"varint,6,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	PeggedOrderIds  []string      `protobuf:"bytes,7,rep,name=pegged_order_ids,json=peggedOrderIds,proto3" json:"pegged_order_ids,omitempty"`
}

func (x *MatchingBook) Reset() {
	*x = MatchingBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingBook) ProtoMessage() {}

func (x *MatchingBook) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingBook.ProtoReflect.Descriptor instead.
func (*MatchingBook) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{50}
}

func (x *MatchingBook) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MatchingBook) GetBuy() []*vega.Order {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *MatchingBook) GetSell() []*vega.Order {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *MatchingBook) GetLastTradedPrice() string {
	if x != nil {
		return x.LastTradedPrice
	}
	return ""
}

func (x *MatchingBook) GetAuction() bool {
	if x != nil {
		return x.Auction
	}
	return false
}

func (x *MatchingBook) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *MatchingBook) GetPeggedOrderIds() []string {
	if x != nil {
		return x.PeggedOrderIds
	}
	return nil
}

type NetParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*vega.NetworkParameter `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *NetParams) Reset() {
	*x = NetParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetParams) ProtoMessage() {}

func (x *NetParams) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetParams.ProtoReflect.Descriptor instead.
func (*NetParams) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{51}
}

func (x *NetParams) GetParams() []*vega.NetworkParameter {
	if x != nil {
		return x.Params
	}
	return nil
}

type DecimalMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key int64  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *DecimalMap) Reset() {
	*x = DecimalMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecimalMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalMap) ProtoMessage() {}

func (x *DecimalMap) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalMap.ProtoReflect.Descriptor instead.
func (*DecimalMap) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{52}
}

func (x *DecimalMap) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *DecimalMap) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type TimePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *TimePrice) Reset() {
	*x = TimePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimePrice) ProtoMessage() {}

func (x *TimePrice) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimePrice.ProtoReflect.Descriptor instead.
func (*TimePrice) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{53}
}

func (x *TimePrice) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TimePrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type PriceVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price  string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume uint64 `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *PriceVolume) Reset() {
	*x = PriceVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceVolume) ProtoMessage() {}

func (x *PriceVolume) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceVolume.ProtoReflect.Descriptor instead.
func (*PriceVolume) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{54}
}

func (x *PriceVolume) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PriceVolume) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type PriceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min string `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max string `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *PriceRange) Reset() {
	*x = PriceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRange) ProtoMessage() {}

func (x *PriceRange) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRange.ProtoReflect.Descriptor instead.
func (*PriceRange) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{55}
}

func (x *PriceRange) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *PriceRange) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *PriceRange) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type PriceBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active     bool                         `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	UpFactor   string                       `protobuf:"bytes,2,opt,name=up_factor,json=upFactor,proto3" json:"up_factor,omitempty"`
	DownFactor string                       `protobuf:"bytes,3,opt,name=down_factor,json=downFactor,proto3" json:"down_factor,omitempty"`
	Trigger    *vega.PriceMonitoringTrigger `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *PriceBound) Reset() {
	*x = PriceBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceBound) ProtoMessage() {}

func (x *PriceBound) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceBound.ProtoReflect.Descriptor instead.
func (*PriceBound) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{56}
}

func (x *PriceBound) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *PriceBound) GetUpFactor() string {
	if x != nil {
		return x.UpFactor
	}
	return ""
}

func (x *PriceBound) GetDownFactor() string {
	if x != nil {
		return x.DownFactor
	}
	return ""
}

func (x *PriceBound) GetTrigger() *vega.PriceMonitoringTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type PriceRangeCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bound *PriceBound `protobuf:"bytes,1,opt,name=bound,proto3" json:"bound,omitempty"`
	Range *PriceRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *PriceRangeCache) Reset() {
	*x = PriceRangeCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceRangeCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRangeCache) ProtoMessage() {}

func (x *PriceRangeCache) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRangeCache.ProtoReflect.Descriptor instead.
func (*PriceRangeCache) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{57}
}

func (x *PriceRangeCache) GetBound() *PriceBound {
	if x != nil {
		return x.Bound
	}
	return nil
}

func (x *PriceRangeCache) GetRange() *PriceRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type CurrentPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price  string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume uint64 `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *CurrentPrice) Reset() {
	*x = CurrentPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentPrice) ProtoMessage() {}

func (x *CurrentPrice) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentPrice.ProtoReflect.Descriptor instead.
func (*CurrentPrice) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{58}
}

func (x *CurrentPrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CurrentPrice) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type PastPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	VolumeWeightedPrice string `protobuf:"bytes,2,opt,name=volume_weighted_price,json=volumeWeightedPrice,proto3" json:"volume_weighted_price,omitempty"`
}

func (x *PastPrice) Reset() {
	*x = PastPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PastPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PastPrice) ProtoMessage() {}

func (x *PastPrice) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PastPrice.ProtoReflect.Descriptor instead.
func (*PastPrice) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{59}
}

func (x *PastPrice) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PastPrice) GetVolumeWeightedPrice() string {
	if x != nil {
		return x.VolumeWeightedPrice
	}
	return ""
}

type PriceMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initialised         bool               `protobuf:"varint,3,opt,name=initialised,proto3" json:"initialised,omitempty"`
	FpHorizons          []*DecimalMap      `protobuf:"bytes,4,rep,name=fp_horizons,json=fpHorizons,proto3" json:"fp_horizons,omitempty"`
	Now                 int64              `protobuf:"varint,5,opt,name=now,proto3" json:"now,omitempty"`
	Update              int64              `protobuf:"varint,6,opt,name=update,proto3" json:"update,omitempty"`
	Bounds              []*PriceBound      `protobuf:"bytes,7,rep,name=bounds,proto3" json:"bounds,omitempty"`
	PriceRangeCacheTime int64              `protobuf:"varint,8,opt,name=price_range_cache_time,json=priceRangeCacheTime,proto3" json:"price_range_cache_time,omitempty"`
	PriceRangeCache     []*PriceRangeCache `protobuf:"bytes,9,rep,name=price_range_cache,json=priceRangeCache,proto3" json:"price_range_cache,omitempty"`
	RefPriceCacheTime   int64              `protobuf:"varint,10,opt,name=ref_price_cache_time,json=refPriceCacheTime,proto3" json:"ref_price_cache_time,omitempty"`
	RefPriceCache       []*DecimalMap      `protobuf:"bytes,11,rep,name=ref_price_cache,json=refPriceCache,proto3" json:"ref_price_cache,omitempty"`
	PricesNow           []*CurrentPrice    `protobuf:"bytes,12,rep,name=prices_now,json=pricesNow,proto3" json:"prices_now,omitempty"`
	PricesPast          []*PastPrice       `protobuf:"bytes,13,rep,name=prices_past,json=pricesPast,proto3" json:"prices_past,omitempty"`
	ConsensusReached    bool               `protobuf:"varint,14,opt,name=consensus_reached,json=consensusReached,proto3" json:"consensus_reached,omitempty"`
}

func (x *PriceMonitor) Reset() {
	*x = PriceMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitor) ProtoMessage() {}

func (x *PriceMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitor.ProtoReflect.Descriptor instead.
func (*PriceMonitor) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{60}
}

func (x *PriceMonitor) GetInitialised() bool {
	if x != nil {
		return x.Initialised
	}
	return false
}

func (x *PriceMonitor) GetFpHorizons() []*DecimalMap {
	if x != nil {
		return x.FpHorizons
	}
	return nil
}

func (x *PriceMonitor) GetNow() int64 {
	if x != nil {
		return x.Now
	}
	return 0
}

func (x *PriceMonitor) GetUpdate() int64 {
	if x != nil {
		return x.Update
	}
	return 0
}

func (x *PriceMonitor) GetBounds() []*PriceBound {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *PriceMonitor) GetPriceRangeCacheTime() int64 {
	if x != nil {
		return x.PriceRangeCacheTime
	}
	return 0
}

func (x *PriceMonitor) GetPriceRangeCache() []*PriceRangeCache {
	if x != nil {
		return x.PriceRangeCache
	}
	return nil
}

func (x *PriceMonitor) GetRefPriceCacheTime() int64 {
	if x != nil {
		return x.RefPriceCacheTime
	}
	return 0
}

func (x *PriceMonitor) GetRefPriceCache() []*DecimalMap {
	if x != nil {
		return x.RefPriceCache
	}
	return nil
}

func (x *PriceMonitor) GetPricesNow() []*CurrentPrice {
	if x != nil {
		return x.PricesNow
	}
	return nil
}

func (x *PriceMonitor) GetPricesPast() []*PastPrice {
	if x != nil {
		return x.PricesPast
	}
	return nil
}

func (x *PriceMonitor) GetConsensusReached() bool {
	if x != nil {
		return x.ConsensusReached
	}
	return false
}

type AuctionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode               vega.Market_TradingMode `protobuf:"varint,1,opt,name=mode,proto3,enum=vega.Market_TradingMode" json:"mode,omitempty"`
	DefaultMode        vega.Market_TradingMode `protobuf:"varint,2,opt,name=default_mode,json=defaultMode,proto3,enum=vega.Market_TradingMode" json:"default_mode,omitempty"`
	Trigger            vega.AuctionTrigger     `protobuf:"varint,3,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
	Begin              int64                   `protobuf:"varint,4,opt,name=begin,proto3" json:"begin,omitempty"`
	End                *vega.AuctionDuration   `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	Start              bool                    `protobuf:"varint,6,opt,name=start,proto3" json:"start,omitempty"`
	Stop               bool                    `protobuf:"varint,7,opt,name=stop,proto3" json:"stop,omitempty"`
	Extension          vega.AuctionTrigger     `protobuf:"varint,8,opt,name=extension,proto3,enum=vega.AuctionTrigger" json:"extension,omitempty"`
	ExtensionEventSent bool                    `protobuf:"varint,9,opt,name=extension_event_sent,json=extensionEventSent,proto3" json:"extension_event_sent,omitempty"`
}

func (x *AuctionState) Reset() {
	*x = AuctionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionState) ProtoMessage() {}

func (x *AuctionState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionState.ProtoReflect.Descriptor instead.
func (*AuctionState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{61}
}

func (x *AuctionState) GetMode() vega.Market_TradingMode {
	if x != nil {
		return x.Mode
	}
	return vega.Market_TradingMode(0)
}

func (x *AuctionState) GetDefaultMode() vega.Market_TradingMode {
	if x != nil {
		return x.DefaultMode
	}
	return vega.Market_TradingMode(0)
}

func (x *AuctionState) GetTrigger() vega.AuctionTrigger {
	if x != nil {
		return x.Trigger
	}
	return vega.AuctionTrigger(0)
}

func (x *AuctionState) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *AuctionState) GetEnd() *vega.AuctionDuration {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *AuctionState) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

func (x *AuctionState) GetStop() bool {
	if x != nil {
		return x.Stop
	}
	return false
}

func (x *AuctionState) GetExtension() vega.AuctionTrigger {
	if x != nil {
		return x.Extension
	}
	return vega.AuctionTrigger(0)
}

func (x *AuctionState) GetExtensionEventSent() bool {
	if x != nil {
		return x.ExtensionEventSent
	}
	return false
}

type EquityShareLP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Stake  string `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	Share  string `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	Avg    string `protobuf:"bytes,4,opt,name=avg,proto3" json:"avg,omitempty"`
	Vshare string `protobuf:"bytes,5,opt,name=vshare,proto3" json:"vshare,omitempty"`
}

func (x *EquityShareLP) Reset() {
	*x = EquityShareLP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquityShareLP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquityShareLP) ProtoMessage() {}

func (x *EquityShareLP) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquityShareLP.ProtoReflect.Descriptor instead.
func (*EquityShareLP) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{62}
}

func (x *EquityShareLP) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EquityShareLP) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

func (x *EquityShareLP) GetShare() string {
	if x != nil {
		return x.Share
	}
	return ""
}

func (x *EquityShareLP) GetAvg() string {
	if x != nil {
		return x.Avg
	}
	return ""
}

func (x *EquityShareLP) GetVshare() string {
	if x != nil {
		return x.Vshare
	}
	return ""
}

type EquityShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mvp                 string           `protobuf:"bytes,1,opt,name=mvp,proto3" json:"mvp,omitempty"`
	OpeningAuctionEnded bool             `protobuf:"varint,2,opt,name=opening_auction_ended,json=openingAuctionEnded,proto3" json:"opening_auction_ended,omitempty"`
	Lps                 []*EquityShareLP `protobuf:"bytes,3,rep,name=lps,proto3" json:"lps,omitempty"`
	R                   string           `protobuf:"bytes,4,opt,name=r,proto3" json:"r,omitempty"`
	PMvp                string           `protobuf:"bytes,5,opt,name=p_mvp,json=pMvp,proto3" json:"p_mvp,omitempty"`
}

func (x *EquityShare) Reset() {
	*x = EquityShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquityShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquityShare) ProtoMessage() {}

func (x *EquityShare) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquityShare.ProtoReflect.Descriptor instead.
func (*EquityShare) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{63}
}

func (x *EquityShare) GetMvp() string {
	if x != nil {
		return x.Mvp
	}
	return ""
}

func (x *EquityShare) GetOpeningAuctionEnded() bool {
	if x != nil {
		return x.OpeningAuctionEnded
	}
	return false
}

func (x *EquityShare) GetLps() []*EquityShareLP {
	if x != nil {
		return x.Lps
	}
	return nil
}

func (x *EquityShare) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *EquityShare) GetPMvp() string {
	if x != nil {
		return x.PMvp
	}
	return ""
}

type FeeSplitter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeWindowStart int64  `protobuf:"varint,1,opt,name=time_window_start,json=timeWindowStart,proto3" json:"time_window_start,omitempty"`
	TradeValue      string `protobuf:"bytes,2,opt,name=trade_value,json=tradeValue,proto3" json:"trade_value,omitempty"`
	Avg             string `protobuf:"bytes,3,opt,name=avg,proto3" json:"avg,omitempty"`
	Window          uint64 `protobuf:"varint,4,opt,name=window,proto3" json:"window,omitempty"`
}

func (x *FeeSplitter) Reset() {
	*x = FeeSplitter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeSplitter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeSplitter) ProtoMessage() {}

func (x *FeeSplitter) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeSplitter.ProtoReflect.Descriptor instead.
func (*FeeSplitter) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{64}
}

func (x *FeeSplitter) GetTimeWindowStart() int64 {
	if x != nil {
		return x.TimeWindowStart
	}
	return 0
}

func (x *FeeSplitter) GetTradeValue() string {
	if x != nil {
		return x.TradeValue
	}
	return ""
}

func (x *FeeSplitter) GetAvg() string {
	if x != nil {
		return x.Avg
	}
	return ""
}

func (x *FeeSplitter) GetWindow() uint64 {
	if x != nil {
		return x.Window
	}
	return 0
}

type SpotMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market                     *vega.Market   `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	PriceMonitor               *PriceMonitor  `protobuf:"bytes,2,opt,name=price_monitor,json=priceMonitor,proto3" json:"price_monitor,omitempty"`
	AuctionState               *AuctionState  `protobuf:"bytes,3,opt,name=auction_state,json=auctionState,proto3" json:"auction_state,omitempty"`
	PeggedOrders               *PeggedOrders  `protobuf:"bytes,4,opt,name=pegged_orders,json=peggedOrders,proto3" json:"pegged_orders,omitempty"`
	ExpiringOrders             []*vega.Order  `protobuf:"bytes,5,rep,name=expiring_orders,json=expiringOrders,proto3" json:"expiring_orders,omitempty"`
	LastBestBid                string         `protobuf:"bytes,6,opt,name=last_best_bid,json=lastBestBid,proto3" json:"last_best_bid,omitempty"`
	LastBestAsk                string         `protobuf:"bytes,7,opt,name=last_best_ask,json=lastBestAsk,proto3" json:"last_best_ask,omitempty"`
	LastMidBid                 string         `protobuf:"bytes,8,opt,name=last_mid_bid,json=lastMidBid,proto3" json:"last_mid_bid,omitempty"`
	LastMidAsk                 string         `protobuf:"bytes,9,opt,name=last_mid_ask,json=lastMidAsk,proto3" json:"last_mid_ask,omitempty"`
	LastMarketValueProxy       string         `protobuf:"bytes,10,opt,name=last_market_value_proxy,json=lastMarketValueProxy,proto3" json:"last_market_value_proxy,omitempty"`
	LastEquityShareDistributed int64          `protobuf:"varint,11,opt,name=last_equity_share_distributed,json=lastEquityShareDistributed,proto3" json:"last_equity_share_distributed,omitempty"`
	EquityShare                *EquityShare   `protobuf:"bytes,12,opt,name=equity_share,json=equityShare,proto3" json:"equity_share,omitempty"`
	CurrentMarkPrice           string         `protobuf:"bytes,13,opt,name=current_mark_price,json=currentMarkPrice,proto3" json:"current_mark_price,omitempty"`
	FeeSplitter                *FeeSplitter   `protobuf:"bytes,14,opt,name=fee_splitter,json=feeSplitter,proto3" json:"fee_splitter,omitempty"`
	NextMarkToMarket           int64          `protobuf:"varint,15,opt,name=next_mark_to_market,json=nextMarkToMarket,proto3" json:"next_mark_to_market,omitempty"`
	LastTradedPrice            string         `protobuf:"bytes,16,opt,name=last_traded_price,json=lastTradedPrice,proto3" json:"last_traded_price,omitempty"`
	Parties                    []string       `protobuf:"bytes,17,rep,name=parties,proto3" json:"parties,omitempty"`
	Closed                     bool           `protobuf:"varint,18,opt,name=closed,proto3" json:"closed,omitempty"`
	StopOrders                 *StopOrders    `protobuf:"bytes,19,opt,name=stop_orders,json=stopOrders,proto3" json:"stop_orders,omitempty"`
	ExpiringStopOrders         []*vega.Order  `protobuf:"bytes,20,rep,name=expiring_stop_orders,json=expiringStopOrders,proto3" json:"expiring_stop_orders,omitempty"`
	FeesStats                  *v12.FeesStats `protobuf:"bytes,21,opt,name=fees_stats,json=feesStats,proto3" json:"fees_stats,omitempty"`
}

func (x *SpotMarket) Reset() {
	*x = SpotMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotMarket) ProtoMessage() {}

func (x *SpotMarket) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotMarket.ProtoReflect.Descriptor instead.
func (*SpotMarket) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{65}
}

func (x *SpotMarket) GetMarket() *vega.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *SpotMarket) GetPriceMonitor() *PriceMonitor {
	if x != nil {
		return x.PriceMonitor
	}
	return nil
}

func (x *SpotMarket) GetAuctionState() *AuctionState {
	if x != nil {
		return x.AuctionState
	}
	return nil
}

func (x *SpotMarket) GetPeggedOrders() *PeggedOrders {
	if x != nil {
		return x.PeggedOrders
	}
	return nil
}

func (x *SpotMarket) GetExpiringOrders() []*vega.Order {
	if x != nil {
		return x.ExpiringOrders
	}
	return nil
}

func (x *SpotMarket) GetLastBestBid() string {
	if x != nil {
		return x.LastBestBid
	}
	return ""
}

func (x *SpotMarket) GetLastBestAsk() string {
	if x != nil {
		return x.LastBestAsk
	}
	return ""
}

func (x *SpotMarket) GetLastMidBid() string {
	if x != nil {
		return x.LastMidBid
	}
	return ""
}

func (x *SpotMarket) GetLastMidAsk() string {
	if x != nil {
		return x.LastMidAsk
	}
	return ""
}

func (x *SpotMarket) GetLastMarketValueProxy() string {
	if x != nil {
		return x.LastMarketValueProxy
	}
	return ""
}

func (x *SpotMarket) GetLastEquityShareDistributed() int64 {
	if x != nil {
		return x.LastEquityShareDistributed
	}
	return 0
}

func (x *SpotMarket) GetEquityShare() *EquityShare {
	if x != nil {
		return x.EquityShare
	}
	return nil
}

func (x *SpotMarket) GetCurrentMarkPrice() string {
	if x != nil {
		return x.CurrentMarkPrice
	}
	return ""
}

func (x *SpotMarket) GetFeeSplitter() *FeeSplitter {
	if x != nil {
		return x.FeeSplitter
	}
	return nil
}

func (x *SpotMarket) GetNextMarkToMarket() int64 {
	if x != nil {
		return x.NextMarkToMarket
	}
	return 0
}

func (x *SpotMarket) GetLastTradedPrice() string {
	if x != nil {
		return x.LastTradedPrice
	}
	return ""
}

func (x *SpotMarket) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *SpotMarket) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *SpotMarket) GetStopOrders() *StopOrders {
	if x != nil {
		return x.StopOrders
	}
	return nil
}

func (x *SpotMarket) GetExpiringStopOrders() []*vega.Order {
	if x != nil {
		return x.ExpiringStopOrders
	}
	return nil
}

func (x *SpotMarket) GetFeesStats() *v12.FeesStats {
	if x != nil {
		return x.FeesStats
	}
	return nil
}

type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market                           *vega.Market              `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	PriceMonitor                     *PriceMonitor             `protobuf:"bytes,2,opt,name=price_monitor,json=priceMonitor,proto3" json:"price_monitor,omitempty"`
	AuctionState                     *AuctionState             `protobuf:"bytes,3,opt,name=auction_state,json=auctionState,proto3" json:"auction_state,omitempty"`
	PeggedOrders                     *PeggedOrders             `protobuf:"bytes,4,opt,name=pegged_orders,json=peggedOrders,proto3" json:"pegged_orders,omitempty"`
	ExpiringOrders                   []*vega.Order             `protobuf:"bytes,5,rep,name=expiring_orders,json=expiringOrders,proto3" json:"expiring_orders,omitempty"`
	LastBestBid                      string                    `protobuf:"bytes,6,opt,name=last_best_bid,json=lastBestBid,proto3" json:"last_best_bid,omitempty"`
	LastBestAsk                      string                    `protobuf:"bytes,7,opt,name=last_best_ask,json=lastBestAsk,proto3" json:"last_best_ask,omitempty"`
	LastMidBid                       string                    `protobuf:"bytes,8,opt,name=last_mid_bid,json=lastMidBid,proto3" json:"last_mid_bid,omitempty"`
	LastMidAsk                       string                    `protobuf:"bytes,9,opt,name=last_mid_ask,json=lastMidAsk,proto3" json:"last_mid_ask,omitempty"`
	LastMarketValueProxy             string                    `protobuf:"bytes,10,opt,name=last_market_value_proxy,json=lastMarketValueProxy,proto3" json:"last_market_value_proxy,omitempty"`
	LastEquityShareDistributed       int64                     `protobuf:"varint,11,opt,name=last_equity_share_distributed,json=lastEquityShareDistributed,proto3" json:"last_equity_share_distributed,omitempty"`
	EquityShare                      *EquityShare              `protobuf:"bytes,12,opt,name=equity_share,json=equityShare,proto3" json:"equity_share,omitempty"`
	CurrentMarkPrice                 string                    `protobuf:"bytes,13,opt,name=current_mark_price,json=currentMarkPrice,proto3" json:"current_mark_price,omitempty"`
	RiskFactorShort                  string                    `protobuf:"bytes,14,opt,name=risk_factor_short,json=riskFactorShort,proto3" json:"risk_factor_short,omitempty"`
	RiskFactorLong                   string                    `protobuf:"bytes,15,opt,name=risk_factor_long,json=riskFactorLong,proto3" json:"risk_factor_long,omitempty"`
	RiskFactorConsensusReached       bool                      `protobuf:"varint,16,opt,name=risk_factor_consensus_reached,json=riskFactorConsensusReached,proto3" json:"risk_factor_consensus_reached,omitempty"`
	FeeSplitter                      *FeeSplitter              `protobuf:"bytes,17,opt,name=fee_splitter,json=feeSplitter,proto3" json:"fee_splitter,omitempty"`
	SettlementData                   string                    `protobuf:"bytes,18,opt,name=settlement_data,json=settlementData,proto3" json:"settlement_data,omitempty"`
	NextMarkToMarket                 int64                     `protobuf:"varint,19,opt,name=next_mark_to_market,json=nextMarkToMarket,proto3" json:"next_mark_to_market,omitempty"`
	LastTradedPrice                  string                    `protobuf:"bytes,20,opt,name=last_traded_price,json=lastTradedPrice,proto3" json:"last_traded_price,omitempty"`
	Parties                          []string                  `protobuf:"bytes,21,rep,name=parties,proto3" json:"parties,omitempty"`
	Closed                           bool                      `protobuf:"varint,22,opt,name=closed,proto3" json:"closed,omitempty"`
	Succeeded                        bool                      `protobuf:"varint,23,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	StopOrders                       *StopOrders               `protobuf:"bytes,24,opt,name=stop_orders,json=stopOrders,proto3" json:"stop_orders,omitempty"`
	ExpiringStopOrders               []*vega.Order             `protobuf:"bytes,25,rep,name=expiring_stop_orders,json=expiringStopOrders,proto3" json:"expiring_stop_orders,omitempty"`
	Product                          *Product                  `protobuf:"bytes,26,opt,name=product,proto3" json:"product,omitempty"`
	FeesStats                        *v12.FeesStats            `protobuf:"bytes,27,opt,name=fees_stats,json=feesStats,proto3" json:"fees_stats,omitempty"`
	PartyMarginFactor                []*PartyMarginFactor      `protobuf:"bytes,28,rep,name=party_margin_factor,json=partyMarginFactor,proto3" json:"party_margin_factor,omitempty"`
	MarkPriceCalculator              *CompositePriceCalculator `protobuf:"bytes,29,opt,name=mark_price_calculator,json=markPriceCalculator,proto3" json:"mark_price_calculator,omitempty"`
	InternalCompositePriceCalculator *CompositePriceCalculator `protobuf:"bytes,30,opt,name=internal_composite_price_calculator,json=internalCompositePriceCalculator,proto3,oneof" json:"internal_composite_price_calculator,omitempty"`
	NextInternalCompositePriceCalc   int64                     `protobuf:"varint,31,opt,name=next_internal_composite_price_calc,json=nextInternalCompositePriceCalc,proto3" json:"next_internal_composite_price_calc,omitempty"`
	Amm                              *AmmState                 `protobuf:"bytes,32,opt,name=amm,proto3" json:"amm,omitempty"`
	MarketLiquidity                  *MarketLiquidity          `protobuf:"bytes,33,opt,name=market_liquidity,json=marketLiquidity,proto3" json:"market_liquidity,omitempty"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{66}
}

func (x *Market) GetMarket() *vega.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *Market) GetPriceMonitor() *PriceMonitor {
	if x != nil {
		return x.PriceMonitor
	}
	return nil
}

func (x *Market) GetAuctionState() *AuctionState {
	if x != nil {
		return x.AuctionState
	}
	return nil
}

func (x *Market) GetPeggedOrders() *PeggedOrders {
	if x != nil {
		return x.PeggedOrders
	}
	return nil
}

func (x *Market) GetExpiringOrders() []*vega.Order {
	if x != nil {
		return x.ExpiringOrders
	}
	return nil
}

func (x *Market) GetLastBestBid() string {
	if x != nil {
		return x.LastBestBid
	}
	return ""
}

func (x *Market) GetLastBestAsk() string {
	if x != nil {
		return x.LastBestAsk
	}
	return ""
}

func (x *Market) GetLastMidBid() string {
	if x != nil {
		return x.LastMidBid
	}
	return ""
}

func (x *Market) GetLastMidAsk() string {
	if x != nil {
		return x.LastMidAsk
	}
	return ""
}

func (x *Market) GetLastMarketValueProxy() string {
	if x != nil {
		return x.LastMarketValueProxy
	}
	return ""
}

func (x *Market) GetLastEquityShareDistributed() int64 {
	if x != nil {
		return x.LastEquityShareDistributed
	}
	return 0
}

func (x *Market) GetEquityShare() *EquityShare {
	if x != nil {
		return x.EquityShare
	}
	return nil
}

func (x *Market) GetCurrentMarkPrice() string {
	if x != nil {
		return x.CurrentMarkPrice
	}
	return ""
}

func (x *Market) GetRiskFactorShort() string {
	if x != nil {
		return x.RiskFactorShort
	}
	return ""
}

func (x *Market) GetRiskFactorLong() string {
	if x != nil {
		return x.RiskFactorLong
	}
	return ""
}

func (x *Market) GetRiskFactorConsensusReached() bool {
	if x != nil {
		return x.RiskFactorConsensusReached
	}
	return false
}

func (x *Market) GetFeeSplitter() *FeeSplitter {
	if x != nil {
		return x.FeeSplitter
	}
	return nil
}

func (x *Market) GetSettlementData() string {
	if x != nil {
		return x.SettlementData
	}
	return ""
}

func (x *Market) GetNextMarkToMarket() int64 {
	if x != nil {
		return x.NextMarkToMarket
	}
	return 0
}

func (x *Market) GetLastTradedPrice() string {
	if x != nil {
		return x.LastTradedPrice
	}
	return ""
}

func (x *Market) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *Market) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Market) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *Market) GetStopOrders() *StopOrders {
	if x != nil {
		return x.StopOrders
	}
	return nil
}

func (x *Market) GetExpiringStopOrders() []*vega.Order {
	if x != nil {
		return x.ExpiringStopOrders
	}
	return nil
}

func (x *Market) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Market) GetFeesStats() *v12.FeesStats {
	if x != nil {
		return x.FeesStats
	}
	return nil
}

func (x *Market) GetPartyMarginFactor() []*PartyMarginFactor {
	if x != nil {
		return x.PartyMarginFactor
	}
	return nil
}

func (x *Market) GetMarkPriceCalculator() *CompositePriceCalculator {
	if x != nil {
		return x.MarkPriceCalculator
	}
	return nil
}

func (x *Market) GetInternalCompositePriceCalculator() *CompositePriceCalculator {
	if x != nil {
		return x.InternalCompositePriceCalculator
	}
	return nil
}

func (x *Market) GetNextInternalCompositePriceCalc() int64 {
	if x != nil {
		return x.NextInternalCompositePriceCalc
	}
	return 0
}

func (x *Market) GetAmm() *AmmState {
	if x != nil {
		return x.Amm
	}
	return nil
}

func (x *Market) GetMarketLiquidity() *MarketLiquidity {
	if x != nil {
		return x.MarketLiquidity
	}
	return nil
}

type PartyMarginFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party        string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	MarginFactor string `protobuf:"bytes,2,opt,name=margin_factor,json=marginFactor,proto3" json:"margin_factor,omitempty"`
}

func (x *PartyMarginFactor) Reset() {
	*x = PartyMarginFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyMarginFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyMarginFactor) ProtoMessage() {}

func (x *PartyMarginFactor) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyMarginFactor.ProtoReflect.Descriptor instead.
func (*PartyMarginFactor) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{67}
}

func (x *PartyMarginFactor) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyMarginFactor) GetMarginFactor() string {
	if x != nil {
		return x.MarginFactor
	}
	return ""
}

type AmmState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sqrter      []*StringMapEntry `protobuf:"bytes,1,rep,name=sqrter,proto3" json:"sqrter,omitempty"`
	SubAccounts []*StringMapEntry `protobuf:"bytes,2,rep,name=sub_accounts,json=subAccounts,proto3" json:"sub_accounts,omitempty"`
	Pools       []*PoolMapEntry   `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *AmmState) Reset() {
	*x = AmmState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmmState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmmState) ProtoMessage() {}

func (x *AmmState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmmState.ProtoReflect.Descriptor instead.
func (*AmmState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{68}
}

func (x *AmmState) GetSqrter() []*StringMapEntry {
	if x != nil {
		return x.Sqrter
	}
	return nil
}

func (x *AmmState) GetSubAccounts() []*StringMapEntry {
	if x != nil {
		return x.SubAccounts
	}
	return nil
}

func (x *AmmState) GetPools() []*PoolMapEntry {
	if x != nil {
		return x.Pools
	}
	return nil
}

type PoolMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party string             `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Pool  *PoolMapEntry_Pool `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *PoolMapEntry) Reset() {
	*x = PoolMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMapEntry) ProtoMessage() {}

func (x *PoolMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolMapEntry.ProtoReflect.Descriptor instead.
func (*PoolMapEntry) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{69}
}

func (x *PoolMapEntry) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PoolMapEntry) GetPool() *PoolMapEntry_Pool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type StringMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringMapEntry) Reset() {
	*x = StringMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMapEntry) ProtoMessage() {}

func (x *StringMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMapEntry.ProtoReflect.Descriptor instead.
func (*StringMapEntry) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{70}
}

func (x *StringMapEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StringMapEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// eventually support multiple products
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Product_Perps
	Type isProduct_Type `protobuf_oneof:"type"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{71}
}

func (m *Product) GetType() isProduct_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Product) GetPerps() *Perps {
	if x, ok := x.GetType().(*Product_Perps); ok {
		return x.Perps
	}
	return nil
}

type isProduct_Type interface {
	isProduct_Type()
}

type Product_Perps struct {
	Perps *Perps `protobuf:"bytes,1,opt,name=perps,proto3,oneof"`
}

func (*Product_Perps) isProduct_Type() {}

type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{72}
}

func (x *DataPoint) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *DataPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type AuctionIntervals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T            []int64 `protobuf:"varint,1,rep,packed,name=t,proto3" json:"t,omitempty"`
	AuctionStart int64   `protobuf:"varint,2,opt,name=auction_start,json=auctionStart,proto3" json:"auction_start,omitempty"`
	Total        int64   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *AuctionIntervals) Reset() {
	*x = AuctionIntervals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionIntervals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionIntervals) ProtoMessage() {}

func (x *AuctionIntervals) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionIntervals.ProtoReflect.Descriptor instead.
func (*AuctionIntervals) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{73}
}

func (x *AuctionIntervals) GetT() []int64 {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *AuctionIntervals) GetAuctionStart() int64 {
	if x != nil {
		return x.AuctionStart
	}
	return 0
}

func (x *AuctionIntervals) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TWAPData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start      int64  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End        int64  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	SumProduct string `protobuf:"bytes,3,opt,name=sum_product,json=sumProduct,proto3" json:"sum_product,omitempty"`
}

func (x *TWAPData) Reset() {
	*x = TWAPData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TWAPData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TWAPData) ProtoMessage() {}

func (x *TWAPData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TWAPData.ProtoReflect.Descriptor instead.
func (*TWAPData) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{74}
}

func (x *TWAPData) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TWAPData) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *TWAPData) GetSumProduct() string {
	if x != nil {
		return x.SumProduct
	}
	return ""
}

type Perps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalDataPoint []*DataPoint      `protobuf:"bytes,2,rep,name=external_data_point,json=externalDataPoint,proto3" json:"external_data_point,omitempty"`
	InternalDataPoint []*DataPoint      `protobuf:"bytes,3,rep,name=internal_data_point,json=internalDataPoint,proto3" json:"internal_data_point,omitempty"`
	Seq               uint64            `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	StartedAt         int64             `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	ExternalTwapData  *TWAPData         `protobuf:"bytes,6,opt,name=external_twap_data,json=externalTwapData,proto3" json:"external_twap_data,omitempty"`
	InternalTwapData  *TWAPData         `protobuf:"bytes,7,opt,name=internal_twap_data,json=internalTwapData,proto3" json:"internal_twap_data,omitempty"`
	AuctionIntervals  *AuctionIntervals `protobuf:"bytes,8,opt,name=auction_intervals,json=auctionIntervals,proto3" json:"auction_intervals,omitempty"`
}

func (x *Perps) Reset() {
	*x = Perps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Perps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Perps) ProtoMessage() {}

func (x *Perps) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Perps.ProtoReflect.Descriptor instead.
func (*Perps) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{75}
}

func (x *Perps) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Perps) GetExternalDataPoint() []*DataPoint {
	if x != nil {
		return x.ExternalDataPoint
	}
	return nil
}

func (x *Perps) GetInternalDataPoint() []*DataPoint {
	if x != nil {
		return x.InternalDataPoint
	}
	return nil
}

func (x *Perps) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Perps) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *Perps) GetExternalTwapData() *TWAPData {
	if x != nil {
		return x.ExternalTwapData
	}
	return nil
}

func (x *Perps) GetInternalTwapData() *TWAPData {
	if x != nil {
		return x.InternalTwapData
	}
	return nil
}

func (x *Perps) GetAuctionIntervals() *AuctionIntervals {
	if x != nil {
		return x.AuctionIntervals
	}
	return nil
}

type OrdersAtPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price  string   `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Orders []string `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersAtPrice) Reset() {
	*x = OrdersAtPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersAtPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersAtPrice) ProtoMessage() {}

func (x *OrdersAtPrice) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersAtPrice.ProtoReflect.Descriptor instead.
func (*OrdersAtPrice) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{76}
}

func (x *OrdersAtPrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *OrdersAtPrice) GetOrders() []string {
	if x != nil {
		return x.Orders
	}
	return nil
}

type PricedStopOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FallsBellow []*OrdersAtPrice `protobuf:"bytes,1,rep,name=falls_bellow,json=fallsBellow,proto3" json:"falls_bellow,omitempty"`
	RisesAbove  []*OrdersAtPrice `protobuf:"bytes,2,rep,name=rises_above,json=risesAbove,proto3" json:"rises_above,omitempty"`
}

func (x *PricedStopOrders) Reset() {
	*x = PricedStopOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PricedStopOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PricedStopOrders) ProtoMessage() {}

func (x *PricedStopOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PricedStopOrders.ProtoReflect.Descriptor instead.
func (*PricedStopOrders) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{77}
}

func (x *PricedStopOrders) GetFallsBellow() []*OrdersAtPrice {
	if x != nil {
		return x.FallsBellow
	}
	return nil
}

func (x *PricedStopOrders) GetRisesAbove() []*OrdersAtPrice {
	if x != nil {
		return x.RisesAbove
	}
	return nil
}

type TrailingStopOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSeenPrice string            `protobuf:"bytes,1,opt,name=last_seen_price,json=lastSeenPrice,proto3" json:"last_seen_price,omitempty"`
	FallsBellow   []*OffsetsAtPrice `protobuf:"bytes,2,rep,name=falls_bellow,json=fallsBellow,proto3" json:"falls_bellow,omitempty"`
	RisesAbove    []*OffsetsAtPrice `protobuf:"bytes,3,rep,name=rises_above,json=risesAbove,proto3" json:"rises_above,omitempty"`
}

func (x *TrailingStopOrders) Reset() {
	*x = TrailingStopOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrailingStopOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrailingStopOrders) ProtoMessage() {}

func (x *TrailingStopOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrailingStopOrders.ProtoReflect.Descriptor instead.
func (*TrailingStopOrders) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{78}
}

func (x *TrailingStopOrders) GetLastSeenPrice() string {
	if x != nil {
		return x.LastSeenPrice
	}
	return ""
}

func (x *TrailingStopOrders) GetFallsBellow() []*OffsetsAtPrice {
	if x != nil {
		return x.FallsBellow
	}
	return nil
}

func (x *TrailingStopOrders) GetRisesAbove() []*OffsetsAtPrice {
	if x != nil {
		return x.RisesAbove
	}
	return nil
}

type OrdersAtOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset string   `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Orders []string `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersAtOffset) Reset() {
	*x = OrdersAtOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersAtOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersAtOffset) ProtoMessage() {}

func (x *OrdersAtOffset) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersAtOffset.ProtoReflect.Descriptor instead.
func (*OrdersAtOffset) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{79}
}

func (x *OrdersAtOffset) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *OrdersAtOffset) GetOrders() []string {
	if x != nil {
		return x.Orders
	}
	return nil
}

type OffsetsAtPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price   string            `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Offsets []*OrdersAtOffset `protobuf:"bytes,2,rep,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *OffsetsAtPrice) Reset() {
	*x = OffsetsAtPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetsAtPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetsAtPrice) ProtoMessage() {}

func (x *OffsetsAtPrice) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetsAtPrice.ProtoReflect.Descriptor instead.
func (*OffsetsAtPrice) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{80}
}

func (x *OffsetsAtPrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *OffsetsAtPrice) GetOffsets() []*OrdersAtOffset {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type StopOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopOrders         []*v12.StopOrderEvent `protobuf:"bytes,1,rep,name=stop_orders,json=stopOrders,proto3" json:"stop_orders,omitempty"`
	PricedStopOrders   *PricedStopOrders     `protobuf:"bytes,2,opt,name=priced_stop_orders,json=pricedStopOrders,proto3" json:"priced_stop_orders,omitempty"`
	TrailingStopOrders *TrailingStopOrders   `protobuf:"bytes,3,opt,name=trailing_stop_orders,json=trailingStopOrders,proto3" json:"trailing_stop_orders,omitempty"`
}

func (x *StopOrders) Reset() {
	*x = StopOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopOrders) ProtoMessage() {}

func (x *StopOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopOrders.ProtoReflect.Descriptor instead.
func (*StopOrders) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{81}
}

func (x *StopOrders) GetStopOrders() []*v12.StopOrderEvent {
	if x != nil {
		return x.StopOrders
	}
	return nil
}

func (x *StopOrders) GetPricedStopOrders() *PricedStopOrders {
	if x != nil {
		return x.PricedStopOrders
	}
	return nil
}

func (x *StopOrders) GetTrailingStopOrders() *TrailingStopOrders {
	if x != nil {
		return x.TrailingStopOrders
	}
	return nil
}

type PeggedOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParkedOrders []*vega.Order `protobuf:"bytes,2,rep,name=parked_orders,json=parkedOrders,proto3" json:"parked_orders,omitempty"`
}

func (x *PeggedOrders) Reset() {
	*x = PeggedOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeggedOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeggedOrders) ProtoMessage() {}

func (x *PeggedOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeggedOrders.ProtoReflect.Descriptor instead.
func (*PeggedOrders) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{82}
}

func (x *PeggedOrders) GetParkedOrders() []*vega.Order {
	if x != nil {
		return x.ParkedOrders
	}
	return nil
}

type SLANetworkParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BondPenaltyFactor               string `protobuf:"bytes,1,opt,name=bond_penalty_factor,json=bondPenaltyFactor,proto3" json:"bond_penalty_factor,omitempty"`
	EarlyExitPenalty                string `protobuf:"bytes,2,opt,name=early_exit_penalty,json=earlyExitPenalty,proto3" json:"early_exit_penalty,omitempty"`
	MaxLiquidityFee                 string `protobuf:"bytes,3,opt,name=max_liquidity_fee,json=maxLiquidityFee,proto3" json:"max_liquidity_fee,omitempty"`
	NonPerformanceBondPenaltyMax    string `protobuf:"bytes,4,opt,name=non_performance_bond_penalty_max,json=nonPerformanceBondPenaltyMax,proto3" json:"non_performance_bond_penalty_max,omitempty"`
	NonPerformanceBondPenaltySlope  string `protobuf:"bytes,5,opt,name=non_performance_bond_penalty_slope,json=nonPerformanceBondPenaltySlope,proto3" json:"non_performance_bond_penalty_slope,omitempty"`
	StakeToCcyVolume                string `protobuf:"bytes,6,opt,name=stake_to_ccy_volume,json=stakeToCcyVolume,proto3" json:"stake_to_ccy_volume,omitempty"`
	ProvidersFeeCalculationTimeStep int64  `protobuf:"varint,7,opt,name=providers_fee_calculation_time_step,json=providersFeeCalculationTimeStep,proto3" json:"providers_fee_calculation_time_step,omitempty"`
}

func (x *SLANetworkParams) Reset() {
	*x = SLANetworkParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLANetworkParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLANetworkParams) ProtoMessage() {}

func (x *SLANetworkParams) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLANetworkParams.ProtoReflect.Descriptor instead.
func (*SLANetworkParams) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{83}
}

func (x *SLANetworkParams) GetBondPenaltyFactor() string {
	if x != nil {
		return x.BondPenaltyFactor
	}
	return ""
}

func (x *SLANetworkParams) GetEarlyExitPenalty() string {
	if x != nil {
		return x.EarlyExitPenalty
	}
	return ""
}

func (x *SLANetworkParams) GetMaxLiquidityFee() string {
	if x != nil {
		return x.MaxLiquidityFee
	}
	return ""
}

func (x *SLANetworkParams) GetNonPerformanceBondPenaltyMax() string {
	if x != nil {
		return x.NonPerformanceBondPenaltyMax
	}
	return ""
}

func (x *SLANetworkParams) GetNonPerformanceBondPenaltySlope() string {
	if x != nil {
		return x.NonPerformanceBondPenaltySlope
	}
	return ""
}

func (x *SLANetworkParams) GetStakeToCcyVolume() string {
	if x != nil {
		return x.StakeToCcyVolume
	}
	return ""
}

func (x *SLANetworkParams) GetProvidersFeeCalculationTimeStep() int64 {
	if x != nil {
		return x.ProvidersFeeCalculationTimeStep
	}
	return 0
}

type ExecutionMarkets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markets          []*Market          `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
	SpotMarkets      []*SpotMarket      `protobuf:"bytes,2,rep,name=spot_markets,json=spotMarkets,proto3" json:"spot_markets,omitempty"`
	SettledMarkets   []*v11.MarketState `protobuf:"bytes,3,rep,name=settled_markets,json=settledMarkets,proto3" json:"settled_markets,omitempty"`
	Successors       []*Successors      `protobuf:"bytes,4,rep,name=successors,proto3" json:"successors,omitempty"`
	MarketIds        []string           `protobuf:"bytes,5,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
	SlaNetworkParams *SLANetworkParams  `protobuf:"bytes,6,opt,name=sla_network_params,json=slaNetworkParams,proto3" json:"sla_network_params,omitempty"`
}

func (x *ExecutionMarkets) Reset() {
	*x = ExecutionMarkets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionMarkets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionMarkets) ProtoMessage() {}

func (x *ExecutionMarkets) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionMarkets.ProtoReflect.Descriptor instead.
func (*ExecutionMarkets) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{84}
}

func (x *ExecutionMarkets) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *ExecutionMarkets) GetSpotMarkets() []*SpotMarket {
	if x != nil {
		return x.SpotMarkets
	}
	return nil
}

func (x *ExecutionMarkets) GetSettledMarkets() []*v11.MarketState {
	if x != nil {
		return x.SettledMarkets
	}
	return nil
}

func (x *ExecutionMarkets) GetSuccessors() []*Successors {
	if x != nil {
		return x.Successors
	}
	return nil
}

func (x *ExecutionMarkets) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

func (x *ExecutionMarkets) GetSlaNetworkParams() *SLANetworkParams {
	if x != nil {
		return x.SlaNetworkParams
	}
	return nil
}

type Successors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentMarket     string   `protobuf:"bytes,1,opt,name=parent_market,json=parentMarket,proto3" json:"parent_market,omitempty"`
	SuccessorMarkets []string `protobuf:"bytes,2,rep,name=successor_markets,json=successorMarkets,proto3" json:"successor_markets,omitempty"`
}

func (x *Successors) Reset() {
	*x = Successors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Successors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Successors) ProtoMessage() {}

func (x *Successors) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Successors.ProtoReflect.Descriptor instead.
func (*Successors) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{85}
}

func (x *Successors) GetParentMarket() string {
	if x != nil {
		return x.ParentMarket
	}
	return ""
}

func (x *Successors) GetSuccessorMarkets() []string {
	if x != nil {
		return x.SuccessorMarkets
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId           string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Size              int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Buy               int64  `protobuf:"varint,3,opt,name=buy,proto3" json:"buy,omitempty"`
	Sell              int64  `protobuf:"varint,4,opt,name=sell,proto3" json:"sell,omitempty"`
	Price             string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	BuySumProduct     string `protobuf:"bytes,6,opt,name=buy_sum_product,json=buySumProduct,proto3" json:"buy_sum_product,omitempty"`
	SellSumProduct    string `protobuf:"bytes,7,opt,name=sell_sum_product,json=sellSumProduct,proto3" json:"sell_sum_product,omitempty"`
	Distressed        bool   `protobuf:"varint,8,opt,name=distressed,proto3" json:"distressed,omitempty"`
	AverageEntryPrice []byte `protobuf:"bytes,9,opt,name=average_entry_price,json=averageEntryPrice,proto3" json:"average_entry_price,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{86}
}

func (x *Position) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Position) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Position) GetBuy() int64 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *Position) GetSell() int64 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *Position) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Position) GetBuySumProduct() string {
	if x != nil {
		return x.BuySumProduct
	}
	return ""
}

func (x *Position) GetSellSumProduct() string {
	if x != nil {
		return x.SellSumProduct
	}
	return ""
}

func (x *Position) GetDistressed() bool {
	if x != nil {
		return x.Distressed
	}
	return false
}

func (x *Position) GetAverageEntryPrice() []byte {
	if x != nil {
		return x.AverageEntryPrice
	}
	return nil
}

type MarketPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId       string                `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Positions      []*Position           `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
	PartiesRecords []*PartyPositionStats `protobuf:"bytes,3,rep,name=parties_records,json=partiesRecords,proto3" json:"parties_records,omitempty"`
}

func (x *MarketPositions) Reset() {
	*x = MarketPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPositions) ProtoMessage() {}

func (x *MarketPositions) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPositions.ProtoReflect.Descriptor instead.
func (*MarketPositions) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{87}
}

func (x *MarketPositions) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketPositions) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *MarketPositions) GetPartiesRecords() []*PartyPositionStats {
	if x != nil {
		return x.PartiesRecords
	}
	return nil
}

type PartyPositionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party              string  `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	LatestOpenInterest *uint64 `protobuf:"varint,2,opt,name=latest_open_interest,json=latestOpenInterest,proto3,oneof" json:"latest_open_interest,omitempty"`
	LowestOpenInterest *uint64 `protobuf:"varint,3,opt,name=lowest_open_interest,json=lowestOpenInterest,proto3,oneof" json:"lowest_open_interest,omitempty"`
	TradedVolume       *uint64 `protobuf:"varint,4,opt,name=traded_volume,json=tradedVolume,proto3,oneof" json:"traded_volume,omitempty"`
}

func (x *PartyPositionStats) Reset() {
	*x = PartyPositionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyPositionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyPositionStats) ProtoMessage() {}

func (x *PartyPositionStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyPositionStats.ProtoReflect.Descriptor instead.
func (*PartyPositionStats) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{88}
}

func (x *PartyPositionStats) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyPositionStats) GetLatestOpenInterest() uint64 {
	if x != nil && x.LatestOpenInterest != nil {
		return *x.LatestOpenInterest
	}
	return 0
}

func (x *PartyPositionStats) GetLowestOpenInterest() uint64 {
	if x != nil && x.LowestOpenInterest != nil {
		return *x.LowestOpenInterest
	}
	return 0
}

func (x *PartyPositionStats) GetTradedVolume() uint64 {
	if x != nil && x.TradedVolume != nil {
		return *x.TradedVolume
	}
	return 0
}

type SettlementState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId             string                 `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	LastMarkPrice        string                 `protobuf:"bytes,2,opt,name=last_mark_price,json=lastMarkPrice,proto3" json:"last_mark_price,omitempty"`
	LastSettledPositions []*LastSettledPosition `protobuf:"bytes,3,rep,name=last_settled_positions,json=lastSettledPositions,proto3" json:"last_settled_positions,omitempty"`
	Trades               []*SettlementTrade     `protobuf:"bytes,4,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *SettlementState) Reset() {
	*x = SettlementState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementState) ProtoMessage() {}

func (x *SettlementState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementState.ProtoReflect.Descriptor instead.
func (*SettlementState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{89}
}

func (x *SettlementState) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SettlementState) GetLastMarkPrice() string {
	if x != nil {
		return x.LastMarkPrice
	}
	return ""
}

func (x *SettlementState) GetLastSettledPositions() []*LastSettledPosition {
	if x != nil {
		return x.LastSettledPositions
	}
	return nil
}

func (x *SettlementState) GetTrades() []*SettlementTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type LastSettledPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party           string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	SettledPosition int64  `protobuf:"varint,2,opt,name=settled_position,json=settledPosition,proto3" json:"settled_position,omitempty"`
}

func (x *LastSettledPosition) Reset() {
	*x = LastSettledPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastSettledPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastSettledPosition) ProtoMessage() {}

func (x *LastSettledPosition) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastSettledPosition.ProtoReflect.Descriptor instead.
func (*LastSettledPosition) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{90}
}

func (x *LastSettledPosition) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *LastSettledPosition) GetSettledPosition() int64 {
	if x != nil {
		return x.SettledPosition
	}
	return 0
}

type SettlementTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId     string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Price       string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	MarketPrice string `protobuf:"bytes,3,opt,name=market_price,json=marketPrice,proto3" json:"market_price,omitempty"`
	Size        int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	NewSize     int64  `protobuf:"varint,5,opt,name=new_size,json=newSize,proto3" json:"new_size,omitempty"`
}

func (x *SettlementTrade) Reset() {
	*x = SettlementTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementTrade) ProtoMessage() {}

func (x *SettlementTrade) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementTrade.ProtoReflect.Descriptor instead.
func (*SettlementTrade) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{91}
}

func (x *SettlementTrade) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *SettlementTrade) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SettlementTrade) GetMarketPrice() string {
	if x != nil {
		return x.MarketPrice
	}
	return ""
}

func (x *SettlementTrade) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SettlementTrade) GetNewSize() int64 {
	if x != nil {
		return x.NewSize
	}
	return 0
}

type AppState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height          uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Block           string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Time            int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	ChainId         string `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ProtocolVersion string `protobuf:"bytes,5,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	ProtocolUpgrade bool   `protobuf:"varint,6,opt,name=protocol_upgrade,json=protocolUpgrade,proto3" json:"protocol_upgrade,omitempty"`
}

func (x *AppState) Reset() {
	*x = AppState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppState) ProtoMessage() {}

func (x *AppState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppState.ProtoReflect.Descriptor instead.
func (*AppState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{92}
}

func (x *AppState) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AppState) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *AppState) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AppState) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *AppState) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *AppState) GetProtocolUpgrade() bool {
	if x != nil {
		return x.ProtocolUpgrade
	}
	return false
}

// EpochState details
type EpochState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence number that increases by one each epoch
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Time at which this epoch started
	StartTime int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time at which this epoch should end
	ExpireTime int64 `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Ready to start a new epoch
	ReadyToStartNewEpoch bool `protobuf:"varint,6,opt,name=ready_to_start_new_epoch,json=readyToStartNewEpoch,proto3" json:"ready_to_start_new_epoch,omitempty"`
	// Ready to end epoch
	ReadyToEndEpoch bool `protobuf:"varint,7,opt,name=ready_to_end_epoch,json=readyToEndEpoch,proto3" json:"ready_to_end_epoch,omitempty"`
}

func (x *EpochState) Reset() {
	*x = EpochState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochState) ProtoMessage() {}

func (x *EpochState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochState.ProtoReflect.Descriptor instead.
func (*EpochState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{93}
}

func (x *EpochState) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *EpochState) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EpochState) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *EpochState) GetReadyToStartNewEpoch() bool {
	if x != nil {
		return x.ReadyToStartNewEpoch
	}
	return false
}

func (x *EpochState) GetReadyToEndEpoch() bool {
	if x != nil {
		return x.ReadyToEndEpoch
	}
	return false
}

type RewardsPendingPayouts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledRewardsPayout []*ScheduledRewardsPayout `protobuf:"bytes,1,rep,name=scheduled_rewards_payout,json=scheduledRewardsPayout,proto3" json:"scheduled_rewards_payout,omitempty"`
}

func (x *RewardsPendingPayouts) Reset() {
	*x = RewardsPendingPayouts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsPendingPayouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsPendingPayouts) ProtoMessage() {}

func (x *RewardsPendingPayouts) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsPendingPayouts.ProtoReflect.Descriptor instead.
func (*RewardsPendingPayouts) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{94}
}

func (x *RewardsPendingPayouts) GetScheduledRewardsPayout() []*ScheduledRewardsPayout {
	if x != nil {
		return x.ScheduledRewardsPayout
	}
	return nil
}

type ScheduledRewardsPayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayoutTime    int64            `protobuf:"varint,1,opt,name=payout_time,json=payoutTime,proto3" json:"payout_time,omitempty"`
	RewardsPayout []*RewardsPayout `protobuf:"bytes,2,rep,name=rewards_payout,json=rewardsPayout,proto3" json:"rewards_payout,omitempty"`
}

func (x *ScheduledRewardsPayout) Reset() {
	*x = ScheduledRewardsPayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledRewardsPayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledRewardsPayout) ProtoMessage() {}

func (x *ScheduledRewardsPayout) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledRewardsPayout.ProtoReflect.Descriptor instead.
func (*ScheduledRewardsPayout) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{95}
}

func (x *ScheduledRewardsPayout) GetPayoutTime() int64 {
	if x != nil {
		return x.PayoutTime
	}
	return 0
}

func (x *ScheduledRewardsPayout) GetRewardsPayout() []*RewardsPayout {
	if x != nil {
		return x.RewardsPayout
	}
	return nil
}

type RewardsPayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAccount       string                `protobuf:"bytes,1,opt,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`
	Asset             string                `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	RewardPartyAmount []*RewardsPartyAmount `protobuf:"bytes,3,rep,name=reward_party_amount,json=rewardPartyAmount,proto3" json:"reward_party_amount,omitempty"`
	TotalReward       string                `protobuf:"bytes,4,opt,name=total_reward,json=totalReward,proto3" json:"total_reward,omitempty"`
	EpochSeq          string                `protobuf:"bytes,5,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	Timestamp         int64                 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RewardsPayout) Reset() {
	*x = RewardsPayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsPayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsPayout) ProtoMessage() {}

func (x *RewardsPayout) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsPayout.ProtoReflect.Descriptor instead.
func (*RewardsPayout) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{96}
}

func (x *RewardsPayout) GetFromAccount() string {
	if x != nil {
		return x.FromAccount
	}
	return ""
}

func (x *RewardsPayout) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *RewardsPayout) GetRewardPartyAmount() []*RewardsPartyAmount {
	if x != nil {
		return x.RewardPartyAmount
	}
	return nil
}

func (x *RewardsPayout) GetTotalReward() string {
	if x != nil {
		return x.TotalReward
	}
	return ""
}

func (x *RewardsPayout) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *RewardsPayout) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RewardsPartyAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RewardsPartyAmount) Reset() {
	*x = RewardsPartyAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsPartyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsPartyAmount) ProtoMessage() {}

func (x *RewardsPartyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsPartyAmount.ProtoReflect.Descriptor instead.
func (*RewardsPartyAmount) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{97}
}

func (x *RewardsPartyAmount) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *RewardsPartyAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// LimitState details
type LimitState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of blocks into the bootstrapping phase
	BlockCount uint32 `protobuf:"varint,1,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty"`
	// Whether or not the limit on market proposals has been lifted
	CanProposeMarket bool `protobuf:"varint,2,opt,name=can_propose_market,json=canProposeMarket,proto3" json:"can_propose_market,omitempty"`
	// Whether or not the limit on asset proposals has been lifted
	CanProposeAsset bool `protobuf:"varint,3,opt,name=can_propose_asset,json=canProposeAsset,proto3" json:"can_propose_asset,omitempty"`
	// Whether or not the genesis state is loaded
	GenesisLoaded bool `protobuf:"varint,4,opt,name=genesis_loaded,json=genesisLoaded,proto3" json:"genesis_loaded,omitempty"`
	// Fields derived from the genesis state
	ProposeMarketEnabled      bool  `protobuf:"varint,5,opt,name=propose_market_enabled,json=proposeMarketEnabled,proto3" json:"propose_market_enabled,omitempty"`
	ProposeAssetEnabled       bool  `protobuf:"varint,6,opt,name=propose_asset_enabled,json=proposeAssetEnabled,proto3" json:"propose_asset_enabled,omitempty"`
	ProposeMarketEnabledFrom  int64 `protobuf:"varint,7,opt,name=propose_market_enabled_from,json=proposeMarketEnabledFrom,proto3" json:"propose_market_enabled_from,omitempty"`
	ProposeAssetEnabledFrom   int64 `protobuf:"varint,8,opt,name=propose_asset_enabled_from,json=proposeAssetEnabledFrom,proto3" json:"propose_asset_enabled_from,omitempty"`
	ProposeSpotMarketEnabled  bool  `protobuf:"varint,9,opt,name=propose_spot_market_enabled,json=proposeSpotMarketEnabled,proto3" json:"propose_spot_market_enabled,omitempty"`
	ProposePerpsMarketEnabled bool  `protobuf:"varint,10,opt,name=propose_perps_market_enabled,json=proposePerpsMarketEnabled,proto3" json:"propose_perps_market_enabled,omitempty"`
	CanUseAmmEnabled          bool  `protobuf:"varint,11,opt,name=can_use_amm_enabled,json=canUseAmmEnabled,proto3" json:"can_use_amm_enabled,omitempty"`
}

func (x *LimitState) Reset() {
	*x = LimitState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitState) ProtoMessage() {}

func (x *LimitState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitState.ProtoReflect.Descriptor instead.
func (*LimitState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{98}
}

func (x *LimitState) GetBlockCount() uint32 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *LimitState) GetCanProposeMarket() bool {
	if x != nil {
		return x.CanProposeMarket
	}
	return false
}

func (x *LimitState) GetCanProposeAsset() bool {
	if x != nil {
		return x.CanProposeAsset
	}
	return false
}

func (x *LimitState) GetGenesisLoaded() bool {
	if x != nil {
		return x.GenesisLoaded
	}
	return false
}

func (x *LimitState) GetProposeMarketEnabled() bool {
	if x != nil {
		return x.ProposeMarketEnabled
	}
	return false
}

func (x *LimitState) GetProposeAssetEnabled() bool {
	if x != nil {
		return x.ProposeAssetEnabled
	}
	return false
}

func (x *LimitState) GetProposeMarketEnabledFrom() int64 {
	if x != nil {
		return x.ProposeMarketEnabledFrom
	}
	return 0
}

func (x *LimitState) GetProposeAssetEnabledFrom() int64 {
	if x != nil {
		return x.ProposeAssetEnabledFrom
	}
	return 0
}

func (x *LimitState) GetProposeSpotMarketEnabled() bool {
	if x != nil {
		return x.ProposeSpotMarketEnabled
	}
	return false
}

func (x *LimitState) GetProposePerpsMarketEnabled() bool {
	if x != nil {
		return x.ProposePerpsMarketEnabled
	}
	return false
}

func (x *LimitState) GetCanUseAmmEnabled() bool {
	if x != nil {
		return x.CanUseAmmEnabled
	}
	return false
}

type VoteSpamPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyToVote             []*PartyProposalVoteCount `protobuf:"bytes,1,rep,name=party_to_vote,json=partyToVote,proto3" json:"party_to_vote,omitempty"`
	BannedParties           []*BannedParty            `protobuf:"bytes,2,rep,name=banned_parties,json=bannedParties,proto3" json:"banned_parties,omitempty"`
	TokenBalance            []*PartyTokenBalance      `protobuf:"bytes,3,rep,name=token_balance,json=tokenBalance,proto3" json:"token_balance,omitempty"`
	RecentBlocksRejectStats []*BlockRejectStats       `protobuf:"bytes,4,rep,name=recent_blocks_reject_stats,json=recentBlocksRejectStats,proto3" json:"recent_blocks_reject_stats,omitempty"`
	CurrentBlockIndex       uint64                    `protobuf:"varint,5,opt,name=current_block_index,json=currentBlockIndex,proto3" json:"current_block_index,omitempty"`
	LastIncreaseBlock       uint64                    `protobuf:"varint,6,opt,name=last_increase_block,json=lastIncreaseBlock,proto3" json:"last_increase_block,omitempty"`
	CurrentEpochSeq         uint64                    `protobuf:"varint,7,opt,name=current_epoch_seq,json=currentEpochSeq,proto3" json:"current_epoch_seq,omitempty"`
	MinVotingTokensFactor   string                    `protobuf:"bytes,8,opt,name=min_voting_tokens_factor,json=minVotingTokensFactor,proto3" json:"min_voting_tokens_factor,omitempty"`
}

func (x *VoteSpamPolicy) Reset() {
	*x = VoteSpamPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteSpamPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSpamPolicy) ProtoMessage() {}

func (x *VoteSpamPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSpamPolicy.ProtoReflect.Descriptor instead.
func (*VoteSpamPolicy) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{99}
}

func (x *VoteSpamPolicy) GetPartyToVote() []*PartyProposalVoteCount {
	if x != nil {
		return x.PartyToVote
	}
	return nil
}

func (x *VoteSpamPolicy) GetBannedParties() []*BannedParty {
	if x != nil {
		return x.BannedParties
	}
	return nil
}

func (x *VoteSpamPolicy) GetTokenBalance() []*PartyTokenBalance {
	if x != nil {
		return x.TokenBalance
	}
	return nil
}

func (x *VoteSpamPolicy) GetRecentBlocksRejectStats() []*BlockRejectStats {
	if x != nil {
		return x.RecentBlocksRejectStats
	}
	return nil
}

func (x *VoteSpamPolicy) GetCurrentBlockIndex() uint64 {
	if x != nil {
		return x.CurrentBlockIndex
	}
	return 0
}

func (x *VoteSpamPolicy) GetLastIncreaseBlock() uint64 {
	if x != nil {
		return x.LastIncreaseBlock
	}
	return 0
}

func (x *VoteSpamPolicy) GetCurrentEpochSeq() uint64 {
	if x != nil {
		return x.CurrentEpochSeq
	}
	return 0
}

func (x *VoteSpamPolicy) GetMinVotingTokensFactor() string {
	if x != nil {
		return x.MinVotingTokensFactor
	}
	return ""
}

type PartyProposalVoteCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party    string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Proposal string `protobuf:"bytes,2,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Count    uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PartyProposalVoteCount) Reset() {
	*x = PartyProposalVoteCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyProposalVoteCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyProposalVoteCount) ProtoMessage() {}

func (x *PartyProposalVoteCount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyProposalVoteCount.ProtoReflect.Descriptor instead.
func (*PartyProposalVoteCount) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{100}
}

func (x *PartyProposalVoteCount) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyProposalVoteCount) GetProposal() string {
	if x != nil {
		return x.Proposal
	}
	return ""
}

func (x *PartyProposalVoteCount) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PartyTokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party   string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *PartyTokenBalance) Reset() {
	*x = PartyTokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyTokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyTokenBalance) ProtoMessage() {}

func (x *PartyTokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyTokenBalance.ProtoReflect.Descriptor instead.
func (*PartyTokenBalance) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{101}
}

func (x *PartyTokenBalance) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyTokenBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type BlockRejectStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rejected uint64 `protobuf:"varint,1,opt,name=rejected,proto3" json:"rejected,omitempty"`
	Total    uint64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BlockRejectStats) Reset() {
	*x = BlockRejectStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRejectStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRejectStats) ProtoMessage() {}

func (x *BlockRejectStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRejectStats.ProtoReflect.Descriptor instead.
func (*BlockRejectStats) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{102}
}

func (x *BlockRejectStats) GetRejected() uint64 {
	if x != nil {
		return x.Rejected
	}
	return 0
}

func (x *BlockRejectStats) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SpamPartyTransactionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SpamPartyTransactionCount) Reset() {
	*x = SpamPartyTransactionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpamPartyTransactionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpamPartyTransactionCount) ProtoMessage() {}

func (x *SpamPartyTransactionCount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpamPartyTransactionCount.ProtoReflect.Descriptor instead.
func (*SpamPartyTransactionCount) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{103}
}

func (x *SpamPartyTransactionCount) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *SpamPartyTransactionCount) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SimpleSpamPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName      string                       `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PartyToCount    []*SpamPartyTransactionCount `protobuf:"bytes,2,rep,name=party_to_count,json=partyToCount,proto3" json:"party_to_count,omitempty"`
	BannedParties   []*BannedParty               `protobuf:"bytes,3,rep,name=banned_parties,json=bannedParties,proto3" json:"banned_parties,omitempty"`
	TokenBalance    []*PartyTokenBalance         `protobuf:"bytes,4,rep,name=token_balance,json=tokenBalance,proto3" json:"token_balance,omitempty"`
	CurrentEpochSeq uint64                       `protobuf:"varint,5,opt,name=current_epoch_seq,json=currentEpochSeq,proto3" json:"current_epoch_seq,omitempty"`
}

func (x *SimpleSpamPolicy) Reset() {
	*x = SimpleSpamPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSpamPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSpamPolicy) ProtoMessage() {}

func (x *SimpleSpamPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSpamPolicy.ProtoReflect.Descriptor instead.
func (*SimpleSpamPolicy) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{104}
}

func (x *SimpleSpamPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *SimpleSpamPolicy) GetPartyToCount() []*SpamPartyTransactionCount {
	if x != nil {
		return x.PartyToCount
	}
	return nil
}

func (x *SimpleSpamPolicy) GetBannedParties() []*BannedParty {
	if x != nil {
		return x.BannedParties
	}
	return nil
}

func (x *SimpleSpamPolicy) GetTokenBalance() []*PartyTokenBalance {
	if x != nil {
		return x.TokenBalance
	}
	return nil
}

func (x *SimpleSpamPolicy) GetCurrentEpochSeq() uint64 {
	if x != nil {
		return x.CurrentEpochSeq
	}
	return 0
}

type NotarySigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind    int32  `protobuf:"varint,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Node    string `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Sig     string `protobuf:"bytes,4,opt,name=sig,proto3" json:"sig,omitempty"`
	Pending bool   `protobuf:"varint,5,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *NotarySigs) Reset() {
	*x = NotarySigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotarySigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotarySigs) ProtoMessage() {}

func (x *NotarySigs) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotarySigs.ProtoReflect.Descriptor instead.
func (*NotarySigs) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{105}
}

func (x *NotarySigs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NotarySigs) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *NotarySigs) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *NotarySigs) GetSig() string {
	if x != nil {
		return x.Sig
	}
	return ""
}

func (x *NotarySigs) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

type Notary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotarySigs []*NotarySigs `protobuf:"bytes,1,rep,name=notary_sigs,json=notarySigs,proto3" json:"notary_sigs,omitempty"`
}

func (x *Notary) Reset() {
	*x = Notary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notary) ProtoMessage() {}

func (x *Notary) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notary.ProtoReflect.Descriptor instead.
func (*Notary) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{106}
}

func (x *Notary) GetNotarySigs() []*NotarySigs {
	if x != nil {
		return x.NotarySigs
	}
	return nil
}

type StakeVerifierDeposited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingDeposited []*StakeVerifierPending `protobuf:"bytes,1,rep,name=pending_deposited,json=pendingDeposited,proto3" json:"pending_deposited,omitempty"`
}

func (x *StakeVerifierDeposited) Reset() {
	*x = StakeVerifierDeposited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeVerifierDeposited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeVerifierDeposited) ProtoMessage() {}

func (x *StakeVerifierDeposited) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeVerifierDeposited.ProtoReflect.Descriptor instead.
func (*StakeVerifierDeposited) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{107}
}

func (x *StakeVerifierDeposited) GetPendingDeposited() []*StakeVerifierPending {
	if x != nil {
		return x.PendingDeposited
	}
	return nil
}

type StakeVerifierRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingRemoved []*StakeVerifierPending `protobuf:"bytes,1,rep,name=pending_removed,json=pendingRemoved,proto3" json:"pending_removed,omitempty"`
}

func (x *StakeVerifierRemoved) Reset() {
	*x = StakeVerifierRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeVerifierRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeVerifierRemoved) ProtoMessage() {}

func (x *StakeVerifierRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeVerifierRemoved.ProtoReflect.Descriptor instead.
func (*StakeVerifierRemoved) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{108}
}

func (x *StakeVerifierRemoved) GetPendingRemoved() []*StakeVerifierPending {
	if x != nil {
		return x.PendingRemoved
	}
	return nil
}

type StakeVerifierPending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress string `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	VegaPublicKey   string `protobuf:"bytes,2,opt,name=vega_public_key,json=vegaPublicKey,proto3" json:"vega_public_key,omitempty"`
	Amount          string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	BlockTime       int64  `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockNumber     uint64 `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	LogIndex        uint64 `protobuf:"varint,6,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	TxId            string `protobuf:"bytes,7,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Id              string `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StakeVerifierPending) Reset() {
	*x = StakeVerifierPending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeVerifierPending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeVerifierPending) ProtoMessage() {}

func (x *StakeVerifierPending) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeVerifierPending.ProtoReflect.Descriptor instead.
func (*StakeVerifierPending) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{109}
}

func (x *StakeVerifierPending) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *StakeVerifierPending) GetVegaPublicKey() string {
	if x != nil {
		return x.VegaPublicKey
	}
	return ""
}

func (x *StakeVerifierPending) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeVerifierPending) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *StakeVerifierPending) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *StakeVerifierPending) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *StakeVerifierPending) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *StakeVerifierPending) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type L2EthOracles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainIdEthOracles []*ChainIdEthOracles `protobuf:"bytes,1,rep,name=chain_id_eth_oracles,json=chainIdEthOracles,proto3" json:"chain_id_eth_oracles,omitempty"`
}

func (x *L2EthOracles) Reset() {
	*x = L2EthOracles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2EthOracles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2EthOracles) ProtoMessage() {}

func (x *L2EthOracles) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2EthOracles.ProtoReflect.Descriptor instead.
func (*L2EthOracles) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{110}
}

func (x *L2EthOracles) GetChainIdEthOracles() []*ChainIdEthOracles {
	if x != nil {
		return x.ChainIdEthOracles
	}
	return nil
}

type ChainIdEthOracles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceChainId string                      `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	LastBlock     *EthOracleVerifierLastBlock `protobuf:"bytes,2,opt,name=last_block,json=lastBlock,proto3" json:"last_block,omitempty"`
	CallResults   *EthContractCallResults     `protobuf:"bytes,3,opt,name=call_results,json=callResults,proto3" json:"call_results,omitempty"`
	Misc          *EthOracleVerifierMisc      `protobuf:"bytes,4,opt,name=misc,proto3" json:"misc,omitempty"`
}

func (x *ChainIdEthOracles) Reset() {
	*x = ChainIdEthOracles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainIdEthOracles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainIdEthOracles) ProtoMessage() {}

func (x *ChainIdEthOracles) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainIdEthOracles.ProtoReflect.Descriptor instead.
func (*ChainIdEthOracles) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{111}
}

func (x *ChainIdEthOracles) GetSourceChainId() string {
	if x != nil {
		return x.SourceChainId
	}
	return ""
}

func (x *ChainIdEthOracles) GetLastBlock() *EthOracleVerifierLastBlock {
	if x != nil {
		return x.LastBlock
	}
	return nil
}

func (x *ChainIdEthOracles) GetCallResults() *EthContractCallResults {
	if x != nil {
		return x.CallResults
	}
	return nil
}

func (x *ChainIdEthOracles) GetMisc() *EthOracleVerifierMisc {
	if x != nil {
		return x.Misc
	}
	return nil
}

type EthOracleVerifierLastBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime   uint64 `protobuf:"varint,2,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *EthOracleVerifierLastBlock) Reset() {
	*x = EthOracleVerifierLastBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthOracleVerifierLastBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthOracleVerifierLastBlock) ProtoMessage() {}

func (x *EthOracleVerifierLastBlock) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthOracleVerifierLastBlock.ProtoReflect.Descriptor instead.
func (*EthOracleVerifierLastBlock) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{112}
}

func (x *EthOracleVerifierLastBlock) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *EthOracleVerifierLastBlock) GetBlockTime() uint64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type EthOracleVerifierMisc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets    []*EthVerifierBucket        `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
	PatchBlock *EthOracleVerifierLastBlock `protobuf:"bytes,2,opt,name=patch_block,json=patchBlock,proto3" json:"patch_block,omitempty"`
}

func (x *EthOracleVerifierMisc) Reset() {
	*x = EthOracleVerifierMisc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthOracleVerifierMisc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthOracleVerifierMisc) ProtoMessage() {}

func (x *EthOracleVerifierMisc) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthOracleVerifierMisc.ProtoReflect.Descriptor instead.
func (*EthOracleVerifierMisc) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{113}
}

func (x *EthOracleVerifierMisc) GetBuckets() []*EthVerifierBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *EthOracleVerifierMisc) GetPatchBlock() *EthOracleVerifierLastBlock {
	if x != nil {
		return x.PatchBlock
	}
	return nil
}

type EthContractCallResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingContractCallResult []*EthContractCallResult `protobuf:"bytes,1,rep,name=pending_contract_call_result,json=pendingContractCallResult,proto3" json:"pending_contract_call_result,omitempty"`
}

func (x *EthContractCallResults) Reset() {
	*x = EthContractCallResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthContractCallResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthContractCallResults) ProtoMessage() {}

func (x *EthContractCallResults) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthContractCallResults.ProtoReflect.Descriptor instead.
func (*EthContractCallResults) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{114}
}

func (x *EthContractCallResults) GetPendingContractCallResult() []*EthContractCallResult {
	if x != nil {
		return x.PendingContractCallResult
	}
	return nil
}

type EthContractCallResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime   uint64  `protobuf:"varint,2,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	SpecId      string  `protobuf:"bytes,3,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	Result      []byte  `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Error       *string `protobuf:"bytes,5,opt,name=error,proto3,oneof" json:"error,omitempty"`
	ChainId     *uint64 `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3,oneof" json:"chain_id,omitempty"`
}

func (x *EthContractCallResult) Reset() {
	*x = EthContractCallResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthContractCallResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthContractCallResult) ProtoMessage() {}

func (x *EthContractCallResult) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthContractCallResult.ProtoReflect.Descriptor instead.
func (*EthContractCallResult) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{115}
}

func (x *EthContractCallResult) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *EthContractCallResult) GetBlockTime() uint64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *EthContractCallResult) GetSpecId() string {
	if x != nil {
		return x.SpecId
	}
	return ""
}

func (x *EthContractCallResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *EthContractCallResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *EthContractCallResult) GetChainId() uint64 {
	if x != nil && x.ChainId != nil {
		return *x.ChainId
	}
	return 0
}

type EthVerifierBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts     int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Hashes []string `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *EthVerifierBucket) Reset() {
	*x = EthVerifierBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthVerifierBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthVerifierBucket) ProtoMessage() {}

func (x *EthVerifierBucket) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthVerifierBucket.ProtoReflect.Descriptor instead.
func (*EthVerifierBucket) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{116}
}

func (x *EthVerifierBucket) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *EthVerifierBucket) GetHashes() []string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type PendingKeyRotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight    uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	NodeId         string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NewPubKey      string `protobuf:"bytes,3,opt,name=new_pub_key,json=newPubKey,proto3" json:"new_pub_key,omitempty"`
	NewPubKeyIndex uint32 `protobuf:"varint,4,opt,name=new_pub_key_index,json=newPubKeyIndex,proto3" json:"new_pub_key_index,omitempty"`
}

func (x *PendingKeyRotation) Reset() {
	*x = PendingKeyRotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingKeyRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingKeyRotation) ProtoMessage() {}

func (x *PendingKeyRotation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingKeyRotation.ProtoReflect.Descriptor instead.
func (*PendingKeyRotation) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{117}
}

func (x *PendingKeyRotation) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *PendingKeyRotation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PendingKeyRotation) GetNewPubKey() string {
	if x != nil {
		return x.NewPubKey
	}
	return ""
}

func (x *PendingKeyRotation) GetNewPubKeyIndex() uint32 {
	if x != nil {
		return x.NewPubKeyIndex
	}
	return 0
}

type PendingEthereumKeyRotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	NodeId      string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NewAddress  string `protobuf:"bytes,3,opt,name=new_address,json=newAddress,proto3" json:"new_address,omitempty"`
	Submitter   string `protobuf:"bytes,4,opt,name=submitter,proto3" json:"submitter,omitempty"`
	OldAddress  string `protobuf:"bytes,5,opt,name=old_address,json=oldAddress,proto3" json:"old_address,omitempty"`
}

func (x *PendingEthereumKeyRotation) Reset() {
	*x = PendingEthereumKeyRotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingEthereumKeyRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingEthereumKeyRotation) ProtoMessage() {}

func (x *PendingEthereumKeyRotation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingEthereumKeyRotation.ProtoReflect.Descriptor instead.
func (*PendingEthereumKeyRotation) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{118}
}

func (x *PendingEthereumKeyRotation) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *PendingEthereumKeyRotation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PendingEthereumKeyRotation) GetNewAddress() string {
	if x != nil {
		return x.NewAddress
	}
	return ""
}

func (x *PendingEthereumKeyRotation) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *PendingEthereumKeyRotation) GetOldAddress() string {
	if x != nil {
		return x.OldAddress
	}
	return ""
}

type Topology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorData                []*ValidatorState             `protobuf:"bytes,1,rep,name=validator_data,json=validatorData,proto3" json:"validator_data,omitempty"`
	ChainKeys                    []string                      `protobuf:"bytes,2,rep,name=chain_keys,json=chainKeys,proto3" json:"chain_keys,omitempty"`
	PendingPubKeyRotations       []*PendingKeyRotation         `protobuf:"bytes,3,rep,name=pending_pub_key_rotations,json=pendingPubKeyRotations,proto3" json:"pending_pub_key_rotations,omitempty"`
	ValidatorPerformance         *ValidatorPerformance         `protobuf:"bytes,4,opt,name=validator_performance,json=validatorPerformance,proto3" json:"validator_performance,omitempty"`
	PendingEthereumKeyRotations  []*PendingEthereumKeyRotation `protobuf:"bytes,5,rep,name=pending_ethereum_key_rotations,json=pendingEthereumKeyRotations,proto3" json:"pending_ethereum_key_rotations,omitempty"`
	Signatures                   *ToplogySignatures            `protobuf:"bytes,6,opt,name=signatures,proto3" json:"signatures,omitempty"`
	UnsolvedEthereumKeyRotations []*PendingEthereumKeyRotation `protobuf:"bytes,7,rep,name=unsolved_ethereum_key_rotations,json=unsolvedEthereumKeyRotations,proto3" json:"unsolved_ethereum_key_rotations,omitempty"`
}

func (x *Topology) Reset() {
	*x = Topology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{119}
}

func (x *Topology) GetValidatorData() []*ValidatorState {
	if x != nil {
		return x.ValidatorData
	}
	return nil
}

func (x *Topology) GetChainKeys() []string {
	if x != nil {
		return x.ChainKeys
	}
	return nil
}

func (x *Topology) GetPendingPubKeyRotations() []*PendingKeyRotation {
	if x != nil {
		return x.PendingPubKeyRotations
	}
	return nil
}

func (x *Topology) GetValidatorPerformance() *ValidatorPerformance {
	if x != nil {
		return x.ValidatorPerformance
	}
	return nil
}

func (x *Topology) GetPendingEthereumKeyRotations() []*PendingEthereumKeyRotation {
	if x != nil {
		return x.PendingEthereumKeyRotations
	}
	return nil
}

func (x *Topology) GetSignatures() *ToplogySignatures {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *Topology) GetUnsolvedEthereumKeyRotations() []*PendingEthereumKeyRotation {
	if x != nil {
		return x.UnsolvedEthereumKeyRotations
	}
	return nil
}

type ToplogySignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingSignatures []*PendingERC20MultisigControlSignature `protobuf:"bytes,1,rep,name=pending_signatures,json=pendingSignatures,proto3" json:"pending_signatures,omitempty"`
	IssuedSignatures  []*IssuedERC20MultisigControlSignature  `protobuf:"bytes,2,rep,name=issued_signatures,json=issuedSignatures,proto3" json:"issued_signatures,omitempty"`
}

func (x *ToplogySignatures) Reset() {
	*x = ToplogySignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToplogySignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToplogySignatures) ProtoMessage() {}

func (x *ToplogySignatures) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToplogySignatures.ProtoReflect.Descriptor instead.
func (*ToplogySignatures) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{120}
}

func (x *ToplogySignatures) GetPendingSignatures() []*PendingERC20MultisigControlSignature {
	if x != nil {
		return x.PendingSignatures
	}
	return nil
}

func (x *ToplogySignatures) GetIssuedSignatures() []*IssuedERC20MultisigControlSignature {
	if x != nil {
		return x.IssuedSignatures
	}
	return nil
}

type PendingERC20MultisigControlSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId          string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	EthereumAddress string `protobuf:"bytes,2,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	Nonce           string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	EpochSeq        uint64 `protobuf:"varint,4,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	Added           bool   `protobuf:"varint,5,opt,name=added,proto3" json:"added,omitempty"`
}

func (x *PendingERC20MultisigControlSignature) Reset() {
	*x = PendingERC20MultisigControlSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingERC20MultisigControlSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingERC20MultisigControlSignature) ProtoMessage() {}

func (x *PendingERC20MultisigControlSignature) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingERC20MultisigControlSignature.ProtoReflect.Descriptor instead.
func (*PendingERC20MultisigControlSignature) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{121}
}

func (x *PendingERC20MultisigControlSignature) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PendingERC20MultisigControlSignature) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *PendingERC20MultisigControlSignature) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *PendingERC20MultisigControlSignature) GetEpochSeq() uint64 {
	if x != nil {
		return x.EpochSeq
	}
	return 0
}

func (x *PendingERC20MultisigControlSignature) GetAdded() bool {
	if x != nil {
		return x.Added
	}
	return false
}

type IssuedERC20MultisigControlSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId       string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	EthereumAddress  string `protobuf:"bytes,2,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	SubmitterAddress string `protobuf:"bytes,3,opt,name=submitter_address,json=submitterAddress,proto3" json:"submitter_address,omitempty"`
}

func (x *IssuedERC20MultisigControlSignature) Reset() {
	*x = IssuedERC20MultisigControlSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuedERC20MultisigControlSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuedERC20MultisigControlSignature) ProtoMessage() {}

func (x *IssuedERC20MultisigControlSignature) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuedERC20MultisigControlSignature.ProtoReflect.Descriptor instead.
func (*IssuedERC20MultisigControlSignature) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{122}
}

func (x *IssuedERC20MultisigControlSignature) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *IssuedERC20MultisigControlSignature) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *IssuedERC20MultisigControlSignature) GetSubmitterAddress() string {
	if x != nil {
		return x.SubmitterAddress
	}
	return ""
}

type ValidatorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorUpdate              *v12.ValidatorUpdate `protobuf:"bytes,1,opt,name=validator_update,json=validatorUpdate,proto3" json:"validator_update,omitempty"`
	BlockAdded                   uint64               `protobuf:"varint,2,opt,name=block_added,json=blockAdded,proto3" json:"block_added,omitempty"`
	Status                       int32                `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	StatusChangeBlock            uint64               `protobuf:"varint,4,opt,name=status_change_block,json=statusChangeBlock,proto3" json:"status_change_block,omitempty"`
	LastBlockWithPositiveRanking uint64               `protobuf:"varint,5,opt,name=last_block_with_positive_ranking,json=lastBlockWithPositiveRanking,proto3" json:"last_block_with_positive_ranking,omitempty"`
	EthEventsForwarded           uint64               `protobuf:"varint,6,opt,name=eth_events_forwarded,json=ethEventsForwarded,proto3" json:"eth_events_forwarded,omitempty"`
	HeartbeatTracker             *HeartbeatTracker    `protobuf:"bytes,7,opt,name=heartbeat_tracker,json=heartbeatTracker,proto3" json:"heartbeat_tracker,omitempty"`
	ValidatorPower               int64                `protobuf:"varint,8,opt,name=validator_power,json=validatorPower,proto3" json:"validator_power,omitempty"`
	RankingScore                 *vega.RankingScore   `protobuf:"bytes,9,opt,name=ranking_score,json=rankingScore,proto3" json:"ranking_score,omitempty"`
}

func (x *ValidatorState) Reset() {
	*x = ValidatorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorState) ProtoMessage() {}

func (x *ValidatorState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorState.ProtoReflect.Descriptor instead.
func (*ValidatorState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{123}
}

func (x *ValidatorState) GetValidatorUpdate() *v12.ValidatorUpdate {
	if x != nil {
		return x.ValidatorUpdate
	}
	return nil
}

func (x *ValidatorState) GetBlockAdded() uint64 {
	if x != nil {
		return x.BlockAdded
	}
	return 0
}

func (x *ValidatorState) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ValidatorState) GetStatusChangeBlock() uint64 {
	if x != nil {
		return x.StatusChangeBlock
	}
	return 0
}

func (x *ValidatorState) GetLastBlockWithPositiveRanking() uint64 {
	if x != nil {
		return x.LastBlockWithPositiveRanking
	}
	return 0
}

func (x *ValidatorState) GetEthEventsForwarded() uint64 {
	if x != nil {
		return x.EthEventsForwarded
	}
	return 0
}

func (x *ValidatorState) GetHeartbeatTracker() *HeartbeatTracker {
	if x != nil {
		return x.HeartbeatTracker
	}
	return nil
}

func (x *ValidatorState) GetValidatorPower() int64 {
	if x != nil {
		return x.ValidatorPower
	}
	return 0
}

func (x *ValidatorState) GetRankingScore() *vega.RankingScore {
	if x != nil {
		return x.RankingScore
	}
	return nil
}

type HeartbeatTracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedNextHash      string `protobuf:"bytes,1,opt,name=expected_next_hash,json=expectedNextHash,proto3" json:"expected_next_hash,omitempty"`
	ExpectedNextHashSince int64  `protobuf:"varint,2,opt,name=expected_next_hash_since,json=expectedNextHashSince,proto3" json:"expected_next_hash_since,omitempty"`
	BlockIndex            int32  `protobuf:"varint,3,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	BlockSigs             []bool `protobuf:"varint,4,rep,packed,name=block_sigs,json=blockSigs,proto3" json:"block_sigs,omitempty"`
}

func (x *HeartbeatTracker) Reset() {
	*x = HeartbeatTracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatTracker) ProtoMessage() {}

func (x *HeartbeatTracker) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatTracker.ProtoReflect.Descriptor instead.
func (*HeartbeatTracker) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{124}
}

func (x *HeartbeatTracker) GetExpectedNextHash() string {
	if x != nil {
		return x.ExpectedNextHash
	}
	return ""
}

func (x *HeartbeatTracker) GetExpectedNextHashSince() int64 {
	if x != nil {
		return x.ExpectedNextHashSince
	}
	return 0
}

func (x *HeartbeatTracker) GetBlockIndex() int32 {
	if x != nil {
		return x.BlockIndex
	}
	return 0
}

func (x *HeartbeatTracker) GetBlockSigs() []bool {
	if x != nil {
		return x.BlockSigs
	}
	return nil
}

type PerformanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorAddress   string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Proposed           uint64 `protobuf:"varint,2,opt,name=proposed,proto3" json:"proposed,omitempty"`
	Elected            uint64 `protobuf:"varint,3,opt,name=elected,proto3" json:"elected,omitempty"`
	Voted              uint64 `protobuf:"varint,4,opt,name=voted,proto3" json:"voted,omitempty"`
	LastHeightVoted    int64  `protobuf:"varint,5,opt,name=last_height_voted,json=lastHeightVoted,proto3" json:"last_height_voted,omitempty"`
	LastHeightProposed int64  `protobuf:"varint,6,opt,name=last_height_proposed,json=lastHeightProposed,proto3" json:"last_height_proposed,omitempty"`
	LastHeightElected  int64  `protobuf:"varint,7,opt,name=last_height_elected,json=lastHeightElected,proto3" json:"last_height_elected,omitempty"`
}

func (x *PerformanceStats) Reset() {
	*x = PerformanceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceStats) ProtoMessage() {}

func (x *PerformanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceStats.ProtoReflect.Descriptor instead.
func (*PerformanceStats) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{125}
}

func (x *PerformanceStats) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *PerformanceStats) GetProposed() uint64 {
	if x != nil {
		return x.Proposed
	}
	return 0
}

func (x *PerformanceStats) GetElected() uint64 {
	if x != nil {
		return x.Elected
	}
	return 0
}

func (x *PerformanceStats) GetVoted() uint64 {
	if x != nil {
		return x.Voted
	}
	return 0
}

func (x *PerformanceStats) GetLastHeightVoted() int64 {
	if x != nil {
		return x.LastHeightVoted
	}
	return 0
}

func (x *PerformanceStats) GetLastHeightProposed() int64 {
	if x != nil {
		return x.LastHeightProposed
	}
	return 0
}

func (x *PerformanceStats) GetLastHeightElected() int64 {
	if x != nil {
		return x.LastHeightElected
	}
	return 0
}

type ValidatorPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorPerfStats []*PerformanceStats `protobuf:"bytes,1,rep,name=validator_perf_stats,json=validatorPerfStats,proto3" json:"validator_perf_stats,omitempty"`
}

func (x *ValidatorPerformance) Reset() {
	*x = ValidatorPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorPerformance) ProtoMessage() {}

func (x *ValidatorPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorPerformance.ProtoReflect.Descriptor instead.
func (*ValidatorPerformance) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{126}
}

func (x *ValidatorPerformance) GetValidatorPerfStats() []*PerformanceStats {
	if x != nil {
		return x.ValidatorPerfStats
	}
	return nil
}

type LiquidityParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFee                  string `protobuf:"bytes,1,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
	MaxShapeSize            string `protobuf:"bytes,2,opt,name=max_shape_size,json=maxShapeSize,proto3" json:"max_shape_size,omitempty"`
	StakeToObligationFactor string `protobuf:"bytes,3,opt,name=stake_to_obligation_factor,json=stakeToObligationFactor,proto3" json:"stake_to_obligation_factor,omitempty"`
	// Market ID these liquidity parameters apply to. Required for key generation
	MarketId string `protobuf:"bytes,4,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LiquidityParameters) Reset() {
	*x = LiquidityParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityParameters) ProtoMessage() {}

func (x *LiquidityParameters) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityParameters.ProtoReflect.Descriptor instead.
func (*LiquidityParameters) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{127}
}

func (x *LiquidityParameters) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

func (x *LiquidityParameters) GetMaxShapeSize() string {
	if x != nil {
		return x.MaxShapeSize
	}
	return ""
}

func (x *LiquidityParameters) GetStakeToObligationFactor() string {
	if x != nil {
		return x.StakeToObligationFactor
	}
	return ""
}

func (x *LiquidityParameters) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type LiquidityPendingProvisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingProvisions []string `protobuf:"bytes,1,rep,name=pending_provisions,json=pendingProvisions,proto3" json:"pending_provisions,omitempty"`
	// Market ID these liquidity provisions apply to. Required for key generation
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LiquidityPendingProvisions) Reset() {
	*x = LiquidityPendingProvisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPendingProvisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPendingProvisions) ProtoMessage() {}

func (x *LiquidityPendingProvisions) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPendingProvisions.ProtoReflect.Descriptor instead.
func (*LiquidityPendingProvisions) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{128}
}

func (x *LiquidityPendingProvisions) GetPendingProvisions() []string {
	if x != nil {
		return x.PendingProvisions
	}
	return nil
}

func (x *LiquidityPendingProvisions) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type LiquidityPartiesLiquidityOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyOrders []*PartyOrders `protobuf:"bytes,1,rep,name=party_orders,json=partyOrders,proto3" json:"party_orders,omitempty"`
	// Market ID these liquidity orders apply to. Required for key generation
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LiquidityPartiesLiquidityOrders) Reset() {
	*x = LiquidityPartiesLiquidityOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPartiesLiquidityOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPartiesLiquidityOrders) ProtoMessage() {}

func (x *LiquidityPartiesLiquidityOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPartiesLiquidityOrders.ProtoReflect.Descriptor instead.
func (*LiquidityPartiesLiquidityOrders) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{129}
}

func (x *LiquidityPartiesLiquidityOrders) GetPartyOrders() []*PartyOrders {
	if x != nil {
		return x.PartyOrders
	}
	return nil
}

func (x *LiquidityPartiesLiquidityOrders) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type PartyOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string        `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Orders []*vega.Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *PartyOrders) Reset() {
	*x = PartyOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyOrders) ProtoMessage() {}

func (x *PartyOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyOrders.ProtoReflect.Descriptor instead.
func (*PartyOrders) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{130}
}

func (x *PartyOrders) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyOrders) GetOrders() []*vega.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type LiquidityPartiesOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyOrders []*PartyOrders `protobuf:"bytes,1,rep,name=party_orders,json=partyOrders,proto3" json:"party_orders,omitempty"`
	// Market ID these orders apply to.
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LiquidityPartiesOrders) Reset() {
	*x = LiquidityPartiesOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPartiesOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPartiesOrders) ProtoMessage() {}

func (x *LiquidityPartiesOrders) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPartiesOrders.ProtoReflect.Descriptor instead.
func (*LiquidityPartiesOrders) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{131}
}

func (x *LiquidityPartiesOrders) GetPartyOrders() []*PartyOrders {
	if x != nil {
		return x.PartyOrders
	}
	return nil
}

func (x *LiquidityPartiesOrders) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type LiquidityProvisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiquidityProvisions []*vega.LiquidityProvision `protobuf:"bytes,1,rep,name=liquidity_provisions,json=liquidityProvisions,proto3" json:"liquidity_provisions,omitempty"`
	// Market ID these provisions apply to.
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LiquidityProvisions) Reset() {
	*x = LiquidityProvisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisions) ProtoMessage() {}

func (x *LiquidityProvisions) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisions.ProtoReflect.Descriptor instead.
func (*LiquidityProvisions) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{132}
}

func (x *LiquidityProvisions) GetLiquidityProvisions() []*vega.LiquidityProvision {
	if x != nil {
		return x.LiquidityProvisions
	}
	return nil
}

func (x *LiquidityProvisions) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type LiquidityScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunningAverageCounter int32             `protobuf:"varint,1,opt,name=running_average_counter,json=runningAverageCounter,proto3" json:"running_average_counter,omitempty"`
	Scores                []*LiquidityScore `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	MarketId              string            `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LiquidityScores) Reset() {
	*x = LiquidityScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityScores) ProtoMessage() {}

func (x *LiquidityScores) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityScores.ProtoReflect.Descriptor instead.
func (*LiquidityScores) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{133}
}

func (x *LiquidityScores) GetRunningAverageCounter() int32 {
	if x != nil {
		return x.RunningAverageCounter
	}
	return 0
}

func (x *LiquidityScores) GetScores() []*LiquidityScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *LiquidityScores) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type LiquidityScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score   string `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *LiquidityScore) Reset() {
	*x = LiquidityScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityScore) ProtoMessage() {}

func (x *LiquidityScore) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityScore.ProtoReflect.Descriptor instead.
func (*LiquidityScore) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{134}
}

func (x *LiquidityScore) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *LiquidityScore) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

type LiquidityV2Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID these liquidity parameters apply to. Required for key generation
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// market specific SLA parameters, will be different than the ones in the market
	// snapshot since they apply at the end of an epoch
	MarketSlaParameters *vega.LiquiditySLAParameters `protobuf:"bytes,2,opt,name=market_sla_parameters,json=marketSlaParameters,proto3" json:"market_sla_parameters,omitempty"`
	// network wide SLA parameters, will be different than network paramters in the
	// snapshot since they apply at the end of an epoch
	StakeToVolume    string `protobuf:"bytes,3,opt,name=stake_to_volume,json=stakeToVolume,proto3" json:"stake_to_volume,omitempty"`
	BondPenaltySlope string `protobuf:"bytes,4,opt,name=bond_penalty_slope,json=bondPenaltySlope,proto3" json:"bond_penalty_slope,omitempty"`
	BondPenaltyMax   string `protobuf:"bytes,5,opt,name=bond_penalty_max,json=bondPenaltyMax,proto3" json:"bond_penalty_max,omitempty"`
}

func (x *LiquidityV2Parameters) Reset() {
	*x = LiquidityV2Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityV2Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityV2Parameters) ProtoMessage() {}

func (x *LiquidityV2Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityV2Parameters.ProtoReflect.Descriptor instead.
func (*LiquidityV2Parameters) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{135}
}

func (x *LiquidityV2Parameters) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityV2Parameters) GetMarketSlaParameters() *vega.LiquiditySLAParameters {
	if x != nil {
		return x.MarketSlaParameters
	}
	return nil
}

func (x *LiquidityV2Parameters) GetStakeToVolume() string {
	if x != nil {
		return x.StakeToVolume
	}
	return ""
}

func (x *LiquidityV2Parameters) GetBondPenaltySlope() string {
	if x != nil {
		return x.BondPenaltySlope
	}
	return ""
}

func (x *LiquidityV2Parameters) GetBondPenaltyMax() string {
	if x != nil {
		return x.BondPenaltyMax
	}
	return ""
}

type LiquidityV2PaidFeesStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID these liquidity parameters apply to. Required for key generation
	MarketId string                      `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Stats    *v12.PaidLiquidityFeesStats `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *LiquidityV2PaidFeesStats) Reset() {
	*x = LiquidityV2PaidFeesStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityV2PaidFeesStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityV2PaidFeesStats) ProtoMessage() {}

func (x *LiquidityV2PaidFeesStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityV2PaidFeesStats.ProtoReflect.Descriptor instead.
func (*LiquidityV2PaidFeesStats) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{136}
}

func (x *LiquidityV2PaidFeesStats) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityV2PaidFeesStats) GetStats() *v12.PaidLiquidityFeesStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type LiquidityV2Provisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID these liquidity parameters apply to. Required for key generation
	MarketId            string                     `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	LiquidityProvisions []*vega.LiquidityProvision `protobuf:"bytes,2,rep,name=liquidity_provisions,json=liquidityProvisions,proto3" json:"liquidity_provisions,omitempty"`
}

func (x *LiquidityV2Provisions) Reset() {
	*x = LiquidityV2Provisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityV2Provisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityV2Provisions) ProtoMessage() {}

func (x *LiquidityV2Provisions) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityV2Provisions.ProtoReflect.Descriptor instead.
func (*LiquidityV2Provisions) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{137}
}

func (x *LiquidityV2Provisions) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityV2Provisions) GetLiquidityProvisions() []*vega.LiquidityProvision {
	if x != nil {
		return x.LiquidityProvisions
	}
	return nil
}

type LiquidityV2PendingProvisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID these liquidity parameters apply to. Required for key generation
	MarketId                   string                     `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	PendingLiquidityProvisions []*vega.LiquidityProvision `protobuf:"bytes,2,rep,name=pending_liquidity_provisions,json=pendingLiquidityProvisions,proto3" json:"pending_liquidity_provisions,omitempty"`
}

func (x *LiquidityV2PendingProvisions) Reset() {
	*x = LiquidityV2PendingProvisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityV2PendingProvisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityV2PendingProvisions) ProtoMessage() {}

func (x *LiquidityV2PendingProvisions) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityV2PendingProvisions.ProtoReflect.Descriptor instead.
func (*LiquidityV2PendingProvisions) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{138}
}

func (x *LiquidityV2PendingProvisions) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityV2PendingProvisions) GetPendingLiquidityProvisions() []*vega.LiquidityProvision {
	if x != nil {
		return x.PendingLiquidityProvisions
	}
	return nil
}

type LiquidityV2Performances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID these liquidity parameters apply to. Required for key generation
	MarketId            string                            `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	EpochStartTime      int64                             `protobuf:"varint,2,opt,name=epoch_start_time,json=epochStartTime,proto3" json:"epoch_start_time,omitempty"`
	PerformancePerParty []*LiquidityV2PerformancePerParty `protobuf:"bytes,3,rep,name=performance_per_party,json=performancePerParty,proto3" json:"performance_per_party,omitempty"`
}

func (x *LiquidityV2Performances) Reset() {
	*x = LiquidityV2Performances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityV2Performances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityV2Performances) ProtoMessage() {}

func (x *LiquidityV2Performances) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityV2Performances.ProtoReflect.Descriptor instead.
func (*LiquidityV2Performances) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{139}
}

func (x *LiquidityV2Performances) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityV2Performances) GetEpochStartTime() int64 {
	if x != nil {
		return x.EpochStartTime
	}
	return 0
}

func (x *LiquidityV2Performances) GetPerformancePerParty() []*LiquidityV2PerformancePerParty {
	if x != nil {
		return x.PerformancePerParty
	}
	return nil
}

type LiquidityV2PerformancePerParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party                            string   `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	ElapsedTimeMeetingSlaDuringEpoch int64    `protobuf:"varint,2,opt,name=elapsed_time_meeting_sla_during_epoch,json=elapsedTimeMeetingSlaDuringEpoch,proto3" json:"elapsed_time_meeting_sla_during_epoch,omitempty"`
	CommitmentStartTime              int64    `protobuf:"varint,3,opt,name=commitment_start_time,json=commitmentStartTime,proto3" json:"commitment_start_time,omitempty"`
	RegisteredPenaltiesPerEpoch      []string `protobuf:"bytes,4,rep,name=registered_penalties_per_epoch,json=registeredPenaltiesPerEpoch,proto3" json:"registered_penalties_per_epoch,omitempty"`
	PositionInPenaltiesPerEpoch      uint32   `protobuf:"varint,5,opt,name=position_in_penalties_per_epoch,json=positionInPenaltiesPerEpoch,proto3" json:"position_in_penalties_per_epoch,omitempty"`
	LastEpochFractionOfTimeOnBook    string   `protobuf:"bytes,6,opt,name=last_epoch_fraction_of_time_on_book,json=lastEpochFractionOfTimeOnBook,proto3" json:"last_epoch_fraction_of_time_on_book,omitempty"`
	LastEpochFeePenalty              string   `protobuf:"bytes,7,opt,name=last_epoch_fee_penalty,json=lastEpochFeePenalty,proto3" json:"last_epoch_fee_penalty,omitempty"`
	LastEpochBondPenalty             string   `protobuf:"bytes,8,opt,name=last_epoch_bond_penalty,json=lastEpochBondPenalty,proto3" json:"last_epoch_bond_penalty,omitempty"`
	RequiredLiquidity                string   `protobuf:"bytes,9,opt,name=required_liquidity,json=requiredLiquidity,proto3" json:"required_liquidity,omitempty"`
	NotionalVolumeBuys               string   `protobuf:"bytes,10,opt,name=notional_volume_buys,json=notionalVolumeBuys,proto3" json:"notional_volume_buys,omitempty"`
	NotionalVolumeSells              string   `protobuf:"bytes,11,opt,name=notional_volume_sells,json=notionalVolumeSells,proto3" json:"notional_volume_sells,omitempty"`
}

func (x *LiquidityV2PerformancePerParty) Reset() {
	*x = LiquidityV2PerformancePerParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityV2PerformancePerParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityV2PerformancePerParty) ProtoMessage() {}

func (x *LiquidityV2PerformancePerParty) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityV2PerformancePerParty.ProtoReflect.Descriptor instead.
func (*LiquidityV2PerformancePerParty) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{140}
}

func (x *LiquidityV2PerformancePerParty) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *LiquidityV2PerformancePerParty) GetElapsedTimeMeetingSlaDuringEpoch() int64 {
	if x != nil {
		return x.ElapsedTimeMeetingSlaDuringEpoch
	}
	return 0
}

func (x *LiquidityV2PerformancePerParty) GetCommitmentStartTime() int64 {
	if x != nil {
		return x.CommitmentStartTime
	}
	return 0
}

func (x *LiquidityV2PerformancePerParty) GetRegisteredPenaltiesPerEpoch() []string {
	if x != nil {
		return x.RegisteredPenaltiesPerEpoch
	}
	return nil
}

func (x *LiquidityV2PerformancePerParty) GetPositionInPenaltiesPerEpoch() uint32 {
	if x != nil {
		return x.PositionInPenaltiesPerEpoch
	}
	return 0
}

func (x *LiquidityV2PerformancePerParty) GetLastEpochFractionOfTimeOnBook() string {
	if x != nil {
		return x.LastEpochFractionOfTimeOnBook
	}
	return ""
}

func (x *LiquidityV2PerformancePerParty) GetLastEpochFeePenalty() string {
	if x != nil {
		return x.LastEpochFeePenalty
	}
	return ""
}

func (x *LiquidityV2PerformancePerParty) GetLastEpochBondPenalty() string {
	if x != nil {
		return x.LastEpochBondPenalty
	}
	return ""
}

func (x *LiquidityV2PerformancePerParty) GetRequiredLiquidity() string {
	if x != nil {
		return x.RequiredLiquidity
	}
	return ""
}

func (x *LiquidityV2PerformancePerParty) GetNotionalVolumeBuys() string {
	if x != nil {
		return x.NotionalVolumeBuys
	}
	return ""
}

func (x *LiquidityV2PerformancePerParty) GetNotionalVolumeSells() string {
	if x != nil {
		return x.NotionalVolumeSells
	}
	return ""
}

type LiquidityV2Scores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID these liquidity parameters apply to. Required for key generation
	MarketId                string            `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	RunningAverageCounter   int32             `protobuf:"varint,2,opt,name=running_average_counter,json=runningAverageCounter,proto3" json:"running_average_counter,omitempty"`
	Scores                  []*LiquidityScore `protobuf:"bytes,3,rep,name=scores,proto3" json:"scores,omitempty"`
	LastFeeDistributionTime int64             `protobuf:"varint,4,opt,name=last_fee_distribution_time,json=lastFeeDistributionTime,proto3" json:"last_fee_distribution_time,omitempty"`
	FeeCalculationTimeStep  int64             `protobuf:"varint,5,opt,name=fee_calculation_time_step,json=feeCalculationTimeStep,proto3" json:"fee_calculation_time_step,omitempty"`
}

func (x *LiquidityV2Scores) Reset() {
	*x = LiquidityV2Scores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityV2Scores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityV2Scores) ProtoMessage() {}

func (x *LiquidityV2Scores) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityV2Scores.ProtoReflect.Descriptor instead.
func (*LiquidityV2Scores) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{141}
}

func (x *LiquidityV2Scores) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityV2Scores) GetRunningAverageCounter() int32 {
	if x != nil {
		return x.RunningAverageCounter
	}
	return 0
}

func (x *LiquidityV2Scores) GetScores() []*LiquidityScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *LiquidityV2Scores) GetLastFeeDistributionTime() int64 {
	if x != nil {
		return x.LastFeeDistributionTime
	}
	return 0
}

func (x *LiquidityV2Scores) GetFeeCalculationTimeStep() int64 {
	if x != nil {
		return x.FeeCalculationTimeStep
	}
	return 0
}

type LiquidityV2Supplied struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID these liquidity parameters apply to. Required for key generation
	MarketId         string                            `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	ConsensusReached bool                              `protobuf:"varint,2,opt,name=consensus_reached,json=consensusReached,proto3" json:"consensus_reached,omitempty"`
	BidCache         []*LiquidityOffsetProbabilityPair `protobuf:"bytes,3,rep,name=bid_cache,json=bidCache,proto3" json:"bid_cache,omitempty"`
	AskCache         []*LiquidityOffsetProbabilityPair `protobuf:"bytes,4,rep,name=ask_cache,json=askCache,proto3" json:"ask_cache,omitempty"`
}

func (x *LiquidityV2Supplied) Reset() {
	*x = LiquidityV2Supplied{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityV2Supplied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityV2Supplied) ProtoMessage() {}

func (x *LiquidityV2Supplied) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityV2Supplied.ProtoReflect.Descriptor instead.
func (*LiquidityV2Supplied) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{142}
}

func (x *LiquidityV2Supplied) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityV2Supplied) GetConsensusReached() bool {
	if x != nil {
		return x.ConsensusReached
	}
	return false
}

func (x *LiquidityV2Supplied) GetBidCache() []*LiquidityOffsetProbabilityPair {
	if x != nil {
		return x.BidCache
	}
	return nil
}

func (x *LiquidityV2Supplied) GetAskCache() []*LiquidityOffsetProbabilityPair {
	if x != nil {
		return x.AskCache
	}
	return nil
}

// Snapshot payload for floating point consensus
type FloatingPointConsensus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextTimeTrigger []*NextTimeTrigger       `protobuf:"bytes,1,rep,name=next_time_trigger,json=nextTimeTrigger,proto3" json:"next_time_trigger,omitempty"`
	StateVariables  []*StateVarInternalState `protobuf:"bytes,2,rep,name=state_variables,json=stateVariables,proto3" json:"state_variables,omitempty"`
}

func (x *FloatingPointConsensus) Reset() {
	*x = FloatingPointConsensus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingPointConsensus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingPointConsensus) ProtoMessage() {}

func (x *FloatingPointConsensus) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingPointConsensus.ProtoReflect.Descriptor instead.
func (*FloatingPointConsensus) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{143}
}

func (x *FloatingPointConsensus) GetNextTimeTrigger() []*NextTimeTrigger {
	if x != nil {
		return x.NextTimeTrigger
	}
	return nil
}

func (x *FloatingPointConsensus) GetStateVariables() []*StateVarInternalState {
	if x != nil {
		return x.StateVariables
	}
	return nil
}

type StateVarInternalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State                       int32                           `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	EventId                     string                          `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ValidatorsResults           []*FloatingPointValidatorResult `protobuf:"bytes,4,rep,name=validators_results,json=validatorsResults,proto3" json:"validators_results,omitempty"`
	RoundsSinceMeaningfulUpdate int32                           `protobuf:"varint,5,opt,name=rounds_since_meaningful_update,json=roundsSinceMeaningfulUpdate,proto3" json:"rounds_since_meaningful_update,omitempty"`
}

func (x *StateVarInternalState) Reset() {
	*x = StateVarInternalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateVarInternalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateVarInternalState) ProtoMessage() {}

func (x *StateVarInternalState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateVarInternalState.ProtoReflect.Descriptor instead.
func (*StateVarInternalState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{144}
}

func (x *StateVarInternalState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StateVarInternalState) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *StateVarInternalState) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *StateVarInternalState) GetValidatorsResults() []*FloatingPointValidatorResult {
	if x != nil {
		return x.ValidatorsResults
	}
	return nil
}

func (x *StateVarInternalState) GetRoundsSinceMeaningfulUpdate() int32 {
	if x != nil {
		return x.RoundsSinceMeaningfulUpdate
	}
	return 0
}

type FloatingPointValidatorResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Bundle []*vega.KeyValueBundle `protobuf:"bytes,2,rep,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *FloatingPointValidatorResult) Reset() {
	*x = FloatingPointValidatorResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatingPointValidatorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatingPointValidatorResult) ProtoMessage() {}

func (x *FloatingPointValidatorResult) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatingPointValidatorResult.ProtoReflect.Descriptor instead.
func (*FloatingPointValidatorResult) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{145}
}

func (x *FloatingPointValidatorResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FloatingPointValidatorResult) GetBundle() []*vega.KeyValueBundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type NextTimeTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset       string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Market      string `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	NextTrigger int64  `protobuf:"varint,4,opt,name=next_trigger,json=nextTrigger,proto3" json:"next_trigger,omitempty"`
}

func (x *NextTimeTrigger) Reset() {
	*x = NextTimeTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextTimeTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextTimeTrigger) ProtoMessage() {}

func (x *NextTimeTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextTimeTrigger.ProtoReflect.Descriptor instead.
func (*NextTimeTrigger) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{146}
}

func (x *NextTimeTrigger) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *NextTimeTrigger) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *NextTimeTrigger) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NextTimeTrigger) GetNextTrigger() int64 {
	if x != nil {
		return x.NextTrigger
	}
	return 0
}

type MarketTracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketActivity                   []*v11.MarketActivityTracker            `protobuf:"bytes,1,rep,name=market_activity,json=marketActivity,proto3" json:"market_activity,omitempty"`
	TakerNotionalVolume              []*v11.TakerNotionalVolume              `protobuf:"bytes,2,rep,name=taker_notional_volume,json=takerNotionalVolume,proto3" json:"taker_notional_volume,omitempty"`
	MarketToPartyTakerNotionalVolume []*v11.MarketToPartyTakerNotionalVolume `protobuf:"bytes,3,rep,name=market_to_party_taker_notional_volume,json=marketToPartyTakerNotionalVolume,proto3" json:"market_to_party_taker_notional_volume,omitempty"`
}

func (x *MarketTracker) Reset() {
	*x = MarketTracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTracker) ProtoMessage() {}

func (x *MarketTracker) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTracker.ProtoReflect.Descriptor instead.
func (*MarketTracker) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{147}
}

func (x *MarketTracker) GetMarketActivity() []*v11.MarketActivityTracker {
	if x != nil {
		return x.MarketActivity
	}
	return nil
}

func (x *MarketTracker) GetTakerNotionalVolume() []*v11.TakerNotionalVolume {
	if x != nil {
		return x.TakerNotionalVolume
	}
	return nil
}

func (x *MarketTracker) GetMarketToPartyTakerNotionalVolume() []*v11.MarketToPartyTakerNotionalVolume {
	if x != nil {
		return x.MarketToPartyTakerNotionalVolume
	}
	return nil
}

type SignerEventsPerAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Events  []*v12.ERC20MultiSigSignerEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *SignerEventsPerAddress) Reset() {
	*x = SignerEventsPerAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignerEventsPerAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignerEventsPerAddress) ProtoMessage() {}

func (x *SignerEventsPerAddress) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignerEventsPerAddress.ProtoReflect.Descriptor instead.
func (*SignerEventsPerAddress) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{148}
}

func (x *SignerEventsPerAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SignerEventsPerAddress) GetEvents() []*v12.ERC20MultiSigSignerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ERC20MultiSigTopologyVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signers          []string                            `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty"`
	EventsPerAddress []*SignerEventsPerAddress           `protobuf:"bytes,2,rep,name=events_per_address,json=eventsPerAddress,proto3" json:"events_per_address,omitempty"`
	Threshold        *v12.ERC20MultiSigThresholdSetEvent `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	SeenEvents       []string                            `protobuf:"bytes,4,rep,name=seen_events,json=seenEvents,proto3" json:"seen_events,omitempty"`
}

func (x *ERC20MultiSigTopologyVerified) Reset() {
	*x = ERC20MultiSigTopologyVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20MultiSigTopologyVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20MultiSigTopologyVerified) ProtoMessage() {}

func (x *ERC20MultiSigTopologyVerified) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20MultiSigTopologyVerified.ProtoReflect.Descriptor instead.
func (*ERC20MultiSigTopologyVerified) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{149}
}

func (x *ERC20MultiSigTopologyVerified) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *ERC20MultiSigTopologyVerified) GetEventsPerAddress() []*SignerEventsPerAddress {
	if x != nil {
		return x.EventsPerAddress
	}
	return nil
}

func (x *ERC20MultiSigTopologyVerified) GetThreshold() *v12.ERC20MultiSigThresholdSetEvent {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *ERC20MultiSigTopologyVerified) GetSeenEvents() []string {
	if x != nil {
		return x.SeenEvents
	}
	return nil
}

type ERC20MultiSigTopologyPending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingSigners         []*v12.ERC20MultiSigSignerEvent       `protobuf:"bytes,1,rep,name=pending_signers,json=pendingSigners,proto3" json:"pending_signers,omitempty"`
	PendingThresholdSet    []*v12.ERC20MultiSigThresholdSetEvent `protobuf:"bytes,2,rep,name=pending_threshold_set,json=pendingThresholdSet,proto3" json:"pending_threshold_set,omitempty"`
	WitnessedSigners       []string                              `protobuf:"bytes,3,rep,name=witnessed_signers,json=witnessedSigners,proto3" json:"witnessed_signers,omitempty"`
	WitnessedThresholdSets []string                              `protobuf:"bytes,4,rep,name=witnessed_threshold_sets,json=witnessedThresholdSets,proto3" json:"witnessed_threshold_sets,omitempty"`
}

func (x *ERC20MultiSigTopologyPending) Reset() {
	*x = ERC20MultiSigTopologyPending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20MultiSigTopologyPending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20MultiSigTopologyPending) ProtoMessage() {}

func (x *ERC20MultiSigTopologyPending) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20MultiSigTopologyPending.ProtoReflect.Descriptor instead.
func (*ERC20MultiSigTopologyPending) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{150}
}

func (x *ERC20MultiSigTopologyPending) GetPendingSigners() []*v12.ERC20MultiSigSignerEvent {
	if x != nil {
		return x.PendingSigners
	}
	return nil
}

func (x *ERC20MultiSigTopologyPending) GetPendingThresholdSet() []*v12.ERC20MultiSigThresholdSetEvent {
	if x != nil {
		return x.PendingThresholdSet
	}
	return nil
}

func (x *ERC20MultiSigTopologyPending) GetWitnessedSigners() []string {
	if x != nil {
		return x.WitnessedSigners
	}
	return nil
}

func (x *ERC20MultiSigTopologyPending) GetWitnessedThresholdSets() []string {
	if x != nil {
		return x.WitnessedThresholdSets
	}
	return nil
}

type ProofOfWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight       []uint64                `protobuf:"varint,1,rep,packed,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash         []string                `protobuf:"bytes,2,rep,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxAtHeight        []*TransactionsAtHeight `protobuf:"bytes,4,rep,name=tx_at_height,json=txAtHeight,proto3" json:"tx_at_height,omitempty"`
	TidAtHeight       []*TransactionsAtHeight `protobuf:"bytes,6,rep,name=tid_at_height,json=tidAtHeight,proto3" json:"tid_at_height,omitempty"`
	Banned            []*BannedParty          `protobuf:"bytes,7,rep,name=banned,proto3" json:"banned,omitempty"`
	PowParams         []*ProofOfWorkParams    `protobuf:"bytes,8,rep,name=pow_params,json=powParams,proto3" json:"pow_params,omitempty"`
	PowState          []*ProofOfWorkState     `protobuf:"bytes,9,rep,name=pow_state,json=powState,proto3" json:"pow_state,omitempty"`
	LastPruningBlock  uint64                  `protobuf:"varint,10,opt,name=last_pruning_block,json=lastPruningBlock,proto3" json:"last_pruning_block,omitempty"`
	NonceRefsAtHeight []*NonceRefsAtHeight    `protobuf:"bytes,11,rep,name=nonce_refs_at_height,json=nonceRefsAtHeight,proto3" json:"nonce_refs_at_height,omitempty"`
}

func (x *ProofOfWork) Reset() {
	*x = ProofOfWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfWork) ProtoMessage() {}

func (x *ProofOfWork) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfWork.ProtoReflect.Descriptor instead.
func (*ProofOfWork) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{151}
}

func (x *ProofOfWork) GetBlockHeight() []uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return nil
}

func (x *ProofOfWork) GetBlockHash() []string {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ProofOfWork) GetTxAtHeight() []*TransactionsAtHeight {
	if x != nil {
		return x.TxAtHeight
	}
	return nil
}

func (x *ProofOfWork) GetTidAtHeight() []*TransactionsAtHeight {
	if x != nil {
		return x.TidAtHeight
	}
	return nil
}

func (x *ProofOfWork) GetBanned() []*BannedParty {
	if x != nil {
		return x.Banned
	}
	return nil
}

func (x *ProofOfWork) GetPowParams() []*ProofOfWorkParams {
	if x != nil {
		return x.PowParams
	}
	return nil
}

func (x *ProofOfWork) GetPowState() []*ProofOfWorkState {
	if x != nil {
		return x.PowState
	}
	return nil
}

func (x *ProofOfWork) GetLastPruningBlock() uint64 {
	if x != nil {
		return x.LastPruningBlock
	}
	return 0
}

func (x *ProofOfWork) GetNonceRefsAtHeight() []*NonceRefsAtHeight {
	if x != nil {
		return x.NonceRefsAtHeight
	}
	return nil
}

type BannedParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Until int64  `protobuf:"varint,2,opt,name=until,proto3" json:"until,omitempty"`
}

func (x *BannedParty) Reset() {
	*x = BannedParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannedParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannedParty) ProtoMessage() {}

func (x *BannedParty) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannedParty.ProtoReflect.Descriptor instead.
func (*BannedParty) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{152}
}

func (x *BannedParty) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *BannedParty) GetUntil() int64 {
	if x != nil {
		return x.Until
	}
	return 0
}

type ProofOfWorkParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpamPowNumberOfPastBlocks   uint64 `protobuf:"varint,1,opt,name=spam_pow_number_of_past_blocks,json=spamPowNumberOfPastBlocks,proto3" json:"spam_pow_number_of_past_blocks,omitempty"`
	SpamPowDifficulty           uint32 `protobuf:"varint,2,opt,name=spam_pow_difficulty,json=spamPowDifficulty,proto3" json:"spam_pow_difficulty,omitempty"`
	SpamPowHashFunction         string `protobuf:"bytes,3,opt,name=spam_pow_hash_function,json=spamPowHashFunction,proto3" json:"spam_pow_hash_function,omitempty"`
	SpamPowNumberOfTxPerBlock   uint64 `protobuf:"varint,4,opt,name=spam_pow_number_of_tx_per_block,json=spamPowNumberOfTxPerBlock,proto3" json:"spam_pow_number_of_tx_per_block,omitempty"`
	SpamPowIncreasingDifficulty bool   `protobuf:"varint,5,opt,name=spam_pow_increasing_difficulty,json=spamPowIncreasingDifficulty,proto3" json:"spam_pow_increasing_difficulty,omitempty"`
	FromBlock                   uint64 `protobuf:"varint,6,opt,name=from_block,json=fromBlock,proto3" json:"from_block,omitempty"`
	UntilBlock                  int64  `protobuf:"varint,7,opt,name=until_block,json=untilBlock,proto3" json:"until_block,omitempty"`
}

func (x *ProofOfWorkParams) Reset() {
	*x = ProofOfWorkParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfWorkParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfWorkParams) ProtoMessage() {}

func (x *ProofOfWorkParams) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfWorkParams.ProtoReflect.Descriptor instead.
func (*ProofOfWorkParams) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{153}
}

func (x *ProofOfWorkParams) GetSpamPowNumberOfPastBlocks() uint64 {
	if x != nil {
		return x.SpamPowNumberOfPastBlocks
	}
	return 0
}

func (x *ProofOfWorkParams) GetSpamPowDifficulty() uint32 {
	if x != nil {
		return x.SpamPowDifficulty
	}
	return 0
}

func (x *ProofOfWorkParams) GetSpamPowHashFunction() string {
	if x != nil {
		return x.SpamPowHashFunction
	}
	return ""
}

func (x *ProofOfWorkParams) GetSpamPowNumberOfTxPerBlock() uint64 {
	if x != nil {
		return x.SpamPowNumberOfTxPerBlock
	}
	return 0
}

func (x *ProofOfWorkParams) GetSpamPowIncreasingDifficulty() bool {
	if x != nil {
		return x.SpamPowIncreasingDifficulty
	}
	return false
}

func (x *ProofOfWorkParams) GetFromBlock() uint64 {
	if x != nil {
		return x.FromBlock
	}
	return 0
}

func (x *ProofOfWorkParams) GetUntilBlock() int64 {
	if x != nil {
		return x.UntilBlock
	}
	return 0
}

type ProofOfWorkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowState []*ProofOfWorkBlockState `protobuf:"bytes,1,rep,name=pow_state,json=powState,proto3" json:"pow_state,omitempty"`
}

func (x *ProofOfWorkState) Reset() {
	*x = ProofOfWorkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfWorkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfWorkState) ProtoMessage() {}

func (x *ProofOfWorkState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfWorkState.ProtoReflect.Descriptor instead.
func (*ProofOfWorkState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{154}
}

func (x *ProofOfWorkState) GetPowState() []*ProofOfWorkBlockState {
	if x != nil {
		return x.PowState
	}
	return nil
}

type ProofOfWorkBlockState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64                           `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	PartyState  []*ProofOfWorkPartyStateForBlock `protobuf:"bytes,2,rep,name=party_state,json=partyState,proto3" json:"party_state,omitempty"`
}

func (x *ProofOfWorkBlockState) Reset() {
	*x = ProofOfWorkBlockState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfWorkBlockState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfWorkBlockState) ProtoMessage() {}

func (x *ProofOfWorkBlockState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfWorkBlockState.ProtoReflect.Descriptor instead.
func (*ProofOfWorkBlockState) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{155}
}

func (x *ProofOfWorkBlockState) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ProofOfWorkBlockState) GetPartyState() []*ProofOfWorkPartyStateForBlock {
	if x != nil {
		return x.PartyState
	}
	return nil
}

type ProofOfWorkPartyStateForBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party              string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	SeenCount          uint64 `protobuf:"varint,2,opt,name=seen_count,json=seenCount,proto3" json:"seen_count,omitempty"`
	ObservedDifficulty uint64 `protobuf:"varint,3,opt,name=observed_difficulty,json=observedDifficulty,proto3" json:"observed_difficulty,omitempty"`
}

func (x *ProofOfWorkPartyStateForBlock) Reset() {
	*x = ProofOfWorkPartyStateForBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfWorkPartyStateForBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfWorkPartyStateForBlock) ProtoMessage() {}

func (x *ProofOfWorkPartyStateForBlock) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfWorkPartyStateForBlock.ProtoReflect.Descriptor instead.
func (*ProofOfWorkPartyStateForBlock) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{156}
}

func (x *ProofOfWorkPartyStateForBlock) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *ProofOfWorkPartyStateForBlock) GetSeenCount() uint64 {
	if x != nil {
		return x.SeenCount
	}
	return 0
}

func (x *ProofOfWorkPartyStateForBlock) GetObservedDifficulty() uint64 {
	if x != nil {
		return x.ObservedDifficulty
	}
	return 0
}

type TransactionsAtHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height       uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Transactions []string `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *TransactionsAtHeight) Reset() {
	*x = TransactionsAtHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsAtHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsAtHeight) ProtoMessage() {}

func (x *TransactionsAtHeight) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsAtHeight.ProtoReflect.Descriptor instead.
func (*TransactionsAtHeight) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{157}
}

func (x *TransactionsAtHeight) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TransactionsAtHeight) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type NonceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NonceRef) Reset() {
	*x = NonceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRef) ProtoMessage() {}

func (x *NonceRef) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRef.ProtoReflect.Descriptor instead.
func (*NonceRef) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{158}
}

func (x *NonceRef) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *NonceRef) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type NonceRefsAtHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64      `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Refs   []*NonceRef `protobuf:"bytes,2,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *NonceRefsAtHeight) Reset() {
	*x = NonceRefsAtHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceRefsAtHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceRefsAtHeight) ProtoMessage() {}

func (x *NonceRefsAtHeight) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceRefsAtHeight.ProtoReflect.Descriptor instead.
func (*NonceRefsAtHeight) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{159}
}

func (x *NonceRefsAtHeight) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NonceRefsAtHeight) GetRefs() []*NonceRef {
	if x != nil {
		return x.Refs
	}
	return nil
}

type ProtocolUpgradeProposals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveProposals  []*v12.ProtocolUpgradeEvent      `protobuf:"bytes,1,rep,name=active_proposals,json=activeProposals,proto3" json:"active_proposals,omitempty"`
	AcceptedProposal *AcceptedProtocolUpgradeProposal `protobuf:"bytes,2,opt,name=accepted_proposal,json=acceptedProposal,proto3" json:"accepted_proposal,omitempty"`
}

func (x *ProtocolUpgradeProposals) Reset() {
	*x = ProtocolUpgradeProposals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolUpgradeProposals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolUpgradeProposals) ProtoMessage() {}

func (x *ProtocolUpgradeProposals) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolUpgradeProposals.ProtoReflect.Descriptor instead.
func (*ProtocolUpgradeProposals) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{160}
}

func (x *ProtocolUpgradeProposals) GetActiveProposals() []*v12.ProtocolUpgradeEvent {
	if x != nil {
		return x.ActiveProposals
	}
	return nil
}

func (x *ProtocolUpgradeProposals) GetAcceptedProposal() *AcceptedProtocolUpgradeProposal {
	if x != nil {
		return x.AcceptedProposal
	}
	return nil
}

type AcceptedProtocolUpgradeProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block height at which to perform the upgrade
	UpgradeBlockHeight uint64 `protobuf:"varint,1,opt,name=upgrade_block_height,json=upgradeBlockHeight,proto3" json:"upgrade_block_height,omitempty"`
	// Release tag for the vega binary
	VegaReleaseTag string `protobuf:"bytes,2,opt,name=vega_release_tag,json=vegaReleaseTag,proto3" json:"vega_release_tag,omitempty"`
}

func (x *AcceptedProtocolUpgradeProposal) Reset() {
	*x = AcceptedProtocolUpgradeProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptedProtocolUpgradeProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptedProtocolUpgradeProposal) ProtoMessage() {}

func (x *AcceptedProtocolUpgradeProposal) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptedProtocolUpgradeProposal.ProtoReflect.Descriptor instead.
func (*AcceptedProtocolUpgradeProposal) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{161}
}

func (x *AcceptedProtocolUpgradeProposal) GetUpgradeBlockHeight() uint64 {
	if x != nil {
		return x.UpgradeBlockHeight
	}
	return 0
}

func (x *AcceptedProtocolUpgradeProposal) GetVegaReleaseTag() string {
	if x != nil {
		return x.VegaReleaseTag
	}
	return ""
}

type Teams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *Teams) Reset() {
	*x = Teams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Teams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Teams) ProtoMessage() {}

func (x *Teams) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Teams.ProtoReflect.Descriptor instead.
func (*Teams) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{162}
}

func (x *Teams) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Referrer  *Membership   `protobuf:"bytes,2,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Referees  []*Membership `protobuf:"bytes,3,rep,name=referees,proto3" json:"referees,omitempty"`
	Name      string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	TeamUrl   string        `protobuf:"bytes,5,opt,name=team_url,json=teamUrl,proto3" json:"team_url,omitempty"`
	AvatarUrl string        `protobuf:"bytes,6,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	CreatedAt int64         `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Closed    bool          `protobuf:"varint,8,opt,name=closed,proto3" json:"closed,omitempty"`
	AllowList []string      `protobuf:"bytes,9,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{163}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetReferrer() *Membership {
	if x != nil {
		return x.Referrer
	}
	return nil
}

func (x *Team) GetReferees() []*Membership {
	if x != nil {
		return x.Referees
	}
	return nil
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetTeamUrl() string {
	if x != nil {
		return x.TeamUrl
	}
	return ""
}

func (x *Team) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Team) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Team) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Team) GetAllowList() []string {
	if x != nil {
		return x.AllowList
	}
	return nil
}

type Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId        string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	JoinedAt       int64  `protobuf:"varint,2,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	StartedAtEpoch uint64 `protobuf:"varint,3,opt,name=started_at_epoch,json=startedAtEpoch,proto3" json:"started_at_epoch,omitempty"`
}

func (x *Membership) Reset() {
	*x = Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{164}
}

func (x *Membership) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Membership) GetJoinedAt() int64 {
	if x != nil {
		return x.JoinedAt
	}
	return 0
}

func (x *Membership) GetStartedAtEpoch() uint64 {
	if x != nil {
		return x.StartedAtEpoch
	}
	return 0
}

type TeamSwitches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamSwitches []*TeamSwitch `protobuf:"bytes,1,rep,name=team_switches,json=teamSwitches,proto3" json:"team_switches,omitempty"`
}

func (x *TeamSwitches) Reset() {
	*x = TeamSwitches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSwitches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSwitches) ProtoMessage() {}

func (x *TeamSwitches) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSwitches.ProtoReflect.Descriptor instead.
func (*TeamSwitches) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{165}
}

func (x *TeamSwitches) GetTeamSwitches() []*TeamSwitch {
	if x != nil {
		return x.TeamSwitches
	}
	return nil
}

type TeamSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromTeamId string `protobuf:"bytes,1,opt,name=from_team_id,json=fromTeamId,proto3" json:"from_team_id,omitempty"`
	ToTeamId   string `protobuf:"bytes,2,opt,name=to_team_id,json=toTeamId,proto3" json:"to_team_id,omitempty"`
	PartyId    string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *TeamSwitch) Reset() {
	*x = TeamSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSwitch) ProtoMessage() {}

func (x *TeamSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSwitch.ProtoReflect.Descriptor instead.
func (*TeamSwitch) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{166}
}

func (x *TeamSwitch) GetFromTeamId() string {
	if x != nil {
		return x.FromTeamId
	}
	return ""
}

func (x *TeamSwitch) GetToTeamId() string {
	if x != nil {
		return x.ToTeamId
	}
	return ""
}

func (x *TeamSwitch) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

type Vesting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartiesReward []*PartyReward `protobuf:"bytes,1,rep,name=parties_reward,json=partiesReward,proto3" json:"parties_reward,omitempty"`
}

func (x *Vesting) Reset() {
	*x = Vesting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting) ProtoMessage() {}

func (x *Vesting) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting.ProtoReflect.Descriptor instead.
func (*Vesting) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{167}
}

func (x *Vesting) GetPartiesReward() []*PartyReward {
	if x != nil {
		return x.PartiesReward
	}
	return nil
}

type PartyReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party       string         `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	AssetLocked []*AssetLocked `protobuf:"bytes,2,rep,name=asset_locked,json=assetLocked,proto3" json:"asset_locked,omitempty"`
	InVesting   []*InVesting   `protobuf:"bytes,3,rep,name=in_vesting,json=inVesting,proto3" json:"in_vesting,omitempty"`
}

func (x *PartyReward) Reset() {
	*x = PartyReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyReward) ProtoMessage() {}

func (x *PartyReward) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyReward.ProtoReflect.Descriptor instead.
func (*PartyReward) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{168}
}

func (x *PartyReward) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyReward) GetAssetLocked() []*AssetLocked {
	if x != nil {
		return x.AssetLocked
	}
	return nil
}

func (x *PartyReward) GetInVesting() []*InVesting {
	if x != nil {
		return x.InVesting
	}
	return nil
}

type ReferralProgramData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactorByReferee    []*FactorByReferee    `protobuf:"bytes,1,rep,name=factor_by_referee,json=factorByReferee,proto3" json:"factor_by_referee,omitempty"`
	CurrentProgram     *vega.ReferralProgram `protobuf:"bytes,2,opt,name=current_program,json=currentProgram,proto3" json:"current_program,omitempty"`
	NewProgram         *vega.ReferralProgram `protobuf:"bytes,3,opt,name=new_program,json=newProgram,proto3" json:"new_program,omitempty"`
	LastProgramVersion uint64                `protobuf:"varint,4,opt,name=last_program_version,json=lastProgramVersion,proto3" json:"last_program_version,omitempty"`
	ProgramHasEnded    bool                  `protobuf:"varint,5,opt,name=program_has_ended,json=programHasEnded,proto3" json:"program_has_ended,omitempty"`
	Sets               []*ReferralSet        `protobuf:"bytes,6,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *ReferralProgramData) Reset() {
	*x = ReferralProgramData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralProgramData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralProgramData) ProtoMessage() {}

func (x *ReferralProgramData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralProgramData.ProtoReflect.Descriptor instead.
func (*ReferralProgramData) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{169}
}

func (x *ReferralProgramData) GetFactorByReferee() []*FactorByReferee {
	if x != nil {
		return x.FactorByReferee
	}
	return nil
}

func (x *ReferralProgramData) GetCurrentProgram() *vega.ReferralProgram {
	if x != nil {
		return x.CurrentProgram
	}
	return nil
}

func (x *ReferralProgramData) GetNewProgram() *vega.ReferralProgram {
	if x != nil {
		return x.NewProgram
	}
	return nil
}

func (x *ReferralProgramData) GetLastProgramVersion() uint64 {
	if x != nil {
		return x.LastProgramVersion
	}
	return 0
}

func (x *ReferralProgramData) GetProgramHasEnded() bool {
	if x != nil {
		return x.ProgramHasEnded
	}
	return false
}

func (x *ReferralProgramData) GetSets() []*ReferralSet {
	if x != nil {
		return x.Sets
	}
	return nil
}

type ReferralSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                      int64            `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                      int64            `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Referrer                       *Membership      `protobuf:"bytes,4,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Referees                       []*Membership    `protobuf:"bytes,5,rep,name=referees,proto3" json:"referees,omitempty"`
	RunningVolumes                 []*RunningVolume `protobuf:"bytes,6,rep,name=running_volumes,json=runningVolumes,proto3" json:"running_volumes,omitempty"`
	CurrentRewardFactor            string           `protobuf:"bytes,7,opt,name=current_reward_factor,json=currentRewardFactor,proto3" json:"current_reward_factor,omitempty"`
	CurrentRewardsMultiplier       string           `protobuf:"bytes,8,opt,name=current_rewards_multiplier,json=currentRewardsMultiplier,proto3" json:"current_rewards_multiplier,omitempty"`
	CurrentRewardsFactorMultiplier string           `protobuf:"bytes,9,opt,name=current_rewards_factor_multiplier,json=currentRewardsFactorMultiplier,proto3" json:"current_rewards_factor_multiplier,omitempty"`
}

func (x *ReferralSet) Reset() {
	*x = ReferralSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralSet) ProtoMessage() {}

func (x *ReferralSet) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralSet.ProtoReflect.Descriptor instead.
func (*ReferralSet) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{170}
}

func (x *ReferralSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReferralSet) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ReferralSet) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ReferralSet) GetReferrer() *Membership {
	if x != nil {
		return x.Referrer
	}
	return nil
}

func (x *ReferralSet) GetReferees() []*Membership {
	if x != nil {
		return x.Referees
	}
	return nil
}

func (x *ReferralSet) GetRunningVolumes() []*RunningVolume {
	if x != nil {
		return x.RunningVolumes
	}
	return nil
}

func (x *ReferralSet) GetCurrentRewardFactor() string {
	if x != nil {
		return x.CurrentRewardFactor
	}
	return ""
}

func (x *ReferralSet) GetCurrentRewardsMultiplier() string {
	if x != nil {
		return x.CurrentRewardsMultiplier
	}
	return ""
}

func (x *ReferralSet) GetCurrentRewardsFactorMultiplier() string {
	if x != nil {
		return x.CurrentRewardsFactorMultiplier
	}
	return ""
}

type RunningVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Volume []byte `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *RunningVolume) Reset() {
	*x = RunningVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunningVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningVolume) ProtoMessage() {}

func (x *RunningVolume) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningVolume.ProtoReflect.Descriptor instead.
func (*RunningVolume) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{171}
}

func (x *RunningVolume) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *RunningVolume) GetVolume() []byte {
	if x != nil {
		return x.Volume
	}
	return nil
}

type FactorByReferee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party          string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	DiscountFactor []byte `protobuf:"bytes,2,opt,name=discount_factor,json=discountFactor,proto3" json:"discount_factor,omitempty"`
	TakerVolume    []byte `protobuf:"bytes,3,opt,name=taker_volume,json=takerVolume,proto3" json:"taker_volume,omitempty"`
}

func (x *FactorByReferee) Reset() {
	*x = FactorByReferee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactorByReferee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactorByReferee) ProtoMessage() {}

func (x *FactorByReferee) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactorByReferee.ProtoReflect.Descriptor instead.
func (*FactorByReferee) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{172}
}

func (x *FactorByReferee) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *FactorByReferee) GetDiscountFactor() []byte {
	if x != nil {
		return x.DiscountFactor
	}
	return nil
}

func (x *FactorByReferee) GetTakerVolume() []byte {
	if x != nil {
		return x.TakerVolume
	}
	return nil
}

type AssetLocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset         string          `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	EpochBalances []*EpochBalance `protobuf:"bytes,2,rep,name=epoch_balances,json=epochBalances,proto3" json:"epoch_balances,omitempty"`
}

func (x *AssetLocked) Reset() {
	*x = AssetLocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLocked) ProtoMessage() {}

func (x *AssetLocked) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLocked.ProtoReflect.Descriptor instead.
func (*AssetLocked) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{173}
}

func (x *AssetLocked) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AssetLocked) GetEpochBalances() []*EpochBalance {
	if x != nil {
		return x.EpochBalances
	}
	return nil
}

type EpochBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch   uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *EpochBalance) Reset() {
	*x = EpochBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochBalance) ProtoMessage() {}

func (x *EpochBalance) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochBalance.ProtoReflect.Descriptor instead.
func (*EpochBalance) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{174}
}

func (x *EpochBalance) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *EpochBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type InVesting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset   string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *InVesting) Reset() {
	*x = InVesting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InVesting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InVesting) ProtoMessage() {}

func (x *InVesting) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InVesting.ProtoReflect.Descriptor instead.
func (*InVesting) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{175}
}

func (x *InVesting) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *InVesting) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type ActivityStreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartiesActivityStreak []*PartyActivityStreak `protobuf:"bytes,1,rep,name=parties_activity_streak,json=partiesActivityStreak,proto3" json:"parties_activity_streak,omitempty"`
}

func (x *ActivityStreak) Reset() {
	*x = ActivityStreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityStreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityStreak) ProtoMessage() {}

func (x *ActivityStreak) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityStreak.ProtoReflect.Descriptor instead.
func (*ActivityStreak) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{176}
}

func (x *ActivityStreak) GetPartiesActivityStreak() []*PartyActivityStreak {
	if x != nil {
		return x.PartiesActivityStreak
	}
	return nil
}

type PartyActivityStreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party                        string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Active                       uint64 `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	Inactive                     uint64 `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	RewardDistributionMultiplier []byte `protobuf:"bytes,4,opt,name=reward_distribution_multiplier,json=rewardDistributionMultiplier,proto3" json:"reward_distribution_multiplier,omitempty"`
	RewardVestingMultiplier      []byte `protobuf:"bytes,5,opt,name=reward_vesting_multiplier,json=rewardVestingMultiplier,proto3" json:"reward_vesting_multiplier,omitempty"`
}

func (x *PartyActivityStreak) Reset() {
	*x = PartyActivityStreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyActivityStreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyActivityStreak) ProtoMessage() {}

func (x *PartyActivityStreak) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyActivityStreak.ProtoReflect.Descriptor instead.
func (*PartyActivityStreak) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{177}
}

func (x *PartyActivityStreak) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyActivityStreak) GetActive() uint64 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *PartyActivityStreak) GetInactive() uint64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *PartyActivityStreak) GetRewardDistributionMultiplier() []byte {
	if x != nil {
		return x.RewardDistributionMultiplier
	}
	return nil
}

func (x *PartyActivityStreak) GetRewardVestingMultiplier() []byte {
	if x != nil {
		return x.RewardVestingMultiplier
	}
	return nil
}

type VolumeDiscountProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties            []string                    `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	EpochPartyVolumes  []*EpochPartyVolumes        `protobuf:"bytes,2,rep,name=epoch_party_volumes,json=epochPartyVolumes,proto3" json:"epoch_party_volumes,omitempty"`
	EpochDataIndex     uint64                      `protobuf:"varint,3,opt,name=epoch_data_index,json=epochDataIndex,proto3" json:"epoch_data_index,omitempty"`
	AveragePartyVolume []*PartyVolume              `protobuf:"bytes,4,rep,name=average_party_volume,json=averagePartyVolume,proto3" json:"average_party_volume,omitempty"`
	CurrentProgram     *vega.VolumeDiscountProgram `protobuf:"bytes,5,opt,name=current_program,json=currentProgram,proto3" json:"current_program,omitempty"`
	NewProgram         *vega.VolumeDiscountProgram `protobuf:"bytes,6,opt,name=new_program,json=newProgram,proto3" json:"new_program,omitempty"`
	FactorsByParty     []*VolumeDiscountStats      `protobuf:"bytes,7,rep,name=factors_by_party,json=factorsByParty,proto3" json:"factors_by_party,omitempty"`
	LastProgramVersion uint64                      `protobuf:"varint,8,opt,name=last_program_version,json=lastProgramVersion,proto3" json:"last_program_version,omitempty"`
	ProgramHasEnded    bool                        `protobuf:"varint,9,opt,name=program_has_ended,json=programHasEnded,proto3" json:"program_has_ended,omitempty"`
}

func (x *VolumeDiscountProgram) Reset() {
	*x = VolumeDiscountProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeDiscountProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDiscountProgram) ProtoMessage() {}

func (x *VolumeDiscountProgram) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDiscountProgram.ProtoReflect.Descriptor instead.
func (*VolumeDiscountProgram) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{178}
}

func (x *VolumeDiscountProgram) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *VolumeDiscountProgram) GetEpochPartyVolumes() []*EpochPartyVolumes {
	if x != nil {
		return x.EpochPartyVolumes
	}
	return nil
}

func (x *VolumeDiscountProgram) GetEpochDataIndex() uint64 {
	if x != nil {
		return x.EpochDataIndex
	}
	return 0
}

func (x *VolumeDiscountProgram) GetAveragePartyVolume() []*PartyVolume {
	if x != nil {
		return x.AveragePartyVolume
	}
	return nil
}

func (x *VolumeDiscountProgram) GetCurrentProgram() *vega.VolumeDiscountProgram {
	if x != nil {
		return x.CurrentProgram
	}
	return nil
}

func (x *VolumeDiscountProgram) GetNewProgram() *vega.VolumeDiscountProgram {
	if x != nil {
		return x.NewProgram
	}
	return nil
}

func (x *VolumeDiscountProgram) GetFactorsByParty() []*VolumeDiscountStats {
	if x != nil {
		return x.FactorsByParty
	}
	return nil
}

func (x *VolumeDiscountProgram) GetLastProgramVersion() uint64 {
	if x != nil {
		return x.LastProgramVersion
	}
	return 0
}

func (x *VolumeDiscountProgram) GetProgramHasEnded() bool {
	if x != nil {
		return x.ProgramHasEnded
	}
	return false
}

type VolumeDiscountStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party          string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	DiscountFactor string `protobuf:"bytes,2,opt,name=discount_factor,json=discountFactor,proto3" json:"discount_factor,omitempty"`
}

func (x *VolumeDiscountStats) Reset() {
	*x = VolumeDiscountStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeDiscountStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDiscountStats) ProtoMessage() {}

func (x *VolumeDiscountStats) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDiscountStats.ProtoReflect.Descriptor instead.
func (*VolumeDiscountStats) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{179}
}

func (x *VolumeDiscountStats) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *VolumeDiscountStats) GetDiscountFactor() string {
	if x != nil {
		return x.DiscountFactor
	}
	return ""
}

type EpochPartyVolumes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyVolume []*PartyVolume `protobuf:"bytes,1,rep,name=party_volume,json=partyVolume,proto3" json:"party_volume,omitempty"`
}

func (x *EpochPartyVolumes) Reset() {
	*x = EpochPartyVolumes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochPartyVolumes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochPartyVolumes) ProtoMessage() {}

func (x *EpochPartyVolumes) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochPartyVolumes.ProtoReflect.Descriptor instead.
func (*EpochPartyVolumes) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{180}
}

func (x *EpochPartyVolumes) GetPartyVolume() []*PartyVolume {
	if x != nil {
		return x.PartyVolume
	}
	return nil
}

type PartyVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Volume []byte `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *PartyVolume) Reset() {
	*x = PartyVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyVolume) ProtoMessage() {}

func (x *PartyVolume) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyVolume.ProtoReflect.Descriptor instead.
func (*PartyVolume) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{181}
}

func (x *PartyVolume) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyVolume) GetVolume() []byte {
	if x != nil {
		return x.Volume
	}
	return nil
}

type Liquidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId   string                    `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	NetworkPos int64                     `protobuf:"varint,2,opt,name=network_pos,json=networkPos,proto3" json:"network_pos,omitempty"`
	NextStep   int64                     `protobuf:"varint,3,opt,name=next_step,json=nextStep,proto3" json:"next_step,omitempty"`
	Config     *vega.LiquidationStrategy `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *Liquidation) Reset() {
	*x = Liquidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Liquidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Liquidation) ProtoMessage() {}

func (x *Liquidation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Liquidation.ProtoReflect.Descriptor instead.
func (*Liquidation) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{182}
}

func (x *Liquidation) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *Liquidation) GetNetworkPos() int64 {
	if x != nil {
		return x.NetworkPos
	}
	return 0
}

func (x *Liquidation) GetNextStep() int64 {
	if x != nil {
		return x.NextStep
	}
	return 0
}

func (x *Liquidation) GetConfig() *vega.LiquidationStrategy {
	if x != nil {
		return x.Config
	}
	return nil
}

type PartyAssetAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Asset  string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PartyAssetAmount) Reset() {
	*x = PartyAssetAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAssetAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAssetAmount) ProtoMessage() {}

func (x *PartyAssetAmount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAssetAmount.ProtoReflect.Descriptor instead.
func (*PartyAssetAmount) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{183}
}

func (x *PartyAssetAmount) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyAssetAmount) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *PartyAssetAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type BankingTransferFeeDiscounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyAssetDiscount []*PartyAssetAmount `protobuf:"bytes,1,rep,name=party_asset_discount,json=partyAssetDiscount,proto3" json:"party_asset_discount,omitempty"`
}

func (x *BankingTransferFeeDiscounts) Reset() {
	*x = BankingTransferFeeDiscounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingTransferFeeDiscounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingTransferFeeDiscounts) ProtoMessage() {}

func (x *BankingTransferFeeDiscounts) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingTransferFeeDiscounts.ProtoReflect.Descriptor instead.
func (*BankingTransferFeeDiscounts) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{184}
}

func (x *BankingTransferFeeDiscounts) GetPartyAssetDiscount() []*PartyAssetAmount {
	if x != nil {
		return x.PartyAssetDiscount
	}
	return nil
}

type CompositePriceCalculator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompositePrice        string                            `protobuf:"bytes,1,opt,name=composite_price,json=compositePrice,proto3" json:"composite_price,omitempty"`
	PriceConfiguration    *vega.CompositePriceConfiguration `protobuf:"bytes,2,opt,name=price_configuration,json=priceConfiguration,proto3" json:"price_configuration,omitempty"`
	Trades                []*vega.Trade                     `protobuf:"bytes,3,rep,name=trades,proto3" json:"trades,omitempty"`
	PriceSources          []string                          `protobuf:"bytes,4,rep,name=price_sources,json=priceSources,proto3" json:"price_sources,omitempty"`
	PriceSourceLastUpdate []int64                           `protobuf:"varint,5,rep,packed,name=price_source_last_update,json=priceSourceLastUpdate,proto3" json:"price_source_last_update,omitempty"`
	BookPriceAtTime       []*TimePrice                      `protobuf:"bytes,6,rep,name=book_price_at_time,json=bookPriceAtTime,proto3" json:"book_price_at_time,omitempty"`
}

func (x *CompositePriceCalculator) Reset() {
	*x = CompositePriceCalculator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositePriceCalculator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositePriceCalculator) ProtoMessage() {}

func (x *CompositePriceCalculator) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositePriceCalculator.ProtoReflect.Descriptor instead.
func (*CompositePriceCalculator) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{185}
}

func (x *CompositePriceCalculator) GetCompositePrice() string {
	if x != nil {
		return x.CompositePrice
	}
	return ""
}

func (x *CompositePriceCalculator) GetPriceConfiguration() *vega.CompositePriceConfiguration {
	if x != nil {
		return x.PriceConfiguration
	}
	return nil
}

func (x *CompositePriceCalculator) GetTrades() []*vega.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *CompositePriceCalculator) GetPriceSources() []string {
	if x != nil {
		return x.PriceSources
	}
	return nil
}

func (x *CompositePriceCalculator) GetPriceSourceLastUpdate() []int64 {
	if x != nil {
		return x.PriceSourceLastUpdate
	}
	return nil
}

func (x *CompositePriceCalculator) GetBookPriceAtTime() []*TimePrice {
	if x != nil {
		return x.BookPriceAtTime
	}
	return nil
}

type Parties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*PartyProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *Parties) Reset() {
	*x = Parties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parties) ProtoMessage() {}

func (x *Parties) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parties.ProtoReflect.Descriptor instead.
func (*Parties) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{186}
}

func (x *Parties) GetProfiles() []*PartyProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type PartyProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId  string           `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Alias    string           `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Metadata []*vega.Metadata `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PartyProfile) Reset() {
	*x = PartyProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyProfile) ProtoMessage() {}

func (x *PartyProfile) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyProfile.ProtoReflect.Descriptor instead.
func (*PartyProfile) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{187}
}

func (x *PartyProfile) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyProfile) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PartyProfile) GetMetadata() []*vega.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AMMValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	Stake string `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
	Score string `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
	Tick  int64  `protobuf:"varint,4,opt,name=tick,proto3" json:"tick,omitempty"`
}

func (x *AMMValues) Reset() {
	*x = AMMValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AMMValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AMMValues) ProtoMessage() {}

func (x *AMMValues) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AMMValues.ProtoReflect.Descriptor instead.
func (*AMMValues) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{188}
}

func (x *AMMValues) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *AMMValues) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

func (x *AMMValues) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *AMMValues) GetTick() int64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

type MarketLiquidity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tick int64        `protobuf:"varint,1,opt,name=tick,proto3" json:"tick,omitempty"`
	Amm  []*AMMValues `protobuf:"bytes,2,rep,name=amm,proto3" json:"amm,omitempty"`
}

func (x *MarketLiquidity) Reset() {
	*x = MarketLiquidity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketLiquidity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketLiquidity) ProtoMessage() {}

func (x *MarketLiquidity) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketLiquidity.ProtoReflect.Descriptor instead.
func (*MarketLiquidity) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{189}
}

func (x *MarketLiquidity) GetTick() int64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *MarketLiquidity) GetAmm() []*AMMValues {
	if x != nil {
		return x.Amm
	}
	return nil
}

type PoolMapEntry_Curve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L    string `protobuf:"bytes,1,opt,name=l,proto3" json:"l,omitempty"`
	High string `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
	Low  string `protobuf:"bytes,3,opt,name=low,proto3" json:"low,omitempty"`
	Rf   string `protobuf:"bytes,4,opt,name=rf,proto3" json:"rf,omitempty"`
}

func (x *PoolMapEntry_Curve) Reset() {
	*x = PoolMapEntry_Curve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolMapEntry_Curve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMapEntry_Curve) ProtoMessage() {}

func (x *PoolMapEntry_Curve) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolMapEntry_Curve.ProtoReflect.Descriptor instead.
func (*PoolMapEntry_Curve) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{69, 0}
}

func (x *PoolMapEntry_Curve) GetL() string {
	if x != nil {
		return x.L
	}
	return ""
}

func (x *PoolMapEntry_Curve) GetHigh() string {
	if x != nil {
		return x.High
	}
	return ""
}

func (x *PoolMapEntry_Curve) GetLow() string {
	if x != nil {
		return x.Low
	}
	return ""
}

func (x *PoolMapEntry_Curve) GetRf() string {
	if x != nil {
		return x.Rf
	}
	return ""
}

type PoolMapEntry_Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubAccount string                                       `protobuf:"bytes,2,opt,name=sub_account,json=subAccount,proto3" json:"sub_account,omitempty"`
	Commitment string                                       `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
	Parameters *v12.AMMPool_ConcentratedLiquidityParameters `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	Asset      string                                       `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	Market     string                                       `protobuf:"bytes,6,opt,name=market,proto3" json:"market,omitempty"`
	Lower      *PoolMapEntry_Curve                          `protobuf:"bytes,7,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper      *PoolMapEntry_Curve                          `protobuf:"bytes,8,opt,name=upper,proto3" json:"upper,omitempty"`
	Status     v12.AMMPool_Status                           `protobuf:"varint,9,opt,name=status,proto3,enum=vega.events.v1.AMMPool_Status" json:"status,omitempty"`
}

func (x *PoolMapEntry_Pool) Reset() {
	*x = PoolMapEntry_Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolMapEntry_Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolMapEntry_Pool) ProtoMessage() {}

func (x *PoolMapEntry_Pool) ProtoReflect() protoreflect.Message {
	mi := &file_vega_snapshot_v1_snapshot_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolMapEntry_Pool.ProtoReflect.Descriptor instead.
func (*PoolMapEntry_Pool) Descriptor() ([]byte, []int) {
	return file_vega_snapshot_v1_snapshot_proto_rawDescGZIP(), []int{69, 1}
}

func (x *PoolMapEntry_Pool) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PoolMapEntry_Pool) GetSubAccount() string {
	if x != nil {
		return x.SubAccount
	}
	return ""
}

func (x *PoolMapEntry_Pool) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

func (x *PoolMapEntry_Pool) GetParameters() *v12.AMMPool_ConcentratedLiquidityParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *PoolMapEntry_Pool) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *PoolMapEntry_Pool) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *PoolMapEntry_Pool) GetLower() *PoolMapEntry_Curve {
	if x != nil {
		return x.Lower
	}
	return nil
}

func (x *PoolMapEntry_Pool) GetUpper() *PoolMapEntry_Curve {
	if x != nil {
		return x.Upper
	}
	return nil
}

func (x *PoolMapEntry_Pool) GetStatus() v12.AMMPool_Status {
	if x != nil {
		return x.Status
	}
	return v12.AMMPool_Status(0)
}

var File_vega_snapshot_v1_snapshot_proto protoreflect.FileDescriptor

var file_vega_snapshot_v1_snapshot_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x11, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76, 0x65, 0x67, 0x61,
	0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6c, 0x65, 0x61, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65,
	0x61, 0x66, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22,
	0x56, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x6e, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x6f, 0x66, 0x22, 0x80, 0x36, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x4e, 0x0a,
	0x10, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x65, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x5b, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e,
	0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x57,
	0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x54, 0x0a,
	0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f,
	0x12, 0x51, 0x0a, 0x11, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x45, 0x6e, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6b,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6b,
	0x12, 0x4c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51,
	0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x61, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6d,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x00, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x6d,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x48, 0x00, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x6d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x16,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x23, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x48, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x12, 0x44, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x14, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x1f, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x18, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x5a, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x12,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x11, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x64, 0x0a, 0x18, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x16, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x6d, 0x0a, 0x1b, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x19, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x12, 0x6d, 0x0a, 0x1b, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x19, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x7a, 0x0a, 0x20, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1d, 0x65,
	0x72, 0x63, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x1f,
	0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x72, 0x63, 0x32, 0x30, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f,
	0x66, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x5b, 0x0a, 0x15, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a,
	0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x5b, 0x0a,
	0x15, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x26, 0x62,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x23, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x26, 0x62, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x23, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x19, 0x65, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x16, 0x65, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x72, 0x0a, 0x1e, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x74, 0x68, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x61, 0x0a, 0x17, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x76, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x56, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x15, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x1f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x76, 0x32, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x67, 0x0a, 0x19, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x32, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56,
	0x32, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x17, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x32, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x76, 0x32, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56,
	0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x17,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x15, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x45, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x52,
	0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x61, 0x0a, 0x17, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x15, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x61, 0x0a, 0x17, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x76, 0x32, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x56, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x15,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x76, 0x32, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x61, 0x69, 0x64, 0x46, 0x65,
	0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x18, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x61, 0x69, 0x64, 0x46, 0x65, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1e, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x1b, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x17,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6c, 0x32, 0x5f, 0x65, 0x74, 0x68,
	0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x32, 0x45, 0x74, 0x68, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0c, 0x6c, 0x32, 0x45, 0x74, 0x68, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x62,
	0x0a, 0x18, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x63, 0x48, 0x00, 0x52, 0x15, 0x65, 0x74, 0x68,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x69,
	0x73, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x16, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x4c, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x0f, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52,
	0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65,
	0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x22,
	0xe0, 0x02, 0x0a, 0x13, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x12, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x22, 0x5a, 0x0a, 0x1e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xfb,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x4d,
	0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x08, 0x62, 0x69, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x4d, 0x0a,
	0x09, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x50, 0x0a, 0x0f,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x3d, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa7,
	0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x0e, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x43, 0x0a, 0x07, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x3e, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x22, 0x75, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x37, 0x0a, 0x10,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x0d, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x22, 0x3a, 0x0a, 0x13, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x0a,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x22, 0x42,
	0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x22, 0x69, 0x0a, 0x05, 0x54, 0x78, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x54, 0x0a,
	0x12, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x22, 0x46, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x22, 0x50, 0x0a, 0x0b, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x2d,
	0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x45, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x59, 0x0a,
	0x13, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x19, 0x42, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x12, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x74,
	0x0a, 0x19, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x23, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x12, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x23, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x58, 0x0a, 0x12, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x0a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x70,
	0x22, 0x5c, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x03, 0x79, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x03, 0x79, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x02,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x24, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x51,
	0x0a, 0x11, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x22, 0x50, 0x0a, 0x10, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x65,
	0x0a, 0x15, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x53, 0x0a, 0x1a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x17,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x22, 0xf6, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x03, 0x62, 0x75, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x3b, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x30, 0x0a,
	0x0a, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22,
	0x35, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x70, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x3c, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x53, 0x0a,
	0x09, 0x50, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0xf4, 0x04, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x70, 0x5f, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x0a, 0x66, 0x70, 0x48, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4d, 0x61, 0x70,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x77, 0x12, 0x3c,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x50, 0x61, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0xf8, 0x02, 0x0a, 0x0c, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x32,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x76, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0b,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x76, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x76, 0x70, 0x12, 0x32, 0x0a,
	0x15, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x6c, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x50, 0x52,
	0x03, 0x6c, 0x70, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x5f, 0x6d, 0x76, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x4d, 0x76, 0x70, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xb4,
	0x08, 0x0a, 0x0a, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x24, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x0d, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b,
	0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x62, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x64, 0x42,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x61,
	0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x69,
	0x64, 0x41, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x6f,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e,
	0x65, 0x78, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x14,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x66,
	0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x66, 0x65, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xea, 0x0e, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x24, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x0d, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x73, 0x74,
	0x41, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x64, 0x5f,
	0x62, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x69, 0x64, 0x42, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69,
	0x64, 0x5f, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x41,
	0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x69,
	0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x66, 0x65,
	0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x66, 0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x3d, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x12, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x33,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x09, 0x66, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x53, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x6d,
	0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x7e, 0x0a, 0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x22, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e,
	0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x2c,
	0x0a, 0x03, 0x61, 0x6d, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6d, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x03, 0x61, 0x6d, 0x6d, 0x12, 0x4c, 0x0a, 0x10,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x42, 0x26, 0x0a, 0x24, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x41, 0x6d, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x71, 0x72, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x71, 0x72, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xbb, 0x04, 0x0a, 0x0c, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x4b, 0x0a, 0x05, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x0c, 0x0a,
	0x01, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72,
	0x66, 0x1a, 0x8e, 0x03, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x4d, 0x4d, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x75,
	0x72, 0x76, 0x65, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4d, 0x4d, 0x50,
	0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x38, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x70, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x65, 0x72, 0x70, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x3f, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x5b, 0x0a, 0x10, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x01, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x53,
	0x0a, 0x08, 0x54, 0x57, 0x41, 0x50, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x22, 0xc7, 0x03, 0x0a, 0x05, 0x50, 0x65, 0x72, 0x70, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a,
	0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x57, 0x41, 0x50, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x77, 0x61, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x48, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x77, 0x61, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x57, 0x41, 0x50, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x54, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x11,
	0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x10, 0x61, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x3d, 0x0a,
	0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x42, 0x0a, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x62, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x6c, 0x6c, 0x73, 0x42,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x65, 0x73, 0x5f, 0x61,
	0x62, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x69, 0x73,
	0x65, 0x73, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x73, 0x5f,
	0x62, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0b,
	0x66, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x0b, 0x72,
	0x69, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x41, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x65, 0x73, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x22, 0x40,
	0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x22, 0x62, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x41, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x41, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x12, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x40,
	0x0a, 0x0c, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x30,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x22, 0xad, 0x03, 0x0a, 0x10, 0x53, 0x4c, 0x41, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x62, 0x6f, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x45, 0x78, 0x69, 0x74, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x12,
	0x46, 0x0a, 0x20, 0x6e, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6e, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x4a, 0x0a, 0x22, 0x6e, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1e, 0x6e, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x63, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x43, 0x63, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x22, 0x80, 0x03, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x73,
	0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x6c, 0x61, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x4c, 0x41, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x10, 0x73, 0x6c, 0x61, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x5e, 0x0a, 0x0a, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x62, 0x75,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62,
	0x75, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x53, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x6c, 0x6c, 0x53, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb7, 0x01,
	0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6c,
	0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x77,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0xee, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x22, 0x56, 0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xbd, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x18, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x45, 0x6e,
	0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x7b, 0x0a, 0x15, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12,
	0x62, 0x0a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x16, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x42, 0x0a, 0x12, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc3, 0x04, 0x0a, 0x0a, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x70,
	0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x50,
	0x65, 0x72, 0x70, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6d,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x63, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x41, 0x6d, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x94, 0x04, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x56, 0x6f, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x5f, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x37,
	0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x44,
	0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x47, 0x0a, 0x19, 0x53, 0x70, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x02,
	0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54,
	0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0d, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53,
	0x65, 0x71, 0x22, 0x70, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x53, 0x69, 0x67, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x47, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x12, 0x3d,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x53, 0x69, 0x67,
	0x73, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79, 0x53, 0x69, 0x67, 0x73, 0x22, 0x6d, 0x0a,
	0x16, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x14,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65, 0x67,
	0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x67, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x64, 0x0a,
	0x0c, 0x4c, 0x32, 0x45, 0x74, 0x68, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x54, 0x0a,
	0x14, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x45, 0x74, 0x68, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73,
	0x52, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x45, 0x74, 0x68, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x45,
	0x74, 0x68, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4b,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x6d,
	0x69, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x69,
	0x73, 0x63, 0x52, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x22, 0x5e, 0x0a, 0x1a, 0x45, 0x74, 0x68, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x61, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x45, 0x74, 0x68,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x69,
	0x73, 0x63, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x82, 0x01, 0x0a, 0x16, 0x45, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x1c, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x15, 0x45, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x11, 0x45, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6e, 0x65, 0x77, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xb8, 0x01, 0x0a, 0x1a, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x08, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x5f, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5b, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x71, 0x0a,
	0x1e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x43, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x1f, 0x75, 0x6e, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x75, 0x6e,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x4b, 0x65,
	0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x11, 0x54,
	0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x65, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x24,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x22, 0x9e, 0x01, 0x0a, 0x23, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xf2, 0x03, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x65, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x67, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x6f, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22,
	0x6c, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xae, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x6f, 0x62, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54,
	0x6f, 0x4f, 0x62, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x68,
	0x0a, 0x1a, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x16, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x40, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x7f,
	0x0a, 0x13, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22,
	0xa0, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x41, 0x0a, 0x0e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x15,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x4c, 0x41, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x6f,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53,
	0x6c, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x6f, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x22, 0x75,
	0x0a, 0x18, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x61, 0x69,
	0x64, 0x46, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x14,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x1c, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x56, 0x32, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x56, 0x32, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x93, 0x05, 0x0a,
	0x1e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x25, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c,
	0x61, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x61, 0x44, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x44, 0x0a, 0x1f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x42, 0x6f, 0x6f,
	0x6b, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x46, 0x65, 0x65, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x42, 0x6f, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x62, 0x75, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x75, 0x79, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x6c,
	0x6c, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x56, 0x32, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x66, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x22,
	0xfd, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x56, 0x32, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x4d, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x62, 0x69, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x4d, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22,
	0xb9, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x15,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x66, 0x75, 0x6c,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e,
	0x67, 0x66, 0x75, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x5c, 0x0a, 0x1c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x72, 0x0a, 0x0f, 0x4e, 0x65, 0x78, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xc8, 0x02, 0x0a,
	0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x5b, 0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x13, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x85, 0x01, 0x0a, 0x25, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x80, 0x02,
	0x0a, 0x1d, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x4c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x69, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xbc, 0x02, 0x0a, 0x1c, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x73, 0x22,
	0xa5, 0x04, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x0a, 0x74, 0x78, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x74,
	0x69, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0b, 0x74, 0x69, 0x64, 0x41,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x42,
	0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f, 0x72,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x54, 0x0a, 0x14, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f,
	0x61, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x73, 0x41, 0x74, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x11, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x73, 0x41,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x39, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x74,
	0x69, 0x6c, 0x22, 0x84, 0x03, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x1e, 0x73, 0x70, 0x61, 0x6d,
	0x5f, 0x70, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70,
	0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x19, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x50, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x70, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f,
	0x77, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x70, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x61,
	0x6d, 0x50, 0x6f, 0x77, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x1f, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x73, 0x70, 0x61, 0x6d, 0x50,
	0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x70, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x77,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x70,
	0x61, 0x6d, 0x50, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x58, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x70, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57,
	0x6f, 0x72, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x50, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66,
	0x57, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x36,
	0x0a, 0x08, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x11, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x73, 0x41, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x04, 0x72,
	0x65, 0x66, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x12, 0x4f, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52,
	0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x22, 0x7d, 0x0a, 0x1f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x76, 0x65, 0x67, 0x61, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x61, 0x67,
	0x22, 0x35, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x51, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x0a, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x07, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x44, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x0a, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x69, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xed, 0x02, 0x0a, 0x13, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4d, 0x0a, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x52,
	0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65,
	0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x36, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x6e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x61,
	0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x22, 0xd6, 0x03, 0x0a, 0x0b, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x22, 0x3d, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0x73, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x3e, 0x0a, 0x0c, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x6f, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x12, 0x5d, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x22, 0xe1, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x44, 0x0a, 0x1e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x22, 0xb4, 0x04, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x13, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x52, 0x11, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x3c,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x4f, 0x0a, 0x10,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x48, 0x61, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0x55, 0x0a, 0x11, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x56, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x1b, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xe4, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x6b,
	0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x2a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x09, 0x41,
	0x4d, 0x4d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x22, 0x54,
	0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x03, 0x61, 0x6d, 0x6d, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x4d, 0x4d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x03, 0x61, 0x6d, 0x6d, 0x2a, 0x60, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0x33, 0x5a, 0x31, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_vega_snapshot_v1_snapshot_proto_rawDescOnce sync.Once
	file_vega_snapshot_v1_snapshot_proto_rawDescData = file_vega_snapshot_v1_snapshot_proto_rawDesc
)

func file_vega_snapshot_v1_snapshot_proto_rawDescGZIP() []byte {
	file_vega_snapshot_v1_snapshot_proto_rawDescOnce.Do(func() {
		file_vega_snapshot_v1_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_snapshot_v1_snapshot_proto_rawDescData)
	})
	return file_vega_snapshot_v1_snapshot_proto_rawDescData
}

var file_vega_snapshot_v1_snapshot_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vega_snapshot_v1_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 192)
var file_vega_snapshot_v1_snapshot_proto_goTypes = []interface{}{
	(Format)(0),                                         // 0: vega.snapshot.v1.Format
	(*Snapshot)(nil),                                    // 1: vega.snapshot.v1.Snapshot
	(*NodeHash)(nil),                                    // 2: vega.snapshot.v1.NodeHash
	(*Metadata)(nil),                                    // 3: vega.snapshot.v1.Metadata
	(*Chunk)(nil),                                       // 4: vega.snapshot.v1.Chunk
	(*Payload)(nil),                                     // 5: vega.snapshot.v1.Payload
	(*OrderHoldingQuantities)(nil),                      // 6: vega.snapshot.v1.OrderHoldingQuantities
	(*HoldingAccountTracker)(nil),                       // 7: vega.snapshot.v1.HoldingAccountTracker
	(*TimestampedTotalStake)(nil),                       // 8: vega.snapshot.v1.TimestampedTotalStake
	(*TimestampedOpenInterest)(nil),                     // 9: vega.snapshot.v1.TimestampedOpenInterest
	(*LiquidityTarget)(nil),                             // 10: vega.snapshot.v1.LiquidityTarget
	(*SpotLiquidityTarget)(nil),                         // 11: vega.snapshot.v1.SpotLiquidityTarget
	(*LiquidityOffsetProbabilityPair)(nil),              // 12: vega.snapshot.v1.LiquidityOffsetProbabilityPair
	(*LiquiditySupplied)(nil),                           // 13: vega.snapshot.v1.LiquiditySupplied
	(*OracleDataBatch)(nil),                             // 14: vega.snapshot.v1.OracleDataBatch
	(*OracleData)(nil),                                  // 15: vega.snapshot.v1.OracleData
	(*OracleDataPair)(nil),                              // 16: vega.snapshot.v1.OracleDataPair
	(*Witness)(nil),                                     // 17: vega.snapshot.v1.Witness
	(*Resource)(nil),                                    // 18: vega.snapshot.v1.Resource
	(*EventForwarderBucket)(nil),                        // 19: vega.snapshot.v1.EventForwarderBucket
	(*EventForwarder)(nil),                              // 20: vega.snapshot.v1.EventForwarder
	(*CollateralAccounts)(nil),                          // 21: vega.snapshot.v1.CollateralAccounts
	(*CollateralAssets)(nil),                            // 22: vega.snapshot.v1.CollateralAssets
	(*ActiveAssets)(nil),                                // 23: vega.snapshot.v1.ActiveAssets
	(*PendingAssets)(nil),                               // 24: vega.snapshot.v1.PendingAssets
	(*PendingAssetUpdates)(nil),                         // 25: vega.snapshot.v1.PendingAssetUpdates
	(*Withdrawal)(nil),                                  // 26: vega.snapshot.v1.Withdrawal
	(*Deposit)(nil),                                     // 27: vega.snapshot.v1.Deposit
	(*TxRef)(nil),                                       // 28: vega.snapshot.v1.TxRef
	(*BankingWithdrawals)(nil),                          // 29: vega.snapshot.v1.BankingWithdrawals
	(*BankingDeposits)(nil),                             // 30: vega.snapshot.v1.BankingDeposits
	(*BankingSeen)(nil),                                 // 31: vega.snapshot.v1.BankingSeen
	(*BankingAssetActions)(nil),                         // 32: vega.snapshot.v1.BankingAssetActions
	(*BankingRecurringTransfers)(nil),                   // 33: vega.snapshot.v1.BankingRecurringTransfers
	(*BankingScheduledTransfers)(nil),                   // 34: vega.snapshot.v1.BankingScheduledTransfers
	(*BankingRecurringGovernanceTransfers)(nil),         // 35: vega.snapshot.v1.BankingRecurringGovernanceTransfers
	(*BankingScheduledGovernanceTransfers)(nil),         // 36: vega.snapshot.v1.BankingScheduledGovernanceTransfers
	(*BankingBridgeState)(nil),                          // 37: vega.snapshot.v1.BankingBridgeState
	(*Checkpoint)(nil),                                  // 38: vega.snapshot.v1.Checkpoint
	(*DelegationLastReconciliationTime)(nil),            // 39: vega.snapshot.v1.DelegationLastReconciliationTime
	(*DelegationActive)(nil),                            // 40: vega.snapshot.v1.DelegationActive
	(*DelegationPending)(nil),                           // 41: vega.snapshot.v1.DelegationPending
	(*DelegationAuto)(nil),                              // 42: vega.snapshot.v1.DelegationAuto
	(*ProposalData)(nil),                                // 43: vega.snapshot.v1.ProposalData
	(*GovernanceEnacted)(nil),                           // 44: vega.snapshot.v1.GovernanceEnacted
	(*GovernanceActive)(nil),                            // 45: vega.snapshot.v1.GovernanceActive
	(*BatchProposalData)(nil),                           // 46: vega.snapshot.v1.BatchProposalData
	(*GovernanceBatchActive)(nil),                       // 47: vega.snapshot.v1.GovernanceBatchActive
	(*GovernanceNode)(nil),                              // 48: vega.snapshot.v1.GovernanceNode
	(*StakingAccount)(nil),                              // 49: vega.snapshot.v1.StakingAccount
	(*StakingAccounts)(nil),                             // 50: vega.snapshot.v1.StakingAccounts
	(*MatchingBook)(nil),                                // 51: vega.snapshot.v1.MatchingBook
	(*NetParams)(nil),                                   // 52: vega.snapshot.v1.NetParams
	(*DecimalMap)(nil),                                  // 53: vega.snapshot.v1.DecimalMap
	(*TimePrice)(nil),                                   // 54: vega.snapshot.v1.TimePrice
	(*PriceVolume)(nil),                                 // 55: vega.snapshot.v1.PriceVolume
	(*PriceRange)(nil),                                  // 56: vega.snapshot.v1.PriceRange
	(*PriceBound)(nil),                                  // 57: vega.snapshot.v1.PriceBound
	(*PriceRangeCache)(nil),                             // 58: vega.snapshot.v1.PriceRangeCache
	(*CurrentPrice)(nil),                                // 59: vega.snapshot.v1.CurrentPrice
	(*PastPrice)(nil),                                   // 60: vega.snapshot.v1.PastPrice
	(*PriceMonitor)(nil),                                // 61: vega.snapshot.v1.PriceMonitor
	(*AuctionState)(nil),                                // 62: vega.snapshot.v1.AuctionState
	(*EquityShareLP)(nil),                               // 63: vega.snapshot.v1.EquityShareLP
	(*EquityShare)(nil),                                 // 64: vega.snapshot.v1.EquityShare
	(*FeeSplitter)(nil),                                 // 65: vega.snapshot.v1.FeeSplitter
	(*SpotMarket)(nil),                                  // 66: vega.snapshot.v1.SpotMarket
	(*Market)(nil),                                      // 67: vega.snapshot.v1.Market
	(*PartyMarginFactor)(nil),                           // 68: vega.snapshot.v1.PartyMarginFactor
	(*AmmState)(nil),                                    // 69: vega.snapshot.v1.AmmState
	(*PoolMapEntry)(nil),                                // 70: vega.snapshot.v1.PoolMapEntry
	(*StringMapEntry)(nil),                              // 71: vega.snapshot.v1.StringMapEntry
	(*Product)(nil),                                     // 72: vega.snapshot.v1.Product
	(*DataPoint)(nil),                                   // 73: vega.snapshot.v1.DataPoint
	(*AuctionIntervals)(nil),                            // 74: vega.snapshot.v1.AuctionIntervals
	(*TWAPData)(nil),                                    // 75: vega.snapshot.v1.TWAPData
	(*Perps)(nil),                                       // 76: vega.snapshot.v1.Perps
	(*OrdersAtPrice)(nil),                               // 77: vega.snapshot.v1.OrdersAtPrice
	(*PricedStopOrders)(nil),                            // 78: vega.snapshot.v1.PricedStopOrders
	(*TrailingStopOrders)(nil),                          // 79: vega.snapshot.v1.TrailingStopOrders
	(*OrdersAtOffset)(nil),                              // 80: vega.snapshot.v1.OrdersAtOffset
	(*OffsetsAtPrice)(nil),                              // 81: vega.snapshot.v1.OffsetsAtPrice
	(*StopOrders)(nil),                                  // 82: vega.snapshot.v1.StopOrders
	(*PeggedOrders)(nil),                                // 83: vega.snapshot.v1.PeggedOrders
	(*SLANetworkParams)(nil),                            // 84: vega.snapshot.v1.SLANetworkParams
	(*ExecutionMarkets)(nil),                            // 85: vega.snapshot.v1.ExecutionMarkets
	(*Successors)(nil),                                  // 86: vega.snapshot.v1.Successors
	(*Position)(nil),                                    // 87: vega.snapshot.v1.Position
	(*MarketPositions)(nil),                             // 88: vega.snapshot.v1.MarketPositions
	(*PartyPositionStats)(nil),                          // 89: vega.snapshot.v1.PartyPositionStats
	(*SettlementState)(nil),                             // 90: vega.snapshot.v1.SettlementState
	(*LastSettledPosition)(nil),                         // 91: vega.snapshot.v1.LastSettledPosition
	(*SettlementTrade)(nil),                             // 92: vega.snapshot.v1.SettlementTrade
	(*AppState)(nil),                                    // 93: vega.snapshot.v1.AppState
	(*EpochState)(nil),                                  // 94: vega.snapshot.v1.EpochState
	(*RewardsPendingPayouts)(nil),                       // 95: vega.snapshot.v1.RewardsPendingPayouts
	(*ScheduledRewardsPayout)(nil),                      // 96: vega.snapshot.v1.ScheduledRewardsPayout
	(*RewardsPayout)(nil),                               // 97: vega.snapshot.v1.RewardsPayout
	(*RewardsPartyAmount)(nil),                          // 98: vega.snapshot.v1.RewardsPartyAmount
	(*LimitState)(nil),                                  // 99: vega.snapshot.v1.LimitState
	(*VoteSpamPolicy)(nil),                              // 100: vega.snapshot.v1.VoteSpamPolicy
	(*PartyProposalVoteCount)(nil),                      // 101: vega.snapshot.v1.PartyProposalVoteCount
	(*PartyTokenBalance)(nil),                           // 102: vega.snapshot.v1.PartyTokenBalance
	(*BlockRejectStats)(nil),                            // 103: vega.snapshot.v1.BlockRejectStats
	(*SpamPartyTransactionCount)(nil),                   // 104: vega.snapshot.v1.SpamPartyTransactionCount
	(*SimpleSpamPolicy)(nil),                            // 105: vega.snapshot.v1.SimpleSpamPolicy
	(*NotarySigs)(nil),                                  // 106: vega.snapshot.v1.NotarySigs
	(*Notary)(nil),                                      // 107: vega.snapshot.v1.Notary
	(*StakeVerifierDeposited)(nil),                      // 108: vega.snapshot.v1.StakeVerifierDeposited
	(*StakeVerifierRemoved)(nil),                        // 109: vega.snapshot.v1.StakeVerifierRemoved
	(*StakeVerifierPending)(nil),                        // 110: vega.snapshot.v1.StakeVerifierPending
	(*L2EthOracles)(nil),                                // 111: vega.snapshot.v1.L2EthOracles
	(*ChainIdEthOracles)(nil),                           // 112: vega.snapshot.v1.ChainIdEthOracles
	(*EthOracleVerifierLastBlock)(nil),                  // 113: vega.snapshot.v1.EthOracleVerifierLastBlock
	(*EthOracleVerifierMisc)(nil),                       // 114: vega.snapshot.v1.EthOracleVerifierMisc
	(*EthContractCallResults)(nil),                      // 115: vega.snapshot.v1.EthContractCallResults
	(*EthContractCallResult)(nil),                       // 116: vega.snapshot.v1.EthContractCallResult
	(*EthVerifierBucket)(nil),                           // 117: vega.snapshot.v1.EthVerifierBucket
	(*PendingKeyRotation)(nil),                          // 118: vega.snapshot.v1.PendingKeyRotation
	(*PendingEthereumKeyRotation)(nil),                  // 119: vega.snapshot.v1.PendingEthereumKeyRotation
	(*Topology)(nil),                                    // 120: vega.snapshot.v1.Topology
	(*ToplogySignatures)(nil),                           // 121: vega.snapshot.v1.ToplogySignatures
	(*PendingERC20MultisigControlSignature)(nil),        // 122: vega.snapshot.v1.PendingERC20MultisigControlSignature
	(*IssuedERC20MultisigControlSignature)(nil),         // 123: vega.snapshot.v1.IssuedERC20MultisigControlSignature
	(*ValidatorState)(nil),                              // 124: vega.snapshot.v1.ValidatorState
	(*HeartbeatTracker)(nil),                            // 125: vega.snapshot.v1.HeartbeatTracker
	(*PerformanceStats)(nil),                            // 126: vega.snapshot.v1.PerformanceStats
	(*ValidatorPerformance)(nil),                        // 127: vega.snapshot.v1.ValidatorPerformance
	(*LiquidityParameters)(nil),                         // 128: vega.snapshot.v1.LiquidityParameters
	(*LiquidityPendingProvisions)(nil),                  // 129: vega.snapshot.v1.LiquidityPendingProvisions
	(*LiquidityPartiesLiquidityOrders)(nil),             // 130: vega.snapshot.v1.LiquidityPartiesLiquidityOrders
	(*PartyOrders)(nil),                                 // 131: vega.snapshot.v1.PartyOrders
	(*LiquidityPartiesOrders)(nil),                      // 132: vega.snapshot.v1.LiquidityPartiesOrders
	(*LiquidityProvisions)(nil),                         // 133: vega.snapshot.v1.LiquidityProvisions
	(*LiquidityScores)(nil),                             // 134: vega.snapshot.v1.LiquidityScores
	(*LiquidityScore)(nil),                              // 135: vega.snapshot.v1.LiquidityScore
	(*LiquidityV2Parameters)(nil),                       // 136: vega.snapshot.v1.LiquidityV2Parameters
	(*LiquidityV2PaidFeesStats)(nil),                    // 137: vega.snapshot.v1.LiquidityV2PaidFeesStats
	(*LiquidityV2Provisions)(nil),                       // 138: vega.snapshot.v1.LiquidityV2Provisions
	(*LiquidityV2PendingProvisions)(nil),                // 139: vega.snapshot.v1.LiquidityV2PendingProvisions
	(*LiquidityV2Performances)(nil),                     // 140: vega.snapshot.v1.LiquidityV2Performances
	(*LiquidityV2PerformancePerParty)(nil),              // 141: vega.snapshot.v1.LiquidityV2PerformancePerParty
	(*LiquidityV2Scores)(nil),                           // 142: vega.snapshot.v1.LiquidityV2Scores
	(*LiquidityV2Supplied)(nil),                         // 143: vega.snapshot.v1.LiquidityV2Supplied
	(*FloatingPointConsensus)(nil),                      // 144: vega.snapshot.v1.FloatingPointConsensus
	(*StateVarInternalState)(nil),                       // 145: vega.snapshot.v1.StateVarInternalState
	(*FloatingPointValidatorResult)(nil),                // 146: vega.snapshot.v1.FloatingPointValidatorResult
	(*NextTimeTrigger)(nil),                             // 147: vega.snapshot.v1.NextTimeTrigger
	(*MarketTracker)(nil),                               // 148: vega.snapshot.v1.MarketTracker
	(*SignerEventsPerAddress)(nil),                      // 149: vega.snapshot.v1.SignerEventsPerAddress
	(*ERC20MultiSigTopologyVerified)(nil),               // 150: vega.snapshot.v1.ERC20MultiSigTopologyVerified
	(*ERC20MultiSigTopologyPending)(nil),                // 151: vega.snapshot.v1.ERC20MultiSigTopologyPending
	(*ProofOfWork)(nil),                                 // 152: vega.snapshot.v1.ProofOfWork
	(*BannedParty)(nil),                                 // 153: vega.snapshot.v1.BannedParty
	(*ProofOfWorkParams)(nil),                           // 154: vega.snapshot.v1.ProofOfWorkParams
	(*ProofOfWorkState)(nil),                            // 155: vega.snapshot.v1.ProofOfWorkState
	(*ProofOfWorkBlockState)(nil),                       // 156: vega.snapshot.v1.ProofOfWorkBlockState
	(*ProofOfWorkPartyStateForBlock)(nil),               // 157: vega.snapshot.v1.ProofOfWorkPartyStateForBlock
	(*TransactionsAtHeight)(nil),                        // 158: vega.snapshot.v1.TransactionsAtHeight
	(*NonceRef)(nil),                                    // 159: vega.snapshot.v1.NonceRef
	(*NonceRefsAtHeight)(nil),                           // 160: vega.snapshot.v1.NonceRefsAtHeight
	(*ProtocolUpgradeProposals)(nil),                    // 161: vega.snapshot.v1.ProtocolUpgradeProposals
	(*AcceptedProtocolUpgradeProposal)(nil),             // 162: vega.snapshot.v1.AcceptedProtocolUpgradeProposal
	(*Teams)(nil),                                       // 163: vega.snapshot.v1.Teams
	(*Team)(nil),                                        // 164: vega.snapshot.v1.Team
	(*Membership)(nil),                                  // 165: vega.snapshot.v1.Membership
	(*TeamSwitches)(nil),                                // 166: vega.snapshot.v1.TeamSwitches
	(*TeamSwitch)(nil),                                  // 167: vega.snapshot.v1.TeamSwitch
	(*Vesting)(nil),                                     // 168: vega.snapshot.v1.Vesting
	(*PartyReward)(nil),                                 // 169: vega.snapshot.v1.PartyReward
	(*ReferralProgramData)(nil),                         // 170: vega.snapshot.v1.ReferralProgramData
	(*ReferralSet)(nil),                                 // 171: vega.snapshot.v1.ReferralSet
	(*RunningVolume)(nil),                               // 172: vega.snapshot.v1.RunningVolume
	(*FactorByReferee)(nil),                             // 173: vega.snapshot.v1.FactorByReferee
	(*AssetLocked)(nil),                                 // 174: vega.snapshot.v1.AssetLocked
	(*EpochBalance)(nil),                                // 175: vega.snapshot.v1.EpochBalance
	(*InVesting)(nil),                                   // 176: vega.snapshot.v1.InVesting
	(*ActivityStreak)(nil),                              // 177: vega.snapshot.v1.ActivityStreak
	(*PartyActivityStreak)(nil),                         // 178: vega.snapshot.v1.PartyActivityStreak
	(*VolumeDiscountProgram)(nil),                       // 179: vega.snapshot.v1.VolumeDiscountProgram
	(*VolumeDiscountStats)(nil),                         // 180: vega.snapshot.v1.VolumeDiscountStats
	(*EpochPartyVolumes)(nil),                           // 181: vega.snapshot.v1.EpochPartyVolumes
	(*PartyVolume)(nil),                                 // 182: vega.snapshot.v1.PartyVolume
	(*Liquidation)(nil),                                 // 183: vega.snapshot.v1.Liquidation
	(*PartyAssetAmount)(nil),                            // 184: vega.snapshot.v1.PartyAssetAmount
	(*BankingTransferFeeDiscounts)(nil),                 // 185: vega.snapshot.v1.BankingTransferFeeDiscounts
	(*CompositePriceCalculator)(nil),                    // 186: vega.snapshot.v1.CompositePriceCalculator
	(*Parties)(nil),                                     // 187: vega.snapshot.v1.Parties
	(*PartyProfile)(nil),                                // 188: vega.snapshot.v1.PartyProfile
	(*AMMValues)(nil),                                   // 189: vega.snapshot.v1.AMMValues
	(*MarketLiquidity)(nil),                             // 190: vega.snapshot.v1.MarketLiquidity
	(*PoolMapEntry_Curve)(nil),                          // 191: vega.snapshot.v1.PoolMapEntry.Curve
	(*PoolMapEntry_Pool)(nil),                           // 192: vega.snapshot.v1.PoolMapEntry.Pool
	(*v1.Signer)(nil),                                   // 193: vega.data.v1.Signer
	(*v1.Property)(nil),                                 // 194: vega.data.v1.Property
	(*vega.Account)(nil),                                // 195: vega.Account
	(*vega.Asset)(nil),                                  // 196: vega.Asset
	(*vega.Withdrawal)(nil),                             // 197: vega.Withdrawal
	(*vega.Deposit)(nil),                                // 198: vega.Deposit
	(*v11.AssetAction)(nil),                             // 199: vega.checkpoint.v1.AssetAction
	(*v11.RecurringTransfers)(nil),                      // 200: vega.checkpoint.v1.RecurringTransfers
	(*v11.ScheduledTransferAtTime)(nil),                 // 201: vega.checkpoint.v1.ScheduledTransferAtTime
	(*v11.GovernanceTransfer)(nil),                      // 202: vega.checkpoint.v1.GovernanceTransfer
	(*v11.ScheduledGovernanceTransferAtTime)(nil),       // 203: vega.checkpoint.v1.ScheduledGovernanceTransferAtTime
	(*v11.BridgeState)(nil),                             // 204: vega.checkpoint.v1.BridgeState
	(*vega.Delegation)(nil),                             // 205: vega.Delegation
	(*vega.Proposal)(nil),                               // 206: vega.Proposal
	(*vega.Vote)(nil),                                   // 207: vega.Vote
	(*v12.StakeLinking)(nil),                            // 208: vega.events.v1.StakeLinking
	(*vega.StakeTotalSupply)(nil),                       // 209: vega.StakeTotalSupply
	(*vega.Order)(nil),                                  // 210: vega.Order
	(*vega.NetworkParameter)(nil),                       // 211: vega.NetworkParameter
	(*vega.PriceMonitoringTrigger)(nil),                 // 212: vega.PriceMonitoringTrigger
	(vega.Market_TradingMode)(0),                        // 213: vega.Market.TradingMode
	(vega.AuctionTrigger)(0),                            // 214: vega.AuctionTrigger
	(*vega.AuctionDuration)(nil),                        // 215: vega.AuctionDuration
	(*vega.Market)(nil),                                 // 216: vega.Market
	(*v12.FeesStats)(nil),                               // 217: vega.events.v1.FeesStats
	(*v12.StopOrderEvent)(nil),                          // 218: vega.events.v1.StopOrderEvent
	(*v11.MarketState)(nil),                             // 219: vega.checkpoint.v1.MarketState
	(*v12.ValidatorUpdate)(nil),                         // 220: vega.events.v1.ValidatorUpdate
	(*vega.RankingScore)(nil),                           // 221: vega.RankingScore
	(*vega.LiquidityProvision)(nil),                     // 222: vega.LiquidityProvision
	(*vega.LiquiditySLAParameters)(nil),                 // 223: vega.LiquiditySLAParameters
	(*v12.PaidLiquidityFeesStats)(nil),                  // 224: vega.events.v1.PaidLiquidityFeesStats
	(*vega.KeyValueBundle)(nil),                         // 225: vega.KeyValueBundle
	(*v11.MarketActivityTracker)(nil),                   // 226: vega.checkpoint.v1.MarketActivityTracker
	(*v11.TakerNotionalVolume)(nil),                     // 227: vega.checkpoint.v1.TakerNotionalVolume
	(*v11.MarketToPartyTakerNotionalVolume)(nil),        // 228: vega.checkpoint.v1.MarketToPartyTakerNotionalVolume
	(*v12.ERC20MultiSigSignerEvent)(nil),                // 229: vega.events.v1.ERC20MultiSigSignerEvent
	(*v12.ERC20MultiSigThresholdSetEvent)(nil),          // 230: vega.events.v1.ERC20MultiSigThresholdSetEvent
	(*v12.ProtocolUpgradeEvent)(nil),                    // 231: vega.events.v1.ProtocolUpgradeEvent
	(*vega.ReferralProgram)(nil),                        // 232: vega.ReferralProgram
	(*vega.VolumeDiscountProgram)(nil),                  // 233: vega.VolumeDiscountProgram
	(*vega.LiquidationStrategy)(nil),                    // 234: vega.LiquidationStrategy
	(*vega.CompositePriceConfiguration)(nil),            // 235: vega.CompositePriceConfiguration
	(*vega.Trade)(nil),                                  // 236: vega.Trade
	(*vega.Metadata)(nil),                               // 237: vega.Metadata
	(*v12.AMMPool_ConcentratedLiquidityParameters)(nil), // 238: vega.events.v1.AMMPool.ConcentratedLiquidityParameters
	(v12.AMMPool_Status)(0),                             // 239: vega.events.v1.AMMPool.Status
}
var file_vega_snapshot_v1_snapshot_proto_depIdxs = []int32{
	0,   // 0: vega.snapshot.v1.Snapshot.format:type_name -> vega.snapshot.v1.Format
	2,   // 1: vega.snapshot.v1.Metadata.node_hashes:type_name -> vega.snapshot.v1.NodeHash
	5,   // 2: vega.snapshot.v1.Chunk.data:type_name -> vega.snapshot.v1.Payload
	23,  // 3: vega.snapshot.v1.Payload.active_assets:type_name -> vega.snapshot.v1.ActiveAssets
	24,  // 4: vega.snapshot.v1.Payload.pending_assets:type_name -> vega.snapshot.v1.PendingAssets
	29,  // 5: vega.snapshot.v1.Payload.banking_withdrawals:type_name -> vega.snapshot.v1.BankingWithdrawals
	30,  // 6: vega.snapshot.v1.Payload.banking_deposits:type_name -> vega.snapshot.v1.BankingDeposits
	31,  // 7: vega.snapshot.v1.Payload.banking_seen:type_name -> vega.snapshot.v1.BankingSeen
	32,  // 8: vega.snapshot.v1.Payload.banking_asset_actions:type_name -> vega.snapshot.v1.BankingAssetActions
	38,  // 9: vega.snapshot.v1.Payload.checkpoint:type_name -> vega.snapshot.v1.Checkpoint
	21,  // 10: vega.snapshot.v1.Payload.collateral_accounts:type_name -> vega.snapshot.v1.CollateralAccounts
	22,  // 11: vega.snapshot.v1.Payload.collateral_assets:type_name -> vega.snapshot.v1.CollateralAssets
	40,  // 12: vega.snapshot.v1.Payload.delegation_active:type_name -> vega.snapshot.v1.DelegationActive
	41,  // 13: vega.snapshot.v1.Payload.delegation_pending:type_name -> vega.snapshot.v1.DelegationPending
	42,  // 14: vega.snapshot.v1.Payload.delegation_auto:type_name -> vega.snapshot.v1.DelegationAuto
	45,  // 15: vega.snapshot.v1.Payload.governance_active:type_name -> vega.snapshot.v1.GovernanceActive
	44,  // 16: vega.snapshot.v1.Payload.governance_enacted:type_name -> vega.snapshot.v1.GovernanceEnacted
	50,  // 17: vega.snapshot.v1.Payload.staking_accounts:type_name -> vega.snapshot.v1.StakingAccounts
	51,  // 18: vega.snapshot.v1.Payload.matching_book:type_name -> vega.snapshot.v1.MatchingBook
	52,  // 19: vega.snapshot.v1.Payload.network_parameters:type_name -> vega.snapshot.v1.NetParams
	85,  // 20: vega.snapshot.v1.Payload.execution_markets:type_name -> vega.snapshot.v1.ExecutionMarkets
	88,  // 21: vega.snapshot.v1.Payload.market_positions:type_name -> vega.snapshot.v1.MarketPositions
	93,  // 22: vega.snapshot.v1.Payload.app_state:type_name -> vega.snapshot.v1.AppState
	94,  // 23: vega.snapshot.v1.Payload.epoch:type_name -> vega.snapshot.v1.EpochState
	95,  // 24: vega.snapshot.v1.Payload.rewards_pending_payouts:type_name -> vega.snapshot.v1.RewardsPendingPayouts
	48,  // 25: vega.snapshot.v1.Payload.governance_node:type_name -> vega.snapshot.v1.GovernanceNode
	99,  // 26: vega.snapshot.v1.Payload.limit_state:type_name -> vega.snapshot.v1.LimitState
	100, // 27: vega.snapshot.v1.Payload.vote_spam_policy:type_name -> vega.snapshot.v1.VoteSpamPolicy
	105, // 28: vega.snapshot.v1.Payload.simple_spam_policy:type_name -> vega.snapshot.v1.SimpleSpamPolicy
	107, // 29: vega.snapshot.v1.Payload.notary:type_name -> vega.snapshot.v1.Notary
	20,  // 30: vega.snapshot.v1.Payload.event_forwarder:type_name -> vega.snapshot.v1.EventForwarder
	108, // 31: vega.snapshot.v1.Payload.stake_verifier_deposited:type_name -> vega.snapshot.v1.StakeVerifierDeposited
	109, // 32: vega.snapshot.v1.Payload.stake_verifier_removed:type_name -> vega.snapshot.v1.StakeVerifierRemoved
	17,  // 33: vega.snapshot.v1.Payload.witness:type_name -> vega.snapshot.v1.Witness
	39,  // 34: vega.snapshot.v1.Payload.delegation_last_reconciliation_time:type_name -> vega.snapshot.v1.DelegationLastReconciliationTime
	120, // 35: vega.snapshot.v1.Payload.topology:type_name -> vega.snapshot.v1.Topology
	14,  // 36: vega.snapshot.v1.Payload.oracle_data:type_name -> vega.snapshot.v1.OracleDataBatch
	128, // 37: vega.snapshot.v1.Payload.liquidity_parameters:type_name -> vega.snapshot.v1.LiquidityParameters
	129, // 38: vega.snapshot.v1.Payload.liquidity_pending_provisions:type_name -> vega.snapshot.v1.LiquidityPendingProvisions
	130, // 39: vega.snapshot.v1.Payload.liquidity_parties_liquidity_orders:type_name -> vega.snapshot.v1.LiquidityPartiesLiquidityOrders
	132, // 40: vega.snapshot.v1.Payload.liquidity_parties_orders:type_name -> vega.snapshot.v1.LiquidityPartiesOrders
	133, // 41: vega.snapshot.v1.Payload.liquidity_provisions:type_name -> vega.snapshot.v1.LiquidityProvisions
	13,  // 42: vega.snapshot.v1.Payload.liquidity_supplied:type_name -> vega.snapshot.v1.LiquiditySupplied
	10,  // 43: vega.snapshot.v1.Payload.liquidity_target:type_name -> vega.snapshot.v1.LiquidityTarget
	144, // 44: vega.snapshot.v1.Payload.floating_point_consensus:type_name -> vega.snapshot.v1.FloatingPointConsensus
	148, // 45: vega.snapshot.v1.Payload.market_tracker:type_name -> vega.snapshot.v1.MarketTracker
	33,  // 46: vega.snapshot.v1.Payload.banking_recurring_transfers:type_name -> vega.snapshot.v1.BankingRecurringTransfers
	34,  // 47: vega.snapshot.v1.Payload.banking_scheduled_transfers:type_name -> vega.snapshot.v1.BankingScheduledTransfers
	150, // 48: vega.snapshot.v1.Payload.erc20_multisig_topology_verified:type_name -> vega.snapshot.v1.ERC20MultiSigTopologyVerified
	151, // 49: vega.snapshot.v1.Payload.erc20_multisig_topology_pending:type_name -> vega.snapshot.v1.ERC20MultiSigTopologyPending
	152, // 50: vega.snapshot.v1.Payload.proof_of_work:type_name -> vega.snapshot.v1.ProofOfWork
	25,  // 51: vega.snapshot.v1.Payload.pending_asset_updates:type_name -> vega.snapshot.v1.PendingAssetUpdates
	161, // 52: vega.snapshot.v1.Payload.protocol_upgrade_proposals:type_name -> vega.snapshot.v1.ProtocolUpgradeProposals
	37,  // 53: vega.snapshot.v1.Payload.banking_bridge_state:type_name -> vega.snapshot.v1.BankingBridgeState
	90,  // 54: vega.snapshot.v1.Payload.settlement_state:type_name -> vega.snapshot.v1.SettlementState
	134, // 55: vega.snapshot.v1.Payload.liquidity_scores:type_name -> vega.snapshot.v1.LiquidityScores
	11,  // 56: vega.snapshot.v1.Payload.spot_liquidity_target:type_name -> vega.snapshot.v1.SpotLiquidityTarget
	35,  // 57: vega.snapshot.v1.Payload.banking_recurring_governance_transfers:type_name -> vega.snapshot.v1.BankingRecurringGovernanceTransfers
	36,  // 58: vega.snapshot.v1.Payload.banking_scheduled_governance_transfers:type_name -> vega.snapshot.v1.BankingScheduledGovernanceTransfers
	115, // 59: vega.snapshot.v1.Payload.eth_contract_call_results:type_name -> vega.snapshot.v1.EthContractCallResults
	113, // 60: vega.snapshot.v1.Payload.eth_oracle_verifier_last_block:type_name -> vega.snapshot.v1.EthOracleVerifierLastBlock
	138, // 61: vega.snapshot.v1.Payload.liquidity_v2_provisions:type_name -> vega.snapshot.v1.LiquidityV2Provisions
	139, // 62: vega.snapshot.v1.Payload.liquidity_v2_pending_provisions:type_name -> vega.snapshot.v1.LiquidityV2PendingProvisions
	140, // 63: vega.snapshot.v1.Payload.liquidity_v2_performances:type_name -> vega.snapshot.v1.LiquidityV2Performances
	143, // 64: vega.snapshot.v1.Payload.liquidity_v2_supplied:type_name -> vega.snapshot.v1.LiquidityV2Supplied
	142, // 65: vega.snapshot.v1.Payload.liquidity_v2_scores:type_name -> vega.snapshot.v1.LiquidityV2Scores
	7,   // 66: vega.snapshot.v1.Payload.holding_account_tracker:type_name -> vega.snapshot.v1.HoldingAccountTracker
	163, // 67: vega.snapshot.v1.Payload.teams:type_name -> vega.snapshot.v1.Teams
	166, // 68: vega.snapshot.v1.Payload.team_switches:type_name -> vega.snapshot.v1.TeamSwitches
	168, // 69: vega.snapshot.v1.Payload.vesting:type_name -> vega.snapshot.v1.Vesting
	170, // 70: vega.snapshot.v1.Payload.referral_program:type_name -> vega.snapshot.v1.ReferralProgramData
	177, // 71: vega.snapshot.v1.Payload.activity_streak:type_name -> vega.snapshot.v1.ActivityStreak
	179, // 72: vega.snapshot.v1.Payload.volume_discount_program:type_name -> vega.snapshot.v1.VolumeDiscountProgram
	136, // 73: vega.snapshot.v1.Payload.liquidity_v2_parameters:type_name -> vega.snapshot.v1.LiquidityV2Parameters
	137, // 74: vega.snapshot.v1.Payload.liquidity_v2_paid_fees_stats:type_name -> vega.snapshot.v1.LiquidityV2PaidFeesStats
	183, // 75: vega.snapshot.v1.Payload.liquidation:type_name -> vega.snapshot.v1.Liquidation
	185, // 76: vega.snapshot.v1.Payload.banking_transfer_fee_discounts:type_name -> vega.snapshot.v1.BankingTransferFeeDiscounts
	47,  // 77: vega.snapshot.v1.Payload.governance_batch_active:type_name -> vega.snapshot.v1.GovernanceBatchActive
	187, // 78: vega.snapshot.v1.Payload.parties:type_name -> vega.snapshot.v1.Parties
	111, // 79: vega.snapshot.v1.Payload.l2_eth_oracles:type_name -> vega.snapshot.v1.L2EthOracles
	114, // 80: vega.snapshot.v1.Payload.eth_oracle_verifier_misc:type_name -> vega.snapshot.v1.EthOracleVerifierMisc
	6,   // 81: vega.snapshot.v1.HoldingAccountTracker.order_holding:type_name -> vega.snapshot.v1.OrderHoldingQuantities
	9,   // 82: vega.snapshot.v1.LiquidityTarget.previous_open_interests:type_name -> vega.snapshot.v1.TimestampedOpenInterest
	9,   // 83: vega.snapshot.v1.LiquidityTarget.max_open_interests:type_name -> vega.snapshot.v1.TimestampedOpenInterest
	8,   // 84: vega.snapshot.v1.SpotLiquidityTarget.previous_total_stake:type_name -> vega.snapshot.v1.TimestampedTotalStake
	8,   // 85: vega.snapshot.v1.SpotLiquidityTarget.max_total_stake:type_name -> vega.snapshot.v1.TimestampedTotalStake
	12,  // 86: vega.snapshot.v1.LiquiditySupplied.bid_cache:type_name -> vega.snapshot.v1.LiquidityOffsetProbabilityPair
	12,  // 87: vega.snapshot.v1.LiquiditySupplied.ask_cache:type_name -> vega.snapshot.v1.LiquidityOffsetProbabilityPair
	15,  // 88: vega.snapshot.v1.OracleDataBatch.oracle_data:type_name -> vega.snapshot.v1.OracleData
	193, // 89: vega.snapshot.v1.OracleData.signers:type_name -> vega.data.v1.Signer
	16,  // 90: vega.snapshot.v1.OracleData.data:type_name -> vega.snapshot.v1.OracleDataPair
	194, // 91: vega.snapshot.v1.OracleData.meta_data:type_name -> vega.data.v1.Property
	18,  // 92: vega.snapshot.v1.Witness.resources:type_name -> vega.snapshot.v1.Resource
	19,  // 93: vega.snapshot.v1.EventForwarder.buckets:type_name -> vega.snapshot.v1.EventForwarderBucket
	195, // 94: vega.snapshot.v1.CollateralAccounts.accounts:type_name -> vega.Account
	196, // 95: vega.snapshot.v1.CollateralAssets.assets:type_name -> vega.Asset
	196, // 96: vega.snapshot.v1.ActiveAssets.assets:type_name -> vega.Asset
	196, // 97: vega.snapshot.v1.PendingAssets.assets:type_name -> vega.Asset
	196, // 98: vega.snapshot.v1.PendingAssetUpdates.assets:type_name -> vega.Asset
	197, // 99: vega.snapshot.v1.Withdrawal.withdrawal:type_name -> vega.Withdrawal
	198, // 100: vega.snapshot.v1.Deposit.deposit:type_name -> vega.Deposit
	26,  // 101: vega.snapshot.v1.BankingWithdrawals.withdrawals:type_name -> vega.snapshot.v1.Withdrawal
	27,  // 102: vega.snapshot.v1.BankingDeposits.deposit:type_name -> vega.snapshot.v1.Deposit
	199, // 103: vega.snapshot.v1.BankingAssetActions.asset_action:type_name -> vega.checkpoint.v1.AssetAction
	200, // 104: vega.snapshot.v1.BankingRecurringTransfers.recurring_transfers:type_name -> vega.checkpoint.v1.RecurringTransfers
	201, // 105: vega.snapshot.v1.BankingScheduledTransfers.transfers_at_time:type_name -> vega.checkpoint.v1.ScheduledTransferAtTime
	202, // 106: vega.snapshot.v1.BankingRecurringGovernanceTransfers.recurring_transfers:type_name -> vega.checkpoint.v1.GovernanceTransfer
	203, // 107: vega.snapshot.v1.BankingScheduledGovernanceTransfers.transfers_at_time:type_name -> vega.checkpoint.v1.ScheduledGovernanceTransferAtTime
	204, // 108: vega.snapshot.v1.BankingBridgeState.bridge_state:type_name -> vega.checkpoint.v1.BridgeState
	205, // 109: vega.snapshot.v1.DelegationActive.delegations:type_name -> vega.Delegation
	205, // 110: vega.snapshot.v1.DelegationPending.delegations:type_name -> vega.Delegation
	205, // 111: vega.snapshot.v1.DelegationPending.undelegation:type_name -> vega.Delegation
	206, // 112: vega.snapshot.v1.ProposalData.proposal:type_name -> vega.Proposal
	207, // 113: vega.snapshot.v1.ProposalData.yes:type_name -> vega.Vote
	207, // 114: vega.snapshot.v1.ProposalData.no:type_name -> vega.Vote
	207, // 115: vega.snapshot.v1.ProposalData.invalid:type_name -> vega.Vote
	43,  // 116: vega.snapshot.v1.GovernanceEnacted.proposals:type_name -> vega.snapshot.v1.ProposalData
	43,  // 117: vega.snapshot.v1.GovernanceActive.proposals:type_name -> vega.snapshot.v1.ProposalData
	43,  // 118: vega.snapshot.v1.BatchProposalData.batch_proposal:type_name -> vega.snapshot.v1.ProposalData
	206, // 119: vega.snapshot.v1.BatchProposalData.proposals:type_name -> vega.Proposal
	46,  // 120: vega.snapshot.v1.GovernanceBatchActive.batch_proposals:type_name -> vega.snapshot.v1.BatchProposalData
	206, // 121: vega.snapshot.v1.GovernanceNode.proposals:type_name -> vega.Proposal
	43,  // 122: vega.snapshot.v1.GovernanceNode.proposal_data:type_name -> vega.snapshot.v1.ProposalData
	208, // 123: vega.snapshot.v1.StakingAccount.events:type_name -> vega.events.v1.StakeLinking
	49,  // 124: vega.snapshot.v1.StakingAccounts.accounts:type_name -> vega.snapshot.v1.StakingAccount
	209, // 125: vega.snapshot.v1.StakingAccounts.pending_stake_total_supply:type_name -> vega.StakeTotalSupply
	210, // 126: vega.snapshot.v1.MatchingBook.buy:type_name -> vega.Order
	210, // 127: vega.snapshot.v1.MatchingBook.sell:type_name -> vega.Order
	211, // 128: vega.snapshot.v1.NetParams.params:type_name -> vega.NetworkParameter
	212, // 129: vega.snapshot.v1.PriceBound.trigger:type_name -> vega.PriceMonitoringTrigger
	57,  // 130: vega.snapshot.v1.PriceRangeCache.bound:type_name -> vega.snapshot.v1.PriceBound
	56,  // 131: vega.snapshot.v1.PriceRangeCache.range:type_name -> vega.snapshot.v1.PriceRange
	53,  // 132: vega.snapshot.v1.PriceMonitor.fp_horizons:type_name -> vega.snapshot.v1.DecimalMap
	57,  // 133: vega.snapshot.v1.PriceMonitor.bounds:type_name -> vega.snapshot.v1.PriceBound
	58,  // 134: vega.snapshot.v1.PriceMonitor.price_range_cache:type_name -> vega.snapshot.v1.PriceRangeCache
	53,  // 135: vega.snapshot.v1.PriceMonitor.ref_price_cache:type_name -> vega.snapshot.v1.DecimalMap
	59,  // 136: vega.snapshot.v1.PriceMonitor.prices_now:type_name -> vega.snapshot.v1.CurrentPrice
	60,  // 137: vega.snapshot.v1.PriceMonitor.prices_past:type_name -> vega.snapshot.v1.PastPrice
	213, // 138: vega.snapshot.v1.AuctionState.mode:type_name -> vega.Market.TradingMode
	213, // 139: vega.snapshot.v1.AuctionState.default_mode:type_name -> vega.Market.TradingMode
	214, // 140: vega.snapshot.v1.AuctionState.trigger:type_name -> vega.AuctionTrigger
	215, // 141: vega.snapshot.v1.AuctionState.end:type_name -> vega.AuctionDuration
	214, // 142: vega.snapshot.v1.AuctionState.extension:type_name -> vega.AuctionTrigger
	63,  // 143: vega.snapshot.v1.EquityShare.lps:type_name -> vega.snapshot.v1.EquityShareLP
	216, // 144: vega.snapshot.v1.SpotMarket.market:type_name -> vega.Market
	61,  // 145: vega.snapshot.v1.SpotMarket.price_monitor:type_name -> vega.snapshot.v1.PriceMonitor
	62,  // 146: vega.snapshot.v1.SpotMarket.auction_state:type_name -> vega.snapshot.v1.AuctionState
	83,  // 147: vega.snapshot.v1.SpotMarket.pegged_orders:type_name -> vega.snapshot.v1.PeggedOrders
	210, // 148: vega.snapshot.v1.SpotMarket.expiring_orders:type_name -> vega.Order
	64,  // 149: vega.snapshot.v1.SpotMarket.equity_share:type_name -> vega.snapshot.v1.EquityShare
	65,  // 150: vega.snapshot.v1.SpotMarket.fee_splitter:type_name -> vega.snapshot.v1.FeeSplitter
	82,  // 151: vega.snapshot.v1.SpotMarket.stop_orders:type_name -> vega.snapshot.v1.StopOrders
	210, // 152: vega.snapshot.v1.SpotMarket.expiring_stop_orders:type_name -> vega.Order
	217, // 153: vega.snapshot.v1.SpotMarket.fees_stats:type_name -> vega.events.v1.FeesStats
	216, // 154: vega.snapshot.v1.Market.market:type_name -> vega.Market
	61,  // 155: vega.snapshot.v1.Market.price_monitor:type_name -> vega.snapshot.v1.PriceMonitor
	62,  // 156: vega.snapshot.v1.Market.auction_state:type_name -> vega.snapshot.v1.AuctionState
	83,  // 157: vega.snapshot.v1.Market.pegged_orders:type_name -> vega.snapshot.v1.PeggedOrders
	210, // 158: vega.snapshot.v1.Market.expiring_orders:type_name -> vega.Order
	64,  // 159: vega.snapshot.v1.Market.equity_share:type_name -> vega.snapshot.v1.EquityShare
	65,  // 160: vega.snapshot.v1.Market.fee_splitter:type_name -> vega.snapshot.v1.FeeSplitter
	82,  // 161: vega.snapshot.v1.Market.stop_orders:type_name -> vega.snapshot.v1.StopOrders
	210, // 162: vega.snapshot.v1.Market.expiring_stop_orders:type_name -> vega.Order
	72,  // 163: vega.snapshot.v1.Market.product:type_name -> vega.snapshot.v1.Product
	217, // 164: vega.snapshot.v1.Market.fees_stats:type_name -> vega.events.v1.FeesStats
	68,  // 165: vega.snapshot.v1.Market.party_margin_factor:type_name -> vega.snapshot.v1.PartyMarginFactor
	186, // 166: vega.snapshot.v1.Market.mark_price_calculator:type_name -> vega.snapshot.v1.CompositePriceCalculator
	186, // 167: vega.snapshot.v1.Market.internal_composite_price_calculator:type_name -> vega.snapshot.v1.CompositePriceCalculator
	69,  // 168: vega.snapshot.v1.Market.amm:type_name -> vega.snapshot.v1.AmmState
	190, // 169: vega.snapshot.v1.Market.market_liquidity:type_name -> vega.snapshot.v1.MarketLiquidity
	71,  // 170: vega.snapshot.v1.AmmState.sqrter:type_name -> vega.snapshot.v1.StringMapEntry
	71,  // 171: vega.snapshot.v1.AmmState.sub_accounts:type_name -> vega.snapshot.v1.StringMapEntry
	70,  // 172: vega.snapshot.v1.AmmState.pools:type_name -> vega.snapshot.v1.PoolMapEntry
	192, // 173: vega.snapshot.v1.PoolMapEntry.pool:type_name -> vega.snapshot.v1.PoolMapEntry.Pool
	76,  // 174: vega.snapshot.v1.Product.perps:type_name -> vega.snapshot.v1.Perps
	73,  // 175: vega.snapshot.v1.Perps.external_data_point:type_name -> vega.snapshot.v1.DataPoint
	73,  // 176: vega.snapshot.v1.Perps.internal_data_point:type_name -> vega.snapshot.v1.DataPoint
	75,  // 177: vega.snapshot.v1.Perps.external_twap_data:type_name -> vega.snapshot.v1.TWAPData
	75,  // 178: vega.snapshot.v1.Perps.internal_twap_data:type_name -> vega.snapshot.v1.TWAPData
	74,  // 179: vega.snapshot.v1.Perps.auction_intervals:type_name -> vega.snapshot.v1.AuctionIntervals
	77,  // 180: vega.snapshot.v1.PricedStopOrders.falls_bellow:type_name -> vega.snapshot.v1.OrdersAtPrice
	77,  // 181: vega.snapshot.v1.PricedStopOrders.rises_above:type_name -> vega.snapshot.v1.OrdersAtPrice
	81,  // 182: vega.snapshot.v1.TrailingStopOrders.falls_bellow:type_name -> vega.snapshot.v1.OffsetsAtPrice
	81,  // 183: vega.snapshot.v1.TrailingStopOrders.rises_above:type_name -> vega.snapshot.v1.OffsetsAtPrice
	80,  // 184: vega.snapshot.v1.OffsetsAtPrice.offsets:type_name -> vega.snapshot.v1.OrdersAtOffset
	218, // 185: vega.snapshot.v1.StopOrders.stop_orders:type_name -> vega.events.v1.StopOrderEvent
	78,  // 186: vega.snapshot.v1.StopOrders.priced_stop_orders:type_name -> vega.snapshot.v1.PricedStopOrders
	79,  // 187: vega.snapshot.v1.StopOrders.trailing_stop_orders:type_name -> vega.snapshot.v1.TrailingStopOrders
	210, // 188: vega.snapshot.v1.PeggedOrders.parked_orders:type_name -> vega.Order
	67,  // 189: vega.snapshot.v1.ExecutionMarkets.markets:type_name -> vega.snapshot.v1.Market
	66,  // 190: vega.snapshot.v1.ExecutionMarkets.spot_markets:type_name -> vega.snapshot.v1.SpotMarket
	219, // 191: vega.snapshot.v1.ExecutionMarkets.settled_markets:type_name -> vega.checkpoint.v1.MarketState
	86,  // 192: vega.snapshot.v1.ExecutionMarkets.successors:type_name -> vega.snapshot.v1.Successors
	84,  // 193: vega.snapshot.v1.ExecutionMarkets.sla_network_params:type_name -> vega.snapshot.v1.SLANetworkParams
	87,  // 194: vega.snapshot.v1.MarketPositions.positions:type_name -> vega.snapshot.v1.Position
	89,  // 195: vega.snapshot.v1.MarketPositions.parties_records:type_name -> vega.snapshot.v1.PartyPositionStats
	91,  // 196: vega.snapshot.v1.SettlementState.last_settled_positions:type_name -> vega.snapshot.v1.LastSettledPosition
	92,  // 197: vega.snapshot.v1.SettlementState.trades:type_name -> vega.snapshot.v1.SettlementTrade
	96,  // 198: vega.snapshot.v1.RewardsPendingPayouts.scheduled_rewards_payout:type_name -> vega.snapshot.v1.ScheduledRewardsPayout
	97,  // 199: vega.snapshot.v1.ScheduledRewardsPayout.rewards_payout:type_name -> vega.snapshot.v1.RewardsPayout
	98,  // 200: vega.snapshot.v1.RewardsPayout.reward_party_amount:type_name -> vega.snapshot.v1.RewardsPartyAmount
	101, // 201: vega.snapshot.v1.VoteSpamPolicy.party_to_vote:type_name -> vega.snapshot.v1.PartyProposalVoteCount
	153, // 202: vega.snapshot.v1.VoteSpamPolicy.banned_parties:type_name -> vega.snapshot.v1.BannedParty
	102, // 203: vega.snapshot.v1.VoteSpamPolicy.token_balance:type_name -> vega.snapshot.v1.PartyTokenBalance
	103, // 204: vega.snapshot.v1.VoteSpamPolicy.recent_blocks_reject_stats:type_name -> vega.snapshot.v1.BlockRejectStats
	104, // 205: vega.snapshot.v1.SimpleSpamPolicy.party_to_count:type_name -> vega.snapshot.v1.SpamPartyTransactionCount
	153, // 206: vega.snapshot.v1.SimpleSpamPolicy.banned_parties:type_name -> vega.snapshot.v1.BannedParty
	102, // 207: vega.snapshot.v1.SimpleSpamPolicy.token_balance:type_name -> vega.snapshot.v1.PartyTokenBalance
	106, // 208: vega.snapshot.v1.Notary.notary_sigs:type_name -> vega.snapshot.v1.NotarySigs
	110, // 209: vega.snapshot.v1.StakeVerifierDeposited.pending_deposited:type_name -> vega.snapshot.v1.StakeVerifierPending
	110, // 210: vega.snapshot.v1.StakeVerifierRemoved.pending_removed:type_name -> vega.snapshot.v1.StakeVerifierPending
	112, // 211: vega.snapshot.v1.L2EthOracles.chain_id_eth_oracles:type_name -> vega.snapshot.v1.ChainIdEthOracles
	113, // 212: vega.snapshot.v1.ChainIdEthOracles.last_block:type_name -> vega.snapshot.v1.EthOracleVerifierLastBlock
	115, // 213: vega.snapshot.v1.ChainIdEthOracles.call_results:type_name -> vega.snapshot.v1.EthContractCallResults
	114, // 214: vega.snapshot.v1.ChainIdEthOracles.misc:type_name -> vega.snapshot.v1.EthOracleVerifierMisc
	117, // 215: vega.snapshot.v1.EthOracleVerifierMisc.buckets:type_name -> vega.snapshot.v1.EthVerifierBucket
	113, // 216: vega.snapshot.v1.EthOracleVerifierMisc.patch_block:type_name -> vega.snapshot.v1.EthOracleVerifierLastBlock
	116, // 217: vega.snapshot.v1.EthContractCallResults.pending_contract_call_result:type_name -> vega.snapshot.v1.EthContractCallResult
	124, // 218: vega.snapshot.v1.Topology.validator_data:type_name -> vega.snapshot.v1.ValidatorState
	118, // 219: vega.snapshot.v1.Topology.pending_pub_key_rotations:type_name -> vega.snapshot.v1.PendingKeyRotation
	127, // 220: vega.snapshot.v1.Topology.validator_performance:type_name -> vega.snapshot.v1.ValidatorPerformance
	119, // 221: vega.snapshot.v1.Topology.pending_ethereum_key_rotations:type_name -> vega.snapshot.v1.PendingEthereumKeyRotation
	121, // 222: vega.snapshot.v1.Topology.signatures:type_name -> vega.snapshot.v1.ToplogySignatures
	119, // 223: vega.snapshot.v1.Topology.unsolved_ethereum_key_rotations:type_name -> vega.snapshot.v1.PendingEthereumKeyRotation
	122, // 224: vega.snapshot.v1.ToplogySignatures.pending_signatures:type_name -> vega.snapshot.v1.PendingERC20MultisigControlSignature
	123, // 225: vega.snapshot.v1.ToplogySignatures.issued_signatures:type_name -> vega.snapshot.v1.IssuedERC20MultisigControlSignature
	220, // 226: vega.snapshot.v1.ValidatorState.validator_update:type_name -> vega.events.v1.ValidatorUpdate
	125, // 227: vega.snapshot.v1.ValidatorState.heartbeat_tracker:type_name -> vega.snapshot.v1.HeartbeatTracker
	221, // 228: vega.snapshot.v1.ValidatorState.ranking_score:type_name -> vega.RankingScore
	126, // 229: vega.snapshot.v1.ValidatorPerformance.validator_perf_stats:type_name -> vega.snapshot.v1.PerformanceStats
	131, // 230: vega.snapshot.v1.LiquidityPartiesLiquidityOrders.party_orders:type_name -> vega.snapshot.v1.PartyOrders
	210, // 231: vega.snapshot.v1.PartyOrders.orders:type_name -> vega.Order
	131, // 232: vega.snapshot.v1.LiquidityPartiesOrders.party_orders:type_name -> vega.snapshot.v1.PartyOrders
	222, // 233: vega.snapshot.v1.LiquidityProvisions.liquidity_provisions:type_name -> vega.LiquidityProvision
	135, // 234: vega.snapshot.v1.LiquidityScores.scores:type_name -> vega.snapshot.v1.LiquidityScore
	223, // 235: vega.snapshot.v1.LiquidityV2Parameters.market_sla_parameters:type_name -> vega.LiquiditySLAParameters
	224, // 236: vega.snapshot.v1.LiquidityV2PaidFeesStats.stats:type_name -> vega.events.v1.PaidLiquidityFeesStats
	222, // 237: vega.snapshot.v1.LiquidityV2Provisions.liquidity_provisions:type_name -> vega.LiquidityProvision
	222, // 238: vega.snapshot.v1.LiquidityV2PendingProvisions.pending_liquidity_provisions:type_name -> vega.LiquidityProvision
	141, // 239: vega.snapshot.v1.LiquidityV2Performances.performance_per_party:type_name -> vega.snapshot.v1.LiquidityV2PerformancePerParty
	135, // 240: vega.snapshot.v1.LiquidityV2Scores.scores:type_name -> vega.snapshot.v1.LiquidityScore
	12,  // 241: vega.snapshot.v1.LiquidityV2Supplied.bid_cache:type_name -> vega.snapshot.v1.LiquidityOffsetProbabilityPair
	12,  // 242: vega.snapshot.v1.LiquidityV2Supplied.ask_cache:type_name -> vega.snapshot.v1.LiquidityOffsetProbabilityPair
	147, // 243: vega.snapshot.v1.FloatingPointConsensus.next_time_trigger:type_name -> vega.snapshot.v1.NextTimeTrigger
	145, // 244: vega.snapshot.v1.FloatingPointConsensus.state_variables:type_name -> vega.snapshot.v1.StateVarInternalState
	146, // 245: vega.snapshot.v1.StateVarInternalState.validators_results:type_name -> vega.snapshot.v1.FloatingPointValidatorResult
	225, // 246: vega.snapshot.v1.FloatingPointValidatorResult.bundle:type_name -> vega.KeyValueBundle
	226, // 247: vega.snapshot.v1.MarketTracker.market_activity:type_name -> vega.checkpoint.v1.MarketActivityTracker
	227, // 248: vega.snapshot.v1.MarketTracker.taker_notional_volume:type_name -> vega.checkpoint.v1.TakerNotionalVolume
	228, // 249: vega.snapshot.v1.MarketTracker.market_to_party_taker_notional_volume:type_name -> vega.checkpoint.v1.MarketToPartyTakerNotionalVolume
	229, // 250: vega.snapshot.v1.SignerEventsPerAddress.events:type_name -> vega.events.v1.ERC20MultiSigSignerEvent
	149, // 251: vega.snapshot.v1.ERC20MultiSigTopologyVerified.events_per_address:type_name -> vega.snapshot.v1.SignerEventsPerAddress
	230, // 252: vega.snapshot.v1.ERC20MultiSigTopologyVerified.threshold:type_name -> vega.events.v1.ERC20MultiSigThresholdSetEvent
	229, // 253: vega.snapshot.v1.ERC20MultiSigTopologyPending.pending_signers:type_name -> vega.events.v1.ERC20MultiSigSignerEvent
	230, // 254: vega.snapshot.v1.ERC20MultiSigTopologyPending.pending_threshold_set:type_name -> vega.events.v1.ERC20MultiSigThresholdSetEvent
	158, // 255: vega.snapshot.v1.ProofOfWork.tx_at_height:type_name -> vega.snapshot.v1.TransactionsAtHeight
	158, // 256: vega.snapshot.v1.ProofOfWork.tid_at_height:type_name -> vega.snapshot.v1.TransactionsAtHeight
	153, // 257: vega.snapshot.v1.ProofOfWork.banned:type_name -> vega.snapshot.v1.BannedParty
	154, // 258: vega.snapshot.v1.ProofOfWork.pow_params:type_name -> vega.snapshot.v1.ProofOfWorkParams
	155, // 259: vega.snapshot.v1.ProofOfWork.pow_state:type_name -> vega.snapshot.v1.ProofOfWorkState
	160, // 260: vega.snapshot.v1.ProofOfWork.nonce_refs_at_height:type_name -> vega.snapshot.v1.NonceRefsAtHeight
	156, // 261: vega.snapshot.v1.ProofOfWorkState.pow_state:type_name -> vega.snapshot.v1.ProofOfWorkBlockState
	157, // 262: vega.snapshot.v1.ProofOfWorkBlockState.party_state:type_name -> vega.snapshot.v1.ProofOfWorkPartyStateForBlock
	159, // 263: vega.snapshot.v1.NonceRefsAtHeight.refs:type_name -> vega.snapshot.v1.NonceRef
	231, // 264: vega.snapshot.v1.ProtocolUpgradeProposals.active_proposals:type_name -> vega.events.v1.ProtocolUpgradeEvent
	162, // 265: vega.snapshot.v1.ProtocolUpgradeProposals.accepted_proposal:type_name -> vega.snapshot.v1.AcceptedProtocolUpgradeProposal
	164, // 266: vega.snapshot.v1.Teams.teams:type_name -> vega.snapshot.v1.Team
	165, // 267: vega.snapshot.v1.Team.referrer:type_name -> vega.snapshot.v1.Membership
	165, // 268: vega.snapshot.v1.Team.referees:type_name -> vega.snapshot.v1.Membership
	167, // 269: vega.snapshot.v1.TeamSwitches.team_switches:type_name -> vega.snapshot.v1.TeamSwitch
	169, // 270: vega.snapshot.v1.Vesting.parties_reward:type_name -> vega.snapshot.v1.PartyReward
	174, // 271: vega.snapshot.v1.PartyReward.asset_locked:type_name -> vega.snapshot.v1.AssetLocked
	176, // 272: vega.snapshot.v1.PartyReward.in_vesting:type_name -> vega.snapshot.v1.InVesting
	173, // 273: vega.snapshot.v1.ReferralProgramData.factor_by_referee:type_name -> vega.snapshot.v1.FactorByReferee
	232, // 274: vega.snapshot.v1.ReferralProgramData.current_program:type_name -> vega.ReferralProgram
	232, // 275: vega.snapshot.v1.ReferralProgramData.new_program:type_name -> vega.ReferralProgram
	171, // 276: vega.snapshot.v1.ReferralProgramData.sets:type_name -> vega.snapshot.v1.ReferralSet
	165, // 277: vega.snapshot.v1.ReferralSet.referrer:type_name -> vega.snapshot.v1.Membership
	165, // 278: vega.snapshot.v1.ReferralSet.referees:type_name -> vega.snapshot.v1.Membership
	172, // 279: vega.snapshot.v1.ReferralSet.running_volumes:type_name -> vega.snapshot.v1.RunningVolume
	175, // 280: vega.snapshot.v1.AssetLocked.epoch_balances:type_name -> vega.snapshot.v1.EpochBalance
	178, // 281: vega.snapshot.v1.ActivityStreak.parties_activity_streak:type_name -> vega.snapshot.v1.PartyActivityStreak
	181, // 282: vega.snapshot.v1.VolumeDiscountProgram.epoch_party_volumes:type_name -> vega.snapshot.v1.EpochPartyVolumes
	182, // 283: vega.snapshot.v1.VolumeDiscountProgram.average_party_volume:type_name -> vega.snapshot.v1.PartyVolume
	233, // 284: vega.snapshot.v1.VolumeDiscountProgram.current_program:type_name -> vega.VolumeDiscountProgram
	233, // 285: vega.snapshot.v1.VolumeDiscountProgram.new_program:type_name -> vega.VolumeDiscountProgram
	180, // 286: vega.snapshot.v1.VolumeDiscountProgram.factors_by_party:type_name -> vega.snapshot.v1.VolumeDiscountStats
	182, // 287: vega.snapshot.v1.EpochPartyVolumes.party_volume:type_name -> vega.snapshot.v1.PartyVolume
	234, // 288: vega.snapshot.v1.Liquidation.config:type_name -> vega.LiquidationStrategy
	184, // 289: vega.snapshot.v1.BankingTransferFeeDiscounts.party_asset_discount:type_name -> vega.snapshot.v1.PartyAssetAmount
	235, // 290: vega.snapshot.v1.CompositePriceCalculator.price_configuration:type_name -> vega.CompositePriceConfiguration
	236, // 291: vega.snapshot.v1.CompositePriceCalculator.trades:type_name -> vega.Trade
	54,  // 292: vega.snapshot.v1.CompositePriceCalculator.book_price_at_time:type_name -> vega.snapshot.v1.TimePrice
	188, // 293: vega.snapshot.v1.Parties.profiles:type_name -> vega.snapshot.v1.PartyProfile
	237, // 294: vega.snapshot.v1.PartyProfile.metadata:type_name -> vega.Metadata
	189, // 295: vega.snapshot.v1.MarketLiquidity.amm:type_name -> vega.snapshot.v1.AMMValues
	238, // 296: vega.snapshot.v1.PoolMapEntry.Pool.parameters:type_name -> vega.events.v1.AMMPool.ConcentratedLiquidityParameters
	191, // 297: vega.snapshot.v1.PoolMapEntry.Pool.lower:type_name -> vega.snapshot.v1.PoolMapEntry.Curve
	191, // 298: vega.snapshot.v1.PoolMapEntry.Pool.upper:type_name -> vega.snapshot.v1.PoolMapEntry.Curve
	239, // 299: vega.snapshot.v1.PoolMapEntry.Pool.status:type_name -> vega.events.v1.AMMPool.Status
	300, // [300:300] is the sub-list for method output_type
	300, // [300:300] is the sub-list for method input_type
	300, // [300:300] is the sub-list for extension type_name
	300, // [300:300] is the sub-list for extension extendee
	0,   // [0:300] is the sub-list for field type_name
}

func init() { file_vega_snapshot_v1_snapshot_proto_init() }
func file_vega_snapshot_v1_snapshot_proto_init() {
	if File_vega_snapshot_v1_snapshot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vega_snapshot_v1_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHoldingQuantities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldingAccountTracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedTotalStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedOpenInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotLiquidityTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityOffsetProbabilityPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquiditySupplied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDataBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDataPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Witness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventForwarderBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventForwarder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollateralAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollateralAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingAssets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingAssetUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingWithdrawals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingDeposits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingSeen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingAssetActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingRecurringTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingScheduledTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingRecurringGovernanceTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingScheduledGovernanceTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingBridgeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationLastReconciliationTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationPending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationAuto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceEnacted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProposalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceBatchActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecimalMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceRangeCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PastPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquityShareLP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquityShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeSplitter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyMarginFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmmState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionIntervals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TWAPData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Perps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersAtPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PricedStopOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrailingStopOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersAtOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetsAtPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeggedOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLANetworkParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionMarkets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Successors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyPositionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastSettledPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsPendingPayouts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledRewardsPayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsPayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsPartyAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteSpamPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyProposalVoteCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyTokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRejectStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpamPartyTransactionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSpamPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotarySigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeVerifierDeposited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeVerifierRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeVerifierPending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2EthOracles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainIdEthOracles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthOracleVerifierLastBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthOracleVerifierMisc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthContractCallResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthContractCallResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthVerifierBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingKeyRotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingEthereumKeyRotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToplogySignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingERC20MultisigControlSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuedERC20MultisigControlSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatTracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPendingProvisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPartiesLiquidityOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPartiesOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityV2Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityV2PaidFeesStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityV2Provisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityV2PendingProvisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityV2Performances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityV2PerformancePerParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityV2Scores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityV2Supplied); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingPointConsensus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateVarInternalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatingPointValidatorResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextTimeTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignerEventsPerAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20MultiSigTopologyVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20MultiSigTopologyPending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannedParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfWorkParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfWorkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfWorkBlockState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfWorkPartyStateForBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsAtHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceRefsAtHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolUpgradeProposals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedProtocolUpgradeProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Teams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSwitches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralProgramData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunningVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactorByReferee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetLocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InVesting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityStreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyActivityStreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeDiscountProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeDiscountStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochPartyVolumes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Liquidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAssetAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingTransferFeeDiscounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositePriceCalculator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AMMValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketLiquidity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolMapEntry_Curve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_snapshot_v1_snapshot_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolMapEntry_Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_snapshot_v1_snapshot_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Payload_ActiveAssets)(nil),
		(*Payload_PendingAssets)(nil),
		(*Payload_BankingWithdrawals)(nil),
		(*Payload_BankingDeposits)(nil),
		(*Payload_BankingSeen)(nil),
		(*Payload_BankingAssetActions)(nil),
		(*Payload_Checkpoint)(nil),
		(*Payload_CollateralAccounts)(nil),
		(*Payload_CollateralAssets)(nil),
		(*Payload_DelegationActive)(nil),
		(*Payload_DelegationPending)(nil),
		(*Payload_DelegationAuto)(nil),
		(*Payload_GovernanceActive)(nil),
		(*Payload_GovernanceEnacted)(nil),
		(*Payload_StakingAccounts)(nil),
		(*Payload_MatchingBook)(nil),
		(*Payload_NetworkParameters)(nil),
		(*Payload_ExecutionMarkets)(nil),
		(*Payload_MarketPositions)(nil),
		(*Payload_AppState)(nil),
		(*Payload_Epoch)(nil),
		(*Payload_RewardsPendingPayouts)(nil),
		(*Payload_GovernanceNode)(nil),
		(*Payload_LimitState)(nil),
		(*Payload_VoteSpamPolicy)(nil),
		(*Payload_SimpleSpamPolicy)(nil),
		(*Payload_Notary)(nil),
		(*Payload_EventForwarder)(nil),
		(*Payload_StakeVerifierDeposited)(nil),
		(*Payload_StakeVerifierRemoved)(nil),
		(*Payload_Witness)(nil),
		(*Payload_DelegationLastReconciliationTime)(nil),
		(*Payload_Topology)(nil),
		(*Payload_OracleData)(nil),
		(*Payload_LiquidityParameters)(nil),
		(*Payload_LiquidityPendingProvisions)(nil),
		(*Payload_LiquidityPartiesLiquidityOrders)(nil),
		(*Payload_LiquidityPartiesOrders)(nil),
		(*Payload_LiquidityProvisions)(nil),
		(*Payload_LiquiditySupplied)(nil),
		(*Payload_LiquidityTarget)(nil),
		(*Payload_FloatingPointConsensus)(nil),
		(*Payload_MarketTracker)(nil),
		(*Payload_BankingRecurringTransfers)(nil),
		(*Payload_BankingScheduledTransfers)(nil),
		(*Payload_Erc20MultisigTopologyVerified)(nil),
		(*Payload_Erc20MultisigTopologyPending)(nil),
		(*Payload_ProofOfWork)(nil),
		(*Payload_PendingAssetUpdates)(nil),
		(*Payload_ProtocolUpgradeProposals)(nil),
		(*Payload_BankingBridgeState)(nil),
		(*Payload_SettlementState)(nil),
		(*Payload_LiquidityScores)(nil),
		(*Payload_SpotLiquidityTarget)(nil),
		(*Payload_BankingRecurringGovernanceTransfers)(nil),
		(*Payload_BankingScheduledGovernanceTransfers)(nil),
		(*Payload_EthContractCallResults)(nil),
		(*Payload_EthOracleVerifierLastBlock)(nil),
		(*Payload_LiquidityV2Provisions)(nil),
		(*Payload_LiquidityV2PendingProvisions)(nil),
		(*Payload_LiquidityV2Performances)(nil),
		(*Payload_LiquidityV2Supplied)(nil),
		(*Payload_LiquidityV2Scores)(nil),
		(*Payload_HoldingAccountTracker)(nil),
		(*Payload_Teams)(nil),
		(*Payload_TeamSwitches)(nil),
		(*Payload_Vesting)(nil),
		(*Payload_ReferralProgram)(nil),
		(*Payload_ActivityStreak)(nil),
		(*Payload_VolumeDiscountProgram)(nil),
		(*Payload_LiquidityV2Parameters)(nil),
		(*Payload_LiquidityV2PaidFeesStats)(nil),
		(*Payload_Liquidation)(nil),
		(*Payload_BankingTransferFeeDiscounts)(nil),
		(*Payload_GovernanceBatchActive)(nil),
		(*Payload_Parties)(nil),
		(*Payload_L2EthOracles)(nil),
		(*Payload_EthOracleVerifierMisc)(nil),
	}
	file_vega_snapshot_v1_snapshot_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_vega_snapshot_v1_snapshot_proto_msgTypes[71].OneofWrappers = []interface{}{
		(*Product_Perps)(nil),
	}
	file_vega_snapshot_v1_snapshot_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_vega_snapshot_v1_snapshot_proto_msgTypes[115].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_snapshot_v1_snapshot_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   192,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_snapshot_v1_snapshot_proto_goTypes,
		DependencyIndexes: file_vega_snapshot_v1_snapshot_proto_depIdxs,
		EnumInfos:         file_vega_snapshot_v1_snapshot_proto_enumTypes,
		MessageInfos:      file_vega_snapshot_v1_snapshot_proto_msgTypes,
	}.Build()
	File_vega_snapshot_v1_snapshot_proto = out.File
	file_vega_snapshot_v1_snapshot_proto_rawDesc = nil
	file_vega_snapshot_v1_snapshot_proto_goTypes = nil
	file_vega_snapshot_v1_snapshot_proto_depIdxs = nil
}
