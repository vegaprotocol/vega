syntax = "proto3";

import "proto/vega.proto";

package grpc;

option go_package = "code.vegaprotocol.io/vega/internal/api";

import "github.com/mwitkow/go-proto-validators/validator.proto";

service trading {
    rpc SubmitOrder(vega.OrderSubmission) returns (vega.PendingOrder);
    rpc CancelOrder(vega.OrderCancellation) returns (vega.PendingOrder);
    rpc AmendOrder(vega.OrderAmendment) returns (OrderResponse);
    rpc OrdersByMarket(OrdersByMarketRequest) returns (OrdersByMarketResponse);
    rpc OrdersByParty(OrdersByPartyRequest) returns (OrdersByPartyResponse);
    rpc OrderByMarketAndId(OrderByMarketAndIdRequest) returns (OrderByMarketAndIdResponse);
    rpc Markets(MarketsRequest) returns (MarketsResponse);
    rpc Candles(CandlesRequest) returns (CandlesResponse);
    rpc MarketDepth(MarketDepthRequest) returns (MarketDepthResponse);
    rpc TradesByMarket(TradesByMarketRequest) returns (TradesByMarketResponse);
    rpc PositionsByParty(PositionsByPartyRequest) returns (PositionsByPartyResponse);
    rpc Statistics(StatisticsRequest) returns (vega.Statistics);
    rpc GetVegaTime(VegaTimeRequest) returns (VegaTimeResponse);
    //rpc TradesForOrder(TradesForOrderRequest) return (TradesForOrderResponse);        TODO
}

message OrderResponse {
    bool success = 1;
    string reference = 2;
}

message OrdersByMarketRequest {
    string market = 1 [(validator.field) = {msg_exists : true}];
    OptionalParams params = 2;
}

message OrdersByMarketResponse {
    repeated vega.Order orders = 1;
}

message OrdersByPartyRequest {
    string party = 1 [(validator.field) = {msg_exists : true }];
    OptionalParams params = 2;
}

message OrdersByPartyResponse {
    repeated vega.Order orders = 1;
}

message OrderByMarketAndIdRequest {
    string market = 1 [(validator.field) = {msg_exists : true }];
    string id = 2 [(validator.field) = {msg_exists : true}];
}

message OrderByMarketAndIdResponse {
    vega.Order order = 1;
}

message MarketsRequest {
    // empty for now
}

message MarketsResponse {
    repeated string markets = 1;
}

message CandlesRequest {
    string market = 1 [(validator.field) = {msg_exists : true}];
    int64 sinceTimestamp = 2 [(validator.field) = {int_gt: 0}];
    vega.Interval interval = 3;
}

message CandlesResponse {
    repeated vega.Candle candles = 1;
}

message MarketDepthRequest {
    string market = 1 [(validator.field) = {msg_exists: true}];
}

message MarketDepthResponse {
    string   name = 1;
    repeated vega.PriceLevel buy = 2;
    repeated vega.PriceLevel sell = 3;
    vega.Trade lastTrade = 4;
}

message TradesByMarketRequest {
    string market = 1 [(validator.field) = {msg_exists: true}];
    OptionalParams params = 2;
}

message TradesByMarketResponse {
    repeated vega.Trade trades = 1;
}

message PositionsByPartyRequest{
    string party = 1 [(validator.field) = {msg_exists: true}];
}

message PositionsByPartyResponse{
    repeated vega.MarketPosition positions = 1;
}

message StatisticsRequest {
    // empty for now
}

message OptionalParams {
    uint64 limit = 1 [(validator.field) = {int_lt: 50}];
}

message VegaTimeRequest {
    // empty
}

message VegaTimeResponse {
    string time = 1;
}
