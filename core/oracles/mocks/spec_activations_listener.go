// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/oracles (interfaces: SpecActivationsListener)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "code.vegaprotocol.io/vega/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockSpecActivationsListener is a mock of SpecActivationsListener interface.
type MockSpecActivationsListener struct {
	ctrl     *gomock.Controller
	recorder *MockSpecActivationsListenerMockRecorder
}

// MockSpecActivationsListenerMockRecorder is the mock recorder for MockSpecActivationsListener.
type MockSpecActivationsListenerMockRecorder struct {
	mock *MockSpecActivationsListener
}

// NewMockSpecActivationsListener creates a new mock instance.
func NewMockSpecActivationsListener(ctrl *gomock.Controller) *MockSpecActivationsListener {
	mock := &MockSpecActivationsListener{ctrl: ctrl}
	mock.recorder = &MockSpecActivationsListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpecActivationsListener) EXPECT() *MockSpecActivationsListenerMockRecorder {
	return m.recorder
}

// OnSpecActivated mocks base method.
func (m *MockSpecActivationsListener) OnSpecActivated(arg0 context.Context, arg1 types.OracleSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSpecActivated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnSpecActivated indicates an expected call of OnSpecActivated.
func (mr *MockSpecActivationsListenerMockRecorder) OnSpecActivated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSpecActivated", reflect.TypeOf((*MockSpecActivationsListener)(nil).OnSpecActivated), arg0, arg1)
}

// OnSpecDeactivated mocks base method.
func (m *MockSpecActivationsListener) OnSpecDeactivated(arg0 context.Context, arg1 types.OracleSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnSpecDeactivated", arg0, arg1)
}

// OnSpecDeactivated indicates an expected call of OnSpecDeactivated.
func (mr *MockSpecActivationsListenerMockRecorder) OnSpecDeactivated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSpecDeactivated", reflect.TypeOf((*MockSpecActivationsListener)(nil).OnSpecDeactivated), arg0, arg1)
}
