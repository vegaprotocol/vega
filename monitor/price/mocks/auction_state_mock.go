// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/monitor/price (interfaces: AuctionState)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto/gen/golang"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAuctionState is a mock of AuctionState interface
type MockAuctionState struct {
	ctrl     *gomock.Controller
	recorder *MockAuctionStateMockRecorder
}

// MockAuctionStateMockRecorder is the mock recorder for MockAuctionState
type MockAuctionStateMockRecorder struct {
	mock *MockAuctionState
}

// NewMockAuctionState creates a new mock instance
func NewMockAuctionState(ctrl *gomock.Controller) *MockAuctionState {
	mock := &MockAuctionState{ctrl: ctrl}
	mock.recorder = &MockAuctionStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuctionState) EXPECT() *MockAuctionStateMockRecorder {
	return m.recorder
}

// AuctionEnd mocks base method
func (m *MockAuctionState) AuctionEnd() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuctionEnd")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuctionEnd indicates an expected call of AuctionEnd
func (mr *MockAuctionStateMockRecorder) AuctionEnd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuctionEnd", reflect.TypeOf((*MockAuctionState)(nil).AuctionEnd))
}

// AuctionStart mocks base method
func (m *MockAuctionState) AuctionStart() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuctionStart")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AuctionStart indicates an expected call of AuctionStart
func (mr *MockAuctionStateMockRecorder) AuctionStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuctionStart", reflect.TypeOf((*MockAuctionState)(nil).AuctionStart))
}

// Duration mocks base method
func (m *MockAuctionState) Duration() proto.AuctionDuration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(proto.AuctionDuration)
	return ret0
}

// Duration indicates an expected call of Duration
func (mr *MockAuctionStateMockRecorder) Duration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockAuctionState)(nil).Duration))
}

// EndAuction mocks base method
func (m *MockAuctionState) EndAuction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndAuction")
}

// EndAuction indicates an expected call of EndAuction
func (mr *MockAuctionStateMockRecorder) EndAuction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndAuction", reflect.TypeOf((*MockAuctionState)(nil).EndAuction))
}

// ExpiresAt mocks base method
func (m *MockAuctionState) ExpiresAt() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiresAt")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// ExpiresAt indicates an expected call of ExpiresAt
func (mr *MockAuctionStateMockRecorder) ExpiresAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiresAt", reflect.TypeOf((*MockAuctionState)(nil).ExpiresAt))
}

// ExtendAuction mocks base method
func (m *MockAuctionState) ExtendAuction(arg0 proto.AuctionDuration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExtendAuction", arg0)
}

// ExtendAuction indicates an expected call of ExtendAuction
func (mr *MockAuctionStateMockRecorder) ExtendAuction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendAuction", reflect.TypeOf((*MockAuctionState)(nil).ExtendAuction), arg0)
}

// InAuction mocks base method
func (m *MockAuctionState) InAuction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InAuction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InAuction indicates an expected call of InAuction
func (mr *MockAuctionStateMockRecorder) InAuction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InAuction", reflect.TypeOf((*MockAuctionState)(nil).InAuction))
}

// IsFBA mocks base method
func (m *MockAuctionState) IsFBA() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFBA")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFBA indicates an expected call of IsFBA
func (mr *MockAuctionStateMockRecorder) IsFBA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFBA", reflect.TypeOf((*MockAuctionState)(nil).IsFBA))
}

// IsLiquidityAuction mocks base method
func (m *MockAuctionState) IsLiquidityAuction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLiquidityAuction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLiquidityAuction indicates an expected call of IsLiquidityAuction
func (mr *MockAuctionStateMockRecorder) IsLiquidityAuction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLiquidityAuction", reflect.TypeOf((*MockAuctionState)(nil).IsLiquidityAuction))
}

// IsOpeningAuction mocks base method
func (m *MockAuctionState) IsOpeningAuction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpeningAuction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpeningAuction indicates an expected call of IsOpeningAuction
func (mr *MockAuctionStateMockRecorder) IsOpeningAuction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpeningAuction", reflect.TypeOf((*MockAuctionState)(nil).IsOpeningAuction))
}

// IsPriceAuction mocks base method
func (m *MockAuctionState) IsPriceAuction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPriceAuction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPriceAuction indicates an expected call of IsPriceAuction
func (mr *MockAuctionStateMockRecorder) IsPriceAuction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPriceAuction", reflect.TypeOf((*MockAuctionState)(nil).IsPriceAuction))
}

// Mode mocks base method
func (m *MockAuctionState) Mode() proto.MarketState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(proto.MarketState)
	return ret0
}

// Mode indicates an expected call of Mode
func (mr *MockAuctionStateMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockAuctionState)(nil).Mode))
}

// Start mocks base method
func (m *MockAuctionState) Start() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockAuctionStateMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAuctionState)(nil).Start))
}

// StartPriceAuction mocks base method
func (m *MockAuctionState) StartPriceAuction(arg0 time.Time, arg1 *proto.AuctionDuration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartPriceAuction", arg0, arg1)
}

// StartPriceAuction indicates an expected call of StartPriceAuction
func (mr *MockAuctionStateMockRecorder) StartPriceAuction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPriceAuction", reflect.TypeOf((*MockAuctionState)(nil).StartPriceAuction), arg0, arg1)
}
