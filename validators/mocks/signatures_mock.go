// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/validators (interfaces: Signatures)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	validators "code.vegaprotocol.io/vega/validators"
	gomock "github.com/golang/mock/gomock"
)

// MockSignatures is a mock of Signatures interface.
type MockSignatures struct {
	ctrl     *gomock.Controller
	recorder *MockSignaturesMockRecorder
}

// MockSignaturesMockRecorder is the mock recorder for MockSignatures.
type MockSignaturesMockRecorder struct {
	mock *MockSignatures
}

// NewMockSignatures creates a new mock instance.
func NewMockSignatures(ctrl *gomock.Controller) *MockSignatures {
	mock := &MockSignatures{ctrl: ctrl}
	mock.recorder = &MockSignaturesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatures) EXPECT() *MockSignaturesMockRecorder {
	return m.recorder
}

// EmitNewValidatorsSignatures mocks base method.
func (m *MockSignatures) EmitNewValidatorsSignatures(arg0 context.Context, arg1 []validators.NodeIDAddress, arg2 time.Time, arg3 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitNewValidatorsSignatures", arg0, arg1, arg2, arg3)
}

// EmitNewValidatorsSignatures indicates an expected call of EmitNewValidatorsSignatures.
func (mr *MockSignaturesMockRecorder) EmitNewValidatorsSignatures(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitNewValidatorsSignatures", reflect.TypeOf((*MockSignatures)(nil).EmitNewValidatorsSignatures), arg0, arg1, arg2, arg3)
}

// EmitPromotionsSignatures mocks base method.
func (m *MockSignatures) EmitPromotionsSignatures(arg0 context.Context, arg1 time.Time, arg2 uint64, arg3, arg4 map[string]validators.StatusAddress) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitPromotionsSignatures", arg0, arg1, arg2, arg3, arg4)
}

// EmitPromotionsSignatures indicates an expected call of EmitPromotionsSignatures.
func (mr *MockSignaturesMockRecorder) EmitPromotionsSignatures(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitPromotionsSignatures", reflect.TypeOf((*MockSignatures)(nil).EmitPromotionsSignatures), arg0, arg1, arg2, arg3, arg4)
}

// EmitRemoveValidatorsSignatures mocks base method.
func (m *MockSignatures) EmitRemoveValidatorsSignatures(arg0 context.Context, arg1, arg2 []validators.NodeIDAddress, arg3 time.Time, arg4 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitRemoveValidatorsSignatures", arg0, arg1, arg2, arg3, arg4)
}

// EmitRemoveValidatorsSignatures indicates an expected call of EmitRemoveValidatorsSignatures.
func (mr *MockSignaturesMockRecorder) EmitRemoveValidatorsSignatures(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitRemoveValidatorsSignatures", reflect.TypeOf((*MockSignatures)(nil).EmitRemoveValidatorsSignatures), arg0, arg1, arg2, arg3, arg4)
}

// SetNonce mocks base method.
func (m *MockSignatures) SetNonce(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockSignaturesMockRecorder) SetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockSignatures)(nil).SetNonce), arg0)
}
