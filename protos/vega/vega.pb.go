// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/vega.proto

package vega

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A side relates to the direction of an order, to Buy, or Sell
type Side int32

const (
	// Default value, always invalid
	Side_SIDE_UNSPECIFIED Side = 0
	// Buy order
	Side_SIDE_BUY Side = 1
	// Sell order
	Side_SIDE_SELL Side = 2
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "SIDE_UNSPECIFIED",
		1: "SIDE_BUY",
		2: "SIDE_SELL",
	}
	Side_value = map[string]int32{
		"SIDE_UNSPECIFIED": 0,
		"SIDE_BUY":         1,
		"SIDE_SELL":        2,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[0].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[0]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{0}
}

// Represents a set of time intervals that are used when querying for candle-stick data
type Interval int32

const (
	// Default value, always invalid
	Interval_INTERVAL_UNSPECIFIED Interval = 0
	// The block interval is not a fixed amount of time, rather it used to indicate grouping of events that occur in a single block. It is usually about a second.
	Interval_INTERVAL_BLOCK Interval = -1
	// 1 minute.
	Interval_INTERVAL_I1M Interval = 60
	// 5 minutes.
	Interval_INTERVAL_I5M Interval = 300
	// 15 minutes.
	Interval_INTERVAL_I15M Interval = 900
	// 1 hour.
	Interval_INTERVAL_I1H Interval = 3600
	// 6 hours.
	Interval_INTERVAL_I6H Interval = 21600
	// 1 day.
	Interval_INTERVAL_I1D Interval = 86400
)

// Enum value maps for Interval.
var (
	Interval_name = map[int32]string{
		0:     "INTERVAL_UNSPECIFIED",
		-1:    "INTERVAL_BLOCK",
		60:    "INTERVAL_I1M",
		300:   "INTERVAL_I5M",
		900:   "INTERVAL_I15M",
		3600:  "INTERVAL_I1H",
		21600: "INTERVAL_I6H",
		86400: "INTERVAL_I1D",
	}
	Interval_value = map[string]int32{
		"INTERVAL_UNSPECIFIED": 0,
		"INTERVAL_BLOCK":       -1,
		"INTERVAL_I1M":         60,
		"INTERVAL_I5M":         300,
		"INTERVAL_I15M":        900,
		"INTERVAL_I1H":         3600,
		"INTERVAL_I6H":         21600,
		"INTERVAL_I1D":         86400,
	}
)

func (x Interval) Enum() *Interval {
	p := new(Interval)
	*p = x
	return p
}

func (x Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[1].Descriptor()
}

func (Interval) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[1]
}

func (x Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Interval.Descriptor instead.
func (Interval) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{1}
}

type PositionStatus int32

const (
	PositionStatus_POSITION_STATUS_UNSPECIFIED   PositionStatus = 0
	PositionStatus_POSITION_STATUS_ORDERS_CLOSED PositionStatus = 1
	PositionStatus_POSITION_STATUS_CLOSED_OUT    PositionStatus = 2
)

// Enum value maps for PositionStatus.
var (
	PositionStatus_name = map[int32]string{
		0: "POSITION_STATUS_UNSPECIFIED",
		1: "POSITION_STATUS_ORDERS_CLOSED",
		2: "POSITION_STATUS_CLOSED_OUT",
	}
	PositionStatus_value = map[string]int32{
		"POSITION_STATUS_UNSPECIFIED":   0,
		"POSITION_STATUS_ORDERS_CLOSED": 1,
		"POSITION_STATUS_CLOSED_OUT":    2,
	}
)

func (x PositionStatus) Enum() *PositionStatus {
	p := new(PositionStatus)
	*p = x
	return p
}

func (x PositionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[2].Descriptor()
}

func (PositionStatus) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[2]
}

func (x PositionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionStatus.Descriptor instead.
func (PositionStatus) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{2}
}

// Auction triggers indicate what condition triggered an auction (if market is in auction mode)
type AuctionTrigger int32

const (
	// Default value for AuctionTrigger, no auction triggered
	AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED AuctionTrigger = 0
	// Batch auction
	AuctionTrigger_AUCTION_TRIGGER_BATCH AuctionTrigger = 1
	// Opening auction
	AuctionTrigger_AUCTION_TRIGGER_OPENING AuctionTrigger = 2
	// Price monitoring trigger
	AuctionTrigger_AUCTION_TRIGGER_PRICE AuctionTrigger = 3
	// Liquidity monitoring trigger
	AuctionTrigger_AUCTION_TRIGGER_LIQUIDITY AuctionTrigger = 4
)

// Enum value maps for AuctionTrigger.
var (
	AuctionTrigger_name = map[int32]string{
		0: "AUCTION_TRIGGER_UNSPECIFIED",
		1: "AUCTION_TRIGGER_BATCH",
		2: "AUCTION_TRIGGER_OPENING",
		3: "AUCTION_TRIGGER_PRICE",
		4: "AUCTION_TRIGGER_LIQUIDITY",
	}
	AuctionTrigger_value = map[string]int32{
		"AUCTION_TRIGGER_UNSPECIFIED": 0,
		"AUCTION_TRIGGER_BATCH":       1,
		"AUCTION_TRIGGER_OPENING":     2,
		"AUCTION_TRIGGER_PRICE":       3,
		"AUCTION_TRIGGER_LIQUIDITY":   4,
	}
)

func (x AuctionTrigger) Enum() *AuctionTrigger {
	p := new(AuctionTrigger)
	*p = x
	return p
}

func (x AuctionTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[3].Descriptor()
}

func (AuctionTrigger) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[3]
}

func (x AuctionTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuctionTrigger.Descriptor instead.
func (AuctionTrigger) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{3}
}

// A pegged reference defines which price point a pegged order is linked to - meaning
// the price for a pegged order is calculated from the value of the reference price point
type PeggedReference int32

const (
	// Default value for PeggedReference, no reference given
	PeggedReference_PEGGED_REFERENCE_UNSPECIFIED PeggedReference = 0
	// Mid price reference
	PeggedReference_PEGGED_REFERENCE_MID PeggedReference = 1
	// Best bid price reference
	PeggedReference_PEGGED_REFERENCE_BEST_BID PeggedReference = 2
	// Best ask price reference
	PeggedReference_PEGGED_REFERENCE_BEST_ASK PeggedReference = 3
)

// Enum value maps for PeggedReference.
var (
	PeggedReference_name = map[int32]string{
		0: "PEGGED_REFERENCE_UNSPECIFIED",
		1: "PEGGED_REFERENCE_MID",
		2: "PEGGED_REFERENCE_BEST_BID",
		3: "PEGGED_REFERENCE_BEST_ASK",
	}
	PeggedReference_value = map[string]int32{
		"PEGGED_REFERENCE_UNSPECIFIED": 0,
		"PEGGED_REFERENCE_MID":         1,
		"PEGGED_REFERENCE_BEST_BID":    2,
		"PEGGED_REFERENCE_BEST_ASK":    3,
	}
)

func (x PeggedReference) Enum() *PeggedReference {
	p := new(PeggedReference)
	*p = x
	return p
}

func (x PeggedReference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeggedReference) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[4].Descriptor()
}

func (PeggedReference) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[4]
}

func (x PeggedReference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeggedReference.Descriptor instead.
func (PeggedReference) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{4}
}

// OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue
// with an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`
type OrderError int32

const (
	// Default value, no error reported
	OrderError_ORDER_ERROR_UNSPECIFIED OrderError = 0
	// Order was submitted for a market that does not exist
	OrderError_ORDER_ERROR_INVALID_MARKET_ID OrderError = 1
	// Order was submitted with an invalid identifier
	OrderError_ORDER_ERROR_INVALID_ORDER_ID OrderError = 2
	// Order was amended with a sequence number that was not previous version + 1
	OrderError_ORDER_ERROR_OUT_OF_SEQUENCE OrderError = 3
	// Order was amended with an invalid remaining size (e.g. remaining greater than total size)
	OrderError_ORDER_ERROR_INVALID_REMAINING_SIZE OrderError = 4
	// Node was unable to get Vega (blockchain) time
	OrderError_ORDER_ERROR_TIME_FAILURE OrderError = 5
	// Failed to remove an order from the book
	OrderError_ORDER_ERROR_REMOVAL_FAILURE OrderError = 6
	// An order with `TimeInForce.TIME_IN_FORCE_GTT` was submitted or amended
	// with an expiration that was badly formatted or otherwise invalid
	OrderError_ORDER_ERROR_INVALID_EXPIRATION_DATETIME OrderError = 7
	// Order was submitted or amended with an invalid reference field
	OrderError_ORDER_ERROR_INVALID_ORDER_REFERENCE OrderError = 8
	// Order amend was submitted for an order field that cannot not be amended (e.g. order identifier)
	OrderError_ORDER_ERROR_EDIT_NOT_ALLOWED OrderError = 9
	// Amend failure because amend details do not match original order
	OrderError_ORDER_ERROR_AMEND_FAILURE OrderError = 10
	// Order not found in an order book or store
	OrderError_ORDER_ERROR_NOT_FOUND OrderError = 11
	// Order was submitted with an invalid or missing party identifier
	OrderError_ORDER_ERROR_INVALID_PARTY_ID OrderError = 12
	// Order was submitted for a market that has closed
	OrderError_ORDER_ERROR_MARKET_CLOSED OrderError = 13
	// Order was submitted, but the party did not have enough collateral to cover the order
	OrderError_ORDER_ERROR_MARGIN_CHECK_FAILED OrderError = 14
	// Order was submitted, but the party did not have an account for this asset
	OrderError_ORDER_ERROR_MISSING_GENERAL_ACCOUNT OrderError = 15
	// Unspecified internal error
	OrderError_ORDER_ERROR_INTERNAL_ERROR OrderError = 16
	// Order was submitted with an invalid or missing size (e.g. 0)
	OrderError_ORDER_ERROR_INVALID_SIZE OrderError = 17
	// Order was submitted with an invalid persistence for its type
	OrderError_ORDER_ERROR_INVALID_PERSISTENCE OrderError = 18
	// Order was submitted with an invalid type field
	OrderError_ORDER_ERROR_INVALID_TYPE OrderError = 19
	// Order was stopped as it would have traded with another order submitted from the same party
	OrderError_ORDER_ERROR_SELF_TRADING OrderError = 20
	// Order was submitted, but the party did not have enough collateral to cover the fees for the order
	OrderError_ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES OrderError = 21
	// Order was submitted with an incorrect or invalid market type
	OrderError_ORDER_ERROR_INCORRECT_MARKET_TYPE OrderError = 22
	// Order was submitted with invalid time in force
	OrderError_ORDER_ERROR_INVALID_TIME_IN_FORCE OrderError = 23
	// A GFN order has got to the market when it is in auction mode
	OrderError_ORDER_ERROR_CANNOT_SEND_GFN_ORDER_DURING_AN_AUCTION OrderError = 24
	// A GFA order has got to the market when it is in continuous trading mode
	OrderError_ORDER_ERROR_CANNOT_SEND_GFA_ORDER_DURING_CONTINUOUS_TRADING OrderError = 25
	// Attempt to amend order to GTT without ExpiryAt
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT OrderError = 26
	// Attempt to amend ExpiryAt to a value before CreatedAt
	OrderError_ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT OrderError = 27
	// Attempt to amend to GTC without an ExpiryAt value
	OrderError_ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT OrderError = 28
	// Amending to FOK or IOC is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC OrderError = 29
	// Amending to GFA or GFN is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN OrderError = 30
	// Amending from GFA or GFN is invalid
	OrderError_ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN OrderError = 31
	// IOC orders are not allowed during auction
	OrderError_ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION OrderError = 32
	// FOK orders are not allowed during auction
	OrderError_ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION OrderError = 33
	// Pegged orders must be LIMIT orders
	OrderError_ORDER_ERROR_MUST_BE_LIMIT_ORDER OrderError = 34
	// Pegged orders can only have TIF GTC or GTT
	OrderError_ORDER_ERROR_MUST_BE_GTT_OR_GTC OrderError = 35
	// Pegged order must have a reference price
	OrderError_ORDER_ERROR_WITHOUT_REFERENCE_PRICE OrderError = 36
	// Buy pegged order cannot reference best ask price
	OrderError_ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE OrderError = 37
	// Pegged order offset must be >= 0
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO OrderError = 40
	// Sell pegged order cannot reference best bid price
	OrderError_ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE OrderError = 41
	// Pegged order offset must be > zero
	OrderError_ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO OrderError = 42
	// The party has an insufficient balance, or does not have
	// a general account to submit the order (no deposits made
	// for the required asset)
	OrderError_ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE OrderError = 43
	// Cannot amend details of a non pegged details
	OrderError_ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER OrderError = 44
	// Could not re-price a pegged order because a market price is unavailable
	OrderError_ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER OrderError = 45
	// It is not possible to amend the price of an existing pegged order
	OrderError_ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER OrderError = 46
	// An FOK, IOC, or GFN order was rejected because it resulted in trades outside the price bounds
	OrderError_ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS OrderError = 47
	// Unable to submit pegged order, temporarily too many pegged orders across all markets
	OrderError_ORDER_ERROR_TOO_MANY_PEGGED_ORDERS OrderError = 48
)

// Enum value maps for OrderError.
var (
	OrderError_name = map[int32]string{
		0:  "ORDER_ERROR_UNSPECIFIED",
		1:  "ORDER_ERROR_INVALID_MARKET_ID",
		2:  "ORDER_ERROR_INVALID_ORDER_ID",
		3:  "ORDER_ERROR_OUT_OF_SEQUENCE",
		4:  "ORDER_ERROR_INVALID_REMAINING_SIZE",
		5:  "ORDER_ERROR_TIME_FAILURE",
		6:  "ORDER_ERROR_REMOVAL_FAILURE",
		7:  "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
		8:  "ORDER_ERROR_INVALID_ORDER_REFERENCE",
		9:  "ORDER_ERROR_EDIT_NOT_ALLOWED",
		10: "ORDER_ERROR_AMEND_FAILURE",
		11: "ORDER_ERROR_NOT_FOUND",
		12: "ORDER_ERROR_INVALID_PARTY_ID",
		13: "ORDER_ERROR_MARKET_CLOSED",
		14: "ORDER_ERROR_MARGIN_CHECK_FAILED",
		15: "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
		16: "ORDER_ERROR_INTERNAL_ERROR",
		17: "ORDER_ERROR_INVALID_SIZE",
		18: "ORDER_ERROR_INVALID_PERSISTENCE",
		19: "ORDER_ERROR_INVALID_TYPE",
		20: "ORDER_ERROR_SELF_TRADING",
		21: "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
		22: "ORDER_ERROR_INCORRECT_MARKET_TYPE",
		23: "ORDER_ERROR_INVALID_TIME_IN_FORCE",
		24: "ORDER_ERROR_CANNOT_SEND_GFN_ORDER_DURING_AN_AUCTION",
		25: "ORDER_ERROR_CANNOT_SEND_GFA_ORDER_DURING_CONTINUOUS_TRADING",
		26: "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
		27: "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
		28: "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
		29: "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
		30: "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
		31: "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
		32: "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
		33: "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
		34: "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
		35: "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
		36: "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
		37: "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
		40: "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
		41: "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
		42: "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
		43: "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
		44: "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
		45: "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
		46: "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
		47: "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS",
		48: "ORDER_ERROR_TOO_MANY_PEGGED_ORDERS",
	}
	OrderError_value = map[string]int32{
		"ORDER_ERROR_UNSPECIFIED":                                           0,
		"ORDER_ERROR_INVALID_MARKET_ID":                                     1,
		"ORDER_ERROR_INVALID_ORDER_ID":                                      2,
		"ORDER_ERROR_OUT_OF_SEQUENCE":                                       3,
		"ORDER_ERROR_INVALID_REMAINING_SIZE":                                4,
		"ORDER_ERROR_TIME_FAILURE":                                          5,
		"ORDER_ERROR_REMOVAL_FAILURE":                                       6,
		"ORDER_ERROR_INVALID_EXPIRATION_DATETIME":                           7,
		"ORDER_ERROR_INVALID_ORDER_REFERENCE":                               8,
		"ORDER_ERROR_EDIT_NOT_ALLOWED":                                      9,
		"ORDER_ERROR_AMEND_FAILURE":                                         10,
		"ORDER_ERROR_NOT_FOUND":                                             11,
		"ORDER_ERROR_INVALID_PARTY_ID":                                      12,
		"ORDER_ERROR_MARKET_CLOSED":                                         13,
		"ORDER_ERROR_MARGIN_CHECK_FAILED":                                   14,
		"ORDER_ERROR_MISSING_GENERAL_ACCOUNT":                               15,
		"ORDER_ERROR_INTERNAL_ERROR":                                        16,
		"ORDER_ERROR_INVALID_SIZE":                                          17,
		"ORDER_ERROR_INVALID_PERSISTENCE":                                   18,
		"ORDER_ERROR_INVALID_TYPE":                                          19,
		"ORDER_ERROR_SELF_TRADING":                                          20,
		"ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES":                        21,
		"ORDER_ERROR_INCORRECT_MARKET_TYPE":                                 22,
		"ORDER_ERROR_INVALID_TIME_IN_FORCE":                                 23,
		"ORDER_ERROR_CANNOT_SEND_GFN_ORDER_DURING_AN_AUCTION":               24,
		"ORDER_ERROR_CANNOT_SEND_GFA_ORDER_DURING_CONTINUOUS_TRADING":       25,
		"ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT":                  26,
		"ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT":                             27,
		"ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT":                          28,
		"ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC":                            29,
		"ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN":                            30,
		"ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN":                          31,
		"ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION":                  32,
		"ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION":                  33,
		"ORDER_ERROR_MUST_BE_LIMIT_ORDER":                                   34,
		"ORDER_ERROR_MUST_BE_GTT_OR_GTC":                                    35,
		"ORDER_ERROR_WITHOUT_REFERENCE_PRICE":                               36,
		"ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE":                   37,
		"ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO":               40,
		"ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE":                  41,
		"ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO":                      42,
		"ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE":                            43,
		"ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER": 44,
		"ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER":                        45,
		"ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER":                 46,
		"ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS":              47,
		"ORDER_ERROR_TOO_MANY_PEGGED_ORDERS":                                48,
	}
)

func (x OrderError) Enum() *OrderError {
	p := new(OrderError)
	*p = x
	return p
}

func (x OrderError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderError) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[5].Descriptor()
}

func (OrderError) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[5]
}

func (x OrderError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderError.Descriptor instead.
func (OrderError) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{5}
}

// The Vega blockchain status as reported by the node the caller is connected to
type ChainStatus int32

const (
	// Default value, always invalid
	ChainStatus_CHAIN_STATUS_UNSPECIFIED ChainStatus = 0
	// Blockchain is disconnected
	ChainStatus_CHAIN_STATUS_DISCONNECTED ChainStatus = 1
	// Blockchain is replaying historic transactions
	ChainStatus_CHAIN_STATUS_REPLAYING ChainStatus = 2
	// Blockchain is connected and receiving transactions
	ChainStatus_CHAIN_STATUS_CONNECTED ChainStatus = 3
)

// Enum value maps for ChainStatus.
var (
	ChainStatus_name = map[int32]string{
		0: "CHAIN_STATUS_UNSPECIFIED",
		1: "CHAIN_STATUS_DISCONNECTED",
		2: "CHAIN_STATUS_REPLAYING",
		3: "CHAIN_STATUS_CONNECTED",
	}
	ChainStatus_value = map[string]int32{
		"CHAIN_STATUS_UNSPECIFIED":  0,
		"CHAIN_STATUS_DISCONNECTED": 1,
		"CHAIN_STATUS_REPLAYING":    2,
		"CHAIN_STATUS_CONNECTED":    3,
	}
)

func (x ChainStatus) Enum() *ChainStatus {
	p := new(ChainStatus)
	*p = x
	return p
}

func (x ChainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[6].Descriptor()
}

func (ChainStatus) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[6]
}

func (x ChainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainStatus.Descriptor instead.
func (ChainStatus) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{6}
}

// Various collateral/account types as used by Vega
type AccountType int32

const (
	// Default value
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0
	// Insurance pool accounts contain insurance pool funds for a market
	AccountType_ACCOUNT_TYPE_INSURANCE AccountType = 1
	// Settlement accounts exist only during settlement or mark-to-market
	AccountType_ACCOUNT_TYPE_SETTLEMENT AccountType = 2
	// Margin accounts contain funds set aside for the margin needed to support a party's open positions.
	// Each party will have a margin account for each market they have traded in.
	// The required initial margin is allocated to each market from your general account.
	// Collateral in the margin account can't be withdrawn or used as margin on another market until
	// it is released back to the general account.
	// The Vega protocol uses an internal accounting system to segregate funds held as
	// margin from other funds to ensure they are never lost or 'double spent'
	//
	// Margin account funds will vary as margin requirements on positions change
	AccountType_ACCOUNT_TYPE_MARGIN AccountType = 3
	// General accounts contain the collateral for a party that is not otherwise allocated. A party will
	// have multiple general accounts, one for each asset they want
	// to trade with
	//
	// General accounts are where funds are initially deposited or withdrawn from,
	// it is also the account where funds are taken to fulfil fees and initial margin requirements
	AccountType_ACCOUNT_TYPE_GENERAL AccountType = 4
	// Infrastructure accounts contain fees earned by providing infrastructure on Vega
	AccountType_ACCOUNT_TYPE_FEES_INFRASTRUCTURE AccountType = 5
	// Liquidity accounts contain fees earned by providing liquidity on Vega markets
	AccountType_ACCOUNT_TYPE_FEES_LIQUIDITY AccountType = 6
	// This account is created to hold fees earned by placing orders that sit on the book
	// and are then matched with an incoming order to create a trade - These fees reward parties
	// who provide the best priced liquidity that actually allows trading to take place
	AccountType_ACCOUNT_TYPE_FEES_MAKER AccountType = 7
	// This account is created to maintain liquidity providers funds commitments
	AccountType_ACCOUNT_TYPE_BOND AccountType = 9
	// External account represents an external source (deposit/withdrawal)
	AccountType_ACCOUNT_TYPE_EXTERNAL AccountType = 10
	// Global insurance account for the asset
	AccountType_ACCOUNT_TYPE_GLOBAL_INSURANCE AccountType = 11
	// Global reward account for the asset
	AccountType_ACCOUNT_TYPE_GLOBAL_REWARD AccountType = 12
	// Per asset account used to store pending transfers (if any)
	AccountType_ACCOUNT_TYPE_PENDING_TRANSFERS AccountType = 13
	// Per asset reward account for fees paid to makers
	AccountType_ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES AccountType = 14
	// Per asset reward account for fees received by makers
	AccountType_ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES AccountType = 15
	// Per asset reward account for fees received by liquidity providers
	AccountType_ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES AccountType = 16
	// Per asset reward account for market proposers when the market goes above some trading threshold
	AccountType_ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS AccountType = 17
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0:  "ACCOUNT_TYPE_UNSPECIFIED",
		1:  "ACCOUNT_TYPE_INSURANCE",
		2:  "ACCOUNT_TYPE_SETTLEMENT",
		3:  "ACCOUNT_TYPE_MARGIN",
		4:  "ACCOUNT_TYPE_GENERAL",
		5:  "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
		6:  "ACCOUNT_TYPE_FEES_LIQUIDITY",
		7:  "ACCOUNT_TYPE_FEES_MAKER",
		9:  "ACCOUNT_TYPE_BOND",
		10: "ACCOUNT_TYPE_EXTERNAL",
		11: "ACCOUNT_TYPE_GLOBAL_INSURANCE",
		12: "ACCOUNT_TYPE_GLOBAL_REWARD",
		13: "ACCOUNT_TYPE_PENDING_TRANSFERS",
		14: "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
		15: "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
		16: "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
		17: "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED":                0,
		"ACCOUNT_TYPE_INSURANCE":                  1,
		"ACCOUNT_TYPE_SETTLEMENT":                 2,
		"ACCOUNT_TYPE_MARGIN":                     3,
		"ACCOUNT_TYPE_GENERAL":                    4,
		"ACCOUNT_TYPE_FEES_INFRASTRUCTURE":        5,
		"ACCOUNT_TYPE_FEES_LIQUIDITY":             6,
		"ACCOUNT_TYPE_FEES_MAKER":                 7,
		"ACCOUNT_TYPE_BOND":                       9,
		"ACCOUNT_TYPE_EXTERNAL":                   10,
		"ACCOUNT_TYPE_GLOBAL_INSURANCE":           11,
		"ACCOUNT_TYPE_GLOBAL_REWARD":              12,
		"ACCOUNT_TYPE_PENDING_TRANSFERS":          13,
		"ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES":     14,
		"ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES": 15,
		"ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES":    16,
		"ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS":    17,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[7].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[7]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{7}
}

// Transfers can occur between parties on Vega, these are the types that indicate why a transfer took place
type TransferType int32

const (
	// Default value, always invalid
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	// Funds deducted after final settlement loss
	TransferType_TRANSFER_TYPE_LOSS TransferType = 1
	// Funds added to general account after final settlement gain
	TransferType_TRANSFER_TYPE_WIN TransferType = 2
	// Funds deducted from margin account after mark to market loss
	TransferType_TRANSFER_TYPE_MTM_LOSS TransferType = 4
	// Funds added to margin account after mark to market gain
	TransferType_TRANSFER_TYPE_MTM_WIN TransferType = 5
	// Funds transferred from general account to meet margin requirement
	TransferType_TRANSFER_TYPE_MARGIN_LOW TransferType = 6
	// Excess margin amount returned to general account
	TransferType_TRANSFER_TYPE_MARGIN_HIGH TransferType = 7
	// Margin confiscated from margin account to fulfil closeout
	TransferType_TRANSFER_TYPE_MARGIN_CONFISCATED TransferType = 8
	// Maker fee paid from general account
	TransferType_TRANSFER_TYPE_MAKER_FEE_PAY TransferType = 9
	// Maker fee received into general account
	TransferType_TRANSFER_TYPE_MAKER_FEE_RECEIVE TransferType = 10
	// Infrastructure fee paid from general account
	TransferType_TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY TransferType = 11
	// Infrastructure fee received into general account
	TransferType_TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE TransferType = 12
	// Liquidity fee paid from general account
	TransferType_TRANSFER_TYPE_LIQUIDITY_FEE_PAY TransferType = 13
	// Liquidity fee received into general account
	TransferType_TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE TransferType = 14
	// Bond account funded from general account to meet required bond amount
	TransferType_TRANSFER_TYPE_BOND_LOW TransferType = 15
	// Bond returned to general account after liquidity commitment was reduced
	TransferType_TRANSFER_TYPE_BOND_HIGH TransferType = 16
	// Funds withdrawn from general account
	TransferType_TRANSFER_TYPE_WITHDRAW TransferType = 18
	// Funds deposited to general account
	TransferType_TRANSFER_TYPE_DEPOSIT TransferType = 19
	// Bond account penalised when liquidity commitment not met
	TransferType_TRANSFER_TYPE_BOND_SLASHING TransferType = 20
	// Reward payout received
	TransferType_TRANSFER_TYPE_REWARD_PAYOUT TransferType = 21
	// A network internal instruction for the collateral engine to move funds from a user's general account into the pending transfers pool
	TransferType_TRANSFER_TYPE_TRANSFER_FUNDS_SEND TransferType = 22
	// A network internal instruction for the collateral engine to move funds from the pending transfers pool account into the destination account
	TransferType_TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE TransferType = 23
	// Market-related accounts emptied because market has closed
	TransferType_TRANSFER_TYPE_CLEAR_ACCOUNT TransferType = 24
	// Balances restored after network restart
	TransferType_TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE TransferType = 25
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0:  "TRANSFER_TYPE_UNSPECIFIED",
		1:  "TRANSFER_TYPE_LOSS",
		2:  "TRANSFER_TYPE_WIN",
		4:  "TRANSFER_TYPE_MTM_LOSS",
		5:  "TRANSFER_TYPE_MTM_WIN",
		6:  "TRANSFER_TYPE_MARGIN_LOW",
		7:  "TRANSFER_TYPE_MARGIN_HIGH",
		8:  "TRANSFER_TYPE_MARGIN_CONFISCATED",
		9:  "TRANSFER_TYPE_MAKER_FEE_PAY",
		10: "TRANSFER_TYPE_MAKER_FEE_RECEIVE",
		11: "TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY",
		12: "TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE",
		13: "TRANSFER_TYPE_LIQUIDITY_FEE_PAY",
		14: "TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE",
		15: "TRANSFER_TYPE_BOND_LOW",
		16: "TRANSFER_TYPE_BOND_HIGH",
		18: "TRANSFER_TYPE_WITHDRAW",
		19: "TRANSFER_TYPE_DEPOSIT",
		20: "TRANSFER_TYPE_BOND_SLASHING",
		21: "TRANSFER_TYPE_REWARD_PAYOUT",
		22: "TRANSFER_TYPE_TRANSFER_FUNDS_SEND",
		23: "TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE",
		24: "TRANSFER_TYPE_CLEAR_ACCOUNT",
		25: "TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED":                   0,
		"TRANSFER_TYPE_LOSS":                          1,
		"TRANSFER_TYPE_WIN":                           2,
		"TRANSFER_TYPE_MTM_LOSS":                      4,
		"TRANSFER_TYPE_MTM_WIN":                       5,
		"TRANSFER_TYPE_MARGIN_LOW":                    6,
		"TRANSFER_TYPE_MARGIN_HIGH":                   7,
		"TRANSFER_TYPE_MARGIN_CONFISCATED":            8,
		"TRANSFER_TYPE_MAKER_FEE_PAY":                 9,
		"TRANSFER_TYPE_MAKER_FEE_RECEIVE":             10,
		"TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY":        11,
		"TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE": 12,
		"TRANSFER_TYPE_LIQUIDITY_FEE_PAY":             13,
		"TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE":      14,
		"TRANSFER_TYPE_BOND_LOW":                      15,
		"TRANSFER_TYPE_BOND_HIGH":                     16,
		"TRANSFER_TYPE_WITHDRAW":                      18,
		"TRANSFER_TYPE_DEPOSIT":                       19,
		"TRANSFER_TYPE_BOND_SLASHING":                 20,
		"TRANSFER_TYPE_REWARD_PAYOUT":                 21,
		"TRANSFER_TYPE_TRANSFER_FUNDS_SEND":           22,
		"TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE":     23,
		"TRANSFER_TYPE_CLEAR_ACCOUNT":                 24,
		"TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE":    25,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[8].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[8]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{8}
}

type DispatchMetric int32

const (
	DispatchMetric_DISPATCH_METRIC_UNSPECIFIED DispatchMetric = 0
	// Dispatch metric that is using the total maker fees paid in the market
	DispatchMetric_DISPATCH_METRIC_MAKER_FEES_PAID DispatchMetric = 1
	// Dispatch metric that is using the total maker fees received in the market
	DispatchMetric_DISPATCH_METRIC_MAKER_FEES_RECEIVED DispatchMetric = 2
	// Dispatch metric that is using the total LP fees received in the market
	DispatchMetric_DISPATCH_METRIC_LP_FEES_RECEIVED DispatchMetric = 3
	// Dispatch metric that is using total value of the market if above the required threshold and not paid given proposer bonus yet
	DispatchMetric_DISPATCH_METRIC_MARKET_VALUE DispatchMetric = 4
)

// Enum value maps for DispatchMetric.
var (
	DispatchMetric_name = map[int32]string{
		0: "DISPATCH_METRIC_UNSPECIFIED",
		1: "DISPATCH_METRIC_MAKER_FEES_PAID",
		2: "DISPATCH_METRIC_MAKER_FEES_RECEIVED",
		3: "DISPATCH_METRIC_LP_FEES_RECEIVED",
		4: "DISPATCH_METRIC_MARKET_VALUE",
	}
	DispatchMetric_value = map[string]int32{
		"DISPATCH_METRIC_UNSPECIFIED":         0,
		"DISPATCH_METRIC_MAKER_FEES_PAID":     1,
		"DISPATCH_METRIC_MAKER_FEES_RECEIVED": 2,
		"DISPATCH_METRIC_LP_FEES_RECEIVED":    3,
		"DISPATCH_METRIC_MARKET_VALUE":        4,
	}
)

func (x DispatchMetric) Enum() *DispatchMetric {
	p := new(DispatchMetric)
	*p = x
	return p
}

func (x DispatchMetric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DispatchMetric) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[9].Descriptor()
}

func (DispatchMetric) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[9]
}

func (x DispatchMetric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DispatchMetric.Descriptor instead.
func (DispatchMetric) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{9}
}

// Node status type
type NodeStatus int32

const (
	NodeStatus_NODE_STATUS_UNSPECIFIED NodeStatus = 0
	// The node is validating
	NodeStatus_NODE_STATUS_VALIDATOR NodeStatus = 1
	// The node is non-validating
	NodeStatus_NODE_STATUS_NON_VALIDATOR NodeStatus = 2
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0: "NODE_STATUS_UNSPECIFIED",
		1: "NODE_STATUS_VALIDATOR",
		2: "NODE_STATUS_NON_VALIDATOR",
	}
	NodeStatus_value = map[string]int32{
		"NODE_STATUS_UNSPECIFIED":   0,
		"NODE_STATUS_VALIDATOR":     1,
		"NODE_STATUS_NON_VALIDATOR": 2,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[10].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[10]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{10}
}

// What epoch action has occurred
type EpochAction int32

const (
	EpochAction_EPOCH_ACTION_UNSPECIFIED EpochAction = 0
	// The epoch update is for a new epoch
	EpochAction_EPOCH_ACTION_START EpochAction = 1
	// The epoch update is for the end of an epoch
	EpochAction_EPOCH_ACTION_END EpochAction = 2
)

// Enum value maps for EpochAction.
var (
	EpochAction_name = map[int32]string{
		0: "EPOCH_ACTION_UNSPECIFIED",
		1: "EPOCH_ACTION_START",
		2: "EPOCH_ACTION_END",
	}
	EpochAction_value = map[string]int32{
		"EPOCH_ACTION_UNSPECIFIED": 0,
		"EPOCH_ACTION_START":       1,
		"EPOCH_ACTION_END":         2,
	}
)

func (x EpochAction) Enum() *EpochAction {
	p := new(EpochAction)
	*p = x
	return p
}

func (x EpochAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpochAction) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[11].Descriptor()
}

func (EpochAction) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[11]
}

func (x EpochAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EpochAction.Descriptor instead.
func (EpochAction) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{11}
}

// Validation status of the node
type ValidatorNodeStatus int32

const (
	ValidatorNodeStatus_VALIDATOR_NODE_STATUS_UNSPECIFIED ValidatorNodeStatus = 0
	// The node is a tendermint validator
	ValidatorNodeStatus_VALIDATOR_NODE_STATUS_TENDERMINT ValidatorNodeStatus = 1
	// The node is an ersatz validator
	ValidatorNodeStatus_VALIDATOR_NODE_STATUS_ERSATZ ValidatorNodeStatus = 2
	// The node is a pending validator
	ValidatorNodeStatus_VALIDATOR_NODE_STATUS_PENDING ValidatorNodeStatus = 3
)

// Enum value maps for ValidatorNodeStatus.
var (
	ValidatorNodeStatus_name = map[int32]string{
		0: "VALIDATOR_NODE_STATUS_UNSPECIFIED",
		1: "VALIDATOR_NODE_STATUS_TENDERMINT",
		2: "VALIDATOR_NODE_STATUS_ERSATZ",
		3: "VALIDATOR_NODE_STATUS_PENDING",
	}
	ValidatorNodeStatus_value = map[string]int32{
		"VALIDATOR_NODE_STATUS_UNSPECIFIED": 0,
		"VALIDATOR_NODE_STATUS_TENDERMINT":  1,
		"VALIDATOR_NODE_STATUS_ERSATZ":      2,
		"VALIDATOR_NODE_STATUS_PENDING":     3,
	}
)

func (x ValidatorNodeStatus) Enum() *ValidatorNodeStatus {
	p := new(ValidatorNodeStatus)
	*p = x
	return p
}

func (x ValidatorNodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatorNodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[12].Descriptor()
}

func (ValidatorNodeStatus) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[12]
}

func (x ValidatorNodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatorNodeStatus.Descriptor instead.
func (ValidatorNodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{12}
}

// Time In Force for an order
type Order_TimeInForce int32

const (
	// Default value for TimeInForce, can be valid for an amend
	Order_TIME_IN_FORCE_UNSPECIFIED Order_TimeInForce = 0
	// Good until cancelled, the order trades any amount and as much as possible
	// and remains on the book until it either trades completely or is cancelled
	Order_TIME_IN_FORCE_GTC Order_TimeInForce = 1
	// Good until specified time, this order type trades any amount and as much as possible
	// and remains on the book until it either trades completely, is cancelled, or expires at a set time
	// NOTE: this may in future be multiple types or have sub types for orders that provide different ways of specifying expiry
	Order_TIME_IN_FORCE_GTT Order_TimeInForce = 2
	// Immediate or cancel, the order trades any amount and as much as possible
	// but does not remain on the book (whether it trades or not)
	Order_TIME_IN_FORCE_IOC Order_TimeInForce = 3
	// Fill or kill, The order either trades completely (remainingSize == 0 after adding)
	// or not at all, does not remain on the book if it doesn't trade
	Order_TIME_IN_FORCE_FOK Order_TimeInForce = 4
	// Good for auction, this order is only accepted during an auction period
	Order_TIME_IN_FORCE_GFA Order_TimeInForce = 5
	// Good for normal, this order is only accepted during normal trading (that can be continuous trading or frequent batched auctions)
	Order_TIME_IN_FORCE_GFN Order_TimeInForce = 6
)

// Enum value maps for Order_TimeInForce.
var (
	Order_TimeInForce_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "TIME_IN_FORCE_GTC",
		2: "TIME_IN_FORCE_GTT",
		3: "TIME_IN_FORCE_IOC",
		4: "TIME_IN_FORCE_FOK",
		5: "TIME_IN_FORCE_GFA",
		6: "TIME_IN_FORCE_GFN",
	}
	Order_TimeInForce_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED": 0,
		"TIME_IN_FORCE_GTC":         1,
		"TIME_IN_FORCE_GTT":         2,
		"TIME_IN_FORCE_IOC":         3,
		"TIME_IN_FORCE_FOK":         4,
		"TIME_IN_FORCE_GFA":         5,
		"TIME_IN_FORCE_GFN":         6,
	}
)

func (x Order_TimeInForce) Enum() *Order_TimeInForce {
	p := new(Order_TimeInForce)
	*p = x
	return p
}

func (x Order_TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[13].Descriptor()
}

func (Order_TimeInForce) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[13]
}

func (x Order_TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_TimeInForce.Descriptor instead.
func (Order_TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{3, 0}
}

// Type values for an order
type Order_Type int32

const (
	// Default value, always invalid
	Order_TYPE_UNSPECIFIED Order_Type = 0
	// Used for Limit orders
	Order_TYPE_LIMIT Order_Type = 1
	// Used for Market orders
	Order_TYPE_MARKET Order_Type = 2
	// Used for orders where the initiating party is the network (with distressed parties)
	Order_TYPE_NETWORK Order_Type = 3
)

// Enum value maps for Order_Type.
var (
	Order_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_LIMIT",
		2: "TYPE_MARKET",
		3: "TYPE_NETWORK",
	}
	Order_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_LIMIT":       1,
		"TYPE_MARKET":      2,
		"TYPE_NETWORK":     3,
	}
)

func (x Order_Type) Enum() *Order_Type {
	p := new(Order_Type)
	*p = x
	return p
}

func (x Order_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[14].Descriptor()
}

func (Order_Type) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[14]
}

func (x Order_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Type.Descriptor instead.
func (Order_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{3, 1}
}

// Status values for an order
type Order_Status int32

const (
	// Default value, always invalid
	Order_STATUS_UNSPECIFIED Order_Status = 0
	// Used for active unfilled or partially filled orders
	Order_STATUS_ACTIVE Order_Status = 1
	// Used for expired GTT orders
	Order_STATUS_EXPIRED Order_Status = 2
	// Used for orders cancelled by the party that created the order
	Order_STATUS_CANCELLED Order_Status = 3
	// Used for unfilled FOK or IOC orders, and for orders that were stopped by the network
	Order_STATUS_STOPPED Order_Status = 4
	// Used for closed fully filled orders
	Order_STATUS_FILLED Order_Status = 5
	// Used for orders when not enough collateral was available to fill the margin requirements
	Order_STATUS_REJECTED Order_Status = 6
	// Used for closed partially filled IOC orders
	Order_STATUS_PARTIALLY_FILLED Order_Status = 7
	// Order has been removed from the order book and has been parked, this applies to pegged orders only
	Order_STATUS_PARKED Order_Status = 8
)

// Enum value maps for Order_Status.
var (
	Order_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ACTIVE",
		2: "STATUS_EXPIRED",
		3: "STATUS_CANCELLED",
		4: "STATUS_STOPPED",
		5: "STATUS_FILLED",
		6: "STATUS_REJECTED",
		7: "STATUS_PARTIALLY_FILLED",
		8: "STATUS_PARKED",
	}
	Order_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":      0,
		"STATUS_ACTIVE":           1,
		"STATUS_EXPIRED":          2,
		"STATUS_CANCELLED":        3,
		"STATUS_STOPPED":          4,
		"STATUS_FILLED":           5,
		"STATUS_REJECTED":         6,
		"STATUS_PARTIALLY_FILLED": 7,
		"STATUS_PARKED":           8,
	}
)

func (x Order_Status) Enum() *Order_Status {
	p := new(Order_Status)
	*p = x
	return p
}

func (x Order_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[15].Descriptor()
}

func (Order_Status) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[15]
}

func (x Order_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Status.Descriptor instead.
func (Order_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{3, 2}
}

// Type values for a trade
type Trade_Type int32

const (
	// Default value, always invalid
	Trade_TYPE_UNSPECIFIED Trade_Type = 0
	// Normal trading between two parties
	Trade_TYPE_DEFAULT Trade_Type = 1
	// Trading initiated by the network with another party on the book,
	// which helps to zero-out the positions of one or more distressed parties
	Trade_TYPE_NETWORK_CLOSE_OUT_GOOD Trade_Type = 2
	// Trading initiated by the network with another party off the book,
	// with a distressed party in order to zero-out the position of the party
	Trade_TYPE_NETWORK_CLOSE_OUT_BAD Trade_Type = 3
)

// Enum value maps for Trade_Type.
var (
	Trade_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DEFAULT",
		2: "TYPE_NETWORK_CLOSE_OUT_GOOD",
		3: "TYPE_NETWORK_CLOSE_OUT_BAD",
	}
	Trade_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":            0,
		"TYPE_DEFAULT":                1,
		"TYPE_NETWORK_CLOSE_OUT_GOOD": 2,
		"TYPE_NETWORK_CLOSE_OUT_BAD":  3,
	}
)

func (x Trade_Type) Enum() *Trade_Type {
	p := new(Trade_Type)
	*p = x
	return p
}

func (x Trade_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trade_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[16].Descriptor()
}

func (Trade_Type) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[16]
}

func (x Trade_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trade_Type.Descriptor instead.
func (Trade_Type) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{7, 0}
}

// The status of the deposit
type Deposit_Status int32

const (
	// Default value, always invalid
	Deposit_STATUS_UNSPECIFIED Deposit_Status = 0
	// The deposit is being processed by the network
	Deposit_STATUS_OPEN Deposit_Status = 1
	// The deposit has been cancelled by the network
	Deposit_STATUS_CANCELLED Deposit_Status = 2
	// The deposit has been finalised and accounts have been updated
	Deposit_STATUS_FINALIZED Deposit_Status = 3
)

// Enum value maps for Deposit_Status.
var (
	Deposit_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_OPEN",
		2: "STATUS_CANCELLED",
		3: "STATUS_FINALIZED",
	}
	Deposit_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_OPEN":        1,
		"STATUS_CANCELLED":   2,
		"STATUS_FINALIZED":   3,
	}
)

func (x Deposit_Status) Enum() *Deposit_Status {
	p := new(Deposit_Status)
	*p = x
	return p
}

func (x Deposit_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deposit_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[17].Descriptor()
}

func (Deposit_Status) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[17]
}

func (x Deposit_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deposit_Status.Descriptor instead.
func (Deposit_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{16, 0}
}

// The status of the withdrawal
type Withdrawal_Status int32

const (
	// Default value, always invalid
	Withdrawal_STATUS_UNSPECIFIED Withdrawal_Status = 0
	// The withdrawal is open and being processed by the network
	Withdrawal_STATUS_OPEN Withdrawal_Status = 1
	// The withdrawal have been cancelled
	Withdrawal_STATUS_REJECTED Withdrawal_Status = 2
	// The withdrawal went through and is fully finalised, the funds are removed from the
	// Vega network and are unlocked on the foreign chain bridge, for example, on the Ethereum network
	Withdrawal_STATUS_FINALIZED Withdrawal_Status = 3
)

// Enum value maps for Withdrawal_Status.
var (
	Withdrawal_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_OPEN",
		2: "STATUS_REJECTED",
		3: "STATUS_FINALIZED",
	}
	Withdrawal_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_OPEN":        1,
		"STATUS_REJECTED":    2,
		"STATUS_FINALIZED":   3,
	}
)

func (x Withdrawal_Status) Enum() *Withdrawal_Status {
	p := new(Withdrawal_Status)
	*p = x
	return p
}

func (x Withdrawal_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Withdrawal_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[18].Descriptor()
}

func (Withdrawal_Status) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[18]
}

func (x Withdrawal_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Withdrawal_Status.Descriptor instead.
func (Withdrawal_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{17, 0}
}

// Status of a liquidity provision order
type LiquidityProvision_Status int32

const (
	// The default value
	LiquidityProvision_STATUS_UNSPECIFIED LiquidityProvision_Status = 0
	// The liquidity provision is active
	LiquidityProvision_STATUS_ACTIVE LiquidityProvision_Status = 1
	// The liquidity provision was stopped by the network
	LiquidityProvision_STATUS_STOPPED LiquidityProvision_Status = 2
	// The liquidity provision was cancelled by the liquidity provider
	LiquidityProvision_STATUS_CANCELLED LiquidityProvision_Status = 3
	// The liquidity provision was invalid and got rejected
	LiquidityProvision_STATUS_REJECTED LiquidityProvision_Status = 4
	// The liquidity provision is valid and accepted by network, but orders aren't deployed
	LiquidityProvision_STATUS_UNDEPLOYED LiquidityProvision_Status = 5
	// The liquidity provision is valid and accepted by network
	// but has never been deployed. If when it's possible to deploy the orders for the first time
	// margin check fails, then they will be cancelled without any penalties.
	LiquidityProvision_STATUS_PENDING LiquidityProvision_Status = 6
)

// Enum value maps for LiquidityProvision_Status.
var (
	LiquidityProvision_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ACTIVE",
		2: "STATUS_STOPPED",
		3: "STATUS_CANCELLED",
		4: "STATUS_REJECTED",
		5: "STATUS_UNDEPLOYED",
		6: "STATUS_PENDING",
	}
	LiquidityProvision_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ACTIVE":      1,
		"STATUS_STOPPED":     2,
		"STATUS_CANCELLED":   3,
		"STATUS_REJECTED":    4,
		"STATUS_UNDEPLOYED":  5,
		"STATUS_PENDING":     6,
	}
)

func (x LiquidityProvision_Status) Enum() *LiquidityProvision_Status {
	p := new(LiquidityProvision_Status)
	*p = x
	return p
}

func (x LiquidityProvision_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiquidityProvision_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_vega_proto_enumTypes[19].Descriptor()
}

func (LiquidityProvision_Status) Type() protoreflect.EnumType {
	return &file_vega_vega_proto_enumTypes[19]
}

func (x LiquidityProvision_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiquidityProvision_Status.Descriptor instead.
func (LiquidityProvision_Status) EnumDescriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{38, 0}
}

// A party represents an entity who wishes to trade on or query a Vega network
type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the party, typically represented by a public key
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{0}
}

func (x *Party) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Risk factors are used to calculate the current risk associated with orders trading on a given market
type RiskFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID that relates to this risk factor
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Short Risk factor value
	Short string `protobuf:"bytes,2,opt,name=short,proto3" json:"short,omitempty"`
	// Long Risk factor value
	Long string `protobuf:"bytes,3,opt,name=long,proto3" json:"long,omitempty"`
}

func (x *RiskFactor) Reset() {
	*x = RiskFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiskFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskFactor) ProtoMessage() {}

func (x *RiskFactor) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskFactor.ProtoReflect.Descriptor instead.
func (*RiskFactor) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{1}
}

func (x *RiskFactor) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *RiskFactor) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RiskFactor) GetLong() string {
	if x != nil {
		return x.Long
	}
	return ""
}

// Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET
// They can be used for any limit order that is valid during continuous trading
type PeggedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The price point the order is linked to
	Reference PeggedReference `protobuf:"varint,1,opt,name=reference,proto3,enum=vega.PeggedReference" json:"reference,omitempty"`
	// Offset from the price reference
	Offset string `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PeggedOrder) Reset() {
	*x = PeggedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeggedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeggedOrder) ProtoMessage() {}

func (x *PeggedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeggedOrder.ProtoReflect.Descriptor instead.
func (*PeggedOrder) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{2}
}

func (x *PeggedOrder) GetReference() PeggedReference {
	if x != nil {
		return x.Reference
	}
	return PeggedReference_PEGGED_REFERENCE_UNSPECIFIED
}

func (x *PeggedOrder) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

// An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the order (set by the system after consensus)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier for the order
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier for the order
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Side for the order, e.g. SIDE_BUY or SIDE_SELL
	Side Side `protobuf:"varint,4,opt,name=side,proto3,enum=vega.Side" json:"side,omitempty"`
	// Price for the order, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	Price string `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	// Size for the order, for example, in a futures market the size equals the number of contracts
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	Remaining uint64 `protobuf:"varint,7,opt,name=remaining,proto3" json:"remaining,omitempty"`
	// Time in force indicates how long an order will remain active before it is executed or expires.
	// - See OrderTimeInForce
	TimeInForce Order_TimeInForce `protobuf:"varint,8,opt,name=time_in_force,json=timeInForce,proto3,enum=vega.Order_TimeInForce" json:"time_in_force,omitempty"`
	// Type for the order - See OrderType
	Type Order_Type `protobuf:"varint,9,opt,name=type,proto3,enum=vega.Order_Type" json:"type,omitempty"`
	// Timestamp for when the order was created at, in nanoseconds since the epoch
	CreatedAt int64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The current status for the order.
	// - For detail on `STATUS_REJECTED` please check the OrderError value given in the `reason` field
	Status Order_Status `protobuf:"varint,11,opt,name=status,proto3,enum=vega.Order_Status" json:"status,omitempty"`
	// Timestamp for when the order will expire, in nanoseconds since the epoch
	ExpiresAt int64 `protobuf:"varint,12,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Reference given for the order, this is typically used to retrieve an order submitted through consensus
	// - Currently set internally by the node to return a unique reference identifier for the order submission
	Reference string `protobuf:"bytes,13,opt,name=reference,proto3" json:"reference,omitempty"`
	// If the Order `status` is `STATUS_REJECTED` then an OrderError reason will be specified
	// - The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors
	Reason *OrderError `protobuf:"varint,14,opt,name=reason,proto3,enum=vega.OrderError,oneof" json:"reason,omitempty"`
	// Timestamp for when the order was last updated, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	UpdatedAt int64 `protobuf:"varint,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The version for the order, initial value is version 1 and is incremented after each successful amend
	Version uint64 `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
	// Batch identifier for the order, used internally for orders submitted during auctions
	// to keep track of the auction batch this order falls under (required for fees calculation)
	BatchId uint64 `protobuf:"varint,17,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Pegged order details, used only if the order represents a pegged order.
	PeggedOrder *PeggedOrder `protobuf:"bytes,18,opt,name=pegged_order,json=peggedOrder,proto3" json:"pegged_order,omitempty"`
	// Is this order created as part of a liquidity provision, will be empty if not.
	LiquidityProvisionId string `protobuf:"bytes,19,opt,name=liquidity_provision_id,json=liquidityProvisionId,proto3" json:"liquidity_provision_id,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{3}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *Order) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Order) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Order) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Order) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Order) GetRemaining() uint64 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *Order) GetTimeInForce() Order_TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return Order_TIME_IN_FORCE_UNSPECIFIED
}

func (x *Order) GetType() Order_Type {
	if x != nil {
		return x.Type
	}
	return Order_TYPE_UNSPECIFIED
}

func (x *Order) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Order) GetStatus() Order_Status {
	if x != nil {
		return x.Status
	}
	return Order_STATUS_UNSPECIFIED
}

func (x *Order) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *Order) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Order) GetReason() OrderError {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return OrderError_ORDER_ERROR_UNSPECIFIED
}

func (x *Order) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Order) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Order) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *Order) GetPeggedOrder() *PeggedOrder {
	if x != nil {
		return x.PeggedOrder
	}
	return nil
}

func (x *Order) GetLiquidityProvisionId() string {
	if x != nil {
		return x.LiquidityProvisionId
	}
	return ""
}

// Used when cancelling an order
type OrderCancellationConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The order that was cancelled
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderCancellationConfirmation) Reset() {
	*x = OrderCancellationConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancellationConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancellationConfirmation) ProtoMessage() {}

func (x *OrderCancellationConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancellationConfirmation.ProtoReflect.Descriptor instead.
func (*OrderCancellationConfirmation) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{4}
}

func (x *OrderCancellationConfirmation) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Used when confirming an order
type OrderConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The order that was confirmed
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	// 0 or more trades that were emitted
	Trades []*Trade `protobuf:"bytes,2,rep,name=trades,proto3" json:"trades,omitempty"`
	// 0 or more passive orders that were affected
	PassiveOrdersAffected []*Order `protobuf:"bytes,3,rep,name=passive_orders_affected,json=passiveOrdersAffected,proto3" json:"passive_orders_affected,omitempty"`
}

func (x *OrderConfirmation) Reset() {
	*x = OrderConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderConfirmation) ProtoMessage() {}

func (x *OrderConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderConfirmation.ProtoReflect.Descriptor instead.
func (*OrderConfirmation) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{5}
}

func (x *OrderConfirmation) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *OrderConfirmation) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *OrderConfirmation) GetPassiveOrdersAffected() []*Order {
	if x != nil {
		return x.PassiveOrdersAffected
	}
	return nil
}

// AuctionIndicativeState is used to emit an event with the indicative price/volume per market during an auction
type AuctionIndicativeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market identifier for which this state relates to
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The Indicative Uncrossing Price is the price at which all trades would occur if the auction uncrossed now
	IndicativePrice string `protobuf:"bytes,2,opt,name=indicative_price,json=indicativePrice,proto3" json:"indicative_price,omitempty"`
	// The Indicative Uncrossing Volume is the volume available at the Indicative crossing price if the auction uncrossed now
	IndicativeVolume uint64 `protobuf:"varint,3,opt,name=indicative_volume,json=indicativeVolume,proto3" json:"indicative_volume,omitempty"`
	// The timestamp at which the auction started
	AuctionStart int64 `protobuf:"varint,4,opt,name=auction_start,json=auctionStart,proto3" json:"auction_start,omitempty"`
	// The timestamp at which the auction is meant to stop
	AuctionEnd int64 `protobuf:"varint,5,opt,name=auction_end,json=auctionEnd,proto3" json:"auction_end,omitempty"`
}

func (x *AuctionIndicativeState) Reset() {
	*x = AuctionIndicativeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionIndicativeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionIndicativeState) ProtoMessage() {}

func (x *AuctionIndicativeState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionIndicativeState.ProtoReflect.Descriptor instead.
func (*AuctionIndicativeState) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{6}
}

func (x *AuctionIndicativeState) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *AuctionIndicativeState) GetIndicativePrice() string {
	if x != nil {
		return x.IndicativePrice
	}
	return ""
}

func (x *AuctionIndicativeState) GetIndicativeVolume() uint64 {
	if x != nil {
		return x.IndicativeVolume
	}
	return 0
}

func (x *AuctionIndicativeState) GetAuctionStart() int64 {
	if x != nil {
		return x.AuctionStart
	}
	return 0
}

func (x *AuctionIndicativeState) GetAuctionEnd() int64 {
	if x != nil {
		return x.AuctionEnd
	}
	return 0
}

// A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the trade (generated by Vega)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Market identifier (the market that the trade occurred on)
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Price for the trade, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	Price string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	// Size filled for the trade
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	Size uint64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// Unique party identifier for the buyer
	Buyer string `protobuf:"bytes,5,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// Unique party identifier for the seller
	Seller string `protobuf:"bytes,6,opt,name=seller,proto3" json:"seller,omitempty"`
	// Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)
	Aggressor Side `protobuf:"varint,7,opt,name=aggressor,proto3,enum=vega.Side" json:"aggressor,omitempty"`
	// Identifier of the order from the buy side
	BuyOrder string `protobuf:"bytes,8,opt,name=buy_order,json=buyOrder,proto3" json:"buy_order,omitempty"`
	// Identifier of the order from the sell side
	SellOrder string `protobuf:"bytes,9,opt,name=sell_order,json=sellOrder,proto3" json:"sell_order,omitempty"`
	// Timestamp for when the trade occurred, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	Timestamp int64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Type for the trade - See [`Trade.Type`](#vega.Trade.Type)
	Type Trade_Type `protobuf:"varint,11,opt,name=type,proto3,enum=vega.Trade_Type" json:"type,omitempty"`
	// Fee amount charged to the buyer party for the trade
	BuyerFee *Fee `protobuf:"bytes,12,opt,name=buyer_fee,json=buyerFee,proto3" json:"buyer_fee,omitempty"`
	// Fee amount charged to the seller party for the trade
	SellerFee *Fee `protobuf:"bytes,13,opt,name=seller_fee,json=sellerFee,proto3" json:"seller_fee,omitempty"`
	// Auction batch number that the buy side order was placed in
	BuyerAuctionBatch uint64 `protobuf:"varint,14,opt,name=buyer_auction_batch,json=buyerAuctionBatch,proto3" json:"buyer_auction_batch,omitempty"`
	// Auction batch number that the sell side order was placed in
	SellerAuctionBatch uint64 `protobuf:"varint,15,opt,name=seller_auction_batch,json=sellerAuctionBatch,proto3" json:"seller_auction_batch,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{7}
}

func (x *Trade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trade) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *Trade) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Trade) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Trade) GetBuyer() string {
	if x != nil {
		return x.Buyer
	}
	return ""
}

func (x *Trade) GetSeller() string {
	if x != nil {
		return x.Seller
	}
	return ""
}

func (x *Trade) GetAggressor() Side {
	if x != nil {
		return x.Aggressor
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Trade) GetBuyOrder() string {
	if x != nil {
		return x.BuyOrder
	}
	return ""
}

func (x *Trade) GetSellOrder() string {
	if x != nil {
		return x.SellOrder
	}
	return ""
}

func (x *Trade) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Trade) GetType() Trade_Type {
	if x != nil {
		return x.Type
	}
	return Trade_TYPE_UNSPECIFIED
}

func (x *Trade) GetBuyerFee() *Fee {
	if x != nil {
		return x.BuyerFee
	}
	return nil
}

func (x *Trade) GetSellerFee() *Fee {
	if x != nil {
		return x.SellerFee
	}
	return nil
}

func (x *Trade) GetBuyerAuctionBatch() uint64 {
	if x != nil {
		return x.BuyerAuctionBatch
	}
	return 0
}

func (x *Trade) GetSellerAuctionBatch() uint64 {
	if x != nil {
		return x.SellerAuctionBatch
	}
	return 0
}

// Represents any fees paid by a party, resulting from a trade
type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee amount paid to the non-aggressive party of the trade
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	MakerFee string `protobuf:"bytes,1,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	// Fee amount paid for maintaining the Vega infrastructure
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	InfrastructureFee string `protobuf:"bytes,2,opt,name=infrastructure_fee,json=infrastructureFee,proto3" json:"infrastructure_fee,omitempty"`
	// Fee amount paid to market makers
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	LiquidityFee string `protobuf:"bytes,3,opt,name=liquidity_fee,json=liquidityFee,proto3" json:"liquidity_fee,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{8}
}

func (x *Fee) GetMakerFee() string {
	if x != nil {
		return x.MakerFee
	}
	return ""
}

func (x *Fee) GetInfrastructureFee() string {
	if x != nil {
		return x.InfrastructureFee
	}
	return ""
}

func (x *Fee) GetLiquidityFee() string {
	if x != nil {
		return x.LiquidityFee
	}
	return ""
}

type TradeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of one or more trades
	Trades []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradeSet) Reset() {
	*x = TradeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSet) ProtoMessage() {}

func (x *TradeSet) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSet.ProtoReflect.Descriptor instead.
func (*TradeSet) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{9}
}

func (x *TradeSet) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Represents the high, low, open, and closing prices for an interval of trading,
// referred to commonly as a candlestick or candle
type Candle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// An ISO-8601 datetime with nanosecond precision for when the candle was last updated
	Datetime string `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
	// Highest price for trading during the candle interval
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	High string `protobuf:"bytes,3,opt,name=high,proto3" json:"high,omitempty"`
	// Lowest price for trading during the candle interval
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	Low string `protobuf:"bytes,4,opt,name=low,proto3" json:"low,omitempty"`
	// Open trade price
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	Open string `protobuf:"bytes,5,opt,name=open,proto3" json:"open,omitempty"`
	// Closing trade price
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	Close string `protobuf:"bytes,6,opt,name=close,proto3" json:"close,omitempty"`
	// Total trading volume during the candle interval
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	Volume uint64 `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`
	// Time interval for the candle - See [`Interval`](#vega.Interval)
	Interval Interval `protobuf:"varint,8,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
}

func (x *Candle) Reset() {
	*x = Candle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Candle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candle) ProtoMessage() {}

func (x *Candle) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candle.ProtoReflect.Descriptor instead.
func (*Candle) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{10}
}

func (x *Candle) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Candle) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *Candle) GetHigh() string {
	if x != nil {
		return x.High
	}
	return ""
}

func (x *Candle) GetLow() string {
	if x != nil {
		return x.Low
	}
	return ""
}

func (x *Candle) GetOpen() string {
	if x != nil {
		return x.Open
	}
	return ""
}

func (x *Candle) GetClose() string {
	if x != nil {
		return x.Close
	}
	return ""
}

func (x *Candle) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Candle) GetInterval() Interval {
	if x != nil {
		return x.Interval
	}
	return Interval_INTERVAL_UNSPECIFIED
}

// Represents a price level from market depth or order book data
type PriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price for the price level, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// Number of orders at the price level
	NumberOfOrders uint64 `protobuf:"varint,2,opt,name=number_of_orders,json=numberOfOrders,proto3" json:"number_of_orders,omitempty"`
	// Volume at the price level
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	Volume uint64 `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *PriceLevel) Reset() {
	*x = PriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceLevel) ProtoMessage() {}

func (x *PriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceLevel.ProtoReflect.Descriptor instead.
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{11}
}

func (x *PriceLevel) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PriceLevel) GetNumberOfOrders() uint64 {
	if x != nil {
		return x.NumberOfOrders
	}
	return 0
}

func (x *PriceLevel) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Represents market depth or order book data for the specified market on Vega
type MarketDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Collection of price levels for the buy side of the book
	Buy []*PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Collection of price levels for the sell side of the book
	Sell []*PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Sequence number for the market depth data returned
	SequenceNumber uint64 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *MarketDepth) Reset() {
	*x = MarketDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepth) ProtoMessage() {}

func (x *MarketDepth) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepth.ProtoReflect.Descriptor instead.
func (*MarketDepth) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{12}
}

func (x *MarketDepth) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketDepth) GetBuy() []*PriceLevel {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *MarketDepth) GetSell() []*PriceLevel {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *MarketDepth) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Represents the changed market depth since the last update
type MarketDepthUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Collection of updated price levels for the buy side of the book
	Buy []*PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Collection of updated price levels for the sell side of the book
	Sell []*PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Sequence number for the market depth update data returned. It is increasing but not monotonic
	SequenceNumber uint64 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Sequence number of the previous market depth update, for checking there are no gaps
	PreviousSequenceNumber uint64 `protobuf:"varint,5,opt,name=previous_sequence_number,json=previousSequenceNumber,proto3" json:"previous_sequence_number,omitempty"`
}

func (x *MarketDepthUpdate) Reset() {
	*x = MarketDepthUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdate) ProtoMessage() {}

func (x *MarketDepthUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdate.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdate) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{13}
}

func (x *MarketDepthUpdate) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketDepthUpdate) GetBuy() []*PriceLevel {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *MarketDepthUpdate) GetSell() []*PriceLevel {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *MarketDepthUpdate) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *MarketDepthUpdate) GetPreviousSequenceNumber() uint64 {
	if x != nil {
		return x.PreviousSequenceNumber
	}
	return 0
}

// Represents position data for a party on the specified market on Vega
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Open volume for the position, value is signed +ve for long and -ve for short
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	OpenVolume int64 `protobuf:"varint,3,opt,name=open_volume,json=openVolume,proto3" json:"open_volume,omitempty"`
	// Realised profit and loss for the position, value is signed +ve for long and -ve for short
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	RealisedPnl string `protobuf:"bytes,4,opt,name=realised_pnl,json=realisedPnl,proto3" json:"realised_pnl,omitempty"`
	// Unrealised profit and loss for the position, value is signed +ve for long and -ve for short
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	UnrealisedPnl string `protobuf:"bytes,5,opt,name=unrealised_pnl,json=unrealisedPnl,proto3" json:"unrealised_pnl,omitempty"`
	// Average entry price for the position, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	AverageEntryPrice string `protobuf:"bytes,6,opt,name=average_entry_price,json=averageEntryPrice,proto3" json:"average_entry_price,omitempty"`
	// Timestamp for the latest time the position was updated
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Sum of profit that could not be paid due to loss socialisation.
	LossSocialisationAmount string `protobuf:"bytes,8,opt,name=loss_socialisation_amount,json=lossSocialisationAmount,proto3" json:"loss_socialisation_amount,omitempty"`
	// Position status, indicating whether the party was distressed and had orders cancelled or was closed out.
	PositionStatus PositionStatus `protobuf:"varint,9,opt,name=position_status,json=positionStatus,proto3,enum=vega.PositionStatus" json:"position_status,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{14}
}

func (x *Position) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *Position) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Position) GetOpenVolume() int64 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

func (x *Position) GetRealisedPnl() string {
	if x != nil {
		return x.RealisedPnl
	}
	return ""
}

func (x *Position) GetUnrealisedPnl() string {
	if x != nil {
		return x.UnrealisedPnl
	}
	return ""
}

func (x *Position) GetAverageEntryPrice() string {
	if x != nil {
		return x.AverageEntryPrice
	}
	return ""
}

func (x *Position) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Position) GetLossSocialisationAmount() string {
	if x != nil {
		return x.LossSocialisationAmount
	}
	return ""
}

func (x *Position) GetPositionStatus() PositionStatus {
	if x != nil {
		return x.PositionStatus
	}
	return PositionStatus_POSITION_STATUS_UNSPECIFIED
}

type PositionTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume for the position trade, value is signed +ve for long and -ve for short
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	Volume int64 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// Price for the position trade, the price is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *PositionTrade) Reset() {
	*x = PositionTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionTrade) ProtoMessage() {}

func (x *PositionTrade) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionTrade.ProtoReflect.Descriptor instead.
func (*PositionTrade) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{15}
}

func (x *PositionTrade) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PositionTrade) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

// A deposit on to the Vega network
type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the deposit
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status of the deposit
	Status Deposit_Status `protobuf:"varint,2,opt,name=status,proto3,enum=vega.Deposit_Status" json:"status,omitempty"`
	// Party identifier of the user initiating the deposit
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The Vega asset targeted by this deposit
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The amount to be deposited
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// The hash of the transaction from the foreign chain
	TxHash string `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Timestamp for when the Vega account was updated with the deposit
	CreditedTimestamp int64 `protobuf:"varint,7,opt,name=credited_timestamp,json=creditedTimestamp,proto3" json:"credited_timestamp,omitempty"`
	// Timestamp for when the deposit was created on the Vega network
	CreatedTimestamp int64 `protobuf:"varint,8,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{16}
}

func (x *Deposit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deposit) GetStatus() Deposit_Status {
	if x != nil {
		return x.Status
	}
	return Deposit_STATUS_UNSPECIFIED
}

func (x *Deposit) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Deposit) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Deposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Deposit) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Deposit) GetCreditedTimestamp() int64 {
	if x != nil {
		return x.CreditedTimestamp
	}
	return 0
}

func (x *Deposit) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

// A withdrawal from the Vega network
type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the withdrawal
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique party identifier of the user initiating the withdrawal
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// The amount to be withdrawn
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The asset to withdraw funds from
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// The status of the withdrawal
	Status Withdrawal_Status `protobuf:"varint,5,opt,name=status,proto3,enum=vega.Withdrawal_Status" json:"status,omitempty"`
	// The reference which is used by the foreign chain
	// to refer to this withdrawal
	Ref string `protobuf:"bytes,6,opt,name=ref,proto3" json:"ref,omitempty"`
	// The hash of the foreign chain for this transaction
	TxHash string `protobuf:"bytes,8,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Timestamp for when the network started to process this withdrawal
	CreatedTimestamp int64 `protobuf:"varint,9,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	// Timestamp for when the withdrawal was finalised by the network
	WithdrawnTimestamp int64 `protobuf:"varint,10,opt,name=withdrawn_timestamp,json=withdrawnTimestamp,proto3" json:"withdrawn_timestamp,omitempty"`
	// Foreign chain specifics
	Ext *WithdrawExt `protobuf:"bytes,11,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{17}
}

func (x *Withdrawal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Withdrawal) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Withdrawal) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Withdrawal) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Withdrawal) GetStatus() Withdrawal_Status {
	if x != nil {
		return x.Status
	}
	return Withdrawal_STATUS_UNSPECIFIED
}

func (x *Withdrawal) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Withdrawal) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Withdrawal) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *Withdrawal) GetWithdrawnTimestamp() int64 {
	if x != nil {
		return x.WithdrawnTimestamp
	}
	return 0
}

func (x *Withdrawal) GetExt() *WithdrawExt {
	if x != nil {
		return x.Ext
	}
	return nil
}

// Withdrawal external details
type WithdrawExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Foreign chain specifics
	//
	// Types that are assignable to Ext:
	//
	//	*WithdrawExt_Erc20
	Ext isWithdrawExt_Ext `protobuf_oneof:"ext"`
}

func (x *WithdrawExt) Reset() {
	*x = WithdrawExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawExt) ProtoMessage() {}

func (x *WithdrawExt) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawExt.ProtoReflect.Descriptor instead.
func (*WithdrawExt) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{18}
}

func (m *WithdrawExt) GetExt() isWithdrawExt_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (x *WithdrawExt) GetErc20() *Erc20WithdrawExt {
	if x, ok := x.GetExt().(*WithdrawExt_Erc20); ok {
		return x.Erc20
	}
	return nil
}

type isWithdrawExt_Ext interface {
	isWithdrawExt_Ext()
}

type WithdrawExt_Erc20 struct {
	// ERC20 withdrawal details
	Erc20 *Erc20WithdrawExt `protobuf:"bytes,1,opt,name=erc20,proto3,oneof"`
}

func (*WithdrawExt_Erc20) isWithdrawExt_Ext() {}

// An extension of data required for the withdraw submissions
type Erc20WithdrawExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address into which the bridge will release the funds
	ReceiverAddress string `protobuf:"bytes,1,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
}

func (x *Erc20WithdrawExt) Reset() {
	*x = Erc20WithdrawExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erc20WithdrawExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erc20WithdrawExt) ProtoMessage() {}

func (x *Erc20WithdrawExt) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erc20WithdrawExt.ProtoReflect.Descriptor instead.
func (*Erc20WithdrawExt) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{19}
}

func (x *Erc20WithdrawExt) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

// Represents an account for an asset on Vega for a particular owner or party
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique account identifier (used internally by Vega)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The party that the account belongs to, special values include `network`, which represents the Vega network and is
	// most commonly seen during liquidation of distressed trading positions
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// Balance of the asset, the balance is an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// and importantly balances cannot be negative
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Balance string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// Asset identifier for the account
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
	// Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty
	MarketId string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The account type related to this account
	Type AccountType `protobuf:"varint,6,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{20}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Account) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Account) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Account) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *Account) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

// Asset value information used within a transfer
type FinancialAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An unsigned integer amount of asset
	// This field is passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *FinancialAmount) Reset() {
	*x = FinancialAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialAmount) ProtoMessage() {}

func (x *FinancialAmount) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialAmount.ProtoReflect.Descriptor instead.
func (*FinancialAmount) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{21}
}

func (x *FinancialAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *FinancialAmount) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Represents a financial transfer within Vega
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier for the owner of the transfer
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// A financial amount (of an asset) to transfer
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount *FinancialAmount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The type of transfer, gives the reason for the transfer
	Type TransferType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.TransferType" json:"type,omitempty"`
	// A minimum amount
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	MinAmount string `protobuf:"bytes,4,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// optional dispatch strategy
	MarketId string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{22}
}

func (x *Transfer) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Transfer) GetAmount() *FinancialAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Transfer) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *Transfer) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *Transfer) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type DispatchStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asset to use for metric
	AssetForMetric string `protobuf:"bytes,1,opt,name=asset_for_metric,json=assetForMetric,proto3" json:"asset_for_metric,omitempty"`
	// The metric to apply
	Metric DispatchMetric `protobuf:"varint,2,opt,name=metric,proto3,enum=vega.DispatchMetric" json:"metric,omitempty"`
	// Optional markets in scope
	Markets []string `protobuf:"bytes,3,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *DispatchStrategy) Reset() {
	*x = DispatchStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchStrategy) ProtoMessage() {}

func (x *DispatchStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchStrategy.ProtoReflect.Descriptor instead.
func (*DispatchStrategy) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{23}
}

func (x *DispatchStrategy) GetAssetForMetric() string {
	if x != nil {
		return x.AssetForMetric
	}
	return ""
}

func (x *DispatchStrategy) GetMetric() DispatchMetric {
	if x != nil {
		return x.Metric
	}
	return DispatchMetric_DISPATCH_METRIC_UNSPECIFIED
}

func (x *DispatchStrategy) GetMarkets() []string {
	if x != nil {
		return x.Markets
	}
	return nil
}

// Represents a request to transfer from one set of accounts to another
type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more accounts to transfer from
	FromAccount []*Account `protobuf:"bytes,1,rep,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`
	// One or more accounts to transfer to
	ToAccount []*Account `protobuf:"bytes,2,rep,name=to_account,json=toAccount,proto3" json:"to_account,omitempty"`
	// An amount to transfer for the asset
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// The minimum amount that needs to be transferred for the transfer request. If this minimum isn't reached, it will error
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	MinAmount string `protobuf:"bytes,4,opt,name=min_amount,json=minAmount,proto3" json:"min_amount,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	// The type of the request for transfer
	Type TransferType `protobuf:"varint,7,opt,name=type,proto3,enum=vega.TransferType" json:"type,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{24}
}

func (x *TransferRequest) GetFromAccount() []*Account {
	if x != nil {
		return x.FromAccount
	}
	return nil
}

func (x *TransferRequest) GetToAccount() []*Account {
	if x != nil {
		return x.ToAccount
	}
	return nil
}

func (x *TransferRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransferRequest) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *TransferRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TransferRequest) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

type AccountDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string      `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Type    AccountType `protobuf:"varint,2,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	// not specified if network account
	Owner *string `protobuf:"bytes,3,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// not specified is account is not related to a market
	MarketId *string `protobuf:"bytes,4,opt,name=market_id,json=marketId,proto3,oneof" json:"market_id,omitempty"`
}

func (x *AccountDetails) Reset() {
	*x = AccountDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDetails) ProtoMessage() {}

func (x *AccountDetails) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDetails.ProtoReflect.Descriptor instead.
func (*AccountDetails) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{25}
}

func (x *AccountDetails) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *AccountDetails) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *AccountDetails) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *AccountDetails) GetMarketId() string {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return ""
}

// Represents a ledger entry on Vega
type LedgerEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more accounts to transfer from
	FromAccount *AccountDetails `protobuf:"bytes,1,opt,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`
	// One or more accounts to transfer to
	ToAccount *AccountDetails `protobuf:"bytes,2,opt,name=to_account,json=toAccount,proto3" json:"to_account,omitempty"`
	// An amount to transfer
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Transfer type for this entry
	Type TransferType `protobuf:"varint,4,opt,name=type,proto3,enum=vega.TransferType" json:"type,omitempty"`
	// Timestamps
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Sender account balance after the transfer
	FromAccountBalance string `protobuf:"bytes,6,opt,name=from_account_balance,json=fromAccountBalance,proto3" json:"from_account_balance,omitempty"`
	// Receiver account balance after the transfer
	ToAccountBalance string `protobuf:"bytes,7,opt,name=to_account_balance,json=toAccountBalance,proto3" json:"to_account_balance,omitempty"`
}

func (x *LedgerEntry) Reset() {
	*x = LedgerEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerEntry) ProtoMessage() {}

func (x *LedgerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerEntry.ProtoReflect.Descriptor instead.
func (*LedgerEntry) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{26}
}

func (x *LedgerEntry) GetFromAccount() *AccountDetails {
	if x != nil {
		return x.FromAccount
	}
	return nil
}

func (x *LedgerEntry) GetToAccount() *AccountDetails {
	if x != nil {
		return x.ToAccount
	}
	return nil
}

func (x *LedgerEntry) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *LedgerEntry) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *LedgerEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LedgerEntry) GetFromAccountBalance() string {
	if x != nil {
		return x.FromAccountBalance
	}
	return ""
}

func (x *LedgerEntry) GetToAccountBalance() string {
	if x != nil {
		return x.ToAccountBalance
	}
	return ""
}

// Represents the balance for an account during a transfer
type PostTransferBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account relating to the transfer
	Account *AccountDetails `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The balance relating to the transfer
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *PostTransferBalance) Reset() {
	*x = PostTransferBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostTransferBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostTransferBalance) ProtoMessage() {}

func (x *PostTransferBalance) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostTransferBalance.ProtoReflect.Descriptor instead.
func (*PostTransferBalance) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{27}
}

func (x *PostTransferBalance) GetAccount() *AccountDetails {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *PostTransferBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type LedgerMovement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries  []*LedgerEntry         `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Balances []*PostTransferBalance `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *LedgerMovement) Reset() {
	*x = LedgerMovement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerMovement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerMovement) ProtoMessage() {}

func (x *LedgerMovement) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerMovement.ProtoReflect.Descriptor instead.
func (*LedgerMovement) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{28}
}

func (x *LedgerMovement) GetEntries() []*LedgerEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *LedgerMovement) GetBalances() []*PostTransferBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// Represents the margin levels for a party on a market at a given time
type MarginLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maintenance margin value
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	MaintenanceMargin string `protobuf:"bytes,1,opt,name=maintenance_margin,json=maintenanceMargin,proto3" json:"maintenance_margin,omitempty"`
	// Margin search level value
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	SearchLevel string `protobuf:"bytes,2,opt,name=search_level,json=searchLevel,proto3" json:"search_level,omitempty"`
	// Initial margin value
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	InitialMargin string `protobuf:"bytes,3,opt,name=initial_margin,json=initialMargin,proto3" json:"initial_margin,omitempty"`
	// Collateral release level value
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	CollateralReleaseLevel string `protobuf:"bytes,4,opt,name=collateral_release_level,json=collateralReleaseLevel,proto3" json:"collateral_release_level,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,5,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,6,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,7,opt,name=asset,proto3" json:"asset,omitempty"`
	// Timestamp for the time the ledger entry was created, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	Timestamp int64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *MarginLevels) Reset() {
	*x = MarginLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevels) ProtoMessage() {}

func (x *MarginLevels) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevels.ProtoReflect.Descriptor instead.
func (*MarginLevels) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{29}
}

func (x *MarginLevels) GetMaintenanceMargin() string {
	if x != nil {
		return x.MaintenanceMargin
	}
	return ""
}

func (x *MarginLevels) GetSearchLevel() string {
	if x != nil {
		return x.SearchLevel
	}
	return ""
}

func (x *MarginLevels) GetInitialMargin() string {
	if x != nil {
		return x.InitialMargin
	}
	return ""
}

func (x *MarginLevels) GetCollateralReleaseLevel() string {
	if x != nil {
		return x.CollateralReleaseLevel
	}
	return ""
}

func (x *MarginLevels) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *MarginLevels) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarginLevels) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *MarginLevels) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Represents data generated by a market when open
type MarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mark price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	MarkPrice string `protobuf:"bytes,1,opt,name=mark_price,json=markPrice,proto3" json:"mark_price,omitempty"`
	// Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	BestBidPrice string `protobuf:"bytes,2,opt,name=best_bid_price,json=bestBidPrice,proto3" json:"best_bid_price,omitempty"`
	// Aggregated volume being bid at the best bid price
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	BestBidVolume uint64 `protobuf:"varint,3,opt,name=best_bid_volume,json=bestBidVolume,proto3" json:"best_bid_volume,omitempty"`
	// Lowest price level on an order book for offer orders
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	BestOfferPrice string `protobuf:"bytes,4,opt,name=best_offer_price,json=bestOfferPrice,proto3" json:"best_offer_price,omitempty"`
	// Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	BestOfferVolume uint64 `protobuf:"varint,5,opt,name=best_offer_volume,json=bestOfferVolume,proto3" json:"best_offer_volume,omitempty"`
	// Highest price on the order book for buy orders not including pegged orders
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	BestStaticBidPrice string `protobuf:"bytes,6,opt,name=best_static_bid_price,json=bestStaticBidPrice,proto3" json:"best_static_bid_price,omitempty"`
	// Total volume at the best static bid price excluding pegged orders
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	BestStaticBidVolume uint64 `protobuf:"varint,7,opt,name=best_static_bid_volume,json=bestStaticBidVolume,proto3" json:"best_static_bid_volume,omitempty"`
	// Lowest price on the order book for sell orders not including pegged orders
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	BestStaticOfferPrice string `protobuf:"bytes,8,opt,name=best_static_offer_price,json=bestStaticOfferPrice,proto3" json:"best_static_offer_price,omitempty"`
	// Total volume at the best static offer price, excluding pegged orders
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	BestStaticOfferVolume uint64 `protobuf:"varint,9,opt,name=best_static_offer_volume,json=bestStaticOfferVolume,proto3" json:"best_static_offer_volume,omitempty"`
	// Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	MidPrice string `protobuf:"bytes,10,opt,name=mid_price,json=midPrice,proto3" json:"mid_price,omitempty"`
	// Arithmetic average of the best static bid price and best static offer price
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	StaticMidPrice string `protobuf:"bytes,11,opt,name=static_mid_price,json=staticMidPrice,proto3" json:"static_mid_price,omitempty"`
	// Market identifier for the data
	Market string `protobuf:"bytes,12,opt,name=market,proto3" json:"market,omitempty"`
	// Timestamp at which this mark price was relevant, in nanoseconds since the epoch
	Timestamp int64 `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The sum of the size of all positions greater than zero on the market
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	OpenInterest uint64 `protobuf:"varint,14,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`
	// Time in seconds until the end of the auction (zero if currently not in auction period)
	AuctionEnd int64 `protobuf:"varint,15,opt,name=auction_end,json=auctionEnd,proto3" json:"auction_end,omitempty"`
	// Time until next auction, or start time of the current auction if market is in auction period
	AuctionStart int64 `protobuf:"varint,16,opt,name=auction_start,json=auctionStart,proto3" json:"auction_start,omitempty"`
	// Indicative price (zero if not in auction)
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	IndicativePrice string `protobuf:"bytes,17,opt,name=indicative_price,json=indicativePrice,proto3" json:"indicative_price,omitempty"`
	// Indicative volume (zero if not in auction)
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places.
	IndicativeVolume uint64 `protobuf:"varint,18,opt,name=indicative_volume,json=indicativeVolume,proto3" json:"indicative_volume,omitempty"`
	// The current trading mode for the market
	MarketTradingMode Market_TradingMode `protobuf:"varint,19,opt,name=market_trading_mode,json=marketTradingMode,proto3,enum=vega.Market_TradingMode" json:"market_trading_mode,omitempty"`
	// When a market is in an auction trading mode, this field indicates what triggered the auction
	Trigger AuctionTrigger `protobuf:"varint,20,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
	// When a market auction is extended, this field indicates what caused the extension
	ExtensionTrigger AuctionTrigger `protobuf:"varint,21,opt,name=extension_trigger,json=extensionTrigger,proto3,enum=vega.AuctionTrigger" json:"extension_trigger,omitempty"`
	// Targeted stake for the given market
	// This field is an unsigned integer passed as a string and needs to be scaled using the settlement asset's decimal places.
	TargetStake string `protobuf:"bytes,22,opt,name=target_stake,json=targetStake,proto3" json:"target_stake,omitempty"`
	// Available stake for the given market
	// This field is an unsigned integer passed as a string and needs to be scaled using the settlement asset's decimal places.
	SuppliedStake string `protobuf:"bytes,23,opt,name=supplied_stake,json=suppliedStake,proto3" json:"supplied_stake,omitempty"`
	// One or more price monitoring bounds for the current timestamp
	PriceMonitoringBounds []*PriceMonitoringBounds `protobuf:"bytes,24,rep,name=price_monitoring_bounds,json=priceMonitoringBounds,proto3" json:"price_monitoring_bounds,omitempty"`
	// the market value proxy
	MarketValueProxy string `protobuf:"bytes,25,opt,name=market_value_proxy,json=marketValueProxy,proto3" json:"market_value_proxy,omitempty"`
	// the equity like share of liquidity fee for each liquidity provider
	LiquidityProviderFeeShare []*LiquidityProviderFeeShare `protobuf:"bytes,26,rep,name=liquidity_provider_fee_share,json=liquidityProviderFeeShare,proto3" json:"liquidity_provider_fee_share,omitempty"`
	// The current state of the market
	MarketState Market_State `protobuf:"varint,27,opt,name=market_state,json=marketState,proto3,enum=vega.Market_State" json:"market_state,omitempty"`
	// next MTM timestamp
	NextMarkToMarket int64 `protobuf:"varint,28,opt,name=next_mark_to_market,json=nextMarkToMarket,proto3" json:"next_mark_to_market,omitempty"`
	// Last traded price of the market
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	LastTradedPrice string `protobuf:"bytes,29,opt,name=last_traded_price,json=lastTradedPrice,proto3" json:"last_traded_price,omitempty"`
}

func (x *MarketData) Reset() {
	*x = MarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketData) ProtoMessage() {}

func (x *MarketData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketData.ProtoReflect.Descriptor instead.
func (*MarketData) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{30}
}

func (x *MarketData) GetMarkPrice() string {
	if x != nil {
		return x.MarkPrice
	}
	return ""
}

func (x *MarketData) GetBestBidPrice() string {
	if x != nil {
		return x.BestBidPrice
	}
	return ""
}

func (x *MarketData) GetBestBidVolume() uint64 {
	if x != nil {
		return x.BestBidVolume
	}
	return 0
}

func (x *MarketData) GetBestOfferPrice() string {
	if x != nil {
		return x.BestOfferPrice
	}
	return ""
}

func (x *MarketData) GetBestOfferVolume() uint64 {
	if x != nil {
		return x.BestOfferVolume
	}
	return 0
}

func (x *MarketData) GetBestStaticBidPrice() string {
	if x != nil {
		return x.BestStaticBidPrice
	}
	return ""
}

func (x *MarketData) GetBestStaticBidVolume() uint64 {
	if x != nil {
		return x.BestStaticBidVolume
	}
	return 0
}

func (x *MarketData) GetBestStaticOfferPrice() string {
	if x != nil {
		return x.BestStaticOfferPrice
	}
	return ""
}

func (x *MarketData) GetBestStaticOfferVolume() uint64 {
	if x != nil {
		return x.BestStaticOfferVolume
	}
	return 0
}

func (x *MarketData) GetMidPrice() string {
	if x != nil {
		return x.MidPrice
	}
	return ""
}

func (x *MarketData) GetStaticMidPrice() string {
	if x != nil {
		return x.StaticMidPrice
	}
	return ""
}

func (x *MarketData) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *MarketData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MarketData) GetOpenInterest() uint64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *MarketData) GetAuctionEnd() int64 {
	if x != nil {
		return x.AuctionEnd
	}
	return 0
}

func (x *MarketData) GetAuctionStart() int64 {
	if x != nil {
		return x.AuctionStart
	}
	return 0
}

func (x *MarketData) GetIndicativePrice() string {
	if x != nil {
		return x.IndicativePrice
	}
	return ""
}

func (x *MarketData) GetIndicativeVolume() uint64 {
	if x != nil {
		return x.IndicativeVolume
	}
	return 0
}

func (x *MarketData) GetMarketTradingMode() Market_TradingMode {
	if x != nil {
		return x.MarketTradingMode
	}
	return Market_TRADING_MODE_UNSPECIFIED
}

func (x *MarketData) GetTrigger() AuctionTrigger {
	if x != nil {
		return x.Trigger
	}
	return AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

func (x *MarketData) GetExtensionTrigger() AuctionTrigger {
	if x != nil {
		return x.ExtensionTrigger
	}
	return AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

func (x *MarketData) GetTargetStake() string {
	if x != nil {
		return x.TargetStake
	}
	return ""
}

func (x *MarketData) GetSuppliedStake() string {
	if x != nil {
		return x.SuppliedStake
	}
	return ""
}

func (x *MarketData) GetPriceMonitoringBounds() []*PriceMonitoringBounds {
	if x != nil {
		return x.PriceMonitoringBounds
	}
	return nil
}

func (x *MarketData) GetMarketValueProxy() string {
	if x != nil {
		return x.MarketValueProxy
	}
	return ""
}

func (x *MarketData) GetLiquidityProviderFeeShare() []*LiquidityProviderFeeShare {
	if x != nil {
		return x.LiquidityProviderFeeShare
	}
	return nil
}

func (x *MarketData) GetMarketState() Market_State {
	if x != nil {
		return x.MarketState
	}
	return Market_STATE_UNSPECIFIED
}

func (x *MarketData) GetNextMarkToMarket() int64 {
	if x != nil {
		return x.NextMarkToMarket
	}
	return 0
}

func (x *MarketData) GetLastTradedPrice() string {
	if x != nil {
		return x.LastTradedPrice
	}
	return ""
}

// The equity like share of liquidity fee for each liquidity provider
type LiquidityProviderFeeShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The liquidity provider party id
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// The share own by this liquidity provider (float)
	EquityLikeShare string `protobuf:"bytes,2,opt,name=equity_like_share,json=equityLikeShare,proto3" json:"equity_like_share,omitempty"`
	// The average entry valuation of the liquidity provider for the market
	AverageEntryValuation string `protobuf:"bytes,3,opt,name=average_entry_valuation,json=averageEntryValuation,proto3" json:"average_entry_valuation,omitempty"`
	// The average liquidity score
	AverageScore string `protobuf:"bytes,4,opt,name=average_score,json=averageScore,proto3" json:"average_score,omitempty"`
}

func (x *LiquidityProviderFeeShare) Reset() {
	*x = LiquidityProviderFeeShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProviderFeeShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProviderFeeShare) ProtoMessage() {}

func (x *LiquidityProviderFeeShare) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProviderFeeShare.ProtoReflect.Descriptor instead.
func (*LiquidityProviderFeeShare) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{31}
}

func (x *LiquidityProviderFeeShare) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *LiquidityProviderFeeShare) GetEquityLikeShare() string {
	if x != nil {
		return x.EquityLikeShare
	}
	return ""
}

func (x *LiquidityProviderFeeShare) GetAverageEntryValuation() string {
	if x != nil {
		return x.AverageEntryValuation
	}
	return ""
}

func (x *LiquidityProviderFeeShare) GetAverageScore() string {
	if x != nil {
		return x.AverageScore
	}
	return ""
}

// Represents a list of valid (at the current timestamp) price ranges per associated trigger
type PriceMonitoringBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum price that isn't currently breaching the specified price monitoring trigger
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	MinValidPrice string `protobuf:"bytes,1,opt,name=min_valid_price,json=minValidPrice,proto3" json:"min_valid_price,omitempty"`
	// Maximum price that isn't currently breaching the specified price monitoring trigger
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	MaxValidPrice string `protobuf:"bytes,2,opt,name=max_valid_price,json=maxValidPrice,proto3" json:"max_valid_price,omitempty"`
	// Price monitoring trigger associated with the bounds
	Trigger *PriceMonitoringTrigger `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// Reference price used to calculate the valid price range
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	ReferencePrice string `protobuf:"bytes,4,opt,name=reference_price,json=referencePrice,proto3" json:"reference_price,omitempty"`
}

func (x *PriceMonitoringBounds) Reset() {
	*x = PriceMonitoringBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitoringBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitoringBounds) ProtoMessage() {}

func (x *PriceMonitoringBounds) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitoringBounds.ProtoReflect.Descriptor instead.
func (*PriceMonitoringBounds) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{32}
}

func (x *PriceMonitoringBounds) GetMinValidPrice() string {
	if x != nil {
		return x.MinValidPrice
	}
	return ""
}

func (x *PriceMonitoringBounds) GetMaxValidPrice() string {
	if x != nil {
		return x.MaxValidPrice
	}
	return ""
}

func (x *PriceMonitoringBounds) GetTrigger() *PriceMonitoringTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *PriceMonitoringBounds) GetReferencePrice() string {
	if x != nil {
		return x.ReferencePrice
	}
	return ""
}

// Represents Vega domain specific error information over gRPC/Protobuf
type ErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Vega API domain specific unique error code, useful for client side mappings, e.g. 10004
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message that describes the error in more detail, should describe the problem encountered
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Any inner error information that could add more context, or be helpful for error reporting
	Inner string `protobuf:"bytes,3,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ErrorDetail) Reset() {
	*x = ErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetail) ProtoMessage() {}

func (x *ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetail.ProtoReflect.Descriptor instead.
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{33}
}

func (x *ErrorDetail) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorDetail) GetInner() string {
	if x != nil {
		return x.Inner
	}
	return ""
}

// Represents a network parameter on Vega
type NetworkParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value for the network parameter
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NetworkParameter) Reset() {
	*x = NetworkParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParameter) ProtoMessage() {}

func (x *NetworkParameter) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParameter.ProtoReflect.Descriptor instead.
func (*NetworkParameter) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{34}
}

func (x *NetworkParameter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NetworkParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Network limits, defined in the genesis file
type NetworkLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Are market proposals allowed at this point in time
	CanProposeMarket bool `protobuf:"varint,1,opt,name=can_propose_market,json=canProposeMarket,proto3" json:"can_propose_market,omitempty"`
	// Are asset proposals allowed at this point in time
	CanProposeAsset bool `protobuf:"varint,2,opt,name=can_propose_asset,json=canProposeAsset,proto3" json:"can_propose_asset,omitempty"`
	// Are market proposals enabled on this chain
	ProposeMarketEnabled bool `protobuf:"varint,4,opt,name=propose_market_enabled,json=proposeMarketEnabled,proto3" json:"propose_market_enabled,omitempty"`
	// Are asset proposals enabled on this chain
	ProposeAssetEnabled bool `protobuf:"varint,5,opt,name=propose_asset_enabled,json=proposeAssetEnabled,proto3" json:"propose_asset_enabled,omitempty"`
	// True once the genesis file is loaded
	GenesisLoaded bool `protobuf:"varint,7,opt,name=genesis_loaded,json=genesisLoaded,proto3" json:"genesis_loaded,omitempty"`
	// The date/timestamp in unix nanoseconds at which market proposals will be enabled (0 indicates not set)
	ProposeMarketEnabledFrom int64 `protobuf:"varint,8,opt,name=propose_market_enabled_from,json=proposeMarketEnabledFrom,proto3" json:"propose_market_enabled_from,omitempty"`
	// The date/timestamp in unix nanoseconds at which asset proposals will be enabled (0 indicates not set)
	ProposeAssetEnabledFrom int64 `protobuf:"varint,9,opt,name=propose_asset_enabled_from,json=proposeAssetEnabledFrom,proto3" json:"propose_asset_enabled_from,omitempty"`
}

func (x *NetworkLimits) Reset() {
	*x = NetworkLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkLimits) ProtoMessage() {}

func (x *NetworkLimits) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkLimits.ProtoReflect.Descriptor instead.
func (*NetworkLimits) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{35}
}

func (x *NetworkLimits) GetCanProposeMarket() bool {
	if x != nil {
		return x.CanProposeMarket
	}
	return false
}

func (x *NetworkLimits) GetCanProposeAsset() bool {
	if x != nil {
		return x.CanProposeAsset
	}
	return false
}

func (x *NetworkLimits) GetProposeMarketEnabled() bool {
	if x != nil {
		return x.ProposeMarketEnabled
	}
	return false
}

func (x *NetworkLimits) GetProposeAssetEnabled() bool {
	if x != nil {
		return x.ProposeAssetEnabled
	}
	return false
}

func (x *NetworkLimits) GetGenesisLoaded() bool {
	if x != nil {
		return x.GenesisLoaded
	}
	return false
}

func (x *NetworkLimits) GetProposeMarketEnabledFrom() int64 {
	if x != nil {
		return x.ProposeMarketEnabledFrom
	}
	return 0
}

func (x *NetworkLimits) GetProposeAssetEnabledFrom() int64 {
	if x != nil {
		return x.ProposeAssetEnabledFrom
	}
	return 0
}

// Represents a liquidity order
type LiquidityOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pegged reference point for the order
	Reference PeggedReference `protobuf:"varint,1,opt,name=reference,proto3,enum=vega.PeggedReference" json:"reference,omitempty"`
	// The relative proportion of the commitment to be allocated at a price level
	Proportion uint32 `protobuf:"varint,2,opt,name=proportion,proto3" json:"proportion,omitempty"`
	// The offset/amount of units away for the order
	// This field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places.
	Offset string `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *LiquidityOrder) Reset() {
	*x = LiquidityOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityOrder) ProtoMessage() {}

func (x *LiquidityOrder) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityOrder.ProtoReflect.Descriptor instead.
func (*LiquidityOrder) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{36}
}

func (x *LiquidityOrder) GetReference() PeggedReference {
	if x != nil {
		return x.Reference
	}
	return PeggedReference_PEGGED_REFERENCE_UNSPECIFIED
}

func (x *LiquidityOrder) GetProportion() uint32 {
	if x != nil {
		return x.Proportion
	}
	return 0
}

func (x *LiquidityOrder) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

// A pair of a liquidity order and the ID of the generated order by the core
type LiquidityOrderReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the pegged order generated by the core to fulfil this liquidity order
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// The liquidity order from the original submission
	LiquidityOrder *LiquidityOrder `protobuf:"bytes,2,opt,name=liquidity_order,json=liquidityOrder,proto3" json:"liquidity_order,omitempty"`
}

func (x *LiquidityOrderReference) Reset() {
	*x = LiquidityOrderReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityOrderReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityOrderReference) ProtoMessage() {}

func (x *LiquidityOrderReference) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityOrderReference.ProtoReflect.Descriptor instead.
func (*LiquidityOrderReference) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{37}
}

func (x *LiquidityOrderReference) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *LiquidityOrderReference) GetLiquidityOrder() *LiquidityOrder {
	if x != nil {
		return x.LiquidityOrder
	}
	return nil
}

// An Liquidity provider commitment
type LiquidityProvision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique party identifier for the creator of the provision
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Timestamp for when the order was created at, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for when the order was updated at, in nanoseconds since the epoch
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	UpdatedAt int64 `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Market identifier for the order, required field
	MarketId string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Specified as a unitless number that represents the amount of settlement asset of the market
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	CommitmentAmount string `protobuf:"bytes,6,opt,name=commitment_amount,json=commitmentAmount,proto3" json:"commitment_amount,omitempty"`
	// Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers
	Fee string `protobuf:"bytes,7,opt,name=fee,proto3" json:"fee,omitempty"`
	// A set of liquidity sell orders to meet the liquidity provision obligation
	Sells []*LiquidityOrderReference `protobuf:"bytes,8,rep,name=sells,proto3" json:"sells,omitempty"`
	// A set of liquidity buy orders to meet the liquidity provision obligation
	Buys []*LiquidityOrderReference `protobuf:"bytes,9,rep,name=buys,proto3" json:"buys,omitempty"`
	// Version of this liquidity provision order
	Version uint64 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	// Status of this liquidity provision order
	Status LiquidityProvision_Status `protobuf:"varint,11,opt,name=status,proto3,enum=vega.LiquidityProvision_Status" json:"status,omitempty"`
	// A reference shared between this liquidity provision and all its orders
	Reference string `protobuf:"bytes,12,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *LiquidityProvision) Reset() {
	*x = LiquidityProvision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvision) ProtoMessage() {}

func (x *LiquidityProvision) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvision.ProtoReflect.Descriptor instead.
func (*LiquidityProvision) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{38}
}

func (x *LiquidityProvision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LiquidityProvision) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *LiquidityProvision) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LiquidityProvision) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LiquidityProvision) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *LiquidityProvision) GetCommitmentAmount() string {
	if x != nil {
		return x.CommitmentAmount
	}
	return ""
}

func (x *LiquidityProvision) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *LiquidityProvision) GetSells() []*LiquidityOrderReference {
	if x != nil {
		return x.Sells
	}
	return nil
}

func (x *LiquidityProvision) GetBuys() []*LiquidityOrderReference {
	if x != nil {
		return x.Buys
	}
	return nil
}

func (x *LiquidityProvision) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LiquidityProvision) GetStatus() LiquidityProvision_Status {
	if x != nil {
		return x.Status
	}
	return LiquidityProvision_STATUS_UNSPECIFIED
}

func (x *LiquidityProvision) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Ethereum configuration details.
type EthereumConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network identifier of this Ethereum network.
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Chain identifier of this Ethereum network.
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// // Contract configuration of the collateral bridge contract for this Ethereum network.
	CollateralBridgeContract *EthereumContractConfig `protobuf:"bytes,3,opt,name=collateral_bridge_contract,json=collateralBridgeContract,proto3" json:"collateral_bridge_contract,omitempty"`
	// Number of block confirmations to wait to consider an Ethereum transaction trusted.
	// An Ethereum block is trusted when there are at least "n" blocks confirmed by the
	// network, "n" being the number of `confirmations` required. If `confirmations` was set to `3`,
	// and the current block to be forged (or mined) on Ethereum is block 14, block
	// 10 would be considered as trusted, but not block 11.
	Confirmations uint32 `protobuf:"varint,4,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// Contract configuration of the stacking bridge contract for this Ethereum network.
	StakingBridgeContract *EthereumContractConfig `protobuf:"bytes,5,opt,name=staking_bridge_contract,json=stakingBridgeContract,proto3" json:"staking_bridge_contract,omitempty"`
	// Contract configuration of the token vesting contract for this Ethereum network.
	TokenVestingContract *EthereumContractConfig `protobuf:"bytes,6,opt,name=token_vesting_contract,json=tokenVestingContract,proto3" json:"token_vesting_contract,omitempty"`
	// Contract configuration of the multisig control contract for this Ethereum network.
	MultisigControlContract *EthereumContractConfig `protobuf:"bytes,7,opt,name=multisig_control_contract,json=multisigControlContract,proto3" json:"multisig_control_contract,omitempty"`
}

func (x *EthereumConfig) Reset() {
	*x = EthereumConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumConfig) ProtoMessage() {}

func (x *EthereumConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumConfig.ProtoReflect.Descriptor instead.
func (*EthereumConfig) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{39}
}

func (x *EthereumConfig) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *EthereumConfig) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *EthereumConfig) GetCollateralBridgeContract() *EthereumContractConfig {
	if x != nil {
		return x.CollateralBridgeContract
	}
	return nil
}

func (x *EthereumConfig) GetConfirmations() uint32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *EthereumConfig) GetStakingBridgeContract() *EthereumContractConfig {
	if x != nil {
		return x.StakingBridgeContract
	}
	return nil
}

func (x *EthereumConfig) GetTokenVestingContract() *EthereumContractConfig {
	if x != nil {
		return x.TokenVestingContract
	}
	return nil
}

func (x *EthereumConfig) GetMultisigControlContract() *EthereumContractConfig {
	if x != nil {
		return x.MultisigControlContract
	}
	return nil
}

type EthereumContractConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the contract for this Ethereum network. The address should start with "0x".
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Block height at which the stacking contract has been deployed for this Ethereum network.
	DeploymentBlockHeight uint64 `protobuf:"varint,6,opt,name=deployment_block_height,json=deploymentBlockHeight,proto3" json:"deployment_block_height,omitempty"`
}

func (x *EthereumContractConfig) Reset() {
	*x = EthereumContractConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumContractConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumContractConfig) ProtoMessage() {}

func (x *EthereumContractConfig) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumContractConfig.ProtoReflect.Descriptor instead.
func (*EthereumContractConfig) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{40}
}

func (x *EthereumContractConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumContractConfig) GetDeploymentBlockHeight() uint64 {
	if x != nil {
		return x.DeploymentBlockHeight
	}
	return 0
}

// Describes in both human readable and block time when an epoch spans
type EpochTimestamps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of epoch start in nanoseconds
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	StartTime int64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Timestamp of epoch expiry in nanoseconds
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	ExpiryTime int64 `protobuf:"varint,2,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// Timestamp of epoch end in nanoseconds, empty if not started
	// - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	EndTime int64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Height of first block in the epoch
	FirstBlock uint64 `protobuf:"varint,4,opt,name=first_block,json=firstBlock,proto3" json:"first_block,omitempty"`
	// Height of last block in the epoch, empty if not ended
	LastBlock uint64 `protobuf:"varint,5,opt,name=last_block,json=lastBlock,proto3" json:"last_block,omitempty"`
}

func (x *EpochTimestamps) Reset() {
	*x = EpochTimestamps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochTimestamps) ProtoMessage() {}

func (x *EpochTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochTimestamps.ProtoReflect.Descriptor instead.
func (*EpochTimestamps) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{41}
}

func (x *EpochTimestamps) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EpochTimestamps) GetExpiryTime() int64 {
	if x != nil {
		return x.ExpiryTime
	}
	return 0
}

func (x *EpochTimestamps) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EpochTimestamps) GetFirstBlock() uint64 {
	if x != nil {
		return x.FirstBlock
	}
	return 0
}

func (x *EpochTimestamps) GetLastBlock() uint64 {
	if x != nil {
		return x.LastBlock
	}
	return 0
}

type Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence is used as epoch identifier
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Timestamps for start/end etc
	Timestamps *EpochTimestamps `protobuf:"bytes,2,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	// Validators that participated in this epoch
	Validators []*Node `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators,omitempty"`
	// List of all delegations in epoch
	Delegations []*Delegation `protobuf:"bytes,4,rep,name=delegations,proto3" json:"delegations,omitempty"`
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{42}
}

func (x *Epoch) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Epoch) GetTimestamps() *EpochTimestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Epoch) GetValidators() []*Node {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *Epoch) GetDelegations() []*Delegation {
	if x != nil {
		return x.Delegations
	}
	return nil
}

type EpochParticipation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch        *Epoch  `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Offline      uint64  `protobuf:"varint,2,opt,name=offline,proto3" json:"offline,omitempty"`
	Online       uint64  `protobuf:"varint,3,opt,name=online,proto3" json:"online,omitempty"`
	TotalRewards float64 `protobuf:"fixed64,4,opt,name=total_rewards,json=totalRewards,proto3" json:"total_rewards,omitempty"`
}

func (x *EpochParticipation) Reset() {
	*x = EpochParticipation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochParticipation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochParticipation) ProtoMessage() {}

func (x *EpochParticipation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochParticipation.ProtoReflect.Descriptor instead.
func (*EpochParticipation) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{43}
}

func (x *EpochParticipation) GetEpoch() *Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *EpochParticipation) GetOffline() uint64 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *EpochParticipation) GetOnline() uint64 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *EpochParticipation) GetTotalRewards() float64 {
	if x != nil {
		return x.TotalRewards
	}
	return 0
}

type EpochData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of epochs since node was created
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Total number of offline epochs since node was created
	Offline int32 `protobuf:"varint,2,opt,name=offline,proto3" json:"offline,omitempty"`
	// Total number of online epochs since node was created
	Online int32 `protobuf:"varint,3,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *EpochData) Reset() {
	*x = EpochData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochData) ProtoMessage() {}

func (x *EpochData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochData.ProtoReflect.Descriptor instead.
func (*EpochData) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{44}
}

func (x *EpochData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EpochData) GetOffline() int32 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *EpochData) GetOnline() int32 {
	if x != nil {
		return x.Online
	}
	return 0
}

type RankingScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stake based score - no anti-whaling
	StakeScore string `protobuf:"bytes,1,opt,name=stake_score,json=stakeScore,proto3" json:"stake_score,omitempty"`
	// performance based score
	PerformanceScore string `protobuf:"bytes,2,opt,name=performance_score,json=performanceScore,proto3" json:"performance_score,omitempty"`
	// the status of the validator in the previous epoch
	PreviousStatus ValidatorNodeStatus `protobuf:"varint,3,opt,name=previous_status,json=previousStatus,proto3,enum=vega.ValidatorNodeStatus" json:"previous_status,omitempty"`
	// the status of the validator in the current epoch
	Status ValidatorNodeStatus `protobuf:"varint,4,opt,name=status,proto3,enum=vega.ValidatorNodeStatus" json:"status,omitempty"`
	// tendermint voting power of the validator
	VotingPower uint32 `protobuf:"varint,5,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	// final score
	RankingScore string `protobuf:"bytes,6,opt,name=ranking_score,json=rankingScore,proto3" json:"ranking_score,omitempty"`
}

func (x *RankingScore) Reset() {
	*x = RankingScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankingScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankingScore) ProtoMessage() {}

func (x *RankingScore) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankingScore.ProtoReflect.Descriptor instead.
func (*RankingScore) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{45}
}

func (x *RankingScore) GetStakeScore() string {
	if x != nil {
		return x.StakeScore
	}
	return ""
}

func (x *RankingScore) GetPerformanceScore() string {
	if x != nil {
		return x.PerformanceScore
	}
	return ""
}

func (x *RankingScore) GetPreviousStatus() ValidatorNodeStatus {
	if x != nil {
		return x.PreviousStatus
	}
	return ValidatorNodeStatus_VALIDATOR_NODE_STATUS_UNSPECIFIED
}

func (x *RankingScore) GetStatus() ValidatorNodeStatus {
	if x != nil {
		return x.Status
	}
	return ValidatorNodeStatus_VALIDATOR_NODE_STATUS_UNSPECIFIED
}

func (x *RankingScore) GetVotingPower() uint32 {
	if x != nil {
		return x.VotingPower
	}
	return 0
}

func (x *RankingScore) GetRankingScore() string {
	if x != nil {
		return x.RankingScore
	}
	return ""
}

type RewardScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stake based score - with anti-whaling
	RawValidatorScore string `protobuf:"bytes,1,opt,name=raw_validator_score,json=rawValidatorScore,proto3" json:"raw_validator_score,omitempty"`
	// performance based score
	PerformanceScore string `protobuf:"bytes,2,opt,name=performance_score,json=performanceScore,proto3" json:"performance_score,omitempty"`
	// multisig score
	MultisigScore string `protobuf:"bytes,3,opt,name=multisig_score,json=multisigScore,proto3" json:"multisig_score,omitempty"`
	// un-normalised score
	ValidatorScore string `protobuf:"bytes,4,opt,name=validator_score,json=validatorScore,proto3" json:"validator_score,omitempty"`
	// normalised validator score for rewards
	NormalisedScore string `protobuf:"bytes,5,opt,name=normalised_score,json=normalisedScore,proto3" json:"normalised_score,omitempty"`
	// the status of the validator for reward
	ValidatorStatus ValidatorNodeStatus `protobuf:"varint,6,opt,name=validator_status,json=validatorStatus,proto3,enum=vega.ValidatorNodeStatus" json:"validator_status,omitempty"`
}

func (x *RewardScore) Reset() {
	*x = RewardScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardScore) ProtoMessage() {}

func (x *RewardScore) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardScore.ProtoReflect.Descriptor instead.
func (*RewardScore) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{46}
}

func (x *RewardScore) GetRawValidatorScore() string {
	if x != nil {
		return x.RawValidatorScore
	}
	return ""
}

func (x *RewardScore) GetPerformanceScore() string {
	if x != nil {
		return x.PerformanceScore
	}
	return ""
}

func (x *RewardScore) GetMultisigScore() string {
	if x != nil {
		return x.MultisigScore
	}
	return ""
}

func (x *RewardScore) GetValidatorScore() string {
	if x != nil {
		return x.ValidatorScore
	}
	return ""
}

func (x *RewardScore) GetNormalisedScore() string {
	if x != nil {
		return x.NormalisedScore
	}
	return ""
}

func (x *RewardScore) GetValidatorStatus() ValidatorNodeStatus {
	if x != nil {
		return x.ValidatorStatus
	}
	return ValidatorNodeStatus_VALIDATOR_NODE_STATUS_UNSPECIFIED
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node ID (wallet ID)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Pub key of the node operator
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// Public key of Tendermint
	TmPubKey string `protobuf:"bytes,3,opt,name=tm_pub_key,json=tmPubKey,proto3" json:"tm_pub_key,omitempty"`
	// Ethereum public key of the node
	EthereumAddress string `protobuf:"bytes,4,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	// URL where I can find out more info on the node
	InfoUrl string `protobuf:"bytes,5,opt,name=info_url,json=infoUrl,proto3" json:"info_url,omitempty"`
	// Country code for the location of the node
	Location string `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	// The amount the node has put up themselves
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places for the token.
	StakedByOperator string `protobuf:"bytes,7,opt,name=staked_by_operator,json=stakedByOperator,proto3" json:"staked_by_operator,omitempty"`
	// The amount of stake that has been delegated by token holders
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places for the token.
	StakedByDelegates string `protobuf:"bytes,8,opt,name=staked_by_delegates,json=stakedByDelegates,proto3" json:"staked_by_delegates,omitempty"`
	// Total amount staked on node
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places for the token.
	StakedTotal string `protobuf:"bytes,9,opt,name=staked_total,json=stakedTotal,proto3" json:"staked_total,omitempty"`
	// Max amount of (wanted) stake
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places.
	MaxIntendedStake string `protobuf:"bytes,10,opt,name=max_intended_stake,json=maxIntendedStake,proto3" json:"max_intended_stake,omitempty"`
	// Amount of stake on the next epoch
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places of the token.
	PendingStake string `protobuf:"bytes,11,opt,name=pending_stake,json=pendingStake,proto3" json:"pending_stake,omitempty"`
	// Information about epoch
	EpochData *EpochData `protobuf:"bytes,12,opt,name=epoch_data,json=epochData,proto3" json:"epoch_data,omitempty"`
	// Node status
	Status NodeStatus `protobuf:"varint,13,opt,name=status,proto3,enum=vega.NodeStatus" json:"status,omitempty"`
	// Node's delegations
	Delegations []*Delegation `protobuf:"bytes,14,rep,name=delegations,proto3" json:"delegations,omitempty"`
	// Node reward score
	RewardScore *RewardScore `protobuf:"bytes,15,opt,name=reward_score,json=rewardScore,proto3" json:"reward_score,omitempty"`
	// Node ranking information
	RankingScore *RankingScore `protobuf:"bytes,16,opt,name=ranking_score,json=rankingScore,proto3" json:"ranking_score,omitempty"`
	// Node name
	Name string `protobuf:"bytes,17,opt,name=name,proto3" json:"name,omitempty"`
	// Avatar url
	AvatarUrl string `protobuf:"bytes,18,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{47}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *Node) GetTmPubKey() string {
	if x != nil {
		return x.TmPubKey
	}
	return ""
}

func (x *Node) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *Node) GetInfoUrl() string {
	if x != nil {
		return x.InfoUrl
	}
	return ""
}

func (x *Node) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Node) GetStakedByOperator() string {
	if x != nil {
		return x.StakedByOperator
	}
	return ""
}

func (x *Node) GetStakedByDelegates() string {
	if x != nil {
		return x.StakedByDelegates
	}
	return ""
}

func (x *Node) GetStakedTotal() string {
	if x != nil {
		return x.StakedTotal
	}
	return ""
}

func (x *Node) GetMaxIntendedStake() string {
	if x != nil {
		return x.MaxIntendedStake
	}
	return ""
}

func (x *Node) GetPendingStake() string {
	if x != nil {
		return x.PendingStake
	}
	return ""
}

func (x *Node) GetEpochData() *EpochData {
	if x != nil {
		return x.EpochData
	}
	return nil
}

func (x *Node) GetStatus() NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeStatus_NODE_STATUS_UNSPECIFIED
}

func (x *Node) GetDelegations() []*Delegation {
	if x != nil {
		return x.Delegations
	}
	return nil
}

func (x *Node) GetRewardScore() *RewardScore {
	if x != nil {
		return x.RewardScore
	}
	return nil
}

func (x *Node) GetRankingScore() *RankingScore {
	if x != nil {
		return x.RankingScore
	}
	return nil
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

// Details on the collection of nodes for a particular validator status
type NodeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of nodes in the node set
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Number of nodes in the node set that had a performance score of 0 at the end of the last epoch
	Inactive uint32 `protobuf:"varint,2,opt,name=inactive,proto3" json:"inactive,omitempty"`
	// IDs of nodes that were promoted into this node set at the start of the epoch
	Promoted []string `protobuf:"bytes,3,rep,name=promoted,proto3" json:"promoted,omitempty"`
	// IDs of nodes that were demoted into this node set at the start of the epoch
	Demoted []string `protobuf:"bytes,4,rep,name=demoted,proto3" json:"demoted,omitempty"`
	// Total number of nodes allowed in the node set
	Maximum *uint32 `protobuf:"varint,5,opt,name=maximum,proto3,oneof" json:"maximum,omitempty"`
}

func (x *NodeSet) Reset() {
	*x = NodeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSet) ProtoMessage() {}

func (x *NodeSet) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSet.ProtoReflect.Descriptor instead.
func (*NodeSet) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{48}
}

func (x *NodeSet) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NodeSet) GetInactive() uint32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *NodeSet) GetPromoted() []string {
	if x != nil {
		return x.Promoted
	}
	return nil
}

func (x *NodeSet) GetDemoted() []string {
	if x != nil {
		return x.Demoted
	}
	return nil
}

func (x *NodeSet) GetMaximum() uint32 {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return 0
}

type NodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total staked amount across all nodes
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places of the token.
	StakedTotal string `protobuf:"bytes,1,opt,name=staked_total,json=stakedTotal,proto3" json:"staked_total,omitempty"`
	// Total number of nodes across all node sets
	TotalNodes uint32 `protobuf:"varint,2,opt,name=total_nodes,json=totalNodes,proto3" json:"total_nodes,omitempty"`
	// Total number of nodes that had a performance score of 0 at the end of the last epoch
	InactiveNodes uint32 `protobuf:"varint,3,opt,name=inactive_nodes,json=inactiveNodes,proto3" json:"inactive_nodes,omitempty"`
	// Details on the set of consensus nodes in the network
	TendermintNodes *NodeSet `protobuf:"bytes,4,opt,name=tendermint_nodes,json=tendermintNodes,proto3" json:"tendermint_nodes,omitempty"`
	// Details on the set of ersatz (standby) nodes in the network
	ErsatzNodes *NodeSet `protobuf:"bytes,5,opt,name=ersatz_nodes,json=ersatzNodes,proto3" json:"ersatz_nodes,omitempty"`
	// Details on the set of pending nodes in the network
	PendingNodes *NodeSet `protobuf:"bytes,6,opt,name=pending_nodes,json=pendingNodes,proto3" json:"pending_nodes,omitempty"`
	// Total uptime for all epochs across all nodes
	Uptime float32 `protobuf:"fixed32,7,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *NodeData) Reset() {
	*x = NodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeData) ProtoMessage() {}

func (x *NodeData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeData.ProtoReflect.Descriptor instead.
func (*NodeData) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{49}
}

func (x *NodeData) GetStakedTotal() string {
	if x != nil {
		return x.StakedTotal
	}
	return ""
}

func (x *NodeData) GetTotalNodes() uint32 {
	if x != nil {
		return x.TotalNodes
	}
	return 0
}

func (x *NodeData) GetInactiveNodes() uint32 {
	if x != nil {
		return x.InactiveNodes
	}
	return 0
}

func (x *NodeData) GetTendermintNodes() *NodeSet {
	if x != nil {
		return x.TendermintNodes
	}
	return nil
}

func (x *NodeData) GetErsatzNodes() *NodeSet {
	if x != nil {
		return x.ErsatzNodes
	}
	return nil
}

func (x *NodeData) GetPendingNodes() *NodeSet {
	if x != nil {
		return x.PendingNodes
	}
	return nil
}

func (x *NodeData) GetUptime() float32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

type Delegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party which is delegating
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// Node ID
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Amount delegated
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places of the token.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Epoch of delegation
	EpochSeq string `protobuf:"bytes,4,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
}

func (x *Delegation) Reset() {
	*x = Delegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delegation) ProtoMessage() {}

func (x *Delegation) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delegation.ProtoReflect.Descriptor instead.
func (*Delegation) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{50}
}

func (x *Delegation) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *Delegation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Delegation) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Delegation) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

// Details for a single reward payment
type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Epoch   uint64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Amount paid as a reward
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places of the reward asset.
	Amount            string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	PercentageOfTotal string `protobuf:"bytes,5,opt,name=percentage_of_total,json=percentageOfTotal,proto3" json:"percentage_of_total,omitempty"`
	ReceivedAt        int64  `protobuf:"varint,6,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	MarketId          string `protobuf:"bytes,7,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	RewardType        string `protobuf:"bytes,8,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{51}
}

func (x *Reward) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *Reward) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Reward) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Reward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Reward) GetPercentageOfTotal() string {
	if x != nil {
		return x.PercentageOfTotal
	}
	return ""
}

func (x *Reward) GetReceivedAt() int64 {
	if x != nil {
		return x.ReceivedAt
	}
	return 0
}

func (x *Reward) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *Reward) GetRewardType() string {
	if x != nil {
		return x.RewardType
	}
	return ""
}

// Details for rewards for a single asset
type RewardSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Total amount of rewards paid in the asset
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *RewardSummary) Reset() {
	*x = RewardSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardSummary) ProtoMessage() {}

func (x *RewardSummary) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardSummary.ProtoReflect.Descriptor instead.
func (*RewardSummary) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{52}
}

func (x *RewardSummary) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *RewardSummary) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *RewardSummary) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Details for rewards for a combination of asset, market, and reward type in a given epoch
type EpochRewardSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch      uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	AssetId    string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	MarketId   string `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	RewardType string `protobuf:"bytes,4,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	// Amount distributed
	// This field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places.
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EpochRewardSummary) Reset() {
	*x = EpochRewardSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochRewardSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochRewardSummary) ProtoMessage() {}

func (x *EpochRewardSummary) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochRewardSummary.ProtoReflect.Descriptor instead.
func (*EpochRewardSummary) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{53}
}

func (x *EpochRewardSummary) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *EpochRewardSummary) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *EpochRewardSummary) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *EpochRewardSummary) GetRewardType() string {
	if x != nil {
		return x.RewardType
	}
	return ""
}

func (x *EpochRewardSummary) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type StateValueProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// state variable identifier
	StateVarId string `protobuf:"bytes,1,opt,name=state_var_id,json=stateVarId,proto3" json:"state_var_id,omitempty"`
	// event identifier
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// key value tolerance triplets
	Kvb []*KeyValueBundle `protobuf:"bytes,3,rep,name=kvb,proto3" json:"kvb,omitempty"`
}

func (x *StateValueProposal) Reset() {
	*x = StateValueProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateValueProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateValueProposal) ProtoMessage() {}

func (x *StateValueProposal) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateValueProposal.ProtoReflect.Descriptor instead.
func (*StateValueProposal) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{54}
}

func (x *StateValueProposal) GetStateVarId() string {
	if x != nil {
		return x.StateVarId
	}
	return ""
}

func (x *StateValueProposal) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *StateValueProposal) GetKvb() []*KeyValueBundle {
	if x != nil {
		return x.Kvb
	}
	return nil
}

type KeyValueBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Tolerance string         `protobuf:"bytes,2,opt,name=tolerance,proto3" json:"tolerance,omitempty"`
	Value     *StateVarValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValueBundle) Reset() {
	*x = KeyValueBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueBundle) ProtoMessage() {}

func (x *KeyValueBundle) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueBundle.ProtoReflect.Descriptor instead.
func (*KeyValueBundle) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{55}
}

func (x *KeyValueBundle) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValueBundle) GetTolerance() string {
	if x != nil {
		return x.Tolerance
	}
	return ""
}

func (x *KeyValueBundle) GetValue() *StateVarValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type StateVarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*StateVarValue_ScalarVal
	//	*StateVarValue_VectorVal
	//	*StateVarValue_MatrixVal
	Value isStateVarValue_Value `protobuf_oneof:"value"`
}

func (x *StateVarValue) Reset() {
	*x = StateVarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateVarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateVarValue) ProtoMessage() {}

func (x *StateVarValue) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateVarValue.ProtoReflect.Descriptor instead.
func (*StateVarValue) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{56}
}

func (m *StateVarValue) GetValue() isStateVarValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StateVarValue) GetScalarVal() *ScalarValue {
	if x, ok := x.GetValue().(*StateVarValue_ScalarVal); ok {
		return x.ScalarVal
	}
	return nil
}

func (x *StateVarValue) GetVectorVal() *VectorValue {
	if x, ok := x.GetValue().(*StateVarValue_VectorVal); ok {
		return x.VectorVal
	}
	return nil
}

func (x *StateVarValue) GetMatrixVal() *MatrixValue {
	if x, ok := x.GetValue().(*StateVarValue_MatrixVal); ok {
		return x.MatrixVal
	}
	return nil
}

type isStateVarValue_Value interface {
	isStateVarValue_Value()
}

type StateVarValue_ScalarVal struct {
	ScalarVal *ScalarValue `protobuf:"bytes,1,opt,name=scalar_val,json=scalarVal,proto3,oneof"`
}

type StateVarValue_VectorVal struct {
	VectorVal *VectorValue `protobuf:"bytes,2,opt,name=vector_val,json=vectorVal,proto3,oneof"`
}

type StateVarValue_MatrixVal struct {
	MatrixVal *MatrixValue `protobuf:"bytes,3,opt,name=matrix_val,json=matrixVal,proto3,oneof"`
}

func (*StateVarValue_ScalarVal) isStateVarValue_Value() {}

func (*StateVarValue_VectorVal) isStateVarValue_Value() {}

func (*StateVarValue_MatrixVal) isStateVarValue_Value() {}

type ScalarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ScalarValue) Reset() {
	*x = ScalarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarValue) ProtoMessage() {}

func (x *ScalarValue) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarValue.ProtoReflect.Descriptor instead.
func (*ScalarValue) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{57}
}

func (x *ScalarValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VectorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *VectorValue) Reset() {
	*x = VectorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorValue) ProtoMessage() {}

func (x *VectorValue) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorValue.ProtoReflect.Descriptor instead.
func (*VectorValue) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{58}
}

func (x *VectorValue) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type MatrixValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*VectorValue `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *MatrixValue) Reset() {
	*x = MatrixValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_vega_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatrixValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatrixValue) ProtoMessage() {}

func (x *MatrixValue) ProtoReflect() protoreflect.Message {
	mi := &file_vega_vega_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatrixValue.ProtoReflect.Descriptor instead.
func (*MatrixValue) Descriptor() ([]byte, []int) {
	return file_vega_vega_proto_rawDescGZIP(), []int{59}
}

func (x *MatrixValue) GetValue() []*VectorValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_vega_vega_proto protoreflect.FileDescriptor

var file_vega_vega_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x76, 0x65, 0x67, 0x61, 0x1a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x05, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x0a, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x6e, 0x67, 0x22, 0x5a, 0x0a, 0x0b, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65,
	0x67, 0x67, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xf2, 0x08, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x70, 0x65, 0x67, 0x67,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x0b, 0x70, 0x65, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x16, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x54, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x54, 0x54, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x47, 0x46, 0x41, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x46, 0x4e, 0x10, 0x06, 0x22, 0x4f, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x22, 0xc9,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46,
	0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x10, 0x08, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x1d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xd3, 0x01, 0x0a,
	0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x22, 0xdb, 0x04, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46,
	0x65, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22,
	0x6f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x41, 0x44, 0x10, 0x03,
	0x22, 0x76, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x22, 0x2f, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x06, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0x64, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x65, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x62,
	0x75, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x03, 0x62, 0x75, 0x79, 0x12,
	0x24, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x18, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf7, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x50, 0x6e,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x5f,
	0x70, 0x6e, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x73, 0x65, 0x64, 0x50, 0x6e, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x73, 0x73, 0x5f,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x6f, 0x73, 0x73,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x3d, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xe4, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5d, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa8, 0x03, 0x0a, 0x0a, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x74, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22,
	0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x22, 0x44, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45,
	0x78, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x63, 0x32, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x72, 0x63, 0x32, 0x30, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x63,
	0x32, 0x30, 0x42, 0x05, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x22, 0x3d, 0x0a, 0x10, 0x45, 0x72, 0x63,
	0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3f,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22,
	0xb3, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xe6, 0x01, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0xb9, 0x02, 0x0a, 0x0b, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x37, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5f, 0x0a, 0x13, 0x50,
	0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x74, 0x0a, 0x0e,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x18,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xe5, 0x0a, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62,
	0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x42,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4d, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x13,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x60, 0x0a, 0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x19, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x6b, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x82, 0x03, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a,
	0x1a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x7d, 0x0a, 0x0e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x73, 0x0a, 0x17, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xd2, 0x04, 0x0a, 0x12, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x62,
	0x75, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x62, 0x75, 0x79, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x22,
	0xd0, 0x03, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x1a,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x18,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54,
	0x0a, 0x17, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x58, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x22, 0x6a, 0x0a, 0x16, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xac,
	0x01, 0x0a, 0x0f, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xb0, 0x01,
	0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x12, 0x2a, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x8e, 0x01, 0x0a, 0x12, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x53, 0x0a, 0x09, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb3, 0x05, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6d, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6d, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0d,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x07, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0xad, 0x02, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x10, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0f, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x7a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0b,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x7a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x22, 0xfb, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x0d, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x76, 0x62, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x03, 0x6b, 0x76, 0x62, 0x22,
	0x6b, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32,
	0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56,
	0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a,
	0x0b, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x39, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02,
	0x2a, 0xb5, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x49, 0x31, 0x4d, 0x10, 0x3c, 0x12, 0x11, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x49, 0x35, 0x4d, 0x10, 0xac, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x31, 0x35, 0x4d, 0x10, 0x84, 0x07, 0x12, 0x11, 0x0a,
	0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x31, 0x48, 0x10, 0x90, 0x1c,
	0x12, 0x12, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x36, 0x48,
	0x10, 0xe0, 0xa8, 0x01, 0x12, 0x12, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x49, 0x31, 0x44, 0x10, 0x80, 0xa3, 0x05, 0x2a, 0x74, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x2a, 0xa3,
	0x01, 0x0a, 0x0e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49,
	0x54, 0x59, 0x10, 0x04, 0x2a, 0x8b, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x67, 0x67, 0x65, 0x64, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45, 0x47, 0x47,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45,
	0x47, 0x47, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4d,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x53, 0x4b,
	0x10, 0x03, 0x2a, 0xdf, 0x0f, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x41,
	0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41,
	0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x08, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12,
	0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x23,
	0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x12, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x13, 0x12, 0x1c, 0x0a,
	0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x2e, 0x0a, 0x2a, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x16, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x17, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x47, 0x46, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44,
	0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x18, 0x12, 0x3f, 0x0a, 0x3b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x47, 0x46,
	0x41, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x19, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x47, 0x54, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x59, 0x41, 0x54, 0x10, 0x1a, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x41,
	0x54, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x41, 0x54, 0x10, 0x1b, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f,
	0x47, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x41, 0x54,
	0x10, 0x1c, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x46, 0x4f, 0x4b, 0x5f, 0x4f, 0x52, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x1d, 0x12, 0x2a,
	0x0a, 0x26, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x46,
	0x41, 0x5f, 0x4f, 0x52, 0x5f, 0x47, 0x46, 0x4e, 0x10, 0x1e, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x47, 0x46, 0x41, 0x5f,
	0x4f, 0x52, 0x5f, 0x47, 0x46, 0x4e, 0x10, 0x1f, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4f, 0x43, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x55,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x20, 0x12, 0x34,
	0x0a, 0x30, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x4b, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x21, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x22, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45,
	0x5f, 0x47, 0x54, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x47, 0x54, 0x43, 0x10, 0x23, 0x12, 0x27, 0x0a,
	0x23, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x10, 0x24, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f,
	0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x25, 0x12, 0x37, 0x0a, 0x33, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45,
	0x54, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45,
	0x52, 0x4f, 0x10, 0x28, 0x12, 0x34, 0x0a, 0x30, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x42,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x29, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x2a, 0x12, 0x2a, 0x0a, 0x26,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x2b, 0x12, 0x45, 0x0a, 0x41, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x2c, 0x12,
	0x2e, 0x0a, 0x2a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x2d, 0x12,
	0x35, 0x0a, 0x31, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x2e, 0x12, 0x38, 0x0a, 0x34, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x2f,
	0x12, 0x26, 0x0a, 0x22, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x45, 0x47, 0x47, 0x45, 0x44, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x30, 0x22, 0x04, 0x08, 0x26, 0x10, 0x26, 0x22, 0x04,
	0x08, 0x27, 0x10, 0x27, 0x2a, 0x82, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xc4, 0x04, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x4c,
	0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x53, 0x10, 0x0d,
	0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x41,
	0x49, 0x44, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f,
	0x46, 0x45, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x50,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x10,
	0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x53, 0x10, 0x11, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08,
	0x2a, 0xc9, 0x06, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x54, 0x4d, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x54, 0x4d,
	0x5f, 0x57, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x53, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52,
	0x5f, 0x46, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45,
	0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12,
	0x28, 0x0a, 0x24, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x46, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x51, 0x55,
	0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x0d, 0x12,
	0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x12,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e,
	0x44, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x15, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x53, 0x45,
	0x4e, 0x44, 0x10, 0x16, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x44, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10,
	0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x18, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x19,
	0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x11, 0x10, 0x11, 0x2a, 0xc7, 0x01, 0x0a,
	0x0e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x50,
	0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x5f, 0x46,
	0x45, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x4c, 0x50, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x2a, 0x63, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x59, 0x0a, 0x0b, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50,
	0x4f, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x4f, 0x43,
	0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0xa7, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x21, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x53, 0x41, 0x54, 0x5a, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x42, 0x27, 0x5a, 0x25, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_vega_vega_proto_rawDescOnce sync.Once
	file_vega_vega_proto_rawDescData = file_vega_vega_proto_rawDesc
)

func file_vega_vega_proto_rawDescGZIP() []byte {
	file_vega_vega_proto_rawDescOnce.Do(func() {
		file_vega_vega_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_vega_proto_rawDescData)
	})
	return file_vega_vega_proto_rawDescData
}

var file_vega_vega_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_vega_vega_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_vega_vega_proto_goTypes = []interface{}{
	(Side)(0),                             // 0: vega.Side
	(Interval)(0),                         // 1: vega.Interval
	(PositionStatus)(0),                   // 2: vega.PositionStatus
	(AuctionTrigger)(0),                   // 3: vega.AuctionTrigger
	(PeggedReference)(0),                  // 4: vega.PeggedReference
	(OrderError)(0),                       // 5: vega.OrderError
	(ChainStatus)(0),                      // 6: vega.ChainStatus
	(AccountType)(0),                      // 7: vega.AccountType
	(TransferType)(0),                     // 8: vega.TransferType
	(DispatchMetric)(0),                   // 9: vega.DispatchMetric
	(NodeStatus)(0),                       // 10: vega.NodeStatus
	(EpochAction)(0),                      // 11: vega.EpochAction
	(ValidatorNodeStatus)(0),              // 12: vega.ValidatorNodeStatus
	(Order_TimeInForce)(0),                // 13: vega.Order.TimeInForce
	(Order_Type)(0),                       // 14: vega.Order.Type
	(Order_Status)(0),                     // 15: vega.Order.Status
	(Trade_Type)(0),                       // 16: vega.Trade.Type
	(Deposit_Status)(0),                   // 17: vega.Deposit.Status
	(Withdrawal_Status)(0),                // 18: vega.Withdrawal.Status
	(LiquidityProvision_Status)(0),        // 19: vega.LiquidityProvision.Status
	(*Party)(nil),                         // 20: vega.Party
	(*RiskFactor)(nil),                    // 21: vega.RiskFactor
	(*PeggedOrder)(nil),                   // 22: vega.PeggedOrder
	(*Order)(nil),                         // 23: vega.Order
	(*OrderCancellationConfirmation)(nil), // 24: vega.OrderCancellationConfirmation
	(*OrderConfirmation)(nil),             // 25: vega.OrderConfirmation
	(*AuctionIndicativeState)(nil),        // 26: vega.AuctionIndicativeState
	(*Trade)(nil),                         // 27: vega.Trade
	(*Fee)(nil),                           // 28: vega.Fee
	(*TradeSet)(nil),                      // 29: vega.TradeSet
	(*Candle)(nil),                        // 30: vega.Candle
	(*PriceLevel)(nil),                    // 31: vega.PriceLevel
	(*MarketDepth)(nil),                   // 32: vega.MarketDepth
	(*MarketDepthUpdate)(nil),             // 33: vega.MarketDepthUpdate
	(*Position)(nil),                      // 34: vega.Position
	(*PositionTrade)(nil),                 // 35: vega.PositionTrade
	(*Deposit)(nil),                       // 36: vega.Deposit
	(*Withdrawal)(nil),                    // 37: vega.Withdrawal
	(*WithdrawExt)(nil),                   // 38: vega.WithdrawExt
	(*Erc20WithdrawExt)(nil),              // 39: vega.Erc20WithdrawExt
	(*Account)(nil),                       // 40: vega.Account
	(*FinancialAmount)(nil),               // 41: vega.FinancialAmount
	(*Transfer)(nil),                      // 42: vega.Transfer
	(*DispatchStrategy)(nil),              // 43: vega.DispatchStrategy
	(*TransferRequest)(nil),               // 44: vega.TransferRequest
	(*AccountDetails)(nil),                // 45: vega.AccountDetails
	(*LedgerEntry)(nil),                   // 46: vega.LedgerEntry
	(*PostTransferBalance)(nil),           // 47: vega.PostTransferBalance
	(*LedgerMovement)(nil),                // 48: vega.LedgerMovement
	(*MarginLevels)(nil),                  // 49: vega.MarginLevels
	(*MarketData)(nil),                    // 50: vega.MarketData
	(*LiquidityProviderFeeShare)(nil),     // 51: vega.LiquidityProviderFeeShare
	(*PriceMonitoringBounds)(nil),         // 52: vega.PriceMonitoringBounds
	(*ErrorDetail)(nil),                   // 53: vega.ErrorDetail
	(*NetworkParameter)(nil),              // 54: vega.NetworkParameter
	(*NetworkLimits)(nil),                 // 55: vega.NetworkLimits
	(*LiquidityOrder)(nil),                // 56: vega.LiquidityOrder
	(*LiquidityOrderReference)(nil),       // 57: vega.LiquidityOrderReference
	(*LiquidityProvision)(nil),            // 58: vega.LiquidityProvision
	(*EthereumConfig)(nil),                // 59: vega.EthereumConfig
	(*EthereumContractConfig)(nil),        // 60: vega.EthereumContractConfig
	(*EpochTimestamps)(nil),               // 61: vega.EpochTimestamps
	(*Epoch)(nil),                         // 62: vega.Epoch
	(*EpochParticipation)(nil),            // 63: vega.EpochParticipation
	(*EpochData)(nil),                     // 64: vega.EpochData
	(*RankingScore)(nil),                  // 65: vega.RankingScore
	(*RewardScore)(nil),                   // 66: vega.RewardScore
	(*Node)(nil),                          // 67: vega.Node
	(*NodeSet)(nil),                       // 68: vega.NodeSet
	(*NodeData)(nil),                      // 69: vega.NodeData
	(*Delegation)(nil),                    // 70: vega.Delegation
	(*Reward)(nil),                        // 71: vega.Reward
	(*RewardSummary)(nil),                 // 72: vega.RewardSummary
	(*EpochRewardSummary)(nil),            // 73: vega.EpochRewardSummary
	(*StateValueProposal)(nil),            // 74: vega.StateValueProposal
	(*KeyValueBundle)(nil),                // 75: vega.KeyValueBundle
	(*StateVarValue)(nil),                 // 76: vega.StateVarValue
	(*ScalarValue)(nil),                   // 77: vega.ScalarValue
	(*VectorValue)(nil),                   // 78: vega.VectorValue
	(*MatrixValue)(nil),                   // 79: vega.MatrixValue
	(Market_TradingMode)(0),               // 80: vega.Market.TradingMode
	(Market_State)(0),                     // 81: vega.Market.State
	(*PriceMonitoringTrigger)(nil),        // 82: vega.PriceMonitoringTrigger
}
var file_vega_vega_proto_depIdxs = []int32{
	4,  // 0: vega.PeggedOrder.reference:type_name -> vega.PeggedReference
	0,  // 1: vega.Order.side:type_name -> vega.Side
	13, // 2: vega.Order.time_in_force:type_name -> vega.Order.TimeInForce
	14, // 3: vega.Order.type:type_name -> vega.Order.Type
	15, // 4: vega.Order.status:type_name -> vega.Order.Status
	5,  // 5: vega.Order.reason:type_name -> vega.OrderError
	22, // 6: vega.Order.pegged_order:type_name -> vega.PeggedOrder
	23, // 7: vega.OrderCancellationConfirmation.order:type_name -> vega.Order
	23, // 8: vega.OrderConfirmation.order:type_name -> vega.Order
	27, // 9: vega.OrderConfirmation.trades:type_name -> vega.Trade
	23, // 10: vega.OrderConfirmation.passive_orders_affected:type_name -> vega.Order
	0,  // 11: vega.Trade.aggressor:type_name -> vega.Side
	16, // 12: vega.Trade.type:type_name -> vega.Trade.Type
	28, // 13: vega.Trade.buyer_fee:type_name -> vega.Fee
	28, // 14: vega.Trade.seller_fee:type_name -> vega.Fee
	27, // 15: vega.TradeSet.trades:type_name -> vega.Trade
	1,  // 16: vega.Candle.interval:type_name -> vega.Interval
	31, // 17: vega.MarketDepth.buy:type_name -> vega.PriceLevel
	31, // 18: vega.MarketDepth.sell:type_name -> vega.PriceLevel
	31, // 19: vega.MarketDepthUpdate.buy:type_name -> vega.PriceLevel
	31, // 20: vega.MarketDepthUpdate.sell:type_name -> vega.PriceLevel
	2,  // 21: vega.Position.position_status:type_name -> vega.PositionStatus
	17, // 22: vega.Deposit.status:type_name -> vega.Deposit.Status
	18, // 23: vega.Withdrawal.status:type_name -> vega.Withdrawal.Status
	38, // 24: vega.Withdrawal.ext:type_name -> vega.WithdrawExt
	39, // 25: vega.WithdrawExt.erc20:type_name -> vega.Erc20WithdrawExt
	7,  // 26: vega.Account.type:type_name -> vega.AccountType
	41, // 27: vega.Transfer.amount:type_name -> vega.FinancialAmount
	8,  // 28: vega.Transfer.type:type_name -> vega.TransferType
	9,  // 29: vega.DispatchStrategy.metric:type_name -> vega.DispatchMetric
	40, // 30: vega.TransferRequest.from_account:type_name -> vega.Account
	40, // 31: vega.TransferRequest.to_account:type_name -> vega.Account
	8,  // 32: vega.TransferRequest.type:type_name -> vega.TransferType
	7,  // 33: vega.AccountDetails.type:type_name -> vega.AccountType
	45, // 34: vega.LedgerEntry.from_account:type_name -> vega.AccountDetails
	45, // 35: vega.LedgerEntry.to_account:type_name -> vega.AccountDetails
	8,  // 36: vega.LedgerEntry.type:type_name -> vega.TransferType
	45, // 37: vega.PostTransferBalance.account:type_name -> vega.AccountDetails
	46, // 38: vega.LedgerMovement.entries:type_name -> vega.LedgerEntry
	47, // 39: vega.LedgerMovement.balances:type_name -> vega.PostTransferBalance
	80, // 40: vega.MarketData.market_trading_mode:type_name -> vega.Market.TradingMode
	3,  // 41: vega.MarketData.trigger:type_name -> vega.AuctionTrigger
	3,  // 42: vega.MarketData.extension_trigger:type_name -> vega.AuctionTrigger
	52, // 43: vega.MarketData.price_monitoring_bounds:type_name -> vega.PriceMonitoringBounds
	51, // 44: vega.MarketData.liquidity_provider_fee_share:type_name -> vega.LiquidityProviderFeeShare
	81, // 45: vega.MarketData.market_state:type_name -> vega.Market.State
	82, // 46: vega.PriceMonitoringBounds.trigger:type_name -> vega.PriceMonitoringTrigger
	4,  // 47: vega.LiquidityOrder.reference:type_name -> vega.PeggedReference
	56, // 48: vega.LiquidityOrderReference.liquidity_order:type_name -> vega.LiquidityOrder
	57, // 49: vega.LiquidityProvision.sells:type_name -> vega.LiquidityOrderReference
	57, // 50: vega.LiquidityProvision.buys:type_name -> vega.LiquidityOrderReference
	19, // 51: vega.LiquidityProvision.status:type_name -> vega.LiquidityProvision.Status
	60, // 52: vega.EthereumConfig.collateral_bridge_contract:type_name -> vega.EthereumContractConfig
	60, // 53: vega.EthereumConfig.staking_bridge_contract:type_name -> vega.EthereumContractConfig
	60, // 54: vega.EthereumConfig.token_vesting_contract:type_name -> vega.EthereumContractConfig
	60, // 55: vega.EthereumConfig.multisig_control_contract:type_name -> vega.EthereumContractConfig
	61, // 56: vega.Epoch.timestamps:type_name -> vega.EpochTimestamps
	67, // 57: vega.Epoch.validators:type_name -> vega.Node
	70, // 58: vega.Epoch.delegations:type_name -> vega.Delegation
	62, // 59: vega.EpochParticipation.epoch:type_name -> vega.Epoch
	12, // 60: vega.RankingScore.previous_status:type_name -> vega.ValidatorNodeStatus
	12, // 61: vega.RankingScore.status:type_name -> vega.ValidatorNodeStatus
	12, // 62: vega.RewardScore.validator_status:type_name -> vega.ValidatorNodeStatus
	64, // 63: vega.Node.epoch_data:type_name -> vega.EpochData
	10, // 64: vega.Node.status:type_name -> vega.NodeStatus
	70, // 65: vega.Node.delegations:type_name -> vega.Delegation
	66, // 66: vega.Node.reward_score:type_name -> vega.RewardScore
	65, // 67: vega.Node.ranking_score:type_name -> vega.RankingScore
	68, // 68: vega.NodeData.tendermint_nodes:type_name -> vega.NodeSet
	68, // 69: vega.NodeData.ersatz_nodes:type_name -> vega.NodeSet
	68, // 70: vega.NodeData.pending_nodes:type_name -> vega.NodeSet
	75, // 71: vega.StateValueProposal.kvb:type_name -> vega.KeyValueBundle
	76, // 72: vega.KeyValueBundle.value:type_name -> vega.StateVarValue
	77, // 73: vega.StateVarValue.scalar_val:type_name -> vega.ScalarValue
	78, // 74: vega.StateVarValue.vector_val:type_name -> vega.VectorValue
	79, // 75: vega.StateVarValue.matrix_val:type_name -> vega.MatrixValue
	78, // 76: vega.MatrixValue.value:type_name -> vega.VectorValue
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_vega_vega_proto_init() }
func file_vega_vega_proto_init() {
	if File_vega_vega_proto != nil {
		return
	}
	file_vega_markets_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vega_vega_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiskFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeggedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancellationConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionIndicativeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Candle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erc20WithdrawExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostTransferBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerMovement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProviderFeeShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitoringBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityOrderReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumContractConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochTimestamps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochParticipation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankingScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochRewardSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateValueProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateVarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_vega_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatrixValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_vega_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_vega_vega_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*WithdrawExt_Erc20)(nil),
	}
	file_vega_vega_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_vega_vega_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_vega_vega_proto_msgTypes[56].OneofWrappers = []interface{}{
		(*StateVarValue_ScalarVal)(nil),
		(*StateVarValue_VectorVal)(nil),
		(*StateVarValue_MatrixVal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_vega_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_vega_proto_goTypes,
		DependencyIndexes: file_vega_vega_proto_depIdxs,
		EnumInfos:         file_vega_vega_proto_enumTypes,
		MessageInfos:      file_vega_vega_proto_msgTypes,
	}.Build()
	File_vega_vega_proto = out.File
	file_vega_vega_proto_rawDesc = nil
	file_vega_vega_proto_goTypes = nil
	file_vega_vega_proto_depIdxs = nil
}
