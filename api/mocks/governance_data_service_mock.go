// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/api (interfaces: GovernanceDataService)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGovernanceDataService is a mock of GovernanceDataService interface
type MockGovernanceDataService struct {
	ctrl     *gomock.Controller
	recorder *MockGovernanceDataServiceMockRecorder
}

// MockGovernanceDataServiceMockRecorder is the mock recorder for MockGovernanceDataService
type MockGovernanceDataServiceMockRecorder struct {
	mock *MockGovernanceDataService
}

// NewMockGovernanceDataService creates a new mock instance
func NewMockGovernanceDataService(ctrl *gomock.Controller) *MockGovernanceDataService {
	mock := &MockGovernanceDataService{ctrl: ctrl}
	mock.recorder = &MockGovernanceDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGovernanceDataService) EXPECT() *MockGovernanceDataServiceMockRecorder {
	return m.recorder
}

// GetOpenProposals mocks base method
func (m *MockGovernanceDataService) GetOpenProposals() []proto.ProposalVote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenProposals")
	ret0, _ := ret[0].([]proto.ProposalVote)
	return ret0
}

// GetOpenProposals indicates an expected call of GetOpenProposals
func (mr *MockGovernanceDataServiceMockRecorder) GetOpenProposals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenProposals", reflect.TypeOf((*MockGovernanceDataService)(nil).GetOpenProposals))
}

// GetProposalByID mocks base method
func (m *MockGovernanceDataService) GetProposalByID(arg0 context.Context, arg1 string) (*proto.ProposalVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByID", arg0, arg1)
	ret0, _ := ret[0].(*proto.ProposalVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByID indicates an expected call of GetProposalByID
func (mr *MockGovernanceDataServiceMockRecorder) GetProposalByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByID", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposalByID), arg0, arg1)
}

// GetProposalByReference mocks base method
func (m *MockGovernanceDataService) GetProposalByReference(arg0 context.Context, arg1 string) (*proto.ProposalVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalByReference", arg0, arg1)
	ret0, _ := ret[0].(*proto.ProposalVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalByReference indicates an expected call of GetProposalByReference
func (mr *MockGovernanceDataServiceMockRecorder) GetProposalByReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalByReference", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposalByReference), arg0, arg1)
}

// GetProposals mocks base method
func (m *MockGovernanceDataService) GetProposals() []proto.ProposalVote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposals")
	ret0, _ := ret[0].([]proto.ProposalVote)
	return ret0
}

// GetProposals indicates an expected call of GetProposals
func (mr *MockGovernanceDataServiceMockRecorder) GetProposals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposals", reflect.TypeOf((*MockGovernanceDataService)(nil).GetProposals))
}

// ObserveProposals mocks base method
func (m *MockGovernanceDataService) ObserveProposals(arg0 context.Context, arg1 int) <-chan []proto.ProposalVote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveProposals", arg0, arg1)
	ret0, _ := ret[0].(<-chan []proto.ProposalVote)
	return ret0
}

// ObserveProposals indicates an expected call of ObserveProposals
func (mr *MockGovernanceDataServiceMockRecorder) ObserveProposals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveProposals", reflect.TypeOf((*MockGovernanceDataService)(nil).ObserveProposals), arg0, arg1)
}
