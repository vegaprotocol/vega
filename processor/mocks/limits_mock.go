// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/processor (interfaces: Limits)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLimits is a mock of Limits interface.
type MockLimits struct {
	ctrl     *gomock.Controller
	recorder *MockLimitsMockRecorder
}

// MockLimitsMockRecorder is the mock recorder for MockLimits.
type MockLimitsMockRecorder struct {
	mock *MockLimits
}

// NewMockLimits creates a new mock instance.
func NewMockLimits(ctrl *gomock.Controller) *MockLimits {
	mock := &MockLimits{ctrl: ctrl}
	mock.recorder = &MockLimitsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimits) EXPECT() *MockLimitsMockRecorder {
	return m.recorder
}

// BootstrapFinished mocks base method.
func (m *MockLimits) BootstrapFinished() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootstrapFinished")
	ret0, _ := ret[0].(bool)
	return ret0
}

// BootstrapFinished indicates an expected call of BootstrapFinished.
func (mr *MockLimitsMockRecorder) BootstrapFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootstrapFinished", reflect.TypeOf((*MockLimits)(nil).BootstrapFinished))
}

// CanProposeAsset mocks base method.
func (m *MockLimits) CanProposeAsset() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanProposeAsset")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanProposeAsset indicates an expected call of CanProposeAsset.
func (mr *MockLimitsMockRecorder) CanProposeAsset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanProposeAsset", reflect.TypeOf((*MockLimits)(nil).CanProposeAsset))
}

// CanProposeMarket mocks base method.
func (m *MockLimits) CanProposeMarket() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanProposeMarket")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanProposeMarket indicates an expected call of CanProposeMarket.
func (mr *MockLimitsMockRecorder) CanProposeMarket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanProposeMarket", reflect.TypeOf((*MockLimits)(nil).CanProposeMarket))
}

// CanTrade mocks base method.
func (m *MockLimits) CanTrade() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanTrade")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanTrade indicates an expected call of CanTrade.
func (mr *MockLimitsMockRecorder) CanTrade() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanTrade", reflect.TypeOf((*MockLimits)(nil).CanTrade))
}
