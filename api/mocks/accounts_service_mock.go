// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/api (interfaces: AccountsService)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountsService is a mock of AccountsService interface
type MockAccountsService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsServiceMockRecorder
}

// MockAccountsServiceMockRecorder is the mock recorder for MockAccountsService
type MockAccountsServiceMockRecorder struct {
	mock *MockAccountsService
}

// NewMockAccountsService creates a new mock instance
func NewMockAccountsService(ctrl *gomock.Controller) *MockAccountsService {
	mock := &MockAccountsService{ctrl: ctrl}
	mock.recorder = &MockAccountsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountsService) EXPECT() *MockAccountsServiceMockRecorder {
	return m.recorder
}

// GetAccountSubscribersCount mocks base method
func (m *MockAccountsService) GetAccountSubscribersCount() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSubscribersCount")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetAccountSubscribersCount indicates an expected call of GetAccountSubscribersCount
func (mr *MockAccountsServiceMockRecorder) GetAccountSubscribersCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSubscribersCount", reflect.TypeOf((*MockAccountsService)(nil).GetAccountSubscribersCount))
}

// GetMarketAccounts mocks base method
func (m *MockAccountsService) GetMarketAccounts(arg0, arg1 string) ([]*proto.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketAccounts", arg0, arg1)
	ret0, _ := ret[0].([]*proto.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketAccounts indicates an expected call of GetMarketAccounts
func (mr *MockAccountsServiceMockRecorder) GetMarketAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketAccounts", reflect.TypeOf((*MockAccountsService)(nil).GetMarketAccounts), arg0, arg1)
}

// GetPartyAccounts mocks base method
func (m *MockAccountsService) GetPartyAccounts(arg0, arg1, arg2 string, arg3 proto.AccountType) ([]*proto.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartyAccounts", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*proto.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartyAccounts indicates an expected call of GetPartyAccounts
func (mr *MockAccountsServiceMockRecorder) GetPartyAccounts(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartyAccounts", reflect.TypeOf((*MockAccountsService)(nil).GetPartyAccounts), arg0, arg1, arg2, arg3)
}

// ObserveAccounts mocks base method
func (m *MockAccountsService) ObserveAccounts(arg0 context.Context, arg1 int, arg2, arg3, arg4 string, arg5 proto.AccountType) (<-chan []*proto.Account, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveAccounts", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(<-chan []*proto.Account)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// ObserveAccounts indicates an expected call of ObserveAccounts
func (mr *MockAccountsServiceMockRecorder) ObserveAccounts(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveAccounts", reflect.TypeOf((*MockAccountsService)(nil).ObserveAccounts), arg0, arg1, arg2, arg3, arg4, arg5)
}
