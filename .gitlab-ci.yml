#image: golang:1.10.1
#
#variables:
#  BIN_NAME: vega
#  ARTIFACTS_DIR: artifacts
#  GO_PROJECT: vega
#
#stages:
#  - build
#  - test
#
#before_script:
#  - mkdir -p ${GOPATH}/src/${GO_PROJECT}
#  - mkdir -p ${CI_PROJECT_DIR}/${ARTIFACTS_DIR}
#  - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#  - cp -r ${CI_PROJECT_DIR}/* ${GOPATH}/src/${GO_PROJECT}/
#  - cd ${GOPATH}/src/${GO_PROJECT}
#
#build-my-project:
#  stage: build
#  script:
#    - dep ensure
#    - go build -o ${CI_PROJECT_DIR}/${ARTIFACTS_DIR}/cmd/${GO_PROJECT}/${BIN_NAME} ./cmd/vega
#  artifacts:
#    paths:
#      - ${ARTIFACTS_DIR}
#
#test-my-project:
#  stage: test
#  script:
#    - dep ensure
#    - go test -v -coverprofile .testCoverage.txt ./api/endpoints/rest


image: golang:1.10.1

variables:
  BIN_NAME: vega
  ARTIFACTS_DIR: artifacts
  GO_PROJECT: vega

cache:
  paths:
    - /apt-cache
    - /go/src/github.com
    - /go/src/golang.org
    - /go/src/google.golang.org
    - /go/src/gopkg.in

stages:
  - test
  - build

before_script:
  - mkdir -p ${GOPATH}/src/${GO_PROJECT}
  - mkdir -p ${CI_PROJECT_DIR}/${ARTIFACTS_DIR}
  - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
  - cp -r ${CI_PROJECT_DIR}/* ${GOPATH}/src/${GO_PROJECT}/
  - cd ${GOPATH}/src/${GO_PROJECT}

unit_tests:
  stage: test
  script:
    - make test

race_detector:
  stage: test
  script:
    - make race

memory_sanitizer:
  stage: test
  script:
    - make msan

code_coverage:
  stage: test
  script:
    - make coverage

code_coverage_report:
  stage: test
  script:
    - make coverhtml
  only:
  - master

lint_code:
  stage: test
  script:
    - make lint

build:
  stage: build
  script:
    - make