// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/execution (interfaces: TradeBuf)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTradeBuf is a mock of TradeBuf interface
type MockTradeBuf struct {
	ctrl     *gomock.Controller
	recorder *MockTradeBufMockRecorder
}

// MockTradeBufMockRecorder is the mock recorder for MockTradeBuf
type MockTradeBufMockRecorder struct {
	mock *MockTradeBuf
}

// NewMockTradeBuf creates a new mock instance
func NewMockTradeBuf(ctrl *gomock.Controller) *MockTradeBuf {
	mock := &MockTradeBuf{ctrl: ctrl}
	mock.recorder = &MockTradeBufMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTradeBuf) EXPECT() *MockTradeBufMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockTradeBuf) Add(arg0 proto.Trade) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add
func (mr *MockTradeBufMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTradeBuf)(nil).Add), arg0)
}

// Flush mocks base method
func (m *MockTradeBuf) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockTradeBufMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockTradeBuf)(nil).Flush))
}
