// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/rewards (interfaces: MarketTracker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMarketTracker is a mock of MarketTracker interface.
type MockMarketTracker struct {
	ctrl     *gomock.Controller
	recorder *MockMarketTrackerMockRecorder
}

// MockMarketTrackerMockRecorder is the mock recorder for MockMarketTracker.
type MockMarketTrackerMockRecorder struct {
	mock *MockMarketTracker
}

// NewMockMarketTracker creates a new mock instance.
func NewMockMarketTracker(ctrl *gomock.Controller) *MockMarketTracker {
	mock := &MockMarketTracker{ctrl: ctrl}
	mock.recorder = &MockMarketTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketTracker) EXPECT() *MockMarketTrackerMockRecorder {
	return m.recorder
}

// GetAndResetEligibleProposers mocks base method.
func (m *MockMarketTracker) GetAndResetEligibleProposers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndResetEligibleProposers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAndResetEligibleProposers indicates an expected call of GetAndResetEligibleProposers.
func (mr *MockMarketTrackerMockRecorder) GetAndResetEligibleProposers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndResetEligibleProposers", reflect.TypeOf((*MockMarketTracker)(nil).GetAndResetEligibleProposers))
}
