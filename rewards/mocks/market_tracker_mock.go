// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/rewards (interfaces: MarketActivityTracker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	vega "code.vegaprotocol.io/protos/vega"
	types "code.vegaprotocol.io/vega/types"
	gomock "github.com/golang/mock/gomock"
)

// MockMarketActivityTracker is a mock of MarketActivityTracker interface.
type MockMarketActivityTracker struct {
	ctrl     *gomock.Controller
	recorder *MockMarketActivityTrackerMockRecorder
}

// MockMarketActivityTrackerMockRecorder is the mock recorder for MockMarketActivityTracker.
type MockMarketActivityTrackerMockRecorder struct {
	mock *MockMarketActivityTracker
}

// NewMockMarketActivityTracker creates a new mock instance.
func NewMockMarketActivityTracker(ctrl *gomock.Controller) *MockMarketActivityTracker {
	mock := &MockMarketActivityTracker{ctrl: ctrl}
	mock.recorder = &MockMarketActivityTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketActivityTracker) EXPECT() *MockMarketActivityTrackerMockRecorder {
	return m.recorder
}

// GetAllMarketIDs mocks base method.
func (m *MockMarketActivityTracker) GetAllMarketIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMarketIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllMarketIDs indicates an expected call of GetAllMarketIDs.
func (mr *MockMarketActivityTrackerMockRecorder) GetAllMarketIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMarketIDs", reflect.TypeOf((*MockMarketActivityTracker)(nil).GetAllMarketIDs))
}

// GetEligibleProposers mocks base method.
func (m *MockMarketActivityTracker) GetEligibleProposers(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEligibleProposers", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetEligibleProposers indicates an expected call of GetEligibleProposers.
func (mr *MockMarketActivityTrackerMockRecorder) GetEligibleProposers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEligibleProposers", reflect.TypeOf((*MockMarketActivityTracker)(nil).GetEligibleProposers), arg0)
}

// GetFeePartyScores mocks base method.
func (m *MockMarketActivityTracker) GetFeePartyScores(arg0 string, arg1 vega.TransferType) []*types.PartyContibutionScore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeePartyScores", arg0, arg1)
	ret0, _ := ret[0].([]*types.PartyContibutionScore)
	return ret0
}

// GetFeePartyScores indicates an expected call of GetFeePartyScores.
func (mr *MockMarketActivityTrackerMockRecorder) GetFeePartyScores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeePartyScores", reflect.TypeOf((*MockMarketActivityTracker)(nil).GetFeePartyScores), arg0, arg1)
}

// MarkPaidProposer mocks base method.
func (m *MockMarketActivityTracker) MarkPaidProposer(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkPaidProposer", arg0)
}

// MarkPaidProposer indicates an expected call of MarkPaidProposer.
func (mr *MockMarketActivityTrackerMockRecorder) MarkPaidProposer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPaidProposer", reflect.TypeOf((*MockMarketActivityTracker)(nil).MarkPaidProposer), arg0)
}
