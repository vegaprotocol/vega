// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/chain_events.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A deposit for a Vega built-in asset.
type BuiltinAssetDeposit struct {
	// A Vega network internal asset identifier.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// A Vega party identifier (pub-key)
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The amount to be deposited.
	Amount               uint64   `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuiltinAssetDeposit) Reset()         { *m = BuiltinAssetDeposit{} }
func (m *BuiltinAssetDeposit) String() string { return proto.CompactTextString(m) }
func (*BuiltinAssetDeposit) ProtoMessage()    {}
func (*BuiltinAssetDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{0}
}

func (m *BuiltinAssetDeposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuiltinAssetDeposit.Unmarshal(m, b)
}
func (m *BuiltinAssetDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuiltinAssetDeposit.Marshal(b, m, deterministic)
}
func (m *BuiltinAssetDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuiltinAssetDeposit.Merge(m, src)
}
func (m *BuiltinAssetDeposit) XXX_Size() int {
	return xxx_messageInfo_BuiltinAssetDeposit.Size(m)
}
func (m *BuiltinAssetDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_BuiltinAssetDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_BuiltinAssetDeposit proto.InternalMessageInfo

func (m *BuiltinAssetDeposit) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

func (m *BuiltinAssetDeposit) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *BuiltinAssetDeposit) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// A withdrawal for a Vega built-in asset.
type BuiltinAssetWithdrawal struct {
	// A Vega network internal asset identifier.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// A Vega network party identifier (pub-key)
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
	// The amount to be withdrawn.
	Amount               uint64   `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuiltinAssetWithdrawal) Reset()         { *m = BuiltinAssetWithdrawal{} }
func (m *BuiltinAssetWithdrawal) String() string { return proto.CompactTextString(m) }
func (*BuiltinAssetWithdrawal) ProtoMessage()    {}
func (*BuiltinAssetWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{1}
}

func (m *BuiltinAssetWithdrawal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuiltinAssetWithdrawal.Unmarshal(m, b)
}
func (m *BuiltinAssetWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuiltinAssetWithdrawal.Marshal(b, m, deterministic)
}
func (m *BuiltinAssetWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuiltinAssetWithdrawal.Merge(m, src)
}
func (m *BuiltinAssetWithdrawal) XXX_Size() int {
	return xxx_messageInfo_BuiltinAssetWithdrawal.Size(m)
}
func (m *BuiltinAssetWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_BuiltinAssetWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_BuiltinAssetWithdrawal proto.InternalMessageInfo

func (m *BuiltinAssetWithdrawal) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

func (m *BuiltinAssetWithdrawal) GetPartyID() string {
	if m != nil {
		return m.PartyID
	}
	return ""
}

func (m *BuiltinAssetWithdrawal) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// An event related to a Vega built-in asset.
type BuiltinAssetEvent struct {
	// Types that are valid to be assigned to Action:
	//	*BuiltinAssetEvent_Deposit
	//	*BuiltinAssetEvent_Withdrawal
	Action               isBuiltinAssetEvent_Action `protobuf_oneof:"action"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *BuiltinAssetEvent) Reset()         { *m = BuiltinAssetEvent{} }
func (m *BuiltinAssetEvent) String() string { return proto.CompactTextString(m) }
func (*BuiltinAssetEvent) ProtoMessage()    {}
func (*BuiltinAssetEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{2}
}

func (m *BuiltinAssetEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuiltinAssetEvent.Unmarshal(m, b)
}
func (m *BuiltinAssetEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuiltinAssetEvent.Marshal(b, m, deterministic)
}
func (m *BuiltinAssetEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuiltinAssetEvent.Merge(m, src)
}
func (m *BuiltinAssetEvent) XXX_Size() int {
	return xxx_messageInfo_BuiltinAssetEvent.Size(m)
}
func (m *BuiltinAssetEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BuiltinAssetEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BuiltinAssetEvent proto.InternalMessageInfo

type isBuiltinAssetEvent_Action interface {
	isBuiltinAssetEvent_Action()
}

type BuiltinAssetEvent_Deposit struct {
	Deposit *BuiltinAssetDeposit `protobuf:"bytes,1001,opt,name=deposit,proto3,oneof"`
}

type BuiltinAssetEvent_Withdrawal struct {
	Withdrawal *BuiltinAssetWithdrawal `protobuf:"bytes,1002,opt,name=withdrawal,proto3,oneof"`
}

func (*BuiltinAssetEvent_Deposit) isBuiltinAssetEvent_Action() {}

func (*BuiltinAssetEvent_Withdrawal) isBuiltinAssetEvent_Action() {}

func (m *BuiltinAssetEvent) GetAction() isBuiltinAssetEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *BuiltinAssetEvent) GetDeposit() *BuiltinAssetDeposit {
	if x, ok := m.GetAction().(*BuiltinAssetEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *BuiltinAssetEvent) GetWithdrawal() *BuiltinAssetWithdrawal {
	if x, ok := m.GetAction().(*BuiltinAssetEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BuiltinAssetEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BuiltinAssetEvent_Deposit)(nil),
		(*BuiltinAssetEvent_Withdrawal)(nil),
	}
}

// An asset white-listing for an ERC20 token.
type ERC20AssetList struct {
	// The Vega network internal identifier of the asset.
	VegaAssetID          string   `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ERC20AssetList) Reset()         { *m = ERC20AssetList{} }
func (m *ERC20AssetList) String() string { return proto.CompactTextString(m) }
func (*ERC20AssetList) ProtoMessage()    {}
func (*ERC20AssetList) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{3}
}

func (m *ERC20AssetList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ERC20AssetList.Unmarshal(m, b)
}
func (m *ERC20AssetList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ERC20AssetList.Marshal(b, m, deterministic)
}
func (m *ERC20AssetList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20AssetList.Merge(m, src)
}
func (m *ERC20AssetList) XXX_Size() int {
	return xxx_messageInfo_ERC20AssetList.Size(m)
}
func (m *ERC20AssetList) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20AssetList.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20AssetList proto.InternalMessageInfo

func (m *ERC20AssetList) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

// An asset black-listing for an ERC20 token.
type ERC20AssetDelist struct {
	// The Vega network internal identifier of the asset.
	VegaAssetID          string   `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ERC20AssetDelist) Reset()         { *m = ERC20AssetDelist{} }
func (m *ERC20AssetDelist) String() string { return proto.CompactTextString(m) }
func (*ERC20AssetDelist) ProtoMessage()    {}
func (*ERC20AssetDelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{4}
}

func (m *ERC20AssetDelist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ERC20AssetDelist.Unmarshal(m, b)
}
func (m *ERC20AssetDelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ERC20AssetDelist.Marshal(b, m, deterministic)
}
func (m *ERC20AssetDelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20AssetDelist.Merge(m, src)
}
func (m *ERC20AssetDelist) XXX_Size() int {
	return xxx_messageInfo_ERC20AssetDelist.Size(m)
}
func (m *ERC20AssetDelist) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20AssetDelist.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20AssetDelist proto.InternalMessageInfo

func (m *ERC20AssetDelist) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

// An asset deposit for an ERC20 token.
type ERC20Deposit struct {
	// The vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The Ethereum wallet that initiated the deposit.
	SourceEthereumAddress string `protobuf:"bytes,2,opt,name=sourceEthereumAddress,proto3" json:"sourceEthereumAddress,omitempty"`
	// The Vega party identifier (pub-key) which is the target of the deposit.
	TargetPartyID        string   `protobuf:"bytes,3,opt,name=targetPartyID,proto3" json:"targetPartyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ERC20Deposit) Reset()         { *m = ERC20Deposit{} }
func (m *ERC20Deposit) String() string { return proto.CompactTextString(m) }
func (*ERC20Deposit) ProtoMessage()    {}
func (*ERC20Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{5}
}

func (m *ERC20Deposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ERC20Deposit.Unmarshal(m, b)
}
func (m *ERC20Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ERC20Deposit.Marshal(b, m, deterministic)
}
func (m *ERC20Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20Deposit.Merge(m, src)
}
func (m *ERC20Deposit) XXX_Size() int {
	return xxx_messageInfo_ERC20Deposit.Size(m)
}
func (m *ERC20Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20Deposit proto.InternalMessageInfo

func (m *ERC20Deposit) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

func (m *ERC20Deposit) GetSourceEthereumAddress() string {
	if m != nil {
		return m.SourceEthereumAddress
	}
	return ""
}

func (m *ERC20Deposit) GetTargetPartyID() string {
	if m != nil {
		return m.TargetPartyID
	}
	return ""
}

// An asset withdrawal for an ERC20 token.
type ERC20Withdrawal struct {
	// The Vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The target Ethereum wallet address.
	TargetEthereumAddress string `protobuf:"bytes,2,opt,name=targetEthereumAddress,proto3" json:"targetEthereumAddress,omitempty"`
	// The reference nonce used for the transaction.
	ReferenceNonce       string   `protobuf:"bytes,3,opt,name=referenceNonce,proto3" json:"referenceNonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ERC20Withdrawal) Reset()         { *m = ERC20Withdrawal{} }
func (m *ERC20Withdrawal) String() string { return proto.CompactTextString(m) }
func (*ERC20Withdrawal) ProtoMessage()    {}
func (*ERC20Withdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{6}
}

func (m *ERC20Withdrawal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ERC20Withdrawal.Unmarshal(m, b)
}
func (m *ERC20Withdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ERC20Withdrawal.Marshal(b, m, deterministic)
}
func (m *ERC20Withdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20Withdrawal.Merge(m, src)
}
func (m *ERC20Withdrawal) XXX_Size() int {
	return xxx_messageInfo_ERC20Withdrawal.Size(m)
}
func (m *ERC20Withdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20Withdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20Withdrawal proto.InternalMessageInfo

func (m *ERC20Withdrawal) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

func (m *ERC20Withdrawal) GetTargetEthereumAddress() string {
	if m != nil {
		return m.TargetEthereumAddress
	}
	return ""
}

func (m *ERC20Withdrawal) GetReferenceNonce() string {
	if m != nil {
		return m.ReferenceNonce
	}
	return ""
}

// An event related to an ERC20 token.
type ERC20Event struct {
	// Index of the transaction
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The block in which the transaction was added
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// The action.
	//
	// Types that are valid to be assigned to Action:
	//	*ERC20Event_AssetList
	//	*ERC20Event_AssetDelist
	//	*ERC20Event_Deposit
	//	*ERC20Event_Withdrawal
	Action               isERC20Event_Action `protobuf_oneof:"action"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ERC20Event) Reset()         { *m = ERC20Event{} }
func (m *ERC20Event) String() string { return proto.CompactTextString(m) }
func (*ERC20Event) ProtoMessage()    {}
func (*ERC20Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{7}
}

func (m *ERC20Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ERC20Event.Unmarshal(m, b)
}
func (m *ERC20Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ERC20Event.Marshal(b, m, deterministic)
}
func (m *ERC20Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20Event.Merge(m, src)
}
func (m *ERC20Event) XXX_Size() int {
	return xxx_messageInfo_ERC20Event.Size(m)
}
func (m *ERC20Event) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20Event.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20Event proto.InternalMessageInfo

func (m *ERC20Event) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ERC20Event) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type isERC20Event_Action interface {
	isERC20Event_Action()
}

type ERC20Event_AssetList struct {
	AssetList *ERC20AssetList `protobuf:"bytes,1001,opt,name=assetList,proto3,oneof"`
}

type ERC20Event_AssetDelist struct {
	AssetDelist *ERC20AssetDelist `protobuf:"bytes,1002,opt,name=assetDelist,proto3,oneof"`
}

type ERC20Event_Deposit struct {
	Deposit *ERC20Deposit `protobuf:"bytes,1003,opt,name=deposit,proto3,oneof"`
}

type ERC20Event_Withdrawal struct {
	Withdrawal *ERC20Withdrawal `protobuf:"bytes,1004,opt,name=withdrawal,proto3,oneof"`
}

func (*ERC20Event_AssetList) isERC20Event_Action() {}

func (*ERC20Event_AssetDelist) isERC20Event_Action() {}

func (*ERC20Event_Deposit) isERC20Event_Action() {}

func (*ERC20Event_Withdrawal) isERC20Event_Action() {}

func (m *ERC20Event) GetAction() isERC20Event_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ERC20Event) GetAssetList() *ERC20AssetList {
	if x, ok := m.GetAction().(*ERC20Event_AssetList); ok {
		return x.AssetList
	}
	return nil
}

func (m *ERC20Event) GetAssetDelist() *ERC20AssetDelist {
	if x, ok := m.GetAction().(*ERC20Event_AssetDelist); ok {
		return x.AssetDelist
	}
	return nil
}

func (m *ERC20Event) GetDeposit() *ERC20Deposit {
	if x, ok := m.GetAction().(*ERC20Event_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *ERC20Event) GetWithdrawal() *ERC20Withdrawal {
	if x, ok := m.GetAction().(*ERC20Event_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ERC20Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ERC20Event_AssetList)(nil),
		(*ERC20Event_AssetDelist)(nil),
		(*ERC20Event_Deposit)(nil),
		(*ERC20Event_Withdrawal)(nil),
	}
}

// An asset deposit for an ERC20 token.
type ETHDeposit struct {
	// The vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The Ethereum wallet that initiated the deposit.
	SourceEthereumAddress string `protobuf:"bytes,2,opt,name=sourceEthereumAddress,proto3" json:"sourceEthereumAddress,omitempty"`
	// The Vega party identifier (pub-key) which is the target of the deposit.
	TargetPartyID        string   `protobuf:"bytes,3,opt,name=targetPartyID,proto3" json:"targetPartyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ETHDeposit) Reset()         { *m = ETHDeposit{} }
func (m *ETHDeposit) String() string { return proto.CompactTextString(m) }
func (*ETHDeposit) ProtoMessage()    {}
func (*ETHDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{8}
}

func (m *ETHDeposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ETHDeposit.Unmarshal(m, b)
}
func (m *ETHDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ETHDeposit.Marshal(b, m, deterministic)
}
func (m *ETHDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ETHDeposit.Merge(m, src)
}
func (m *ETHDeposit) XXX_Size() int {
	return xxx_messageInfo_ETHDeposit.Size(m)
}
func (m *ETHDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_ETHDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_ETHDeposit proto.InternalMessageInfo

func (m *ETHDeposit) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

func (m *ETHDeposit) GetSourceEthereumAddress() string {
	if m != nil {
		return m.SourceEthereumAddress
	}
	return ""
}

func (m *ETHDeposit) GetTargetPartyID() string {
	if m != nil {
		return m.TargetPartyID
	}
	return ""
}

// An asset withdrawal for an ERC20 token.
type ETHWithdrawal struct {
	// The Vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The target Ethereum wallet address.
	TargetEthereumAddress string `protobuf:"bytes,2,opt,name=targetEthereumAddress,proto3" json:"targetEthereumAddress,omitempty"`
	// The reference nonce used for the transaction.
	ReferenceNonce       string   `protobuf:"bytes,3,opt,name=referenceNonce,proto3" json:"referenceNonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ETHWithdrawal) Reset()         { *m = ETHWithdrawal{} }
func (m *ETHWithdrawal) String() string { return proto.CompactTextString(m) }
func (*ETHWithdrawal) ProtoMessage()    {}
func (*ETHWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{9}
}

func (m *ETHWithdrawal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ETHWithdrawal.Unmarshal(m, b)
}
func (m *ETHWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ETHWithdrawal.Marshal(b, m, deterministic)
}
func (m *ETHWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ETHWithdrawal.Merge(m, src)
}
func (m *ETHWithdrawal) XXX_Size() int {
	return xxx_messageInfo_ETHWithdrawal.Size(m)
}
func (m *ETHWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_ETHWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_ETHWithdrawal proto.InternalMessageInfo

func (m *ETHWithdrawal) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

func (m *ETHWithdrawal) GetTargetEthereumAddress() string {
	if m != nil {
		return m.TargetEthereumAddress
	}
	return ""
}

func (m *ETHWithdrawal) GetReferenceNonce() string {
	if m != nil {
		return m.ReferenceNonce
	}
	return ""
}

// An event related to Ether coins.
type ETHEvent struct {
	// The index of the transaction.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The block in which the transaction happened.
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// The action.
	//
	// Types that are valid to be assigned to Action:
	//	*ETHEvent_Deposit
	//	*ETHEvent_Withdrawal
	Action               isETHEvent_Action `protobuf_oneof:"action"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ETHEvent) Reset()         { *m = ETHEvent{} }
func (m *ETHEvent) String() string { return proto.CompactTextString(m) }
func (*ETHEvent) ProtoMessage()    {}
func (*ETHEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{10}
}

func (m *ETHEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ETHEvent.Unmarshal(m, b)
}
func (m *ETHEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ETHEvent.Marshal(b, m, deterministic)
}
func (m *ETHEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ETHEvent.Merge(m, src)
}
func (m *ETHEvent) XXX_Size() int {
	return xxx_messageInfo_ETHEvent.Size(m)
}
func (m *ETHEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ETHEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ETHEvent proto.InternalMessageInfo

func (m *ETHEvent) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ETHEvent) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type isETHEvent_Action interface {
	isETHEvent_Action()
}

type ETHEvent_Deposit struct {
	Deposit *ETHDeposit `protobuf:"bytes,1001,opt,name=deposit,proto3,oneof"`
}

type ETHEvent_Withdrawal struct {
	Withdrawal *ETHWithdrawal `protobuf:"bytes,1002,opt,name=withdrawal,proto3,oneof"`
}

func (*ETHEvent_Deposit) isETHEvent_Action() {}

func (*ETHEvent_Withdrawal) isETHEvent_Action() {}

func (m *ETHEvent) GetAction() isETHEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ETHEvent) GetDeposit() *ETHDeposit {
	if x, ok := m.GetAction().(*ETHEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *ETHEvent) GetWithdrawal() *ETHWithdrawal {
	if x, ok := m.GetAction().(*ETHEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ETHEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ETHEvent_Deposit)(nil),
		(*ETHEvent_Withdrawal)(nil),
	}
}

// A Bitcoin deposit into Vega.
type BTCDeposit struct {
	// The Vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The BTC wallet initiating the deposit.
	SourceBTCAddress string `protobuf:"bytes,2,opt,name=sourceBTCAddress,proto3" json:"sourceBTCAddress,omitempty"`
	// The Vega party identifier (pub-key) which is the target of the deposit.
	TargetPartyId        string   `protobuf:"bytes,3,opt,name=targetPartyId,proto3" json:"targetPartyId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCDeposit) Reset()         { *m = BTCDeposit{} }
func (m *BTCDeposit) String() string { return proto.CompactTextString(m) }
func (*BTCDeposit) ProtoMessage()    {}
func (*BTCDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{11}
}

func (m *BTCDeposit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCDeposit.Unmarshal(m, b)
}
func (m *BTCDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCDeposit.Marshal(b, m, deterministic)
}
func (m *BTCDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDeposit.Merge(m, src)
}
func (m *BTCDeposit) XXX_Size() int {
	return xxx_messageInfo_BTCDeposit.Size(m)
}
func (m *BTCDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDeposit proto.InternalMessageInfo

func (m *BTCDeposit) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

func (m *BTCDeposit) GetSourceBTCAddress() string {
	if m != nil {
		return m.SourceBTCAddress
	}
	return ""
}

func (m *BTCDeposit) GetTargetPartyId() string {
	if m != nil {
		return m.TargetPartyId
	}
	return ""
}

// A Bitcoin withdrawal from Vega.
type BTCWithdrawal struct {
	// The vega network internal identifier of the asset.
	VegaAssetID string `protobuf:"bytes,1,opt,name=vegaAssetID,proto3" json:"vegaAssetID,omitempty"`
	// The party identifier (pub-key) initiating the withdrawal.
	SourcePartyId string `protobuf:"bytes,2,opt,name=sourcePartyId,proto3" json:"sourcePartyId,omitempty"`
	// Target Bitcoin wallet address.
	TargetBTCAddress string `protobuf:"bytes,3,opt,name=targetBTCAddress,proto3" json:"targetBTCAddress,omitempty"`
	// The nonce reference of the transaction.
	ReferenceNonce       string   `protobuf:"bytes,4,opt,name=referenceNonce,proto3" json:"referenceNonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCWithdrawal) Reset()         { *m = BTCWithdrawal{} }
func (m *BTCWithdrawal) String() string { return proto.CompactTextString(m) }
func (*BTCWithdrawal) ProtoMessage()    {}
func (*BTCWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{12}
}

func (m *BTCWithdrawal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCWithdrawal.Unmarshal(m, b)
}
func (m *BTCWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCWithdrawal.Marshal(b, m, deterministic)
}
func (m *BTCWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCWithdrawal.Merge(m, src)
}
func (m *BTCWithdrawal) XXX_Size() int {
	return xxx_messageInfo_BTCWithdrawal.Size(m)
}
func (m *BTCWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_BTCWithdrawal proto.InternalMessageInfo

func (m *BTCWithdrawal) GetVegaAssetID() string {
	if m != nil {
		return m.VegaAssetID
	}
	return ""
}

func (m *BTCWithdrawal) GetSourcePartyId() string {
	if m != nil {
		return m.SourcePartyId
	}
	return ""
}

func (m *BTCWithdrawal) GetTargetBTCAddress() string {
	if m != nil {
		return m.TargetBTCAddress
	}
	return ""
}

func (m *BTCWithdrawal) GetReferenceNonce() string {
	if m != nil {
		return m.ReferenceNonce
	}
	return ""
}

// An event from the Bitcoin network.
type BTCEvent struct {
	// The index of the transaction.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The block in which the transaction happened.
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// The action.
	//
	// Types that are valid to be assigned to Action:
	//	*BTCEvent_Deposit
	//	*BTCEvent_Withdrawal
	Action               isBTCEvent_Action `protobuf_oneof:"action"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BTCEvent) Reset()         { *m = BTCEvent{} }
func (m *BTCEvent) String() string { return proto.CompactTextString(m) }
func (*BTCEvent) ProtoMessage()    {}
func (*BTCEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{13}
}

func (m *BTCEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCEvent.Unmarshal(m, b)
}
func (m *BTCEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCEvent.Marshal(b, m, deterministic)
}
func (m *BTCEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCEvent.Merge(m, src)
}
func (m *BTCEvent) XXX_Size() int {
	return xxx_messageInfo_BTCEvent.Size(m)
}
func (m *BTCEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BTCEvent proto.InternalMessageInfo

func (m *BTCEvent) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BTCEvent) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type isBTCEvent_Action interface {
	isBTCEvent_Action()
}

type BTCEvent_Deposit struct {
	Deposit *BTCDeposit `protobuf:"bytes,1001,opt,name=deposit,proto3,oneof"`
}

type BTCEvent_Withdrawal struct {
	Withdrawal *BTCWithdrawal `protobuf:"bytes,1002,opt,name=withdrawal,proto3,oneof"`
}

func (*BTCEvent_Deposit) isBTCEvent_Action() {}

func (*BTCEvent_Withdrawal) isBTCEvent_Action() {}

func (m *BTCEvent) GetAction() isBTCEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *BTCEvent) GetDeposit() *BTCDeposit {
	if x, ok := m.GetAction().(*BTCEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *BTCEvent) GetWithdrawal() *BTCWithdrawal {
	if x, ok := m.GetAction().(*BTCEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BTCEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BTCEvent_Deposit)(nil),
		(*BTCEvent_Withdrawal)(nil),
	}
}

// Used as a wrapper for an Ethereum address (wallet/contract).
type EthereumAddress struct {
	// An Ethereum address.
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthereumAddress) Reset()         { *m = EthereumAddress{} }
func (m *EthereumAddress) String() string { return proto.CompactTextString(m) }
func (*EthereumAddress) ProtoMessage()    {}
func (*EthereumAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{14}
}

func (m *EthereumAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthereumAddress.Unmarshal(m, b)
}
func (m *EthereumAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthereumAddress.Marshal(b, m, deterministic)
}
func (m *EthereumAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthereumAddress.Merge(m, src)
}
func (m *EthereumAddress) XXX_Size() int {
	return xxx_messageInfo_EthereumAddress.Size(m)
}
func (m *EthereumAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_EthereumAddress.DiscardUnknown(m)
}

var xxx_messageInfo_EthereumAddress proto.InternalMessageInfo

func (m *EthereumAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Used as a wrapper for a Bitcoin address (wallet).
type BitcoinAddress struct {
	// A Bitcoin address.
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BitcoinAddress) Reset()         { *m = BitcoinAddress{} }
func (m *BitcoinAddress) String() string { return proto.CompactTextString(m) }
func (*BitcoinAddress) ProtoMessage()    {}
func (*BitcoinAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{15}
}

func (m *BitcoinAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitcoinAddress.Unmarshal(m, b)
}
func (m *BitcoinAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitcoinAddress.Marshal(b, m, deterministic)
}
func (m *BitcoinAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinAddress.Merge(m, src)
}
func (m *BitcoinAddress) XXX_Size() int {
	return xxx_messageInfo_BitcoinAddress.Size(m)
}
func (m *BitcoinAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinAddress.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinAddress proto.InternalMessageInfo

func (m *BitcoinAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Used as a wrapper type on any possible network address supported by Vega.
type Identifier struct {
	// The identifier.
	//
	// Types that are valid to be assigned to Identifier:
	//	*Identifier_EthereumAddress
	//	*Identifier_BitcoinAddress
	Identifier           isIdentifier_Identifier `protobuf_oneof:"identifier"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Identifier) Reset()         { *m = Identifier{} }
func (m *Identifier) String() string { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()    {}
func (*Identifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{16}
}

func (m *Identifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifier.Unmarshal(m, b)
}
func (m *Identifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifier.Marshal(b, m, deterministic)
}
func (m *Identifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifier.Merge(m, src)
}
func (m *Identifier) XXX_Size() int {
	return xxx_messageInfo_Identifier.Size(m)
}
func (m *Identifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifier.DiscardUnknown(m)
}

var xxx_messageInfo_Identifier proto.InternalMessageInfo

type isIdentifier_Identifier interface {
	isIdentifier_Identifier()
}

type Identifier_EthereumAddress struct {
	EthereumAddress *EthereumAddress `protobuf:"bytes,1,opt,name=ethereumAddress,proto3,oneof"`
}

type Identifier_BitcoinAddress struct {
	BitcoinAddress *BitcoinAddress `protobuf:"bytes,2,opt,name=bitcoinAddress,proto3,oneof"`
}

func (*Identifier_EthereumAddress) isIdentifier_Identifier() {}

func (*Identifier_BitcoinAddress) isIdentifier_Identifier() {}

func (m *Identifier) GetIdentifier() isIdentifier_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *Identifier) GetEthereumAddress() *EthereumAddress {
	if x, ok := m.GetIdentifier().(*Identifier_EthereumAddress); ok {
		return x.EthereumAddress
	}
	return nil
}

func (m *Identifier) GetBitcoinAddress() *BitcoinAddress {
	if x, ok := m.GetIdentifier().(*Identifier_BitcoinAddress); ok {
		return x.BitcoinAddress
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Identifier) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Identifier_EthereumAddress)(nil),
		(*Identifier_BitcoinAddress)(nil),
	}
}

// A message to notify when a new validator is being added to the Vega network.
type AddValidator struct {
	// The identifier of the validator.
	Id                   *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddValidator) Reset()         { *m = AddValidator{} }
func (m *AddValidator) String() string { return proto.CompactTextString(m) }
func (*AddValidator) ProtoMessage()    {}
func (*AddValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{17}
}

func (m *AddValidator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddValidator.Unmarshal(m, b)
}
func (m *AddValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddValidator.Marshal(b, m, deterministic)
}
func (m *AddValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddValidator.Merge(m, src)
}
func (m *AddValidator) XXX_Size() int {
	return xxx_messageInfo_AddValidator.Size(m)
}
func (m *AddValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_AddValidator.DiscardUnknown(m)
}

var xxx_messageInfo_AddValidator proto.InternalMessageInfo

func (m *AddValidator) GetId() *Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

// A message to notify when a validator is being removed from the Vega network.
type RemoveValidator struct {
	// The identifier of the validator.
	Id                   *Identifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RemoveValidator) Reset()         { *m = RemoveValidator{} }
func (m *RemoveValidator) String() string { return proto.CompactTextString(m) }
func (*RemoveValidator) ProtoMessage()    {}
func (*RemoveValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{18}
}

func (m *RemoveValidator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveValidator.Unmarshal(m, b)
}
func (m *RemoveValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveValidator.Marshal(b, m, deterministic)
}
func (m *RemoveValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveValidator.Merge(m, src)
}
func (m *RemoveValidator) XXX_Size() int {
	return xxx_messageInfo_RemoveValidator.Size(m)
}
func (m *RemoveValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveValidator.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveValidator proto.InternalMessageInfo

func (m *RemoveValidator) GetId() *Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

// An event related to validator management with foreign networks.
type ValidatorEvent struct {
	// The source identifier of the event.
	SourceID string `protobuf:"bytes,1,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	// The action.
	//
	// Types that are valid to be assigned to Action:
	//	*ValidatorEvent_Add
	//	*ValidatorEvent_Rm
	Action               isValidatorEvent_Action `protobuf_oneof:"action"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ValidatorEvent) Reset()         { *m = ValidatorEvent{} }
func (m *ValidatorEvent) String() string { return proto.CompactTextString(m) }
func (*ValidatorEvent) ProtoMessage()    {}
func (*ValidatorEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{19}
}

func (m *ValidatorEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatorEvent.Unmarshal(m, b)
}
func (m *ValidatorEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatorEvent.Marshal(b, m, deterministic)
}
func (m *ValidatorEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorEvent.Merge(m, src)
}
func (m *ValidatorEvent) XXX_Size() int {
	return xxx_messageInfo_ValidatorEvent.Size(m)
}
func (m *ValidatorEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorEvent proto.InternalMessageInfo

func (m *ValidatorEvent) GetSourceID() string {
	if m != nil {
		return m.SourceID
	}
	return ""
}

type isValidatorEvent_Action interface {
	isValidatorEvent_Action()
}

type ValidatorEvent_Add struct {
	Add *AddValidator `protobuf:"bytes,1001,opt,name=add,proto3,oneof"`
}

type ValidatorEvent_Rm struct {
	Rm *RemoveValidator `protobuf:"bytes,1002,opt,name=rm,proto3,oneof"`
}

func (*ValidatorEvent_Add) isValidatorEvent_Action() {}

func (*ValidatorEvent_Rm) isValidatorEvent_Action() {}

func (m *ValidatorEvent) GetAction() isValidatorEvent_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ValidatorEvent) GetAdd() *AddValidator {
	if x, ok := m.GetAction().(*ValidatorEvent_Add); ok {
		return x.Add
	}
	return nil
}

func (m *ValidatorEvent) GetRm() *RemoveValidator {
	if x, ok := m.GetAction().(*ValidatorEvent_Rm); ok {
		return x.Rm
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ValidatorEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ValidatorEvent_Add)(nil),
		(*ValidatorEvent_Rm)(nil),
	}
}

// An event forwarded to the Vega network to provide information on events happening on other networks.
type ChainEvent struct {
	// The identifier of the transaction in which the events happened, usually a hash.
	TxID string `protobuf:"bytes,1,opt,name=txID,proto3" json:"txID,omitempty"`
	// Arbitrary one-time integer used to prevent replay attacks.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The event.
	//
	// Types that are valid to be assigned to Event:
	//	*ChainEvent_Builtin
	//	*ChainEvent_Erc20
	//	*ChainEvent_Btc
	//	*ChainEvent_Eth
	//	*ChainEvent_Validator
	Event                isChainEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ChainEvent) Reset()         { *m = ChainEvent{} }
func (m *ChainEvent) String() string { return proto.CompactTextString(m) }
func (*ChainEvent) ProtoMessage()    {}
func (*ChainEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_53124a7566d3b0d6, []int{20}
}

func (m *ChainEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainEvent.Unmarshal(m, b)
}
func (m *ChainEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainEvent.Marshal(b, m, deterministic)
}
func (m *ChainEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainEvent.Merge(m, src)
}
func (m *ChainEvent) XXX_Size() int {
	return xxx_messageInfo_ChainEvent.Size(m)
}
func (m *ChainEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ChainEvent proto.InternalMessageInfo

func (m *ChainEvent) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *ChainEvent) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type isChainEvent_Event interface {
	isChainEvent_Event()
}

type ChainEvent_Builtin struct {
	Builtin *BuiltinAssetEvent `protobuf:"bytes,1001,opt,name=builtin,proto3,oneof"`
}

type ChainEvent_Erc20 struct {
	Erc20 *ERC20Event `protobuf:"bytes,1002,opt,name=erc20,proto3,oneof"`
}

type ChainEvent_Btc struct {
	Btc *BTCEvent `protobuf:"bytes,1003,opt,name=btc,proto3,oneof"`
}

type ChainEvent_Eth struct {
	Eth *ETHEvent `protobuf:"bytes,1004,opt,name=eth,proto3,oneof"`
}

type ChainEvent_Validator struct {
	Validator *ValidatorEvent `protobuf:"bytes,1100,opt,name=validator,proto3,oneof"`
}

func (*ChainEvent_Builtin) isChainEvent_Event() {}

func (*ChainEvent_Erc20) isChainEvent_Event() {}

func (*ChainEvent_Btc) isChainEvent_Event() {}

func (*ChainEvent_Eth) isChainEvent_Event() {}

func (*ChainEvent_Validator) isChainEvent_Event() {}

func (m *ChainEvent) GetEvent() isChainEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ChainEvent) GetBuiltin() *BuiltinAssetEvent {
	if x, ok := m.GetEvent().(*ChainEvent_Builtin); ok {
		return x.Builtin
	}
	return nil
}

func (m *ChainEvent) GetErc20() *ERC20Event {
	if x, ok := m.GetEvent().(*ChainEvent_Erc20); ok {
		return x.Erc20
	}
	return nil
}

func (m *ChainEvent) GetBtc() *BTCEvent {
	if x, ok := m.GetEvent().(*ChainEvent_Btc); ok {
		return x.Btc
	}
	return nil
}

func (m *ChainEvent) GetEth() *ETHEvent {
	if x, ok := m.GetEvent().(*ChainEvent_Eth); ok {
		return x.Eth
	}
	return nil
}

func (m *ChainEvent) GetValidator() *ValidatorEvent {
	if x, ok := m.GetEvent().(*ChainEvent_Validator); ok {
		return x.Validator
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChainEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChainEvent_Builtin)(nil),
		(*ChainEvent_Erc20)(nil),
		(*ChainEvent_Btc)(nil),
		(*ChainEvent_Eth)(nil),
		(*ChainEvent_Validator)(nil),
	}
}

func init() {
	proto.RegisterType((*BuiltinAssetDeposit)(nil), "vega.BuiltinAssetDeposit")
	proto.RegisterType((*BuiltinAssetWithdrawal)(nil), "vega.BuiltinAssetWithdrawal")
	proto.RegisterType((*BuiltinAssetEvent)(nil), "vega.BuiltinAssetEvent")
	proto.RegisterType((*ERC20AssetList)(nil), "vega.ERC20AssetList")
	proto.RegisterType((*ERC20AssetDelist)(nil), "vega.ERC20AssetDelist")
	proto.RegisterType((*ERC20Deposit)(nil), "vega.ERC20Deposit")
	proto.RegisterType((*ERC20Withdrawal)(nil), "vega.ERC20Withdrawal")
	proto.RegisterType((*ERC20Event)(nil), "vega.ERC20Event")
	proto.RegisterType((*ETHDeposit)(nil), "vega.ETHDeposit")
	proto.RegisterType((*ETHWithdrawal)(nil), "vega.ETHWithdrawal")
	proto.RegisterType((*ETHEvent)(nil), "vega.ETHEvent")
	proto.RegisterType((*BTCDeposit)(nil), "vega.BTCDeposit")
	proto.RegisterType((*BTCWithdrawal)(nil), "vega.BTCWithdrawal")
	proto.RegisterType((*BTCEvent)(nil), "vega.BTCEvent")
	proto.RegisterType((*EthereumAddress)(nil), "vega.EthereumAddress")
	proto.RegisterType((*BitcoinAddress)(nil), "vega.BitcoinAddress")
	proto.RegisterType((*Identifier)(nil), "vega.Identifier")
	proto.RegisterType((*AddValidator)(nil), "vega.AddValidator")
	proto.RegisterType((*RemoveValidator)(nil), "vega.RemoveValidator")
	proto.RegisterType((*ValidatorEvent)(nil), "vega.ValidatorEvent")
	proto.RegisterType((*ChainEvent)(nil), "vega.ChainEvent")
}

func init() { proto.RegisterFile("proto/chain_events.proto", fileDescriptor_53124a7566d3b0d6) }

var fileDescriptor_53124a7566d3b0d6 = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x5d, 0x6b, 0xe3, 0x46,
	0x14, 0x95, 0x6c, 0x27, 0x76, 0x6e, 0xe2, 0x8f, 0x4e, 0x3e, 0xaa, 0x96, 0x42, 0x5d, 0x35, 0xb4,
	0x6e, 0x4a, 0xed, 0xe0, 0xb8, 0xa1, 0x50, 0x68, 0xb1, 0x6c, 0x83, 0x02, 0xa5, 0x14, 0x61, 0x5a,
	0xe8, 0x4b, 0x91, 0x35, 0x93, 0x78, 0xa8, 0x2d, 0x05, 0x69, 0xec, 0xa4, 0x6f, 0x7d, 0x6d, 0x59,
	0x58, 0xf6, 0x65, 0xdf, 0xf6, 0x61, 0x9f, 0xf6, 0x61, 0xff, 0xca, 0xfe, 0x91, 0xfd, 0xf8, 0x11,
	0x8b, 0x66, 0x34, 0xb2, 0x24, 0x3b, 0xac, 0x0d, 0xbb, 0x90, 0xa7, 0xe4, 0xde, 0x39, 0x57, 0xf7,
	0xcc, 0x3d, 0xc7, 0x33, 0x03, 0xda, 0xb5, 0xef, 0x31, 0xaf, 0xe5, 0x8c, 0x6d, 0xea, 0xfe, 0x45,
	0xe6, 0xc4, 0x65, 0x41, 0x93, 0xa7, 0x50, 0x61, 0x4e, 0xae, 0x6c, 0x9d, 0xc2, 0xbe, 0x31, 0xa3,
	0x13, 0x46, 0xdd, 0x6e, 0x10, 0x10, 0xd6, 0x27, 0xd7, 0x5e, 0x40, 0x19, 0xaa, 0xc3, 0x6e, 0xb8,
	0xcc, 0x73, 0x17, 0x7d, 0x4d, 0xad, 0xab, 0x8d, 0x1d, 0x2b, 0x99, 0x42, 0x1a, 0x14, 0xaf, 0x6d,
	0x9f, 0xfd, 0x73, 0xd1, 0xd7, 0x72, 0x7c, 0x55, 0x86, 0xe8, 0x08, 0xb6, 0xed, 0xa9, 0x37, 0x73,
	0x99, 0x96, 0xaf, 0xab, 0x8d, 0x82, 0x15, 0x45, 0xfa, 0x04, 0x8e, 0x92, 0xad, 0xfe, 0xa0, 0x6c,
	0x8c, 0x7d, 0xfb, 0xc6, 0x9e, 0x7c, 0x90, 0x6e, 0x8f, 0x55, 0xf8, 0x28, 0xd9, 0x6e, 0x10, 0xee,
	0x1d, 0x9d, 0x43, 0x11, 0x8b, 0x2d, 0x6a, 0x2f, 0x8b, 0x75, 0xb5, 0xb1, 0xdb, 0xfe, 0xa4, 0x19,
	0xf6, 0x69, 0xae, 0x18, 0x82, 0xa9, 0x58, 0x12, 0x8c, 0x7e, 0x06, 0xb8, 0x89, 0xf9, 0x6a, 0xaf,
	0x44, 0xe9, 0x67, 0xcb, 0xa5, 0x8b, 0x4d, 0x99, 0x8a, 0x95, 0x28, 0x31, 0x4a, 0xb0, 0x6d, 0x3b,
	0x8c, 0x7a, 0xae, 0xde, 0x86, 0xca, 0xc0, 0xea, 0xb5, 0x4f, 0x39, 0xfe, 0x17, 0x1a, 0xac, 0x31,
	0x6c, 0xbd, 0x03, 0xb5, 0x45, 0x4d, 0x9f, 0x4c, 0xd6, 0xab, 0x7a, 0xa0, 0xc2, 0x1e, 0x2f, 0x5b,
	0x5f, 0xd5, 0x0e, 0x1c, 0x06, 0xde, 0xcc, 0x77, 0xc8, 0x80, 0x8d, 0x89, 0x4f, 0x66, 0xd3, 0x2e,
	0xc6, 0x3e, 0x09, 0x82, 0x68, 0xea, 0xab, 0x17, 0xd1, 0x31, 0x94, 0x99, 0xed, 0x5f, 0x11, 0xf6,
	0x5b, 0xa4, 0x51, 0x9e, 0xa3, 0xd3, 0x49, 0xfd, 0x91, 0x0a, 0x55, 0x4e, 0x67, 0x23, 0xe5, 0x3b,
	0x70, 0x28, 0x3e, 0x73, 0x07, 0xa3, 0x95, 0x8b, 0xe8, 0x2b, 0xa8, 0xf8, 0xe4, 0x92, 0xf8, 0xc4,
	0x75, 0xc8, 0xaf, 0x9e, 0xeb, 0x90, 0x88, 0x52, 0x26, 0xab, 0x3f, 0xcd, 0x01, 0x70, 0x4e, 0xc2,
	0x1e, 0x07, 0xb0, 0x45, 0x5d, 0x4c, 0x6e, 0x39, 0x91, 0x82, 0x25, 0x82, 0x30, 0x3b, 0x9a, 0x78,
	0xce, 0xdf, 0xbc, 0x65, 0xc1, 0x12, 0x01, 0xfa, 0x1e, 0x76, 0x6c, 0x29, 0xa1, 0x34, 0xd3, 0x81,
	0x70, 0x44, 0x5a, 0x5f, 0x53, 0xb1, 0x16, 0x48, 0xf4, 0x23, 0xec, 0xda, 0x0b, 0x15, 0xa5, 0x95,
	0x8e, 0xb2, 0x85, 0x62, 0xd9, 0x54, 0xac, 0x24, 0x1a, 0xb5, 0x16, 0xf6, 0x7d, 0x2d, 0x0a, 0x51,
	0xa2, 0x70, 0x85, 0x6f, 0x7f, 0x48, 0xf9, 0xf6, 0x8d, 0xa8, 0x39, 0x4c, 0xd4, 0xac, 0x61, 0xd8,
	0xff, 0x55, 0x80, 0xc1, 0xd0, 0xbc, 0x1f, 0x26, 0x7a, 0xa8, 0x42, 0x79, 0x30, 0x34, 0xef, 0x91,
	0x85, 0x9e, 0xa9, 0x50, 0x1a, 0x0c, 0xcd, 0xcd, 0x0d, 0xf4, 0xdd, 0xd2, 0x59, 0x54, 0x8b, 0x84,
	0x89, 0x87, 0x9d, 0x94, 0xf2, 0x7c, 0xd5, 0x11, 0xb4, 0x1f, 0x57, 0xac, 0x21, 0xe4, 0xbf, 0x2a,
	0x80, 0x31, 0xec, 0xad, 0x2f, 0xe4, 0x09, 0xd4, 0x84, 0x56, 0xc6, 0xb0, 0x97, 0x9e, 0xd9, 0x52,
	0x3e, 0x2b, 0x1f, 0x5e, 0x25, 0x1f, 0xd6, 0x9f, 0xab, 0x50, 0x36, 0x86, 0xbd, 0x8d, 0xe4, 0x3b,
	0x86, 0xb2, 0xe8, 0x26, 0xbf, 0x2c, 0x28, 0xa4, 0x93, 0x21, 0x57, 0xd1, 0x2a, 0xc1, 0x55, 0x50,
	0x58, 0xca, 0xaf, 0x90, 0xb6, 0x70, 0xa7, 0xb4, 0xc6, 0xb0, 0xf7, 0x1e, 0xa5, 0x5d, 0x8c, 0x7f,
	0x5d, 0x69, 0x53, 0xd3, 0xba, 0x53, 0xda, 0x6f, 0xa1, 0x9a, 0xf5, 0xaf, 0x06, 0x45, 0x3b, 0x9a,
	0x83, 0x18, 0xaa, 0x0c, 0xf5, 0x13, 0xa8, 0x18, 0x94, 0x39, 0x1e, 0x75, 0xdf, 0x8d, 0x7d, 0xa2,
	0x02, 0x5c, 0x60, 0xe2, 0x32, 0x7a, 0x49, 0x89, 0x8f, 0xba, 0x50, 0x25, 0x99, 0x1f, 0x91, 0x9a,
	0x3a, 0x53, 0xd2, 0x8b, 0xa6, 0x62, 0x65, 0xf1, 0xe8, 0x27, 0xa8, 0x8c, 0x52, 0xdd, 0xf9, 0xe8,
	0xe2, 0xb3, 0x33, 0xcd, 0xcc, 0x54, 0xac, 0x0c, 0xda, 0xd8, 0x03, 0xa0, 0x31, 0x21, 0xfd, 0x14,
	0xf6, 0xba, 0x18, 0xff, 0x6e, 0x4f, 0x28, 0xb6, 0x99, 0xe7, 0xa3, 0x3a, 0xe4, 0x28, 0x8e, 0x38,
	0x45, 0x33, 0x5f, 0xd0, 0xb7, 0x72, 0x14, 0xeb, 0x67, 0x50, 0xb5, 0xc8, 0xd4, 0x9b, 0x93, 0x4d,
	0x8a, 0xfe, 0x53, 0xa1, 0x12, 0xe3, 0x85, 0x1f, 0x3e, 0x85, 0x92, 0x70, 0x60, 0xec, 0xda, 0x38,
	0x46, 0x5f, 0x43, 0xde, 0xc6, 0x58, 0x6a, 0x1f, 0x9d, 0xd1, 0x49, 0x9e, 0xa6, 0x62, 0x85, 0x08,
	0xd4, 0x80, 0x9c, 0x3f, 0x95, 0x8a, 0x47, 0x33, 0xcc, 0xb0, 0x33, 0x15, 0x2b, 0xe7, 0x4f, 0x13,
	0x5a, 0x87, 0x77, 0x56, 0x2f, 0x7c, 0xcf, 0x09, 0x1e, 0x08, 0x0a, 0xec, 0x36, 0xe6, 0xc0, 0xff,
	0x0f, 0x5d, 0xe9, 0x72, 0x5f, 0x47, 0xae, 0xe4, 0x01, 0xea, 0x40, 0x71, 0x24, 0xde, 0x2a, 0x92,
	0xd9, 0xc7, 0xcb, 0x2f, 0x18, 0xfe, 0xd1, 0xd0, 0x9c, 0x11, 0x14, 0x7d, 0x03, 0x5b, 0xc4, 0x77,
	0xda, 0xa7, 0x92, 0x65, 0x2d, 0x71, 0x7b, 0x48, 0xb0, 0x40, 0xa0, 0x2f, 0x21, 0x3f, 0x62, 0x8e,
	0xbc, 0x9a, 0x2a, 0xb1, 0x81, 0x25, 0x2c, 0x5c, 0x0d, 0x41, 0x84, 0x8d, 0xe5, 0x5d, 0x54, 0x89,
	0x0f, 0xb0, 0x18, 0x44, 0xd8, 0x38, 0xbc, 0x5c, 0xe7, 0x72, 0x00, 0xda, 0x8b, 0x52, 0xd2, 0x20,
	0x69, 0x19, 0xc2, 0xcb, 0x35, 0x46, 0x1a, 0x45, 0xd8, 0xe2, 0x6f, 0x5c, 0xe3, 0x8b, 0x3f, 0x3f,
	0x77, 0x3c, 0x4c, 0x78, 0x05, 0x7f, 0xee, 0x3a, 0xde, 0xa4, 0x49, 0xbd, 0x56, 0x18, 0xb7, 0x78,
	0x62, 0xb4, 0xcd, 0xff, 0x9c, 0xbd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x2a, 0xc0, 0x98, 0x22,
	0x0b, 0x00, 0x00,
}
