// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/internal/execution (interfaces: Collateral)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCollateral is a mock of Collateral interface
type MockCollateral struct {
	ctrl     *gomock.Controller
	recorder *MockCollateralMockRecorder
}

// MockCollateralMockRecorder is the mock recorder for MockCollateral
type MockCollateralMockRecorder struct {
	mock *MockCollateral
}

// NewMockCollateral creates a new mock instance
func NewMockCollateral(ctrl *gomock.Controller) *MockCollateral {
	mock := &MockCollateral{ctrl: ctrl}
	mock.recorder = &MockCollateralMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollateral) EXPECT() *MockCollateralMockRecorder {
	return m.recorder
}

// CreateTraderAccount mocks base method
func (m *MockCollateral) CreateTraderAccount(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTraderAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTraderAccount indicates an expected call of CreateTraderAccount
func (mr *MockCollateralMockRecorder) CreateTraderAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraderAccount", reflect.TypeOf((*MockCollateral)(nil).CreateTraderAccount), arg0, arg1, arg2)
}

// Credit mocks base method
func (m *MockCollateral) Credit(arg0, arg1 string, arg2 int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Credit", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Credit indicates an expected call of Credit
func (mr *MockCollateralMockRecorder) Credit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Credit", reflect.TypeOf((*MockCollateral)(nil).Credit), arg0, arg1, arg2)
}
