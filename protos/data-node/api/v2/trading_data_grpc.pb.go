// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: data-node/api/v2/trading_data.proto

package v2

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingDataServiceClient is the client API for TradingDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingDataServiceClient interface {
	// List accounts
	//
	// Get a list of accounts matching the supplied filter, including their current balances.
	// If a given account has never had a balance, it will be absent from the list.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// Accounts subscription
	//
	// Subscribe to a stream of accounts
	ObserveAccounts(ctx context.Context, in *ObserveAccountsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveAccountsClient, error)
	// Data node information
	//
	// Get information about the data node.
	// Response contains a semver formatted version of the data node and the commit hash, from which the data node was built
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// Get order
	//
	// Get an order by its ID. An order's ID will be the SHA3-256 hash of the signature that the order was submitted with
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	// List orders
	//
	// Get a list of orders that match the given filters
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// List order versions
	//
	// Get a list of all versions of an order in the order history
	ListOrderVersions(ctx context.Context, in *ListOrderVersionsRequest, opts ...grpc.CallOption) (*ListOrderVersionsResponse, error)
	// Observe orders
	//
	// Subscribe to a stream of orders
	ObserveOrders(ctx context.Context, in *ObserveOrdersRequest, opts ...grpc.CallOption) (TradingDataService_ObserveOrdersClient, error)
	// Deprecated: Do not use.
	// Deprecated: List positions
	//
	// Get a list of positions by party's public key using cursor based pagination
	// Deprecated: use ListAllPositions instead
	ListPositions(ctx context.Context, in *ListPositionsRequest, opts ...grpc.CallOption) (*ListPositionsResponse, error)
	// List positions
	//
	// Get a list of all of a party's positions
	ListAllPositions(ctx context.Context, in *ListAllPositionsRequest, opts ...grpc.CallOption) (*ListAllPositionsResponse, error)
	// Observe positions
	//
	// Subscribe to a stream of position updates. The first messages sent through the stream will contain
	// information about current positions, followed by updates to those positions.
	ObservePositions(ctx context.Context, in *ObservePositionsRequest, opts ...grpc.CallOption) (TradingDataService_ObservePositionsClient, error)
	// List ledger entries
	//
	// Get a list of ledger entries within the given date range.
	// This query requests and sums the number of ledger entries from a given subset of accounts, specified via the 'filter' argument.
	// It returns a time series - implemented as a list of AggregateLedgerEntry structs - with a row for every time
	// the summed ledger entries of the set of specified accounts changes.
	// Each account filter must contain no more than one party ID.
	//
	// Entries can be filtered by:
	//   - the sending account (market ID, asset ID, account type)
	//   - receiving account (market ID, asset ID, account type)
	//   - sending AND receiving account
	//   - transfer type either in addition to the above filters or as a standalone option
	ListLedgerEntries(ctx context.Context, in *ListLedgerEntriesRequest, opts ...grpc.CallOption) (*ListLedgerEntriesResponse, error)
	// Export ledger entries
	//
	// Export ledger entries records ledger entries to a csv file.
	// May or may not contain a date range - if no date range is provided, list all records for all times.
	//
	// Ledger entries can be exported by:
	//   - export ledger entries for a single party for a given asset within a given time range
	//   - export ledger entries for a single party for a given asset for all times
	//
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportLedgerEntries(ctx context.Context, in *ExportLedgerEntriesRequest, opts ...grpc.CallOption) (TradingDataService_ExportLedgerEntriesClient, error)
	// List balance changes
	//
	// Get a list of the changes in account balances over a period of time.
	ListBalanceChanges(ctx context.Context, in *ListBalanceChangesRequest, opts ...grpc.CallOption) (*ListBalanceChangesResponse, error)
	// Get latest market data
	//
	// Get the latest market data for a given market
	GetLatestMarketData(ctx context.Context, in *GetLatestMarketDataRequest, opts ...grpc.CallOption) (*GetLatestMarketDataResponse, error)
	// List latest market data
	//
	// Get a list of the latest market data for every market
	ListLatestMarketData(ctx context.Context, in *ListLatestMarketDataRequest, opts ...grpc.CallOption) (*ListLatestMarketDataResponse, error)
	// Get latest market depth
	//
	// Get the latest market depth for a given market
	GetLatestMarketDepth(ctx context.Context, in *GetLatestMarketDepthRequest, opts ...grpc.CallOption) (*GetLatestMarketDepthResponse, error)
	// Observe markets depth
	//
	// Subscribe to a stream of the latest market depth for a given market
	ObserveMarketsDepth(ctx context.Context, in *ObserveMarketsDepthRequest, opts ...grpc.CallOption) (TradingDataService_ObserveMarketsDepthClient, error)
	// Observe markets depth updates
	//
	// Subscribe to a stream of updates on market depth for a given market
	ObserveMarketsDepthUpdates(ctx context.Context, in *ObserveMarketsDepthUpdatesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveMarketsDepthUpdatesClient, error)
	// Observe markets data
	//
	// Subscribe to a stream of data about a given market
	ObserveMarketsData(ctx context.Context, in *ObserveMarketsDataRequest, opts ...grpc.CallOption) (TradingDataService_ObserveMarketsDataClient, error)
	// Get market data history
	//
	// Get market data history for a market ID from between a given date range
	GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error)
	// List transfers
	//
	// Get a list of transfers between public keys. A valid value for public key can be one of:
	// - a party ID
	// - "network"
	// - "0000000000000000000000000000000000000000000000000000000000000000", the public key for the global rewards account
	ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	// Get network limits
	//
	// Get the network limits relating to asset and market creation
	GetNetworkLimits(ctx context.Context, in *GetNetworkLimitsRequest, opts ...grpc.CallOption) (*GetNetworkLimitsResponse, error)
	// List candle data
	//
	// Get a list of candle data for a given candle ID. Candle IDs can be obtained by calling list-candle-intervals
	ListCandleData(ctx context.Context, in *ListCandleDataRequest, opts ...grpc.CallOption) (*ListCandleDataResponse, error)
	// Observe candle data
	//
	// Subscribe to a stream of candle updates
	ObserveCandleData(ctx context.Context, in *ObserveCandleDataRequest, opts ...grpc.CallOption) (TradingDataService_ObserveCandleDataClient, error)
	// List candle intervals
	//
	// Get a list of all available intervals for a given market along with the corresponding candle ID
	ListCandleIntervals(ctx context.Context, in *ListCandleIntervalsRequest, opts ...grpc.CallOption) (*ListCandleIntervalsResponse, error)
	// List votes
	//
	// Get a list of votes. A party ID or a proposal ID must be provided.
	ListVotes(ctx context.Context, in *ListVotesRequest, opts ...grpc.CallOption) (*ListVotesResponse, error)
	// Observe votes
	//
	// Subscribe to a stream of votes cast on a given proposal, or by all votes made by a given party
	ObserveVotes(ctx context.Context, in *ObserveVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveVotesClient, error)
	// List ERC20 multi-sig signer added bundles
	//
	// Get a list of the signature bundles to add a particular validator to the signer list of the multisig contract
	ListERC20MultiSigSignerAddedBundles(ctx context.Context, in *ListERC20MultiSigSignerAddedBundlesRequest, opts ...grpc.CallOption) (*ListERC20MultiSigSignerAddedBundlesResponse, error)
	// List ERC20 multi-sig signer removed bundles
	//
	// Get a list of the signature bundles to remove a particular validator from signer list of the multisig contract
	ListERC20MultiSigSignerRemovedBundles(ctx context.Context, in *ListERC20MultiSigSignerRemovedBundlesRequest, opts ...grpc.CallOption) (*ListERC20MultiSigSignerRemovedBundlesResponse, error)
	// Get ERC20 list asset bundle
	//
	// Get the signatures bundle to allowlist an ERC20 token in the collateral bridge
	GetERC20ListAssetBundle(ctx context.Context, in *GetERC20ListAssetBundleRequest, opts ...grpc.CallOption) (*GetERC20ListAssetBundleResponse, error)
	// Get ERC20 set asset limits bundle
	//
	// Get the signature bundle to update the token limits. These are `maxLifetimeDeposit` and `withdrawThreshold` for a given ERC20 token that is
	// already allowlisted in the collateral bridge.
	GetERC20SetAssetLimitsBundle(ctx context.Context, in *GetERC20SetAssetLimitsBundleRequest, opts ...grpc.CallOption) (*GetERC20SetAssetLimitsBundleResponse, error)
	// Get ERC20 withdrawal approval
	//
	// Get the signature bundle to finalise a withdrawal on Ethereum
	GetERC20WithdrawalApproval(ctx context.Context, in *GetERC20WithdrawalApprovalRequest, opts ...grpc.CallOption) (*GetERC20WithdrawalApprovalResponse, error)
	// Get last trade
	//
	// Get the last trade made for a given market.
	GetLastTrade(ctx context.Context, in *GetLastTradeRequest, opts ...grpc.CallOption) (*GetLastTradeResponse, error)
	// List trades
	//
	// Get a list of all trades, optionally filtered by party/market/order
	ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error)
	// Observe trades
	//
	// Subscribe to a stream of trades, optionally filtered by party/market
	ObserveTrades(ctx context.Context, in *ObserveTradesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveTradesClient, error)
	// Get oracle spec
	//
	// Get an oracle spec by ID. Oracle spec IDs can be found by querying markets that use them as a data source
	GetOracleSpec(ctx context.Context, in *GetOracleSpecRequest, opts ...grpc.CallOption) (*GetOracleSpecResponse, error)
	// List oracle specs
	//
	// Get a list of all oracles specs that are defined against all markets
	ListOracleSpecs(ctx context.Context, in *ListOracleSpecsRequest, opts ...grpc.CallOption) (*ListOracleSpecsResponse, error)
	// List oracle data
	//
	// Get a list of all oracle data that have been broadcast to any market
	ListOracleData(ctx context.Context, in *ListOracleDataRequest, opts ...grpc.CallOption) (*ListOracleDataResponse, error)
	// Get market
	//
	// Get information about a specific market using its ID. A market's ID will be the same as the ID of the proposal that
	// generated it
	GetMarket(ctx context.Context, in *GetMarketRequest, opts ...grpc.CallOption) (*GetMarketResponse, error)
	// List markets
	//
	// Get a list of markets
	ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error)
	// List successor markets
	//
	// Given a market id, return the full lineage of markets since inception, or all successor markets since and including
	// the given market id.
	ListSuccessorMarkets(ctx context.Context, in *ListSuccessorMarketsRequest, opts ...grpc.CallOption) (*ListSuccessorMarketsResponse, error)
	// Get party
	//
	// Get a single party
	GetParty(ctx context.Context, in *GetPartyRequest, opts ...grpc.CallOption) (*GetPartyResponse, error)
	// List parties
	//
	// Get a list of parties
	ListParties(ctx context.Context, in *ListPartiesRequest, opts ...grpc.CallOption) (*ListPartiesResponse, error)
	// List margin levels
	//
	// Get a list margin levels that match the provided criteria. If no filter is provided, all margin levels will be returned.
	ListMarginLevels(ctx context.Context, in *ListMarginLevelsRequest, opts ...grpc.CallOption) (*ListMarginLevelsResponse, error)
	// Observe margin levels
	//
	// Subscribe to a stream of margin levels updates
	ObserveMarginLevels(ctx context.Context, in *ObserveMarginLevelsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveMarginLevelsClient, error)
	// List rewards
	//
	// Get a list of rewards that match the provided criteria. If no filter is provided, all rewards will be returned.
	ListRewards(ctx context.Context, in *ListRewardsRequest, opts ...grpc.CallOption) (*ListRewardsResponse, error)
	// List reward summaries
	//
	// Get a list of reward summaries where the reward amount is the total rewards received over all epochs
	// per party ID and asset ID.
	// Request parameters are optional party ID and asset ID.
	// If no data is provided, all reward summaries will be returned grouped by party and asset ID.
	ListRewardSummaries(ctx context.Context, in *ListRewardSummariesRequest, opts ...grpc.CallOption) (*ListRewardSummariesResponse, error)
	// List epoch reward summaries
	//
	// Get a list of reward summaries by epoch for a given range of epochs.
	// The result is filtered by list of asset IDs, market IDs and starting and ending epochs, for which to return rewards.
	// If no data is provided, all reward summaries will be returned, grouped by epochs, market IDs, asset IDs and reward type.
	ListEpochRewardSummaries(ctx context.Context, in *ListEpochRewardSummariesRequest, opts ...grpc.CallOption) (*ListEpochRewardSummariesResponse, error)
	// Get deposit
	//
	// Get a deposit by its ID
	GetDeposit(ctx context.Context, in *GetDepositRequest, opts ...grpc.CallOption) (*GetDepositResponse, error)
	// List deposits
	//
	// Get a list of deposits for a given party.
	// If a date range is provided, filtering will be based on the last time the deposit
	// has been updated in Vega time.
	ListDeposits(ctx context.Context, in *ListDepositsRequest, opts ...grpc.CallOption) (*ListDepositsResponse, error)
	// Get withdrawal
	//
	// Get a withdrawal by its ID. A withdrawal's ID will be the SHA3-256 hash of the signature that the withdrawal was submitted with
	GetWithdrawal(ctx context.Context, in *GetWithdrawalRequest, opts ...grpc.CallOption) (*GetWithdrawalResponse, error)
	// List withdrawals
	//
	// Get a list of withdrawals for a given party
	ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error)
	// Get asset
	//
	// Get a single asset using its ID. Use the assets list query to get an asset's ID
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error)
	// List assets
	//
	// Get a list of assets available on the Vega network
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	// List liquidity provisions
	//
	// Get a list of liquidity provisions for a given market
	ListLiquidityProvisions(ctx context.Context, in *ListLiquidityProvisionsRequest, opts ...grpc.CallOption) (*ListLiquidityProvisionsResponse, error)
	// Observe liquidity provisions
	//
	// Subscribe to a stream of liquidity provision events for a given market and party
	ObserveLiquidityProvisions(ctx context.Context, in *ObserveLiquidityProvisionsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveLiquidityProvisionsClient, error)
	// Get governance data
	//
	// Get a single proposal's details either by proposal ID or by reference
	GetGovernanceData(ctx context.Context, in *GetGovernanceDataRequest, opts ...grpc.CallOption) (*GetGovernanceDataResponse, error)
	// List governance data
	//
	// Get a list of proposals
	ListGovernanceData(ctx context.Context, in *ListGovernanceDataRequest, opts ...grpc.CallOption) (*ListGovernanceDataResponse, error)
	// Observe governance
	//
	// Subscribe to a stream of updates to governance proposals
	ObserveGovernance(ctx context.Context, in *ObserveGovernanceRequest, opts ...grpc.CallOption) (TradingDataService_ObserveGovernanceClient, error)
	// List delegations
	//
	// Get a list of the token delegations on the network
	ListDelegations(ctx context.Context, in *ListDelegationsRequest, opts ...grpc.CallOption) (*ListDelegationsResponse, error)
	// Get network data
	//
	// Get data regarding the nodes of the network
	GetNetworkData(ctx context.Context, in *GetNetworkDataRequest, opts ...grpc.CallOption) (*GetNetworkDataResponse, error)
	// Get node
	//
	// Get information about a given node
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// List nodes
	//
	// Get a list of the nodes on the network along with the related information.
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	// List node signatures
	//
	// Get a list of aggregate signatures from all the nodes of the network
	ListNodeSignatures(ctx context.Context, in *ListNodeSignaturesRequest, opts ...grpc.CallOption) (*ListNodeSignaturesResponse, error)
	// Get epoch
	//
	// Get data for a specific epoch, if ID is omitted, it retrieves the current epoch
	GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*GetEpochResponse, error)
	// Estimate fee
	//
	// Estimate the fee that would be incurred for submitting an order
	// with the specified price and size on the market.
	EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error)
	// Estimate margin
	//
	// Estimate the margin that would be required for submitting this order
	EstimateMargin(ctx context.Context, in *EstimateMarginRequest, opts ...grpc.CallOption) (*EstimateMarginResponse, error)
	// Estimate position
	//
	// Estimate the margin that would be required for maintaining the specified position.
	// If the optional collateral available argument is supplied, the response also contains the estimate of the liquidation price.
	EstimatePosition(ctx context.Context, in *EstimatePositionRequest, opts ...grpc.CallOption) (*EstimatePositionResponse, error)
	// List network parameters
	//
	// Get a list of the network parameter keys and their values
	ListNetworkParameters(ctx context.Context, in *ListNetworkParametersRequest, opts ...grpc.CallOption) (*ListNetworkParametersResponse, error)
	// Get network parameter
	//
	// Get a network parameter's value by its key
	GetNetworkParameter(ctx context.Context, in *GetNetworkParameterRequest, opts ...grpc.CallOption) (*GetNetworkParameterResponse, error)
	// List checkpoints
	//
	// Get a list of information about checkpoints generated by the network
	ListCheckpoints(ctx context.Context, in *ListCheckpointsRequest, opts ...grpc.CallOption) (*ListCheckpointsResponse, error)
	// Get stake
	//
	// Get staking information for a given party
	GetStake(ctx context.Context, in *GetStakeRequest, opts ...grpc.CallOption) (*GetStakeResponse, error)
	// Get risk factors
	//
	// Get risk factor data for a given market
	GetRiskFactors(ctx context.Context, in *GetRiskFactorsRequest, opts ...grpc.CallOption) (*GetRiskFactorsResponse, error)
	// Observe event bus
	//
	// Subscribe to a stream of events from the core
	ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingDataService_ObserveEventBusClient, error)
	// Observe ledger movements
	//
	// Subscribe to a stream of transfer responses
	ObserveLedgerMovements(ctx context.Context, in *ObserveLedgerMovementsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveLedgerMovementsClient, error)
	// List key rotations
	//
	// Get a list of information about Vega key rotations that have been performed by validator nodes
	ListKeyRotations(ctx context.Context, in *ListKeyRotationsRequest, opts ...grpc.CallOption) (*ListKeyRotationsResponse, error)
	// List Ethereum key rotations
	//
	// Get a list of information about Ethereum key rotations that have been performed by validator nodes
	ListEthereumKeyRotations(ctx context.Context, in *ListEthereumKeyRotationsRequest, opts ...grpc.CallOption) (*ListEthereumKeyRotationsResponse, error)
	// Get Vega time
	//
	// Get the current time of the network in Unix nanoseconds
	GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error)
	// Get protocol upgrade status
	//
	// Get status of a protocol upgrade
	GetProtocolUpgradeStatus(ctx context.Context, in *GetProtocolUpgradeStatusRequest, opts ...grpc.CallOption) (*GetProtocolUpgradeStatusResponse, error)
	// List protocol upgrade proposals
	//
	// Get a list of protocol upgrade proposals, optionally filtering on status or approver.
	ListProtocolUpgradeProposals(ctx context.Context, in *ListProtocolUpgradeProposalsRequest, opts ...grpc.CallOption) (*ListProtocolUpgradeProposalsResponse, error)
	// List snapshots
	//
	// Get a list of core snapshots taken
	ListCoreSnapshots(ctx context.Context, in *ListCoreSnapshotsRequest, opts ...grpc.CallOption) (*ListCoreSnapshotsResponse, error)
	// Get most recent network history segment
	//
	// Get the network's most recently history segment
	GetMostRecentNetworkHistorySegment(ctx context.Context, in *GetMostRecentNetworkHistorySegmentRequest, opts ...grpc.CallOption) (*GetMostRecentNetworkHistorySegmentResponse, error)
	// List all network history segments
	//
	// Get a list of all history segments stored by the data node currently connected to
	ListAllNetworkHistorySegments(ctx context.Context, in *ListAllNetworkHistorySegmentsRequest, opts ...grpc.CallOption) (*ListAllNetworkHistorySegmentsResponse, error)
	// Get active network history peer addresses
	//
	// Get a list of the addresses of all active network history peers
	GetActiveNetworkHistoryPeerAddresses(ctx context.Context, in *GetActiveNetworkHistoryPeerAddressesRequest, opts ...grpc.CallOption) (*GetActiveNetworkHistoryPeerAddressesResponse, error)
	// Network history status
	//
	// Get information about the current state of network history's IPFS swarm
	GetNetworkHistoryStatus(ctx context.Context, in *GetNetworkHistoryStatusRequest, opts ...grpc.CallOption) (*GetNetworkHistoryStatusResponse, error)
	// Network history bootstrap peers
	//
	// Get a list of IPFS peers that can be used to initialise a new data node with network history
	GetNetworkHistoryBootstrapPeers(ctx context.Context, in *GetNetworkHistoryBootstrapPeersRequest, opts ...grpc.CallOption) (*GetNetworkHistoryBootstrapPeersResponse, error)
	// List entities
	//
	// Get a list of all entities created by transaction hash
	ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error)
	// Export network history as CSV
	//
	// Export CSV table data from network history between two block heights.
	//
	// The requested block heights must fall on network history segment boundaries, which can
	// be discovered by calling the API to list all network history segments. By default
	// segments contain 1000 blocks. In that case ranges such as (1, 1000), (1001, 2000), (1, 3000)
	// would all fall on segment boundaries and be valid.
	//
	// The generated CSV file is compressed into a ZIP file and returned, with the file name
	// in the following format: `[chain id]-[table name]-[start block]-[end block].zip`
	//
	// In gRPC, results are returned in a chunked stream of base64 encoded data.
	//
	// Through the REST gateway, the base64 data chunks are decoded and streamed as a
	// `content-type: application/zip` HTTP response.
	//
	// The CSV exported data uses a comma as a DELIMITER between fields, and " for QUOTE-ing fields.
	//
	// If a value contains any of: DELIMITER, QUOTE, carriage return, or line feed then the whole
	// value is prefixed and suffixed by the QUOTE character and any occurrence within
	// the value of a QUOTE character preceded by another QUOTE.
	//
	// A NULL is output as the NULL parameter string and is not quoted, while a non-NULL value
	// matching the NULL parameter string is quoted.
	//
	// For example, with the default settings, a NULL is written as an unquoted empty string,
	// while an empty string data value is written with double quotes.
	//
	// Note that CSV files produced may contain quoted values containing embedded carriage returns and line feeds.
	// Thus the files are not strictly one line per table row like text-format files.
	//
	// The first row of the CSV file is a header that describes the contents of each column
	// in subsequent rows.
	//
	// Usually the ZIP file will contain only a single CSV file. However it is possible that
	// the (from_block, to_block) request spans over a range of blocks in which the underlying
	// schema of the database changes. For example, a column may have been added, removed, or renamed.
	//
	// If this happens, the CSV file will be split at the point of the schema change and the zip
	// file will contain multiple CSV files, with a potentially different set of headers. The
	// 'version' number of the database schema is part of the in the CSV filename:
	//
	//	`[chain id]-[table name]-[schema version]-[start block]-[end block].zip`
	//
	// # For example, a zip file might be called mainnet-sometable-000001-003000.zip
	//
	// And contain two CSV files: `mainnet-sometable-1-000001-002000.csv`:
	//
	// timestamp, value
	// 1, foo
	// 2, bar
	//
	// And `mainnet-sometable-2-002001-003000.csv`:
	//
	// timestamp, value, extra_value
	// 3, baz, apple
	//
	// It is worth noting that the schema will not change within a single network history segment.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportNetworkHistory(ctx context.Context, in *ExportNetworkHistoryRequest, opts ...grpc.CallOption) (TradingDataService_ExportNetworkHistoryClient, error)
	// Ping
	//
	// Ping the data node
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type tradingDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingDataServiceClient(cc grpc.ClientConnInterface) TradingDataServiceClient {
	return &tradingDataServiceClient{cc}
}

func (c *tradingDataServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveAccounts(ctx context.Context, in *ObserveAccountsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[0], "/datanode.api.v2.TradingDataService/ObserveAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveAccountsClient interface {
	Recv() (*ObserveAccountsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveAccountsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveAccountsClient) Recv() (*ObserveAccountsResponse, error) {
	m := new(ObserveAccountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOrderVersions(ctx context.Context, in *ListOrderVersionsRequest, opts ...grpc.CallOption) (*ListOrderVersionsResponse, error) {
	out := new(ListOrderVersionsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOrderVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveOrders(ctx context.Context, in *ObserveOrdersRequest, opts ...grpc.CallOption) (TradingDataService_ObserveOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[1], "/datanode.api.v2.TradingDataService/ObserveOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveOrdersClient interface {
	Recv() (*ObserveOrdersResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveOrdersClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveOrdersClient) Recv() (*ObserveOrdersResponse, error) {
	m := new(ObserveOrdersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *tradingDataServiceClient) ListPositions(ctx context.Context, in *ListPositionsRequest, opts ...grpc.CallOption) (*ListPositionsResponse, error) {
	out := new(ListPositionsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListAllPositions(ctx context.Context, in *ListAllPositionsRequest, opts ...grpc.CallOption) (*ListAllPositionsResponse, error) {
	out := new(ListAllPositionsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListAllPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObservePositions(ctx context.Context, in *ObservePositionsRequest, opts ...grpc.CallOption) (TradingDataService_ObservePositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[2], "/datanode.api.v2.TradingDataService/ObservePositions", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObservePositionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObservePositionsClient interface {
	Recv() (*ObservePositionsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObservePositionsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObservePositionsClient) Recv() (*ObservePositionsResponse, error) {
	m := new(ObservePositionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ListLedgerEntries(ctx context.Context, in *ListLedgerEntriesRequest, opts ...grpc.CallOption) (*ListLedgerEntriesResponse, error) {
	out := new(ListLedgerEntriesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListLedgerEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ExportLedgerEntries(ctx context.Context, in *ExportLedgerEntriesRequest, opts ...grpc.CallOption) (TradingDataService_ExportLedgerEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[3], "/datanode.api.v2.TradingDataService/ExportLedgerEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceExportLedgerEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ExportLedgerEntriesClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type tradingDataServiceExportLedgerEntriesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceExportLedgerEntriesClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ListBalanceChanges(ctx context.Context, in *ListBalanceChangesRequest, opts ...grpc.CallOption) (*ListBalanceChangesResponse, error) {
	out := new(ListBalanceChangesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListBalanceChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetLatestMarketData(ctx context.Context, in *GetLatestMarketDataRequest, opts ...grpc.CallOption) (*GetLatestMarketDataResponse, error) {
	out := new(GetLatestMarketDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetLatestMarketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListLatestMarketData(ctx context.Context, in *ListLatestMarketDataRequest, opts ...grpc.CallOption) (*ListLatestMarketDataResponse, error) {
	out := new(ListLatestMarketDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListLatestMarketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetLatestMarketDepth(ctx context.Context, in *GetLatestMarketDepthRequest, opts ...grpc.CallOption) (*GetLatestMarketDepthResponse, error) {
	out := new(GetLatestMarketDepthResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetLatestMarketDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveMarketsDepth(ctx context.Context, in *ObserveMarketsDepthRequest, opts ...grpc.CallOption) (TradingDataService_ObserveMarketsDepthClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[4], "/datanode.api.v2.TradingDataService/ObserveMarketsDepth", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveMarketsDepthClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveMarketsDepthClient interface {
	Recv() (*ObserveMarketsDepthResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveMarketsDepthClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveMarketsDepthClient) Recv() (*ObserveMarketsDepthResponse, error) {
	m := new(ObserveMarketsDepthResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObserveMarketsDepthUpdates(ctx context.Context, in *ObserveMarketsDepthUpdatesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveMarketsDepthUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[5], "/datanode.api.v2.TradingDataService/ObserveMarketsDepthUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveMarketsDepthUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveMarketsDepthUpdatesClient interface {
	Recv() (*ObserveMarketsDepthUpdatesResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveMarketsDepthUpdatesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveMarketsDepthUpdatesClient) Recv() (*ObserveMarketsDepthUpdatesResponse, error) {
	m := new(ObserveMarketsDepthUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObserveMarketsData(ctx context.Context, in *ObserveMarketsDataRequest, opts ...grpc.CallOption) (TradingDataService_ObserveMarketsDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[6], "/datanode.api.v2.TradingDataService/ObserveMarketsData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveMarketsDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveMarketsDataClient interface {
	Recv() (*ObserveMarketsDataResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveMarketsDataClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveMarketsDataClient) Recv() (*ObserveMarketsDataResponse, error) {
	m := new(ObserveMarketsDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error) {
	out := new(GetMarketDataHistoryByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkLimits(ctx context.Context, in *GetNetworkLimitsRequest, opts ...grpc.CallOption) (*GetNetworkLimitsResponse, error) {
	out := new(GetNetworkLimitsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNetworkLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListCandleData(ctx context.Context, in *ListCandleDataRequest, opts ...grpc.CallOption) (*ListCandleDataResponse, error) {
	out := new(ListCandleDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListCandleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveCandleData(ctx context.Context, in *ObserveCandleDataRequest, opts ...grpc.CallOption) (TradingDataService_ObserveCandleDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[7], "/datanode.api.v2.TradingDataService/ObserveCandleData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveCandleDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveCandleDataClient interface {
	Recv() (*ObserveCandleDataResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveCandleDataClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveCandleDataClient) Recv() (*ObserveCandleDataResponse, error) {
	m := new(ObserveCandleDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ListCandleIntervals(ctx context.Context, in *ListCandleIntervalsRequest, opts ...grpc.CallOption) (*ListCandleIntervalsResponse, error) {
	out := new(ListCandleIntervalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListCandleIntervals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListVotes(ctx context.Context, in *ListVotesRequest, opts ...grpc.CallOption) (*ListVotesResponse, error) {
	out := new(ListVotesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveVotes(ctx context.Context, in *ObserveVotesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveVotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[8], "/datanode.api.v2.TradingDataService/ObserveVotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveVotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveVotesClient interface {
	Recv() (*ObserveVotesResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveVotesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveVotesClient) Recv() (*ObserveVotesResponse, error) {
	m := new(ObserveVotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ListERC20MultiSigSignerAddedBundles(ctx context.Context, in *ListERC20MultiSigSignerAddedBundlesRequest, opts ...grpc.CallOption) (*ListERC20MultiSigSignerAddedBundlesResponse, error) {
	out := new(ListERC20MultiSigSignerAddedBundlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListERC20MultiSigSignerAddedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListERC20MultiSigSignerRemovedBundles(ctx context.Context, in *ListERC20MultiSigSignerRemovedBundlesRequest, opts ...grpc.CallOption) (*ListERC20MultiSigSignerRemovedBundlesResponse, error) {
	out := new(ListERC20MultiSigSignerRemovedBundlesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListERC20MultiSigSignerRemovedBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20ListAssetBundle(ctx context.Context, in *GetERC20ListAssetBundleRequest, opts ...grpc.CallOption) (*GetERC20ListAssetBundleResponse, error) {
	out := new(GetERC20ListAssetBundleResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20ListAssetBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20SetAssetLimitsBundle(ctx context.Context, in *GetERC20SetAssetLimitsBundleRequest, opts ...grpc.CallOption) (*GetERC20SetAssetLimitsBundleResponse, error) {
	out := new(GetERC20SetAssetLimitsBundleResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20SetAssetLimitsBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetERC20WithdrawalApproval(ctx context.Context, in *GetERC20WithdrawalApprovalRequest, opts ...grpc.CallOption) (*GetERC20WithdrawalApprovalResponse, error) {
	out := new(GetERC20WithdrawalApprovalResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetERC20WithdrawalApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetLastTrade(ctx context.Context, in *GetLastTradeRequest, opts ...grpc.CallOption) (*GetLastTradeResponse, error) {
	out := new(GetLastTradeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetLastTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListTrades(ctx context.Context, in *ListTradesRequest, opts ...grpc.CallOption) (*ListTradesResponse, error) {
	out := new(ListTradesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveTrades(ctx context.Context, in *ObserveTradesRequest, opts ...grpc.CallOption) (TradingDataService_ObserveTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[9], "/datanode.api.v2.TradingDataService/ObserveTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveTradesClient interface {
	Recv() (*ObserveTradesResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveTradesClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveTradesClient) Recv() (*ObserveTradesResponse, error) {
	m := new(ObserveTradesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetOracleSpec(ctx context.Context, in *GetOracleSpecRequest, opts ...grpc.CallOption) (*GetOracleSpecResponse, error) {
	out := new(GetOracleSpecResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetOracleSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOracleSpecs(ctx context.Context, in *ListOracleSpecsRequest, opts ...grpc.CallOption) (*ListOracleSpecsResponse, error) {
	out := new(ListOracleSpecsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOracleSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListOracleData(ctx context.Context, in *ListOracleDataRequest, opts ...grpc.CallOption) (*ListOracleDataResponse, error) {
	out := new(ListOracleDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListOracleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarket(ctx context.Context, in *GetMarketRequest, opts ...grpc.CallOption) (*GetMarketResponse, error) {
	out := new(GetMarketResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error) {
	out := new(ListMarketsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListSuccessorMarkets(ctx context.Context, in *ListSuccessorMarketsRequest, opts ...grpc.CallOption) (*ListSuccessorMarketsResponse, error) {
	out := new(ListSuccessorMarketsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListSuccessorMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetParty(ctx context.Context, in *GetPartyRequest, opts ...grpc.CallOption) (*GetPartyResponse, error) {
	out := new(GetPartyResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListParties(ctx context.Context, in *ListPartiesRequest, opts ...grpc.CallOption) (*ListPartiesResponse, error) {
	out := new(ListPartiesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListParties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListMarginLevels(ctx context.Context, in *ListMarginLevelsRequest, opts ...grpc.CallOption) (*ListMarginLevelsResponse, error) {
	out := new(ListMarginLevelsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListMarginLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveMarginLevels(ctx context.Context, in *ObserveMarginLevelsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveMarginLevelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[10], "/datanode.api.v2.TradingDataService/ObserveMarginLevels", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveMarginLevelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveMarginLevelsClient interface {
	Recv() (*ObserveMarginLevelsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveMarginLevelsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveMarginLevelsClient) Recv() (*ObserveMarginLevelsResponse, error) {
	m := new(ObserveMarginLevelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ListRewards(ctx context.Context, in *ListRewardsRequest, opts ...grpc.CallOption) (*ListRewardsResponse, error) {
	out := new(ListRewardsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListRewardSummaries(ctx context.Context, in *ListRewardSummariesRequest, opts ...grpc.CallOption) (*ListRewardSummariesResponse, error) {
	out := new(ListRewardSummariesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListRewardSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListEpochRewardSummaries(ctx context.Context, in *ListEpochRewardSummariesRequest, opts ...grpc.CallOption) (*ListEpochRewardSummariesResponse, error) {
	out := new(ListEpochRewardSummariesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListEpochRewardSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetDeposit(ctx context.Context, in *GetDepositRequest, opts ...grpc.CallOption) (*GetDepositResponse, error) {
	out := new(GetDepositResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListDeposits(ctx context.Context, in *ListDepositsRequest, opts ...grpc.CallOption) (*ListDepositsResponse, error) {
	out := new(ListDepositsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetWithdrawal(ctx context.Context, in *GetWithdrawalRequest, opts ...grpc.CallOption) (*GetWithdrawalResponse, error) {
	out := new(GetWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListWithdrawals(ctx context.Context, in *ListWithdrawalsRequest, opts ...grpc.CallOption) (*ListWithdrawalsResponse, error) {
	out := new(ListWithdrawalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListWithdrawals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error) {
	out := new(GetAssetResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListLiquidityProvisions(ctx context.Context, in *ListLiquidityProvisionsRequest, opts ...grpc.CallOption) (*ListLiquidityProvisionsResponse, error) {
	out := new(ListLiquidityProvisionsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListLiquidityProvisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveLiquidityProvisions(ctx context.Context, in *ObserveLiquidityProvisionsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveLiquidityProvisionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[11], "/datanode.api.v2.TradingDataService/ObserveLiquidityProvisions", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveLiquidityProvisionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveLiquidityProvisionsClient interface {
	Recv() (*ObserveLiquidityProvisionsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveLiquidityProvisionsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveLiquidityProvisionsClient) Recv() (*ObserveLiquidityProvisionsResponse, error) {
	m := new(ObserveLiquidityProvisionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) GetGovernanceData(ctx context.Context, in *GetGovernanceDataRequest, opts ...grpc.CallOption) (*GetGovernanceDataResponse, error) {
	out := new(GetGovernanceDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetGovernanceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListGovernanceData(ctx context.Context, in *ListGovernanceDataRequest, opts ...grpc.CallOption) (*ListGovernanceDataResponse, error) {
	out := new(ListGovernanceDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListGovernanceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveGovernance(ctx context.Context, in *ObserveGovernanceRequest, opts ...grpc.CallOption) (TradingDataService_ObserveGovernanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[12], "/datanode.api.v2.TradingDataService/ObserveGovernance", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveGovernanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveGovernanceClient interface {
	Recv() (*ObserveGovernanceResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveGovernanceClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveGovernanceClient) Recv() (*ObserveGovernanceResponse, error) {
	m := new(ObserveGovernanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ListDelegations(ctx context.Context, in *ListDelegationsRequest, opts ...grpc.CallOption) (*ListDelegationsResponse, error) {
	out := new(ListDelegationsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkData(ctx context.Context, in *GetNetworkDataRequest, opts ...grpc.CallOption) (*GetNetworkDataResponse, error) {
	out := new(GetNetworkDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNetworkData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListNodeSignatures(ctx context.Context, in *ListNodeSignaturesRequest, opts ...grpc.CallOption) (*ListNodeSignaturesResponse, error) {
	out := new(ListNodeSignaturesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListNodeSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetEpoch(ctx context.Context, in *GetEpochRequest, opts ...grpc.CallOption) (*GetEpochResponse, error) {
	out := new(GetEpochResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) EstimateFee(ctx context.Context, in *EstimateFeeRequest, opts ...grpc.CallOption) (*EstimateFeeResponse, error) {
	out := new(EstimateFeeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/EstimateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) EstimateMargin(ctx context.Context, in *EstimateMarginRequest, opts ...grpc.CallOption) (*EstimateMarginResponse, error) {
	out := new(EstimateMarginResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/EstimateMargin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) EstimatePosition(ctx context.Context, in *EstimatePositionRequest, opts ...grpc.CallOption) (*EstimatePositionResponse, error) {
	out := new(EstimatePositionResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/EstimatePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListNetworkParameters(ctx context.Context, in *ListNetworkParametersRequest, opts ...grpc.CallOption) (*ListNetworkParametersResponse, error) {
	out := new(ListNetworkParametersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListNetworkParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkParameter(ctx context.Context, in *GetNetworkParameterRequest, opts ...grpc.CallOption) (*GetNetworkParameterResponse, error) {
	out := new(GetNetworkParameterResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNetworkParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListCheckpoints(ctx context.Context, in *ListCheckpointsRequest, opts ...grpc.CallOption) (*ListCheckpointsResponse, error) {
	out := new(ListCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetStake(ctx context.Context, in *GetStakeRequest, opts ...grpc.CallOption) (*GetStakeResponse, error) {
	out := new(GetStakeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetRiskFactors(ctx context.Context, in *GetRiskFactorsRequest, opts ...grpc.CallOption) (*GetRiskFactorsResponse, error) {
	out := new(GetRiskFactorsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetRiskFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (TradingDataService_ObserveEventBusClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[13], "/datanode.api.v2.TradingDataService/ObserveEventBus", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveEventBusClient{stream}
	return x, nil
}

type TradingDataService_ObserveEventBusClient interface {
	Send(*ObserveEventBusRequest) error
	Recv() (*ObserveEventBusResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveEventBusClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveEventBusClient) Send(m *ObserveEventBusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradingDataServiceObserveEventBusClient) Recv() (*ObserveEventBusResponse, error) {
	m := new(ObserveEventBusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ObserveLedgerMovements(ctx context.Context, in *ObserveLedgerMovementsRequest, opts ...grpc.CallOption) (TradingDataService_ObserveLedgerMovementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[14], "/datanode.api.v2.TradingDataService/ObserveLedgerMovements", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceObserveLedgerMovementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ObserveLedgerMovementsClient interface {
	Recv() (*ObserveLedgerMovementsResponse, error)
	grpc.ClientStream
}

type tradingDataServiceObserveLedgerMovementsClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceObserveLedgerMovementsClient) Recv() (*ObserveLedgerMovementsResponse, error) {
	m := new(ObserveLedgerMovementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) ListKeyRotations(ctx context.Context, in *ListKeyRotationsRequest, opts ...grpc.CallOption) (*ListKeyRotationsResponse, error) {
	out := new(ListKeyRotationsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListKeyRotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListEthereumKeyRotations(ctx context.Context, in *ListEthereumKeyRotationsRequest, opts ...grpc.CallOption) (*ListEthereumKeyRotationsResponse, error) {
	out := new(ListEthereumKeyRotationsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListEthereumKeyRotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error) {
	out := new(GetVegaTimeResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetVegaTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetProtocolUpgradeStatus(ctx context.Context, in *GetProtocolUpgradeStatusRequest, opts ...grpc.CallOption) (*GetProtocolUpgradeStatusResponse, error) {
	out := new(GetProtocolUpgradeStatusResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetProtocolUpgradeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListProtocolUpgradeProposals(ctx context.Context, in *ListProtocolUpgradeProposalsRequest, opts ...grpc.CallOption) (*ListProtocolUpgradeProposalsResponse, error) {
	out := new(ListProtocolUpgradeProposalsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListProtocolUpgradeProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListCoreSnapshots(ctx context.Context, in *ListCoreSnapshotsRequest, opts ...grpc.CallOption) (*ListCoreSnapshotsResponse, error) {
	out := new(ListCoreSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListCoreSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMostRecentNetworkHistorySegment(ctx context.Context, in *GetMostRecentNetworkHistorySegmentRequest, opts ...grpc.CallOption) (*GetMostRecentNetworkHistorySegmentResponse, error) {
	out := new(GetMostRecentNetworkHistorySegmentResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMostRecentNetworkHistorySegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListAllNetworkHistorySegments(ctx context.Context, in *ListAllNetworkHistorySegmentsRequest, opts ...grpc.CallOption) (*ListAllNetworkHistorySegmentsResponse, error) {
	out := new(ListAllNetworkHistorySegmentsResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListAllNetworkHistorySegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetActiveNetworkHistoryPeerAddresses(ctx context.Context, in *GetActiveNetworkHistoryPeerAddressesRequest, opts ...grpc.CallOption) (*GetActiveNetworkHistoryPeerAddressesResponse, error) {
	out := new(GetActiveNetworkHistoryPeerAddressesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetActiveNetworkHistoryPeerAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkHistoryStatus(ctx context.Context, in *GetNetworkHistoryStatusRequest, opts ...grpc.CallOption) (*GetNetworkHistoryStatusResponse, error) {
	out := new(GetNetworkHistoryStatusResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNetworkHistoryStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetNetworkHistoryBootstrapPeers(ctx context.Context, in *GetNetworkHistoryBootstrapPeersRequest, opts ...grpc.CallOption) (*GetNetworkHistoryBootstrapPeersResponse, error) {
	out := new(GetNetworkHistoryBootstrapPeersResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetNetworkHistoryBootstrapPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ListEntities(ctx context.Context, in *ListEntitiesRequest, opts ...grpc.CallOption) (*ListEntitiesResponse, error) {
	out := new(ListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/ListEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) ExportNetworkHistory(ctx context.Context, in *ExportNetworkHistoryRequest, opts ...grpc.CallOption) (TradingDataService_ExportNetworkHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradingDataService_ServiceDesc.Streams[15], "/datanode.api.v2.TradingDataService/ExportNetworkHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradingDataServiceExportNetworkHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TradingDataService_ExportNetworkHistoryClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type tradingDataServiceExportNetworkHistoryClient struct {
	grpc.ClientStream
}

func (x *tradingDataServiceExportNetworkHistoryClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tradingDataServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServiceServer is the server API for TradingDataService service.
// All implementations must embed UnimplementedTradingDataServiceServer
// for forward compatibility
type TradingDataServiceServer interface {
	// List accounts
	//
	// Get a list of accounts matching the supplied filter, including their current balances.
	// If a given account has never had a balance, it will be absent from the list.
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// Accounts subscription
	//
	// Subscribe to a stream of accounts
	ObserveAccounts(*ObserveAccountsRequest, TradingDataService_ObserveAccountsServer) error
	// Data node information
	//
	// Get information about the data node.
	// Response contains a semver formatted version of the data node and the commit hash, from which the data node was built
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	// Get order
	//
	// Get an order by its ID. An order's ID will be the SHA3-256 hash of the signature that the order was submitted with
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	// List orders
	//
	// Get a list of orders that match the given filters
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// List order versions
	//
	// Get a list of all versions of an order in the order history
	ListOrderVersions(context.Context, *ListOrderVersionsRequest) (*ListOrderVersionsResponse, error)
	// Observe orders
	//
	// Subscribe to a stream of orders
	ObserveOrders(*ObserveOrdersRequest, TradingDataService_ObserveOrdersServer) error
	// Deprecated: Do not use.
	// Deprecated: List positions
	//
	// Get a list of positions by party's public key using cursor based pagination
	// Deprecated: use ListAllPositions instead
	ListPositions(context.Context, *ListPositionsRequest) (*ListPositionsResponse, error)
	// List positions
	//
	// Get a list of all of a party's positions
	ListAllPositions(context.Context, *ListAllPositionsRequest) (*ListAllPositionsResponse, error)
	// Observe positions
	//
	// Subscribe to a stream of position updates. The first messages sent through the stream will contain
	// information about current positions, followed by updates to those positions.
	ObservePositions(*ObservePositionsRequest, TradingDataService_ObservePositionsServer) error
	// List ledger entries
	//
	// Get a list of ledger entries within the given date range.
	// This query requests and sums the number of ledger entries from a given subset of accounts, specified via the 'filter' argument.
	// It returns a time series - implemented as a list of AggregateLedgerEntry structs - with a row for every time
	// the summed ledger entries of the set of specified accounts changes.
	// Each account filter must contain no more than one party ID.
	//
	// Entries can be filtered by:
	//   - the sending account (market ID, asset ID, account type)
	//   - receiving account (market ID, asset ID, account type)
	//   - sending AND receiving account
	//   - transfer type either in addition to the above filters or as a standalone option
	ListLedgerEntries(context.Context, *ListLedgerEntriesRequest) (*ListLedgerEntriesResponse, error)
	// Export ledger entries
	//
	// Export ledger entries records ledger entries to a csv file.
	// May or may not contain a date range - if no date range is provided, list all records for all times.
	//
	// Ledger entries can be exported by:
	//   - export ledger entries for a single party for a given asset within a given time range
	//   - export ledger entries for a single party for a given asset for all times
	//
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportLedgerEntries(*ExportLedgerEntriesRequest, TradingDataService_ExportLedgerEntriesServer) error
	// List balance changes
	//
	// Get a list of the changes in account balances over a period of time.
	ListBalanceChanges(context.Context, *ListBalanceChangesRequest) (*ListBalanceChangesResponse, error)
	// Get latest market data
	//
	// Get the latest market data for a given market
	GetLatestMarketData(context.Context, *GetLatestMarketDataRequest) (*GetLatestMarketDataResponse, error)
	// List latest market data
	//
	// Get a list of the latest market data for every market
	ListLatestMarketData(context.Context, *ListLatestMarketDataRequest) (*ListLatestMarketDataResponse, error)
	// Get latest market depth
	//
	// Get the latest market depth for a given market
	GetLatestMarketDepth(context.Context, *GetLatestMarketDepthRequest) (*GetLatestMarketDepthResponse, error)
	// Observe markets depth
	//
	// Subscribe to a stream of the latest market depth for a given market
	ObserveMarketsDepth(*ObserveMarketsDepthRequest, TradingDataService_ObserveMarketsDepthServer) error
	// Observe markets depth updates
	//
	// Subscribe to a stream of updates on market depth for a given market
	ObserveMarketsDepthUpdates(*ObserveMarketsDepthUpdatesRequest, TradingDataService_ObserveMarketsDepthUpdatesServer) error
	// Observe markets data
	//
	// Subscribe to a stream of data about a given market
	ObserveMarketsData(*ObserveMarketsDataRequest, TradingDataService_ObserveMarketsDataServer) error
	// Get market data history
	//
	// Get market data history for a market ID from between a given date range
	GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error)
	// List transfers
	//
	// Get a list of transfers between public keys. A valid value for public key can be one of:
	// - a party ID
	// - "network"
	// - "0000000000000000000000000000000000000000000000000000000000000000", the public key for the global rewards account
	ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error)
	// Get network limits
	//
	// Get the network limits relating to asset and market creation
	GetNetworkLimits(context.Context, *GetNetworkLimitsRequest) (*GetNetworkLimitsResponse, error)
	// List candle data
	//
	// Get a list of candle data for a given candle ID. Candle IDs can be obtained by calling list-candle-intervals
	ListCandleData(context.Context, *ListCandleDataRequest) (*ListCandleDataResponse, error)
	// Observe candle data
	//
	// Subscribe to a stream of candle updates
	ObserveCandleData(*ObserveCandleDataRequest, TradingDataService_ObserveCandleDataServer) error
	// List candle intervals
	//
	// Get a list of all available intervals for a given market along with the corresponding candle ID
	ListCandleIntervals(context.Context, *ListCandleIntervalsRequest) (*ListCandleIntervalsResponse, error)
	// List votes
	//
	// Get a list of votes. A party ID or a proposal ID must be provided.
	ListVotes(context.Context, *ListVotesRequest) (*ListVotesResponse, error)
	// Observe votes
	//
	// Subscribe to a stream of votes cast on a given proposal, or by all votes made by a given party
	ObserveVotes(*ObserveVotesRequest, TradingDataService_ObserveVotesServer) error
	// List ERC20 multi-sig signer added bundles
	//
	// Get a list of the signature bundles to add a particular validator to the signer list of the multisig contract
	ListERC20MultiSigSignerAddedBundles(context.Context, *ListERC20MultiSigSignerAddedBundlesRequest) (*ListERC20MultiSigSignerAddedBundlesResponse, error)
	// List ERC20 multi-sig signer removed bundles
	//
	// Get a list of the signature bundles to remove a particular validator from signer list of the multisig contract
	ListERC20MultiSigSignerRemovedBundles(context.Context, *ListERC20MultiSigSignerRemovedBundlesRequest) (*ListERC20MultiSigSignerRemovedBundlesResponse, error)
	// Get ERC20 list asset bundle
	//
	// Get the signatures bundle to allowlist an ERC20 token in the collateral bridge
	GetERC20ListAssetBundle(context.Context, *GetERC20ListAssetBundleRequest) (*GetERC20ListAssetBundleResponse, error)
	// Get ERC20 set asset limits bundle
	//
	// Get the signature bundle to update the token limits. These are `maxLifetimeDeposit` and `withdrawThreshold` for a given ERC20 token that is
	// already allowlisted in the collateral bridge.
	GetERC20SetAssetLimitsBundle(context.Context, *GetERC20SetAssetLimitsBundleRequest) (*GetERC20SetAssetLimitsBundleResponse, error)
	// Get ERC20 withdrawal approval
	//
	// Get the signature bundle to finalise a withdrawal on Ethereum
	GetERC20WithdrawalApproval(context.Context, *GetERC20WithdrawalApprovalRequest) (*GetERC20WithdrawalApprovalResponse, error)
	// Get last trade
	//
	// Get the last trade made for a given market.
	GetLastTrade(context.Context, *GetLastTradeRequest) (*GetLastTradeResponse, error)
	// List trades
	//
	// Get a list of all trades, optionally filtered by party/market/order
	ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error)
	// Observe trades
	//
	// Subscribe to a stream of trades, optionally filtered by party/market
	ObserveTrades(*ObserveTradesRequest, TradingDataService_ObserveTradesServer) error
	// Get oracle spec
	//
	// Get an oracle spec by ID. Oracle spec IDs can be found by querying markets that use them as a data source
	GetOracleSpec(context.Context, *GetOracleSpecRequest) (*GetOracleSpecResponse, error)
	// List oracle specs
	//
	// Get a list of all oracles specs that are defined against all markets
	ListOracleSpecs(context.Context, *ListOracleSpecsRequest) (*ListOracleSpecsResponse, error)
	// List oracle data
	//
	// Get a list of all oracle data that have been broadcast to any market
	ListOracleData(context.Context, *ListOracleDataRequest) (*ListOracleDataResponse, error)
	// Get market
	//
	// Get information about a specific market using its ID. A market's ID will be the same as the ID of the proposal that
	// generated it
	GetMarket(context.Context, *GetMarketRequest) (*GetMarketResponse, error)
	// List markets
	//
	// Get a list of markets
	ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error)
	// List successor markets
	//
	// Given a market id, return the full lineage of markets since inception, or all successor markets since and including
	// the given market id.
	ListSuccessorMarkets(context.Context, *ListSuccessorMarketsRequest) (*ListSuccessorMarketsResponse, error)
	// Get party
	//
	// Get a single party
	GetParty(context.Context, *GetPartyRequest) (*GetPartyResponse, error)
	// List parties
	//
	// Get a list of parties
	ListParties(context.Context, *ListPartiesRequest) (*ListPartiesResponse, error)
	// List margin levels
	//
	// Get a list margin levels that match the provided criteria. If no filter is provided, all margin levels will be returned.
	ListMarginLevels(context.Context, *ListMarginLevelsRequest) (*ListMarginLevelsResponse, error)
	// Observe margin levels
	//
	// Subscribe to a stream of margin levels updates
	ObserveMarginLevels(*ObserveMarginLevelsRequest, TradingDataService_ObserveMarginLevelsServer) error
	// List rewards
	//
	// Get a list of rewards that match the provided criteria. If no filter is provided, all rewards will be returned.
	ListRewards(context.Context, *ListRewardsRequest) (*ListRewardsResponse, error)
	// List reward summaries
	//
	// Get a list of reward summaries where the reward amount is the total rewards received over all epochs
	// per party ID and asset ID.
	// Request parameters are optional party ID and asset ID.
	// If no data is provided, all reward summaries will be returned grouped by party and asset ID.
	ListRewardSummaries(context.Context, *ListRewardSummariesRequest) (*ListRewardSummariesResponse, error)
	// List epoch reward summaries
	//
	// Get a list of reward summaries by epoch for a given range of epochs.
	// The result is filtered by list of asset IDs, market IDs and starting and ending epochs, for which to return rewards.
	// If no data is provided, all reward summaries will be returned, grouped by epochs, market IDs, asset IDs and reward type.
	ListEpochRewardSummaries(context.Context, *ListEpochRewardSummariesRequest) (*ListEpochRewardSummariesResponse, error)
	// Get deposit
	//
	// Get a deposit by its ID
	GetDeposit(context.Context, *GetDepositRequest) (*GetDepositResponse, error)
	// List deposits
	//
	// Get a list of deposits for a given party.
	// If a date range is provided, filtering will be based on the last time the deposit
	// has been updated in Vega time.
	ListDeposits(context.Context, *ListDepositsRequest) (*ListDepositsResponse, error)
	// Get withdrawal
	//
	// Get a withdrawal by its ID. A withdrawal's ID will be the SHA3-256 hash of the signature that the withdrawal was submitted with
	GetWithdrawal(context.Context, *GetWithdrawalRequest) (*GetWithdrawalResponse, error)
	// List withdrawals
	//
	// Get a list of withdrawals for a given party
	ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error)
	// Get asset
	//
	// Get a single asset using its ID. Use the assets list query to get an asset's ID
	GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error)
	// List assets
	//
	// Get a list of assets available on the Vega network
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	// List liquidity provisions
	//
	// Get a list of liquidity provisions for a given market
	ListLiquidityProvisions(context.Context, *ListLiquidityProvisionsRequest) (*ListLiquidityProvisionsResponse, error)
	// Observe liquidity provisions
	//
	// Subscribe to a stream of liquidity provision events for a given market and party
	ObserveLiquidityProvisions(*ObserveLiquidityProvisionsRequest, TradingDataService_ObserveLiquidityProvisionsServer) error
	// Get governance data
	//
	// Get a single proposal's details either by proposal ID or by reference
	GetGovernanceData(context.Context, *GetGovernanceDataRequest) (*GetGovernanceDataResponse, error)
	// List governance data
	//
	// Get a list of proposals
	ListGovernanceData(context.Context, *ListGovernanceDataRequest) (*ListGovernanceDataResponse, error)
	// Observe governance
	//
	// Subscribe to a stream of updates to governance proposals
	ObserveGovernance(*ObserveGovernanceRequest, TradingDataService_ObserveGovernanceServer) error
	// List delegations
	//
	// Get a list of the token delegations on the network
	ListDelegations(context.Context, *ListDelegationsRequest) (*ListDelegationsResponse, error)
	// Get network data
	//
	// Get data regarding the nodes of the network
	GetNetworkData(context.Context, *GetNetworkDataRequest) (*GetNetworkDataResponse, error)
	// Get node
	//
	// Get information about a given node
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// List nodes
	//
	// Get a list of the nodes on the network along with the related information.
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	// List node signatures
	//
	// Get a list of aggregate signatures from all the nodes of the network
	ListNodeSignatures(context.Context, *ListNodeSignaturesRequest) (*ListNodeSignaturesResponse, error)
	// Get epoch
	//
	// Get data for a specific epoch, if ID is omitted, it retrieves the current epoch
	GetEpoch(context.Context, *GetEpochRequest) (*GetEpochResponse, error)
	// Estimate fee
	//
	// Estimate the fee that would be incurred for submitting an order
	// with the specified price and size on the market.
	EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error)
	// Estimate margin
	//
	// Estimate the margin that would be required for submitting this order
	EstimateMargin(context.Context, *EstimateMarginRequest) (*EstimateMarginResponse, error)
	// Estimate position
	//
	// Estimate the margin that would be required for maintaining the specified position.
	// If the optional collateral available argument is supplied, the response also contains the estimate of the liquidation price.
	EstimatePosition(context.Context, *EstimatePositionRequest) (*EstimatePositionResponse, error)
	// List network parameters
	//
	// Get a list of the network parameter keys and their values
	ListNetworkParameters(context.Context, *ListNetworkParametersRequest) (*ListNetworkParametersResponse, error)
	// Get network parameter
	//
	// Get a network parameter's value by its key
	GetNetworkParameter(context.Context, *GetNetworkParameterRequest) (*GetNetworkParameterResponse, error)
	// List checkpoints
	//
	// Get a list of information about checkpoints generated by the network
	ListCheckpoints(context.Context, *ListCheckpointsRequest) (*ListCheckpointsResponse, error)
	// Get stake
	//
	// Get staking information for a given party
	GetStake(context.Context, *GetStakeRequest) (*GetStakeResponse, error)
	// Get risk factors
	//
	// Get risk factor data for a given market
	GetRiskFactors(context.Context, *GetRiskFactorsRequest) (*GetRiskFactorsResponse, error)
	// Observe event bus
	//
	// Subscribe to a stream of events from the core
	ObserveEventBus(TradingDataService_ObserveEventBusServer) error
	// Observe ledger movements
	//
	// Subscribe to a stream of transfer responses
	ObserveLedgerMovements(*ObserveLedgerMovementsRequest, TradingDataService_ObserveLedgerMovementsServer) error
	// List key rotations
	//
	// Get a list of information about Vega key rotations that have been performed by validator nodes
	ListKeyRotations(context.Context, *ListKeyRotationsRequest) (*ListKeyRotationsResponse, error)
	// List Ethereum key rotations
	//
	// Get a list of information about Ethereum key rotations that have been performed by validator nodes
	ListEthereumKeyRotations(context.Context, *ListEthereumKeyRotationsRequest) (*ListEthereumKeyRotationsResponse, error)
	// Get Vega time
	//
	// Get the current time of the network in Unix nanoseconds
	GetVegaTime(context.Context, *GetVegaTimeRequest) (*GetVegaTimeResponse, error)
	// Get protocol upgrade status
	//
	// Get status of a protocol upgrade
	GetProtocolUpgradeStatus(context.Context, *GetProtocolUpgradeStatusRequest) (*GetProtocolUpgradeStatusResponse, error)
	// List protocol upgrade proposals
	//
	// Get a list of protocol upgrade proposals, optionally filtering on status or approver.
	ListProtocolUpgradeProposals(context.Context, *ListProtocolUpgradeProposalsRequest) (*ListProtocolUpgradeProposalsResponse, error)
	// List snapshots
	//
	// Get a list of core snapshots taken
	ListCoreSnapshots(context.Context, *ListCoreSnapshotsRequest) (*ListCoreSnapshotsResponse, error)
	// Get most recent network history segment
	//
	// Get the network's most recently history segment
	GetMostRecentNetworkHistorySegment(context.Context, *GetMostRecentNetworkHistorySegmentRequest) (*GetMostRecentNetworkHistorySegmentResponse, error)
	// List all network history segments
	//
	// Get a list of all history segments stored by the data node currently connected to
	ListAllNetworkHistorySegments(context.Context, *ListAllNetworkHistorySegmentsRequest) (*ListAllNetworkHistorySegmentsResponse, error)
	// Get active network history peer addresses
	//
	// Get a list of the addresses of all active network history peers
	GetActiveNetworkHistoryPeerAddresses(context.Context, *GetActiveNetworkHistoryPeerAddressesRequest) (*GetActiveNetworkHistoryPeerAddressesResponse, error)
	// Network history status
	//
	// Get information about the current state of network history's IPFS swarm
	GetNetworkHistoryStatus(context.Context, *GetNetworkHistoryStatusRequest) (*GetNetworkHistoryStatusResponse, error)
	// Network history bootstrap peers
	//
	// Get a list of IPFS peers that can be used to initialise a new data node with network history
	GetNetworkHistoryBootstrapPeers(context.Context, *GetNetworkHistoryBootstrapPeersRequest) (*GetNetworkHistoryBootstrapPeersResponse, error)
	// List entities
	//
	// Get a list of all entities created by transaction hash
	ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error)
	// Export network history as CSV
	//
	// Export CSV table data from network history between two block heights.
	//
	// The requested block heights must fall on network history segment boundaries, which can
	// be discovered by calling the API to list all network history segments. By default
	// segments contain 1000 blocks. In that case ranges such as (1, 1000), (1001, 2000), (1, 3000)
	// would all fall on segment boundaries and be valid.
	//
	// The generated CSV file is compressed into a ZIP file and returned, with the file name
	// in the following format: `[chain id]-[table name]-[start block]-[end block].zip`
	//
	// In gRPC, results are returned in a chunked stream of base64 encoded data.
	//
	// Through the REST gateway, the base64 data chunks are decoded and streamed as a
	// `content-type: application/zip` HTTP response.
	//
	// The CSV exported data uses a comma as a DELIMITER between fields, and " for QUOTE-ing fields.
	//
	// If a value contains any of: DELIMITER, QUOTE, carriage return, or line feed then the whole
	// value is prefixed and suffixed by the QUOTE character and any occurrence within
	// the value of a QUOTE character preceded by another QUOTE.
	//
	// A NULL is output as the NULL parameter string and is not quoted, while a non-NULL value
	// matching the NULL parameter string is quoted.
	//
	// For example, with the default settings, a NULL is written as an unquoted empty string,
	// while an empty string data value is written with double quotes.
	//
	// Note that CSV files produced may contain quoted values containing embedded carriage returns and line feeds.
	// Thus the files are not strictly one line per table row like text-format files.
	//
	// The first row of the CSV file is a header that describes the contents of each column
	// in subsequent rows.
	//
	// Usually the ZIP file will contain only a single CSV file. However it is possible that
	// the (from_block, to_block) request spans over a range of blocks in which the underlying
	// schema of the database changes. For example, a column may have been added, removed, or renamed.
	//
	// If this happens, the CSV file will be split at the point of the schema change and the zip
	// file will contain multiple CSV files, with a potentially different set of headers. The
	// 'version' number of the database schema is part of the in the CSV filename:
	//
	//	`[chain id]-[table name]-[schema version]-[start block]-[end block].zip`
	//
	// # For example, a zip file might be called mainnet-sometable-000001-003000.zip
	//
	// And contain two CSV files: `mainnet-sometable-1-000001-002000.csv`:
	//
	// timestamp, value
	// 1, foo
	// 2, bar
	//
	// And `mainnet-sometable-2-002001-003000.csv`:
	//
	// timestamp, value, extra_value
	// 3, baz, apple
	//
	// It is worth noting that the schema will not change within a single network history segment.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	ExportNetworkHistory(*ExportNetworkHistoryRequest, TradingDataService_ExportNetworkHistoryServer) error
	// Ping
	//
	// Ping the data node
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedTradingDataServiceServer()
}

// UnimplementedTradingDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingDataServiceServer struct {
}

func (UnimplementedTradingDataServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveAccounts(*ObserveAccountsRequest, TradingDataService_ObserveAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveAccounts not implemented")
}
func (UnimplementedTradingDataServiceServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOrderVersions(context.Context, *ListOrderVersionsRequest) (*ListOrderVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderVersions not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveOrders(*ObserveOrdersRequest, TradingDataService_ObserveOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveOrders not implemented")
}
func (UnimplementedTradingDataServiceServer) ListPositions(context.Context, *ListPositionsRequest) (*ListPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPositions not implemented")
}
func (UnimplementedTradingDataServiceServer) ListAllPositions(context.Context, *ListAllPositionsRequest) (*ListAllPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllPositions not implemented")
}
func (UnimplementedTradingDataServiceServer) ObservePositions(*ObservePositionsRequest, TradingDataService_ObservePositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObservePositions not implemented")
}
func (UnimplementedTradingDataServiceServer) ListLedgerEntries(context.Context, *ListLedgerEntriesRequest) (*ListLedgerEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLedgerEntries not implemented")
}
func (UnimplementedTradingDataServiceServer) ExportLedgerEntries(*ExportLedgerEntriesRequest, TradingDataService_ExportLedgerEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportLedgerEntries not implemented")
}
func (UnimplementedTradingDataServiceServer) ListBalanceChanges(context.Context, *ListBalanceChangesRequest) (*ListBalanceChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBalanceChanges not implemented")
}
func (UnimplementedTradingDataServiceServer) GetLatestMarketData(context.Context, *GetLatestMarketDataRequest) (*GetLatestMarketDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestMarketData not implemented")
}
func (UnimplementedTradingDataServiceServer) ListLatestMarketData(context.Context, *ListLatestMarketDataRequest) (*ListLatestMarketDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatestMarketData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetLatestMarketDepth(context.Context, *GetLatestMarketDepthRequest) (*GetLatestMarketDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestMarketDepth not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveMarketsDepth(*ObserveMarketsDepthRequest, TradingDataService_ObserveMarketsDepthServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveMarketsDepth not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveMarketsDepthUpdates(*ObserveMarketsDepthUpdatesRequest, TradingDataService_ObserveMarketsDepthUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveMarketsDepthUpdates not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveMarketsData(*ObserveMarketsDataRequest, TradingDataService_ObserveMarketsDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveMarketsData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDataHistoryByID not implemented")
}
func (UnimplementedTradingDataServiceServer) ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkLimits(context.Context, *GetNetworkLimitsRequest) (*GetNetworkLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLimits not implemented")
}
func (UnimplementedTradingDataServiceServer) ListCandleData(context.Context, *ListCandleDataRequest) (*ListCandleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCandleData not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveCandleData(*ObserveCandleDataRequest, TradingDataService_ObserveCandleDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveCandleData not implemented")
}
func (UnimplementedTradingDataServiceServer) ListCandleIntervals(context.Context, *ListCandleIntervalsRequest) (*ListCandleIntervalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCandleIntervals not implemented")
}
func (UnimplementedTradingDataServiceServer) ListVotes(context.Context, *ListVotesRequest) (*ListVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVotes not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveVotes(*ObserveVotesRequest, TradingDataService_ObserveVotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveVotes not implemented")
}
func (UnimplementedTradingDataServiceServer) ListERC20MultiSigSignerAddedBundles(context.Context, *ListERC20MultiSigSignerAddedBundlesRequest) (*ListERC20MultiSigSignerAddedBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListERC20MultiSigSignerAddedBundles not implemented")
}
func (UnimplementedTradingDataServiceServer) ListERC20MultiSigSignerRemovedBundles(context.Context, *ListERC20MultiSigSignerRemovedBundlesRequest) (*ListERC20MultiSigSignerRemovedBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListERC20MultiSigSignerRemovedBundles not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20ListAssetBundle(context.Context, *GetERC20ListAssetBundleRequest) (*GetERC20ListAssetBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20ListAssetBundle not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20SetAssetLimitsBundle(context.Context, *GetERC20SetAssetLimitsBundleRequest) (*GetERC20SetAssetLimitsBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20SetAssetLimitsBundle not implemented")
}
func (UnimplementedTradingDataServiceServer) GetERC20WithdrawalApproval(context.Context, *GetERC20WithdrawalApprovalRequest) (*GetERC20WithdrawalApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetERC20WithdrawalApproval not implemented")
}
func (UnimplementedTradingDataServiceServer) GetLastTrade(context.Context, *GetLastTradeRequest) (*GetLastTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastTrade not implemented")
}
func (UnimplementedTradingDataServiceServer) ListTrades(context.Context, *ListTradesRequest) (*ListTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrades not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveTrades(*ObserveTradesRequest, TradingDataService_ObserveTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveTrades not implemented")
}
func (UnimplementedTradingDataServiceServer) GetOracleSpec(context.Context, *GetOracleSpecRequest) (*GetOracleSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleSpec not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOracleSpecs(context.Context, *ListOracleSpecsRequest) (*ListOracleSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOracleSpecs not implemented")
}
func (UnimplementedTradingDataServiceServer) ListOracleData(context.Context, *ListOracleDataRequest) (*ListOracleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOracleData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarket(context.Context, *GetMarketRequest) (*GetMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarket not implemented")
}
func (UnimplementedTradingDataServiceServer) ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarkets not implemented")
}
func (UnimplementedTradingDataServiceServer) ListSuccessorMarkets(context.Context, *ListSuccessorMarketsRequest) (*ListSuccessorMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuccessorMarkets not implemented")
}
func (UnimplementedTradingDataServiceServer) GetParty(context.Context, *GetPartyRequest) (*GetPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParty not implemented")
}
func (UnimplementedTradingDataServiceServer) ListParties(context.Context, *ListPartiesRequest) (*ListPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParties not implemented")
}
func (UnimplementedTradingDataServiceServer) ListMarginLevels(context.Context, *ListMarginLevelsRequest) (*ListMarginLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarginLevels not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveMarginLevels(*ObserveMarginLevelsRequest, TradingDataService_ObserveMarginLevelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveMarginLevels not implemented")
}
func (UnimplementedTradingDataServiceServer) ListRewards(context.Context, *ListRewardsRequest) (*ListRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRewards not implemented")
}
func (UnimplementedTradingDataServiceServer) ListRewardSummaries(context.Context, *ListRewardSummariesRequest) (*ListRewardSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRewardSummaries not implemented")
}
func (UnimplementedTradingDataServiceServer) ListEpochRewardSummaries(context.Context, *ListEpochRewardSummariesRequest) (*ListEpochRewardSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEpochRewardSummaries not implemented")
}
func (UnimplementedTradingDataServiceServer) GetDeposit(context.Context, *GetDepositRequest) (*GetDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeposit not implemented")
}
func (UnimplementedTradingDataServiceServer) ListDeposits(context.Context, *ListDepositsRequest) (*ListDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeposits not implemented")
}
func (UnimplementedTradingDataServiceServer) GetWithdrawal(context.Context, *GetWithdrawalRequest) (*GetWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawal not implemented")
}
func (UnimplementedTradingDataServiceServer) ListWithdrawals(context.Context, *ListWithdrawalsRequest) (*ListWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawals not implemented")
}
func (UnimplementedTradingDataServiceServer) GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedTradingDataServiceServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedTradingDataServiceServer) ListLiquidityProvisions(context.Context, *ListLiquidityProvisionsRequest) (*ListLiquidityProvisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiquidityProvisions not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveLiquidityProvisions(*ObserveLiquidityProvisionsRequest, TradingDataService_ObserveLiquidityProvisionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveLiquidityProvisions not implemented")
}
func (UnimplementedTradingDataServiceServer) GetGovernanceData(context.Context, *GetGovernanceDataRequest) (*GetGovernanceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGovernanceData not implemented")
}
func (UnimplementedTradingDataServiceServer) ListGovernanceData(context.Context, *ListGovernanceDataRequest) (*ListGovernanceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGovernanceData not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveGovernance(*ObserveGovernanceRequest, TradingDataService_ObserveGovernanceServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveGovernance not implemented")
}
func (UnimplementedTradingDataServiceServer) ListDelegations(context.Context, *ListDelegationsRequest) (*ListDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDelegations not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkData(context.Context, *GetNetworkDataRequest) (*GetNetworkDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedTradingDataServiceServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedTradingDataServiceServer) ListNodeSignatures(context.Context, *ListNodeSignaturesRequest) (*ListNodeSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeSignatures not implemented")
}
func (UnimplementedTradingDataServiceServer) GetEpoch(context.Context, *GetEpochRequest) (*GetEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpoch not implemented")
}
func (UnimplementedTradingDataServiceServer) EstimateFee(context.Context, *EstimateFeeRequest) (*EstimateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateFee not implemented")
}
func (UnimplementedTradingDataServiceServer) EstimateMargin(context.Context, *EstimateMarginRequest) (*EstimateMarginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMargin not implemented")
}
func (UnimplementedTradingDataServiceServer) EstimatePosition(context.Context, *EstimatePositionRequest) (*EstimatePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatePosition not implemented")
}
func (UnimplementedTradingDataServiceServer) ListNetworkParameters(context.Context, *ListNetworkParametersRequest) (*ListNetworkParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkParameters not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkParameter(context.Context, *GetNetworkParameterRequest) (*GetNetworkParameterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkParameter not implemented")
}
func (UnimplementedTradingDataServiceServer) ListCheckpoints(context.Context, *ListCheckpointsRequest) (*ListCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCheckpoints not implemented")
}
func (UnimplementedTradingDataServiceServer) GetStake(context.Context, *GetStakeRequest) (*GetStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStake not implemented")
}
func (UnimplementedTradingDataServiceServer) GetRiskFactors(context.Context, *GetRiskFactorsRequest) (*GetRiskFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiskFactors not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveEventBus(TradingDataService_ObserveEventBusServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveEventBus not implemented")
}
func (UnimplementedTradingDataServiceServer) ObserveLedgerMovements(*ObserveLedgerMovementsRequest, TradingDataService_ObserveLedgerMovementsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveLedgerMovements not implemented")
}
func (UnimplementedTradingDataServiceServer) ListKeyRotations(context.Context, *ListKeyRotationsRequest) (*ListKeyRotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyRotations not implemented")
}
func (UnimplementedTradingDataServiceServer) ListEthereumKeyRotations(context.Context, *ListEthereumKeyRotationsRequest) (*ListEthereumKeyRotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEthereumKeyRotations not implemented")
}
func (UnimplementedTradingDataServiceServer) GetVegaTime(context.Context, *GetVegaTimeRequest) (*GetVegaTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVegaTime not implemented")
}
func (UnimplementedTradingDataServiceServer) GetProtocolUpgradeStatus(context.Context, *GetProtocolUpgradeStatusRequest) (*GetProtocolUpgradeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtocolUpgradeStatus not implemented")
}
func (UnimplementedTradingDataServiceServer) ListProtocolUpgradeProposals(context.Context, *ListProtocolUpgradeProposalsRequest) (*ListProtocolUpgradeProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProtocolUpgradeProposals not implemented")
}
func (UnimplementedTradingDataServiceServer) ListCoreSnapshots(context.Context, *ListCoreSnapshotsRequest) (*ListCoreSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoreSnapshots not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMostRecentNetworkHistorySegment(context.Context, *GetMostRecentNetworkHistorySegmentRequest) (*GetMostRecentNetworkHistorySegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostRecentNetworkHistorySegment not implemented")
}
func (UnimplementedTradingDataServiceServer) ListAllNetworkHistorySegments(context.Context, *ListAllNetworkHistorySegmentsRequest) (*ListAllNetworkHistorySegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllNetworkHistorySegments not implemented")
}
func (UnimplementedTradingDataServiceServer) GetActiveNetworkHistoryPeerAddresses(context.Context, *GetActiveNetworkHistoryPeerAddressesRequest) (*GetActiveNetworkHistoryPeerAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveNetworkHistoryPeerAddresses not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkHistoryStatus(context.Context, *GetNetworkHistoryStatusRequest) (*GetNetworkHistoryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkHistoryStatus not implemented")
}
func (UnimplementedTradingDataServiceServer) GetNetworkHistoryBootstrapPeers(context.Context, *GetNetworkHistoryBootstrapPeersRequest) (*GetNetworkHistoryBootstrapPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkHistoryBootstrapPeers not implemented")
}
func (UnimplementedTradingDataServiceServer) ListEntities(context.Context, *ListEntitiesRequest) (*ListEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedTradingDataServiceServer) ExportNetworkHistory(*ExportNetworkHistoryRequest, TradingDataService_ExportNetworkHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportNetworkHistory not implemented")
}
func (UnimplementedTradingDataServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTradingDataServiceServer) mustEmbedUnimplementedTradingDataServiceServer() {}

// UnsafeTradingDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingDataServiceServer will
// result in compilation errors.
type UnsafeTradingDataServiceServer interface {
	mustEmbedUnimplementedTradingDataServiceServer()
}

func RegisterTradingDataServiceServer(s grpc.ServiceRegistrar, srv TradingDataServiceServer) {
	s.RegisterService(&TradingDataService_ServiceDesc, srv)
}

func _TradingDataService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveAccountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveAccounts(m, &tradingDataServiceObserveAccountsServer{stream})
}

type TradingDataService_ObserveAccountsServer interface {
	Send(*ObserveAccountsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveAccountsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveAccountsServer) Send(m *ObserveAccountsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOrderVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOrderVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOrderVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOrderVersions(ctx, req.(*ListOrderVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveOrders(m, &tradingDataServiceObserveOrdersServer{stream})
}

type TradingDataService_ObserveOrdersServer interface {
	Send(*ObserveOrdersResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveOrdersServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveOrdersServer) Send(m *ObserveOrdersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListPositions(ctx, req.(*ListPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListAllPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListAllPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListAllPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListAllPositions(ctx, req.(*ListAllPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObservePositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObservePositionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObservePositions(m, &tradingDataServiceObservePositionsServer{stream})
}

type TradingDataService_ObservePositionsServer interface {
	Send(*ObservePositionsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObservePositionsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObservePositionsServer) Send(m *ObservePositionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListLedgerEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLedgerEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListLedgerEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListLedgerEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListLedgerEntries(ctx, req.(*ListLedgerEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ExportLedgerEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportLedgerEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ExportLedgerEntries(m, &tradingDataServiceExportLedgerEntriesServer{stream})
}

type TradingDataService_ExportLedgerEntriesServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type tradingDataServiceExportLedgerEntriesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceExportLedgerEntriesServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListBalanceChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBalanceChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListBalanceChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListBalanceChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListBalanceChanges(ctx, req.(*ListBalanceChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetLatestMarketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestMarketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetLatestMarketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetLatestMarketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetLatestMarketData(ctx, req.(*GetLatestMarketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListLatestMarketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLatestMarketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListLatestMarketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListLatestMarketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListLatestMarketData(ctx, req.(*ListLatestMarketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetLatestMarketDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestMarketDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetLatestMarketDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetLatestMarketDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetLatestMarketDepth(ctx, req.(*GetLatestMarketDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveMarketsDepth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveMarketsDepthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveMarketsDepth(m, &tradingDataServiceObserveMarketsDepthServer{stream})
}

type TradingDataService_ObserveMarketsDepthServer interface {
	Send(*ObserveMarketsDepthResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveMarketsDepthServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveMarketsDepthServer) Send(m *ObserveMarketsDepthResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObserveMarketsDepthUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveMarketsDepthUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveMarketsDepthUpdates(m, &tradingDataServiceObserveMarketsDepthUpdatesServer{stream})
}

type TradingDataService_ObserveMarketsDepthUpdatesServer interface {
	Send(*ObserveMarketsDepthUpdatesResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveMarketsDepthUpdatesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveMarketsDepthUpdatesServer) Send(m *ObserveMarketsDepthUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ObserveMarketsData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveMarketsDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveMarketsData(m, &tradingDataServiceObserveMarketsDataServer{stream})
}

type TradingDataService_ObserveMarketsDataServer interface {
	Send(*ObserveMarketsDataResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveMarketsDataServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveMarketsDataServer) Send(m *ObserveMarketsDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetMarketDataHistoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataHistoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, req.(*GetMarketDataHistoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListTransfers(ctx, req.(*ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNetworkLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkLimits(ctx, req.(*GetNetworkLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListCandleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCandleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListCandleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListCandleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListCandleData(ctx, req.(*ListCandleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveCandleData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveCandleDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveCandleData(m, &tradingDataServiceObserveCandleDataServer{stream})
}

type TradingDataService_ObserveCandleDataServer interface {
	Send(*ObserveCandleDataResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveCandleDataServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveCandleDataServer) Send(m *ObserveCandleDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListCandleIntervals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCandleIntervalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListCandleIntervals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListCandleIntervals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListCandleIntervals(ctx, req.(*ListCandleIntervalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListVotes(ctx, req.(*ListVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveVotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveVotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveVotes(m, &tradingDataServiceObserveVotesServer{stream})
}

type TradingDataService_ObserveVotesServer interface {
	Send(*ObserveVotesResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveVotesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveVotesServer) Send(m *ObserveVotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListERC20MultiSigSignerAddedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListERC20MultiSigSignerAddedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListERC20MultiSigSignerAddedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListERC20MultiSigSignerAddedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListERC20MultiSigSignerAddedBundles(ctx, req.(*ListERC20MultiSigSignerAddedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListERC20MultiSigSignerRemovedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListERC20MultiSigSignerRemovedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListERC20MultiSigSignerRemovedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListERC20MultiSigSignerRemovedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListERC20MultiSigSignerRemovedBundles(ctx, req.(*ListERC20MultiSigSignerRemovedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20ListAssetBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20ListAssetBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20ListAssetBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20ListAssetBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20ListAssetBundle(ctx, req.(*GetERC20ListAssetBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20SetAssetLimitsBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20SetAssetLimitsBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20SetAssetLimitsBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20SetAssetLimitsBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20SetAssetLimitsBundle(ctx, req.(*GetERC20SetAssetLimitsBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetERC20WithdrawalApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetERC20WithdrawalApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetERC20WithdrawalApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetERC20WithdrawalApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetERC20WithdrawalApproval(ctx, req.(*GetERC20WithdrawalApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetLastTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetLastTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetLastTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetLastTrade(ctx, req.(*GetLastTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListTrades(ctx, req.(*ListTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveTrades(m, &tradingDataServiceObserveTradesServer{stream})
}

type TradingDataService_ObserveTradesServer interface {
	Send(*ObserveTradesResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveTradesServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveTradesServer) Send(m *ObserveTradesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetOracleSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOracleSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetOracleSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetOracleSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetOracleSpec(ctx, req.(*GetOracleSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOracleSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOracleSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOracleSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOracleSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOracleSpecs(ctx, req.(*ListOracleSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListOracleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOracleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListOracleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListOracleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListOracleData(ctx, req.(*ListOracleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarket(ctx, req.(*GetMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListMarkets(ctx, req.(*ListMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListSuccessorMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuccessorMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListSuccessorMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListSuccessorMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListSuccessorMarkets(ctx, req.(*ListSuccessorMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetParty(ctx, req.(*GetPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListParties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListParties(ctx, req.(*ListPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListMarginLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarginLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListMarginLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListMarginLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListMarginLevels(ctx, req.(*ListMarginLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveMarginLevels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveMarginLevelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveMarginLevels(m, &tradingDataServiceObserveMarginLevelsServer{stream})
}

type TradingDataService_ObserveMarginLevelsServer interface {
	Send(*ObserveMarginLevelsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveMarginLevelsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveMarginLevelsServer) Send(m *ObserveMarginLevelsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListRewards(ctx, req.(*ListRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListRewardSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRewardSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListRewardSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListRewardSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListRewardSummaries(ctx, req.(*ListRewardSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListEpochRewardSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEpochRewardSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListEpochRewardSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListEpochRewardSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListEpochRewardSummaries(ctx, req.(*ListEpochRewardSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetDeposit(ctx, req.(*GetDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListDeposits(ctx, req.(*ListDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetWithdrawal(ctx, req.(*GetWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListWithdrawals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListWithdrawals(ctx, req.(*ListWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListLiquidityProvisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLiquidityProvisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListLiquidityProvisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListLiquidityProvisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListLiquidityProvisions(ctx, req.(*ListLiquidityProvisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveLiquidityProvisions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveLiquidityProvisionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveLiquidityProvisions(m, &tradingDataServiceObserveLiquidityProvisionsServer{stream})
}

type TradingDataService_ObserveLiquidityProvisionsServer interface {
	Send(*ObserveLiquidityProvisionsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveLiquidityProvisionsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveLiquidityProvisionsServer) Send(m *ObserveLiquidityProvisionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_GetGovernanceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGovernanceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetGovernanceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetGovernanceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetGovernanceData(ctx, req.(*GetGovernanceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListGovernanceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGovernanceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListGovernanceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListGovernanceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListGovernanceData(ctx, req.(*ListGovernanceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveGovernance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveGovernanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveGovernance(m, &tradingDataServiceObserveGovernanceServer{stream})
}

type TradingDataService_ObserveGovernanceServer interface {
	Send(*ObserveGovernanceResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveGovernanceServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveGovernanceServer) Send(m *ObserveGovernanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListDelegations(ctx, req.(*ListDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNetworkData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkData(ctx, req.(*GetNetworkDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListNodeSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListNodeSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListNodeSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListNodeSignatures(ctx, req.(*ListNodeSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetEpoch(ctx, req.(*GetEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).EstimateFee(ctx, req.(*EstimateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_EstimateMargin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateMarginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).EstimateMargin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/EstimateMargin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).EstimateMargin(ctx, req.(*EstimateMarginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_EstimatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).EstimatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/EstimatePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).EstimatePosition(ctx, req.(*EstimatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListNetworkParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListNetworkParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListNetworkParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListNetworkParameters(ctx, req.(*ListNetworkParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNetworkParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkParameter(ctx, req.(*GetNetworkParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListCheckpoints(ctx, req.(*ListCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetStake(ctx, req.(*GetStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetRiskFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRiskFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetRiskFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetRiskFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetRiskFactors(ctx, req.(*GetRiskFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ObserveEventBus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradingDataServiceServer).ObserveEventBus(&tradingDataServiceObserveEventBusServer{stream})
}

type TradingDataService_ObserveEventBusServer interface {
	Send(*ObserveEventBusResponse) error
	Recv() (*ObserveEventBusRequest, error)
	grpc.ServerStream
}

type tradingDataServiceObserveEventBusServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveEventBusServer) Send(m *ObserveEventBusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradingDataServiceObserveEventBusServer) Recv() (*ObserveEventBusRequest, error) {
	m := new(ObserveEventBusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TradingDataService_ObserveLedgerMovements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveLedgerMovementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ObserveLedgerMovements(m, &tradingDataServiceObserveLedgerMovementsServer{stream})
}

type TradingDataService_ObserveLedgerMovementsServer interface {
	Send(*ObserveLedgerMovementsResponse) error
	grpc.ServerStream
}

type tradingDataServiceObserveLedgerMovementsServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceObserveLedgerMovementsServer) Send(m *ObserveLedgerMovementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_ListKeyRotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyRotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListKeyRotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListKeyRotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListKeyRotations(ctx, req.(*ListKeyRotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListEthereumKeyRotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEthereumKeyRotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListEthereumKeyRotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListEthereumKeyRotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListEthereumKeyRotations(ctx, req.(*ListEthereumKeyRotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetVegaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVegaTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetVegaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetVegaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetVegaTime(ctx, req.(*GetVegaTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetProtocolUpgradeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtocolUpgradeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetProtocolUpgradeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetProtocolUpgradeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetProtocolUpgradeStatus(ctx, req.(*GetProtocolUpgradeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListProtocolUpgradeProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProtocolUpgradeProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListProtocolUpgradeProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListProtocolUpgradeProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListProtocolUpgradeProposals(ctx, req.(*ListProtocolUpgradeProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListCoreSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoreSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListCoreSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListCoreSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListCoreSnapshots(ctx, req.(*ListCoreSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMostRecentNetworkHistorySegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMostRecentNetworkHistorySegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMostRecentNetworkHistorySegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMostRecentNetworkHistorySegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMostRecentNetworkHistorySegment(ctx, req.(*GetMostRecentNetworkHistorySegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListAllNetworkHistorySegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllNetworkHistorySegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListAllNetworkHistorySegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListAllNetworkHistorySegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListAllNetworkHistorySegments(ctx, req.(*ListAllNetworkHistorySegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetActiveNetworkHistoryPeerAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveNetworkHistoryPeerAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetActiveNetworkHistoryPeerAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetActiveNetworkHistoryPeerAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetActiveNetworkHistoryPeerAddresses(ctx, req.(*GetActiveNetworkHistoryPeerAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkHistoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkHistoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkHistoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNetworkHistoryStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkHistoryStatus(ctx, req.(*GetNetworkHistoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetNetworkHistoryBootstrapPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkHistoryBootstrapPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetNetworkHistoryBootstrapPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetNetworkHistoryBootstrapPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetNetworkHistoryBootstrapPeers(ctx, req.(*GetNetworkHistoryBootstrapPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).ListEntities(ctx, req.(*ListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_ExportNetworkHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportNetworkHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingDataServiceServer).ExportNetworkHistory(m, &tradingDataServiceExportNetworkHistoryServer{stream})
}

type TradingDataService_ExportNetworkHistoryServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type tradingDataServiceExportNetworkHistoryServer struct {
	grpc.ServerStream
}

func (x *tradingDataServiceExportNetworkHistoryServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

func _TradingDataService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingDataService_ServiceDesc is the grpc.ServiceDesc for TradingDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.api.v2.TradingDataService",
	HandlerType: (*TradingDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _TradingDataService_ListAccounts_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _TradingDataService_Info_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _TradingDataService_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _TradingDataService_ListOrders_Handler,
		},
		{
			MethodName: "ListOrderVersions",
			Handler:    _TradingDataService_ListOrderVersions_Handler,
		},
		{
			MethodName: "ListPositions",
			Handler:    _TradingDataService_ListPositions_Handler,
		},
		{
			MethodName: "ListAllPositions",
			Handler:    _TradingDataService_ListAllPositions_Handler,
		},
		{
			MethodName: "ListLedgerEntries",
			Handler:    _TradingDataService_ListLedgerEntries_Handler,
		},
		{
			MethodName: "ListBalanceChanges",
			Handler:    _TradingDataService_ListBalanceChanges_Handler,
		},
		{
			MethodName: "GetLatestMarketData",
			Handler:    _TradingDataService_GetLatestMarketData_Handler,
		},
		{
			MethodName: "ListLatestMarketData",
			Handler:    _TradingDataService_ListLatestMarketData_Handler,
		},
		{
			MethodName: "GetLatestMarketDepth",
			Handler:    _TradingDataService_GetLatestMarketDepth_Handler,
		},
		{
			MethodName: "GetMarketDataHistoryByID",
			Handler:    _TradingDataService_GetMarketDataHistoryByID_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _TradingDataService_ListTransfers_Handler,
		},
		{
			MethodName: "GetNetworkLimits",
			Handler:    _TradingDataService_GetNetworkLimits_Handler,
		},
		{
			MethodName: "ListCandleData",
			Handler:    _TradingDataService_ListCandleData_Handler,
		},
		{
			MethodName: "ListCandleIntervals",
			Handler:    _TradingDataService_ListCandleIntervals_Handler,
		},
		{
			MethodName: "ListVotes",
			Handler:    _TradingDataService_ListVotes_Handler,
		},
		{
			MethodName: "ListERC20MultiSigSignerAddedBundles",
			Handler:    _TradingDataService_ListERC20MultiSigSignerAddedBundles_Handler,
		},
		{
			MethodName: "ListERC20MultiSigSignerRemovedBundles",
			Handler:    _TradingDataService_ListERC20MultiSigSignerRemovedBundles_Handler,
		},
		{
			MethodName: "GetERC20ListAssetBundle",
			Handler:    _TradingDataService_GetERC20ListAssetBundle_Handler,
		},
		{
			MethodName: "GetERC20SetAssetLimitsBundle",
			Handler:    _TradingDataService_GetERC20SetAssetLimitsBundle_Handler,
		},
		{
			MethodName: "GetERC20WithdrawalApproval",
			Handler:    _TradingDataService_GetERC20WithdrawalApproval_Handler,
		},
		{
			MethodName: "GetLastTrade",
			Handler:    _TradingDataService_GetLastTrade_Handler,
		},
		{
			MethodName: "ListTrades",
			Handler:    _TradingDataService_ListTrades_Handler,
		},
		{
			MethodName: "GetOracleSpec",
			Handler:    _TradingDataService_GetOracleSpec_Handler,
		},
		{
			MethodName: "ListOracleSpecs",
			Handler:    _TradingDataService_ListOracleSpecs_Handler,
		},
		{
			MethodName: "ListOracleData",
			Handler:    _TradingDataService_ListOracleData_Handler,
		},
		{
			MethodName: "GetMarket",
			Handler:    _TradingDataService_GetMarket_Handler,
		},
		{
			MethodName: "ListMarkets",
			Handler:    _TradingDataService_ListMarkets_Handler,
		},
		{
			MethodName: "ListSuccessorMarkets",
			Handler:    _TradingDataService_ListSuccessorMarkets_Handler,
		},
		{
			MethodName: "GetParty",
			Handler:    _TradingDataService_GetParty_Handler,
		},
		{
			MethodName: "ListParties",
			Handler:    _TradingDataService_ListParties_Handler,
		},
		{
			MethodName: "ListMarginLevels",
			Handler:    _TradingDataService_ListMarginLevels_Handler,
		},
		{
			MethodName: "ListRewards",
			Handler:    _TradingDataService_ListRewards_Handler,
		},
		{
			MethodName: "ListRewardSummaries",
			Handler:    _TradingDataService_ListRewardSummaries_Handler,
		},
		{
			MethodName: "ListEpochRewardSummaries",
			Handler:    _TradingDataService_ListEpochRewardSummaries_Handler,
		},
		{
			MethodName: "GetDeposit",
			Handler:    _TradingDataService_GetDeposit_Handler,
		},
		{
			MethodName: "ListDeposits",
			Handler:    _TradingDataService_ListDeposits_Handler,
		},
		{
			MethodName: "GetWithdrawal",
			Handler:    _TradingDataService_GetWithdrawal_Handler,
		},
		{
			MethodName: "ListWithdrawals",
			Handler:    _TradingDataService_ListWithdrawals_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _TradingDataService_GetAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _TradingDataService_ListAssets_Handler,
		},
		{
			MethodName: "ListLiquidityProvisions",
			Handler:    _TradingDataService_ListLiquidityProvisions_Handler,
		},
		{
			MethodName: "GetGovernanceData",
			Handler:    _TradingDataService_GetGovernanceData_Handler,
		},
		{
			MethodName: "ListGovernanceData",
			Handler:    _TradingDataService_ListGovernanceData_Handler,
		},
		{
			MethodName: "ListDelegations",
			Handler:    _TradingDataService_ListDelegations_Handler,
		},
		{
			MethodName: "GetNetworkData",
			Handler:    _TradingDataService_GetNetworkData_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _TradingDataService_GetNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _TradingDataService_ListNodes_Handler,
		},
		{
			MethodName: "ListNodeSignatures",
			Handler:    _TradingDataService_ListNodeSignatures_Handler,
		},
		{
			MethodName: "GetEpoch",
			Handler:    _TradingDataService_GetEpoch_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _TradingDataService_EstimateFee_Handler,
		},
		{
			MethodName: "EstimateMargin",
			Handler:    _TradingDataService_EstimateMargin_Handler,
		},
		{
			MethodName: "EstimatePosition",
			Handler:    _TradingDataService_EstimatePosition_Handler,
		},
		{
			MethodName: "ListNetworkParameters",
			Handler:    _TradingDataService_ListNetworkParameters_Handler,
		},
		{
			MethodName: "GetNetworkParameter",
			Handler:    _TradingDataService_GetNetworkParameter_Handler,
		},
		{
			MethodName: "ListCheckpoints",
			Handler:    _TradingDataService_ListCheckpoints_Handler,
		},
		{
			MethodName: "GetStake",
			Handler:    _TradingDataService_GetStake_Handler,
		},
		{
			MethodName: "GetRiskFactors",
			Handler:    _TradingDataService_GetRiskFactors_Handler,
		},
		{
			MethodName: "ListKeyRotations",
			Handler:    _TradingDataService_ListKeyRotations_Handler,
		},
		{
			MethodName: "ListEthereumKeyRotations",
			Handler:    _TradingDataService_ListEthereumKeyRotations_Handler,
		},
		{
			MethodName: "GetVegaTime",
			Handler:    _TradingDataService_GetVegaTime_Handler,
		},
		{
			MethodName: "GetProtocolUpgradeStatus",
			Handler:    _TradingDataService_GetProtocolUpgradeStatus_Handler,
		},
		{
			MethodName: "ListProtocolUpgradeProposals",
			Handler:    _TradingDataService_ListProtocolUpgradeProposals_Handler,
		},
		{
			MethodName: "ListCoreSnapshots",
			Handler:    _TradingDataService_ListCoreSnapshots_Handler,
		},
		{
			MethodName: "GetMostRecentNetworkHistorySegment",
			Handler:    _TradingDataService_GetMostRecentNetworkHistorySegment_Handler,
		},
		{
			MethodName: "ListAllNetworkHistorySegments",
			Handler:    _TradingDataService_ListAllNetworkHistorySegments_Handler,
		},
		{
			MethodName: "GetActiveNetworkHistoryPeerAddresses",
			Handler:    _TradingDataService_GetActiveNetworkHistoryPeerAddresses_Handler,
		},
		{
			MethodName: "GetNetworkHistoryStatus",
			Handler:    _TradingDataService_GetNetworkHistoryStatus_Handler,
		},
		{
			MethodName: "GetNetworkHistoryBootstrapPeers",
			Handler:    _TradingDataService_GetNetworkHistoryBootstrapPeers_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _TradingDataService_ListEntities_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TradingDataService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveAccounts",
			Handler:       _TradingDataService_ObserveAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveOrders",
			Handler:       _TradingDataService_ObserveOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObservePositions",
			Handler:       _TradingDataService_ObservePositions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportLedgerEntries",
			Handler:       _TradingDataService_ExportLedgerEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveMarketsDepth",
			Handler:       _TradingDataService_ObserveMarketsDepth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveMarketsDepthUpdates",
			Handler:       _TradingDataService_ObserveMarketsDepthUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveMarketsData",
			Handler:       _TradingDataService_ObserveMarketsData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveCandleData",
			Handler:       _TradingDataService_ObserveCandleData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveVotes",
			Handler:       _TradingDataService_ObserveVotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveTrades",
			Handler:       _TradingDataService_ObserveTrades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveMarginLevels",
			Handler:       _TradingDataService_ObserveMarginLevels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveLiquidityProvisions",
			Handler:       _TradingDataService_ObserveLiquidityProvisions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveGovernance",
			Handler:       _TradingDataService_ObserveGovernance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveEventBus",
			Handler:       _TradingDataService_ObserveEventBus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ObserveLedgerMovements",
			Handler:       _TradingDataService_ObserveLedgerMovements_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExportNetworkHistory",
			Handler:       _TradingDataService_ExportNetworkHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data-node/api/v2/trading_data.proto",
}
