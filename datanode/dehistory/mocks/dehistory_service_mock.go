// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/dehistory (interfaces: DeHistory)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	fs "io/fs"
	reflect "reflect"

	dehistory "code.vegaprotocol.io/vega/datanode/dehistory"
	snapshot "code.vegaprotocol.io/vega/datanode/dehistory/snapshot"
	store "code.vegaprotocol.io/vega/datanode/dehistory/store"
	v2 "code.vegaprotocol.io/vega/protos/data-node/api/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockDeHistory is a mock of DeHistory interface.
type MockDeHistory struct {
	ctrl     *gomock.Controller
	recorder *MockDeHistoryMockRecorder
}

// MockDeHistoryMockRecorder is the mock recorder for MockDeHistory.
type MockDeHistoryMockRecorder struct {
	mock *MockDeHistory
}

// NewMockDeHistory creates a new mock instance.
func NewMockDeHistory(ctrl *gomock.Controller) *MockDeHistory {
	mock := &MockDeHistory{ctrl: ctrl}
	mock.recorder = &MockDeHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeHistory) EXPECT() *MockDeHistoryMockRecorder {
	return m.recorder
}

// FetchHistorySegment mocks base method.
func (m *MockDeHistory) FetchHistorySegment(arg0 context.Context, arg1 string) (store.SegmentIndexEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHistorySegment", arg0, arg1)
	ret0, _ := ret[0].(store.SegmentIndexEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHistorySegment indicates an expected call of FetchHistorySegment.
func (mr *MockDeHistoryMockRecorder) FetchHistorySegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHistorySegment", reflect.TypeOf((*MockDeHistory)(nil).FetchHistorySegment), arg0, arg1)
}

// GetMostRecentHistorySegmentFromPeers mocks base method.
func (m *MockDeHistory) GetMostRecentHistorySegmentFromPeers(arg0 context.Context, arg1 []int) (*dehistory.PeerResponse, map[string]*v2.GetMostRecentDeHistorySegmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRecentHistorySegmentFromPeers", arg0, arg1)
	ret0, _ := ret[0].(*dehistory.PeerResponse)
	ret1, _ := ret[1].(map[string]*v2.GetMostRecentDeHistorySegmentResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMostRecentHistorySegmentFromPeers indicates an expected call of GetMostRecentHistorySegmentFromPeers.
func (mr *MockDeHistoryMockRecorder) GetMostRecentHistorySegmentFromPeers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentHistorySegmentFromPeers", reflect.TypeOf((*MockDeHistory)(nil).GetMostRecentHistorySegmentFromPeers), arg0, arg1)
}

// LoadAllAvailableHistoryIntoDatanode mocks base method.
func (m *MockDeHistory) LoadAllAvailableHistoryIntoDatanode(arg0 context.Context, arg1 fs.FS) (snapshot.LoadResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllAvailableHistoryIntoDatanode", arg0, arg1)
	ret0, _ := ret[0].(snapshot.LoadResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllAvailableHistoryIntoDatanode indicates an expected call of LoadAllAvailableHistoryIntoDatanode.
func (mr *MockDeHistoryMockRecorder) LoadAllAvailableHistoryIntoDatanode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllAvailableHistoryIntoDatanode", reflect.TypeOf((*MockDeHistory)(nil).LoadAllAvailableHistoryIntoDatanode), arg0, arg1)
}
