// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import filtering "code.vegaprotocol.io/vega/internal/filtering"
import mock "github.com/stretchr/testify/mock"

import proto "code.vegaprotocol.io/vega/proto"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AmendOrder provides a mock function with given fields: ctx, amendment
func (_m *Service) AmendOrder(ctx context.Context, amendment *proto.Amendment) (bool, error) {
	ret := _m.Called(ctx, amendment)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Amendment) bool); ok {
		r0 = rf(ctx, amendment)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Amendment) error); ok {
		r1 = rf(ctx, amendment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelOrder provides a mock function with given fields: ctx, order
func (_m *Service) CancelOrder(ctx context.Context, order *proto.Order) (bool, error) {
	ret := _m.Called(ctx, order)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Order) bool); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *Service) CreateOrder(ctx context.Context, order *proto.Order) (bool, string, error) {
	ret := _m.Called(ctx, order)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Order) bool); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, *proto.Order) string); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *proto.Order) error); ok {
		r2 = rf(ctx, order)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByMarket provides a mock function with given fields: ctx, market, filters
func (_m *Service) GetByMarket(ctx context.Context, market string, filters *filtering.OrderQueryFilters) ([]*proto.Order, error) {
	ret := _m.Called(ctx, market, filters)

	var r0 []*proto.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, *filtering.OrderQueryFilters) []*proto.Order); ok {
		r0 = rf(ctx, market, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *filtering.OrderQueryFilters) error); ok {
		r1 = rf(ctx, market, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMarketAndId provides a mock function with given fields: ctx, market, id
func (_m *Service) GetByMarketAndId(ctx context.Context, market string, id string) (*proto.Order, error) {
	ret := _m.Called(ctx, market, id)

	var r0 *proto.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *proto.Order); ok {
		r0 = rf(ctx, market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByParty provides a mock function with given fields: ctx, party, filters
func (_m *Service) GetByParty(ctx context.Context, party string, filters *filtering.OrderQueryFilters) ([]*proto.Order, error) {
	ret := _m.Called(ctx, party, filters)

	var r0 []*proto.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, *filtering.OrderQueryFilters) []*proto.Order); ok {
		r0 = rf(ctx, party, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *filtering.OrderQueryFilters) error); ok {
		r1 = rf(ctx, party, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPartyAndId provides a mock function with given fields: ctx, party, id
func (_m *Service) GetByPartyAndId(ctx context.Context, party string, id string) (*proto.Order, error) {
	ret := _m.Called(ctx, party, id)

	var r0 *proto.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *proto.Order); ok {
		r0 = rf(ctx, party, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, party, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObserveOrders provides a mock function with given fields: ctx, market, party
func (_m *Service) ObserveOrders(ctx context.Context, market *string, party *string) (<-chan []proto.Order, uint64) {
	ret := _m.Called(ctx, market, party)

	var r0 <-chan []proto.Order
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string) <-chan []proto.Order); ok {
		r0 = rf(ctx, market, party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []proto.Order)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, *string, *string) uint64); ok {
		r1 = rf(ctx, market, party)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}
