// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/fee (interfaces: FeeDiscountRewardService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "code.vegaprotocol.io/vega/core/types"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockFeeDiscountRewardService is a mock of FeeDiscountRewardService interface.
type MockFeeDiscountRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockFeeDiscountRewardServiceMockRecorder
}

// MockFeeDiscountRewardServiceMockRecorder is the mock recorder for MockFeeDiscountRewardService.
type MockFeeDiscountRewardServiceMockRecorder struct {
	mock *MockFeeDiscountRewardService
}

// NewMockFeeDiscountRewardService creates a new mock instance.
func NewMockFeeDiscountRewardService(ctrl *gomock.Controller) *MockFeeDiscountRewardService {
	mock := &MockFeeDiscountRewardService{ctrl: ctrl}
	mock.recorder = &MockFeeDiscountRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeeDiscountRewardService) EXPECT() *MockFeeDiscountRewardServiceMockRecorder {
	return m.recorder
}

// GetReferrer mocks base method.
func (m *MockFeeDiscountRewardService) GetReferrer(arg0 types.PartyID) (types.PartyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferrer", arg0)
	ret0, _ := ret[0].(types.PartyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferrer indicates an expected call of GetReferrer.
func (mr *MockFeeDiscountRewardServiceMockRecorder) GetReferrer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferrer", reflect.TypeOf((*MockFeeDiscountRewardService)(nil).GetReferrer), arg0)
}

// ReferralDiscountFactorForParty mocks base method.
func (m *MockFeeDiscountRewardService) ReferralDiscountFactorForParty(arg0 types.PartyID) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferralDiscountFactorForParty", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// ReferralDiscountFactorForParty indicates an expected call of ReferralDiscountFactorForParty.
func (mr *MockFeeDiscountRewardServiceMockRecorder) ReferralDiscountFactorForParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferralDiscountFactorForParty", reflect.TypeOf((*MockFeeDiscountRewardService)(nil).ReferralDiscountFactorForParty), arg0)
}

// RewardsFactorMultiplierAppliedForParty mocks base method.
func (m *MockFeeDiscountRewardService) RewardsFactorMultiplierAppliedForParty(arg0 types.PartyID) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RewardsFactorMultiplierAppliedForParty", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// RewardsFactorMultiplierAppliedForParty indicates an expected call of RewardsFactorMultiplierAppliedForParty.
func (mr *MockFeeDiscountRewardServiceMockRecorder) RewardsFactorMultiplierAppliedForParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewardsFactorMultiplierAppliedForParty", reflect.TypeOf((*MockFeeDiscountRewardService)(nil).RewardsFactorMultiplierAppliedForParty), arg0)
}

// VolumeDiscountFactorForParty mocks base method.
func (m *MockFeeDiscountRewardService) VolumeDiscountFactorForParty(arg0 types.PartyID) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeDiscountFactorForParty", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// VolumeDiscountFactorForParty indicates an expected call of VolumeDiscountFactorForParty.
func (mr *MockFeeDiscountRewardServiceMockRecorder) VolumeDiscountFactorForParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDiscountFactorForParty", reflect.TypeOf((*MockFeeDiscountRewardService)(nil).VolumeDiscountFactorForParty), arg0)
}
