// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/risk (interfaces: RiskStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRiskStore is a mock of RiskStore interface
type MockRiskStore struct {
	ctrl     *gomock.Controller
	recorder *MockRiskStoreMockRecorder
}

// MockRiskStoreMockRecorder is the mock recorder for MockRiskStore
type MockRiskStoreMockRecorder struct {
	mock *MockRiskStore
}

// NewMockRiskStore creates a new mock instance
func NewMockRiskStore(ctrl *gomock.Controller) *MockRiskStore {
	mock := &MockRiskStore{ctrl: ctrl}
	mock.recorder = &MockRiskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRiskStore) EXPECT() *MockRiskStoreMockRecorder {
	return m.recorder
}

// GetMarginLevelsByID mocks base method
func (m *MockRiskStore) GetMarginLevelsByID(arg0, arg1 string) ([]proto.MarginLevels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarginLevelsByID", arg0, arg1)
	ret0, _ := ret[0].([]proto.MarginLevels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarginLevelsByID indicates an expected call of GetMarginLevelsByID
func (mr *MockRiskStoreMockRecorder) GetMarginLevelsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarginLevelsByID", reflect.TypeOf((*MockRiskStore)(nil).GetMarginLevelsByID), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockRiskStore) Subscribe(arg0 chan []proto.MarginLevels) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockRiskStoreMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRiskStore)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method
func (m *MockRiskStore) Unsubscribe(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockRiskStoreMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockRiskStore)(nil).Unsubscribe), arg0)
}
