// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commands/v1/transaction.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InputData struct {
	// A random number used to provided uniqueness and prevents
	// against replay attack.
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The block height associated to the transaction.
	// This should always be current height of the node at the time of sending the Tx.
	// BlockHeight is used as a mechanism for replay protection.
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Types that are valid to be assigned to Command:
	//	*InputData_OrderSubmission
	//	*InputData_OrderCancellation
	//	*InputData_OrderAmendment
	//	*InputData_WithdrawSubmission
	//	*InputData_ProposalSubmission
	//	*InputData_VoteSubmission
	//	*InputData_LiquidityProvisionSubmission
	//	*InputData_NodeRegistration
	//	*InputData_NodeVote
	//	*InputData_NodeSignature
	//	*InputData_ChainEvent
	//	*InputData_OracleDataSubmission
	Command              isInputData_Command `protobuf_oneof:"command"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *InputData) Reset()         { *m = InputData{} }
func (m *InputData) String() string { return proto.CompactTextString(m) }
func (*InputData) ProtoMessage()    {}
func (*InputData) Descriptor() ([]byte, []int) {
	return fileDescriptor_716d8811a71474ec, []int{0}
}

func (m *InputData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputData.Unmarshal(m, b)
}
func (m *InputData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputData.Marshal(b, m, deterministic)
}
func (m *InputData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputData.Merge(m, src)
}
func (m *InputData) XXX_Size() int {
	return xxx_messageInfo_InputData.Size(m)
}
func (m *InputData) XXX_DiscardUnknown() {
	xxx_messageInfo_InputData.DiscardUnknown(m)
}

var xxx_messageInfo_InputData proto.InternalMessageInfo

func (m *InputData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *InputData) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type isInputData_Command interface {
	isInputData_Command()
}

type InputData_OrderSubmission struct {
	OrderSubmission *OrderSubmission `protobuf:"bytes,1001,opt,name=order_submission,json=orderSubmission,proto3,oneof"`
}

type InputData_OrderCancellation struct {
	OrderCancellation *OrderCancellation `protobuf:"bytes,1002,opt,name=order_cancellation,json=orderCancellation,proto3,oneof"`
}

type InputData_OrderAmendment struct {
	OrderAmendment *OrderAmendment `protobuf:"bytes,1003,opt,name=order_amendment,json=orderAmendment,proto3,oneof"`
}

type InputData_WithdrawSubmission struct {
	WithdrawSubmission *WithdrawSubmission `protobuf:"bytes,1004,opt,name=withdraw_submission,json=withdrawSubmission,proto3,oneof"`
}

type InputData_ProposalSubmission struct {
	ProposalSubmission *ProposalSubmission `protobuf:"bytes,1005,opt,name=proposal_submission,json=proposalSubmission,proto3,oneof"`
}

type InputData_VoteSubmission struct {
	VoteSubmission *VoteSubmission `protobuf:"bytes,1006,opt,name=vote_submission,json=voteSubmission,proto3,oneof"`
}

type InputData_LiquidityProvisionSubmission struct {
	LiquidityProvisionSubmission *LiquidityProvisionSubmission `protobuf:"bytes,1007,opt,name=liquidity_provision_submission,json=liquidityProvisionSubmission,proto3,oneof"`
}

type InputData_NodeRegistration struct {
	NodeRegistration *NodeRegistration `protobuf:"bytes,2001,opt,name=node_registration,json=nodeRegistration,proto3,oneof"`
}

type InputData_NodeVote struct {
	NodeVote *NodeVote `protobuf:"bytes,2002,opt,name=node_vote,json=nodeVote,proto3,oneof"`
}

type InputData_NodeSignature struct {
	NodeSignature *NodeSignature `protobuf:"bytes,2003,opt,name=node_signature,json=nodeSignature,proto3,oneof"`
}

type InputData_ChainEvent struct {
	ChainEvent *ChainEvent `protobuf:"bytes,2004,opt,name=chain_event,json=chainEvent,proto3,oneof"`
}

type InputData_OracleDataSubmission struct {
	OracleDataSubmission *OracleDataSubmission `protobuf:"bytes,3001,opt,name=oracle_data_submission,json=oracleDataSubmission,proto3,oneof"`
}

func (*InputData_OrderSubmission) isInputData_Command() {}

func (*InputData_OrderCancellation) isInputData_Command() {}

func (*InputData_OrderAmendment) isInputData_Command() {}

func (*InputData_WithdrawSubmission) isInputData_Command() {}

func (*InputData_ProposalSubmission) isInputData_Command() {}

func (*InputData_VoteSubmission) isInputData_Command() {}

func (*InputData_LiquidityProvisionSubmission) isInputData_Command() {}

func (*InputData_NodeRegistration) isInputData_Command() {}

func (*InputData_NodeVote) isInputData_Command() {}

func (*InputData_NodeSignature) isInputData_Command() {}

func (*InputData_ChainEvent) isInputData_Command() {}

func (*InputData_OracleDataSubmission) isInputData_Command() {}

func (m *InputData) GetCommand() isInputData_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *InputData) GetOrderSubmission() *OrderSubmission {
	if x, ok := m.GetCommand().(*InputData_OrderSubmission); ok {
		return x.OrderSubmission
	}
	return nil
}

func (m *InputData) GetOrderCancellation() *OrderCancellation {
	if x, ok := m.GetCommand().(*InputData_OrderCancellation); ok {
		return x.OrderCancellation
	}
	return nil
}

func (m *InputData) GetOrderAmendment() *OrderAmendment {
	if x, ok := m.GetCommand().(*InputData_OrderAmendment); ok {
		return x.OrderAmendment
	}
	return nil
}

func (m *InputData) GetWithdrawSubmission() *WithdrawSubmission {
	if x, ok := m.GetCommand().(*InputData_WithdrawSubmission); ok {
		return x.WithdrawSubmission
	}
	return nil
}

func (m *InputData) GetProposalSubmission() *ProposalSubmission {
	if x, ok := m.GetCommand().(*InputData_ProposalSubmission); ok {
		return x.ProposalSubmission
	}
	return nil
}

func (m *InputData) GetVoteSubmission() *VoteSubmission {
	if x, ok := m.GetCommand().(*InputData_VoteSubmission); ok {
		return x.VoteSubmission
	}
	return nil
}

func (m *InputData) GetLiquidityProvisionSubmission() *LiquidityProvisionSubmission {
	if x, ok := m.GetCommand().(*InputData_LiquidityProvisionSubmission); ok {
		return x.LiquidityProvisionSubmission
	}
	return nil
}

func (m *InputData) GetNodeRegistration() *NodeRegistration {
	if x, ok := m.GetCommand().(*InputData_NodeRegistration); ok {
		return x.NodeRegistration
	}
	return nil
}

func (m *InputData) GetNodeVote() *NodeVote {
	if x, ok := m.GetCommand().(*InputData_NodeVote); ok {
		return x.NodeVote
	}
	return nil
}

func (m *InputData) GetNodeSignature() *NodeSignature {
	if x, ok := m.GetCommand().(*InputData_NodeSignature); ok {
		return x.NodeSignature
	}
	return nil
}

func (m *InputData) GetChainEvent() *ChainEvent {
	if x, ok := m.GetCommand().(*InputData_ChainEvent); ok {
		return x.ChainEvent
	}
	return nil
}

func (m *InputData) GetOracleDataSubmission() *OracleDataSubmission {
	if x, ok := m.GetCommand().(*InputData_OracleDataSubmission); ok {
		return x.OracleDataSubmission
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InputData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InputData_OrderSubmission)(nil),
		(*InputData_OrderCancellation)(nil),
		(*InputData_OrderAmendment)(nil),
		(*InputData_WithdrawSubmission)(nil),
		(*InputData_ProposalSubmission)(nil),
		(*InputData_VoteSubmission)(nil),
		(*InputData_LiquidityProvisionSubmission)(nil),
		(*InputData_NodeRegistration)(nil),
		(*InputData_NodeVote)(nil),
		(*InputData_NodeSignature)(nil),
		(*InputData_ChainEvent)(nil),
		(*InputData_OracleDataSubmission)(nil),
	}
}

// Represents a transaction to be sent to Vega.
type Transaction struct {
	// One of the set of Vega commands (proto marshalled).
	InputData []byte `protobuf:"bytes,1,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// The signature of the inputData
	Signature *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// The sender of the transaction.
	// Any of the following would be valid:
	//
	// Types that are valid to be assigned to From:
	//	*Transaction_Address
	//	*Transaction_PubKey
	From isTransaction_From `protobuf_oneof:"from"`
	// A version of the transaction, to be used
	// in the future in case we want to implement
	// changes to the Transaction format
	Version              uint32   `protobuf:"varint,2000,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_716d8811a71474ec, []int{1}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetInputData() []byte {
	if m != nil {
		return m.InputData
	}
	return nil
}

func (m *Transaction) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type isTransaction_From interface {
	isTransaction_From()
}

type Transaction_Address struct {
	Address []byte `protobuf:"bytes,1001,opt,name=address,proto3,oneof"`
}

type Transaction_PubKey struct {
	PubKey []byte `protobuf:"bytes,1002,opt,name=pub_key,json=pubKey,proto3,oneof"`
}

func (*Transaction_Address) isTransaction_From() {}

func (*Transaction_PubKey) isTransaction_From() {}

func (m *Transaction) GetFrom() isTransaction_From {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Transaction) GetAddress() []byte {
	if x, ok := m.GetFrom().(*Transaction_Address); ok {
		return x.Address
	}
	return nil
}

func (m *Transaction) GetPubKey() []byte {
	if x, ok := m.GetFrom().(*Transaction_PubKey); ok {
		return x.PubKey
	}
	return nil
}

func (m *Transaction) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Transaction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Transaction_Address)(nil),
		(*Transaction_PubKey)(nil),
	}
}

// A signature to be authenticate a transaction
// and to be verified by the vega network
type Signature struct {
	// The bytes of the signature
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// The algorithm used to create the signature
	Algo string `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
	// The version of the signature used to create the signature
	Version              uint32   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_716d8811a71474ec, []int{2}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *Signature) GetAlgo() string {
	if m != nil {
		return m.Algo
	}
	return ""
}

func (m *Signature) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*InputData)(nil), "vega.commands.v1.InputData")
	proto.RegisterType((*Transaction)(nil), "vega.commands.v1.Transaction")
	proto.RegisterType((*Signature)(nil), "vega.commands.v1.Signature")
}

func init() { proto.RegisterFile("commands/v1/transaction.proto", fileDescriptor_716d8811a71474ec) }

var fileDescriptor_716d8811a71474ec = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcb, 0x6e, 0xdb, 0x38,
	0x14, 0x86, 0xe5, 0x4c, 0x12, 0x47, 0x74, 0xae, 0x9c, 0x60, 0x46, 0x71, 0x92, 0x99, 0xc4, 0x0d,
	0x8a, 0x00, 0x45, 0x65, 0xa4, 0x5d, 0xb5, 0xab, 0x36, 0x69, 0x01, 0x05, 0x0d, 0x9a, 0x80, 0xe9,
	0x0d, 0xdd, 0x08, 0xb4, 0xc4, 0xda, 0x44, 0x64, 0x52, 0xa5, 0x68, 0x19, 0x7e, 0xb4, 0x6e, 0xba,
	0xe9, 0x0b, 0xf4, 0xf6, 0x12, 0xbd, 0xbf, 0x42, 0x41, 0xd2, 0xb2, 0x25, 0xcb, 0xee, 0x4e, 0xfc,
	0xcf, 0x7f, 0x3e, 0xf2, 0x1c, 0x52, 0x07, 0xec, 0x06, 0xbc, 0xdb, 0xc5, 0x2c, 0x4c, 0x9a, 0xe9,
	0x51, 0x53, 0x0a, 0xcc, 0x12, 0x1c, 0x48, 0xca, 0x99, 0x1b, 0x0b, 0x2e, 0x39, 0x5c, 0x4f, 0x49,
	0x1b, 0xbb, 0x99, 0xc7, 0x4d, 0x8f, 0xea, 0xf5, 0x7c, 0xc2, 0x28, 0xa0, 0xdd, 0xf5, 0x83, 0x7c,
	0x2c, 0xc5, 0x11, 0x0d, 0xb1, 0xe4, 0xc2, 0x9f, 0x70, 0x6d, 0xe5, 0x5d, 0x5c, 0xe0, 0x20, 0x22,
	0xc3, 0x50, 0xe3, 0xed, 0x12, 0xb0, 0x4f, 0x59, 0xdc, 0x93, 0x0f, 0xb0, 0xc4, 0x70, 0x13, 0x2c,
	0x30, 0xce, 0x02, 0xe2, 0x54, 0xf6, 0x2a, 0x87, 0xf3, 0xc8, 0x2c, 0xe0, 0x3e, 0x58, 0x6e, 0x45,
	0x3c, 0xb8, 0xf2, 0x3b, 0x84, 0xb6, 0x3b, 0xd2, 0x99, 0xd3, 0xc1, 0x9a, 0xd6, 0x3c, 0x2d, 0xc1,
	0x73, 0xb0, 0xce, 0x45, 0x48, 0x84, 0x9f, 0xf4, 0x5a, 0x5d, 0x9a, 0x24, 0x94, 0x33, 0xe7, 0x4b,
	0x75, 0xaf, 0x72, 0x58, 0xbb, 0xb5, 0xef, 0x4e, 0x56, 0xe4, 0x9e, 0x2b, 0xeb, 0xe5, 0xc8, 0xe9,
	0x59, 0x68, 0x8d, 0x17, 0x25, 0xf8, 0x14, 0x40, 0x03, 0x0c, 0x30, 0x0b, 0x48, 0x14, 0x61, 0xd5,
	0x22, 0xe7, 0xab, 0x41, 0x5e, 0x9b, 0x81, 0x3c, 0xc9, 0x79, 0x3d, 0x0b, 0x6d, 0xf0, 0x49, 0x11,
	0x9e, 0x01, 0xb3, 0x93, 0x8f, 0xbb, 0x84, 0x85, 0x5d, 0xc2, 0xa4, 0xf3, 0xcd, 0x30, 0xf7, 0x66,
	0x30, 0xef, 0x67, 0x46, 0xcf, 0x42, 0xab, 0xbc, 0xa0, 0xc0, 0x17, 0xe0, 0xef, 0x3e, 0x95, 0x9d,
	0x50, 0xe0, 0x7e, 0xbe, 0xf0, 0xef, 0x86, 0x78, 0x50, 0x26, 0x3e, 0x1f, 0xba, 0x0b, 0xb5, 0xc3,
	0x7e, 0x49, 0x55, 0xe4, 0x58, 0xf0, 0x98, 0x27, 0x38, 0xca, 0x93, 0x7f, 0xcc, 0x24, 0x5f, 0x0c,
	0xdd, 0x45, 0x72, 0x5c, 0x52, 0x55, 0x07, 0x52, 0x2e, 0x49, 0x9e, 0xfa, 0x73, 0x66, 0x07, 0x9e,
	0x71, 0x49, 0x0a, 0xc4, 0xd5, 0xb4, 0xa0, 0xc0, 0x3e, 0xf8, 0x2f, 0xa2, 0xaf, 0x7b, 0x34, 0xa4,
	0x72, 0xe0, 0xc7, 0x82, 0xa7, 0x54, 0xc9, 0x79, 0xf8, 0x2f, 0x03, 0x77, 0xcb, 0xf0, 0xb3, 0x2c,
	0xf1, 0x22, 0xcb, 0x2b, 0x6c, 0xb5, 0x13, 0xfd, 0x21, 0x0e, 0x11, 0xd8, 0x60, 0x3c, 0x24, 0xbe,
	0x20, 0x6d, 0x9a, 0x48, 0x61, 0x9e, 0xc7, 0x87, 0x35, 0xbd, 0x57, 0xa3, 0xbc, 0xd7, 0x63, 0x1e,
	0x12, 0x94, 0xb3, 0x7a, 0x16, 0x5a, 0x67, 0x13, 0x1a, 0xbc, 0x0b, 0x6c, 0xcd, 0x54, 0x35, 0x3a,
	0x1f, 0x0d, 0xab, 0x3e, 0x9d, 0xa5, 0x1a, 0xe3, 0x59, 0x68, 0x89, 0x0d, 0xbf, 0xe1, 0x29, 0x58,
	0xd5, 0xb9, 0x09, 0x6d, 0x33, 0x2c, 0x7b, 0x82, 0x38, 0x9f, 0x0c, 0xe0, 0xff, 0xe9, 0x80, 0xcb,
	0xcc, 0xe7, 0x59, 0x68, 0x85, 0xe5, 0x05, 0x78, 0x0f, 0xd4, 0x82, 0x0e, 0xa6, 0xcc, 0x27, 0xa9,
	0x7a, 0x9f, 0x9f, 0x0d, 0x67, 0xa7, 0xcc, 0x39, 0x51, 0xae, 0x87, 0xa9, 0x79, 0x9b, 0x20, 0x18,
	0xad, 0xa0, 0x0f, 0xfe, 0x31, 0x7f, 0xb9, 0x1f, 0x62, 0x89, 0xf3, 0xb7, 0xf1, 0xe6, 0x5f, 0x0d,
	0xbb, 0x3e, 0xed, 0xb1, 0xab, 0x04, 0x35, 0x05, 0x0a, 0xb7, 0xb0, 0xc9, 0xa7, 0xe8, 0xc7, 0x36,
	0xa8, 0x0e, 0x73, 0x1b, 0xef, 0x2a, 0xa0, 0xf6, 0x64, 0x3c, 0xc5, 0xe0, 0x2e, 0x00, 0x54, 0xcd,
	0x13, 0xbd, 0xb5, 0x9e, 0x23, 0xcb, 0xc8, 0xa6, 0xa3, 0x09, 0x73, 0x07, 0xd8, 0xe3, 0x16, 0xcd,
	0xe9, 0xc3, 0x6c, 0x97, 0x0f, 0x33, 0x6a, 0x06, 0x1a, 0xbb, 0xe1, 0x36, 0xa8, 0xe2, 0x30, 0x14,
	0x24, 0x49, 0xcc, 0x68, 0x59, 0xf6, 0x2c, 0x94, 0x29, 0xb0, 0x0e, 0xaa, 0x71, 0xaf, 0xe5, 0x5f,
	0x91, 0x81, 0x19, 0x12, 0x2a, 0xb8, 0x18, 0xf7, 0x5a, 0x8f, 0xc8, 0x00, 0x6e, 0x81, 0x6a, 0x4a,
	0x84, 0xae, 0xff, 0xbd, 0x6a, 0xe6, 0x0a, 0xca, 0xd6, 0xc7, 0x8b, 0x60, 0xfe, 0x95, 0xe0, 0xdd,
	0xc6, 0x39, 0xb0, 0xc7, 0x17, 0xb0, 0x09, 0x16, 0x5a, 0x03, 0x49, 0x92, 0xe1, 0xe9, 0xcd, 0x02,
	0x42, 0x30, 0x8f, 0xa3, 0x36, 0xd7, 0x87, 0xb6, 0x91, 0xfe, 0x86, 0xce, 0x98, 0xfc, 0x57, 0x11,
	0x7c, 0xf3, 0xe5, 0x8d, 0x80, 0x87, 0x44, 0x97, 0xa6, 0x27, 0x6d, 0xc0, 0x23, 0x97, 0xf2, 0xa6,
	0x5a, 0x37, 0xb5, 0xd0, 0xcc, 0x0d, 0xe5, 0xd6, 0xa2, 0x96, 0x6e, 0xff, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0x8b, 0x35, 0xec, 0x1d, 0x06, 0x00, 0x00,
}
