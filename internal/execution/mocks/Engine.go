// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import proto "vega/proto"

// Engine is an autogenerated mock type for the Engine type
type Engine struct {
	mock.Mock
}

// AmendOrder provides a mock function with given fields: order
func (_m *Engine) AmendOrder(order *proto.Amendment) (*proto.OrderConfirmation, proto.OrderError) {
	ret := _m.Called(order)

	var r0 *proto.OrderConfirmation
	if rf, ok := ret.Get(0).(func(*proto.Amendment) *proto.OrderConfirmation); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.OrderConfirmation)
		}
	}

	var r1 proto.OrderError
	if rf, ok := ret.Get(1).(func(*proto.Amendment) proto.OrderError); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Get(1).(proto.OrderError)
	}

	return r0, r1
}

// CancelOrder provides a mock function with given fields: order
func (_m *Engine) CancelOrder(order *proto.Order) (*proto.OrderCancellation, proto.OrderError) {
	ret := _m.Called(order)

	var r0 *proto.OrderCancellation
	if rf, ok := ret.Get(0).(func(*proto.Order) *proto.OrderCancellation); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.OrderCancellation)
		}
	}

	var r1 proto.OrderError
	if rf, ok := ret.Get(1).(func(*proto.Order) proto.OrderError); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Get(1).(proto.OrderError)
	}

	return r0, r1
}

// Generate provides a mock function with given fields:
func (_m *Engine) Generate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Process provides a mock function with given fields:
func (_m *Engine) Process() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitOrder provides a mock function with given fields: order
func (_m *Engine) SubmitOrder(order *proto.Order) (*proto.OrderConfirmation, proto.OrderError) {
	ret := _m.Called(order)

	var r0 *proto.OrderConfirmation
	if rf, ok := ret.Get(0).(func(*proto.Order) *proto.OrderConfirmation); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.OrderConfirmation)
		}
	}

	var r1 proto.OrderError
	if rf, ok := ret.Get(1).(func(*proto.Order) proto.OrderError); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Get(1).(proto.OrderError)
	}

	return r0, r1
}
