// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/governance.proto

package vega

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of possible errors that can cause a proposal to be in state rejected or failed
type ProposalError int32

const (
	// Default value
	ProposalError_PROPOSAL_ERROR_UNSPECIFIED ProposalError = 0
	// Specified close time is too early based on network parameters
	ProposalError_PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON ProposalError = 1
	// Specified close time is too late based on network parameters
	ProposalError_PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE ProposalError = 2
	// Specified enactment time is too early based on network parameters
	ProposalError_PROPOSAL_ERROR_ENACT_TIME_TOO_SOON ProposalError = 3
	// Specified enactment time is too late based on network parameters
	ProposalError_PROPOSAL_ERROR_ENACT_TIME_TOO_LATE ProposalError = 4
	// Proposer for this proposal has insufficient tokens
	ProposalError_PROPOSAL_ERROR_INSUFFICIENT_TOKENS ProposalError = 5
	// Instrument quote name and base name were the same
	ProposalError_PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY ProposalError = 6
	// Proposal has no product
	ProposalError_PROPOSAL_ERROR_NO_PRODUCT ProposalError = 7
	// Specified product is not supported
	ProposalError_PROPOSAL_ERROR_UNSUPPORTED_PRODUCT ProposalError = 8
	// Proposal has no trading mode
	ProposalError_PROPOSAL_ERROR_NO_TRADING_MODE ProposalError = 11
	// Proposal has an unsupported trading mode
	ProposalError_PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE ProposalError = 12
	// Proposal failed node validation
	ProposalError_PROPOSAL_ERROR_NODE_VALIDATION_FAILED ProposalError = 13
	// Field is missing in a builtin asset source
	ProposalError_PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD ProposalError = 14
	// Contract address is missing in the ERC20 asset source
	ProposalError_PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS ProposalError = 15
	// Asset ID is invalid or does not exist on the Vega network
	ProposalError_PROPOSAL_ERROR_INVALID_ASSET ProposalError = 16
	// Proposal terms timestamps are not compatible (Validation < Closing < Enactment)
	ProposalError_PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS ProposalError = 17
	// No risk parameters were specified
	ProposalError_PROPOSAL_ERROR_NO_RISK_PARAMETERS ProposalError = 18
	// Invalid key in update network parameter proposal
	ProposalError_PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY ProposalError = 19
	// Invalid value in update network parameter proposal
	ProposalError_PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE ProposalError = 20
	// Validation failed for network parameter proposal
	ProposalError_PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED ProposalError = 21
	// Opening auction duration is less than the network minimum opening auction time
	ProposalError_PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL ProposalError = 22
	// Opening auction duration is more than the network minimum opening auction time
	ProposalError_PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE ProposalError = 23
	// Market proposal market could not be instantiated in execution
	ProposalError_PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET ProposalError = 25
	// Market proposal market contained invalid product definition
	ProposalError_PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT ProposalError = 26
	// Market proposal has invalid risk parameter
	ProposalError_PROPOSAL_ERROR_INVALID_RISK_PARAMETER ProposalError = 30
	// Proposal was declined because vote didn't reach the majority threshold required
	ProposalError_PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED ProposalError = 31
	// Proposal declined because the participation threshold was not reached
	ProposalError_PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED ProposalError = 32
	// Asset proposal has invalid asset details
	ProposalError_PROPOSAL_ERROR_INVALID_ASSET_DETAILS ProposalError = 33
	// Proposal is an unknown type
	ProposalError_PROPOSAL_ERROR_UNKNOWN_TYPE ProposalError = 34
	// Proposal has an unknown risk parameter type
	ProposalError_PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE ProposalError = 35
	// Validation failed for freeform proposal
	ProposalError_PROPOSAL_ERROR_INVALID_FREEFORM ProposalError = 36
	// Party doesn't have enough equity-like share to propose an update on the market
	// targeted by the proposal
	ProposalError_PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE ProposalError = 37
	// Market targeted by the proposal does not exist or is not eligible for modification
	ProposalError_PROPOSAL_ERROR_INVALID_MARKET ProposalError = 38
	// Market proposal decimal place is higher than the market settlement asset decimal places
	ProposalError_PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES ProposalError = 39
	// Market proposal contains too many price monitoring triggers
	ProposalError_PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS ProposalError = 40
	// Market proposal contains too many price monitoring triggers
	ProposalError_PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE ProposalError = 41
	// LP price range must be larger than 0
	ProposalError_PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE ProposalError = 42
	// LP price range must not be larger than 100
	ProposalError_PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE ProposalError = 43
	// Linear slippage factor is out of range, either negative or too large
	ProposalError_PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE ProposalError = 44
	// Quadratic slippage factor is out of range, either negative or too large
	ProposalError_PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE ProposalError = 45
	// Validation failed for spot proposal
	ProposalError_PROPOSAL_ERROR_INVALID_SPOT ProposalError = 46
	// Spot trading not enabled
	ProposalError_PROPOSAL_ERROR_SPOT_PRODUCT_DISABLED ProposalError = 47
	// Market proposal is invalid, either invalid insurance pool fraction, or it specifies a parent market that it can't succeed.
	ProposalError_PROPOSAL_ERROR_INVALID_SUCCESSOR_MARKET ProposalError = 48
	// Governance transfer proposal is invalid
	ProposalError_PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_FAILED ProposalError = 49
	// Governance transfer proposal failed
	ProposalError_PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_INVALID ProposalError = 50
	// Proposal for cancelling transfer is invalid, check proposal ID
	ProposalError_PROPOSAL_ERROR_GOVERNANCE_CANCEL_TRANSFER_PROPOSAL_INVALID ProposalError = 51
	// Proposal for updating market state is invalid
	ProposalError_PROPOSAL_ERROR_INVALID_MARKET_STATE_UPDATE ProposalError = 52
	// Liquidity provision SLA parameters are invalid
	ProposalError_PROPOSAL_ERROR_INVALID_SLA_PARAMS ProposalError = 53
	// Mandatory liquidity provision SLA parameters are missing
	ProposalError_PROPOSAL_ERROR_MISSING_SLA_PARAMS ProposalError = 54
	// Perpetual market proposal contained invalid product definition
	ProposalError_PROPOSAL_ERROR_INVALID_PERPETUAL_PRODUCT ProposalError = 55
	// Referral program proposal is invalid
	ProposalError_PROPOSAL_ERROR_INVALID_REFERRAL_PROGRAM ProposalError = 56
)

// Enum value maps for ProposalError.
var (
	ProposalError_name = map[int32]string{
		0:  "PROPOSAL_ERROR_UNSPECIFIED",
		1:  "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
		2:  "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
		3:  "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
		4:  "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
		5:  "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
		6:  "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
		7:  "PROPOSAL_ERROR_NO_PRODUCT",
		8:  "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
		11: "PROPOSAL_ERROR_NO_TRADING_MODE",
		12: "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
		13: "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
		14: "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
		15: "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
		16: "PROPOSAL_ERROR_INVALID_ASSET",
		17: "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
		18: "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
		19: "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
		20: "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
		21: "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
		22: "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
		23: "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
		25: "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
		26: "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
		30: "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
		31: "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
		32: "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
		33: "PROPOSAL_ERROR_INVALID_ASSET_DETAILS",
		34: "PROPOSAL_ERROR_UNKNOWN_TYPE",
		35: "PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE",
		36: "PROPOSAL_ERROR_INVALID_FREEFORM",
		37: "PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE",
		38: "PROPOSAL_ERROR_INVALID_MARKET",
		39: "PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES",
		40: "PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS",
		41: "PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE",
		42: "PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE",
		43: "PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE",
		44: "PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE",
		45: "PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE",
		46: "PROPOSAL_ERROR_INVALID_SPOT",
		47: "PROPOSAL_ERROR_SPOT_PRODUCT_DISABLED",
		48: "PROPOSAL_ERROR_INVALID_SUCCESSOR_MARKET",
		49: "PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_FAILED",
		50: "PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_INVALID",
		51: "PROPOSAL_ERROR_GOVERNANCE_CANCEL_TRANSFER_PROPOSAL_INVALID",
		52: "PROPOSAL_ERROR_INVALID_MARKET_STATE_UPDATE",
		53: "PROPOSAL_ERROR_INVALID_SLA_PARAMS",
		54: "PROPOSAL_ERROR_MISSING_SLA_PARAMS",
		55: "PROPOSAL_ERROR_INVALID_PERPETUAL_PRODUCT",
		56: "PROPOSAL_ERROR_INVALID_REFERRAL_PROGRAM",
	}
	ProposalError_value = map[string]int32{
		"PROPOSAL_ERROR_UNSPECIFIED":                                 0,
		"PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON":                         1,
		"PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE":                         2,
		"PROPOSAL_ERROR_ENACT_TIME_TOO_SOON":                         3,
		"PROPOSAL_ERROR_ENACT_TIME_TOO_LATE":                         4,
		"PROPOSAL_ERROR_INSUFFICIENT_TOKENS":                         5,
		"PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY":                 6,
		"PROPOSAL_ERROR_NO_PRODUCT":                                  7,
		"PROPOSAL_ERROR_UNSUPPORTED_PRODUCT":                         8,
		"PROPOSAL_ERROR_NO_TRADING_MODE":                             11,
		"PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE":                    12,
		"PROPOSAL_ERROR_NODE_VALIDATION_FAILED":                      13,
		"PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD":                 14,
		"PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS":              15,
		"PROPOSAL_ERROR_INVALID_ASSET":                               16,
		"PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS":                     17,
		"PROPOSAL_ERROR_NO_RISK_PARAMETERS":                          18,
		"PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY":               19,
		"PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE":             20,
		"PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED":         21,
		"PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL":          22,
		"PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE":          23,
		"PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET":                25,
		"PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT":                      26,
		"PROPOSAL_ERROR_INVALID_RISK_PARAMETER":                      30,
		"PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED":              31,
		"PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED":         32,
		"PROPOSAL_ERROR_INVALID_ASSET_DETAILS":                       33,
		"PROPOSAL_ERROR_UNKNOWN_TYPE":                                34,
		"PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE":                 35,
		"PROPOSAL_ERROR_INVALID_FREEFORM":                            36,
		"PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE":              37,
		"PROPOSAL_ERROR_INVALID_MARKET":                              38,
		"PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES":              39,
		"PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS":          40,
		"PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE":                41,
		"PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE":                  42,
		"PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE":                    43,
		"PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE":         44,
		"PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE":      45,
		"PROPOSAL_ERROR_INVALID_SPOT":                                46,
		"PROPOSAL_ERROR_SPOT_PRODUCT_DISABLED":                       47,
		"PROPOSAL_ERROR_INVALID_SUCCESSOR_MARKET":                    48,
		"PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_FAILED":         49,
		"PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_INVALID":        50,
		"PROPOSAL_ERROR_GOVERNANCE_CANCEL_TRANSFER_PROPOSAL_INVALID": 51,
		"PROPOSAL_ERROR_INVALID_MARKET_STATE_UPDATE":                 52,
		"PROPOSAL_ERROR_INVALID_SLA_PARAMS":                          53,
		"PROPOSAL_ERROR_MISSING_SLA_PARAMS":                          54,
		"PROPOSAL_ERROR_INVALID_PERPETUAL_PRODUCT":                   55,
		"PROPOSAL_ERROR_INVALID_REFERRAL_PROGRAM":                    56,
	}
)

func (x ProposalError) Enum() *ProposalError {
	p := new(ProposalError)
	*p = x
	return p
}

func (x ProposalError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProposalError) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_governance_proto_enumTypes[0].Descriptor()
}

func (ProposalError) Type() protoreflect.EnumType {
	return &file_vega_governance_proto_enumTypes[0]
}

func (x ProposalError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProposalError.Descriptor instead.
func (ProposalError) EnumDescriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{0}
}

type MarketStateUpdateType int32

const (
	// Default value, always invalid
	MarketStateUpdateType_MARKET_STATE_UPDATE_TYPE_UNSPECIFIED MarketStateUpdateType = 0
	// Request to terminate a market via governance
	MarketStateUpdateType_MARKET_STATE_UPDATE_TYPE_TERMINATE MarketStateUpdateType = 1
	// Request to suspend a market via governance
	MarketStateUpdateType_MARKET_STATE_UPDATE_TYPE_SUSPEND MarketStateUpdateType = 2
	// Request to resume a market via governance
	MarketStateUpdateType_MARKET_STATE_UPDATE_TYPE_RESUME MarketStateUpdateType = 3
)

// Enum value maps for MarketStateUpdateType.
var (
	MarketStateUpdateType_name = map[int32]string{
		0: "MARKET_STATE_UPDATE_TYPE_UNSPECIFIED",
		1: "MARKET_STATE_UPDATE_TYPE_TERMINATE",
		2: "MARKET_STATE_UPDATE_TYPE_SUSPEND",
		3: "MARKET_STATE_UPDATE_TYPE_RESUME",
	}
	MarketStateUpdateType_value = map[string]int32{
		"MARKET_STATE_UPDATE_TYPE_UNSPECIFIED": 0,
		"MARKET_STATE_UPDATE_TYPE_TERMINATE":   1,
		"MARKET_STATE_UPDATE_TYPE_SUSPEND":     2,
		"MARKET_STATE_UPDATE_TYPE_RESUME":      3,
	}
)

func (x MarketStateUpdateType) Enum() *MarketStateUpdateType {
	p := new(MarketStateUpdateType)
	*p = x
	return p
}

func (x MarketStateUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketStateUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_governance_proto_enumTypes[1].Descriptor()
}

func (MarketStateUpdateType) Type() protoreflect.EnumType {
	return &file_vega_governance_proto_enumTypes[1]
}

func (x MarketStateUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketStateUpdateType.Descriptor instead.
func (MarketStateUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{1}
}

type GovernanceTransferType int32

const (
	GovernanceTransferType_GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED    GovernanceTransferType = 0
	GovernanceTransferType_GOVERNANCE_TRANSFER_TYPE_ALL_OR_NOTHING GovernanceTransferType = 1
	GovernanceTransferType_GOVERNANCE_TRANSFER_TYPE_BEST_EFFORT    GovernanceTransferType = 2
)

// Enum value maps for GovernanceTransferType.
var (
	GovernanceTransferType_name = map[int32]string{
		0: "GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED",
		1: "GOVERNANCE_TRANSFER_TYPE_ALL_OR_NOTHING",
		2: "GOVERNANCE_TRANSFER_TYPE_BEST_EFFORT",
	}
	GovernanceTransferType_value = map[string]int32{
		"GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED":    0,
		"GOVERNANCE_TRANSFER_TYPE_ALL_OR_NOTHING": 1,
		"GOVERNANCE_TRANSFER_TYPE_BEST_EFFORT":    2,
	}
)

func (x GovernanceTransferType) Enum() *GovernanceTransferType {
	p := new(GovernanceTransferType)
	*p = x
	return p
}

func (x GovernanceTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GovernanceTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_governance_proto_enumTypes[2].Descriptor()
}

func (GovernanceTransferType) Type() protoreflect.EnumType {
	return &file_vega_governance_proto_enumTypes[2]
}

func (x GovernanceTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GovernanceTransferType.Descriptor instead.
func (GovernanceTransferType) EnumDescriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{2}
}

// Proposal state transition:
// Open ->
//   - Passed -> Enacted.
//   - Passed -> Failed.
//   - Declined
//
// Rejected
// Proposal can enter Failed state from any other state
type Proposal_State int32

const (
	// Default value, always invalid
	Proposal_STATE_UNSPECIFIED Proposal_State = 0
	// Proposal enactment has failed - even though proposal has passed, its execution could not be performed
	Proposal_STATE_FAILED Proposal_State = 1
	// Proposal is open for voting
	Proposal_STATE_OPEN Proposal_State = 2
	// Proposal has gained enough support to be executed
	Proposal_STATE_PASSED Proposal_State = 3
	// Proposal wasn't accepted i.e. proposal terms failed validation due to wrong configuration or failed to meet network requirements.
	Proposal_STATE_REJECTED Proposal_State = 4
	// Proposal didn't get enough votes, e.g. either failed to gain required participation or majority level.
	Proposal_STATE_DECLINED Proposal_State = 5
	// Proposal enacted
	Proposal_STATE_ENACTED Proposal_State = 6
	// Waiting for node validation of the proposal
	Proposal_STATE_WAITING_FOR_NODE_VOTE Proposal_State = 7
)

// Enum value maps for Proposal_State.
var (
	Proposal_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_FAILED",
		2: "STATE_OPEN",
		3: "STATE_PASSED",
		4: "STATE_REJECTED",
		5: "STATE_DECLINED",
		6: "STATE_ENACTED",
		7: "STATE_WAITING_FOR_NODE_VOTE",
	}
	Proposal_State_value = map[string]int32{
		"STATE_UNSPECIFIED":           0,
		"STATE_FAILED":                1,
		"STATE_OPEN":                  2,
		"STATE_PASSED":                3,
		"STATE_REJECTED":              4,
		"STATE_DECLINED":              5,
		"STATE_ENACTED":               6,
		"STATE_WAITING_FOR_NODE_VOTE": 7,
	}
)

func (x Proposal_State) Enum() *Proposal_State {
	p := new(Proposal_State)
	*p = x
	return p
}

func (x Proposal_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Proposal_State) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_governance_proto_enumTypes[3].Descriptor()
}

func (Proposal_State) Type() protoreflect.EnumType {
	return &file_vega_governance_proto_enumTypes[3]
}

func (x Proposal_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Proposal_State.Descriptor instead.
func (Proposal_State) EnumDescriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{23, 0}
}

// Vote value
type Vote_Value int32

const (
	// Default value, always invalid
	Vote_VALUE_UNSPECIFIED Vote_Value = 0
	// Vote against the proposal
	Vote_VALUE_NO Vote_Value = 1
	// Vote in favour of the proposal
	Vote_VALUE_YES Vote_Value = 2
)

// Enum value maps for Vote_Value.
var (
	Vote_Value_name = map[int32]string{
		0: "VALUE_UNSPECIFIED",
		1: "VALUE_NO",
		2: "VALUE_YES",
	}
	Vote_Value_value = map[string]int32{
		"VALUE_UNSPECIFIED": 0,
		"VALUE_NO":          1,
		"VALUE_YES":         2,
	}
)

func (x Vote_Value) Enum() *Vote_Value {
	p := new(Vote_Value)
	*p = x
	return p
}

func (x Vote_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vote_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_governance_proto_enumTypes[4].Descriptor()
}

func (Vote_Value) Type() protoreflect.EnumType {
	return &file_vega_governance_proto_enumTypes[4]
}

func (x Vote_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vote_Value.Descriptor instead.
func (Vote_Value) EnumDescriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{24, 0}
}

// Spot product configuration
type SpotProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base asset ID.
	BaseAsset string `protobuf:"bytes,1,opt,name=base_asset,json=baseAsset,proto3" json:"base_asset,omitempty"`
	// Quote asset ID.
	QuoteAsset string `protobuf:"bytes,2,opt,name=quote_asset,json=quoteAsset,proto3" json:"quote_asset,omitempty"`
	// Product name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SpotProduct) Reset() {
	*x = SpotProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotProduct) ProtoMessage() {}

func (x *SpotProduct) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotProduct.ProtoReflect.Descriptor instead.
func (*SpotProduct) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{0}
}

func (x *SpotProduct) GetBaseAsset() string {
	if x != nil {
		return x.BaseAsset
	}
	return ""
}

func (x *SpotProduct) GetQuoteAsset() string {
	if x != nil {
		return x.QuoteAsset
	}
	return ""
}

func (x *SpotProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Future product configuration
type FutureProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset ID for the product's settlement asset.
	SettlementAsset string `protobuf:"bytes,1,opt,name=settlement_asset,json=settlementAsset,proto3" json:"settlement_asset,omitempty"`
	// Product quote name.
	QuoteName string `protobuf:"bytes,2,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	// Data source spec describing the data source for settlement.
	DataSourceSpecForSettlementData *DataSourceDefinition `protobuf:"bytes,3,opt,name=data_source_spec_for_settlement_data,json=dataSourceSpecForSettlementData,proto3" json:"data_source_spec_for_settlement_data,omitempty"`
	// The external data source spec describing the data source of trading termination.
	DataSourceSpecForTradingTermination *DataSourceDefinition `protobuf:"bytes,4,opt,name=data_source_spec_for_trading_termination,json=dataSourceSpecForTradingTermination,proto3" json:"data_source_spec_for_trading_termination,omitempty"`
	// Binding between the data source spec and the settlement data.
	DataSourceSpecBinding *DataSourceSpecToFutureBinding `protobuf:"bytes,5,opt,name=data_source_spec_binding,json=dataSourceSpecBinding,proto3" json:"data_source_spec_binding,omitempty"`
}

func (x *FutureProduct) Reset() {
	*x = FutureProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureProduct) ProtoMessage() {}

func (x *FutureProduct) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureProduct.ProtoReflect.Descriptor instead.
func (*FutureProduct) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{1}
}

func (x *FutureProduct) GetSettlementAsset() string {
	if x != nil {
		return x.SettlementAsset
	}
	return ""
}

func (x *FutureProduct) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *FutureProduct) GetDataSourceSpecForSettlementData() *DataSourceDefinition {
	if x != nil {
		return x.DataSourceSpecForSettlementData
	}
	return nil
}

func (x *FutureProduct) GetDataSourceSpecForTradingTermination() *DataSourceDefinition {
	if x != nil {
		return x.DataSourceSpecForTradingTermination
	}
	return nil
}

func (x *FutureProduct) GetDataSourceSpecBinding() *DataSourceSpecToFutureBinding {
	if x != nil {
		return x.DataSourceSpecBinding
	}
	return nil
}

// Perpetual product configuration
type PerpetualProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset ID for the product's settlement asset.
	SettlementAsset string `protobuf:"bytes,1,opt,name=settlement_asset,json=settlementAsset,proto3" json:"settlement_asset,omitempty"`
	// Product quote name.
	QuoteName string `protobuf:"bytes,2,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	// Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1].
	MarginFundingFactor string `protobuf:"bytes,3,opt,name=margin_funding_factor,json=marginFundingFactor,proto3" json:"margin_funding_factor,omitempty"`
	// Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1].
	InterestRate string `protobuf:"bytes,4,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	// Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
	ClampLowerBound string `protobuf:"bytes,5,opt,name=clamp_lower_bound,json=clampLowerBound,proto3" json:"clamp_lower_bound,omitempty"`
	// Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
	ClampUpperBound string `protobuf:"bytes,6,opt,name=clamp_upper_bound,json=clampUpperBound,proto3" json:"clamp_upper_bound,omitempty"`
	// Data source spec describing the data source for settlement schedule.
	DataSourceSpecForSettlementSchedule *DataSourceDefinition `protobuf:"bytes,7,opt,name=data_source_spec_for_settlement_schedule,json=dataSourceSpecForSettlementSchedule,proto3" json:"data_source_spec_for_settlement_schedule,omitempty"`
	// Data source spec describing the data source for settlement.
	DataSourceSpecForSettlementData *DataSourceDefinition `protobuf:"bytes,8,opt,name=data_source_spec_for_settlement_data,json=dataSourceSpecForSettlementData,proto3" json:"data_source_spec_for_settlement_data,omitempty"`
	// Binding between the data source spec and the settlement data.
	DataSourceSpecBinding *DataSourceSpecToPerpetualBinding `protobuf:"bytes,9,opt,name=data_source_spec_binding,json=dataSourceSpecBinding,proto3" json:"data_source_spec_binding,omitempty"`
}

func (x *PerpetualProduct) Reset() {
	*x = PerpetualProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerpetualProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerpetualProduct) ProtoMessage() {}

func (x *PerpetualProduct) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerpetualProduct.ProtoReflect.Descriptor instead.
func (*PerpetualProduct) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{2}
}

func (x *PerpetualProduct) GetSettlementAsset() string {
	if x != nil {
		return x.SettlementAsset
	}
	return ""
}

func (x *PerpetualProduct) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *PerpetualProduct) GetMarginFundingFactor() string {
	if x != nil {
		return x.MarginFundingFactor
	}
	return ""
}

func (x *PerpetualProduct) GetInterestRate() string {
	if x != nil {
		return x.InterestRate
	}
	return ""
}

func (x *PerpetualProduct) GetClampLowerBound() string {
	if x != nil {
		return x.ClampLowerBound
	}
	return ""
}

func (x *PerpetualProduct) GetClampUpperBound() string {
	if x != nil {
		return x.ClampUpperBound
	}
	return ""
}

func (x *PerpetualProduct) GetDataSourceSpecForSettlementSchedule() *DataSourceDefinition {
	if x != nil {
		return x.DataSourceSpecForSettlementSchedule
	}
	return nil
}

func (x *PerpetualProduct) GetDataSourceSpecForSettlementData() *DataSourceDefinition {
	if x != nil {
		return x.DataSourceSpecForSettlementData
	}
	return nil
}

func (x *PerpetualProduct) GetDataSourceSpecBinding() *DataSourceSpecToPerpetualBinding {
	if x != nil {
		return x.DataSourceSpecBinding
	}
	return nil
}

// Instrument configuration
type InstrumentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Instrument code, human-readable shortcode used to describe the instrument.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Product specification.
	//
	// Types that are assignable to Product:
	//
	//	*InstrumentConfiguration_Future
	//	*InstrumentConfiguration_Spot
	//	*InstrumentConfiguration_Perpetual
	Product isInstrumentConfiguration_Product `protobuf_oneof:"product"`
}

func (x *InstrumentConfiguration) Reset() {
	*x = InstrumentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentConfiguration) ProtoMessage() {}

func (x *InstrumentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentConfiguration.ProtoReflect.Descriptor instead.
func (*InstrumentConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{3}
}

func (x *InstrumentConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstrumentConfiguration) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (m *InstrumentConfiguration) GetProduct() isInstrumentConfiguration_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (x *InstrumentConfiguration) GetFuture() *FutureProduct {
	if x, ok := x.GetProduct().(*InstrumentConfiguration_Future); ok {
		return x.Future
	}
	return nil
}

func (x *InstrumentConfiguration) GetSpot() *SpotProduct {
	if x, ok := x.GetProduct().(*InstrumentConfiguration_Spot); ok {
		return x.Spot
	}
	return nil
}

func (x *InstrumentConfiguration) GetPerpetual() *PerpetualProduct {
	if x, ok := x.GetProduct().(*InstrumentConfiguration_Perpetual); ok {
		return x.Perpetual
	}
	return nil
}

type isInstrumentConfiguration_Product interface {
	isInstrumentConfiguration_Product()
}

type InstrumentConfiguration_Future struct {
	// Future.
	Future *FutureProduct `protobuf:"bytes,100,opt,name=future,proto3,oneof"`
}

type InstrumentConfiguration_Spot struct {
	// Spot.
	Spot *SpotProduct `protobuf:"bytes,101,opt,name=spot,proto3,oneof"`
}

type InstrumentConfiguration_Perpetual struct {
	// Perpetual.
	Perpetual *PerpetualProduct `protobuf:"bytes,102,opt,name=perpetual,proto3,oneof"`
}

func (*InstrumentConfiguration_Future) isInstrumentConfiguration_Product() {}

func (*InstrumentConfiguration_Spot) isInstrumentConfiguration_Product() {}

func (*InstrumentConfiguration_Perpetual) isInstrumentConfiguration_Product() {}

// Configuration for a new spot market on Vega
type NewSpotMarketConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New spot market instrument configuration.
	Instrument *InstrumentConfiguration `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Decimal places used for the new spot market, sets the smallest price increment on the book.
	DecimalPlaces uint64 `protobuf:"varint,2,opt,name=decimal_places,json=decimalPlaces,proto3" json:"decimal_places,omitempty"`
	// Optional new spot market metadata, tags.
	Metadata []string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// Price monitoring parameters.
	PriceMonitoringParameters *PriceMonitoringParameters `protobuf:"bytes,4,opt,name=price_monitoring_parameters,json=priceMonitoringParameters,proto3" json:"price_monitoring_parameters,omitempty"`
	// Specifies parameters related to target stake calculation.
	TargetStakeParameters *TargetStakeParameters `protobuf:"bytes,5,opt,name=target_stake_parameters,json=targetStakeParameters,proto3" json:"target_stake_parameters,omitempty"`
	// New spot market risk model parameters.
	//
	// Types that are assignable to RiskParameters:
	//
	//	*NewSpotMarketConfiguration_Simple
	//	*NewSpotMarketConfiguration_LogNormal
	RiskParameters isNewSpotMarketConfiguration_RiskParameters `protobuf_oneof:"risk_parameters"`
	// Decimal places for order sizes, sets what size the smallest order / position on the spot market can be.
	PositionDecimalPlaces int64 `protobuf:"varint,6,opt,name=position_decimal_places,json=positionDecimalPlaces,proto3" json:"position_decimal_places,omitempty"`
	// Specifies the liquidity provision SLA parameters.
	SlaParams *LiquiditySLAParameters `protobuf:"bytes,7,opt,name=sla_params,json=slaParams,proto3" json:"sla_params,omitempty"`
}

func (x *NewSpotMarketConfiguration) Reset() {
	*x = NewSpotMarketConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSpotMarketConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSpotMarketConfiguration) ProtoMessage() {}

func (x *NewSpotMarketConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSpotMarketConfiguration.ProtoReflect.Descriptor instead.
func (*NewSpotMarketConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{4}
}

func (x *NewSpotMarketConfiguration) GetInstrument() *InstrumentConfiguration {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *NewSpotMarketConfiguration) GetDecimalPlaces() uint64 {
	if x != nil {
		return x.DecimalPlaces
	}
	return 0
}

func (x *NewSpotMarketConfiguration) GetMetadata() []string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NewSpotMarketConfiguration) GetPriceMonitoringParameters() *PriceMonitoringParameters {
	if x != nil {
		return x.PriceMonitoringParameters
	}
	return nil
}

func (x *NewSpotMarketConfiguration) GetTargetStakeParameters() *TargetStakeParameters {
	if x != nil {
		return x.TargetStakeParameters
	}
	return nil
}

func (m *NewSpotMarketConfiguration) GetRiskParameters() isNewSpotMarketConfiguration_RiskParameters {
	if m != nil {
		return m.RiskParameters
	}
	return nil
}

func (x *NewSpotMarketConfiguration) GetSimple() *SimpleModelParams {
	if x, ok := x.GetRiskParameters().(*NewSpotMarketConfiguration_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *NewSpotMarketConfiguration) GetLogNormal() *LogNormalRiskModel {
	if x, ok := x.GetRiskParameters().(*NewSpotMarketConfiguration_LogNormal); ok {
		return x.LogNormal
	}
	return nil
}

func (x *NewSpotMarketConfiguration) GetPositionDecimalPlaces() int64 {
	if x != nil {
		return x.PositionDecimalPlaces
	}
	return 0
}

func (x *NewSpotMarketConfiguration) GetSlaParams() *LiquiditySLAParameters {
	if x != nil {
		return x.SlaParams
	}
	return nil
}

type isNewSpotMarketConfiguration_RiskParameters interface {
	isNewSpotMarketConfiguration_RiskParameters()
}

type NewSpotMarketConfiguration_Simple struct {
	// Simple risk model parameters, valid only if MODEL_SIMPLE is selected.
	Simple *SimpleModelParams `protobuf:"bytes,100,opt,name=simple,proto3,oneof"`
}

type NewSpotMarketConfiguration_LogNormal struct {
	// Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.
	LogNormal *LogNormalRiskModel `protobuf:"bytes,101,opt,name=log_normal,json=logNormal,proto3,oneof"`
}

func (*NewSpotMarketConfiguration_Simple) isNewSpotMarketConfiguration_RiskParameters() {}

func (*NewSpotMarketConfiguration_LogNormal) isNewSpotMarketConfiguration_RiskParameters() {}

// Configuration for a new futures market on Vega
type NewMarketConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New futures market instrument configuration.
	Instrument *InstrumentConfiguration `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Decimal places used for the new futures market, sets the smallest price increment on the book.
	DecimalPlaces uint64 `protobuf:"varint,2,opt,name=decimal_places,json=decimalPlaces,proto3" json:"decimal_places,omitempty"`
	// Optional new futures market metadata, tags.
	Metadata []string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// Price monitoring parameters.
	PriceMonitoringParameters *PriceMonitoringParameters `protobuf:"bytes,4,opt,name=price_monitoring_parameters,json=priceMonitoringParameters,proto3" json:"price_monitoring_parameters,omitempty"`
	// Liquidity monitoring parameters.
	LiquidityMonitoringParameters *LiquidityMonitoringParameters `protobuf:"bytes,5,opt,name=liquidity_monitoring_parameters,json=liquidityMonitoringParameters,proto3" json:"liquidity_monitoring_parameters,omitempty"`
	// New futures market risk model parameters.
	//
	// Types that are assignable to RiskParameters:
	//
	//	*NewMarketConfiguration_Simple
	//	*NewMarketConfiguration_LogNormal
	RiskParameters isNewMarketConfiguration_RiskParameters `protobuf_oneof:"risk_parameters"`
	// Decimal places for order sizes, sets what size the smallest order / position on the futures market can be.
	PositionDecimalPlaces int64 `protobuf:"varint,6,opt,name=position_decimal_places,json=positionDecimalPlaces,proto3" json:"position_decimal_places,omitempty"`
	// Percentage move up and down from the mid price which specifies the range of
	// price levels over which automated liquidity provision orders will be deployed.
	LpPriceRange string `protobuf:"bytes,8,opt,name=lp_price_range,json=lpPriceRange,proto3" json:"lp_price_range,omitempty"`
	// Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
	LinearSlippageFactor string `protobuf:"bytes,9,opt,name=linear_slippage_factor,json=linearSlippageFactor,proto3" json:"linear_slippage_factor,omitempty"`
	// Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
	QuadraticSlippageFactor string `protobuf:"bytes,10,opt,name=quadratic_slippage_factor,json=quadraticSlippageFactor,proto3" json:"quadratic_slippage_factor,omitempty"`
	// Successor configuration. If this proposal is meant to succeed a given market, then this should be set.
	Successor *SuccessorConfiguration `protobuf:"bytes,11,opt,name=successor,proto3,oneof" json:"successor,omitempty"`
}

func (x *NewMarketConfiguration) Reset() {
	*x = NewMarketConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMarketConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMarketConfiguration) ProtoMessage() {}

func (x *NewMarketConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMarketConfiguration.ProtoReflect.Descriptor instead.
func (*NewMarketConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{5}
}

func (x *NewMarketConfiguration) GetInstrument() *InstrumentConfiguration {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *NewMarketConfiguration) GetDecimalPlaces() uint64 {
	if x != nil {
		return x.DecimalPlaces
	}
	return 0
}

func (x *NewMarketConfiguration) GetMetadata() []string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NewMarketConfiguration) GetPriceMonitoringParameters() *PriceMonitoringParameters {
	if x != nil {
		return x.PriceMonitoringParameters
	}
	return nil
}

func (x *NewMarketConfiguration) GetLiquidityMonitoringParameters() *LiquidityMonitoringParameters {
	if x != nil {
		return x.LiquidityMonitoringParameters
	}
	return nil
}

func (m *NewMarketConfiguration) GetRiskParameters() isNewMarketConfiguration_RiskParameters {
	if m != nil {
		return m.RiskParameters
	}
	return nil
}

func (x *NewMarketConfiguration) GetSimple() *SimpleModelParams {
	if x, ok := x.GetRiskParameters().(*NewMarketConfiguration_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *NewMarketConfiguration) GetLogNormal() *LogNormalRiskModel {
	if x, ok := x.GetRiskParameters().(*NewMarketConfiguration_LogNormal); ok {
		return x.LogNormal
	}
	return nil
}

func (x *NewMarketConfiguration) GetPositionDecimalPlaces() int64 {
	if x != nil {
		return x.PositionDecimalPlaces
	}
	return 0
}

func (x *NewMarketConfiguration) GetLpPriceRange() string {
	if x != nil {
		return x.LpPriceRange
	}
	return ""
}

func (x *NewMarketConfiguration) GetLinearSlippageFactor() string {
	if x != nil {
		return x.LinearSlippageFactor
	}
	return ""
}

func (x *NewMarketConfiguration) GetQuadraticSlippageFactor() string {
	if x != nil {
		return x.QuadraticSlippageFactor
	}
	return ""
}

func (x *NewMarketConfiguration) GetSuccessor() *SuccessorConfiguration {
	if x != nil {
		return x.Successor
	}
	return nil
}

type isNewMarketConfiguration_RiskParameters interface {
	isNewMarketConfiguration_RiskParameters()
}

type NewMarketConfiguration_Simple struct {
	// Simple risk model parameters, valid only if MODEL_SIMPLE is selected.
	Simple *SimpleModelParams `protobuf:"bytes,100,opt,name=simple,proto3,oneof"`
}

type NewMarketConfiguration_LogNormal struct {
	// Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.
	LogNormal *LogNormalRiskModel `protobuf:"bytes,101,opt,name=log_normal,json=logNormal,proto3,oneof"`
}

func (*NewMarketConfiguration_Simple) isNewMarketConfiguration_RiskParameters() {}

func (*NewMarketConfiguration_LogNormal) isNewMarketConfiguration_RiskParameters() {}

// New spot market on Vega
type NewSpotMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of the new spot market.
	Changes *NewSpotMarketConfiguration `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *NewSpotMarket) Reset() {
	*x = NewSpotMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSpotMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSpotMarket) ProtoMessage() {}

func (x *NewSpotMarket) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSpotMarket.ProtoReflect.Descriptor instead.
func (*NewSpotMarket) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{6}
}

func (x *NewSpotMarket) GetChanges() *NewSpotMarketConfiguration {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Configuration required to turn a new market proposal in to a successor market proposal.
type SuccessorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the market that the successor should take over from.
	ParentMarketId string `protobuf:"bytes,1,opt,name=parent_market_id,json=parentMarketId,proto3" json:"parent_market_id,omitempty"`
	// A decimal value between or equal to 0 and 1, specifying the fraction of the insurance pool balance that is carried over from the parent market to the successor.
	InsurancePoolFraction string `protobuf:"bytes,2,opt,name=insurance_pool_fraction,json=insurancePoolFraction,proto3" json:"insurance_pool_fraction,omitempty"`
}

func (x *SuccessorConfiguration) Reset() {
	*x = SuccessorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessorConfiguration) ProtoMessage() {}

func (x *SuccessorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessorConfiguration.ProtoReflect.Descriptor instead.
func (*SuccessorConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{7}
}

func (x *SuccessorConfiguration) GetParentMarketId() string {
	if x != nil {
		return x.ParentMarketId
	}
	return ""
}

func (x *SuccessorConfiguration) GetInsurancePoolFraction() string {
	if x != nil {
		return x.InsurancePoolFraction
	}
	return ""
}

// New market on Vega
type NewMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of the new market.
	Changes *NewMarketConfiguration `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *NewMarket) Reset() {
	*x = NewMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMarket) ProtoMessage() {}

func (x *NewMarket) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMarket.ProtoReflect.Descriptor instead.
func (*NewMarket) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{8}
}

func (x *NewMarket) GetChanges() *NewMarketConfiguration {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Update an existing market on Vega
type UpdateMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID the update is for.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Updated configuration of the futures market.
	Changes *UpdateMarketConfiguration `protobuf:"bytes,2,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *UpdateMarket) Reset() {
	*x = UpdateMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarket) ProtoMessage() {}

func (x *UpdateMarket) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarket.ProtoReflect.Descriptor instead.
func (*UpdateMarket) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateMarket) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *UpdateMarket) GetChanges() *UpdateMarketConfiguration {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Update an existing spot market on Vega
type UpdateSpotMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market ID the update is for.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Updated configuration of the spot market.
	Changes *UpdateSpotMarketConfiguration `protobuf:"bytes,2,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *UpdateSpotMarket) Reset() {
	*x = UpdateSpotMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSpotMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSpotMarket) ProtoMessage() {}

func (x *UpdateSpotMarket) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSpotMarket.ProtoReflect.Descriptor instead.
func (*UpdateSpotMarket) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateSpotMarket) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *UpdateSpotMarket) GetChanges() *UpdateSpotMarketConfiguration {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Configuration to update a futures market on Vega
type UpdateMarketConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated futures market instrument configuration.
	Instrument *UpdateInstrumentConfiguration `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Optional futures market metadata, tags.
	Metadata []string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// Price monitoring parameters.
	PriceMonitoringParameters *PriceMonitoringParameters `protobuf:"bytes,3,opt,name=price_monitoring_parameters,json=priceMonitoringParameters,proto3" json:"price_monitoring_parameters,omitempty"`
	// Liquidity monitoring parameters.
	LiquidityMonitoringParameters *LiquidityMonitoringParameters `protobuf:"bytes,4,opt,name=liquidity_monitoring_parameters,json=liquidityMonitoringParameters,proto3" json:"liquidity_monitoring_parameters,omitempty"`
	// Updated futures market risk model parameters.
	//
	// Types that are assignable to RiskParameters:
	//
	//	*UpdateMarketConfiguration_Simple
	//	*UpdateMarketConfiguration_LogNormal
	RiskParameters isUpdateMarketConfiguration_RiskParameters `protobuf_oneof:"risk_parameters"`
	// Percentage move up and down from the mid price which specifies the range of
	// price levels over which automated liquidity provision orders will be deployed.
	LpPriceRange string `protobuf:"bytes,5,opt,name=lp_price_range,json=lpPriceRange,proto3" json:"lp_price_range,omitempty"`
	// Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
	LinearSlippageFactor string `protobuf:"bytes,6,opt,name=linear_slippage_factor,json=linearSlippageFactor,proto3" json:"linear_slippage_factor,omitempty"`
	// Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
	QuadraticSlippageFactor string `protobuf:"bytes,7,opt,name=quadratic_slippage_factor,json=quadraticSlippageFactor,proto3" json:"quadratic_slippage_factor,omitempty"`
}

func (x *UpdateMarketConfiguration) Reset() {
	*x = UpdateMarketConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketConfiguration) ProtoMessage() {}

func (x *UpdateMarketConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketConfiguration.ProtoReflect.Descriptor instead.
func (*UpdateMarketConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateMarketConfiguration) GetInstrument() *UpdateInstrumentConfiguration {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *UpdateMarketConfiguration) GetMetadata() []string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateMarketConfiguration) GetPriceMonitoringParameters() *PriceMonitoringParameters {
	if x != nil {
		return x.PriceMonitoringParameters
	}
	return nil
}

func (x *UpdateMarketConfiguration) GetLiquidityMonitoringParameters() *LiquidityMonitoringParameters {
	if x != nil {
		return x.LiquidityMonitoringParameters
	}
	return nil
}

func (m *UpdateMarketConfiguration) GetRiskParameters() isUpdateMarketConfiguration_RiskParameters {
	if m != nil {
		return m.RiskParameters
	}
	return nil
}

func (x *UpdateMarketConfiguration) GetSimple() *SimpleModelParams {
	if x, ok := x.GetRiskParameters().(*UpdateMarketConfiguration_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *UpdateMarketConfiguration) GetLogNormal() *LogNormalRiskModel {
	if x, ok := x.GetRiskParameters().(*UpdateMarketConfiguration_LogNormal); ok {
		return x.LogNormal
	}
	return nil
}

func (x *UpdateMarketConfiguration) GetLpPriceRange() string {
	if x != nil {
		return x.LpPriceRange
	}
	return ""
}

func (x *UpdateMarketConfiguration) GetLinearSlippageFactor() string {
	if x != nil {
		return x.LinearSlippageFactor
	}
	return ""
}

func (x *UpdateMarketConfiguration) GetQuadraticSlippageFactor() string {
	if x != nil {
		return x.QuadraticSlippageFactor
	}
	return ""
}

type isUpdateMarketConfiguration_RiskParameters interface {
	isUpdateMarketConfiguration_RiskParameters()
}

type UpdateMarketConfiguration_Simple struct {
	// Simple risk model parameters, valid only if MODEL_SIMPLE is selected.
	Simple *SimpleModelParams `protobuf:"bytes,100,opt,name=simple,proto3,oneof"`
}

type UpdateMarketConfiguration_LogNormal struct {
	// Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.
	LogNormal *LogNormalRiskModel `protobuf:"bytes,101,opt,name=log_normal,json=logNormal,proto3,oneof"`
}

func (*UpdateMarketConfiguration_Simple) isUpdateMarketConfiguration_RiskParameters() {}

func (*UpdateMarketConfiguration_LogNormal) isUpdateMarketConfiguration_RiskParameters() {}

// Configuration to update a spot market on Vega
type UpdateSpotMarketConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional spot market metadata, tags.
	Metadata []string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// Price monitoring parameters.
	PriceMonitoringParameters *PriceMonitoringParameters `protobuf:"bytes,2,opt,name=price_monitoring_parameters,json=priceMonitoringParameters,proto3" json:"price_monitoring_parameters,omitempty"`
	// Specifies parameters related to target stake calculation.
	TargetStakeParameters *TargetStakeParameters `protobuf:"bytes,3,opt,name=target_stake_parameters,json=targetStakeParameters,proto3" json:"target_stake_parameters,omitempty"`
	// Update spot market risk model parameters.
	//
	// Types that are assignable to RiskParameters:
	//
	//	*UpdateSpotMarketConfiguration_Simple
	//	*UpdateSpotMarketConfiguration_LogNormal
	RiskParameters isUpdateSpotMarketConfiguration_RiskParameters `protobuf_oneof:"risk_parameters"`
	// Specifies the liquidity provision SLA parameters.
	SlaParams *LiquiditySLAParameters `protobuf:"bytes,4,opt,name=sla_params,json=slaParams,proto3" json:"sla_params,omitempty"`
}

func (x *UpdateSpotMarketConfiguration) Reset() {
	*x = UpdateSpotMarketConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSpotMarketConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSpotMarketConfiguration) ProtoMessage() {}

func (x *UpdateSpotMarketConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSpotMarketConfiguration.ProtoReflect.Descriptor instead.
func (*UpdateSpotMarketConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateSpotMarketConfiguration) GetMetadata() []string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateSpotMarketConfiguration) GetPriceMonitoringParameters() *PriceMonitoringParameters {
	if x != nil {
		return x.PriceMonitoringParameters
	}
	return nil
}

func (x *UpdateSpotMarketConfiguration) GetTargetStakeParameters() *TargetStakeParameters {
	if x != nil {
		return x.TargetStakeParameters
	}
	return nil
}

func (m *UpdateSpotMarketConfiguration) GetRiskParameters() isUpdateSpotMarketConfiguration_RiskParameters {
	if m != nil {
		return m.RiskParameters
	}
	return nil
}

func (x *UpdateSpotMarketConfiguration) GetSimple() *SimpleModelParams {
	if x, ok := x.GetRiskParameters().(*UpdateSpotMarketConfiguration_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *UpdateSpotMarketConfiguration) GetLogNormal() *LogNormalRiskModel {
	if x, ok := x.GetRiskParameters().(*UpdateSpotMarketConfiguration_LogNormal); ok {
		return x.LogNormal
	}
	return nil
}

func (x *UpdateSpotMarketConfiguration) GetSlaParams() *LiquiditySLAParameters {
	if x != nil {
		return x.SlaParams
	}
	return nil
}

type isUpdateSpotMarketConfiguration_RiskParameters interface {
	isUpdateSpotMarketConfiguration_RiskParameters()
}

type UpdateSpotMarketConfiguration_Simple struct {
	// Simple risk model parameters, valid only if MODEL_SIMPLE is selected.
	Simple *SimpleModelParams `protobuf:"bytes,100,opt,name=simple,proto3,oneof"`
}

type UpdateSpotMarketConfiguration_LogNormal struct {
	// Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.
	LogNormal *LogNormalRiskModel `protobuf:"bytes,101,opt,name=log_normal,json=logNormal,proto3,oneof"`
}

func (*UpdateSpotMarketConfiguration_Simple) isUpdateSpotMarketConfiguration_RiskParameters() {}

func (*UpdateSpotMarketConfiguration_LogNormal) isUpdateSpotMarketConfiguration_RiskParameters() {}

// Instrument configuration
type UpdateInstrumentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument code, human-readable shortcode used to describe the instrument.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Product specification.
	//
	// Types that are assignable to Product:
	//
	//	*UpdateInstrumentConfiguration_Future
	//	*UpdateInstrumentConfiguration_Perpetual
	Product isUpdateInstrumentConfiguration_Product `protobuf_oneof:"product"`
}

func (x *UpdateInstrumentConfiguration) Reset() {
	*x = UpdateInstrumentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstrumentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstrumentConfiguration) ProtoMessage() {}

func (x *UpdateInstrumentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstrumentConfiguration.ProtoReflect.Descriptor instead.
func (*UpdateInstrumentConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateInstrumentConfiguration) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (m *UpdateInstrumentConfiguration) GetProduct() isUpdateInstrumentConfiguration_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (x *UpdateInstrumentConfiguration) GetFuture() *UpdateFutureProduct {
	if x, ok := x.GetProduct().(*UpdateInstrumentConfiguration_Future); ok {
		return x.Future
	}
	return nil
}

func (x *UpdateInstrumentConfiguration) GetPerpetual() *UpdatePerpetualProduct {
	if x, ok := x.GetProduct().(*UpdateInstrumentConfiguration_Perpetual); ok {
		return x.Perpetual
	}
	return nil
}

type isUpdateInstrumentConfiguration_Product interface {
	isUpdateInstrumentConfiguration_Product()
}

type UpdateInstrumentConfiguration_Future struct {
	// Future.
	Future *UpdateFutureProduct `protobuf:"bytes,100,opt,name=future,proto3,oneof"`
}

type UpdateInstrumentConfiguration_Perpetual struct {
	// Perpetual.
	Perpetual *UpdatePerpetualProduct `protobuf:"bytes,101,opt,name=perpetual,proto3,oneof"`
}

func (*UpdateInstrumentConfiguration_Future) isUpdateInstrumentConfiguration_Product() {}

func (*UpdateInstrumentConfiguration_Perpetual) isUpdateInstrumentConfiguration_Product() {}

// Future product configuration
type UpdateFutureProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name/abbreviation of the quote name.
	QuoteName string `protobuf:"bytes,1,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	// The data source spec describing the data of settlement data.
	DataSourceSpecForSettlementData *DataSourceDefinition `protobuf:"bytes,2,opt,name=data_source_spec_for_settlement_data,json=dataSourceSpecForSettlementData,proto3" json:"data_source_spec_for_settlement_data,omitempty"`
	// The data source spec describing the data source for trading termination.
	DataSourceSpecForTradingTermination *DataSourceDefinition `protobuf:"bytes,3,opt,name=data_source_spec_for_trading_termination,json=dataSourceSpecForTradingTermination,proto3" json:"data_source_spec_for_trading_termination,omitempty"`
	// The binding between the data source spec and the settlement data.
	DataSourceSpecBinding *DataSourceSpecToFutureBinding `protobuf:"bytes,4,opt,name=data_source_spec_binding,json=dataSourceSpecBinding,proto3" json:"data_source_spec_binding,omitempty"`
}

func (x *UpdateFutureProduct) Reset() {
	*x = UpdateFutureProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFutureProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFutureProduct) ProtoMessage() {}

func (x *UpdateFutureProduct) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFutureProduct.ProtoReflect.Descriptor instead.
func (*UpdateFutureProduct) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateFutureProduct) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *UpdateFutureProduct) GetDataSourceSpecForSettlementData() *DataSourceDefinition {
	if x != nil {
		return x.DataSourceSpecForSettlementData
	}
	return nil
}

func (x *UpdateFutureProduct) GetDataSourceSpecForTradingTermination() *DataSourceDefinition {
	if x != nil {
		return x.DataSourceSpecForTradingTermination
	}
	return nil
}

func (x *UpdateFutureProduct) GetDataSourceSpecBinding() *DataSourceSpecToFutureBinding {
	if x != nil {
		return x.DataSourceSpecBinding
	}
	return nil
}

// Perpetual product configuration
type UpdatePerpetualProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name/abbreviation of the quote name.
	QuoteName string `protobuf:"bytes,1,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	// Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1].
	MarginFundingFactor string `protobuf:"bytes,2,opt,name=margin_funding_factor,json=marginFundingFactor,proto3" json:"margin_funding_factor,omitempty"`
	// Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1].
	InterestRate string `protobuf:"bytes,3,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	// Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
	ClampLowerBound string `protobuf:"bytes,4,opt,name=clamp_lower_bound,json=clampLowerBound,proto3" json:"clamp_lower_bound,omitempty"`
	// Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
	ClampUpperBound string `protobuf:"bytes,5,opt,name=clamp_upper_bound,json=clampUpperBound,proto3" json:"clamp_upper_bound,omitempty"`
	// Data source spec describing the data source for settlement schedule.
	DataSourceSpecForSettlementSchedule *DataSourceDefinition `protobuf:"bytes,6,opt,name=data_source_spec_for_settlement_schedule,json=dataSourceSpecForSettlementSchedule,proto3" json:"data_source_spec_for_settlement_schedule,omitempty"`
	// Data source spec describing the data source for settlement.
	DataSourceSpecForSettlementData *DataSourceDefinition `protobuf:"bytes,7,opt,name=data_source_spec_for_settlement_data,json=dataSourceSpecForSettlementData,proto3" json:"data_source_spec_for_settlement_data,omitempty"`
	// Binding between the data source spec and the settlement data.
	DataSourceSpecBinding *DataSourceSpecToPerpetualBinding `protobuf:"bytes,8,opt,name=data_source_spec_binding,json=dataSourceSpecBinding,proto3" json:"data_source_spec_binding,omitempty"`
}

func (x *UpdatePerpetualProduct) Reset() {
	*x = UpdatePerpetualProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePerpetualProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePerpetualProduct) ProtoMessage() {}

func (x *UpdatePerpetualProduct) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePerpetualProduct.ProtoReflect.Descriptor instead.
func (*UpdatePerpetualProduct) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{15}
}

func (x *UpdatePerpetualProduct) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *UpdatePerpetualProduct) GetMarginFundingFactor() string {
	if x != nil {
		return x.MarginFundingFactor
	}
	return ""
}

func (x *UpdatePerpetualProduct) GetInterestRate() string {
	if x != nil {
		return x.InterestRate
	}
	return ""
}

func (x *UpdatePerpetualProduct) GetClampLowerBound() string {
	if x != nil {
		return x.ClampLowerBound
	}
	return ""
}

func (x *UpdatePerpetualProduct) GetClampUpperBound() string {
	if x != nil {
		return x.ClampUpperBound
	}
	return ""
}

func (x *UpdatePerpetualProduct) GetDataSourceSpecForSettlementSchedule() *DataSourceDefinition {
	if x != nil {
		return x.DataSourceSpecForSettlementSchedule
	}
	return nil
}

func (x *UpdatePerpetualProduct) GetDataSourceSpecForSettlementData() *DataSourceDefinition {
	if x != nil {
		return x.DataSourceSpecForSettlementData
	}
	return nil
}

func (x *UpdatePerpetualProduct) GetDataSourceSpecBinding() *DataSourceSpecToPerpetualBinding {
	if x != nil {
		return x.DataSourceSpecBinding
	}
	return nil
}

// Update network configuration on Vega
type UpdateNetworkParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The network parameter to update.
	Changes *NetworkParameter `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *UpdateNetworkParameter) Reset() {
	*x = UpdateNetworkParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkParameter) ProtoMessage() {}

func (x *UpdateNetworkParameter) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkParameter.ProtoReflect.Descriptor instead.
func (*UpdateNetworkParameter) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateNetworkParameter) GetChanges() *NetworkParameter {
	if x != nil {
		return x.Changes
	}
	return nil
}

// New asset on Vega
type NewAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration of the new asset.
	Changes *AssetDetails `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *NewAsset) Reset() {
	*x = NewAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAsset) ProtoMessage() {}

func (x *NewAsset) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAsset.ProtoReflect.Descriptor instead.
func (*NewAsset) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{17}
}

func (x *NewAsset) GetChanges() *AssetDetails {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Update an existing asset on Vega
type UpdateAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset ID the update is for.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// Changes to apply on an existing asset.
	Changes *AssetDetailsUpdate `protobuf:"bytes,2,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *UpdateAsset) Reset() {
	*x = UpdateAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAsset) ProtoMessage() {}

func (x *UpdateAsset) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAsset.ProtoReflect.Descriptor instead.
func (*UpdateAsset) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateAsset) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *UpdateAsset) GetChanges() *AssetDetailsUpdate {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Freeform proposal
// This message is just used as a placeholder to sort out the nature of the
// proposal once parsed.
type NewFreeform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewFreeform) Reset() {
	*x = NewFreeform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFreeform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFreeform) ProtoMessage() {}

func (x *NewFreeform) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFreeform.ProtoReflect.Descriptor instead.
func (*NewFreeform) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{19}
}

// Terms for a governance proposal on Vega
type ProposalTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp as Unix time in seconds when voting closes for this proposal,
	// constrained by `minClose` and `maxClose` network parameters.
	ClosingTimestamp int64 `protobuf:"varint,1,opt,name=closing_timestamp,json=closingTimestamp,proto3" json:"closing_timestamp,omitempty"`
	// Timestamp as Unix time in seconds when proposal gets enacted if passed,
	// constrained by `minEnact` and `maxEnact` network parameters.
	EnactmentTimestamp int64 `protobuf:"varint,2,opt,name=enactment_timestamp,json=enactmentTimestamp,proto3" json:"enactment_timestamp,omitempty"`
	// Validation timestamp as Unix time in seconds.
	ValidationTimestamp int64 `protobuf:"varint,3,opt,name=validation_timestamp,json=validationTimestamp,proto3" json:"validation_timestamp,omitempty"`
	// Changes being proposed.
	//
	// Types that are assignable to Change:
	//
	//	*ProposalTerms_UpdateMarket
	//	*ProposalTerms_NewMarket
	//	*ProposalTerms_UpdateNetworkParameter
	//	*ProposalTerms_NewAsset
	//	*ProposalTerms_NewFreeform
	//	*ProposalTerms_UpdateAsset
	//	*ProposalTerms_NewSpotMarket
	//	*ProposalTerms_UpdateSpotMarket
	//	*ProposalTerms_NewTransfer
	//	*ProposalTerms_CancelTransfer
	//	*ProposalTerms_UpdateMarketState
	//	*ProposalTerms_UpdateReferralProgram
	Change isProposalTerms_Change `protobuf_oneof:"change"`
}

func (x *ProposalTerms) Reset() {
	*x = ProposalTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalTerms) ProtoMessage() {}

func (x *ProposalTerms) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalTerms.ProtoReflect.Descriptor instead.
func (*ProposalTerms) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{20}
}

func (x *ProposalTerms) GetClosingTimestamp() int64 {
	if x != nil {
		return x.ClosingTimestamp
	}
	return 0
}

func (x *ProposalTerms) GetEnactmentTimestamp() int64 {
	if x != nil {
		return x.EnactmentTimestamp
	}
	return 0
}

func (x *ProposalTerms) GetValidationTimestamp() int64 {
	if x != nil {
		return x.ValidationTimestamp
	}
	return 0
}

func (m *ProposalTerms) GetChange() isProposalTerms_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (x *ProposalTerms) GetUpdateMarket() *UpdateMarket {
	if x, ok := x.GetChange().(*ProposalTerms_UpdateMarket); ok {
		return x.UpdateMarket
	}
	return nil
}

func (x *ProposalTerms) GetNewMarket() *NewMarket {
	if x, ok := x.GetChange().(*ProposalTerms_NewMarket); ok {
		return x.NewMarket
	}
	return nil
}

func (x *ProposalTerms) GetUpdateNetworkParameter() *UpdateNetworkParameter {
	if x, ok := x.GetChange().(*ProposalTerms_UpdateNetworkParameter); ok {
		return x.UpdateNetworkParameter
	}
	return nil
}

func (x *ProposalTerms) GetNewAsset() *NewAsset {
	if x, ok := x.GetChange().(*ProposalTerms_NewAsset); ok {
		return x.NewAsset
	}
	return nil
}

func (x *ProposalTerms) GetNewFreeform() *NewFreeform {
	if x, ok := x.GetChange().(*ProposalTerms_NewFreeform); ok {
		return x.NewFreeform
	}
	return nil
}

func (x *ProposalTerms) GetUpdateAsset() *UpdateAsset {
	if x, ok := x.GetChange().(*ProposalTerms_UpdateAsset); ok {
		return x.UpdateAsset
	}
	return nil
}

func (x *ProposalTerms) GetNewSpotMarket() *NewSpotMarket {
	if x, ok := x.GetChange().(*ProposalTerms_NewSpotMarket); ok {
		return x.NewSpotMarket
	}
	return nil
}

func (x *ProposalTerms) GetUpdateSpotMarket() *UpdateSpotMarket {
	if x, ok := x.GetChange().(*ProposalTerms_UpdateSpotMarket); ok {
		return x.UpdateSpotMarket
	}
	return nil
}

func (x *ProposalTerms) GetNewTransfer() *NewTransfer {
	if x, ok := x.GetChange().(*ProposalTerms_NewTransfer); ok {
		return x.NewTransfer
	}
	return nil
}

func (x *ProposalTerms) GetCancelTransfer() *CancelTransfer {
	if x, ok := x.GetChange().(*ProposalTerms_CancelTransfer); ok {
		return x.CancelTransfer
	}
	return nil
}

func (x *ProposalTerms) GetUpdateMarketState() *UpdateMarketState {
	if x, ok := x.GetChange().(*ProposalTerms_UpdateMarketState); ok {
		return x.UpdateMarketState
	}
	return nil
}

func (x *ProposalTerms) GetUpdateReferralProgram() *UpdateReferralProgram {
	if x, ok := x.GetChange().(*ProposalTerms_UpdateReferralProgram); ok {
		return x.UpdateReferralProgram
	}
	return nil
}

type isProposalTerms_Change interface {
	isProposalTerms_Change()
}

type ProposalTerms_UpdateMarket struct {
	// Proposal change for modifying an existing futures market on Vega.
	UpdateMarket *UpdateMarket `protobuf:"bytes,101,opt,name=update_market,json=updateMarket,proto3,oneof"`
}

type ProposalTerms_NewMarket struct {
	// Proposal change for creating new futures market on Vega.
	NewMarket *NewMarket `protobuf:"bytes,102,opt,name=new_market,json=newMarket,proto3,oneof"`
}

type ProposalTerms_UpdateNetworkParameter struct {
	// Proposal change for updating Vega network parameters.
	UpdateNetworkParameter *UpdateNetworkParameter `protobuf:"bytes,103,opt,name=update_network_parameter,json=updateNetworkParameter,proto3,oneof"`
}

type ProposalTerms_NewAsset struct {
	// Proposal change for creating new assets on Vega.
	NewAsset *NewAsset `protobuf:"bytes,104,opt,name=new_asset,json=newAsset,proto3,oneof"`
}

type ProposalTerms_NewFreeform struct {
	// Proposal change for a freeform request, which can be voted on but does not change the behaviour of the system,
	// and can be used to gauge community sentiment.
	NewFreeform *NewFreeform `protobuf:"bytes,105,opt,name=new_freeform,json=newFreeform,proto3,oneof"`
}

type ProposalTerms_UpdateAsset struct {
	// Proposal change for updating an asset.
	UpdateAsset *UpdateAsset `protobuf:"bytes,106,opt,name=update_asset,json=updateAsset,proto3,oneof"`
}

type ProposalTerms_NewSpotMarket struct {
	// Proposal change for creating new spot market on Vega.
	NewSpotMarket *NewSpotMarket `protobuf:"bytes,107,opt,name=new_spot_market,json=newSpotMarket,proto3,oneof"`
}

type ProposalTerms_UpdateSpotMarket struct {
	// Proposal change for modifying an existing spot market on Vega.
	UpdateSpotMarket *UpdateSpotMarket `protobuf:"bytes,108,opt,name=update_spot_market,json=updateSpotMarket,proto3,oneof"`
}

type ProposalTerms_NewTransfer struct {
	// Proposal change for a governance transfer.
	NewTransfer *NewTransfer `protobuf:"bytes,109,opt,name=new_transfer,json=newTransfer,proto3,oneof"`
}

type ProposalTerms_CancelTransfer struct {
	// Cancel a governance transfer.
	CancelTransfer *CancelTransfer `protobuf:"bytes,110,opt,name=cancel_transfer,json=cancelTransfer,proto3,oneof"`
}

type ProposalTerms_UpdateMarketState struct {
	// Proposal change for updating the state of a market.
	UpdateMarketState *UpdateMarketState `protobuf:"bytes,111,opt,name=update_market_state,json=updateMarketState,proto3,oneof"`
}

type ProposalTerms_UpdateReferralProgram struct {
	// Proposal change for updating the referral program.
	UpdateReferralProgram *UpdateReferralProgram `protobuf:"bytes,112,opt,name=update_referral_program,json=updateReferralProgram,proto3,oneof"`
}

func (*ProposalTerms_UpdateMarket) isProposalTerms_Change() {}

func (*ProposalTerms_NewMarket) isProposalTerms_Change() {}

func (*ProposalTerms_UpdateNetworkParameter) isProposalTerms_Change() {}

func (*ProposalTerms_NewAsset) isProposalTerms_Change() {}

func (*ProposalTerms_NewFreeform) isProposalTerms_Change() {}

func (*ProposalTerms_UpdateAsset) isProposalTerms_Change() {}

func (*ProposalTerms_NewSpotMarket) isProposalTerms_Change() {}

func (*ProposalTerms_UpdateSpotMarket) isProposalTerms_Change() {}

func (*ProposalTerms_NewTransfer) isProposalTerms_Change() {}

func (*ProposalTerms_CancelTransfer) isProposalTerms_Change() {}

func (*ProposalTerms_UpdateMarketState) isProposalTerms_Change() {}

func (*ProposalTerms_UpdateReferralProgram) isProposalTerms_Change() {}

// Rationale behind a proposal.
type ProposalRationale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description to show a short title / something in case the link goes offline.
	// This is to be between 0 and 20k unicode characters.
	// This is mandatory for all proposals.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Title to be used to give a short description of the proposal in lists.
	// This is to be between 0 and 100 unicode characters.
	// This is mandatory for all proposals.
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ProposalRationale) Reset() {
	*x = ProposalRationale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalRationale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalRationale) ProtoMessage() {}

func (x *ProposalRationale) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalRationale.ProtoReflect.Descriptor instead.
func (*ProposalRationale) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{21}
}

func (x *ProposalRationale) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProposalRationale) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Governance data
type GovernanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Governance proposal that is being voted on.
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// All YES votes in favour of the proposal above.
	Yes []*Vote `protobuf:"bytes,2,rep,name=yes,proto3" json:"yes,omitempty"`
	// All NO votes against the proposal above.
	No []*Vote `protobuf:"bytes,3,rep,name=no,proto3" json:"no,omitempty"`
	// All latest YES votes by party which is guaranteed to be unique,
	// where key (string) is the party ID i.e. public key and
	// value (Vote) is the vote cast by the given party.
	YesParty map[string]*Vote `protobuf:"bytes,4,rep,name=yes_party,json=yesParty,proto3" json:"yes_party,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All latest NO votes by party which is guaranteed to be unique,
	// where key (string) is the party ID i.e. public key and
	// value (Vote) is the vote cast by the given party.
	NoParty map[string]*Vote `protobuf:"bytes,5,rep,name=no_party,json=noParty,proto3" json:"no_party,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GovernanceData) Reset() {
	*x = GovernanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceData) ProtoMessage() {}

func (x *GovernanceData) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceData.ProtoReflect.Descriptor instead.
func (*GovernanceData) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{22}
}

func (x *GovernanceData) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *GovernanceData) GetYes() []*Vote {
	if x != nil {
		return x.Yes
	}
	return nil
}

func (x *GovernanceData) GetNo() []*Vote {
	if x != nil {
		return x.No
	}
	return nil
}

func (x *GovernanceData) GetYesParty() map[string]*Vote {
	if x != nil {
		return x.YesParty
	}
	return nil
}

func (x *GovernanceData) GetNoParty() map[string]*Vote {
	if x != nil {
		return x.NoParty
	}
	return nil
}

// Governance proposal
type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique proposal ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Proposal reference.
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	// Party ID i.e. public key of the party submitting the proposal.
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Current state of the proposal, i.e. open, passed, failed etc.
	State Proposal_State `protobuf:"varint,4,opt,name=state,proto3,enum=vega.Proposal_State" json:"state,omitempty"`
	// Proposal timestamp for date and time as Unix time in nanoseconds when proposal was submitted to the network.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Proposal configuration and the actual change that is meant to be executed when proposal is enacted.
	Terms *ProposalTerms `protobuf:"bytes,6,opt,name=terms,proto3" json:"terms,omitempty"`
	// Reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses.
	Reason *ProposalError `protobuf:"varint,7,opt,name=reason,proto3,enum=vega.ProposalError,oneof" json:"reason,omitempty"`
	// Detailed error associated to the reason.
	ErrorDetails *string `protobuf:"bytes,8,opt,name=error_details,json=errorDetails,proto3,oneof" json:"error_details,omitempty"`
	// Rationale behind a proposal.
	Rationale *ProposalRationale `protobuf:"bytes,9,opt,name=rationale,proto3" json:"rationale,omitempty"`
	// Required vote participation for this proposal.
	RequiredParticipation string `protobuf:"bytes,10,opt,name=required_participation,json=requiredParticipation,proto3" json:"required_participation,omitempty"`
	// Required majority for this proposal.
	RequiredMajority string `protobuf:"bytes,11,opt,name=required_majority,json=requiredMajority,proto3" json:"required_majority,omitempty"`
	// Required participation from liquidity providers, optional but is required for market update proposal.
	RequiredLiquidityProviderParticipation *string `protobuf:"bytes,12,opt,name=required_liquidity_provider_participation,json=requiredLiquidityProviderParticipation,proto3,oneof" json:"required_liquidity_provider_participation,omitempty"`
	// Required majority from liquidity providers, optional but is required for market update proposal.
	RequiredLiquidityProviderMajority *string `protobuf:"bytes,13,opt,name=required_liquidity_provider_majority,json=requiredLiquidityProviderMajority,proto3,oneof" json:"required_liquidity_provider_majority,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{23}
}

func (x *Proposal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Proposal) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Proposal) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Proposal) GetState() Proposal_State {
	if x != nil {
		return x.State
	}
	return Proposal_STATE_UNSPECIFIED
}

func (x *Proposal) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Proposal) GetTerms() *ProposalTerms {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *Proposal) GetReason() ProposalError {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ProposalError_PROPOSAL_ERROR_UNSPECIFIED
}

func (x *Proposal) GetErrorDetails() string {
	if x != nil && x.ErrorDetails != nil {
		return *x.ErrorDetails
	}
	return ""
}

func (x *Proposal) GetRationale() *ProposalRationale {
	if x != nil {
		return x.Rationale
	}
	return nil
}

func (x *Proposal) GetRequiredParticipation() string {
	if x != nil {
		return x.RequiredParticipation
	}
	return ""
}

func (x *Proposal) GetRequiredMajority() string {
	if x != nil {
		return x.RequiredMajority
	}
	return ""
}

func (x *Proposal) GetRequiredLiquidityProviderParticipation() string {
	if x != nil && x.RequiredLiquidityProviderParticipation != nil {
		return *x.RequiredLiquidityProviderParticipation
	}
	return ""
}

func (x *Proposal) GetRequiredLiquidityProviderMajority() string {
	if x != nil && x.RequiredLiquidityProviderMajority != nil {
		return *x.RequiredLiquidityProviderMajority
	}
	return ""
}

// Governance vote
type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Voter's party ID.
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Which way the party voted.
	Value Vote_Value `protobuf:"varint,2,opt,name=value,proto3,enum=vega.Vote_Value" json:"value,omitempty"`
	// Proposal ID being voted on.
	ProposalId string `protobuf:"bytes,3,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// Timestamp in Unix nanoseconds when the vote was acknowledged by the network.
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Total number of governance token for the party that cast the vote.
	TotalGovernanceTokenBalance string `protobuf:"bytes,5,opt,name=total_governance_token_balance,json=totalGovernanceTokenBalance,proto3" json:"total_governance_token_balance,omitempty"`
	// The weight of this vote based on the total number of governance tokens.
	TotalGovernanceTokenWeight string `protobuf:"bytes,6,opt,name=total_governance_token_weight,json=totalGovernanceTokenWeight,proto3" json:"total_governance_token_weight,omitempty"`
	// The weight of the vote compared to the total amount of equity-like share on the market.
	TotalEquityLikeShareWeight string `protobuf:"bytes,7,opt,name=total_equity_like_share_weight,json=totalEquityLikeShareWeight,proto3" json:"total_equity_like_share_weight,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{24}
}

func (x *Vote) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *Vote) GetValue() Vote_Value {
	if x != nil {
		return x.Value
	}
	return Vote_VALUE_UNSPECIFIED
}

func (x *Vote) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *Vote) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Vote) GetTotalGovernanceTokenBalance() string {
	if x != nil {
		return x.TotalGovernanceTokenBalance
	}
	return ""
}

func (x *Vote) GetTotalGovernanceTokenWeight() string {
	if x != nil {
		return x.TotalGovernanceTokenWeight
	}
	return ""
}

func (x *Vote) GetTotalEquityLikeShareWeight() string {
	if x != nil {
		return x.TotalEquityLikeShareWeight
	}
	return ""
}

type UpdateReferralProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for change to update a referral program.
	Changes *ReferralProgram `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *UpdateReferralProgram) Reset() {
	*x = UpdateReferralProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReferralProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReferralProgram) ProtoMessage() {}

func (x *UpdateReferralProgram) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReferralProgram.ProtoReflect.Descriptor instead.
func (*UpdateReferralProgram) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateReferralProgram) GetChanges() *ReferralProgram {
	if x != nil {
		return x.Changes
	}
	return nil
}

type UpdateMarketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for governance-initiated change of a market's state
	Changes *UpdateMarketStateConfiguration `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *UpdateMarketState) Reset() {
	*x = UpdateMarketState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketState) ProtoMessage() {}

func (x *UpdateMarketState) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketState.ProtoReflect.Descriptor instead.
func (*UpdateMarketState) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateMarketState) GetChanges() *UpdateMarketStateConfiguration {
	if x != nil {
		return x.Changes
	}
	return nil
}

type UpdateMarketStateConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Type of the market update
	UpdateType MarketStateUpdateType `protobuf:"varint,2,opt,name=update_type,json=updateType,proto3,enum=vega.MarketStateUpdateType" json:"update_type,omitempty"`
	// Settlement price, relevant only for market termination for futures markets
	Price *string `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`
}

func (x *UpdateMarketStateConfiguration) Reset() {
	*x = UpdateMarketStateConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketStateConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketStateConfiguration) ProtoMessage() {}

func (x *UpdateMarketStateConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketStateConfiguration.ProtoReflect.Descriptor instead.
func (*UpdateMarketStateConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateMarketStateConfiguration) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *UpdateMarketStateConfiguration) GetUpdateType() MarketStateUpdateType {
	if x != nil {
		return x.UpdateType
	}
	return MarketStateUpdateType_MARKET_STATE_UPDATE_TYPE_UNSPECIFIED
}

func (x *UpdateMarketStateConfiguration) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

type CancelTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for cancellation of a governance-initiated transfer
	Changes *CancelTransferConfiguration `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *CancelTransfer) Reset() {
	*x = CancelTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransfer) ProtoMessage() {}

func (x *CancelTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransfer.ProtoReflect.Descriptor instead.
func (*CancelTransfer) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{28}
}

func (x *CancelTransfer) GetChanges() *CancelTransferConfiguration {
	if x != nil {
		return x.Changes
	}
	return nil
}

type CancelTransferConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the governance transfer proposal.
	TransferId string `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
}

func (x *CancelTransferConfiguration) Reset() {
	*x = CancelTransferConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTransferConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransferConfiguration) ProtoMessage() {}

func (x *CancelTransferConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransferConfiguration.ProtoReflect.Descriptor instead.
func (*CancelTransferConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{29}
}

func (x *CancelTransferConfiguration) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

// New governance transfer
type NewTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for a new transfer.
	Changes *NewTransferConfiguration `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *NewTransfer) Reset() {
	*x = NewTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTransfer) ProtoMessage() {}

func (x *NewTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTransfer.ProtoReflect.Descriptor instead.
func (*NewTransfer) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{30}
}

func (x *NewTransfer) GetChanges() *NewTransferConfiguration {
	if x != nil {
		return x.Changes
	}
	return nil
}

type NewTransferConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source account type, such as network treasury, market insurance pool
	SourceType AccountType `protobuf:"varint,1,opt,name=source_type,json=sourceType,proto3,enum=vega.AccountType" json:"source_type,omitempty"`
	// If network treasury, field is empty, otherwise uses the market ID
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// "All or nothing" or "best effort":
	// All or nothing: Transfers the specified amount or does not transfer anything
	// Best effort: Transfers the specified amount or the max allowable amount if this is less than the specified amount
	TransferType GovernanceTransferType `protobuf:"varint,3,opt,name=transfer_type,json=transferType,proto3,enum=vega.GovernanceTransferType" json:"transfer_type,omitempty"`
	// Maximum amount to transfer
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// ID of asset to transfer
	Asset string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	// Maximum fraction of the source account's balance to transfer as a decimal - i.e. 0.1 = 10% of the balance
	FractionOfBalance string `protobuf:"bytes,6,opt,name=fraction_of_balance,json=fractionOfBalance,proto3" json:"fraction_of_balance,omitempty"`
	// Specifies the account type to transfer to: reward pool, party, network insurance pool, market insurance pool
	DestinationType AccountType `protobuf:"varint,7,opt,name=destination_type,json=destinationType,proto3,enum=vega.AccountType" json:"destination_type,omitempty"`
	// Specifies the account to transfer to, depending on the account type:
	// Network treasury: leave empty
	// Party: party's public key
	// Market insurance pool: market ID
	Destination string `protobuf:"bytes,8,opt,name=destination,proto3" json:"destination,omitempty"`
	// Specific details of the transfer.
	//
	// Types that are assignable to Kind:
	//
	//	*NewTransferConfiguration_OneOff
	//	*NewTransferConfiguration_Recurring
	Kind isNewTransferConfiguration_Kind `protobuf_oneof:"kind"`
}

func (x *NewTransferConfiguration) Reset() {
	*x = NewTransferConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTransferConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTransferConfiguration) ProtoMessage() {}

func (x *NewTransferConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTransferConfiguration.ProtoReflect.Descriptor instead.
func (*NewTransferConfiguration) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{31}
}

func (x *NewTransferConfiguration) GetSourceType() AccountType {
	if x != nil {
		return x.SourceType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *NewTransferConfiguration) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NewTransferConfiguration) GetTransferType() GovernanceTransferType {
	if x != nil {
		return x.TransferType
	}
	return GovernanceTransferType_GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED
}

func (x *NewTransferConfiguration) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *NewTransferConfiguration) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *NewTransferConfiguration) GetFractionOfBalance() string {
	if x != nil {
		return x.FractionOfBalance
	}
	return ""
}

func (x *NewTransferConfiguration) GetDestinationType() AccountType {
	if x != nil {
		return x.DestinationType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *NewTransferConfiguration) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (m *NewTransferConfiguration) GetKind() isNewTransferConfiguration_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *NewTransferConfiguration) GetOneOff() *OneOffTransfer {
	if x, ok := x.GetKind().(*NewTransferConfiguration_OneOff); ok {
		return x.OneOff
	}
	return nil
}

func (x *NewTransferConfiguration) GetRecurring() *RecurringTransfer {
	if x, ok := x.GetKind().(*NewTransferConfiguration_Recurring); ok {
		return x.Recurring
	}
	return nil
}

type isNewTransferConfiguration_Kind interface {
	isNewTransferConfiguration_Kind()
}

type NewTransferConfiguration_OneOff struct {
	OneOff *OneOffTransfer `protobuf:"bytes,101,opt,name=one_off,json=oneOff,proto3,oneof"`
}

type NewTransferConfiguration_Recurring struct {
	Recurring *RecurringTransfer `protobuf:"bytes,102,opt,name=recurring,proto3,oneof"`
}

func (*NewTransferConfiguration_OneOff) isNewTransferConfiguration_Kind() {}

func (*NewTransferConfiguration_Recurring) isNewTransferConfiguration_Kind() {}

// Specific details for a one off transfer
type OneOffTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp in Unix nanoseconds for when the transfer should be delivered into the receiver's account.
	DeliverOn int64 `protobuf:"varint,1,opt,name=deliver_on,json=deliverOn,proto3" json:"deliver_on,omitempty"`
}

func (x *OneOffTransfer) Reset() {
	*x = OneOffTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOffTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOffTransfer) ProtoMessage() {}

func (x *OneOffTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOffTransfer.ProtoReflect.Descriptor instead.
func (*OneOffTransfer) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{32}
}

func (x *OneOffTransfer) GetDeliverOn() int64 {
	if x != nil {
		return x.DeliverOn
	}
	return 0
}

// Specific details for a recurring transfer
type RecurringTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartEpoch uint64 `protobuf:"varint,1,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	// Last epoch at which this transfer shall be paid.
	EndEpoch *uint64 `protobuf:"varint,2,opt,name=end_epoch,json=endEpoch,proto3,oneof" json:"end_epoch,omitempty"`
	// Optional parameter defining how a transfer is dispatched.
	DispatchStrategy *DispatchStrategy `protobuf:"bytes,3,opt,name=dispatch_strategy,json=dispatchStrategy,proto3,oneof" json:"dispatch_strategy,omitempty"`
}

func (x *RecurringTransfer) Reset() {
	*x = RecurringTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_governance_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringTransfer) ProtoMessage() {}

func (x *RecurringTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_vega_governance_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringTransfer.ProtoReflect.Descriptor instead.
func (*RecurringTransfer) Descriptor() ([]byte, []int) {
	return file_vega_governance_proto_rawDescGZIP(), []int{33}
}

func (x *RecurringTransfer) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *RecurringTransfer) GetEndEpoch() uint64 {
	if x != nil && x.EndEpoch != nil {
		return *x.EndEpoch
	}
	return 0
}

func (x *RecurringTransfer) GetDispatchStrategy() *DispatchStrategy {
	if x != nil {
		return x.DispatchStrategy
	}
	return nil
}

var File_vega_governance_proto protoreflect.FileDescriptor

var file_vega_governance_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x76, 0x65, 0x67, 0x61, 0x1a, 0x11, 0x76,
	0x65, 0x67, 0x61, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x65,
	0x67, 0x61, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a,
	0x0b, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x95, 0x03, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x24,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x71, 0x0a, 0x28, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x18, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x54, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xcc, 0x04, 0x0a, 0x10, 0x50, 0x65, 0x72,
	0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61,
	0x6d, 0x70, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x71, 0x0a, 0x28, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x24, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x54, 0x6f,
	0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xdc, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x70,
	0x6f, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x53, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x70, 0x6f, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x65,
	0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xca, 0x04, 0x0a, 0x1a, 0x4e, 0x65, 0x77, 0x53, 0x70,
	0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x00,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x6c, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x53, 0x4c, 0x41, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x09, 0x73, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x88, 0x06, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x5f, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x6b, 0x0a, 0x1f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x1d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x6f, 0x67,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x17,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x70,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3a, 0x0a, 0x19, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x6c,
	0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x53, 0x6c,
	0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0x4b,
	0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x3a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x70, 0x6f, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x16, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x77,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70,
	0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x1f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x1d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f,
	0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x6c, 0x69,
	0x70, 0x70, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x71,
	0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xaf, 0x03, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x6f, 0x67,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0a,
	0x73, 0x6c, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x53, 0x4c, 0x41, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x09,
	0x73, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb1, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x70, 0x65,
	0x74, 0x75, 0x61, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x65, 0x72, 0x70,
	0x65, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x22, 0xf0, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x24, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x71, 0x0a, 0x28, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x23, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x54, 0x6f, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xa7, 0x04, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x71,
	0x0a, 0x28, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x69, 0x0a, 0x24, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x18,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x54, 0x6f, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x4a, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x4e, 0x65, 0x77,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0xb2, 0x07, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63,
	0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2f, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6e,
	0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x30,
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x58, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f,
	0x72, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x36, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x70, 0x6f,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x53, 0x70,
	0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x36, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x65,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x13, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x86,
	0x03, 0x0a, 0x0e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x03, 0x79, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x03, 0x79, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x02, 0x6e,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x3f, 0x0a, 0x09, 0x79, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x59, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x79, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6e,
	0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x1a, 0x47, 0x0a, 0x0d, 0x59, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x46, 0x0a, 0x0c, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x07, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x29, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x26,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x24, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x21, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x22,
	0xae, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x07,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x2c, 0x0a,
	0x2a, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x27, 0x0a, 0x25, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x91, 0x03, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x43, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6b, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3b, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x02, 0x22, 0x48, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x1b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0b, 0x4e, 0x65, 0x77,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0xd9, 0x03, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x2f,
	0x0a, 0x0e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x6e, 0x22,
	0xc4, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x01, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2a, 0xa2, 0x12, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4f, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x43, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4f, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x05,
	0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x06,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x07, 0x12,
	0x26, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0x0e, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x10, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x53, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x12, 0x12, 0x30, 0x0a, 0x2c, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x13, 0x12, 0x32, 0x0a,
	0x2e, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x14, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x15, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x16,
	0x12, 0x35, 0x0a, 0x31, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x17, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x49, 0x41, 0x54, 0x45, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x19, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x10, 0x1a, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x31,
	0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48,
	0x4f, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10,
	0x1f, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x20, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x53, 0x10, 0x21, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x22, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x23, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46,
	0x52, 0x45, 0x45, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x24, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x25, 0x12, 0x21, 0x0a, 0x1d,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x26, 0x12,
	0x31, 0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53,
	0x10, 0x27, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x53, 0x10, 0x28, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x29, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x50, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x2a, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x50, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c,
	0x41, 0x52, 0x47, 0x45, 0x10, 0x2b, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f,
	0x53, 0x4c, 0x49, 0x50, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2c, 0x12, 0x39,
	0x0a, 0x35, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x51, 0x55, 0x41, 0x44, 0x52, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x4c, 0x49, 0x50, 0x50,
	0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2d, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x2e, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x2f, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10,
	0x30, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x31, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x4f, 0x56, 0x45,
	0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x32, 0x12, 0x3e, 0x0a, 0x3a, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x33, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x34, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x4c, 0x41,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x35, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4c, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x36,
	0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x50, 0x45,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x37, 0x12, 0x2b,
	0x0a, 0x27, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x38, 0x2a, 0xb4, 0x01, 0x0a, 0x15,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x22, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d,
	0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45,
	0x10, 0x03, 0x2a, 0x99, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x24, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x47, 0x4f, 0x56, 0x45, 0x52,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x48, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x42, 0x27,
	0x5a, 0x25, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vega_governance_proto_rawDescOnce sync.Once
	file_vega_governance_proto_rawDescData = file_vega_governance_proto_rawDesc
)

func file_vega_governance_proto_rawDescGZIP() []byte {
	file_vega_governance_proto_rawDescOnce.Do(func() {
		file_vega_governance_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_governance_proto_rawDescData)
	})
	return file_vega_governance_proto_rawDescData
}

var file_vega_governance_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_vega_governance_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_vega_governance_proto_goTypes = []interface{}{
	(ProposalError)(0),                       // 0: vega.ProposalError
	(MarketStateUpdateType)(0),               // 1: vega.MarketStateUpdateType
	(GovernanceTransferType)(0),              // 2: vega.GovernanceTransferType
	(Proposal_State)(0),                      // 3: vega.Proposal.State
	(Vote_Value)(0),                          // 4: vega.Vote.Value
	(*SpotProduct)(nil),                      // 5: vega.SpotProduct
	(*FutureProduct)(nil),                    // 6: vega.FutureProduct
	(*PerpetualProduct)(nil),                 // 7: vega.PerpetualProduct
	(*InstrumentConfiguration)(nil),          // 8: vega.InstrumentConfiguration
	(*NewSpotMarketConfiguration)(nil),       // 9: vega.NewSpotMarketConfiguration
	(*NewMarketConfiguration)(nil),           // 10: vega.NewMarketConfiguration
	(*NewSpotMarket)(nil),                    // 11: vega.NewSpotMarket
	(*SuccessorConfiguration)(nil),           // 12: vega.SuccessorConfiguration
	(*NewMarket)(nil),                        // 13: vega.NewMarket
	(*UpdateMarket)(nil),                     // 14: vega.UpdateMarket
	(*UpdateSpotMarket)(nil),                 // 15: vega.UpdateSpotMarket
	(*UpdateMarketConfiguration)(nil),        // 16: vega.UpdateMarketConfiguration
	(*UpdateSpotMarketConfiguration)(nil),    // 17: vega.UpdateSpotMarketConfiguration
	(*UpdateInstrumentConfiguration)(nil),    // 18: vega.UpdateInstrumentConfiguration
	(*UpdateFutureProduct)(nil),              // 19: vega.UpdateFutureProduct
	(*UpdatePerpetualProduct)(nil),           // 20: vega.UpdatePerpetualProduct
	(*UpdateNetworkParameter)(nil),           // 21: vega.UpdateNetworkParameter
	(*NewAsset)(nil),                         // 22: vega.NewAsset
	(*UpdateAsset)(nil),                      // 23: vega.UpdateAsset
	(*NewFreeform)(nil),                      // 24: vega.NewFreeform
	(*ProposalTerms)(nil),                    // 25: vega.ProposalTerms
	(*ProposalRationale)(nil),                // 26: vega.ProposalRationale
	(*GovernanceData)(nil),                   // 27: vega.GovernanceData
	(*Proposal)(nil),                         // 28: vega.Proposal
	(*Vote)(nil),                             // 29: vega.Vote
	(*UpdateReferralProgram)(nil),            // 30: vega.UpdateReferralProgram
	(*UpdateMarketState)(nil),                // 31: vega.UpdateMarketState
	(*UpdateMarketStateConfiguration)(nil),   // 32: vega.UpdateMarketStateConfiguration
	(*CancelTransfer)(nil),                   // 33: vega.CancelTransfer
	(*CancelTransferConfiguration)(nil),      // 34: vega.CancelTransferConfiguration
	(*NewTransfer)(nil),                      // 35: vega.NewTransfer
	(*NewTransferConfiguration)(nil),         // 36: vega.NewTransferConfiguration
	(*OneOffTransfer)(nil),                   // 37: vega.OneOffTransfer
	(*RecurringTransfer)(nil),                // 38: vega.RecurringTransfer
	nil,                                      // 39: vega.GovernanceData.YesPartyEntry
	nil,                                      // 40: vega.GovernanceData.NoPartyEntry
	(*DataSourceDefinition)(nil),             // 41: vega.DataSourceDefinition
	(*DataSourceSpecToFutureBinding)(nil),    // 42: vega.DataSourceSpecToFutureBinding
	(*DataSourceSpecToPerpetualBinding)(nil), // 43: vega.DataSourceSpecToPerpetualBinding
	(*PriceMonitoringParameters)(nil),        // 44: vega.PriceMonitoringParameters
	(*TargetStakeParameters)(nil),            // 45: vega.TargetStakeParameters
	(*SimpleModelParams)(nil),                // 46: vega.SimpleModelParams
	(*LogNormalRiskModel)(nil),               // 47: vega.LogNormalRiskModel
	(*LiquiditySLAParameters)(nil),           // 48: vega.LiquiditySLAParameters
	(*LiquidityMonitoringParameters)(nil),    // 49: vega.LiquidityMonitoringParameters
	(*NetworkParameter)(nil),                 // 50: vega.NetworkParameter
	(*AssetDetails)(nil),                     // 51: vega.AssetDetails
	(*AssetDetailsUpdate)(nil),               // 52: vega.AssetDetailsUpdate
	(*ReferralProgram)(nil),                  // 53: vega.ReferralProgram
	(AccountType)(0),                         // 54: vega.AccountType
	(*DispatchStrategy)(nil),                 // 55: vega.DispatchStrategy
}
var file_vega_governance_proto_depIdxs = []int32{
	41, // 0: vega.FutureProduct.data_source_spec_for_settlement_data:type_name -> vega.DataSourceDefinition
	41, // 1: vega.FutureProduct.data_source_spec_for_trading_termination:type_name -> vega.DataSourceDefinition
	42, // 2: vega.FutureProduct.data_source_spec_binding:type_name -> vega.DataSourceSpecToFutureBinding
	41, // 3: vega.PerpetualProduct.data_source_spec_for_settlement_schedule:type_name -> vega.DataSourceDefinition
	41, // 4: vega.PerpetualProduct.data_source_spec_for_settlement_data:type_name -> vega.DataSourceDefinition
	43, // 5: vega.PerpetualProduct.data_source_spec_binding:type_name -> vega.DataSourceSpecToPerpetualBinding
	6,  // 6: vega.InstrumentConfiguration.future:type_name -> vega.FutureProduct
	5,  // 7: vega.InstrumentConfiguration.spot:type_name -> vega.SpotProduct
	7,  // 8: vega.InstrumentConfiguration.perpetual:type_name -> vega.PerpetualProduct
	8,  // 9: vega.NewSpotMarketConfiguration.instrument:type_name -> vega.InstrumentConfiguration
	44, // 10: vega.NewSpotMarketConfiguration.price_monitoring_parameters:type_name -> vega.PriceMonitoringParameters
	45, // 11: vega.NewSpotMarketConfiguration.target_stake_parameters:type_name -> vega.TargetStakeParameters
	46, // 12: vega.NewSpotMarketConfiguration.simple:type_name -> vega.SimpleModelParams
	47, // 13: vega.NewSpotMarketConfiguration.log_normal:type_name -> vega.LogNormalRiskModel
	48, // 14: vega.NewSpotMarketConfiguration.sla_params:type_name -> vega.LiquiditySLAParameters
	8,  // 15: vega.NewMarketConfiguration.instrument:type_name -> vega.InstrumentConfiguration
	44, // 16: vega.NewMarketConfiguration.price_monitoring_parameters:type_name -> vega.PriceMonitoringParameters
	49, // 17: vega.NewMarketConfiguration.liquidity_monitoring_parameters:type_name -> vega.LiquidityMonitoringParameters
	46, // 18: vega.NewMarketConfiguration.simple:type_name -> vega.SimpleModelParams
	47, // 19: vega.NewMarketConfiguration.log_normal:type_name -> vega.LogNormalRiskModel
	12, // 20: vega.NewMarketConfiguration.successor:type_name -> vega.SuccessorConfiguration
	9,  // 21: vega.NewSpotMarket.changes:type_name -> vega.NewSpotMarketConfiguration
	10, // 22: vega.NewMarket.changes:type_name -> vega.NewMarketConfiguration
	16, // 23: vega.UpdateMarket.changes:type_name -> vega.UpdateMarketConfiguration
	17, // 24: vega.UpdateSpotMarket.changes:type_name -> vega.UpdateSpotMarketConfiguration
	18, // 25: vega.UpdateMarketConfiguration.instrument:type_name -> vega.UpdateInstrumentConfiguration
	44, // 26: vega.UpdateMarketConfiguration.price_monitoring_parameters:type_name -> vega.PriceMonitoringParameters
	49, // 27: vega.UpdateMarketConfiguration.liquidity_monitoring_parameters:type_name -> vega.LiquidityMonitoringParameters
	46, // 28: vega.UpdateMarketConfiguration.simple:type_name -> vega.SimpleModelParams
	47, // 29: vega.UpdateMarketConfiguration.log_normal:type_name -> vega.LogNormalRiskModel
	44, // 30: vega.UpdateSpotMarketConfiguration.price_monitoring_parameters:type_name -> vega.PriceMonitoringParameters
	45, // 31: vega.UpdateSpotMarketConfiguration.target_stake_parameters:type_name -> vega.TargetStakeParameters
	46, // 32: vega.UpdateSpotMarketConfiguration.simple:type_name -> vega.SimpleModelParams
	47, // 33: vega.UpdateSpotMarketConfiguration.log_normal:type_name -> vega.LogNormalRiskModel
	48, // 34: vega.UpdateSpotMarketConfiguration.sla_params:type_name -> vega.LiquiditySLAParameters
	19, // 35: vega.UpdateInstrumentConfiguration.future:type_name -> vega.UpdateFutureProduct
	20, // 36: vega.UpdateInstrumentConfiguration.perpetual:type_name -> vega.UpdatePerpetualProduct
	41, // 37: vega.UpdateFutureProduct.data_source_spec_for_settlement_data:type_name -> vega.DataSourceDefinition
	41, // 38: vega.UpdateFutureProduct.data_source_spec_for_trading_termination:type_name -> vega.DataSourceDefinition
	42, // 39: vega.UpdateFutureProduct.data_source_spec_binding:type_name -> vega.DataSourceSpecToFutureBinding
	41, // 40: vega.UpdatePerpetualProduct.data_source_spec_for_settlement_schedule:type_name -> vega.DataSourceDefinition
	41, // 41: vega.UpdatePerpetualProduct.data_source_spec_for_settlement_data:type_name -> vega.DataSourceDefinition
	43, // 42: vega.UpdatePerpetualProduct.data_source_spec_binding:type_name -> vega.DataSourceSpecToPerpetualBinding
	50, // 43: vega.UpdateNetworkParameter.changes:type_name -> vega.NetworkParameter
	51, // 44: vega.NewAsset.changes:type_name -> vega.AssetDetails
	52, // 45: vega.UpdateAsset.changes:type_name -> vega.AssetDetailsUpdate
	14, // 46: vega.ProposalTerms.update_market:type_name -> vega.UpdateMarket
	13, // 47: vega.ProposalTerms.new_market:type_name -> vega.NewMarket
	21, // 48: vega.ProposalTerms.update_network_parameter:type_name -> vega.UpdateNetworkParameter
	22, // 49: vega.ProposalTerms.new_asset:type_name -> vega.NewAsset
	24, // 50: vega.ProposalTerms.new_freeform:type_name -> vega.NewFreeform
	23, // 51: vega.ProposalTerms.update_asset:type_name -> vega.UpdateAsset
	11, // 52: vega.ProposalTerms.new_spot_market:type_name -> vega.NewSpotMarket
	15, // 53: vega.ProposalTerms.update_spot_market:type_name -> vega.UpdateSpotMarket
	35, // 54: vega.ProposalTerms.new_transfer:type_name -> vega.NewTransfer
	33, // 55: vega.ProposalTerms.cancel_transfer:type_name -> vega.CancelTransfer
	31, // 56: vega.ProposalTerms.update_market_state:type_name -> vega.UpdateMarketState
	30, // 57: vega.ProposalTerms.update_referral_program:type_name -> vega.UpdateReferralProgram
	28, // 58: vega.GovernanceData.proposal:type_name -> vega.Proposal
	29, // 59: vega.GovernanceData.yes:type_name -> vega.Vote
	29, // 60: vega.GovernanceData.no:type_name -> vega.Vote
	39, // 61: vega.GovernanceData.yes_party:type_name -> vega.GovernanceData.YesPartyEntry
	40, // 62: vega.GovernanceData.no_party:type_name -> vega.GovernanceData.NoPartyEntry
	3,  // 63: vega.Proposal.state:type_name -> vega.Proposal.State
	25, // 64: vega.Proposal.terms:type_name -> vega.ProposalTerms
	0,  // 65: vega.Proposal.reason:type_name -> vega.ProposalError
	26, // 66: vega.Proposal.rationale:type_name -> vega.ProposalRationale
	4,  // 67: vega.Vote.value:type_name -> vega.Vote.Value
	53, // 68: vega.UpdateReferralProgram.changes:type_name -> vega.ReferralProgram
	32, // 69: vega.UpdateMarketState.changes:type_name -> vega.UpdateMarketStateConfiguration
	1,  // 70: vega.UpdateMarketStateConfiguration.update_type:type_name -> vega.MarketStateUpdateType
	34, // 71: vega.CancelTransfer.changes:type_name -> vega.CancelTransferConfiguration
	36, // 72: vega.NewTransfer.changes:type_name -> vega.NewTransferConfiguration
	54, // 73: vega.NewTransferConfiguration.source_type:type_name -> vega.AccountType
	2,  // 74: vega.NewTransferConfiguration.transfer_type:type_name -> vega.GovernanceTransferType
	54, // 75: vega.NewTransferConfiguration.destination_type:type_name -> vega.AccountType
	37, // 76: vega.NewTransferConfiguration.one_off:type_name -> vega.OneOffTransfer
	38, // 77: vega.NewTransferConfiguration.recurring:type_name -> vega.RecurringTransfer
	55, // 78: vega.RecurringTransfer.dispatch_strategy:type_name -> vega.DispatchStrategy
	29, // 79: vega.GovernanceData.YesPartyEntry.value:type_name -> vega.Vote
	29, // 80: vega.GovernanceData.NoPartyEntry.value:type_name -> vega.Vote
	81, // [81:81] is the sub-list for method output_type
	81, // [81:81] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_vega_governance_proto_init() }
func file_vega_governance_proto_init() {
	if File_vega_governance_proto != nil {
		return
	}
	file_vega_assets_proto_init()
	file_vega_data_source_proto_init()
	file_vega_markets_proto_init()
	file_vega_vega_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vega_governance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerpetualProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSpotMarketConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMarketConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSpotMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSpotMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSpotMarketConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstrumentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFutureProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePerpetualProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewFreeform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalRationale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReferralProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketStateConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelTransferConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTransferConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOffTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_governance_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecurringTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_governance_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*InstrumentConfiguration_Future)(nil),
		(*InstrumentConfiguration_Spot)(nil),
		(*InstrumentConfiguration_Perpetual)(nil),
	}
	file_vega_governance_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*NewSpotMarketConfiguration_Simple)(nil),
		(*NewSpotMarketConfiguration_LogNormal)(nil),
	}
	file_vega_governance_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*NewMarketConfiguration_Simple)(nil),
		(*NewMarketConfiguration_LogNormal)(nil),
	}
	file_vega_governance_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*UpdateMarketConfiguration_Simple)(nil),
		(*UpdateMarketConfiguration_LogNormal)(nil),
	}
	file_vega_governance_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*UpdateSpotMarketConfiguration_Simple)(nil),
		(*UpdateSpotMarketConfiguration_LogNormal)(nil),
	}
	file_vega_governance_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*UpdateInstrumentConfiguration_Future)(nil),
		(*UpdateInstrumentConfiguration_Perpetual)(nil),
	}
	file_vega_governance_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ProposalTerms_UpdateMarket)(nil),
		(*ProposalTerms_NewMarket)(nil),
		(*ProposalTerms_UpdateNetworkParameter)(nil),
		(*ProposalTerms_NewAsset)(nil),
		(*ProposalTerms_NewFreeform)(nil),
		(*ProposalTerms_UpdateAsset)(nil),
		(*ProposalTerms_NewSpotMarket)(nil),
		(*ProposalTerms_UpdateSpotMarket)(nil),
		(*ProposalTerms_NewTransfer)(nil),
		(*ProposalTerms_CancelTransfer)(nil),
		(*ProposalTerms_UpdateMarketState)(nil),
		(*ProposalTerms_UpdateReferralProgram)(nil),
	}
	file_vega_governance_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_vega_governance_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_vega_governance_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*NewTransferConfiguration_OneOff)(nil),
		(*NewTransferConfiguration_Recurring)(nil),
	}
	file_vega_governance_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_governance_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_governance_proto_goTypes,
		DependencyIndexes: file_vega_governance_proto_depIdxs,
		EnumInfos:         file_vega_governance_proto_enumTypes,
		MessageInfos:      file_vega_governance_proto_msgTypes,
	}.Build()
	File_vega_governance_proto = out.File
	file_vega_governance_proto_rawDesc = nil
	file_vega_governance_proto_goTypes = nil
	file_vega_governance_proto_depIdxs = nil
}
