// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/sqlsubscribers (interfaces: NotaryStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockNotaryStore is a mock of NotaryStore interface.
type MockNotaryStore struct {
	ctrl     *gomock.Controller
	recorder *MockNotaryStoreMockRecorder
}

// MockNotaryStoreMockRecorder is the mock recorder for MockNotaryStore.
type MockNotaryStoreMockRecorder struct {
	mock *MockNotaryStore
}

// NewMockNotaryStore creates a new mock instance.
func NewMockNotaryStore(ctrl *gomock.Controller) *MockNotaryStore {
	mock := &MockNotaryStore{ctrl: ctrl}
	mock.recorder = &MockNotaryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotaryStore) EXPECT() *MockNotaryStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockNotaryStore) Add(arg0 context.Context, arg1 *entities.NodeSignature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockNotaryStoreMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockNotaryStore)(nil).Add), arg0, arg1)
}
