// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: data-node/api/v1/trading_data.proto

package v1

import (
	vega "code.vegaprotocol.io/vega/protos/vega"
	v11 "code.vegaprotocol.io/vega/protos/vega/commands/v1"
	v1 "code.vegaprotocol.io/vega/protos/vega/events/v1"
	v12 "code.vegaprotocol.io/vega/protos/vega/oracles/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	IsFrom bool   `protobuf:"varint,2,opt,name=is_from,json=isFrom,proto3" json:"is_from,omitempty"`
	IsTo   bool   `protobuf:"varint,3,opt,name=is_to,json=isTo,proto3" json:"is_to,omitempty"`
}

func (x *TransfersRequest) Reset() {
	*x = TransfersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransfersRequest) ProtoMessage() {}

func (x *TransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransfersRequest.ProtoReflect.Descriptor instead.
func (*TransfersRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{0}
}

func (x *TransfersRequest) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *TransfersRequest) GetIsFrom() bool {
	if x != nil {
		return x.IsFrom
	}
	return false
}

func (x *TransfersRequest) GetIsTo() bool {
	if x != nil {
		return x.IsTo
	}
	return false
}

type TransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers []*v1.Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *TransfersResponse) Reset() {
	*x = TransfersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransfersResponse) ProtoMessage() {}

func (x *TransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransfersResponse.ProtoReflect.Descriptor instead.
func (*TransfersResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{1}
}

func (x *TransfersResponse) GetTransfers() []*v1.Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

// both fields optional but 1 of them required at least
// party = all delegation for a party
// node_id = all delegation for a node
// party_id + node_id = all delegation for a node for a given party
type DelegationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party    string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	NodeId   string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	EpochSeq string `protobuf:"bytes,3,opt,name=epoch_seq,json=epochSeq,proto3" json:"epoch_seq,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DelegationsRequest) Reset() {
	*x = DelegationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationsRequest) ProtoMessage() {}

func (x *DelegationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationsRequest.ProtoReflect.Descriptor instead.
func (*DelegationsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{2}
}

func (x *DelegationsRequest) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *DelegationsRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *DelegationsRequest) GetEpochSeq() string {
	if x != nil {
		return x.EpochSeq
	}
	return ""
}

func (x *DelegationsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DelegationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegations []*vega.Delegation `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations,omitempty"`
}

func (x *DelegationsResponse) Reset() {
	*x = DelegationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationsResponse) ProtoMessage() {}

func (x *DelegationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationsResponse.ProtoReflect.Descriptor instead.
func (*DelegationsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{3}
}

func (x *DelegationsResponse) GetDelegations() []*vega.Delegation {
	if x != nil {
		return x.Delegations
	}
	return nil
}

// Request to obsever all event related to delegation with the given filters
type ObserveDelegationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party  string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *ObserveDelegationsRequest) Reset() {
	*x = ObserveDelegationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveDelegationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveDelegationsRequest) ProtoMessage() {}

func (x *ObserveDelegationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveDelegationsRequest.ProtoReflect.Descriptor instead.
func (*ObserveDelegationsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{4}
}

func (x *ObserveDelegationsRequest) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *ObserveDelegationsRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// All events related to delegation with the given filters
type ObserveDelegationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegation *vega.Delegation `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation,omitempty"`
}

func (x *ObserveDelegationsResponse) Reset() {
	*x = ObserveDelegationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveDelegationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveDelegationsResponse) ProtoMessage() {}

func (x *ObserveDelegationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveDelegationsResponse.ProtoReflect.Descriptor instead.
func (*ObserveDelegationsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{5}
}

func (x *ObserveDelegationsResponse) GetDelegation() *vega.Delegation {
	if x != nil {
		return x.Delegation
	}
	return nil
}

type PartyStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *PartyStakeRequest) Reset() {
	*x = PartyStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyStakeRequest) ProtoMessage() {}

func (x *PartyStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyStakeRequest.ProtoReflect.Descriptor instead.
func (*PartyStakeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{6}
}

func (x *PartyStakeRequest) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

type PartyStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentStakeAvailable string             `protobuf:"bytes,1,opt,name=current_stake_available,json=currentStakeAvailable,proto3" json:"current_stake_available,omitempty"`
	StakeLinkings         []*v1.StakeLinking `protobuf:"bytes,2,rep,name=stake_linkings,json=stakeLinkings,proto3" json:"stake_linkings,omitempty"`
}

func (x *PartyStakeResponse) Reset() {
	*x = PartyStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyStakeResponse) ProtoMessage() {}

func (x *PartyStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyStakeResponse.ProtoReflect.Descriptor instead.
func (*PartyStakeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{7}
}

func (x *PartyStakeResponse) GetCurrentStakeAvailable() string {
	if x != nil {
		return x.CurrentStakeAvailable
	}
	return ""
}

func (x *PartyStakeResponse) GetStakeLinkings() []*v1.StakeLinking {
	if x != nil {
		return x.StakeLinkings
	}
	return nil
}

// Request for current Node data
type GetNodeDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodeDataRequest) Reset() {
	*x = GetNodeDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeDataRequest) ProtoMessage() {}

func (x *GetNodeDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeDataRequest.ProtoReflect.Descriptor instead.
func (*GetNodeDataRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{8}
}

// Response with node data
type GetNodeDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeData *vega.NodeData `protobuf:"bytes,1,opt,name=node_data,json=nodeData,proto3" json:"node_data,omitempty"`
}

func (x *GetNodeDataResponse) Reset() {
	*x = GetNodeDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeDataResponse) ProtoMessage() {}

func (x *GetNodeDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeDataResponse.ProtoReflect.Descriptor instead.
func (*GetNodeDataResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{9}
}

func (x *GetNodeDataResponse) GetNodeData() *vega.NodeData {
	if x != nil {
		return x.NodeData
	}
	return nil
}

// Request to list all nodes
type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{10}
}

// Response with all nodes
type GetNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*vega.Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse.ProtoReflect.Descriptor instead.
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{11}
}

func (x *GetNodesResponse) GetNodes() []*vega.Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Request to list all nodes
type GetNodeByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required id of node
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNodeByIDRequest) Reset() {
	*x = GetNodeByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeByIDRequest) ProtoMessage() {}

func (x *GetNodeByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeByIDRequest.ProtoReflect.Descriptor instead.
func (*GetNodeByIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{12}
}

func (x *GetNodeByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response with all nodes
type GetNodeByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *vega.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *GetNodeByIDResponse) Reset() {
	*x = GetNodeByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeByIDResponse) ProtoMessage() {}

func (x *GetNodeByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeByIDResponse.ProtoReflect.Descriptor instead.
func (*GetNodeByIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{13}
}

func (x *GetNodeByIDResponse) GetNode() *vega.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type GetEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional - if id omitted it gets the current epoch
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEpochRequest) Reset() {
	*x = GetEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpochRequest) ProtoMessage() {}

func (x *GetEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpochRequest.ProtoReflect.Descriptor instead.
func (*GetEpochRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{14}
}

func (x *GetEpochRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetEpochResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch *vega.Epoch `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *GetEpochResponse) Reset() {
	*x = GetEpochResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEpochResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEpochResponse) ProtoMessage() {}

func (x *GetEpochResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEpochResponse.ProtoReflect.Descriptor instead.
func (*GetEpochResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{15}
}

func (x *GetEpochResponse) GetEpoch() *vega.Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

type KeyRotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OldPubKey   string `protobuf:"bytes,2,opt,name=old_pub_key,json=oldPubKey,proto3" json:"old_pub_key,omitempty"`
	NewPubKey   string `protobuf:"bytes,3,opt,name=new_pub_key,json=newPubKey,proto3" json:"new_pub_key,omitempty"`
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *KeyRotation) Reset() {
	*x = KeyRotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRotation) ProtoMessage() {}

func (x *KeyRotation) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRotation.ProtoReflect.Descriptor instead.
func (*KeyRotation) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{16}
}

func (x *KeyRotation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *KeyRotation) GetOldPubKey() string {
	if x != nil {
		return x.OldPubKey
	}
	return ""
}

func (x *KeyRotation) GetNewPubKey() string {
	if x != nil {
		return x.NewPubKey
	}
	return ""
}

func (x *KeyRotation) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

// Request to list all key rotations
type GetKeyRotationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetKeyRotationsRequest) Reset() {
	*x = GetKeyRotationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRotationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRotationsRequest) ProtoMessage() {}

func (x *GetKeyRotationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRotationsRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRotationsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{17}
}

// Response with all key rotations
type GetKeyRotationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rotations []*KeyRotation `protobuf:"bytes,1,rep,name=rotations,proto3" json:"rotations,omitempty"`
}

func (x *GetKeyRotationsResponse) Reset() {
	*x = GetKeyRotationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRotationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRotationsResponse) ProtoMessage() {}

func (x *GetKeyRotationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRotationsResponse.ProtoReflect.Descriptor instead.
func (*GetKeyRotationsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{18}
}

func (x *GetKeyRotationsResponse) GetRotations() []*KeyRotation {
	if x != nil {
		return x.Rotations
	}
	return nil
}

// Request to list all key rotations per node
type GetKeyRotationsByNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required id of node
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GetKeyRotationsByNodeRequest) Reset() {
	*x = GetKeyRotationsByNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRotationsByNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRotationsByNodeRequest) ProtoMessage() {}

func (x *GetKeyRotationsByNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRotationsByNodeRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRotationsByNodeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{19}
}

func (x *GetKeyRotationsByNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// Response with all key rotations per node
type GetKeyRotationsByNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rotations []*KeyRotation `protobuf:"bytes,1,rep,name=rotations,proto3" json:"rotations,omitempty"`
}

func (x *GetKeyRotationsByNodeResponse) Reset() {
	*x = GetKeyRotationsByNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRotationsByNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRotationsByNodeResponse) ProtoMessage() {}

func (x *GetKeyRotationsByNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRotationsByNodeResponse.ProtoReflect.Descriptor instead.
func (*GetKeyRotationsByNodeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{20}
}

func (x *GetKeyRotationsByNodeResponse) GetRotations() []*KeyRotation {
	if x != nil {
		return x.Rotations
	}
	return nil
}

// Request for a list of all assets enabled on Vega
type AssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssetsRequest) Reset() {
	*x = AssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsRequest) ProtoMessage() {}

func (x *AssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsRequest.ProtoReflect.Descriptor instead.
func (*AssetsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{21}
}

// Response for a list of all assets enabled on Vega
type AssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more assets
	Assets []*vega.Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *AssetsResponse) Reset() {
	*x = AssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsResponse) ProtoMessage() {}

func (x *AssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsResponse.ProtoReflect.Descriptor instead.
func (*AssetsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{22}
}

func (x *AssetsResponse) GetAssets() []*vega.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

// Request for an asset given an asset identifier
type AssetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier, required field
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AssetByIDRequest) Reset() {
	*x = AssetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetByIDRequest) ProtoMessage() {}

func (x *AssetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetByIDRequest.ProtoReflect.Descriptor instead.
func (*AssetByIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{23}
}

func (x *AssetByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response for an asset given an asset identifier
type AssetByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An asset record, if found
	Asset *vega.Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *AssetByIDResponse) Reset() {
	*x = AssetByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetByIDResponse) ProtoMessage() {}

func (x *AssetByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetByIDResponse.ProtoReflect.Descriptor instead.
func (*AssetByIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{24}
}

func (x *AssetByIDResponse) GetAsset() *vega.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

// Request to specify the identifier of the resource to retrieve aggregated signatures for
type GetNodeSignaturesAggregateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource identifier, required field
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNodeSignaturesAggregateRequest) Reset() {
	*x = GetNodeSignaturesAggregateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSignaturesAggregateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSignaturesAggregateRequest) ProtoMessage() {}

func (x *GetNodeSignaturesAggregateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSignaturesAggregateRequest.ProtoReflect.Descriptor instead.
func (*GetNodeSignaturesAggregateRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{25}
}

func (x *GetNodeSignaturesAggregateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to specify the identifier of the resource to retrieve aggregated signatures for
type GetNodeSignaturesAggregateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more signatures
	Signatures []*v11.NodeSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *GetNodeSignaturesAggregateResponse) Reset() {
	*x = GetNodeSignaturesAggregateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSignaturesAggregateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSignaturesAggregateResponse) ProtoMessage() {}

func (x *GetNodeSignaturesAggregateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSignaturesAggregateResponse.ProtoReflect.Descriptor instead.
func (*GetNodeSignaturesAggregateResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{26}
}

func (x *GetNodeSignaturesAggregateResponse) GetSignatures() []*v11.NodeSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// Optional proposal state
type OptionalProposalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal state value
	Value vega.Proposal_State `protobuf:"varint,1,opt,name=value,proto3,enum=vega.Proposal_State" json:"value,omitempty"`
}

func (x *OptionalProposalState) Reset() {
	*x = OptionalProposalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalProposalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalProposalState) ProtoMessage() {}

func (x *OptionalProposalState) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalProposalState.ProtoReflect.Descriptor instead.
func (*OptionalProposalState) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{27}
}

func (x *OptionalProposalState) GetValue() vega.Proposal_State {
	if x != nil {
		return x.Value
	}
	return vega.Proposal_State(0)
}

// Request for a list of proposals
type GetProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetProposalsRequest) Reset() {
	*x = GetProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsRequest) ProtoMessage() {}

func (x *GetProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetProposalsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{28}
}

func (x *GetProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of proposals
type GetProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalsResponse) Reset() {
	*x = GetProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsResponse) ProtoMessage() {}

func (x *GetProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetProposalsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{29}
}

func (x *GetProposalsResponse) GetData() []*vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of proposals for a party
type GetProposalsByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,2,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetProposalsByPartyRequest) Reset() {
	*x = GetProposalsByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsByPartyRequest) ProtoMessage() {}

func (x *GetProposalsByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsByPartyRequest.ProtoReflect.Descriptor instead.
func (*GetProposalsByPartyRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{30}
}

func (x *GetProposalsByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *GetProposalsByPartyRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of proposals for a party
type GetProposalsByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalsByPartyResponse) Reset() {
	*x = GetProposalsByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalsByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalsByPartyResponse) ProtoMessage() {}

func (x *GetProposalsByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalsByPartyResponse.ProtoReflect.Descriptor instead.
func (*GetProposalsByPartyResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{31}
}

func (x *GetProposalsByPartyResponse) GetData() []*vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of votes for a party
type GetVotesByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *GetVotesByPartyRequest) Reset() {
	*x = GetVotesByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVotesByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesByPartyRequest) ProtoMessage() {}

func (x *GetVotesByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesByPartyRequest.ProtoReflect.Descriptor instead.
func (*GetVotesByPartyRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{32}
}

func (x *GetVotesByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// Response for a list of votes for a party
type GetVotesByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more votes
	Votes []*vega.Vote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *GetVotesByPartyResponse) Reset() {
	*x = GetVotesByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVotesByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesByPartyResponse) ProtoMessage() {}

func (x *GetVotesByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesByPartyResponse.ProtoReflect.Descriptor instead.
func (*GetVotesByPartyResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{33}
}

func (x *GetVotesByPartyResponse) GetVotes() []*vega.Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

// Request for a list of new market proposals
type GetNewMarketProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetNewMarketProposalsRequest) Reset() {
	*x = GetNewMarketProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewMarketProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewMarketProposalsRequest) ProtoMessage() {}

func (x *GetNewMarketProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewMarketProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNewMarketProposalsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{34}
}

func (x *GetNewMarketProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of new market proposals
type GetNewMarketProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNewMarketProposalsResponse) Reset() {
	*x = GetNewMarketProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewMarketProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewMarketProposalsResponse) ProtoMessage() {}

func (x *GetNewMarketProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewMarketProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNewMarketProposalsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{35}
}

func (x *GetNewMarketProposalsResponse) GetData() []*vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of update market proposals
type GetUpdateMarketProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,2,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetUpdateMarketProposalsRequest) Reset() {
	*x = GetUpdateMarketProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateMarketProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateMarketProposalsRequest) ProtoMessage() {}

func (x *GetUpdateMarketProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateMarketProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetUpdateMarketProposalsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{36}
}

func (x *GetUpdateMarketProposalsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *GetUpdateMarketProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of update market proposals
type GetUpdateMarketProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUpdateMarketProposalsResponse) Reset() {
	*x = GetUpdateMarketProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUpdateMarketProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpdateMarketProposalsResponse) ProtoMessage() {}

func (x *GetUpdateMarketProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpdateMarketProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetUpdateMarketProposalsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{37}
}

func (x *GetUpdateMarketProposalsResponse) GetData() []*vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of network parameter proposals
type GetNetworkParametersProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetNetworkParametersProposalsRequest) Reset() {
	*x = GetNetworkParametersProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkParametersProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkParametersProposalsRequest) ProtoMessage() {}

func (x *GetNetworkParametersProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkParametersProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkParametersProposalsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{38}
}

func (x *GetNetworkParametersProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of network parameter proposals
type GetNetworkParametersProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNetworkParametersProposalsResponse) Reset() {
	*x = GetNetworkParametersProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkParametersProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkParametersProposalsResponse) ProtoMessage() {}

func (x *GetNetworkParametersProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkParametersProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkParametersProposalsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{39}
}

func (x *GetNetworkParametersProposalsResponse) GetData() []*vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of new freeform proposals
type GetNewFreeformProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetNewFreeformProposalsRequest) Reset() {
	*x = GetNewFreeformProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewFreeformProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewFreeformProposalsRequest) ProtoMessage() {}

func (x *GetNewFreeformProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewFreeformProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNewFreeformProposalsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{40}
}

func (x *GetNewFreeformProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of new freeform proposals
type GetNewFreeformProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNewFreeformProposalsResponse) Reset() {
	*x = GetNewFreeformProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewFreeformProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewFreeformProposalsResponse) ProtoMessage() {}

func (x *GetNewFreeformProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewFreeformProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNewFreeformProposalsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{41}
}

func (x *GetNewFreeformProposalsResponse) GetData() []*vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a list of new asset proposals
type GetNewAssetProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional proposal state
	SelectInState *OptionalProposalState `protobuf:"bytes,1,opt,name=select_in_state,json=selectInState,proto3" json:"select_in_state,omitempty"`
}

func (x *GetNewAssetProposalsRequest) Reset() {
	*x = GetNewAssetProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAssetProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAssetProposalsRequest) ProtoMessage() {}

func (x *GetNewAssetProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAssetProposalsRequest.ProtoReflect.Descriptor instead.
func (*GetNewAssetProposalsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{42}
}

func (x *GetNewAssetProposalsRequest) GetSelectInState() *OptionalProposalState {
	if x != nil {
		return x.SelectInState
	}
	return nil
}

// Response for a list of new asset proposals
type GetNewAssetProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more governance data
	Data []*vega.GovernanceData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNewAssetProposalsResponse) Reset() {
	*x = GetNewAssetProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAssetProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAssetProposalsResponse) ProtoMessage() {}

func (x *GetNewAssetProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAssetProposalsResponse.ProtoReflect.Descriptor instead.
func (*GetNewAssetProposalsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{43}
}

func (x *GetNewAssetProposalsResponse) GetData() []*vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a governance proposal given a proposal identifier
type GetProposalByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal identifier, required field
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *GetProposalByIDRequest) Reset() {
	*x = GetProposalByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByIDRequest) ProtoMessage() {}

func (x *GetProposalByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByIDRequest.ProtoReflect.Descriptor instead.
func (*GetProposalByIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{44}
}

func (x *GetProposalByIDRequest) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

// Response for a governance proposal given a proposal identifier
type GetProposalByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Governance data, if found
	Data *vega.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalByIDResponse) Reset() {
	*x = GetProposalByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByIDResponse) ProtoMessage() {}

func (x *GetProposalByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByIDResponse.ProtoReflect.Descriptor instead.
func (*GetProposalByIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{45}
}

func (x *GetProposalByIDResponse) GetData() *vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request for a governance proposal given a proposal reference
type GetProposalByReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal reference. Required field
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *GetProposalByReferenceRequest) Reset() {
	*x = GetProposalByReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByReferenceRequest) ProtoMessage() {}

func (x *GetProposalByReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetProposalByReferenceRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{46}
}

func (x *GetProposalByReferenceRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Response for a governance proposal given a proposal reference
type GetProposalByReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Governance data, if found
	Data *vega.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProposalByReferenceResponse) Reset() {
	*x = GetProposalByReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProposalByReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProposalByReferenceResponse) ProtoMessage() {}

func (x *GetProposalByReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProposalByReferenceResponse.ProtoReflect.Descriptor instead.
func (*GetProposalByReferenceResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{47}
}

func (x *GetProposalByReferenceResponse) GetData() *vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to obsever all event related to governance
type ObserveGovernanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObserveGovernanceRequest) Reset() {
	*x = ObserveGovernanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveGovernanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveGovernanceRequest) ProtoMessage() {}

func (x *ObserveGovernanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveGovernanceRequest.ProtoReflect.Descriptor instead.
func (*ObserveGovernanceRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{48}
}

// All events related to governance
type ObserveGovernanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *vega.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ObserveGovernanceResponse) Reset() {
	*x = ObserveGovernanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveGovernanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveGovernanceResponse) ProtoMessage() {}

func (x *ObserveGovernanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveGovernanceResponse.ProtoReflect.Descriptor instead.
func (*ObserveGovernanceResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{49}
}

func (x *ObserveGovernanceResponse) GetData() *vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to subscribe to a stream of governance proposals for a party
type ObservePartyProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *ObservePartyProposalsRequest) Reset() {
	*x = ObservePartyProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyProposalsRequest) ProtoMessage() {}

func (x *ObservePartyProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyProposalsRequest.ProtoReflect.Descriptor instead.
func (*ObservePartyProposalsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{50}
}

func (x *ObservePartyProposalsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

type ObservePartyProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *vega.GovernanceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ObservePartyProposalsResponse) Reset() {
	*x = ObservePartyProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyProposalsResponse) ProtoMessage() {}

func (x *ObservePartyProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyProposalsResponse.ProtoReflect.Descriptor instead.
func (*ObservePartyProposalsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{51}
}

func (x *ObservePartyProposalsResponse) GetData() *vega.GovernanceData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to subscribe to a stream of governance votes for a proposal
type ObserveProposalVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proposal identifier, required field
	ProposalId string `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *ObserveProposalVotesRequest) Reset() {
	*x = ObserveProposalVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveProposalVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveProposalVotesRequest) ProtoMessage() {}

func (x *ObserveProposalVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveProposalVotesRequest.ProtoReflect.Descriptor instead.
func (*ObserveProposalVotesRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{52}
}

func (x *ObserveProposalVotesRequest) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

type ObserveProposalVotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote *vega.Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *ObserveProposalVotesResponse) Reset() {
	*x = ObserveProposalVotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveProposalVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveProposalVotesResponse) ProtoMessage() {}

func (x *ObserveProposalVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveProposalVotesResponse.ProtoReflect.Descriptor instead.
func (*ObserveProposalVotesResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{53}
}

func (x *ObserveProposalVotesResponse) GetVote() *vega.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// Request to subscribe to a stream of governance votes for a party
type ObservePartyVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *ObservePartyVotesRequest) Reset() {
	*x = ObservePartyVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyVotesRequest) ProtoMessage() {}

func (x *ObservePartyVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyVotesRequest.ProtoReflect.Descriptor instead.
func (*ObservePartyVotesRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{54}
}

func (x *ObservePartyVotesRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

type ObservePartyVotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote *vega.Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *ObservePartyVotesResponse) Reset() {
	*x = ObservePartyVotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservePartyVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservePartyVotesResponse) ProtoMessage() {}

func (x *ObservePartyVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservePartyVotesResponse.ProtoReflect.Descriptor instead.
func (*ObservePartyVotesResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{55}
}

func (x *ObservePartyVotesResponse) GetVote() *vega.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// Request to subscribe to a stream of MarginLevels data matching the given party identifier
// Optionally, the list can be additionally filtered by market
type MarginLevelsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarginLevelsSubscribeRequest) Reset() {
	*x = MarginLevelsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsSubscribeRequest) ProtoMessage() {}

func (x *MarginLevelsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarginLevelsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{56}
}

func (x *MarginLevelsSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *MarginLevelsSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarginLevelsSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarginLevels *vega.MarginLevels `protobuf:"bytes,1,opt,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
}

func (x *MarginLevelsSubscribeResponse) Reset() {
	*x = MarginLevelsSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsSubscribeResponse) ProtoMessage() {}

func (x *MarginLevelsSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsSubscribeResponse.ProtoReflect.Descriptor instead.
func (*MarginLevelsSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{57}
}

func (x *MarginLevelsSubscribeResponse) GetMarginLevels() *vega.MarginLevels {
	if x != nil {
		return x.MarginLevels
	}
	return nil
}

// Request for margin levels for a party
type MarginLevelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarginLevelsRequest) Reset() {
	*x = MarginLevelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsRequest) ProtoMessage() {}

func (x *MarginLevelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsRequest.ProtoReflect.Descriptor instead.
func (*MarginLevelsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{58}
}

func (x *MarginLevelsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *MarginLevelsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for margin levels for a party
type MarginLevelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more margin levels
	MarginLevels []*vega.MarginLevels `protobuf:"bytes,1,rep,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
}

func (x *MarginLevelsResponse) Reset() {
	*x = MarginLevelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginLevelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginLevelsResponse) ProtoMessage() {}

func (x *MarginLevelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginLevelsResponse.ProtoReflect.Descriptor instead.
func (*MarginLevelsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{59}
}

func (x *MarginLevelsResponse) GetMarginLevels() []*vega.MarginLevels {
	if x != nil {
		return x.MarginLevels
	}
	return nil
}

// Request to subscribe to a stream of MarketsData
// Optionally, the list can be additionally filtered by market
type MarketsDataSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketsDataSubscribeRequest) Reset() {
	*x = MarketsDataSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataSubscribeRequest) ProtoMessage() {}

func (x *MarketsDataSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketsDataSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{60}
}

func (x *MarketsDataSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarketsDataSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketData *vega.MarketData `protobuf:"bytes,1,opt,name=market_data,json=marketData,proto3" json:"market_data,omitempty"`
}

func (x *MarketsDataSubscribeResponse) Reset() {
	*x = MarketsDataSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataSubscribeResponse) ProtoMessage() {}

func (x *MarketsDataSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataSubscribeResponse.ProtoReflect.Descriptor instead.
func (*MarketsDataSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{61}
}

func (x *MarketsDataSubscribeResponse) GetMarketData() *vega.MarketData {
	if x != nil {
		return x.MarketData
	}
	return nil
}

// Request for market data for a market
type MarketDataByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketDataByIDRequest) Reset() {
	*x = MarketDataByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataByIDRequest) ProtoMessage() {}

func (x *MarketDataByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataByIDRequest.ProtoReflect.Descriptor instead.
func (*MarketDataByIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{62}
}

func (x *MarketDataByIDRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for market data for a market
type MarketDataByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market data, if found
	MarketData *vega.MarketData `protobuf:"bytes,1,opt,name=market_data,json=marketData,proto3" json:"market_data,omitempty"`
}

func (x *MarketDataByIDResponse) Reset() {
	*x = MarketDataByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataByIDResponse) ProtoMessage() {}

func (x *MarketDataByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataByIDResponse.ProtoReflect.Descriptor instead.
func (*MarketDataByIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{63}
}

func (x *MarketDataByIDResponse) GetMarketData() *vega.MarketData {
	if x != nil {
		return x.MarketData
	}
	return nil
}

// Request for market data
type MarketsDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarketsDataRequest) Reset() {
	*x = MarketsDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataRequest) ProtoMessage() {}

func (x *MarketsDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataRequest.ProtoReflect.Descriptor instead.
func (*MarketsDataRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{64}
}

// Response for market data
type MarketsDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more market data
	MarketsData []*vega.MarketData `protobuf:"bytes,1,rep,name=markets_data,json=marketsData,proto3" json:"markets_data,omitempty"`
}

func (x *MarketsDataResponse) Reset() {
	*x = MarketsDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsDataResponse) ProtoMessage() {}

func (x *MarketsDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsDataResponse.ProtoReflect.Descriptor instead.
func (*MarketsDataResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{65}
}

func (x *MarketsDataResponse) GetMarketsData() []*vega.MarketData {
	if x != nil {
		return x.MarketsData
	}
	return nil
}

// Request for the latest trade that occurred on Vega for a given market
type LastTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *LastTradeRequest) Reset() {
	*x = LastTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastTradeRequest) ProtoMessage() {}

func (x *LastTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastTradeRequest.ProtoReflect.Descriptor instead.
func (*LastTradeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{66}
}

func (x *LastTradeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for the latest trade that occurred on Vega for a given market
type LastTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A trade, if found
	Trade *vega.Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *LastTradeResponse) Reset() {
	*x = LastTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastTradeResponse) ProtoMessage() {}

func (x *LastTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastTradeResponse.ProtoReflect.Descriptor instead.
func (*LastTradeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{67}
}

func (x *LastTradeResponse) GetTrade() *vega.Trade {
	if x != nil {
		return x.Trade
	}
	return nil
}

// Request for a market given a market identifier
type MarketByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketByIDRequest) Reset() {
	*x = MarketByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByIDRequest) ProtoMessage() {}

func (x *MarketByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByIDRequest.ProtoReflect.Descriptor instead.
func (*MarketByIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{68}
}

func (x *MarketByIDRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for a market given a market identifier
type MarketByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A market, if found
	Market *vega.Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *MarketByIDResponse) Reset() {
	*x = MarketByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketByIDResponse) ProtoMessage() {}

func (x *MarketByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketByIDResponse.ProtoReflect.Descriptor instead.
func (*MarketByIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{69}
}

func (x *MarketByIDResponse) GetMarket() *vega.Market {
	if x != nil {
		return x.Market
	}
	return nil
}

// Request for a party given a party identifier
type PartyByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *PartyByIDRequest) Reset() {
	*x = PartyByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyByIDRequest) ProtoMessage() {}

func (x *PartyByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyByIDRequest.ProtoReflect.Descriptor instead.
func (*PartyByIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{70}
}

func (x *PartyByIDRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// Response for a party given a party identifier
type PartyByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A party, if found
	Party *vega.Party `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *PartyByIDResponse) Reset() {
	*x = PartyByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyByIDResponse) ProtoMessage() {}

func (x *PartyByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyByIDResponse.ProtoReflect.Descriptor instead.
func (*PartyByIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{71}
}

func (x *PartyByIDResponse) GetParty() *vega.Party {
	if x != nil {
		return x.Party
	}
	return nil
}

// Request for a list of all parties
type PartiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PartiesRequest) Reset() {
	*x = PartiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiesRequest) ProtoMessage() {}

func (x *PartiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiesRequest.ProtoReflect.Descriptor instead.
func (*PartiesRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{72}
}

// Response to a request for a list of parties
type PartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more parties
	Parties []*vega.Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *PartiesResponse) Reset() {
	*x = PartiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartiesResponse) ProtoMessage() {}

func (x *PartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartiesResponse.ProtoReflect.Descriptor instead.
func (*PartiesResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{73}
}

func (x *PartiesResponse) GetParties() []*vega.Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

// Request for a list of trades relating to the given party
// Optionally, the list can be additionally filtered for trades by market
type TradesByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier. Required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *TradesByPartyRequest) Reset() {
	*x = TradesByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByPartyRequest) ProtoMessage() {}

func (x *TradesByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByPartyRequest.ProtoReflect.Descriptor instead.
func (*TradesByPartyRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{74}
}

func (x *TradesByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *TradesByPartyRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *TradesByPartyRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of trades relating to a party
type TradesByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades
	Trades []*vega.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByPartyResponse) Reset() {
	*x = TradesByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByPartyResponse) ProtoMessage() {}

func (x *TradesByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByPartyResponse.ProtoReflect.Descriptor instead.
func (*TradesByPartyResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{75}
}

func (x *TradesByPartyResponse) GetTrades() []*vega.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request for a list of trades related to an order
type TradesByOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *TradesByOrderRequest) Reset() {
	*x = TradesByOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByOrderRequest) ProtoMessage() {}

func (x *TradesByOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByOrderRequest.ProtoReflect.Descriptor instead.
func (*TradesByOrderRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{76}
}

func (x *TradesByOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// Response for a list of trades related to an order
type TradesByOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades
	Trades []*vega.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByOrderResponse) Reset() {
	*x = TradesByOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByOrderResponse) ProtoMessage() {}

func (x *TradesByOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByOrderResponse.ProtoReflect.Descriptor instead.
func (*TradesByOrderResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{77}
}

func (x *TradesByOrderResponse) GetTrades() []*vega.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request to subscribe to a stream of (Accounts)[#vega.Account]
type AccountsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset,omitempty"`
	// Account type to subscribe to, required field
	Type vega.AccountType `protobuf:"varint,4,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
}

func (x *AccountsSubscribeRequest) Reset() {
	*x = AccountsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsSubscribeRequest) ProtoMessage() {}

func (x *AccountsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*AccountsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{78}
}

func (x *AccountsSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AccountsSubscribeRequest) GetType() vega.AccountType {
	if x != nil {
		return x.Type
	}
	return vega.AccountType(0)
}

type AccountsSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *vega.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountsSubscribeResponse) Reset() {
	*x = AccountsSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsSubscribeResponse) ProtoMessage() {}

func (x *AccountsSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsSubscribeResponse.ProtoReflect.Descriptor instead.
func (*AccountsSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{79}
}

func (x *AccountsSubscribeResponse) GetAccount() *vega.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

// Request to subscribe to a stream of (Orders)[#vega.Order]
type OrdersSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *OrdersSubscribeRequest) Reset() {
	*x = OrdersSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersSubscribeRequest) ProtoMessage() {}

func (x *OrdersSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersSubscribeRequest.ProtoReflect.Descriptor instead.
func (*OrdersSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{80}
}

func (x *OrdersSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrdersSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// Request to subscribe to a stream of (Trades)[#vega.Trade]
type TradesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *TradesSubscribeRequest) Reset() {
	*x = TradesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesSubscribeRequest) ProtoMessage() {}

func (x *TradesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*TradesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{81}
}

func (x *TradesSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *TradesSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// Request to subscribe to a stream of (Candles)[#vega.Candle]
type CandlesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Time interval for the candles, required field.
	Interval vega.Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
}

func (x *CandlesSubscribeRequest) Reset() {
	*x = CandlesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesSubscribeRequest) ProtoMessage() {}

func (x *CandlesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*CandlesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{82}
}

func (x *CandlesSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CandlesSubscribeRequest) GetInterval() vega.Interval {
	if x != nil {
		return x.Interval
	}
	return vega.Interval(0)
}

type CandlesSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candle *vega.Candle `protobuf:"bytes,1,opt,name=candle,proto3" json:"candle,omitempty"`
}

func (x *CandlesSubscribeResponse) Reset() {
	*x = CandlesSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesSubscribeResponse) ProtoMessage() {}

func (x *CandlesSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesSubscribeResponse.ProtoReflect.Descriptor instead.
func (*CandlesSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{83}
}

func (x *CandlesSubscribeResponse) GetCandle() *vega.Candle {
	if x != nil {
		return x.Candle
	}
	return nil
}

// Request to subscribe to a stream of (MarketDepth)[#vega.MarketDepth] data
type MarketDepthSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketDepthSubscribeRequest) Reset() {
	*x = MarketDepthSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthSubscribeRequest) ProtoMessage() {}

func (x *MarketDepthSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{84}
}

func (x *MarketDepthSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarketDepthSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketDepth *vega.MarketDepth `protobuf:"bytes,1,opt,name=market_depth,json=marketDepth,proto3" json:"market_depth,omitempty"`
}

func (x *MarketDepthSubscribeResponse) Reset() {
	*x = MarketDepthSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthSubscribeResponse) ProtoMessage() {}

func (x *MarketDepthSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthSubscribeResponse.ProtoReflect.Descriptor instead.
func (*MarketDepthSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{85}
}

func (x *MarketDepthSubscribeResponse) GetMarketDepth() *vega.MarketDepth {
	if x != nil {
		return x.MarketDepth
	}
	return nil
}

// Request to subscribe to a stream of (MarketDepth Update)[#vega.MarketDepthUpdate] data
type MarketDepthUpdatesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *MarketDepthUpdatesSubscribeRequest) Reset() {
	*x = MarketDepthUpdatesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdatesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdatesSubscribeRequest) ProtoMessage() {}

func (x *MarketDepthUpdatesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdatesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdatesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{86}
}

func (x *MarketDepthUpdatesSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MarketDepthUpdatesSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update *vega.MarketDepthUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *MarketDepthUpdatesSubscribeResponse) Reset() {
	*x = MarketDepthUpdatesSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdatesSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdatesSubscribeResponse) ProtoMessage() {}

func (x *MarketDepthUpdatesSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdatesSubscribeResponse.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdatesSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{87}
}

func (x *MarketDepthUpdatesSubscribeResponse) GetUpdate() *vega.MarketDepthUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

// Request to subscribe to a stream of (Positions)[#vega.Position]
type PositionsSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, optional field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier, optional field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *PositionsSubscribeRequest) Reset() {
	*x = PositionsSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSubscribeRequest) ProtoMessage() {}

func (x *PositionsSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSubscribeRequest.ProtoReflect.Descriptor instead.
func (*PositionsSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{88}
}

func (x *PositionsSubscribeRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PositionsSubscribeRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type PositionsSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *vega.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *PositionsSubscribeResponse) Reset() {
	*x = PositionsSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSubscribeResponse) ProtoMessage() {}

func (x *PositionsSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSubscribeResponse.ProtoReflect.Descriptor instead.
func (*PositionsSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{89}
}

func (x *PositionsSubscribeResponse) GetPosition() *vega.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// Request for a list of orders for a market
type OrdersByMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Optional pagination controls
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrdersByMarketRequest) Reset() {
	*x = OrdersByMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByMarketRequest) ProtoMessage() {}

func (x *OrdersByMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByMarketRequest.ProtoReflect.Descriptor instead.
func (*OrdersByMarketRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{90}
}

func (x *OrdersByMarketRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrdersByMarketRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of orders for a market
type OrdersByMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders
	Orders []*vega.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersByMarketResponse) Reset() {
	*x = OrdersByMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByMarketResponse) ProtoMessage() {}

func (x *OrdersByMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByMarketResponse.ProtoReflect.Descriptor instead.
func (*OrdersByMarketResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{91}
}

func (x *OrdersByMarketResponse) GetOrders() []*vega.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request for a list of orders for a party
type OrdersByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrdersByPartyRequest) Reset() {
	*x = OrdersByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByPartyRequest) ProtoMessage() {}

func (x *OrdersByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByPartyRequest.ProtoReflect.Descriptor instead.
func (*OrdersByPartyRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{92}
}

func (x *OrdersByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *OrdersByPartyRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of orders for a party
type OrdersByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders
	Orders []*vega.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersByPartyResponse) Reset() {
	*x = OrdersByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersByPartyResponse) ProtoMessage() {}

func (x *OrdersByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersByPartyResponse.ProtoReflect.Descriptor instead.
func (*OrdersByPartyResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{93}
}

func (x *OrdersByPartyResponse) GetOrders() []*vega.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request for an order on a market given an order identifier
type OrderByMarketAndIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Order identifier, required field
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *OrderByMarketAndIDRequest) Reset() {
	*x = OrderByMarketAndIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByMarketAndIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByMarketAndIDRequest) ProtoMessage() {}

func (x *OrderByMarketAndIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByMarketAndIDRequest.ProtoReflect.Descriptor instead.
func (*OrderByMarketAndIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{94}
}

func (x *OrderByMarketAndIDRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *OrderByMarketAndIDRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// Response for an order on a market given an order identifier
type OrderByMarketAndIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order, if found
	Order *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderByMarketAndIDResponse) Reset() {
	*x = OrderByMarketAndIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByMarketAndIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByMarketAndIDResponse) ProtoMessage() {}

func (x *OrderByMarketAndIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByMarketAndIDResponse.ProtoReflect.Descriptor instead.
func (*OrderByMarketAndIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{95}
}

func (x *OrderByMarketAndIDResponse) GetOrder() *vega.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Request for an order given an order reference
type OrderByReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique reference, required field
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *OrderByReferenceRequest) Reset() {
	*x = OrderByReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByReferenceRequest) ProtoMessage() {}

func (x *OrderByReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByReferenceRequest.ProtoReflect.Descriptor instead.
func (*OrderByReferenceRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{96}
}

func (x *OrderByReferenceRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Response for an order given an order reference
type OrderByReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An order, if found
	Order *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderByReferenceResponse) Reset() {
	*x = OrderByReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByReferenceResponse) ProtoMessage() {}

func (x *OrderByReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByReferenceResponse.ProtoReflect.Descriptor instead.
func (*OrderByReferenceResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{97}
}

func (x *OrderByReferenceResponse) GetOrder() *vega.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Request for a list of markets on Vega
type MarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarketsRequest) Reset() {
	*x = MarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsRequest) ProtoMessage() {}

func (x *MarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsRequest.ProtoReflect.Descriptor instead.
func (*MarketsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{98}
}

// Response for a list of markets on Vega
type MarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more markets
	Markets []*vega.Market `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *MarketsResponse) Reset() {
	*x = MarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsResponse) ProtoMessage() {}

func (x *MarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsResponse.ProtoReflect.Descriptor instead.
func (*MarketsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{99}
}

func (x *MarketsResponse) GetMarkets() []*vega.Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

// Request for a list of candles for a market at an interval
type CandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field.
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Timestamp to retrieve candles since, in nanoseconds since the epoch,
	// required field - See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`
	SinceTimestamp int64 `protobuf:"varint,2,opt,name=since_timestamp,json=sinceTimestamp,proto3" json:"since_timestamp,omitempty"`
	// Time interval for the candles, required field
	Interval vega.Interval `protobuf:"varint,3,opt,name=interval,proto3,enum=vega.Interval" json:"interval,omitempty"`
}

func (x *CandlesRequest) Reset() {
	*x = CandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesRequest) ProtoMessage() {}

func (x *CandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesRequest.ProtoReflect.Descriptor instead.
func (*CandlesRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{100}
}

func (x *CandlesRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *CandlesRequest) GetSinceTimestamp() int64 {
	if x != nil {
		return x.SinceTimestamp
	}
	return 0
}

func (x *CandlesRequest) GetInterval() vega.Interval {
	if x != nil {
		return x.Interval
	}
	return vega.Interval(0)
}

// Response for a list of candles for a market at an interval
type CandlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more candles
	Candles []*vega.Candle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
}

func (x *CandlesResponse) Reset() {
	*x = CandlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandlesResponse) ProtoMessage() {}

func (x *CandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandlesResponse.ProtoReflect.Descriptor instead.
func (*CandlesResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{101}
}

func (x *CandlesResponse) GetCandles() []*vega.Candle {
	if x != nil {
		return x.Candles
	}
	return nil
}

// Request for the market depth/order book price levels on a market
// Optionally, a maximum depth can be set to limit the number of levels returned
type MarketDepthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Max depth limits the number of levels returned. Default is 0, which returns all levels
	MaxDepth uint64 `protobuf:"varint,2,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
}

func (x *MarketDepthRequest) Reset() {
	*x = MarketDepthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthRequest) ProtoMessage() {}

func (x *MarketDepthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{102}
}

func (x *MarketDepthRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketDepthRequest) GetMaxDepth() uint64 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

// Response for the market depth/order book price levels on a market
type MarketDepthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Zero or more price levels for the buy side of the market depth data
	Buy []*vega.PriceLevel `protobuf:"bytes,2,rep,name=buy,proto3" json:"buy,omitempty"`
	// Zero or more price levels for the sell side of the market depth data
	Sell []*vega.PriceLevel `protobuf:"bytes,3,rep,name=sell,proto3" json:"sell,omitempty"`
	// Last trade recorded on Vega at the time of retrieving the `MarketDepthResponse`
	LastTrade *vega.Trade `protobuf:"bytes,4,opt,name=last_trade,json=lastTrade,proto3" json:"last_trade,omitempty"`
	// Sequence number incremented after each update
	SequenceNumber uint64 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *MarketDepthResponse) Reset() {
	*x = MarketDepthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthResponse) ProtoMessage() {}

func (x *MarketDepthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthResponse.ProtoReflect.Descriptor instead.
func (*MarketDepthResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{103}
}

func (x *MarketDepthResponse) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketDepthResponse) GetBuy() []*vega.PriceLevel {
	if x != nil {
		return x.Buy
	}
	return nil
}

func (x *MarketDepthResponse) GetSell() []*vega.PriceLevel {
	if x != nil {
		return x.Sell
	}
	return nil
}

func (x *MarketDepthResponse) GetLastTrade() *vega.Trade {
	if x != nil {
		return x.LastTrade
	}
	return nil
}

func (x *MarketDepthResponse) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Request for a list of trades on a market
type TradesByMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier, required field
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *TradesByMarketRequest) Reset() {
	*x = TradesByMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByMarketRequest) ProtoMessage() {}

func (x *TradesByMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByMarketRequest.ProtoReflect.Descriptor instead.
func (*TradesByMarketRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{104}
}

func (x *TradesByMarketRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *TradesByMarketRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response for a list of trades on a market
type TradesByMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades
	Trades []*vega.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesByMarketResponse) Reset() {
	*x = TradesByMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesByMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesByMarketResponse) ProtoMessage() {}

func (x *TradesByMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesByMarketResponse.ProtoReflect.Descriptor instead.
func (*TradesByMarketResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{105}
}

func (x *TradesByMarketResponse) GetTrades() []*vega.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Request for a list of positions for a party
// Optionally, if a market identifier is set, the results will be filtered for that market only
type PositionsByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier, required field
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *PositionsByPartyRequest) Reset() {
	*x = PositionsByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsByPartyRequest) ProtoMessage() {}

func (x *PositionsByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsByPartyRequest.ProtoReflect.Descriptor instead.
func (*PositionsByPartyRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{106}
}

func (x *PositionsByPartyRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PositionsByPartyRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

// Response for a list of positions for a party
type PositionsByPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more positions
	Positions []*vega.Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *PositionsByPartyResponse) Reset() {
	*x = PositionsByPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsByPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsByPartyResponse) ProtoMessage() {}

func (x *PositionsByPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsByPartyResponse.ProtoReflect.Descriptor instead.
func (*PositionsByPartyResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{107}
}

func (x *PositionsByPartyResponse) GetPositions() []*vega.Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// Request for the current time of the vega network
type GetVegaTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVegaTimeRequest) Reset() {
	*x = GetVegaTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVegaTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVegaTimeRequest) ProtoMessage() {}

func (x *GetVegaTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVegaTimeRequest.ProtoReflect.Descriptor instead.
func (*GetVegaTimeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{108}
}

// Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
type GetVegaTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp representation of current VegaTime as represented in
	// Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetVegaTimeResponse) Reset() {
	*x = GetVegaTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVegaTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVegaTimeResponse) ProtoMessage() {}

func (x *GetVegaTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVegaTimeResponse.ProtoReflect.Descriptor instead.
func (*GetVegaTimeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{109}
}

func (x *GetVegaTimeResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Pagination controls
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Skip the number of records specified, default is 0
	Skip uint64 `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`
	// Limit the number of returned records to the value specified, default is 50
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Descending reverses the order of the records returned,
	// default is true, if false the results will be returned in ascending order
	Descending bool `protobuf:"varint,3,opt,name=descending,proto3" json:"descending,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{110}
}

func (x *Pagination) GetSkip() uint64 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *Pagination) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

// A stream of orders
type OrdersSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders
	Orders []*vega.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrdersSubscribeResponse) Reset() {
	*x = OrdersSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersSubscribeResponse) ProtoMessage() {}

func (x *OrdersSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersSubscribeResponse.ProtoReflect.Descriptor instead.
func (*OrdersSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{111}
}

func (x *OrdersSubscribeResponse) GetOrders() []*vega.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// A stream of trades
type TradesSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more trades
	Trades []*vega.Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *TradesSubscribeResponse) Reset() {
	*x = TradesSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesSubscribeResponse) ProtoMessage() {}

func (x *TradesSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesSubscribeResponse.ProtoReflect.Descriptor instead.
func (*TradesSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{112}
}

func (x *TradesSubscribeResponse) GetTrades() []*vega.Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type TransferResponsesSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferResponsesSubscribeRequest) Reset() {
	*x = TransferResponsesSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponsesSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponsesSubscribeRequest) ProtoMessage() {}

func (x *TransferResponsesSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponsesSubscribeRequest.ProtoReflect.Descriptor instead.
func (*TransferResponsesSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{113}
}

type TransferResponsesSubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *vega.TransferResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *TransferResponsesSubscribeResponse) Reset() {
	*x = TransferResponsesSubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponsesSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponsesSubscribeResponse) ProtoMessage() {}

func (x *TransferResponsesSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponsesSubscribeResponse.ProtoReflect.Descriptor instead.
func (*TransferResponsesSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{114}
}

func (x *TransferResponsesSubscribeResponse) GetResponse() *vega.TransferResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Request for a list of accounts for a party
type PartyAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Party identifier
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Market identifier
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Account type, required field
	Type vega.AccountType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.AccountType" json:"type,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,4,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *PartyAccountsRequest) Reset() {
	*x = PartyAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAccountsRequest) ProtoMessage() {}

func (x *PartyAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAccountsRequest.ProtoReflect.Descriptor instead.
func (*PartyAccountsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{115}
}

func (x *PartyAccountsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyAccountsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *PartyAccountsRequest) GetType() vega.AccountType {
	if x != nil {
		return x.Type
	}
	return vega.AccountType(0)
}

func (x *PartyAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of accounts for a party
type PartyAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more accounts
	Accounts []*vega.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *PartyAccountsResponse) Reset() {
	*x = PartyAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyAccountsResponse) ProtoMessage() {}

func (x *PartyAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyAccountsResponse.ProtoReflect.Descriptor instead.
func (*PartyAccountsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{116}
}

func (x *PartyAccountsResponse) GetAccounts() []*vega.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request for a list of accounts for a market
type MarketAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market identifier
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Asset identifier
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *MarketAccountsRequest) Reset() {
	*x = MarketAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketAccountsRequest) ProtoMessage() {}

func (x *MarketAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketAccountsRequest.ProtoReflect.Descriptor instead.
func (*MarketAccountsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{117}
}

func (x *MarketAccountsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of accounts for a market
type MarketAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more accounts
	Accounts []*vega.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *MarketAccountsResponse) Reset() {
	*x = MarketAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketAccountsResponse) ProtoMessage() {}

func (x *MarketAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketAccountsResponse.ProtoReflect.Descriptor instead.
func (*MarketAccountsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{118}
}

func (x *MarketAccountsResponse) GetAccounts() []*vega.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request for a list of infrastructure fee accounts
type FeeInfrastructureAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier, required field
	// - Set to an empty string to return all accounts
	// - Set to an asset ID to return a single infrastructure fee account for a given asset
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *FeeInfrastructureAccountsRequest) Reset() {
	*x = FeeInfrastructureAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfrastructureAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfrastructureAccountsRequest) ProtoMessage() {}

func (x *FeeInfrastructureAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfrastructureAccountsRequest.ProtoReflect.Descriptor instead.
func (*FeeInfrastructureAccountsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{119}
}

func (x *FeeInfrastructureAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of infrastructure fee accounts
type FeeInfrastructureAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more infrastructure fee accounts
	Accounts []*vega.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *FeeInfrastructureAccountsResponse) Reset() {
	*x = FeeInfrastructureAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfrastructureAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfrastructureAccountsResponse) ProtoMessage() {}

func (x *FeeInfrastructureAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfrastructureAccountsResponse.ProtoReflect.Descriptor instead.
func (*FeeInfrastructureAccountsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{120}
}

func (x *FeeInfrastructureAccountsResponse) GetAccounts() []*vega.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request for a list of global reward pool accounts
type GlobalRewardPoolAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset identifier, required field
	// - Set to an empty string to return all accounts
	// - Set to an asset ID to return a single global reward pool account for a given asset
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *GlobalRewardPoolAccountsRequest) Reset() {
	*x = GlobalRewardPoolAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalRewardPoolAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalRewardPoolAccountsRequest) ProtoMessage() {}

func (x *GlobalRewardPoolAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalRewardPoolAccountsRequest.ProtoReflect.Descriptor instead.
func (*GlobalRewardPoolAccountsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{121}
}

func (x *GlobalRewardPoolAccountsRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

// Response for a list of global reward pool accounts
type GlobalRewardPoolAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more global reward pool accounts
	Accounts []*vega.Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *GlobalRewardPoolAccountsResponse) Reset() {
	*x = GlobalRewardPoolAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalRewardPoolAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalRewardPoolAccountsResponse) ProtoMessage() {}

func (x *GlobalRewardPoolAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalRewardPoolAccountsResponse.ProtoReflect.Descriptor instead.
func (*GlobalRewardPoolAccountsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{122}
}

func (x *GlobalRewardPoolAccountsResponse) GetAccounts() []*vega.Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Request for an order with the specified order identifier
// Optionally, return a specific version of the order with the `version` field
type OrderByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Version of the order:
	// - Set `version` to 0 for most recent version of the order
	// - Set `1` for original version of the order
	// - Set `2` for first amendment, `3` for second amendment, etc
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OrderByIDRequest) Reset() {
	*x = OrderByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByIDRequest) ProtoMessage() {}

func (x *OrderByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByIDRequest.ProtoReflect.Descriptor instead.
func (*OrderByIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{123}
}

func (x *OrderByIDRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderByIDRequest) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type OrderByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *OrderByIDResponse) Reset() {
	*x = OrderByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByIDResponse) ProtoMessage() {}

func (x *OrderByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByIDResponse.ProtoReflect.Descriptor instead.
func (*OrderByIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{124}
}

func (x *OrderByIDResponse) GetOrder() *vega.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Request for a list of all versions of an order given the specified order identifier
type OrderVersionsByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order identifier, required field
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// Pagination controls
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OrderVersionsByIDRequest) Reset() {
	*x = OrderVersionsByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderVersionsByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderVersionsByIDRequest) ProtoMessage() {}

func (x *OrderVersionsByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderVersionsByIDRequest.ProtoReflect.Descriptor instead.
func (*OrderVersionsByIDRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{125}
}

func (x *OrderVersionsByIDRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderVersionsByIDRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Response to a request for a list of all versions of an order
type OrderVersionsByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more orders (list will contain the same order but with different versions, if it has been amended)
	Orders []*vega.Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OrderVersionsByIDResponse) Reset() {
	*x = OrderVersionsByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderVersionsByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderVersionsByIDResponse) ProtoMessage() {}

func (x *OrderVersionsByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderVersionsByIDResponse.ProtoReflect.Descriptor instead.
func (*OrderVersionsByIDResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{126}
}

func (x *OrderVersionsByIDResponse) GetOrders() []*vega.Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Request to fetch the estimated fee if an order were to trade immediately
type EstimateFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order to estimate fees for
	// the following fields in the order are required:
	// MarketID (used to specify the fee factors)
	// Price (the price at which the order could trade)
	// Size (the size at which the order could eventually trade)
	Order *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *EstimateFeeRequest) Reset() {
	*x = EstimateFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeeRequest) ProtoMessage() {}

func (x *EstimateFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeeRequest.ProtoReflect.Descriptor instead.
func (*EstimateFeeRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{127}
}

func (x *EstimateFeeRequest) GetOrder() *vega.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Response to a EstimateFeeRequest, containing the estimated fees for a given order
type EstimateFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of the estimated fees for this order if it were to trade now
	Fee *vega.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *EstimateFeeResponse) Reset() {
	*x = EstimateFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateFeeResponse) ProtoMessage() {}

func (x *EstimateFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateFeeResponse.ProtoReflect.Descriptor instead.
func (*EstimateFeeResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{128}
}

func (x *EstimateFeeResponse) GetFee() *vega.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

// Request to fetch the estimated MarginLevels if an order were to trade immediately
type EstimateMarginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order to estimate fees for
	Order *vega.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *EstimateMarginRequest) Reset() {
	*x = EstimateMarginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateMarginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateMarginRequest) ProtoMessage() {}

func (x *EstimateMarginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateMarginRequest.ProtoReflect.Descriptor instead.
func (*EstimateMarginRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{129}
}

func (x *EstimateMarginRequest) GetOrder() *vega.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// Response to a EstimateMarginRequest, containing the estimated marginLevels for a given order
type EstimateMarginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of the estimated margins for this order if it were to trade now
	MarginLevels *vega.MarginLevels `protobuf:"bytes,2,opt,name=margin_levels,json=marginLevels,proto3" json:"margin_levels,omitempty"`
}

func (x *EstimateMarginResponse) Reset() {
	*x = EstimateMarginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateMarginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateMarginResponse) ProtoMessage() {}

func (x *EstimateMarginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateMarginResponse.ProtoReflect.Descriptor instead.
func (*EstimateMarginResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{130}
}

func (x *EstimateMarginResponse) GetMarginLevels() *vega.MarginLevels {
	if x != nil {
		return x.MarginLevels
	}
	return nil
}

// Request to subscribe to a stream of one or more event types from the Vega event bus
type ObserveEventBusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more types of event, required field
	Type []v1.BusEventType `protobuf:"varint,1,rep,packed,name=type,proto3,enum=vega.events.v1.BusEventType" json:"type,omitempty"`
	// Market identifier, optional field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier, optional field
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Batch size, optional field -
	// If not specified, any events received will be sent immediately. If the client is not ready
	// for the next data-set, data may be dropped a number of times, and eventually the stream is closed.
	// if specified, the first batch will be sent when ready. To receive the next set of events, the client
	// must write an `ObserveEventBatch` message on the stream to flush the buffer.
	// If no message is received in 5 seconds, the stream is closed.
	// Default: 0, send any and all events when they are available.
	BatchSize int64 `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *ObserveEventBusRequest) Reset() {
	*x = ObserveEventBusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveEventBusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveEventBusRequest) ProtoMessage() {}

func (x *ObserveEventBusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveEventBusRequest.ProtoReflect.Descriptor instead.
func (*ObserveEventBusRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{131}
}

func (x *ObserveEventBusRequest) GetType() []v1.BusEventType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ObserveEventBusRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ObserveEventBusRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *ObserveEventBusRequest) GetBatchSize() int64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// Response to a subscribed stream of events from the Vega event bus
type ObserveEventBusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more events
	Events []*v1.BusEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ObserveEventBusResponse) Reset() {
	*x = ObserveEventBusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveEventBusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveEventBusResponse) ProtoMessage() {}

func (x *ObserveEventBusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveEventBusResponse.ProtoReflect.Descriptor instead.
func (*ObserveEventBusResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{132}
}

func (x *ObserveEventBusResponse) GetEvents() []*v1.BusEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// A request to get a list of withdrawal from a given party
type WithdrawalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party to get the withdrawals for
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *WithdrawalsRequest) Reset() {
	*x = WithdrawalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalsRequest) ProtoMessage() {}

func (x *WithdrawalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalsRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{133}
}

func (x *WithdrawalsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// The response for a list of withdrawals
type WithdrawalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of withdrawals for the specified party
	Withdrawals []*vega.Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (x *WithdrawalsResponse) Reset() {
	*x = WithdrawalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalsResponse) ProtoMessage() {}

func (x *WithdrawalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalsResponse.ProtoReflect.Descriptor instead.
func (*WithdrawalsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{134}
}

func (x *WithdrawalsResponse) GetWithdrawals() []*vega.Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

// A request to get a specific withdrawal by identifier
type WithdrawalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the withdrawal
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WithdrawalRequest) Reset() {
	*x = WithdrawalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalRequest) ProtoMessage() {}

func (x *WithdrawalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{135}
}

func (x *WithdrawalRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A response for a withdrawal
type WithdrawalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The withdrawal matching the identifier from the request
	Withdrawal *vega.Withdrawal `protobuf:"bytes,1,opt,name=withdrawal,proto3" json:"withdrawal,omitempty"`
}

func (x *WithdrawalResponse) Reset() {
	*x = WithdrawalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalResponse) ProtoMessage() {}

func (x *WithdrawalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalResponse.ProtoReflect.Descriptor instead.
func (*WithdrawalResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{136}
}

func (x *WithdrawalResponse) GetWithdrawal() *vega.Withdrawal {
	if x != nil {
		return x.Withdrawal
	}
	return nil
}

// The request to get all information required to bundle the call to finalise the withdrawal on the erc20 bridge
type ERC20WithdrawalApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the withdrawal
	WithdrawalId string `protobuf:"bytes,1,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
}

func (x *ERC20WithdrawalApprovalRequest) Reset() {
	*x = ERC20WithdrawalApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20WithdrawalApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20WithdrawalApprovalRequest) ProtoMessage() {}

func (x *ERC20WithdrawalApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20WithdrawalApprovalRequest.ProtoReflect.Descriptor instead.
func (*ERC20WithdrawalApprovalRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{137}
}

func (x *ERC20WithdrawalApprovalRequest) GetWithdrawalId() string {
	if x != nil {
		return x.WithdrawalId
	}
	return ""
}

// The response with all information required to bundle the call to finalise the withdrawal on the erc20 bridge
// function withdraw_asset(address asset_source, uint256 asset_id, uint256 amount, uint256 expiry, uint256 nonce, bytes memory signatures)
type ERC20WithdrawalApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address of asset on ethereum
	AssetSource string `protobuf:"bytes,1,opt,name=asset_source,json=assetSource,proto3" json:"asset_source,omitempty"`
	// The amount to be withdrawn
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The expiry / until what time the request is valid
	Expiry int64 `protobuf:"varint,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The nonce, which is actually the internal reference for the withdrawal
	Nonce string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The signatures bundle as hex encoded data, forward by 0x
	// e.g: 0x + sig1 + sig2 + ... + sixN
	Signatures string `protobuf:"bytes,5,opt,name=signatures,proto3" json:"signatures,omitempty"`
	// The ethereum address to withdraw the funds to, 0x prefixed
	TargetAddress string `protobuf:"bytes,6,opt,name=target_address,json=targetAddress,proto3" json:"target_address,omitempty"`
	// The creation timestamps
	Creation int64 `protobuf:"varint,7,opt,name=creation,proto3" json:"creation,omitempty"`
}

func (x *ERC20WithdrawalApprovalResponse) Reset() {
	*x = ERC20WithdrawalApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20WithdrawalApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20WithdrawalApprovalResponse) ProtoMessage() {}

func (x *ERC20WithdrawalApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20WithdrawalApprovalResponse.ProtoReflect.Descriptor instead.
func (*ERC20WithdrawalApprovalResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{138}
}

func (x *ERC20WithdrawalApprovalResponse) GetAssetSource() string {
	if x != nil {
		return x.AssetSource
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *ERC20WithdrawalApprovalResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetSignatures() string {
	if x != nil {
		return x.Signatures
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetTargetAddress() string {
	if x != nil {
		return x.TargetAddress
	}
	return ""
}

func (x *ERC20WithdrawalApprovalResponse) GetCreation() int64 {
	if x != nil {
		return x.Creation
	}
	return 0
}

// A request to get a list of deposit from a given party
type DepositsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The party to get the deposits for
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *DepositsRequest) Reset() {
	*x = DepositsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositsRequest) ProtoMessage() {}

func (x *DepositsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositsRequest.ProtoReflect.Descriptor instead.
func (*DepositsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{139}
}

func (x *DepositsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

// The response for a list of deposits
type DepositsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of deposits for the specified party
	Deposits []*vega.Deposit `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (x *DepositsResponse) Reset() {
	*x = DepositsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositsResponse) ProtoMessage() {}

func (x *DepositsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositsResponse.ProtoReflect.Descriptor instead.
func (*DepositsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{140}
}

func (x *DepositsResponse) GetDeposits() []*vega.Deposit {
	if x != nil {
		return x.Deposits
	}
	return nil
}

// A request to get a specific deposit by identifier
type DepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the deposit
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DepositRequest) Reset() {
	*x = DepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRequest) ProtoMessage() {}

func (x *DepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositRequest.ProtoReflect.Descriptor instead.
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{141}
}

func (x *DepositRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A response for a deposit
type DepositResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deposit matching the identifier from the request
	Deposit *vega.Deposit `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (x *DepositResponse) Reset() {
	*x = DepositResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositResponse) ProtoMessage() {}

func (x *DepositResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositResponse.ProtoReflect.Descriptor instead.
func (*DepositResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{142}
}

func (x *DepositResponse) GetDeposit() *vega.Deposit {
	if x != nil {
		return x.Deposit
	}
	return nil
}

// A message requesting for the list of all network parameters
type NetworkParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NetworkParametersRequest) Reset() {
	*x = NetworkParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParametersRequest) ProtoMessage() {}

func (x *NetworkParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParametersRequest.ProtoReflect.Descriptor instead.
func (*NetworkParametersRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{143}
}

// A response containing all of the vega network parameters
type NetworkParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkParameters []*vega.NetworkParameter `protobuf:"bytes,1,rep,name=network_parameters,json=networkParameters,proto3" json:"network_parameters,omitempty"`
}

func (x *NetworkParametersResponse) Reset() {
	*x = NetworkParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkParametersResponse) ProtoMessage() {}

func (x *NetworkParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkParametersResponse.ProtoReflect.Descriptor instead.
func (*NetworkParametersResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{144}
}

func (x *NetworkParametersResponse) GetNetworkParameters() []*vega.NetworkParameter {
	if x != nil {
		return x.NetworkParameters
	}
	return nil
}

// A message requesting for the list of liquidity provision orders for markets
// One of the two filters is required (or both)
type LiquidityProvisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target market for the liquidity provision orders
	Market string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// The party which submitted the liquidity provision orders
	Party string `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *LiquidityProvisionsRequest) Reset() {
	*x = LiquidityProvisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionsRequest) ProtoMessage() {}

func (x *LiquidityProvisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionsRequest.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{145}
}

func (x *LiquidityProvisionsRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *LiquidityProvisionsRequest) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

// A response containing all of the Vega liquidity provision orders
type LiquidityProvisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiquidityProvisions []*vega.LiquidityProvision `protobuf:"bytes,1,rep,name=liquidity_provisions,json=liquidityProvisions,proto3" json:"liquidity_provisions,omitempty"`
}

func (x *LiquidityProvisionsResponse) Reset() {
	*x = LiquidityProvisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityProvisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityProvisionsResponse) ProtoMessage() {}

func (x *LiquidityProvisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityProvisionsResponse.ProtoReflect.Descriptor instead.
func (*LiquidityProvisionsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{146}
}

func (x *LiquidityProvisionsResponse) GetLiquidityProvisions() []*vega.LiquidityProvision {
	if x != nil {
		return x.LiquidityProvisions
	}
	return nil
}

// A request to get a specific oracle spec by identifier
type OracleSpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id to get the oracle spec for
	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OracleSpecRequest) Reset() {
	*x = OracleSpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSpecRequest) ProtoMessage() {}

func (x *OracleSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleSpecRequest.ProtoReflect.Descriptor instead.
func (*OracleSpecRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{147}
}

func (x *OracleSpecRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OracleSpecRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// A response for a oracle spec
type OracleSpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The withdrawal matching the identifier from the request
	OracleSpec *v12.OracleSpec `protobuf:"bytes,1,opt,name=oracle_spec,json=oracleSpec,proto3" json:"oracle_spec,omitempty"`
}

func (x *OracleSpecResponse) Reset() {
	*x = OracleSpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSpecResponse) ProtoMessage() {}

func (x *OracleSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleSpecResponse.ProtoReflect.Descriptor instead.
func (*OracleSpecResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{148}
}

func (x *OracleSpecResponse) GetOracleSpec() *v12.OracleSpec {
	if x != nil {
		return x.OracleSpec
	}
	return nil
}

// A request to get a specific oracle spec by identifier
type OracleSpecsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OracleSpecsRequest) Reset() {
	*x = OracleSpecsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSpecsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSpecsRequest) ProtoMessage() {}

func (x *OracleSpecsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleSpecsRequest.ProtoReflect.Descriptor instead.
func (*OracleSpecsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{149}
}

func (x *OracleSpecsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// The response for a list of withdrawals
type OracleSpecsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of oracle specs
	OracleSpecs []*v12.OracleSpec `protobuf:"bytes,1,rep,name=oracle_specs,json=oracleSpecs,proto3" json:"oracle_specs,omitempty"`
}

func (x *OracleSpecsResponse) Reset() {
	*x = OracleSpecsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSpecsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSpecsResponse) ProtoMessage() {}

func (x *OracleSpecsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleSpecsResponse.ProtoReflect.Descriptor instead.
func (*OracleSpecsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{150}
}

func (x *OracleSpecsResponse) GetOracleSpecs() []*v12.OracleSpec {
	if x != nil {
		return x.OracleSpecs
	}
	return nil
}

// A request to all oracle data broadcast to a given spec
type OracleDataBySpecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id to get the oracle spec for
	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *OracleDataBySpecRequest) Reset() {
	*x = OracleDataBySpecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDataBySpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDataBySpecRequest) ProtoMessage() {}

func (x *OracleDataBySpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleDataBySpecRequest.ProtoReflect.Descriptor instead.
func (*OracleDataBySpecRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{151}
}

func (x *OracleDataBySpecRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OracleDataBySpecRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// The response for a list of all oracle data broadcast to a given spec
type OracleDataBySpecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of oracle data broadcast to a given spec
	OracleData []*v12.OracleData `protobuf:"bytes,1,rep,name=oracle_data,json=oracleData,proto3" json:"oracle_data,omitempty"`
}

func (x *OracleDataBySpecResponse) Reset() {
	*x = OracleDataBySpecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleDataBySpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleDataBySpecResponse) ProtoMessage() {}

func (x *OracleDataBySpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleDataBySpecResponse.ProtoReflect.Descriptor instead.
func (*OracleDataBySpecResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{152}
}

func (x *OracleDataBySpecResponse) GetOracleData() []*v12.OracleData {
	if x != nil {
		return x.OracleData
	}
	return nil
}

// The request to get all seen oracle data
type ListOracleDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListOracleDataRequest) Reset() {
	*x = ListOracleDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOracleDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOracleDataRequest) ProtoMessage() {}

func (x *ListOracleDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOracleDataRequest.ProtoReflect.Descriptor instead.
func (*ListOracleDataRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{153}
}

func (x *ListOracleDataRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// The response to get all seen oracle data
type ListOracleDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of seen oracle data
	OracleData []*v12.OracleData `protobuf:"bytes,1,rep,name=oracle_data,json=oracleData,proto3" json:"oracle_data,omitempty"`
}

func (x *ListOracleDataResponse) Reset() {
	*x = ListOracleDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOracleDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOracleDataResponse) ProtoMessage() {}

func (x *ListOracleDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOracleDataResponse.ProtoReflect.Descriptor instead.
func (*ListOracleDataResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{154}
}

func (x *ListOracleDataResponse) GetOracleData() []*v12.OracleData {
	if x != nil {
		return x.OracleData
	}
	return nil
}

type ObserveRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Party   string `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
}

func (x *ObserveRewardsRequest) Reset() {
	*x = ObserveRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveRewardsRequest) ProtoMessage() {}

func (x *ObserveRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveRewardsRequest.ProtoReflect.Descriptor instead.
func (*ObserveRewardsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{155}
}

func (x *ObserveRewardsRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ObserveRewardsRequest) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

type ObserveRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward *vega.Reward `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *ObserveRewardsResponse) Reset() {
	*x = ObserveRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveRewardsResponse) ProtoMessage() {}

func (x *ObserveRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveRewardsResponse.ProtoReflect.Descriptor instead.
func (*ObserveRewardsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{156}
}

func (x *ObserveRewardsResponse) GetReward() *vega.Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

// A request to get reward details for a party
type GetRewardSummariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *GetRewardSummariesRequest) Reset() {
	*x = GetRewardSummariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardSummariesRequest) ProtoMessage() {}

func (x *GetRewardSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardSummariesRequest.ProtoReflect.Descriptor instead.
func (*GetRewardSummariesRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{157}
}

func (x *GetRewardSummariesRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *GetRewardSummariesRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// The return message with reward details in for a single party
type GetRewardSummariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summaries []*vega.RewardSummary `protobuf:"bytes,1,rep,name=summaries,proto3" json:"summaries,omitempty"`
}

func (x *GetRewardSummariesResponse) Reset() {
	*x = GetRewardSummariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardSummariesResponse) ProtoMessage() {}

func (x *GetRewardSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardSummariesResponse.ProtoReflect.Descriptor instead.
func (*GetRewardSummariesResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{158}
}

func (x *GetRewardSummariesResponse) GetSummaries() []*vega.RewardSummary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

// A request to get reward details for a party
type GetRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId    string      `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	AssetId    string      `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetRewardsRequest) Reset() {
	*x = GetRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsRequest) ProtoMessage() {}

func (x *GetRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetRewardsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{159}
}

func (x *GetRewardsRequest) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *GetRewardsRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *GetRewardsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// The return message with reward details in for a single party
type GetRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*vega.Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetRewardsResponse) Reset() {
	*x = GetRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsResponse) ProtoMessage() {}

func (x *GetRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetRewardsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{160}
}

func (x *GetRewardsResponse) GetRewards() []*vega.Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

// The actual data regarding a checkpoint
type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockHash string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	AtBlock   uint64 `protobuf:"varint,3,opt,name=at_block,json=atBlock,proto3" json:"at_block,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{161}
}

func (x *Checkpoint) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Checkpoint) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Checkpoint) GetAtBlock() uint64 {
	if x != nil {
		return x.AtBlock
	}
	return 0
}

// Request to get all checkpoints. Currently no fields, probably will be expanded to allow filtering data
type CheckpointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckpointsRequest) Reset() {
	*x = CheckpointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointsRequest) ProtoMessage() {}

func (x *CheckpointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointsRequest.ProtoReflect.Descriptor instead.
func (*CheckpointsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{162}
}

// Response message containing all checkpoints requested
type CheckpointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoints []*Checkpoint `protobuf:"bytes,1,rep,name=checkpoints,proto3" json:"checkpoints,omitempty"`
}

func (x *CheckpointsResponse) Reset() {
	*x = CheckpointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointsResponse) ProtoMessage() {}

func (x *CheckpointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointsResponse.ProtoReflect.Descriptor instead.
func (*CheckpointsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{163}
}

func (x *CheckpointsResponse) GetCheckpoints() []*Checkpoint {
	if x != nil {
		return x.Checkpoints
	}
	return nil
}

type GetRiskFactorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (x *GetRiskFactorsRequest) Reset() {
	*x = GetRiskFactorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskFactorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskFactorsRequest) ProtoMessage() {}

func (x *GetRiskFactorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskFactorsRequest.ProtoReflect.Descriptor instead.
func (*GetRiskFactorsRequest) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{164}
}

func (x *GetRiskFactorsRequest) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type GetRiskFactorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RiskFactor *vega.RiskFactor `protobuf:"bytes,1,opt,name=risk_factor,json=riskFactor,proto3" json:"risk_factor,omitempty"`
}

func (x *GetRiskFactorsResponse) Reset() {
	*x = GetRiskFactorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_node_api_v1_trading_data_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRiskFactorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRiskFactorsResponse) ProtoMessage() {}

func (x *GetRiskFactorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_node_api_v1_trading_data_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRiskFactorsResponse.ProtoReflect.Descriptor instead.
func (*GetRiskFactorsResponse) Descriptor() ([]byte, []int) {
	return file_data_node_api_v1_trading_data_proto_rawDescGZIP(), []int{165}
}

func (x *GetRiskFactorsResponse) GetRiskFactor() *vega.RiskFactor {
	if x != nil {
		return x.RiskFactor
	}
	return nil
}

var File_data_node_api_v1_trading_data_proto protoreflect.FileDescriptor

var file_data_node_api_v1_trading_data_proto_rawDesc = []byte{
	0x0a, 0x23, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76, 0x65, 0x67,
	0x61, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x76, 0x65, 0x67, 0x61, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x76, 0x65, 0x67, 0x61,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73,
	0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x54, 0x6f, 0x22,
	0x4b, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x9d, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x71, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x19, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x22, 0x91,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x43, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x34, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x89, 0x01, 0x0a,
	0x0b, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x75, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x0f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x35, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x11, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x22, 0x33, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0x43, 0x0a, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x33, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0x6e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x49, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4e,
	0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4c,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4a,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x19, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a,
	0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x1d, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x1b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x18, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x19, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x1d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x3a, 0x0a, 0x1b, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4b,
	0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x14, 0x0a, 0x12, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x4a, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a,
	0x10, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x36,
	0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x22, 0x2d, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x16,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x50,
	0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x62, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0x40, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06,
	0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x54, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x0b, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0x41, 0x0a, 0x22, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x23, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x6e, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x53, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x3d, 0x0a, 0x18, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x39, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0x39, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0x4e, 0x0a,
	0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0xd1, 0x01,
	0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x03, 0x62, 0x75, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x71, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x65, 0x67,
	0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x56, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x3e, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x22, 0x42, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x22, 0x43, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x20, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22,
	0x4e, 0x0a, 0x21, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0x37, 0x0a, 0x1f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x20, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x36, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x18, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x19,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x37,
	0x0a, 0x12, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x3a, 0x0a, 0x15, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4b,
	0x0a, 0x17, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x12, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x13,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x12,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x22, 0x45, 0x0a, 0x1e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x49, 0x64, 0x22, 0xed, 0x01, 0x0a, 0x1f,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x0f, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x10, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x08, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x08,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x0f, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x07, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x1a, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x22, 0x6a, 0x0a, 0x1b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x14, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x60,
	0x0a, 0x11, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4d, 0x0a, 0x12, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x22,
	0x51, 0x0a, 0x12, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x13, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x22, 0x66, 0x0a, 0x17, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x18,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x54, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x15, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x22, 0x3e, 0x0a, 0x16, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x22, 0x51, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x5a, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x54, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a,
	0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32, 0xfd, 0x40, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x61, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x31, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x18, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x23, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12,
	0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x24,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x35,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65,
	0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x78, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x11, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x14, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68,
	0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75,
	0x73, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x67, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x29, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x78, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x14, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x8a, 0x01, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x33, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x75, 0x0a,
	0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x12,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x85, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x0e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x17, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12,
	0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x08, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6a, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a,
	0x13, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x0a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x26,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x55, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_node_api_v1_trading_data_proto_rawDescOnce sync.Once
	file_data_node_api_v1_trading_data_proto_rawDescData = file_data_node_api_v1_trading_data_proto_rawDesc
)

func file_data_node_api_v1_trading_data_proto_rawDescGZIP() []byte {
	file_data_node_api_v1_trading_data_proto_rawDescOnce.Do(func() {
		file_data_node_api_v1_trading_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_node_api_v1_trading_data_proto_rawDescData)
	})
	return file_data_node_api_v1_trading_data_proto_rawDescData
}

var file_data_node_api_v1_trading_data_proto_msgTypes = make([]protoimpl.MessageInfo, 166)
var file_data_node_api_v1_trading_data_proto_goTypes = []interface{}{
	(*TransfersRequest)(nil),                      // 0: datanode.api.v1.TransfersRequest
	(*TransfersResponse)(nil),                     // 1: datanode.api.v1.TransfersResponse
	(*DelegationsRequest)(nil),                    // 2: datanode.api.v1.DelegationsRequest
	(*DelegationsResponse)(nil),                   // 3: datanode.api.v1.DelegationsResponse
	(*ObserveDelegationsRequest)(nil),             // 4: datanode.api.v1.ObserveDelegationsRequest
	(*ObserveDelegationsResponse)(nil),            // 5: datanode.api.v1.ObserveDelegationsResponse
	(*PartyStakeRequest)(nil),                     // 6: datanode.api.v1.PartyStakeRequest
	(*PartyStakeResponse)(nil),                    // 7: datanode.api.v1.PartyStakeResponse
	(*GetNodeDataRequest)(nil),                    // 8: datanode.api.v1.GetNodeDataRequest
	(*GetNodeDataResponse)(nil),                   // 9: datanode.api.v1.GetNodeDataResponse
	(*GetNodesRequest)(nil),                       // 10: datanode.api.v1.GetNodesRequest
	(*GetNodesResponse)(nil),                      // 11: datanode.api.v1.GetNodesResponse
	(*GetNodeByIDRequest)(nil),                    // 12: datanode.api.v1.GetNodeByIDRequest
	(*GetNodeByIDResponse)(nil),                   // 13: datanode.api.v1.GetNodeByIDResponse
	(*GetEpochRequest)(nil),                       // 14: datanode.api.v1.GetEpochRequest
	(*GetEpochResponse)(nil),                      // 15: datanode.api.v1.GetEpochResponse
	(*KeyRotation)(nil),                           // 16: datanode.api.v1.KeyRotation
	(*GetKeyRotationsRequest)(nil),                // 17: datanode.api.v1.GetKeyRotationsRequest
	(*GetKeyRotationsResponse)(nil),               // 18: datanode.api.v1.GetKeyRotationsResponse
	(*GetKeyRotationsByNodeRequest)(nil),          // 19: datanode.api.v1.GetKeyRotationsByNodeRequest
	(*GetKeyRotationsByNodeResponse)(nil),         // 20: datanode.api.v1.GetKeyRotationsByNodeResponse
	(*AssetsRequest)(nil),                         // 21: datanode.api.v1.AssetsRequest
	(*AssetsResponse)(nil),                        // 22: datanode.api.v1.AssetsResponse
	(*AssetByIDRequest)(nil),                      // 23: datanode.api.v1.AssetByIDRequest
	(*AssetByIDResponse)(nil),                     // 24: datanode.api.v1.AssetByIDResponse
	(*GetNodeSignaturesAggregateRequest)(nil),     // 25: datanode.api.v1.GetNodeSignaturesAggregateRequest
	(*GetNodeSignaturesAggregateResponse)(nil),    // 26: datanode.api.v1.GetNodeSignaturesAggregateResponse
	(*OptionalProposalState)(nil),                 // 27: datanode.api.v1.OptionalProposalState
	(*GetProposalsRequest)(nil),                   // 28: datanode.api.v1.GetProposalsRequest
	(*GetProposalsResponse)(nil),                  // 29: datanode.api.v1.GetProposalsResponse
	(*GetProposalsByPartyRequest)(nil),            // 30: datanode.api.v1.GetProposalsByPartyRequest
	(*GetProposalsByPartyResponse)(nil),           // 31: datanode.api.v1.GetProposalsByPartyResponse
	(*GetVotesByPartyRequest)(nil),                // 32: datanode.api.v1.GetVotesByPartyRequest
	(*GetVotesByPartyResponse)(nil),               // 33: datanode.api.v1.GetVotesByPartyResponse
	(*GetNewMarketProposalsRequest)(nil),          // 34: datanode.api.v1.GetNewMarketProposalsRequest
	(*GetNewMarketProposalsResponse)(nil),         // 35: datanode.api.v1.GetNewMarketProposalsResponse
	(*GetUpdateMarketProposalsRequest)(nil),       // 36: datanode.api.v1.GetUpdateMarketProposalsRequest
	(*GetUpdateMarketProposalsResponse)(nil),      // 37: datanode.api.v1.GetUpdateMarketProposalsResponse
	(*GetNetworkParametersProposalsRequest)(nil),  // 38: datanode.api.v1.GetNetworkParametersProposalsRequest
	(*GetNetworkParametersProposalsResponse)(nil), // 39: datanode.api.v1.GetNetworkParametersProposalsResponse
	(*GetNewFreeformProposalsRequest)(nil),        // 40: datanode.api.v1.GetNewFreeformProposalsRequest
	(*GetNewFreeformProposalsResponse)(nil),       // 41: datanode.api.v1.GetNewFreeformProposalsResponse
	(*GetNewAssetProposalsRequest)(nil),           // 42: datanode.api.v1.GetNewAssetProposalsRequest
	(*GetNewAssetProposalsResponse)(nil),          // 43: datanode.api.v1.GetNewAssetProposalsResponse
	(*GetProposalByIDRequest)(nil),                // 44: datanode.api.v1.GetProposalByIDRequest
	(*GetProposalByIDResponse)(nil),               // 45: datanode.api.v1.GetProposalByIDResponse
	(*GetProposalByReferenceRequest)(nil),         // 46: datanode.api.v1.GetProposalByReferenceRequest
	(*GetProposalByReferenceResponse)(nil),        // 47: datanode.api.v1.GetProposalByReferenceResponse
	(*ObserveGovernanceRequest)(nil),              // 48: datanode.api.v1.ObserveGovernanceRequest
	(*ObserveGovernanceResponse)(nil),             // 49: datanode.api.v1.ObserveGovernanceResponse
	(*ObservePartyProposalsRequest)(nil),          // 50: datanode.api.v1.ObservePartyProposalsRequest
	(*ObservePartyProposalsResponse)(nil),         // 51: datanode.api.v1.ObservePartyProposalsResponse
	(*ObserveProposalVotesRequest)(nil),           // 52: datanode.api.v1.ObserveProposalVotesRequest
	(*ObserveProposalVotesResponse)(nil),          // 53: datanode.api.v1.ObserveProposalVotesResponse
	(*ObservePartyVotesRequest)(nil),              // 54: datanode.api.v1.ObservePartyVotesRequest
	(*ObservePartyVotesResponse)(nil),             // 55: datanode.api.v1.ObservePartyVotesResponse
	(*MarginLevelsSubscribeRequest)(nil),          // 56: datanode.api.v1.MarginLevelsSubscribeRequest
	(*MarginLevelsSubscribeResponse)(nil),         // 57: datanode.api.v1.MarginLevelsSubscribeResponse
	(*MarginLevelsRequest)(nil),                   // 58: datanode.api.v1.MarginLevelsRequest
	(*MarginLevelsResponse)(nil),                  // 59: datanode.api.v1.MarginLevelsResponse
	(*MarketsDataSubscribeRequest)(nil),           // 60: datanode.api.v1.MarketsDataSubscribeRequest
	(*MarketsDataSubscribeResponse)(nil),          // 61: datanode.api.v1.MarketsDataSubscribeResponse
	(*MarketDataByIDRequest)(nil),                 // 62: datanode.api.v1.MarketDataByIDRequest
	(*MarketDataByIDResponse)(nil),                // 63: datanode.api.v1.MarketDataByIDResponse
	(*MarketsDataRequest)(nil),                    // 64: datanode.api.v1.MarketsDataRequest
	(*MarketsDataResponse)(nil),                   // 65: datanode.api.v1.MarketsDataResponse
	(*LastTradeRequest)(nil),                      // 66: datanode.api.v1.LastTradeRequest
	(*LastTradeResponse)(nil),                     // 67: datanode.api.v1.LastTradeResponse
	(*MarketByIDRequest)(nil),                     // 68: datanode.api.v1.MarketByIDRequest
	(*MarketByIDResponse)(nil),                    // 69: datanode.api.v1.MarketByIDResponse
	(*PartyByIDRequest)(nil),                      // 70: datanode.api.v1.PartyByIDRequest
	(*PartyByIDResponse)(nil),                     // 71: datanode.api.v1.PartyByIDResponse
	(*PartiesRequest)(nil),                        // 72: datanode.api.v1.PartiesRequest
	(*PartiesResponse)(nil),                       // 73: datanode.api.v1.PartiesResponse
	(*TradesByPartyRequest)(nil),                  // 74: datanode.api.v1.TradesByPartyRequest
	(*TradesByPartyResponse)(nil),                 // 75: datanode.api.v1.TradesByPartyResponse
	(*TradesByOrderRequest)(nil),                  // 76: datanode.api.v1.TradesByOrderRequest
	(*TradesByOrderResponse)(nil),                 // 77: datanode.api.v1.TradesByOrderResponse
	(*AccountsSubscribeRequest)(nil),              // 78: datanode.api.v1.AccountsSubscribeRequest
	(*AccountsSubscribeResponse)(nil),             // 79: datanode.api.v1.AccountsSubscribeResponse
	(*OrdersSubscribeRequest)(nil),                // 80: datanode.api.v1.OrdersSubscribeRequest
	(*TradesSubscribeRequest)(nil),                // 81: datanode.api.v1.TradesSubscribeRequest
	(*CandlesSubscribeRequest)(nil),               // 82: datanode.api.v1.CandlesSubscribeRequest
	(*CandlesSubscribeResponse)(nil),              // 83: datanode.api.v1.CandlesSubscribeResponse
	(*MarketDepthSubscribeRequest)(nil),           // 84: datanode.api.v1.MarketDepthSubscribeRequest
	(*MarketDepthSubscribeResponse)(nil),          // 85: datanode.api.v1.MarketDepthSubscribeResponse
	(*MarketDepthUpdatesSubscribeRequest)(nil),    // 86: datanode.api.v1.MarketDepthUpdatesSubscribeRequest
	(*MarketDepthUpdatesSubscribeResponse)(nil),   // 87: datanode.api.v1.MarketDepthUpdatesSubscribeResponse
	(*PositionsSubscribeRequest)(nil),             // 88: datanode.api.v1.PositionsSubscribeRequest
	(*PositionsSubscribeResponse)(nil),            // 89: datanode.api.v1.PositionsSubscribeResponse
	(*OrdersByMarketRequest)(nil),                 // 90: datanode.api.v1.OrdersByMarketRequest
	(*OrdersByMarketResponse)(nil),                // 91: datanode.api.v1.OrdersByMarketResponse
	(*OrdersByPartyRequest)(nil),                  // 92: datanode.api.v1.OrdersByPartyRequest
	(*OrdersByPartyResponse)(nil),                 // 93: datanode.api.v1.OrdersByPartyResponse
	(*OrderByMarketAndIDRequest)(nil),             // 94: datanode.api.v1.OrderByMarketAndIDRequest
	(*OrderByMarketAndIDResponse)(nil),            // 95: datanode.api.v1.OrderByMarketAndIDResponse
	(*OrderByReferenceRequest)(nil),               // 96: datanode.api.v1.OrderByReferenceRequest
	(*OrderByReferenceResponse)(nil),              // 97: datanode.api.v1.OrderByReferenceResponse
	(*MarketsRequest)(nil),                        // 98: datanode.api.v1.MarketsRequest
	(*MarketsResponse)(nil),                       // 99: datanode.api.v1.MarketsResponse
	(*CandlesRequest)(nil),                        // 100: datanode.api.v1.CandlesRequest
	(*CandlesResponse)(nil),                       // 101: datanode.api.v1.CandlesResponse
	(*MarketDepthRequest)(nil),                    // 102: datanode.api.v1.MarketDepthRequest
	(*MarketDepthResponse)(nil),                   // 103: datanode.api.v1.MarketDepthResponse
	(*TradesByMarketRequest)(nil),                 // 104: datanode.api.v1.TradesByMarketRequest
	(*TradesByMarketResponse)(nil),                // 105: datanode.api.v1.TradesByMarketResponse
	(*PositionsByPartyRequest)(nil),               // 106: datanode.api.v1.PositionsByPartyRequest
	(*PositionsByPartyResponse)(nil),              // 107: datanode.api.v1.PositionsByPartyResponse
	(*GetVegaTimeRequest)(nil),                    // 108: datanode.api.v1.GetVegaTimeRequest
	(*GetVegaTimeResponse)(nil),                   // 109: datanode.api.v1.GetVegaTimeResponse
	(*Pagination)(nil),                            // 110: datanode.api.v1.Pagination
	(*OrdersSubscribeResponse)(nil),               // 111: datanode.api.v1.OrdersSubscribeResponse
	(*TradesSubscribeResponse)(nil),               // 112: datanode.api.v1.TradesSubscribeResponse
	(*TransferResponsesSubscribeRequest)(nil),     // 113: datanode.api.v1.TransferResponsesSubscribeRequest
	(*TransferResponsesSubscribeResponse)(nil),    // 114: datanode.api.v1.TransferResponsesSubscribeResponse
	(*PartyAccountsRequest)(nil),                  // 115: datanode.api.v1.PartyAccountsRequest
	(*PartyAccountsResponse)(nil),                 // 116: datanode.api.v1.PartyAccountsResponse
	(*MarketAccountsRequest)(nil),                 // 117: datanode.api.v1.MarketAccountsRequest
	(*MarketAccountsResponse)(nil),                // 118: datanode.api.v1.MarketAccountsResponse
	(*FeeInfrastructureAccountsRequest)(nil),      // 119: datanode.api.v1.FeeInfrastructureAccountsRequest
	(*FeeInfrastructureAccountsResponse)(nil),     // 120: datanode.api.v1.FeeInfrastructureAccountsResponse
	(*GlobalRewardPoolAccountsRequest)(nil),       // 121: datanode.api.v1.GlobalRewardPoolAccountsRequest
	(*GlobalRewardPoolAccountsResponse)(nil),      // 122: datanode.api.v1.GlobalRewardPoolAccountsResponse
	(*OrderByIDRequest)(nil),                      // 123: datanode.api.v1.OrderByIDRequest
	(*OrderByIDResponse)(nil),                     // 124: datanode.api.v1.OrderByIDResponse
	(*OrderVersionsByIDRequest)(nil),              // 125: datanode.api.v1.OrderVersionsByIDRequest
	(*OrderVersionsByIDResponse)(nil),             // 126: datanode.api.v1.OrderVersionsByIDResponse
	(*EstimateFeeRequest)(nil),                    // 127: datanode.api.v1.EstimateFeeRequest
	(*EstimateFeeResponse)(nil),                   // 128: datanode.api.v1.EstimateFeeResponse
	(*EstimateMarginRequest)(nil),                 // 129: datanode.api.v1.EstimateMarginRequest
	(*EstimateMarginResponse)(nil),                // 130: datanode.api.v1.EstimateMarginResponse
	(*ObserveEventBusRequest)(nil),                // 131: datanode.api.v1.ObserveEventBusRequest
	(*ObserveEventBusResponse)(nil),               // 132: datanode.api.v1.ObserveEventBusResponse
	(*WithdrawalsRequest)(nil),                    // 133: datanode.api.v1.WithdrawalsRequest
	(*WithdrawalsResponse)(nil),                   // 134: datanode.api.v1.WithdrawalsResponse
	(*WithdrawalRequest)(nil),                     // 135: datanode.api.v1.WithdrawalRequest
	(*WithdrawalResponse)(nil),                    // 136: datanode.api.v1.WithdrawalResponse
	(*ERC20WithdrawalApprovalRequest)(nil),        // 137: datanode.api.v1.ERC20WithdrawalApprovalRequest
	(*ERC20WithdrawalApprovalResponse)(nil),       // 138: datanode.api.v1.ERC20WithdrawalApprovalResponse
	(*DepositsRequest)(nil),                       // 139: datanode.api.v1.DepositsRequest
	(*DepositsResponse)(nil),                      // 140: datanode.api.v1.DepositsResponse
	(*DepositRequest)(nil),                        // 141: datanode.api.v1.DepositRequest
	(*DepositResponse)(nil),                       // 142: datanode.api.v1.DepositResponse
	(*NetworkParametersRequest)(nil),              // 143: datanode.api.v1.NetworkParametersRequest
	(*NetworkParametersResponse)(nil),             // 144: datanode.api.v1.NetworkParametersResponse
	(*LiquidityProvisionsRequest)(nil),            // 145: datanode.api.v1.LiquidityProvisionsRequest
	(*LiquidityProvisionsResponse)(nil),           // 146: datanode.api.v1.LiquidityProvisionsResponse
	(*OracleSpecRequest)(nil),                     // 147: datanode.api.v1.OracleSpecRequest
	(*OracleSpecResponse)(nil),                    // 148: datanode.api.v1.OracleSpecResponse
	(*OracleSpecsRequest)(nil),                    // 149: datanode.api.v1.OracleSpecsRequest
	(*OracleSpecsResponse)(nil),                   // 150: datanode.api.v1.OracleSpecsResponse
	(*OracleDataBySpecRequest)(nil),               // 151: datanode.api.v1.OracleDataBySpecRequest
	(*OracleDataBySpecResponse)(nil),              // 152: datanode.api.v1.OracleDataBySpecResponse
	(*ListOracleDataRequest)(nil),                 // 153: datanode.api.v1.ListOracleDataRequest
	(*ListOracleDataResponse)(nil),                // 154: datanode.api.v1.ListOracleDataResponse
	(*ObserveRewardsRequest)(nil),                 // 155: datanode.api.v1.ObserveRewardsRequest
	(*ObserveRewardsResponse)(nil),                // 156: datanode.api.v1.ObserveRewardsResponse
	(*GetRewardSummariesRequest)(nil),             // 157: datanode.api.v1.GetRewardSummariesRequest
	(*GetRewardSummariesResponse)(nil),            // 158: datanode.api.v1.GetRewardSummariesResponse
	(*GetRewardsRequest)(nil),                     // 159: datanode.api.v1.GetRewardsRequest
	(*GetRewardsResponse)(nil),                    // 160: datanode.api.v1.GetRewardsResponse
	(*Checkpoint)(nil),                            // 161: datanode.api.v1.Checkpoint
	(*CheckpointsRequest)(nil),                    // 162: datanode.api.v1.CheckpointsRequest
	(*CheckpointsResponse)(nil),                   // 163: datanode.api.v1.CheckpointsResponse
	(*GetRiskFactorsRequest)(nil),                 // 164: datanode.api.v1.GetRiskFactorsRequest
	(*GetRiskFactorsResponse)(nil),                // 165: datanode.api.v1.GetRiskFactorsResponse
	(*v1.Transfer)(nil),                           // 166: vega.events.v1.Transfer
	(*vega.Delegation)(nil),                       // 167: vega.Delegation
	(*v1.StakeLinking)(nil),                       // 168: vega.events.v1.StakeLinking
	(*vega.NodeData)(nil),                         // 169: vega.NodeData
	(*vega.Node)(nil),                             // 170: vega.Node
	(*vega.Epoch)(nil),                            // 171: vega.Epoch
	(*vega.Asset)(nil),                            // 172: vega.Asset
	(*v11.NodeSignature)(nil),                     // 173: vega.commands.v1.NodeSignature
	(vega.Proposal_State)(0),                      // 174: vega.Proposal.State
	(*vega.GovernanceData)(nil),                   // 175: vega.GovernanceData
	(*vega.Vote)(nil),                             // 176: vega.Vote
	(*vega.MarginLevels)(nil),                     // 177: vega.MarginLevels
	(*vega.MarketData)(nil),                       // 178: vega.MarketData
	(*vega.Trade)(nil),                            // 179: vega.Trade
	(*vega.Market)(nil),                           // 180: vega.Market
	(*vega.Party)(nil),                            // 181: vega.Party
	(vega.AccountType)(0),                         // 182: vega.AccountType
	(*vega.Account)(nil),                          // 183: vega.Account
	(vega.Interval)(0),                            // 184: vega.Interval
	(*vega.Candle)(nil),                           // 185: vega.Candle
	(*vega.MarketDepth)(nil),                      // 186: vega.MarketDepth
	(*vega.MarketDepthUpdate)(nil),                // 187: vega.MarketDepthUpdate
	(*vega.Position)(nil),                         // 188: vega.Position
	(*vega.Order)(nil),                            // 189: vega.Order
	(*vega.PriceLevel)(nil),                       // 190: vega.PriceLevel
	(*vega.TransferResponse)(nil),                 // 191: vega.TransferResponse
	(*vega.Fee)(nil),                              // 192: vega.Fee
	(v1.BusEventType)(0),                          // 193: vega.events.v1.BusEventType
	(*v1.BusEvent)(nil),                           // 194: vega.events.v1.BusEvent
	(*vega.Withdrawal)(nil),                       // 195: vega.Withdrawal
	(*vega.Deposit)(nil),                          // 196: vega.Deposit
	(*vega.NetworkParameter)(nil),                 // 197: vega.NetworkParameter
	(*vega.LiquidityProvision)(nil),               // 198: vega.LiquidityProvision
	(*v12.OracleSpec)(nil),                        // 199: oracles.v1.OracleSpec
	(*v12.OracleData)(nil),                        // 200: oracles.v1.OracleData
	(*vega.Reward)(nil),                           // 201: vega.Reward
	(*vega.RewardSummary)(nil),                    // 202: vega.RewardSummary
	(*vega.RiskFactor)(nil),                       // 203: vega.RiskFactor
}
var file_data_node_api_v1_trading_data_proto_depIdxs = []int32{
	166, // 0: datanode.api.v1.TransfersResponse.transfers:type_name -> vega.events.v1.Transfer
	110, // 1: datanode.api.v1.DelegationsRequest.pagination:type_name -> datanode.api.v1.Pagination
	167, // 2: datanode.api.v1.DelegationsResponse.delegations:type_name -> vega.Delegation
	167, // 3: datanode.api.v1.ObserveDelegationsResponse.delegation:type_name -> vega.Delegation
	168, // 4: datanode.api.v1.PartyStakeResponse.stake_linkings:type_name -> vega.events.v1.StakeLinking
	169, // 5: datanode.api.v1.GetNodeDataResponse.node_data:type_name -> vega.NodeData
	170, // 6: datanode.api.v1.GetNodesResponse.nodes:type_name -> vega.Node
	170, // 7: datanode.api.v1.GetNodeByIDResponse.node:type_name -> vega.Node
	171, // 8: datanode.api.v1.GetEpochResponse.epoch:type_name -> vega.Epoch
	16,  // 9: datanode.api.v1.GetKeyRotationsResponse.rotations:type_name -> datanode.api.v1.KeyRotation
	16,  // 10: datanode.api.v1.GetKeyRotationsByNodeResponse.rotations:type_name -> datanode.api.v1.KeyRotation
	172, // 11: datanode.api.v1.AssetsResponse.assets:type_name -> vega.Asset
	172, // 12: datanode.api.v1.AssetByIDResponse.asset:type_name -> vega.Asset
	173, // 13: datanode.api.v1.GetNodeSignaturesAggregateResponse.signatures:type_name -> vega.commands.v1.NodeSignature
	174, // 14: datanode.api.v1.OptionalProposalState.value:type_name -> vega.Proposal.State
	27,  // 15: datanode.api.v1.GetProposalsRequest.select_in_state:type_name -> datanode.api.v1.OptionalProposalState
	175, // 16: datanode.api.v1.GetProposalsResponse.data:type_name -> vega.GovernanceData
	27,  // 17: datanode.api.v1.GetProposalsByPartyRequest.select_in_state:type_name -> datanode.api.v1.OptionalProposalState
	175, // 18: datanode.api.v1.GetProposalsByPartyResponse.data:type_name -> vega.GovernanceData
	176, // 19: datanode.api.v1.GetVotesByPartyResponse.votes:type_name -> vega.Vote
	27,  // 20: datanode.api.v1.GetNewMarketProposalsRequest.select_in_state:type_name -> datanode.api.v1.OptionalProposalState
	175, // 21: datanode.api.v1.GetNewMarketProposalsResponse.data:type_name -> vega.GovernanceData
	27,  // 22: datanode.api.v1.GetUpdateMarketProposalsRequest.select_in_state:type_name -> datanode.api.v1.OptionalProposalState
	175, // 23: datanode.api.v1.GetUpdateMarketProposalsResponse.data:type_name -> vega.GovernanceData
	27,  // 24: datanode.api.v1.GetNetworkParametersProposalsRequest.select_in_state:type_name -> datanode.api.v1.OptionalProposalState
	175, // 25: datanode.api.v1.GetNetworkParametersProposalsResponse.data:type_name -> vega.GovernanceData
	27,  // 26: datanode.api.v1.GetNewFreeformProposalsRequest.select_in_state:type_name -> datanode.api.v1.OptionalProposalState
	175, // 27: datanode.api.v1.GetNewFreeformProposalsResponse.data:type_name -> vega.GovernanceData
	27,  // 28: datanode.api.v1.GetNewAssetProposalsRequest.select_in_state:type_name -> datanode.api.v1.OptionalProposalState
	175, // 29: datanode.api.v1.GetNewAssetProposalsResponse.data:type_name -> vega.GovernanceData
	175, // 30: datanode.api.v1.GetProposalByIDResponse.data:type_name -> vega.GovernanceData
	175, // 31: datanode.api.v1.GetProposalByReferenceResponse.data:type_name -> vega.GovernanceData
	175, // 32: datanode.api.v1.ObserveGovernanceResponse.data:type_name -> vega.GovernanceData
	175, // 33: datanode.api.v1.ObservePartyProposalsResponse.data:type_name -> vega.GovernanceData
	176, // 34: datanode.api.v1.ObserveProposalVotesResponse.vote:type_name -> vega.Vote
	176, // 35: datanode.api.v1.ObservePartyVotesResponse.vote:type_name -> vega.Vote
	177, // 36: datanode.api.v1.MarginLevelsSubscribeResponse.margin_levels:type_name -> vega.MarginLevels
	177, // 37: datanode.api.v1.MarginLevelsResponse.margin_levels:type_name -> vega.MarginLevels
	178, // 38: datanode.api.v1.MarketsDataSubscribeResponse.market_data:type_name -> vega.MarketData
	178, // 39: datanode.api.v1.MarketDataByIDResponse.market_data:type_name -> vega.MarketData
	178, // 40: datanode.api.v1.MarketsDataResponse.markets_data:type_name -> vega.MarketData
	179, // 41: datanode.api.v1.LastTradeResponse.trade:type_name -> vega.Trade
	180, // 42: datanode.api.v1.MarketByIDResponse.market:type_name -> vega.Market
	181, // 43: datanode.api.v1.PartyByIDResponse.party:type_name -> vega.Party
	181, // 44: datanode.api.v1.PartiesResponse.parties:type_name -> vega.Party
	110, // 45: datanode.api.v1.TradesByPartyRequest.pagination:type_name -> datanode.api.v1.Pagination
	179, // 46: datanode.api.v1.TradesByPartyResponse.trades:type_name -> vega.Trade
	179, // 47: datanode.api.v1.TradesByOrderResponse.trades:type_name -> vega.Trade
	182, // 48: datanode.api.v1.AccountsSubscribeRequest.type:type_name -> vega.AccountType
	183, // 49: datanode.api.v1.AccountsSubscribeResponse.account:type_name -> vega.Account
	184, // 50: datanode.api.v1.CandlesSubscribeRequest.interval:type_name -> vega.Interval
	185, // 51: datanode.api.v1.CandlesSubscribeResponse.candle:type_name -> vega.Candle
	186, // 52: datanode.api.v1.MarketDepthSubscribeResponse.market_depth:type_name -> vega.MarketDepth
	187, // 53: datanode.api.v1.MarketDepthUpdatesSubscribeResponse.update:type_name -> vega.MarketDepthUpdate
	188, // 54: datanode.api.v1.PositionsSubscribeResponse.position:type_name -> vega.Position
	110, // 55: datanode.api.v1.OrdersByMarketRequest.pagination:type_name -> datanode.api.v1.Pagination
	189, // 56: datanode.api.v1.OrdersByMarketResponse.orders:type_name -> vega.Order
	110, // 57: datanode.api.v1.OrdersByPartyRequest.pagination:type_name -> datanode.api.v1.Pagination
	189, // 58: datanode.api.v1.OrdersByPartyResponse.orders:type_name -> vega.Order
	189, // 59: datanode.api.v1.OrderByMarketAndIDResponse.order:type_name -> vega.Order
	189, // 60: datanode.api.v1.OrderByReferenceResponse.order:type_name -> vega.Order
	180, // 61: datanode.api.v1.MarketsResponse.markets:type_name -> vega.Market
	184, // 62: datanode.api.v1.CandlesRequest.interval:type_name -> vega.Interval
	185, // 63: datanode.api.v1.CandlesResponse.candles:type_name -> vega.Candle
	190, // 64: datanode.api.v1.MarketDepthResponse.buy:type_name -> vega.PriceLevel
	190, // 65: datanode.api.v1.MarketDepthResponse.sell:type_name -> vega.PriceLevel
	179, // 66: datanode.api.v1.MarketDepthResponse.last_trade:type_name -> vega.Trade
	110, // 67: datanode.api.v1.TradesByMarketRequest.pagination:type_name -> datanode.api.v1.Pagination
	179, // 68: datanode.api.v1.TradesByMarketResponse.trades:type_name -> vega.Trade
	188, // 69: datanode.api.v1.PositionsByPartyResponse.positions:type_name -> vega.Position
	189, // 70: datanode.api.v1.OrdersSubscribeResponse.orders:type_name -> vega.Order
	179, // 71: datanode.api.v1.TradesSubscribeResponse.trades:type_name -> vega.Trade
	191, // 72: datanode.api.v1.TransferResponsesSubscribeResponse.response:type_name -> vega.TransferResponse
	182, // 73: datanode.api.v1.PartyAccountsRequest.type:type_name -> vega.AccountType
	183, // 74: datanode.api.v1.PartyAccountsResponse.accounts:type_name -> vega.Account
	183, // 75: datanode.api.v1.MarketAccountsResponse.accounts:type_name -> vega.Account
	183, // 76: datanode.api.v1.FeeInfrastructureAccountsResponse.accounts:type_name -> vega.Account
	183, // 77: datanode.api.v1.GlobalRewardPoolAccountsResponse.accounts:type_name -> vega.Account
	189, // 78: datanode.api.v1.OrderByIDResponse.order:type_name -> vega.Order
	110, // 79: datanode.api.v1.OrderVersionsByIDRequest.pagination:type_name -> datanode.api.v1.Pagination
	189, // 80: datanode.api.v1.OrderVersionsByIDResponse.orders:type_name -> vega.Order
	189, // 81: datanode.api.v1.EstimateFeeRequest.order:type_name -> vega.Order
	192, // 82: datanode.api.v1.EstimateFeeResponse.fee:type_name -> vega.Fee
	189, // 83: datanode.api.v1.EstimateMarginRequest.order:type_name -> vega.Order
	177, // 84: datanode.api.v1.EstimateMarginResponse.margin_levels:type_name -> vega.MarginLevels
	193, // 85: datanode.api.v1.ObserveEventBusRequest.type:type_name -> vega.events.v1.BusEventType
	194, // 86: datanode.api.v1.ObserveEventBusResponse.events:type_name -> vega.events.v1.BusEvent
	195, // 87: datanode.api.v1.WithdrawalsResponse.withdrawals:type_name -> vega.Withdrawal
	195, // 88: datanode.api.v1.WithdrawalResponse.withdrawal:type_name -> vega.Withdrawal
	196, // 89: datanode.api.v1.DepositsResponse.deposits:type_name -> vega.Deposit
	196, // 90: datanode.api.v1.DepositResponse.deposit:type_name -> vega.Deposit
	197, // 91: datanode.api.v1.NetworkParametersResponse.network_parameters:type_name -> vega.NetworkParameter
	198, // 92: datanode.api.v1.LiquidityProvisionsResponse.liquidity_provisions:type_name -> vega.LiquidityProvision
	110, // 93: datanode.api.v1.OracleSpecRequest.pagination:type_name -> datanode.api.v1.Pagination
	199, // 94: datanode.api.v1.OracleSpecResponse.oracle_spec:type_name -> oracles.v1.OracleSpec
	110, // 95: datanode.api.v1.OracleSpecsRequest.pagination:type_name -> datanode.api.v1.Pagination
	199, // 96: datanode.api.v1.OracleSpecsResponse.oracle_specs:type_name -> oracles.v1.OracleSpec
	110, // 97: datanode.api.v1.OracleDataBySpecRequest.pagination:type_name -> datanode.api.v1.Pagination
	200, // 98: datanode.api.v1.OracleDataBySpecResponse.oracle_data:type_name -> oracles.v1.OracleData
	110, // 99: datanode.api.v1.ListOracleDataRequest.pagination:type_name -> datanode.api.v1.Pagination
	200, // 100: datanode.api.v1.ListOracleDataResponse.oracle_data:type_name -> oracles.v1.OracleData
	201, // 101: datanode.api.v1.ObserveRewardsResponse.reward:type_name -> vega.Reward
	202, // 102: datanode.api.v1.GetRewardSummariesResponse.summaries:type_name -> vega.RewardSummary
	110, // 103: datanode.api.v1.GetRewardsRequest.pagination:type_name -> datanode.api.v1.Pagination
	201, // 104: datanode.api.v1.GetRewardsResponse.rewards:type_name -> vega.Reward
	161, // 105: datanode.api.v1.CheckpointsResponse.checkpoints:type_name -> datanode.api.v1.Checkpoint
	203, // 106: datanode.api.v1.GetRiskFactorsResponse.risk_factor:type_name -> vega.RiskFactor
	117, // 107: datanode.api.v1.TradingDataService.MarketAccounts:input_type -> datanode.api.v1.MarketAccountsRequest
	115, // 108: datanode.api.v1.TradingDataService.PartyAccounts:input_type -> datanode.api.v1.PartyAccountsRequest
	119, // 109: datanode.api.v1.TradingDataService.FeeInfrastructureAccounts:input_type -> datanode.api.v1.FeeInfrastructureAccountsRequest
	121, // 110: datanode.api.v1.TradingDataService.GlobalRewardPoolAccounts:input_type -> datanode.api.v1.GlobalRewardPoolAccountsRequest
	100, // 111: datanode.api.v1.TradingDataService.Candles:input_type -> datanode.api.v1.CandlesRequest
	62,  // 112: datanode.api.v1.TradingDataService.MarketDataByID:input_type -> datanode.api.v1.MarketDataByIDRequest
	64,  // 113: datanode.api.v1.TradingDataService.MarketsData:input_type -> datanode.api.v1.MarketsDataRequest
	68,  // 114: datanode.api.v1.TradingDataService.MarketByID:input_type -> datanode.api.v1.MarketByIDRequest
	102, // 115: datanode.api.v1.TradingDataService.MarketDepth:input_type -> datanode.api.v1.MarketDepthRequest
	98,  // 116: datanode.api.v1.TradingDataService.Markets:input_type -> datanode.api.v1.MarketsRequest
	94,  // 117: datanode.api.v1.TradingDataService.OrderByMarketAndID:input_type -> datanode.api.v1.OrderByMarketAndIDRequest
	96,  // 118: datanode.api.v1.TradingDataService.OrderByReference:input_type -> datanode.api.v1.OrderByReferenceRequest
	90,  // 119: datanode.api.v1.TradingDataService.OrdersByMarket:input_type -> datanode.api.v1.OrdersByMarketRequest
	92,  // 120: datanode.api.v1.TradingDataService.OrdersByParty:input_type -> datanode.api.v1.OrdersByPartyRequest
	123, // 121: datanode.api.v1.TradingDataService.OrderByID:input_type -> datanode.api.v1.OrderByIDRequest
	125, // 122: datanode.api.v1.TradingDataService.OrderVersionsByID:input_type -> datanode.api.v1.OrderVersionsByIDRequest
	58,  // 123: datanode.api.v1.TradingDataService.MarginLevels:input_type -> datanode.api.v1.MarginLevelsRequest
	72,  // 124: datanode.api.v1.TradingDataService.Parties:input_type -> datanode.api.v1.PartiesRequest
	70,  // 125: datanode.api.v1.TradingDataService.PartyByID:input_type -> datanode.api.v1.PartyByIDRequest
	106, // 126: datanode.api.v1.TradingDataService.PositionsByParty:input_type -> datanode.api.v1.PositionsByPartyRequest
	66,  // 127: datanode.api.v1.TradingDataService.LastTrade:input_type -> datanode.api.v1.LastTradeRequest
	104, // 128: datanode.api.v1.TradingDataService.TradesByMarket:input_type -> datanode.api.v1.TradesByMarketRequest
	76,  // 129: datanode.api.v1.TradingDataService.TradesByOrder:input_type -> datanode.api.v1.TradesByOrderRequest
	74,  // 130: datanode.api.v1.TradingDataService.TradesByParty:input_type -> datanode.api.v1.TradesByPartyRequest
	28,  // 131: datanode.api.v1.TradingDataService.GetProposals:input_type -> datanode.api.v1.GetProposalsRequest
	30,  // 132: datanode.api.v1.TradingDataService.GetProposalsByParty:input_type -> datanode.api.v1.GetProposalsByPartyRequest
	32,  // 133: datanode.api.v1.TradingDataService.GetVotesByParty:input_type -> datanode.api.v1.GetVotesByPartyRequest
	34,  // 134: datanode.api.v1.TradingDataService.GetNewMarketProposals:input_type -> datanode.api.v1.GetNewMarketProposalsRequest
	36,  // 135: datanode.api.v1.TradingDataService.GetUpdateMarketProposals:input_type -> datanode.api.v1.GetUpdateMarketProposalsRequest
	38,  // 136: datanode.api.v1.TradingDataService.GetNetworkParametersProposals:input_type -> datanode.api.v1.GetNetworkParametersProposalsRequest
	42,  // 137: datanode.api.v1.TradingDataService.GetNewAssetProposals:input_type -> datanode.api.v1.GetNewAssetProposalsRequest
	40,  // 138: datanode.api.v1.TradingDataService.GetNewFreeformProposals:input_type -> datanode.api.v1.GetNewFreeformProposalsRequest
	44,  // 139: datanode.api.v1.TradingDataService.GetProposalByID:input_type -> datanode.api.v1.GetProposalByIDRequest
	46,  // 140: datanode.api.v1.TradingDataService.GetProposalByReference:input_type -> datanode.api.v1.GetProposalByReferenceRequest
	48,  // 141: datanode.api.v1.TradingDataService.ObserveGovernance:input_type -> datanode.api.v1.ObserveGovernanceRequest
	50,  // 142: datanode.api.v1.TradingDataService.ObservePartyProposals:input_type -> datanode.api.v1.ObservePartyProposalsRequest
	54,  // 143: datanode.api.v1.TradingDataService.ObservePartyVotes:input_type -> datanode.api.v1.ObservePartyVotesRequest
	52,  // 144: datanode.api.v1.TradingDataService.ObserveProposalVotes:input_type -> datanode.api.v1.ObserveProposalVotesRequest
	131, // 145: datanode.api.v1.TradingDataService.ObserveEventBus:input_type -> datanode.api.v1.ObserveEventBusRequest
	8,   // 146: datanode.api.v1.TradingDataService.GetNodeData:input_type -> datanode.api.v1.GetNodeDataRequest
	10,  // 147: datanode.api.v1.TradingDataService.GetNodes:input_type -> datanode.api.v1.GetNodesRequest
	12,  // 148: datanode.api.v1.TradingDataService.GetNodeByID:input_type -> datanode.api.v1.GetNodeByIDRequest
	17,  // 149: datanode.api.v1.TradingDataService.GetKeyRotations:input_type -> datanode.api.v1.GetKeyRotationsRequest
	19,  // 150: datanode.api.v1.TradingDataService.GetKeyRotationsByNode:input_type -> datanode.api.v1.GetKeyRotationsByNodeRequest
	14,  // 151: datanode.api.v1.TradingDataService.GetEpoch:input_type -> datanode.api.v1.GetEpochRequest
	108, // 152: datanode.api.v1.TradingDataService.GetVegaTime:input_type -> datanode.api.v1.GetVegaTimeRequest
	78,  // 153: datanode.api.v1.TradingDataService.AccountsSubscribe:input_type -> datanode.api.v1.AccountsSubscribeRequest
	82,  // 154: datanode.api.v1.TradingDataService.CandlesSubscribe:input_type -> datanode.api.v1.CandlesSubscribeRequest
	56,  // 155: datanode.api.v1.TradingDataService.MarginLevelsSubscribe:input_type -> datanode.api.v1.MarginLevelsSubscribeRequest
	84,  // 156: datanode.api.v1.TradingDataService.MarketDepthSubscribe:input_type -> datanode.api.v1.MarketDepthSubscribeRequest
	86,  // 157: datanode.api.v1.TradingDataService.MarketDepthUpdatesSubscribe:input_type -> datanode.api.v1.MarketDepthUpdatesSubscribeRequest
	60,  // 158: datanode.api.v1.TradingDataService.MarketsDataSubscribe:input_type -> datanode.api.v1.MarketsDataSubscribeRequest
	80,  // 159: datanode.api.v1.TradingDataService.OrdersSubscribe:input_type -> datanode.api.v1.OrdersSubscribeRequest
	88,  // 160: datanode.api.v1.TradingDataService.PositionsSubscribe:input_type -> datanode.api.v1.PositionsSubscribeRequest
	81,  // 161: datanode.api.v1.TradingDataService.TradesSubscribe:input_type -> datanode.api.v1.TradesSubscribeRequest
	113, // 162: datanode.api.v1.TradingDataService.TransferResponsesSubscribe:input_type -> datanode.api.v1.TransferResponsesSubscribeRequest
	25,  // 163: datanode.api.v1.TradingDataService.GetNodeSignaturesAggregate:input_type -> datanode.api.v1.GetNodeSignaturesAggregateRequest
	23,  // 164: datanode.api.v1.TradingDataService.AssetByID:input_type -> datanode.api.v1.AssetByIDRequest
	21,  // 165: datanode.api.v1.TradingDataService.Assets:input_type -> datanode.api.v1.AssetsRequest
	127, // 166: datanode.api.v1.TradingDataService.EstimateFee:input_type -> datanode.api.v1.EstimateFeeRequest
	129, // 167: datanode.api.v1.TradingDataService.EstimateMargin:input_type -> datanode.api.v1.EstimateMarginRequest
	137, // 168: datanode.api.v1.TradingDataService.ERC20WithdrawalApproval:input_type -> datanode.api.v1.ERC20WithdrawalApprovalRequest
	135, // 169: datanode.api.v1.TradingDataService.Withdrawal:input_type -> datanode.api.v1.WithdrawalRequest
	133, // 170: datanode.api.v1.TradingDataService.Withdrawals:input_type -> datanode.api.v1.WithdrawalsRequest
	141, // 171: datanode.api.v1.TradingDataService.Deposit:input_type -> datanode.api.v1.DepositRequest
	139, // 172: datanode.api.v1.TradingDataService.Deposits:input_type -> datanode.api.v1.DepositsRequest
	143, // 173: datanode.api.v1.TradingDataService.NetworkParameters:input_type -> datanode.api.v1.NetworkParametersRequest
	145, // 174: datanode.api.v1.TradingDataService.LiquidityProvisions:input_type -> datanode.api.v1.LiquidityProvisionsRequest
	147, // 175: datanode.api.v1.TradingDataService.OracleSpec:input_type -> datanode.api.v1.OracleSpecRequest
	149, // 176: datanode.api.v1.TradingDataService.OracleSpecs:input_type -> datanode.api.v1.OracleSpecsRequest
	151, // 177: datanode.api.v1.TradingDataService.OracleDataBySpec:input_type -> datanode.api.v1.OracleDataBySpecRequest
	153, // 178: datanode.api.v1.TradingDataService.ListOracleData:input_type -> datanode.api.v1.ListOracleDataRequest
	155, // 179: datanode.api.v1.TradingDataService.ObserveRewards:input_type -> datanode.api.v1.ObserveRewardsRequest
	159, // 180: datanode.api.v1.TradingDataService.GetRewards:input_type -> datanode.api.v1.GetRewardsRequest
	157, // 181: datanode.api.v1.TradingDataService.GetRewardSummaries:input_type -> datanode.api.v1.GetRewardSummariesRequest
	162, // 182: datanode.api.v1.TradingDataService.Checkpoints:input_type -> datanode.api.v1.CheckpointsRequest
	2,   // 183: datanode.api.v1.TradingDataService.Delegations:input_type -> datanode.api.v1.DelegationsRequest
	4,   // 184: datanode.api.v1.TradingDataService.ObserveDelegations:input_type -> datanode.api.v1.ObserveDelegationsRequest
	6,   // 185: datanode.api.v1.TradingDataService.PartyStake:input_type -> datanode.api.v1.PartyStakeRequest
	0,   // 186: datanode.api.v1.TradingDataService.Transfers:input_type -> datanode.api.v1.TransfersRequest
	164, // 187: datanode.api.v1.TradingDataService.GetRiskFactors:input_type -> datanode.api.v1.GetRiskFactorsRequest
	118, // 188: datanode.api.v1.TradingDataService.MarketAccounts:output_type -> datanode.api.v1.MarketAccountsResponse
	116, // 189: datanode.api.v1.TradingDataService.PartyAccounts:output_type -> datanode.api.v1.PartyAccountsResponse
	120, // 190: datanode.api.v1.TradingDataService.FeeInfrastructureAccounts:output_type -> datanode.api.v1.FeeInfrastructureAccountsResponse
	122, // 191: datanode.api.v1.TradingDataService.GlobalRewardPoolAccounts:output_type -> datanode.api.v1.GlobalRewardPoolAccountsResponse
	101, // 192: datanode.api.v1.TradingDataService.Candles:output_type -> datanode.api.v1.CandlesResponse
	63,  // 193: datanode.api.v1.TradingDataService.MarketDataByID:output_type -> datanode.api.v1.MarketDataByIDResponse
	65,  // 194: datanode.api.v1.TradingDataService.MarketsData:output_type -> datanode.api.v1.MarketsDataResponse
	69,  // 195: datanode.api.v1.TradingDataService.MarketByID:output_type -> datanode.api.v1.MarketByIDResponse
	103, // 196: datanode.api.v1.TradingDataService.MarketDepth:output_type -> datanode.api.v1.MarketDepthResponse
	99,  // 197: datanode.api.v1.TradingDataService.Markets:output_type -> datanode.api.v1.MarketsResponse
	95,  // 198: datanode.api.v1.TradingDataService.OrderByMarketAndID:output_type -> datanode.api.v1.OrderByMarketAndIDResponse
	97,  // 199: datanode.api.v1.TradingDataService.OrderByReference:output_type -> datanode.api.v1.OrderByReferenceResponse
	91,  // 200: datanode.api.v1.TradingDataService.OrdersByMarket:output_type -> datanode.api.v1.OrdersByMarketResponse
	93,  // 201: datanode.api.v1.TradingDataService.OrdersByParty:output_type -> datanode.api.v1.OrdersByPartyResponse
	124, // 202: datanode.api.v1.TradingDataService.OrderByID:output_type -> datanode.api.v1.OrderByIDResponse
	126, // 203: datanode.api.v1.TradingDataService.OrderVersionsByID:output_type -> datanode.api.v1.OrderVersionsByIDResponse
	59,  // 204: datanode.api.v1.TradingDataService.MarginLevels:output_type -> datanode.api.v1.MarginLevelsResponse
	73,  // 205: datanode.api.v1.TradingDataService.Parties:output_type -> datanode.api.v1.PartiesResponse
	71,  // 206: datanode.api.v1.TradingDataService.PartyByID:output_type -> datanode.api.v1.PartyByIDResponse
	107, // 207: datanode.api.v1.TradingDataService.PositionsByParty:output_type -> datanode.api.v1.PositionsByPartyResponse
	67,  // 208: datanode.api.v1.TradingDataService.LastTrade:output_type -> datanode.api.v1.LastTradeResponse
	105, // 209: datanode.api.v1.TradingDataService.TradesByMarket:output_type -> datanode.api.v1.TradesByMarketResponse
	77,  // 210: datanode.api.v1.TradingDataService.TradesByOrder:output_type -> datanode.api.v1.TradesByOrderResponse
	75,  // 211: datanode.api.v1.TradingDataService.TradesByParty:output_type -> datanode.api.v1.TradesByPartyResponse
	29,  // 212: datanode.api.v1.TradingDataService.GetProposals:output_type -> datanode.api.v1.GetProposalsResponse
	31,  // 213: datanode.api.v1.TradingDataService.GetProposalsByParty:output_type -> datanode.api.v1.GetProposalsByPartyResponse
	33,  // 214: datanode.api.v1.TradingDataService.GetVotesByParty:output_type -> datanode.api.v1.GetVotesByPartyResponse
	35,  // 215: datanode.api.v1.TradingDataService.GetNewMarketProposals:output_type -> datanode.api.v1.GetNewMarketProposalsResponse
	37,  // 216: datanode.api.v1.TradingDataService.GetUpdateMarketProposals:output_type -> datanode.api.v1.GetUpdateMarketProposalsResponse
	39,  // 217: datanode.api.v1.TradingDataService.GetNetworkParametersProposals:output_type -> datanode.api.v1.GetNetworkParametersProposalsResponse
	43,  // 218: datanode.api.v1.TradingDataService.GetNewAssetProposals:output_type -> datanode.api.v1.GetNewAssetProposalsResponse
	41,  // 219: datanode.api.v1.TradingDataService.GetNewFreeformProposals:output_type -> datanode.api.v1.GetNewFreeformProposalsResponse
	45,  // 220: datanode.api.v1.TradingDataService.GetProposalByID:output_type -> datanode.api.v1.GetProposalByIDResponse
	47,  // 221: datanode.api.v1.TradingDataService.GetProposalByReference:output_type -> datanode.api.v1.GetProposalByReferenceResponse
	49,  // 222: datanode.api.v1.TradingDataService.ObserveGovernance:output_type -> datanode.api.v1.ObserveGovernanceResponse
	51,  // 223: datanode.api.v1.TradingDataService.ObservePartyProposals:output_type -> datanode.api.v1.ObservePartyProposalsResponse
	55,  // 224: datanode.api.v1.TradingDataService.ObservePartyVotes:output_type -> datanode.api.v1.ObservePartyVotesResponse
	53,  // 225: datanode.api.v1.TradingDataService.ObserveProposalVotes:output_type -> datanode.api.v1.ObserveProposalVotesResponse
	132, // 226: datanode.api.v1.TradingDataService.ObserveEventBus:output_type -> datanode.api.v1.ObserveEventBusResponse
	9,   // 227: datanode.api.v1.TradingDataService.GetNodeData:output_type -> datanode.api.v1.GetNodeDataResponse
	11,  // 228: datanode.api.v1.TradingDataService.GetNodes:output_type -> datanode.api.v1.GetNodesResponse
	13,  // 229: datanode.api.v1.TradingDataService.GetNodeByID:output_type -> datanode.api.v1.GetNodeByIDResponse
	18,  // 230: datanode.api.v1.TradingDataService.GetKeyRotations:output_type -> datanode.api.v1.GetKeyRotationsResponse
	20,  // 231: datanode.api.v1.TradingDataService.GetKeyRotationsByNode:output_type -> datanode.api.v1.GetKeyRotationsByNodeResponse
	15,  // 232: datanode.api.v1.TradingDataService.GetEpoch:output_type -> datanode.api.v1.GetEpochResponse
	109, // 233: datanode.api.v1.TradingDataService.GetVegaTime:output_type -> datanode.api.v1.GetVegaTimeResponse
	79,  // 234: datanode.api.v1.TradingDataService.AccountsSubscribe:output_type -> datanode.api.v1.AccountsSubscribeResponse
	83,  // 235: datanode.api.v1.TradingDataService.CandlesSubscribe:output_type -> datanode.api.v1.CandlesSubscribeResponse
	57,  // 236: datanode.api.v1.TradingDataService.MarginLevelsSubscribe:output_type -> datanode.api.v1.MarginLevelsSubscribeResponse
	85,  // 237: datanode.api.v1.TradingDataService.MarketDepthSubscribe:output_type -> datanode.api.v1.MarketDepthSubscribeResponse
	87,  // 238: datanode.api.v1.TradingDataService.MarketDepthUpdatesSubscribe:output_type -> datanode.api.v1.MarketDepthUpdatesSubscribeResponse
	61,  // 239: datanode.api.v1.TradingDataService.MarketsDataSubscribe:output_type -> datanode.api.v1.MarketsDataSubscribeResponse
	111, // 240: datanode.api.v1.TradingDataService.OrdersSubscribe:output_type -> datanode.api.v1.OrdersSubscribeResponse
	89,  // 241: datanode.api.v1.TradingDataService.PositionsSubscribe:output_type -> datanode.api.v1.PositionsSubscribeResponse
	112, // 242: datanode.api.v1.TradingDataService.TradesSubscribe:output_type -> datanode.api.v1.TradesSubscribeResponse
	114, // 243: datanode.api.v1.TradingDataService.TransferResponsesSubscribe:output_type -> datanode.api.v1.TransferResponsesSubscribeResponse
	26,  // 244: datanode.api.v1.TradingDataService.GetNodeSignaturesAggregate:output_type -> datanode.api.v1.GetNodeSignaturesAggregateResponse
	24,  // 245: datanode.api.v1.TradingDataService.AssetByID:output_type -> datanode.api.v1.AssetByIDResponse
	22,  // 246: datanode.api.v1.TradingDataService.Assets:output_type -> datanode.api.v1.AssetsResponse
	128, // 247: datanode.api.v1.TradingDataService.EstimateFee:output_type -> datanode.api.v1.EstimateFeeResponse
	130, // 248: datanode.api.v1.TradingDataService.EstimateMargin:output_type -> datanode.api.v1.EstimateMarginResponse
	138, // 249: datanode.api.v1.TradingDataService.ERC20WithdrawalApproval:output_type -> datanode.api.v1.ERC20WithdrawalApprovalResponse
	136, // 250: datanode.api.v1.TradingDataService.Withdrawal:output_type -> datanode.api.v1.WithdrawalResponse
	134, // 251: datanode.api.v1.TradingDataService.Withdrawals:output_type -> datanode.api.v1.WithdrawalsResponse
	142, // 252: datanode.api.v1.TradingDataService.Deposit:output_type -> datanode.api.v1.DepositResponse
	140, // 253: datanode.api.v1.TradingDataService.Deposits:output_type -> datanode.api.v1.DepositsResponse
	144, // 254: datanode.api.v1.TradingDataService.NetworkParameters:output_type -> datanode.api.v1.NetworkParametersResponse
	146, // 255: datanode.api.v1.TradingDataService.LiquidityProvisions:output_type -> datanode.api.v1.LiquidityProvisionsResponse
	148, // 256: datanode.api.v1.TradingDataService.OracleSpec:output_type -> datanode.api.v1.OracleSpecResponse
	150, // 257: datanode.api.v1.TradingDataService.OracleSpecs:output_type -> datanode.api.v1.OracleSpecsResponse
	152, // 258: datanode.api.v1.TradingDataService.OracleDataBySpec:output_type -> datanode.api.v1.OracleDataBySpecResponse
	154, // 259: datanode.api.v1.TradingDataService.ListOracleData:output_type -> datanode.api.v1.ListOracleDataResponse
	156, // 260: datanode.api.v1.TradingDataService.ObserveRewards:output_type -> datanode.api.v1.ObserveRewardsResponse
	160, // 261: datanode.api.v1.TradingDataService.GetRewards:output_type -> datanode.api.v1.GetRewardsResponse
	158, // 262: datanode.api.v1.TradingDataService.GetRewardSummaries:output_type -> datanode.api.v1.GetRewardSummariesResponse
	163, // 263: datanode.api.v1.TradingDataService.Checkpoints:output_type -> datanode.api.v1.CheckpointsResponse
	3,   // 264: datanode.api.v1.TradingDataService.Delegations:output_type -> datanode.api.v1.DelegationsResponse
	5,   // 265: datanode.api.v1.TradingDataService.ObserveDelegations:output_type -> datanode.api.v1.ObserveDelegationsResponse
	7,   // 266: datanode.api.v1.TradingDataService.PartyStake:output_type -> datanode.api.v1.PartyStakeResponse
	1,   // 267: datanode.api.v1.TradingDataService.Transfers:output_type -> datanode.api.v1.TransfersResponse
	165, // 268: datanode.api.v1.TradingDataService.GetRiskFactors:output_type -> datanode.api.v1.GetRiskFactorsResponse
	188, // [188:269] is the sub-list for method output_type
	107, // [107:188] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_data_node_api_v1_trading_data_proto_init() }
func file_data_node_api_v1_trading_data_proto_init() {
	if File_data_node_api_v1_trading_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_node_api_v1_trading_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransfersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransfersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveDelegationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveDelegationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEpochResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRotationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRotationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRotationsByNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRotationsByNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSignaturesAggregateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSignaturesAggregateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalProposalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalsByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVotesByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVotesByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewMarketProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewMarketProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateMarketProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUpdateMarketProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkParametersProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkParametersProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewFreeformProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewFreeformProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAssetProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAssetProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProposalByReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveGovernanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveGovernanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveProposalVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveProposalVotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservePartyVotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginLevelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdatesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdatesSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByMarketAndIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByMarketAndIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesByMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsByPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVegaTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVegaTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponsesSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponsesSubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfrastructureAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfrastructureAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalRewardPoolAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalRewardPoolAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderVersionsByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderVersionsByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateMarginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateMarginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveEventBusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveEventBusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20WithdrawalApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20WithdrawalApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityProvisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSpecsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSpecsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDataBySpecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleDataBySpecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOracleDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOracleDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardSummariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardSummariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskFactorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_node_api_v1_trading_data_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRiskFactorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_node_api_v1_trading_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   166,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_node_api_v1_trading_data_proto_goTypes,
		DependencyIndexes: file_data_node_api_v1_trading_data_proto_depIdxs,
		MessageInfos:      file_data_node_api_v1_trading_data_proto_msgTypes,
	}.Build()
	File_data_node_api_v1_trading_data_proto = out.File
	file_data_node_api_v1_trading_data_proto_rawDesc = nil
	file_data_node_api_v1_trading_data_proto_goTypes = nil
	file_data_node_api_v1_trading_data_proto_depIdxs = nil
}
