syntax = "proto3";

option go_package = "code.vegaprotocol.io/vega/proto/api";

import "proto/vega.proto";
import "proto/markets.proto";

package api;

import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Vega Trading API";
    version: "0.0.1";
    contact: {
      name: "Vega";
      url: "https://vega.xyz/";
      email: "hi@vega.xyz";
    };
    license: {
      name: "TBD";
      url: "https://vega.xyz/tbd";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "200";
    value: {
      description: "The request was successful";
    }
  }
};

service trading {
  rpc SignIn(SignInRequest) returns (SignInResponse) {
    option (google.api.http) = {
      post: "/auth/token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Sign In";
      description: "Sign in to the system.\nSubmit a party ID and password, receive a token.";
      responses: {
        key: "500";
        value: {
          description: "Invalid credentials";
          schema: { json_schema: { ref: ".api.ErrorResponse"; } }
        }
      }
    };
  };

  rpc CheckToken(CheckTokenRequest) returns (CheckTokenResponse) {
    option (google.api.http) = {
      get: "/auth/token"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Check an API token";
      description: "Check the validity of an API token\n- Does it match the given partyID?\n- Has it expired?";
      responses: {
        key: "200";
        value: {
          description: "Token may or may not be ok. Check response body.";
          schema: { json_schema: { ref: ".api.CheckTokenResponse"; } }
        }
      }
    };
  };

  rpc AmendOrder(AmendOrderRequest) returns (vega.PendingOrder) {
    option (google.api.http) = {
      put: '/orders/{amendment.orderID}'
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Amend an Order";
      description: "";
    };
  };

  rpc CancelOrder(CancelOrderRequest) returns (vega.PendingOrder) {
    option (google.api.http) = {
      delete: '/orders/{cancellation.orderID}'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Cancel an Order";
      description: "";
    };
  };
  
  rpc SubmitOrder(SubmitOrderRequest) returns (vega.PendingOrder) {
    option (google.api.http) = {
      post: '/orders'
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Submit an Order";
      description: "";
    };
  };

  rpc NotifyTraderAccount(NotifyTraderAccountRequest) returns (NotifyTraderAccountResponse) {
    option (google.api.http) = {
      post: '/fountain'
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Request free money";
      description: "";
    };
  };

  rpc Withdraw(WithdrawRequest) returns (WithdrawResponse) {
    option (google.api.http) = {
      post: '/parties/{withdraw.partyID}/withdrawal'
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Request withdrawal";
      description: "";
    };
  };

}

message WithdrawRequest {
  vega.Withdraw withdraw = 1;
}

message WithdrawResponse {
  bool success = 1;
}

message NotifyTraderAccountRequest {
  vega.NotifyTraderAccount notif = 1;
}

message NotifyTraderAccountResponse {
  bool submitted = 1;
}

message SignInRequest {
  string id = 1;
  string password = 2;
}

message SignInResponse {
  string token = 1;
}

message SubmitOrderRequest {
  vega.OrderSubmission submission = 1;
  string token = 101;
}

message CancelOrderRequest {
  vega.OrderCancellation cancellation = 1;
  string token = 101;
}

message AmendOrderRequest {
  vega.OrderAmendment amendment = 1;
  string token = 101;
}

service trading_data {
  // Orders

  rpc OrdersByMarket(OrdersByMarketRequest) returns (OrdersResponse) {
    option (google.api.http) = {
      get: '/markets/{marketID}/orders'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Orders for a Market";
      description: "";
    };
  };

  rpc OrdersByParty(OrdersByPartyRequest) returns (OrdersResponse) {
    option (google.api.http) = {
      get: '/parties/{partyID}/orders'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Orders for a Party";
      description: "";
    };
  };

  rpc OrderByMarketAndId(OrderByMarketAndIdRequest) returns (OrderResponse) {
    option (google.api.http) = {
      get: '/markets/{marketID}/orders/{orderID}'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get an Order for a Market and given OrderID";
      description: "";
    };
  };

  rpc OrderByReference(OrderByReferenceRequest) returns (OrderResponse) {
    option (google.api.http) = {
      get: '/orders/{reference}'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get an Order by reference";
      description: "";
    };
  };

  // Markets

  rpc MarketByID(MarketByIDRequest) returns (MarketByIDResponse) {
    option (google.api.http) = {
      get: '/markets/{marketID}'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a Market by ID";
      description: "";
    };
  };

  rpc Markets(google.protobuf.Empty) returns (MarketsResponse) {
    option (google.api.http) = {
      get: '/markets'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Markets";
      description: "";
    };
  };

  rpc MarketDepth(MarketDepthRequest) returns (MarketDepthResponse) {
    option (google.api.http) = {
      get: '/markets/{marketID}/depth'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get Market Depth for a given Market";
      description: "";
    };
  };

  rpc LastTrade(LastTradeRequest) returns (LastTradeResponse) {
    option (google.api.http) = {
      get: '/markets/{marketID}/trades/latest'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get the latest Trade for a given Market";
      description: "";
    };
  };

  // Parties

  rpc PartyByID(PartyByIDRequest) returns (PartyByIDResponse) {
    option (google.api.http) = {
      get: '/parties/{partyID}'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a Party by ID";
      description: "";
    };
  };

  rpc Parties(google.protobuf.Empty) returns (PartiesResponse) {
    option (google.api.http) = {
      get: '/parties'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Parties";
      description: "";
    };
  };

  // Trades

  rpc TradesByMarket(TradesByMarketRequest) returns (TradesResponse) {
    option (google.api.http) = {
      get: '/markets/{marketID}/trades'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Trades by Market";
      description: "";
    };
  };

  rpc TradesByParty(TradesByPartyRequest) returns (TradesResponse) {
    option (google.api.http) = {
      get: '/parties/{partyID}/trades'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Trades by Party";
      description: "";
    };
  };

  rpc TradesByOrder(TradesByOrderRequest) returns (TradesResponse) {
    option (google.api.http) = {
      get: '/orders/{orderID}/trades'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Trades by Order";
      description: "";
    };
  };

  // Positions

  rpc PositionsByParty(PositionsByPartyRequest) returns (PositionsByPartyResponse) {
    option (google.api.http) = {
      get: '/parties/{partyID}/positions'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Positions by Party";
      description: "";
    };
  };

  // Candles

  rpc Candles(CandlesRequest) returns (CandlesResponse) {
    option (google.api.http) = {
      get: '/markets/{marketID}/candles'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Candles by Market";
      description: "";
    };
  };

  // Metrics

  rpc Statistics(google.protobuf.Empty) returns (vega.Statistics) {
    option (google.api.http) = {
      get: '/statistics'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get system Statistics";
      description: "";
    };
  };

  rpc GetVegaTime(google.protobuf.Empty) returns (VegaTimeResponse) {
    option (google.api.http) = {
      get: '/time'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get the current blockchain time";
      description: "";
    };
  };

  // Streams

  rpc OrdersSubscribe(OrdersSubscribeRequest) returns (stream OrdersStream);
  rpc TradesSubscribe(TradesSubscribeRequest) returns (stream TradesStream);
  rpc CandlesSubscribe(CandlesSubscribeRequest) returns (stream vega.Candle);
  rpc MarketDepthSubscribe(MarketDepthSubscribeRequest) returns (stream vega.MarketDepth);
  rpc PositionsSubscribe(PositionsSubscribeRequest) returns (stream vega.MarketPosition);
  rpc AccountsSubscribe(AccountsSubscribeRequest) returns (stream vega.Account);
  rpc TransferResponsesSubscribe(google.protobuf.Empty) returns (stream vega.TransferResponse);

  // Accounts

  rpc AccountsByParty(AccountsByPartyRequest) returns (AccountsResponse) {
    option (google.api.http) = {
      get: '/parties/{partyID}/accounts'
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get a list of Accounts by Party";
      description: "";
    };
  };

  rpc AccountsByPartyAndMarket(AccountsByPartyAndMarketRequest) returns (AccountsResponse) /* {
    option (google.api.http) = {
      // TODO
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "TODO";
      description: "";
    };
  } */ ;

  rpc AccountsByPartyAndType(AccountsByPartyAndTypeRequest) returns (AccountsResponse) /* {
    option (google.api.http) = {
      // TODO
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "TODO";
      description: "";
    };
  } */ ;

  rpc AccountsByPartyAndAsset(AccountsByPartyAndAssetRequest) returns (AccountsResponse) /* {
    option (google.api.http) = {
      // TODO
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "TODO";
      description: "";
    };
  } */ ;
}

message LastTradeRequest {
  string marketID = 1;
}

message LastTradeResponse {
  vega.Trade trade = 1;
}

message MarketByIDRequest {
  string marketID = 1;
}

message MarketByIDResponse {
  vega.Market market = 1;
}

message PartyByIDRequest {
  string partyID = 1;
}

message PartyByIDResponse {
  vega.Party party = 1;
}

message PartiesResponse {
  repeated vega.Party parties = 1;
}

message TradesByPartyRequest {
  string partyID = 1;
  string marketID = 2;
  Pagination pagination = 3;
}

message TradesByOrderRequest {
  string orderID = 1;
}

message AccountsSubscribeRequest {
  string marketID = 1;
  string partyID = 2;
  string asset = 3;
  vega.AccountType type = 4;
}

message OrdersSubscribeRequest {
  string marketID = 1;
  string partyID = 2;
}

message TradesSubscribeRequest {
  string marketID = 1;
  string partyID = 2;
}

message CandlesSubscribeRequest {
  string marketID = 1;
  vega.Interval interval = 2;
}

message MarketDepthSubscribeRequest {
  string marketID = 1;
}

message PositionsSubscribeRequest {
  string partyID = 1;
}

message OrdersByMarketRequest {
  string marketID = 1 [(validator.field) = {msg_exists : true}];
  Pagination pagination = 2;
  bool open = 3;
}

message OrdersResponse {
  repeated vega.Order orders = 1;
}

message OrdersByPartyRequest {
  string partyID = 1 [(validator.field) = {msg_exists : true }];
  Pagination pagination = 2;
  bool open = 3;
}

message OrderByMarketAndIdRequest {
  string marketID = 1 [(validator.field) = {msg_exists : true }];
  string orderID = 2 [(validator.field) = {msg_exists : true}];
}

message OrderResponse {
  vega.Order order = 1;
}

message OrderByReferenceRequest {
  string reference = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}", min_length: 1
  }];
}

message MarketsResponse {
  repeated vega.Market markets = 1;
}

message CandlesRequest {
  string marketID = 1 [(validator.field) = {msg_exists : true}];
  int64 sinceTimestamp = 2 [(validator.field) = {int_gt: 0}];
  vega.Interval interval = 3;
}

message CandlesResponse {
  repeated vega.Candle candles = 1;
}

message MarketDepthRequest {
  string marketID = 1 [(validator.field) = {msg_exists: true}];
}

message MarketDepthResponse {
  string marketID = 1;
  repeated vega.PriceLevel buy = 2;
  repeated vega.PriceLevel sell = 3;
  vega.Trade lastTrade = 4;
}

message TradesByMarketRequest {
  string marketID = 1 [(validator.field) = {msg_exists: true}];
  Pagination pagination = 2;
}

message TradesResponse {
  repeated vega.Trade trades = 1;
}

message PositionsByPartyRequest{
  string partyID = 1 [(validator.field) = {msg_exists: true}];
}

message PositionsByPartyResponse{
  repeated vega.MarketPosition positions = 1;
}

message VegaTimeResponse {
  int64 timestamp = 1;
}

message Pagination {
  uint64 skip = 1;
  uint64 limit = 2;
  bool descending = 3;
}

message OrdersStream {
  repeated vega.Order orders = 1;
}

message TradesStream {
  repeated vega.Trade trades = 1;
}

message AccountsByPartyRequest {
  string partyID = 1 [(validator.field) = {msg_exists : true}];
  vega.AccountType type = 2;
}

message AccountsResponse {
  repeated vega.Account accounts = 1;
}

message AccountsByPartyAndMarketRequest {
  string partyID = 1 [(validator.field) = {msg_exists : true}];
  string marketID = 2;
  vega.AccountType type = 3;
}

message AccountsByPartyAndTypeRequest {
  string partyID = 1 [(validator.field) = {msg_exists : true}];
  vega.AccountType type = 2;
}

message AccountsByPartyAndAssetRequest {
  string partyID = 1 [(validator.field) = {msg_exists : true}];
  string asset = 2;
}

message CheckTokenRequest {
  string partyID = 1 [(validator.field) = {msg_exists : true}];
  string token = 2 [(validator.field) = {msg_exists : true}];
}

message CheckTokenResponse {
  bool ok = 1;
}

message ErrorResponse {
  int64 code = 1;
  string message = 2;
  repeated string details = 3;
}
