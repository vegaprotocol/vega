// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import time "time"
import vegatime "vega/internal/vegatime"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetTimeLastBatch provides a mock function with given fields:
func (_m *Service) GetTimeLastBatch() (vegatime.Stamp, time.Time, error) {
	ret := _m.Called()

	var r0 vegatime.Stamp
	if rf, ok := ret.Get(0).(func() vegatime.Stamp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(vegatime.Stamp)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func() time.Time); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTimeNow provides a mock function with given fields:
func (_m *Service) GetTimeNow() (vegatime.Stamp, time.Time, error) {
	ret := _m.Called()

	var r0 vegatime.Stamp
	if rf, ok := ret.Get(0).(func() vegatime.Stamp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(vegatime.Stamp)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func() time.Time); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetTimeNow provides a mock function with given fields: epochTimeNano
func (_m *Service) SetTimeNow(epochTimeNano vegatime.Stamp) {
	_m.Called(epochTimeNano)
}
