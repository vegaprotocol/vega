// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/evtforward/ethcall (interfaces: DataSource)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	gomock "github.com/golang/mock/gomock"
)

// MockDataSource is a mock of DataSource interface.
type MockDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceMockRecorder
}

// MockDataSourceMockRecorder is the mock recorder for MockDataSource.
type MockDataSourceMockRecorder struct {
	mock *MockDataSource
}

// NewMockDataSource creates a new mock instance.
func NewMockDataSource(ctrl *gomock.Controller) *MockDataSource {
	mock := &MockDataSource{ctrl: ctrl}
	mock.recorder = &MockDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSource) EXPECT() *MockDataSourceMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockDataSource) CallContract(arg0 context.Context, arg1 ethereum.ContractCaller, arg2 *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract.
func (mr *MockDataSourceMockRecorder) CallContract(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockDataSource)(nil).CallContract), arg0, arg1, arg2)
}

// Normalise mocks base method.
func (m *MockDataSource) Normalise(arg0 []byte) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Normalise", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Normalise indicates an expected call of Normalise.
func (mr *MockDataSourceMockRecorder) Normalise(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normalise", reflect.TypeOf((*MockDataSource)(nil).Normalise), arg0)
}

// PassesFilters mocks base method.
func (m *MockDataSource) PassesFilters(arg0 []byte, arg1, arg2 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PassesFilters", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PassesFilters indicates an expected call of PassesFilters.
func (mr *MockDataSourceMockRecorder) PassesFilters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassesFilters", reflect.TypeOf((*MockDataSource)(nil).PassesFilters), arg0, arg1, arg2)
}

// RequiredConfirmations mocks base method.
func (m *MockDataSource) RequiredConfirmations() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequiredConfirmations")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// RequiredConfirmations indicates an expected call of RequiredConfirmations.
func (mr *MockDataSourceMockRecorder) RequiredConfirmations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiredConfirmations", reflect.TypeOf((*MockDataSource)(nil).RequiredConfirmations))
}
