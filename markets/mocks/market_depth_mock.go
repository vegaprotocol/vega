// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/markets (interfaces: MarketDepth)

// Package mocks is a generated GoMock package.
package mocks

import (
	proto "code.vegaprotocol.io/vega/proto/gen/golang"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarketDepth is a mock of MarketDepth interface
type MockMarketDepth struct {
	ctrl     *gomock.Controller
	recorder *MockMarketDepthMockRecorder
}

// MockMarketDepthMockRecorder is the mock recorder for MockMarketDepth
type MockMarketDepthMockRecorder struct {
	mock *MockMarketDepth
}

// NewMockMarketDepth creates a new mock instance
func NewMockMarketDepth(ctrl *gomock.Controller) *MockMarketDepth {
	mock := &MockMarketDepth{ctrl: ctrl}
	mock.recorder = &MockMarketDepthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarketDepth) EXPECT() *MockMarketDepthMockRecorder {
	return m.recorder
}

// GetMarketDepth mocks base method
func (m *MockMarketDepth) GetMarketDepth(arg0 context.Context, arg1 string, arg2 uint64) (*proto.MarketDepth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketDepth", arg0, arg1, arg2)
	ret0, _ := ret[0].(*proto.MarketDepth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketDepth indicates an expected call of GetMarketDepth
func (mr *MockMarketDepthMockRecorder) GetMarketDepth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketDepth", reflect.TypeOf((*MockMarketDepth)(nil).GetMarketDepth), arg0, arg1, arg2)
}

// Subscribe mocks base method
func (m *MockMarketDepth) Subscribe(arg0 chan<- *proto.MarketDepthUpdate) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockMarketDepthMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMarketDepth)(nil).Subscribe), arg0)
}

// Unsubscribe mocks base method
func (m *MockMarketDepth) Unsubscribe(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockMarketDepthMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockMarketDepth)(nil).Unsubscribe), arg0)
}
