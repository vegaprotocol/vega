// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import filtering "code.vegaprotocol.io/vega/internal/filtering"
import mock "github.com/stretchr/testify/mock"
import proto "code.vegaprotocol.io/vega/proto"
import storage "code.vegaprotocol.io/vega/internal/storage"

// TradeStore is an autogenerated mock type for the TradeStore type
type TradeStore struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *TradeStore) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *TradeStore) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByMarket provides a mock function with given fields: ctx, market, params
func (_m *TradeStore) GetByMarket(ctx context.Context, market string, params *filtering.TradeQueryFilters) ([]*proto.Trade, error) {
	ret := _m.Called(ctx, market, params)

	var r0 []*proto.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, *filtering.TradeQueryFilters) []*proto.Trade); ok {
		r0 = rf(ctx, market, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *filtering.TradeQueryFilters) error); ok {
		r1 = rf(ctx, market, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMarketAndId provides a mock function with given fields: ctx, market, id
func (_m *TradeStore) GetByMarketAndId(ctx context.Context, market string, id string) (*proto.Trade, error) {
	ret := _m.Called(ctx, market, id)

	var r0 *proto.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *proto.Trade); ok {
		r0 = rf(ctx, market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderId provides a mock function with given fields: ctx, orderId, params
func (_m *TradeStore) GetByOrderId(ctx context.Context, orderId string, params *filtering.TradeQueryFilters) ([]*proto.Trade, error) {
	ret := _m.Called(ctx, orderId, params)

	var r0 []*proto.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, *filtering.TradeQueryFilters) []*proto.Trade); ok {
		r0 = rf(ctx, orderId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *filtering.TradeQueryFilters) error); ok {
		r1 = rf(ctx, orderId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByParty provides a mock function with given fields: ctx, party, params
func (_m *TradeStore) GetByParty(ctx context.Context, party string, params *filtering.TradeQueryFilters) ([]*proto.Trade, error) {
	ret := _m.Called(ctx, party, params)

	var r0 []*proto.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, *filtering.TradeQueryFilters) []*proto.Trade); ok {
		r0 = rf(ctx, party, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *filtering.TradeQueryFilters) error); ok {
		r1 = rf(ctx, party, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPartyAndId provides a mock function with given fields: ctx, party, id
func (_m *TradeStore) GetByPartyAndId(ctx context.Context, party string, id string) (*proto.Trade, error) {
	ret := _m.Called(ctx, party, id)

	var r0 *proto.Trade
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *proto.Trade); ok {
		r0 = rf(ctx, party, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Trade)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, party, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkPrice provides a mock function with given fields: ctx, market
func (_m *TradeStore) GetMarkPrice(ctx context.Context, market string) (uint64, error) {
	ret := _m.Called(ctx, market)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, market)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, market)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradesBySideBuckets provides a mock function with given fields: ctx, party
func (_m *TradeStore) GetTradesBySideBuckets(ctx context.Context, party string) map[string]*storage.MarketBucket {
	ret := _m.Called(ctx, party)

	var r0 map[string]*storage.MarketBucket
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]*storage.MarketBucket); ok {
		r0 = rf(ctx, party)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*storage.MarketBucket)
		}
	}

	return r0
}

// Post provides a mock function with given fields: trade
func (_m *TradeStore) Post(trade *proto.Trade) error {
	ret := _m.Called(trade)

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.Trade) error); ok {
		r0 = rf(trade)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: trades
func (_m *TradeStore) Subscribe(trades chan<- []proto.Trade) uint64 {
	ret := _m.Called(trades)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(chan<- []proto.Trade) uint64); ok {
		r0 = rf(trades)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: id
func (_m *TradeStore) Unsubscribe(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
