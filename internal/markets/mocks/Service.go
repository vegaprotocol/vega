// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import proto "code.vegaprotocol.io/vega/proto"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateMarket provides a mock function with given fields: ctx, market
func (_m *Service) CreateMarket(ctx context.Context, market *proto.Market) error {
	ret := _m.Called(ctx, market)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.Market) error); ok {
		r0 = rf(ctx, market)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *Service) GetAll(ctx context.Context) ([]*proto.Market, error) {
	ret := _m.Called(ctx)

	var r0 []*proto.Market
	if rf, ok := ret.Get(0).(func(context.Context) []*proto.Market); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Service) GetByID(ctx context.Context, id string) (*proto.Market, error) {
	ret := _m.Called(ctx, id)

	var r0 *proto.Market
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.Market); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDepth provides a mock function with given fields: ctx, market
func (_m *Service) GetDepth(ctx context.Context, market string) (*proto.MarketDepth, error) {
	ret := _m.Called(ctx, market)

	var r0 *proto.MarketDepth
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.MarketDepth); ok {
		r0 = rf(ctx, market)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.MarketDepth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, market)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObserveDepth provides a mock function with given fields: ctx, market
func (_m *Service) ObserveDepth(ctx context.Context, market string) (<-chan *proto.MarketDepth, uint64) {
	ret := _m.Called(ctx, market)

	var r0 <-chan *proto.MarketDepth
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan *proto.MarketDepth); ok {
		r0 = rf(ctx, market)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *proto.MarketDepth)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context, string) uint64); ok {
		r1 = rf(ctx, market)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}

// ObserveMarkets provides a mock function with given fields: ctx
func (_m *Service) ObserveMarkets(ctx context.Context) (<-chan []proto.Market, uint64) {
	ret := _m.Called(ctx)

	var r0 <-chan []proto.Market
	if rf, ok := ret.Get(0).(func(context.Context) <-chan []proto.Market); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []proto.Market)
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(context.Context) uint64); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}
