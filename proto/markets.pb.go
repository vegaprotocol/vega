// Code generated by protoc-gen-go. DO NOT EDIT.
// source: markets.proto

package proto

import (
	v1 "code.vegaprotocol.io/vega/proto/oracles/v1"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The current state of the Market
type Market_State int32

const (
	// Default value, invalid
	Market_STATE_UNSPECIFIED Market_State = 0
	// The Governance proposal valid and accepted
	Market_STATE_PROPOSED Market_State = 1
	// Outcome of governance votes is to reject the market
	Market_STATE_REJECTED Market_State = 2
	// Governance vote passes/wins
	Market_STATE_PENDING Market_State = 3
	// Market triggers cancellation condition or governance
	// votes to close before market becomes Active
	Market_STATE_CANCELLED Market_State = 4
	// Enactment date reached and usual auction exit checks pass
	Market_STATE_ACTIVE Market_State = 5
	// Price monitoring or liquidity monitoring trigger
	Market_STATE_SUSPENDED Market_State = 6
	// Governance vote (to close)
	Market_STATE_CLOSED Market_State = 7
	// Defined by the product (i.e. from a product parameter,
	// specified in market definition, giving close date/time)
	Market_STATE_TRADING_TERMINATED Market_State = 8
	// Settlement triggered and completed as defined by product
	Market_STATE_SETTLED Market_State = 9
)

var Market_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "STATE_PROPOSED",
	2: "STATE_REJECTED",
	3: "STATE_PENDING",
	4: "STATE_CANCELLED",
	5: "STATE_ACTIVE",
	6: "STATE_SUSPENDED",
	7: "STATE_CLOSED",
	8: "STATE_TRADING_TERMINATED",
	9: "STATE_SETTLED",
}

var Market_State_value = map[string]int32{
	"STATE_UNSPECIFIED":        0,
	"STATE_PROPOSED":           1,
	"STATE_REJECTED":           2,
	"STATE_PENDING":            3,
	"STATE_CANCELLED":          4,
	"STATE_ACTIVE":             5,
	"STATE_SUSPENDED":          6,
	"STATE_CLOSED":             7,
	"STATE_TRADING_TERMINATED": 8,
	"STATE_SETTLED":            9,
}

func (x Market_State) String() string {
	return proto.EnumName(Market_State_name, int32(x))
}

func (Market_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{21, 0}
}

// The trading mode the market is currently running, also referred to as 'market state'
type Market_TradingMode int32

const (
	// Default value, this is invalid
	Market_TRADING_MODE_UNSPECIFIED Market_TradingMode = 0
	// Normal trading
	Market_TRADING_MODE_CONTINUOUS Market_TradingMode = 1
	// Auction trading (FBA)
	Market_TRADING_MODE_BATCH_AUCTION Market_TradingMode = 2
	// Opening auction
	Market_TRADING_MODE_OPENING_AUCTION Market_TradingMode = 3
	// Auction triggered by monitoring
	Market_TRADING_MODE_MONITORING_AUCTION Market_TradingMode = 4
)

var Market_TradingMode_name = map[int32]string{
	0: "TRADING_MODE_UNSPECIFIED",
	1: "TRADING_MODE_CONTINUOUS",
	2: "TRADING_MODE_BATCH_AUCTION",
	3: "TRADING_MODE_OPENING_AUCTION",
	4: "TRADING_MODE_MONITORING_AUCTION",
}

var Market_TradingMode_value = map[string]int32{
	"TRADING_MODE_UNSPECIFIED":        0,
	"TRADING_MODE_CONTINUOUS":         1,
	"TRADING_MODE_BATCH_AUCTION":      2,
	"TRADING_MODE_OPENING_AUCTION":    3,
	"TRADING_MODE_MONITORING_AUCTION": 4,
}

func (x Market_TradingMode) String() string {
	return proto.EnumName(Market_TradingMode_name, int32(x))
}

func (Market_TradingMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{21, 1}
}

// An auction duration is used to configure 3 auction periods:
// 1. `duration > 0`, `volume == 0`:
//   The auction will last for at least N seconds
// 2. `duration == 0`, `volume > 0`:
//   The auction will end once we can close with given traded volume
// 3. `duration > 0`, `volume > 0`:
//   The auction will take at least N seconds, but can end sooner if we can trade a certain volume
type AuctionDuration struct {
	// Duration of the auction in seconds
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	//Target uncrossing trading volume
	Volume               uint64   `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuctionDuration) Reset()         { *m = AuctionDuration{} }
func (m *AuctionDuration) String() string { return proto.CompactTextString(m) }
func (*AuctionDuration) ProtoMessage()    {}
func (*AuctionDuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{0}
}

func (m *AuctionDuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionDuration.Unmarshal(m, b)
}
func (m *AuctionDuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionDuration.Marshal(b, m, deterministic)
}
func (m *AuctionDuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionDuration.Merge(m, src)
}
func (m *AuctionDuration) XXX_Size() int {
	return xxx_messageInfo_AuctionDuration.Size(m)
}
func (m *AuctionDuration) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionDuration.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionDuration proto.InternalMessageInfo

func (m *AuctionDuration) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AuctionDuration) GetVolume() uint64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

// Continuous trading
type ContinuousTrading struct {
	// Tick size
	TickSize             string   `protobuf:"bytes,1,opt,name=tick_size,json=tickSize,proto3" json:"tick_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContinuousTrading) Reset()         { *m = ContinuousTrading{} }
func (m *ContinuousTrading) String() string { return proto.CompactTextString(m) }
func (*ContinuousTrading) ProtoMessage()    {}
func (*ContinuousTrading) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{1}
}

func (m *ContinuousTrading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContinuousTrading.Unmarshal(m, b)
}
func (m *ContinuousTrading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContinuousTrading.Marshal(b, m, deterministic)
}
func (m *ContinuousTrading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinuousTrading.Merge(m, src)
}
func (m *ContinuousTrading) XXX_Size() int {
	return xxx_messageInfo_ContinuousTrading.Size(m)
}
func (m *ContinuousTrading) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinuousTrading.DiscardUnknown(m)
}

var xxx_messageInfo_ContinuousTrading proto.InternalMessageInfo

func (m *ContinuousTrading) GetTickSize() string {
	if m != nil {
		return m.TickSize
	}
	return ""
}

// Discrete trading
type DiscreteTrading struct {
	// Duration in nanoseconds, maximum 1 month (2592000000000000 ns)
	DurationNs int64 `protobuf:"varint,1,opt,name=duration_ns,json=durationNs,proto3" json:"duration_ns,omitempty"`
	// Tick size
	TickSize             string   `protobuf:"bytes,2,opt,name=tick_size,json=tickSize,proto3" json:"tick_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscreteTrading) Reset()         { *m = DiscreteTrading{} }
func (m *DiscreteTrading) String() string { return proto.CompactTextString(m) }
func (*DiscreteTrading) ProtoMessage()    {}
func (*DiscreteTrading) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{2}
}

func (m *DiscreteTrading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscreteTrading.Unmarshal(m, b)
}
func (m *DiscreteTrading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscreteTrading.Marshal(b, m, deterministic)
}
func (m *DiscreteTrading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscreteTrading.Merge(m, src)
}
func (m *DiscreteTrading) XXX_Size() int {
	return xxx_messageInfo_DiscreteTrading.Size(m)
}
func (m *DiscreteTrading) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscreteTrading.DiscardUnknown(m)
}

var xxx_messageInfo_DiscreteTrading proto.InternalMessageInfo

func (m *DiscreteTrading) GetDurationNs() int64 {
	if m != nil {
		return m.DurationNs
	}
	return 0
}

func (m *DiscreteTrading) GetTickSize() string {
	if m != nil {
		return m.TickSize
	}
	return ""
}

// Future product definition
type Future struct {
	// The maturity for the future
	Maturity string `protobuf:"bytes,1,opt,name=maturity,proto3" json:"maturity,omitempty"`
	// The asset for the future
	SettlementAsset string `protobuf:"bytes,2,opt,name=settlement_asset,json=settlementAsset,proto3" json:"settlement_asset,omitempty"`
	// Quote name of the instrument
	QuoteName string `protobuf:"bytes,4,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	// The oracle spec describing the oracle data of interest
	OracleSpec *v1.OracleSpec `protobuf:"bytes,5,opt,name=oracle_spec,json=oracleSpec,proto3" json:"oracle_spec,omitempty"`
	// The binding between the oracle spec and the settlement price
	OracleSpecBinding    *OracleSpecToFutureBinding `protobuf:"bytes,6,opt,name=oracle_spec_binding,json=oracleSpecBinding,proto3" json:"oracle_spec_binding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Future) Reset()         { *m = Future{} }
func (m *Future) String() string { return proto.CompactTextString(m) }
func (*Future) ProtoMessage()    {}
func (*Future) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{3}
}

func (m *Future) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Future.Unmarshal(m, b)
}
func (m *Future) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Future.Marshal(b, m, deterministic)
}
func (m *Future) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Future.Merge(m, src)
}
func (m *Future) XXX_Size() int {
	return xxx_messageInfo_Future.Size(m)
}
func (m *Future) XXX_DiscardUnknown() {
	xxx_messageInfo_Future.DiscardUnknown(m)
}

var xxx_messageInfo_Future proto.InternalMessageInfo

func (m *Future) GetMaturity() string {
	if m != nil {
		return m.Maturity
	}
	return ""
}

func (m *Future) GetSettlementAsset() string {
	if m != nil {
		return m.SettlementAsset
	}
	return ""
}

func (m *Future) GetQuoteName() string {
	if m != nil {
		return m.QuoteName
	}
	return ""
}

func (m *Future) GetOracleSpec() *v1.OracleSpec {
	if m != nil {
		return m.OracleSpec
	}
	return nil
}

func (m *Future) GetOracleSpecBinding() *OracleSpecToFutureBinding {
	if m != nil {
		return m.OracleSpecBinding
	}
	return nil
}

// OracleSpecToFutureBinding tells on which property oracle data should be
// used as settlement price.
type OracleSpecToFutureBinding struct {
	// settlement_price_property holds the name of the property in the oracle data
	// that should be used as settlement price.
	// If it is set to "prices.BTC.value", then the Future will use the value of
	// this property as settlement price.
	SettlementPriceProperty string   `protobuf:"bytes,1,opt,name=settlement_price_property,json=settlementPriceProperty,proto3" json:"settlement_price_property,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *OracleSpecToFutureBinding) Reset()         { *m = OracleSpecToFutureBinding{} }
func (m *OracleSpecToFutureBinding) String() string { return proto.CompactTextString(m) }
func (*OracleSpecToFutureBinding) ProtoMessage()    {}
func (*OracleSpecToFutureBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{4}
}

func (m *OracleSpecToFutureBinding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleSpecToFutureBinding.Unmarshal(m, b)
}
func (m *OracleSpecToFutureBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleSpecToFutureBinding.Marshal(b, m, deterministic)
}
func (m *OracleSpecToFutureBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleSpecToFutureBinding.Merge(m, src)
}
func (m *OracleSpecToFutureBinding) XXX_Size() int {
	return xxx_messageInfo_OracleSpecToFutureBinding.Size(m)
}
func (m *OracleSpecToFutureBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleSpecToFutureBinding.DiscardUnknown(m)
}

var xxx_messageInfo_OracleSpecToFutureBinding proto.InternalMessageInfo

func (m *OracleSpecToFutureBinding) GetSettlementPriceProperty() string {
	if m != nil {
		return m.SettlementPriceProperty
	}
	return ""
}

// Instrument metadata definition
type InstrumentMetadata struct {
	// A list of 0 or more tags
	Tags                 []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentMetadata) Reset()         { *m = InstrumentMetadata{} }
func (m *InstrumentMetadata) String() string { return proto.CompactTextString(m) }
func (*InstrumentMetadata) ProtoMessage()    {}
func (*InstrumentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{5}
}

func (m *InstrumentMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentMetadata.Unmarshal(m, b)
}
func (m *InstrumentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentMetadata.Marshal(b, m, deterministic)
}
func (m *InstrumentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentMetadata.Merge(m, src)
}
func (m *InstrumentMetadata) XXX_Size() int {
	return xxx_messageInfo_InstrumentMetadata.Size(m)
}
func (m *InstrumentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentMetadata proto.InternalMessageInfo

func (m *InstrumentMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Instrument definition
type Instrument struct {
	// Instrument identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Code for the instrument
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Name of the instrument
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A collection of instrument meta-data
	Metadata *InstrumentMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The product the instrument is composed of
	//
	// Types that are valid to be assigned to Product:
	//	*Instrument_Future
	Product              isInstrument_Product `protobuf_oneof:"product"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{6}
}

func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (m *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(m, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Instrument) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Instrument) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instrument) GetMetadata() *InstrumentMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type isInstrument_Product interface {
	isInstrument_Product()
}

type Instrument_Future struct {
	Future *Future `protobuf:"bytes,100,opt,name=future,proto3,oneof"`
}

func (*Instrument_Future) isInstrument_Product() {}

func (m *Instrument) GetProduct() isInstrument_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *Instrument) GetFuture() *Future {
	if x, ok := m.GetProduct().(*Instrument_Future); ok {
		return x.Future
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Instrument) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Instrument_Future)(nil),
	}
}

// Risk model for log normal
type LogNormalRiskModel struct {
	// Risk Aversion Parameter
	RiskAversionParameter float64 `protobuf:"fixed64,1,opt,name=risk_aversion_parameter,json=riskAversionParameter,proto3" json:"risk_aversion_parameter,omitempty"`
	// Tau
	Tau float64 `protobuf:"fixed64,2,opt,name=tau,proto3" json:"tau,omitempty"`
	// Risk model parameters for log normal
	Params               *LogNormalModelParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LogNormalRiskModel) Reset()         { *m = LogNormalRiskModel{} }
func (m *LogNormalRiskModel) String() string { return proto.CompactTextString(m) }
func (*LogNormalRiskModel) ProtoMessage()    {}
func (*LogNormalRiskModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{7}
}

func (m *LogNormalRiskModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNormalRiskModel.Unmarshal(m, b)
}
func (m *LogNormalRiskModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNormalRiskModel.Marshal(b, m, deterministic)
}
func (m *LogNormalRiskModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNormalRiskModel.Merge(m, src)
}
func (m *LogNormalRiskModel) XXX_Size() int {
	return xxx_messageInfo_LogNormalRiskModel.Size(m)
}
func (m *LogNormalRiskModel) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNormalRiskModel.DiscardUnknown(m)
}

var xxx_messageInfo_LogNormalRiskModel proto.InternalMessageInfo

func (m *LogNormalRiskModel) GetRiskAversionParameter() float64 {
	if m != nil {
		return m.RiskAversionParameter
	}
	return 0
}

func (m *LogNormalRiskModel) GetTau() float64 {
	if m != nil {
		return m.Tau
	}
	return 0
}

func (m *LogNormalRiskModel) GetParams() *LogNormalModelParams {
	if m != nil {
		return m.Params
	}
	return nil
}

// Risk model parameters for log normal
type LogNormalModelParams struct {
	// Mu param
	Mu float64 `protobuf:"fixed64,1,opt,name=mu,proto3" json:"mu,omitempty"`
	// R param
	R float64 `protobuf:"fixed64,2,opt,name=r,proto3" json:"r,omitempty"`
	// Sigma param
	Sigma                float64  `protobuf:"fixed64,3,opt,name=sigma,proto3" json:"sigma,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogNormalModelParams) Reset()         { *m = LogNormalModelParams{} }
func (m *LogNormalModelParams) String() string { return proto.CompactTextString(m) }
func (*LogNormalModelParams) ProtoMessage()    {}
func (*LogNormalModelParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{8}
}

func (m *LogNormalModelParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogNormalModelParams.Unmarshal(m, b)
}
func (m *LogNormalModelParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogNormalModelParams.Marshal(b, m, deterministic)
}
func (m *LogNormalModelParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogNormalModelParams.Merge(m, src)
}
func (m *LogNormalModelParams) XXX_Size() int {
	return xxx_messageInfo_LogNormalModelParams.Size(m)
}
func (m *LogNormalModelParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LogNormalModelParams.DiscardUnknown(m)
}

var xxx_messageInfo_LogNormalModelParams proto.InternalMessageInfo

func (m *LogNormalModelParams) GetMu() float64 {
	if m != nil {
		return m.Mu
	}
	return 0
}

func (m *LogNormalModelParams) GetR() float64 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *LogNormalModelParams) GetSigma() float64 {
	if m != nil {
		return m.Sigma
	}
	return 0
}

// Risk model for simple modelling
type SimpleRiskModel struct {
	// Risk model params for simple modelling
	Params               *SimpleModelParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SimpleRiskModel) Reset()         { *m = SimpleRiskModel{} }
func (m *SimpleRiskModel) String() string { return proto.CompactTextString(m) }
func (*SimpleRiskModel) ProtoMessage()    {}
func (*SimpleRiskModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{9}
}

func (m *SimpleRiskModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRiskModel.Unmarshal(m, b)
}
func (m *SimpleRiskModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRiskModel.Marshal(b, m, deterministic)
}
func (m *SimpleRiskModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRiskModel.Merge(m, src)
}
func (m *SimpleRiskModel) XXX_Size() int {
	return xxx_messageInfo_SimpleRiskModel.Size(m)
}
func (m *SimpleRiskModel) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRiskModel.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRiskModel proto.InternalMessageInfo

func (m *SimpleRiskModel) GetParams() *SimpleModelParams {
	if m != nil {
		return m.Params
	}
	return nil
}

// Risk model parameters for simple modelling
type SimpleModelParams struct {
	// Pre-defined risk factor value for long
	FactorLong float64 `protobuf:"fixed64,1,opt,name=factor_long,json=factorLong,proto3" json:"factor_long,omitempty"`
	// Pre-defined risk factor value for short
	FactorShort float64 `protobuf:"fixed64,2,opt,name=factor_short,json=factorShort,proto3" json:"factor_short,omitempty"`
	// Pre-defined maximum price move up that the model considers as valid
	MaxMoveUp float64 `protobuf:"fixed64,3,opt,name=max_move_up,json=maxMoveUp,proto3" json:"max_move_up,omitempty"`
	// Pre-defined minimum price move down that the model considers as valid
	MinMoveDown float64 `protobuf:"fixed64,4,opt,name=min_move_down,json=minMoveDown,proto3" json:"min_move_down,omitempty"`
	// Pre-defined constant probability of trading
	ProbabilityOfTrading float64  `protobuf:"fixed64,5,opt,name=probability_of_trading,json=probabilityOfTrading,proto3" json:"probability_of_trading,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleModelParams) Reset()         { *m = SimpleModelParams{} }
func (m *SimpleModelParams) String() string { return proto.CompactTextString(m) }
func (*SimpleModelParams) ProtoMessage()    {}
func (*SimpleModelParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{10}
}

func (m *SimpleModelParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleModelParams.Unmarshal(m, b)
}
func (m *SimpleModelParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleModelParams.Marshal(b, m, deterministic)
}
func (m *SimpleModelParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleModelParams.Merge(m, src)
}
func (m *SimpleModelParams) XXX_Size() int {
	return xxx_messageInfo_SimpleModelParams.Size(m)
}
func (m *SimpleModelParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleModelParams.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleModelParams proto.InternalMessageInfo

func (m *SimpleModelParams) GetFactorLong() float64 {
	if m != nil {
		return m.FactorLong
	}
	return 0
}

func (m *SimpleModelParams) GetFactorShort() float64 {
	if m != nil {
		return m.FactorShort
	}
	return 0
}

func (m *SimpleModelParams) GetMaxMoveUp() float64 {
	if m != nil {
		return m.MaxMoveUp
	}
	return 0
}

func (m *SimpleModelParams) GetMinMoveDown() float64 {
	if m != nil {
		return m.MinMoveDown
	}
	return 0
}

func (m *SimpleModelParams) GetProbabilityOfTrading() float64 {
	if m != nil {
		return m.ProbabilityOfTrading
	}
	return 0
}

// Scaling Factors (for use in margin calculation)
type ScalingFactors struct {
	// Search level
	SearchLevel float64 `protobuf:"fixed64,1,opt,name=search_level,json=searchLevel,proto3" json:"search_level,omitempty"`
	// Initial margin level
	InitialMargin float64 `protobuf:"fixed64,2,opt,name=initial_margin,json=initialMargin,proto3" json:"initial_margin,omitempty"`
	// Collateral release level
	CollateralRelease    float64  `protobuf:"fixed64,3,opt,name=collateral_release,json=collateralRelease,proto3" json:"collateral_release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScalingFactors) Reset()         { *m = ScalingFactors{} }
func (m *ScalingFactors) String() string { return proto.CompactTextString(m) }
func (*ScalingFactors) ProtoMessage()    {}
func (*ScalingFactors) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{11}
}

func (m *ScalingFactors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScalingFactors.Unmarshal(m, b)
}
func (m *ScalingFactors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScalingFactors.Marshal(b, m, deterministic)
}
func (m *ScalingFactors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScalingFactors.Merge(m, src)
}
func (m *ScalingFactors) XXX_Size() int {
	return xxx_messageInfo_ScalingFactors.Size(m)
}
func (m *ScalingFactors) XXX_DiscardUnknown() {
	xxx_messageInfo_ScalingFactors.DiscardUnknown(m)
}

var xxx_messageInfo_ScalingFactors proto.InternalMessageInfo

func (m *ScalingFactors) GetSearchLevel() float64 {
	if m != nil {
		return m.SearchLevel
	}
	return 0
}

func (m *ScalingFactors) GetInitialMargin() float64 {
	if m != nil {
		return m.InitialMargin
	}
	return 0
}

func (m *ScalingFactors) GetCollateralRelease() float64 {
	if m != nil {
		return m.CollateralRelease
	}
	return 0
}

// Margin Calculator definition
type MarginCalculator struct {
	// Scaling factors for margin calculation
	ScalingFactors       *ScalingFactors `protobuf:"bytes,1,opt,name=scaling_factors,json=scalingFactors,proto3" json:"scaling_factors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MarginCalculator) Reset()         { *m = MarginCalculator{} }
func (m *MarginCalculator) String() string { return proto.CompactTextString(m) }
func (*MarginCalculator) ProtoMessage()    {}
func (*MarginCalculator) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{12}
}

func (m *MarginCalculator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarginCalculator.Unmarshal(m, b)
}
func (m *MarginCalculator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarginCalculator.Marshal(b, m, deterministic)
}
func (m *MarginCalculator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarginCalculator.Merge(m, src)
}
func (m *MarginCalculator) XXX_Size() int {
	return xxx_messageInfo_MarginCalculator.Size(m)
}
func (m *MarginCalculator) XXX_DiscardUnknown() {
	xxx_messageInfo_MarginCalculator.DiscardUnknown(m)
}

var xxx_messageInfo_MarginCalculator proto.InternalMessageInfo

func (m *MarginCalculator) GetScalingFactors() *ScalingFactors {
	if m != nil {
		return m.ScalingFactors
	}
	return nil
}

// Tradable Instrument definition
type TradableInstrument struct {
	// Instrument details
	Instrument *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Margin calculator for the instrument
	MarginCalculator *MarginCalculator `protobuf:"bytes,2,opt,name=margin_calculator,json=marginCalculator,proto3" json:"margin_calculator,omitempty"`
	// Risk model for use by the instrument
	//
	// Types that are valid to be assigned to RiskModel:
	//	*TradableInstrument_LogNormalRiskModel
	//	*TradableInstrument_SimpleRiskModel
	RiskModel            isTradableInstrument_RiskModel `protobuf_oneof:"risk_model"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *TradableInstrument) Reset()         { *m = TradableInstrument{} }
func (m *TradableInstrument) String() string { return proto.CompactTextString(m) }
func (*TradableInstrument) ProtoMessage()    {}
func (*TradableInstrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{13}
}

func (m *TradableInstrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradableInstrument.Unmarshal(m, b)
}
func (m *TradableInstrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradableInstrument.Marshal(b, m, deterministic)
}
func (m *TradableInstrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradableInstrument.Merge(m, src)
}
func (m *TradableInstrument) XXX_Size() int {
	return xxx_messageInfo_TradableInstrument.Size(m)
}
func (m *TradableInstrument) XXX_DiscardUnknown() {
	xxx_messageInfo_TradableInstrument.DiscardUnknown(m)
}

var xxx_messageInfo_TradableInstrument proto.InternalMessageInfo

func (m *TradableInstrument) GetInstrument() *Instrument {
	if m != nil {
		return m.Instrument
	}
	return nil
}

func (m *TradableInstrument) GetMarginCalculator() *MarginCalculator {
	if m != nil {
		return m.MarginCalculator
	}
	return nil
}

type isTradableInstrument_RiskModel interface {
	isTradableInstrument_RiskModel()
}

type TradableInstrument_LogNormalRiskModel struct {
	LogNormalRiskModel *LogNormalRiskModel `protobuf:"bytes,100,opt,name=log_normal_risk_model,json=logNormalRiskModel,proto3,oneof"`
}

type TradableInstrument_SimpleRiskModel struct {
	SimpleRiskModel *SimpleRiskModel `protobuf:"bytes,101,opt,name=simple_risk_model,json=simpleRiskModel,proto3,oneof"`
}

func (*TradableInstrument_LogNormalRiskModel) isTradableInstrument_RiskModel() {}

func (*TradableInstrument_SimpleRiskModel) isTradableInstrument_RiskModel() {}

func (m *TradableInstrument) GetRiskModel() isTradableInstrument_RiskModel {
	if m != nil {
		return m.RiskModel
	}
	return nil
}

func (m *TradableInstrument) GetLogNormalRiskModel() *LogNormalRiskModel {
	if x, ok := m.GetRiskModel().(*TradableInstrument_LogNormalRiskModel); ok {
		return x.LogNormalRiskModel
	}
	return nil
}

func (m *TradableInstrument) GetSimpleRiskModel() *SimpleRiskModel {
	if x, ok := m.GetRiskModel().(*TradableInstrument_SimpleRiskModel); ok {
		return x.SimpleRiskModel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TradableInstrument) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TradableInstrument_LogNormalRiskModel)(nil),
		(*TradableInstrument_SimpleRiskModel)(nil),
	}
}

// Fee factors definition
type FeeFactors struct {
	// Maker fee
	MakerFee string `protobuf:"bytes,1,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	// Infrastructure fee
	InfrastructureFee string `protobuf:"bytes,2,opt,name=infrastructure_fee,json=infrastructureFee,proto3" json:"infrastructure_fee,omitempty"`
	// Liquidity fee
	LiquidityFee         string   `protobuf:"bytes,3,opt,name=liquidity_fee,json=liquidityFee,proto3" json:"liquidity_fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeeFactors) Reset()         { *m = FeeFactors{} }
func (m *FeeFactors) String() string { return proto.CompactTextString(m) }
func (*FeeFactors) ProtoMessage()    {}
func (*FeeFactors) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{14}
}

func (m *FeeFactors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeeFactors.Unmarshal(m, b)
}
func (m *FeeFactors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeeFactors.Marshal(b, m, deterministic)
}
func (m *FeeFactors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeFactors.Merge(m, src)
}
func (m *FeeFactors) XXX_Size() int {
	return xxx_messageInfo_FeeFactors.Size(m)
}
func (m *FeeFactors) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeFactors.DiscardUnknown(m)
}

var xxx_messageInfo_FeeFactors proto.InternalMessageInfo

func (m *FeeFactors) GetMakerFee() string {
	if m != nil {
		return m.MakerFee
	}
	return ""
}

func (m *FeeFactors) GetInfrastructureFee() string {
	if m != nil {
		return m.InfrastructureFee
	}
	return ""
}

func (m *FeeFactors) GetLiquidityFee() string {
	if m != nil {
		return m.LiquidityFee
	}
	return ""
}

// Fees definition
type Fees struct {
	// Fee factors
	Factors              *FeeFactors `protobuf:"bytes,1,opt,name=factors,proto3" json:"factors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Fees) Reset()         { *m = Fees{} }
func (m *Fees) String() string { return proto.CompactTextString(m) }
func (*Fees) ProtoMessage()    {}
func (*Fees) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{15}
}

func (m *Fees) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fees.Unmarshal(m, b)
}
func (m *Fees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fees.Marshal(b, m, deterministic)
}
func (m *Fees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fees.Merge(m, src)
}
func (m *Fees) XXX_Size() int {
	return xxx_messageInfo_Fees.Size(m)
}
func (m *Fees) XXX_DiscardUnknown() {
	xxx_messageInfo_Fees.DiscardUnknown(m)
}

var xxx_messageInfo_Fees proto.InternalMessageInfo

func (m *Fees) GetFactors() *FeeFactors {
	if m != nil {
		return m.Factors
	}
	return nil
}

// PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration
type PriceMonitoringTrigger struct {
	// Price monitoring projection horizon τ in seconds
	Horizon int64 `protobuf:"varint,1,opt,name=horizon,proto3" json:"horizon,omitempty"`
	// Price monitoirng probability level p
	Probability float64 `protobuf:"fixed64,2,opt,name=probability,proto3" json:"probability,omitempty"`
	// Price monitoring auction extension duration in seconds should the price
	// breach it's theoretical level over the specified horizon at the specified
	// probability level
	AuctionExtension     int64    `protobuf:"varint,3,opt,name=auction_extension,json=auctionExtension,proto3" json:"auction_extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceMonitoringTrigger) Reset()         { *m = PriceMonitoringTrigger{} }
func (m *PriceMonitoringTrigger) String() string { return proto.CompactTextString(m) }
func (*PriceMonitoringTrigger) ProtoMessage()    {}
func (*PriceMonitoringTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{16}
}

func (m *PriceMonitoringTrigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceMonitoringTrigger.Unmarshal(m, b)
}
func (m *PriceMonitoringTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceMonitoringTrigger.Marshal(b, m, deterministic)
}
func (m *PriceMonitoringTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceMonitoringTrigger.Merge(m, src)
}
func (m *PriceMonitoringTrigger) XXX_Size() int {
	return xxx_messageInfo_PriceMonitoringTrigger.Size(m)
}
func (m *PriceMonitoringTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceMonitoringTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_PriceMonitoringTrigger proto.InternalMessageInfo

func (m *PriceMonitoringTrigger) GetHorizon() int64 {
	if m != nil {
		return m.Horizon
	}
	return 0
}

func (m *PriceMonitoringTrigger) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *PriceMonitoringTrigger) GetAuctionExtension() int64 {
	if m != nil {
		return m.AuctionExtension
	}
	return 0
}

// PriceMonitoringParameters contains a collection of triggers to be used for a given market
type PriceMonitoringParameters struct {
	Triggers             []*PriceMonitoringTrigger `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PriceMonitoringParameters) Reset()         { *m = PriceMonitoringParameters{} }
func (m *PriceMonitoringParameters) String() string { return proto.CompactTextString(m) }
func (*PriceMonitoringParameters) ProtoMessage()    {}
func (*PriceMonitoringParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{17}
}

func (m *PriceMonitoringParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceMonitoringParameters.Unmarshal(m, b)
}
func (m *PriceMonitoringParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceMonitoringParameters.Marshal(b, m, deterministic)
}
func (m *PriceMonitoringParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceMonitoringParameters.Merge(m, src)
}
func (m *PriceMonitoringParameters) XXX_Size() int {
	return xxx_messageInfo_PriceMonitoringParameters.Size(m)
}
func (m *PriceMonitoringParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceMonitoringParameters.DiscardUnknown(m)
}

var xxx_messageInfo_PriceMonitoringParameters proto.InternalMessageInfo

func (m *PriceMonitoringParameters) GetTriggers() []*PriceMonitoringTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// PriceMonitoringSettings contains the settings for price monitoring
type PriceMonitoringSettings struct {
	// Specifies price monitoring parameters to be used for price monitoring purposes
	Parameters *PriceMonitoringParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Specifies how often (expressed in seconds) the price monitoring bounds should be updated
	UpdateFrequency      int64    `protobuf:"varint,2,opt,name=update_frequency,json=updateFrequency,proto3" json:"update_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PriceMonitoringSettings) Reset()         { *m = PriceMonitoringSettings{} }
func (m *PriceMonitoringSettings) String() string { return proto.CompactTextString(m) }
func (*PriceMonitoringSettings) ProtoMessage()    {}
func (*PriceMonitoringSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{18}
}

func (m *PriceMonitoringSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PriceMonitoringSettings.Unmarshal(m, b)
}
func (m *PriceMonitoringSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PriceMonitoringSettings.Marshal(b, m, deterministic)
}
func (m *PriceMonitoringSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceMonitoringSettings.Merge(m, src)
}
func (m *PriceMonitoringSettings) XXX_Size() int {
	return xxx_messageInfo_PriceMonitoringSettings.Size(m)
}
func (m *PriceMonitoringSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceMonitoringSettings.DiscardUnknown(m)
}

var xxx_messageInfo_PriceMonitoringSettings proto.InternalMessageInfo

func (m *PriceMonitoringSettings) GetParameters() *PriceMonitoringParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *PriceMonitoringSettings) GetUpdateFrequency() int64 {
	if m != nil {
		return m.UpdateFrequency
	}
	return 0
}

// LiquidityMonitoringParameters contains settings used for liquidity monitoring
type LiquidityMonitoringParameters struct {
	// Specifies parameters related to target stake calculation
	TargetStakeParameters *TargetStakeParameters `protobuf:"bytes,1,opt,name=target_stake_parameters,json=targetStakeParameters,proto3" json:"target_stake_parameters,omitempty"`
	// Specifies the triggering ratio for entering liquidity auction
	TriggeringRatio      float64  `protobuf:"fixed64,2,opt,name=triggering_ratio,json=triggeringRatio,proto3" json:"triggering_ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiquidityMonitoringParameters) Reset()         { *m = LiquidityMonitoringParameters{} }
func (m *LiquidityMonitoringParameters) String() string { return proto.CompactTextString(m) }
func (*LiquidityMonitoringParameters) ProtoMessage()    {}
func (*LiquidityMonitoringParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{19}
}

func (m *LiquidityMonitoringParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiquidityMonitoringParameters.Unmarshal(m, b)
}
func (m *LiquidityMonitoringParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiquidityMonitoringParameters.Marshal(b, m, deterministic)
}
func (m *LiquidityMonitoringParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityMonitoringParameters.Merge(m, src)
}
func (m *LiquidityMonitoringParameters) XXX_Size() int {
	return xxx_messageInfo_LiquidityMonitoringParameters.Size(m)
}
func (m *LiquidityMonitoringParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityMonitoringParameters.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityMonitoringParameters proto.InternalMessageInfo

func (m *LiquidityMonitoringParameters) GetTargetStakeParameters() *TargetStakeParameters {
	if m != nil {
		return m.TargetStakeParameters
	}
	return nil
}

func (m *LiquidityMonitoringParameters) GetTriggeringRatio() float64 {
	if m != nil {
		return m.TriggeringRatio
	}
	return 0
}

// TargetStakeParameters contains parameters used in target stake calculation
type TargetStakeParameters struct {
	// Specifies length of time window expressed in seconds for target stake calculation
	TimeWindow int64 `protobuf:"varint,1,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
	// Specifies scaling factors used in target stake calculation
	ScalingFactor        float64  `protobuf:"fixed64,2,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TargetStakeParameters) Reset()         { *m = TargetStakeParameters{} }
func (m *TargetStakeParameters) String() string { return proto.CompactTextString(m) }
func (*TargetStakeParameters) ProtoMessage()    {}
func (*TargetStakeParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{20}
}

func (m *TargetStakeParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetStakeParameters.Unmarshal(m, b)
}
func (m *TargetStakeParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetStakeParameters.Marshal(b, m, deterministic)
}
func (m *TargetStakeParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetStakeParameters.Merge(m, src)
}
func (m *TargetStakeParameters) XXX_Size() int {
	return xxx_messageInfo_TargetStakeParameters.Size(m)
}
func (m *TargetStakeParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetStakeParameters.DiscardUnknown(m)
}

var xxx_messageInfo_TargetStakeParameters proto.InternalMessageInfo

func (m *TargetStakeParameters) GetTimeWindow() int64 {
	if m != nil {
		return m.TimeWindow
	}
	return 0
}

func (m *TargetStakeParameters) GetScalingFactor() float64 {
	if m != nil {
		return m.ScalingFactor
	}
	return 0
}

// Market definition
type Market struct {
	// Unique identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tradable instrument configuration
	TradableInstrument *TradableInstrument `protobuf:"bytes,2,opt,name=tradable_instrument,json=tradableInstrument,proto3" json:"tradable_instrument,omitempty"`
	// Number of decimal places that a price must be shifted by in order to get a
	// correct price denominated in the currency of the market, for example:
	// `realPrice = price / 10^decimalPlaces`
	DecimalPlaces uint64 `protobuf:"varint,3,opt,name=decimal_places,json=decimalPlaces,proto3" json:"decimal_places,omitempty"`
	// Fees configuration
	Fees *Fees `protobuf:"bytes,4,opt,name=fees,proto3" json:"fees,omitempty"`
	// Auction duration specifies how long the opening auction will run (minimum
	// duration and optionally a minimum traded volume)
	OpeningAuction *AuctionDuration `protobuf:"bytes,5,opt,name=opening_auction,json=openingAuction,proto3" json:"opening_auction,omitempty"`
	// Trading mode for the market
	//
	// Types that are valid to be assigned to TradingModeConfig:
	//	*Market_Continuous
	//	*Market_Discrete
	TradingModeConfig isMarket_TradingModeConfig `protobuf_oneof:"trading_mode_config"`
	// PriceMonitoringSettings for the market
	PriceMonitoringSettings *PriceMonitoringSettings `protobuf:"bytes,6,opt,name=price_monitoring_settings,json=priceMonitoringSettings,proto3" json:"price_monitoring_settings,omitempty"`
	// LiquidityMonitoringParameters for the market
	LiquidityMonitoringParameters *LiquidityMonitoringParameters `protobuf:"bytes,7,opt,name=liquidity_monitoring_parameters,json=liquidityMonitoringParameters,proto3" json:"liquidity_monitoring_parameters,omitempty"`
	// Current mode of execution of the market
	TradingMode Market_TradingMode `protobuf:"varint,8,opt,name=trading_mode,json=tradingMode,proto3,enum=vega.Market_TradingMode" json:"trading_mode,omitempty"`
	// Current state of the market
	State Market_State `protobuf:"varint,9,opt,name=state,proto3,enum=vega.Market_State" json:"state,omitempty"`
	// Timestamps for when the market staye changes
	MarketTimestamps     *MarketTimestamps `protobuf:"bytes,10,opt,name=market_timestamps,json=marketTimestamps,proto3" json:"market_timestamps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Market) Reset()         { *m = Market{} }
func (m *Market) String() string { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()    {}
func (*Market) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{21}
}

func (m *Market) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Market.Unmarshal(m, b)
}
func (m *Market) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Market.Marshal(b, m, deterministic)
}
func (m *Market) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Market.Merge(m, src)
}
func (m *Market) XXX_Size() int {
	return xxx_messageInfo_Market.Size(m)
}
func (m *Market) XXX_DiscardUnknown() {
	xxx_messageInfo_Market.DiscardUnknown(m)
}

var xxx_messageInfo_Market proto.InternalMessageInfo

func (m *Market) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Market) GetTradableInstrument() *TradableInstrument {
	if m != nil {
		return m.TradableInstrument
	}
	return nil
}

func (m *Market) GetDecimalPlaces() uint64 {
	if m != nil {
		return m.DecimalPlaces
	}
	return 0
}

func (m *Market) GetFees() *Fees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Market) GetOpeningAuction() *AuctionDuration {
	if m != nil {
		return m.OpeningAuction
	}
	return nil
}

type isMarket_TradingModeConfig interface {
	isMarket_TradingModeConfig()
}

type Market_Continuous struct {
	Continuous *ContinuousTrading `protobuf:"bytes,100,opt,name=continuous,proto3,oneof"`
}

type Market_Discrete struct {
	Discrete *DiscreteTrading `protobuf:"bytes,101,opt,name=discrete,proto3,oneof"`
}

func (*Market_Continuous) isMarket_TradingModeConfig() {}

func (*Market_Discrete) isMarket_TradingModeConfig() {}

func (m *Market) GetTradingModeConfig() isMarket_TradingModeConfig {
	if m != nil {
		return m.TradingModeConfig
	}
	return nil
}

func (m *Market) GetContinuous() *ContinuousTrading {
	if x, ok := m.GetTradingModeConfig().(*Market_Continuous); ok {
		return x.Continuous
	}
	return nil
}

func (m *Market) GetDiscrete() *DiscreteTrading {
	if x, ok := m.GetTradingModeConfig().(*Market_Discrete); ok {
		return x.Discrete
	}
	return nil
}

func (m *Market) GetPriceMonitoringSettings() *PriceMonitoringSettings {
	if m != nil {
		return m.PriceMonitoringSettings
	}
	return nil
}

func (m *Market) GetLiquidityMonitoringParameters() *LiquidityMonitoringParameters {
	if m != nil {
		return m.LiquidityMonitoringParameters
	}
	return nil
}

func (m *Market) GetTradingMode() Market_TradingMode {
	if m != nil {
		return m.TradingMode
	}
	return Market_TRADING_MODE_UNSPECIFIED
}

func (m *Market) GetState() Market_State {
	if m != nil {
		return m.State
	}
	return Market_STATE_UNSPECIFIED
}

func (m *Market) GetMarketTimestamps() *MarketTimestamps {
	if m != nil {
		return m.MarketTimestamps
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Market) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Market_Continuous)(nil),
		(*Market_Discrete)(nil),
	}
}

// Time stamps for important times about creating, enacting etc the market
type MarketTimestamps struct {
	// Time when the market is first proposed
	Proposed int64 `protobuf:"varint,1,opt,name=proposed,proto3" json:"proposed,omitempty"`
	// Time when the market has been voted in and is created into an opening auction
	Pending int64 `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	// Time when the market has left the opening auction and is ready to accept trades
	Open int64 `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
	// Time when the market is closed
	Close                int64    `protobuf:"varint,4,opt,name=close,proto3" json:"close,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketTimestamps) Reset()         { *m = MarketTimestamps{} }
func (m *MarketTimestamps) String() string { return proto.CompactTextString(m) }
func (*MarketTimestamps) ProtoMessage()    {}
func (*MarketTimestamps) Descriptor() ([]byte, []int) {
	return fileDescriptor_a051e0d8e40205f1, []int{22}
}

func (m *MarketTimestamps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketTimestamps.Unmarshal(m, b)
}
func (m *MarketTimestamps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketTimestamps.Marshal(b, m, deterministic)
}
func (m *MarketTimestamps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketTimestamps.Merge(m, src)
}
func (m *MarketTimestamps) XXX_Size() int {
	return xxx_messageInfo_MarketTimestamps.Size(m)
}
func (m *MarketTimestamps) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketTimestamps.DiscardUnknown(m)
}

var xxx_messageInfo_MarketTimestamps proto.InternalMessageInfo

func (m *MarketTimestamps) GetProposed() int64 {
	if m != nil {
		return m.Proposed
	}
	return 0
}

func (m *MarketTimestamps) GetPending() int64 {
	if m != nil {
		return m.Pending
	}
	return 0
}

func (m *MarketTimestamps) GetOpen() int64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *MarketTimestamps) GetClose() int64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func init() {
	proto.RegisterEnum("vega.Market_State", Market_State_name, Market_State_value)
	proto.RegisterEnum("vega.Market_TradingMode", Market_TradingMode_name, Market_TradingMode_value)
	proto.RegisterType((*AuctionDuration)(nil), "vega.AuctionDuration")
	proto.RegisterType((*ContinuousTrading)(nil), "vega.ContinuousTrading")
	proto.RegisterType((*DiscreteTrading)(nil), "vega.DiscreteTrading")
	proto.RegisterType((*Future)(nil), "vega.Future")
	proto.RegisterType((*OracleSpecToFutureBinding)(nil), "vega.OracleSpecToFutureBinding")
	proto.RegisterType((*InstrumentMetadata)(nil), "vega.InstrumentMetadata")
	proto.RegisterType((*Instrument)(nil), "vega.Instrument")
	proto.RegisterType((*LogNormalRiskModel)(nil), "vega.LogNormalRiskModel")
	proto.RegisterType((*LogNormalModelParams)(nil), "vega.LogNormalModelParams")
	proto.RegisterType((*SimpleRiskModel)(nil), "vega.SimpleRiskModel")
	proto.RegisterType((*SimpleModelParams)(nil), "vega.SimpleModelParams")
	proto.RegisterType((*ScalingFactors)(nil), "vega.ScalingFactors")
	proto.RegisterType((*MarginCalculator)(nil), "vega.MarginCalculator")
	proto.RegisterType((*TradableInstrument)(nil), "vega.TradableInstrument")
	proto.RegisterType((*FeeFactors)(nil), "vega.FeeFactors")
	proto.RegisterType((*Fees)(nil), "vega.Fees")
	proto.RegisterType((*PriceMonitoringTrigger)(nil), "vega.PriceMonitoringTrigger")
	proto.RegisterType((*PriceMonitoringParameters)(nil), "vega.PriceMonitoringParameters")
	proto.RegisterType((*PriceMonitoringSettings)(nil), "vega.PriceMonitoringSettings")
	proto.RegisterType((*LiquidityMonitoringParameters)(nil), "vega.LiquidityMonitoringParameters")
	proto.RegisterType((*TargetStakeParameters)(nil), "vega.TargetStakeParameters")
	proto.RegisterType((*Market)(nil), "vega.Market")
	proto.RegisterType((*MarketTimestamps)(nil), "vega.MarketTimestamps")
}

func init() { proto.RegisterFile("markets.proto", fileDescriptor_a051e0d8e40205f1) }

var fileDescriptor_a051e0d8e40205f1 = []byte{
	// 1897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0xcd, 0x6e, 0x1b, 0xc9,
	0xf1, 0xd7, 0x50, 0xb4, 0x24, 0x16, 0x25, 0x91, 0x6c, 0x5b, 0x12, 0x2d, 0xdb, 0x4b, 0xed, 0x18,
	0xfb, 0xff, 0x2b, 0x01, 0x2c, 0xd9, 0xf2, 0x62, 0xb3, 0x9b, 0x20, 0x59, 0xf0, 0x4b, 0x11, 0x17,
	0x22, 0xa9, 0x6d, 0x52, 0x59, 0x24, 0x97, 0x49, 0x6b, 0xd8, 0xa2, 0x1b, 0x9c, 0x99, 0xa6, 0x67,
	0x7a, 0x28, 0xaf, 0x81, 0x00, 0x7b, 0x09, 0x92, 0xdc, 0x82, 0xbc, 0x45, 0x0e, 0x46, 0x8e, 0x01,
	0xf2, 0x0e, 0xb9, 0xe7, 0x66, 0xc0, 0x4f, 0x10, 0xe4, 0x94, 0x63, 0xd0, 0x1f, 0x33, 0x1c, 0x52,
	0xda, 0xe5, 0x85, 0xdd, 0x55, 0xbf, 0xea, 0xfa, 0xe8, 0xaa, 0xea, 0x1a, 0xd8, 0xf2, 0x49, 0x38,
	0xa1, 0x22, 0x3a, 0x9a, 0x86, 0x5c, 0x70, 0x94, 0x9f, 0xd1, 0x31, 0xd9, 0xff, 0x6c, 0xcc, 0xc4,
	0xab, 0xf8, 0xea, 0xc8, 0xe5, 0xfe, 0xb1, 0x7f, 0xc3, 0xc4, 0x84, 0xdf, 0x1c, 0x8f, 0xf9, 0x33,
	0x05, 0x79, 0x36, 0x23, 0x1e, 0x1b, 0x11, 0xc1, 0xc3, 0xe8, 0x38, 0x5d, 0x6a, 0xe9, 0xfd, 0xc7,
	0x3c, 0x24, 0xae, 0x47, 0xa3, 0xe3, 0xd9, 0x8b, 0x63, 0xbd, 0x74, 0xa2, 0x29, 0x75, 0x35, 0xd7,
	0x6e, 0x43, 0xa9, 0x1e, 0xbb, 0x82, 0xf1, 0xa0, 0x15, 0x87, 0x44, 0xfe, 0xa3, 0x7d, 0xd8, 0x18,
	0x99, 0x75, 0xd5, 0x3a, 0xb0, 0x0e, 0x57, 0x71, 0xba, 0x47, 0xbb, 0xb0, 0x36, 0xe3, 0x5e, 0xec,
	0xd3, 0x6a, 0xee, 0xc0, 0x3a, 0xcc, 0x63, 0xb3, 0xb3, 0x9f, 0x43, 0xa5, 0xc9, 0x03, 0xc1, 0x82,
	0x98, 0xc7, 0xd1, 0x30, 0x24, 0x23, 0x16, 0x8c, 0xd1, 0x23, 0x28, 0x08, 0xe6, 0x4e, 0x9c, 0x88,
	0xbd, 0xa5, 0xea, 0xa4, 0x02, 0xde, 0x90, 0x84, 0x01, 0x7b, 0x4b, 0xed, 0xdf, 0x42, 0xa9, 0xc5,
	0x22, 0x37, 0xa4, 0x82, 0x26, 0xf8, 0xe7, 0x50, 0x4c, 0x14, 0x39, 0x41, 0xa4, 0x75, 0x37, 0x4a,
	0x1f, 0xde, 0xd7, 0x8a, 0xe5, 0x95, 0xea, 0x77, 0xdf, 0xfd, 0xf1, 0x1f, 0x7f, 0x7e, 0xf7, 0xcf,
	0x3c, 0x86, 0x04, 0xd3, 0x8b, 0x16, 0x35, 0xe4, 0x96, 0x34, 0xfc, 0xd7, 0x82, 0xb5, 0xd3, 0x58,
	0xc4, 0x21, 0x95, 0x2e, 0xf9, 0x44, 0xc4, 0x21, 0x13, 0xdf, 0x26, 0x86, 0x24, 0x7b, 0xf4, 0x23,
	0x28, 0x47, 0x54, 0x08, 0x8f, 0xfa, 0x34, 0x10, 0x0e, 0x89, 0x22, 0x2a, 0xcc, 0x51, 0xa5, 0x39,
	0xbd, 0x2e, 0xc9, 0xe8, 0x09, 0xc0, 0xeb, 0x98, 0x0b, 0xea, 0x04, 0xc4, 0xa7, 0xd5, 0xbc, 0x02,
	0x15, 0x14, 0xa5, 0x47, 0x7c, 0x8a, 0x7e, 0x02, 0xc5, 0x4c, 0x80, 0xab, 0xf7, 0x0e, 0xac, 0xc3,
	0xe2, 0xc9, 0xee, 0x91, 0x89, 0xff, 0xd1, 0xec, 0xc5, 0x51, 0x5f, 0x2d, 0x07, 0x53, 0xea, 0x62,
	0xe0, 0xe9, 0x1a, 0xf5, 0xe1, 0x7e, 0x46, 0xd0, 0xb9, 0x62, 0x81, 0x8c, 0x47, 0x75, 0x4d, 0x1d,
	0x50, 0x3b, 0x92, 0xd7, 0x9f, 0x11, 0x1d, 0x72, 0xed, 0x55, 0x43, 0xc3, 0x70, 0x65, 0x7e, 0x92,
	0x21, 0xd9, 0xdf, 0xc0, 0xc3, 0xef, 0xc5, 0xa3, 0x9f, 0xc2, 0xc3, 0x8c, 0xc3, 0xd3, 0x90, 0xb9,
	0xd4, 0x99, 0x86, 0x7c, 0x4a, 0xc3, 0x34, 0x3a, 0x7b, 0x73, 0xc0, 0x85, 0xe4, 0x5f, 0x18, 0xb6,
	0x7d, 0x08, 0xa8, 0x13, 0x44, 0x22, 0x8c, 0x25, 0xab, 0x4b, 0x05, 0x19, 0x11, 0x41, 0x10, 0x82,
	0xbc, 0x20, 0x63, 0x79, 0x63, 0xab, 0x87, 0x05, 0xac, 0xd6, 0xf6, 0x3b, 0x0b, 0x60, 0x0e, 0x45,
	0xdb, 0x90, 0x63, 0x23, 0x73, 0x7a, 0x8e, 0x8d, 0xa4, 0x88, 0xcb, 0x47, 0xc9, 0xa5, 0xa9, 0xb5,
	0xa4, 0xa9, 0xc0, 0xae, 0x6a, 0x9a, 0x5c, 0xa3, 0x4f, 0x61, 0xc3, 0x37, 0x6a, 0x54, 0xc0, 0x8b,
	0x27, 0x55, 0x1d, 0x8f, 0xdb, 0x66, 0xe0, 0x14, 0x89, 0xfe, 0x0f, 0xd6, 0xae, 0x95, 0xcf, 0xd5,
	0x91, 0x92, 0xd9, 0xd4, 0x32, 0x3a, 0x0e, 0x67, 0x2b, 0xd8, 0x70, 0x1b, 0x05, 0x58, 0x9f, 0x86,
	0x7c, 0x14, 0xbb, 0xc2, 0xfe, 0x8b, 0x05, 0xe8, 0x9c, 0x8f, 0x7b, 0x3c, 0xf4, 0x89, 0x87, 0x59,
	0x34, 0xe9, 0xf2, 0x11, 0xf5, 0xd0, 0x67, 0xb0, 0x17, 0xb2, 0x68, 0xe2, 0x90, 0x19, 0x0d, 0x23,
	0x99, 0x98, 0x53, 0x12, 0x12, 0x9f, 0x0a, 0x1a, 0x2a, 0x67, 0x2c, 0xbc, 0x23, 0xd9, 0x75, 0xc3,
	0xbd, 0x48, 0x98, 0xa8, 0x0c, 0xab, 0x82, 0xc4, 0xca, 0x3d, 0x0b, 0xcb, 0x25, 0x3a, 0x81, 0x35,
	0x25, 0x1b, 0x29, 0xff, 0x8a, 0x27, 0xfb, 0xda, 0xa6, 0x54, 0xa7, 0xd2, 0xa7, 0x0e, 0x88, 0xb0,
	0x41, 0xda, 0x5f, 0xc1, 0x83, 0xbb, 0xf8, 0x32, 0x9a, 0x7e, 0x6c, 0x0c, 0xc8, 0xf9, 0x31, 0xda,
	0x04, 0x2b, 0x34, 0xba, 0xac, 0x10, 0x3d, 0x80, 0x7b, 0x11, 0x1b, 0xfb, 0x44, 0x29, 0xb2, 0xb0,
	0xde, 0xd8, 0x0d, 0x28, 0x0d, 0x98, 0x3f, 0xf5, 0xe8, 0xdc, 0xb9, 0xe3, 0xd4, 0x24, 0x4b, 0x99,
	0xb4, 0xa7, 0x4d, 0xd2, 0xb0, 0xbb, 0xec, 0xf9, 0x43, 0x0e, 0x2a, 0xb7, 0xb8, 0xa8, 0x06, 0xc5,
	0x6b, 0xe2, 0x0a, 0x1e, 0x3a, 0x1e, 0x0f, 0xc6, 0xc6, 0x2c, 0xd0, 0xa4, 0x73, 0x1e, 0x8c, 0xd1,
	0xc7, 0xb0, 0x69, 0x00, 0xd1, 0x2b, 0x1e, 0x0a, 0x63, 0xa9, 0x11, 0x1a, 0x48, 0x12, 0x7a, 0x06,
	0x45, 0x9f, 0xbc, 0x71, 0x7c, 0x3e, 0xa3, 0x4e, 0x3c, 0xd5, 0x96, 0x37, 0xb6, 0x3e, 0xbc, 0xaf,
	0x15, 0x3a, 0x2b, 0xe6, 0x87, 0x0b, 0x3e, 0x79, 0xd3, 0xe5, 0x33, 0x7a, 0x39, 0x45, 0x2f, 0x60,
	0xcb, 0x67, 0x81, 0x86, 0x8f, 0xf8, 0x4d, 0xa0, 0x72, 0xc3, 0x08, 0x7c, 0x9d, 0x0a, 0x14, 0x7d,
	0x16, 0x48, 0x81, 0x16, 0xbf, 0x09, 0xd0, 0x39, 0xec, 0x4e, 0x43, 0x7e, 0x45, 0xae, 0x98, 0xc7,
	0xc4, 0xb7, 0x0e, 0xbf, 0x76, 0x84, 0xee, 0x3b, 0xaa, 0x50, 0xad, 0xc6, 0xee, 0x87, 0xf7, 0x35,
	0x94, 0x2a, 0x33, 0x87, 0xfc, 0xfb, 0x4b, 0xfc, 0x20, 0x23, 0xd5, 0xbf, 0x36, 0xbd, 0xca, 0xfe,
	0x93, 0x05, 0xdb, 0x03, 0x97, 0x78, 0x2c, 0x18, 0x9f, 0x2a, 0x37, 0x22, 0xe9, 0x65, 0x44, 0x49,
	0xe8, 0xbe, 0x72, 0x3c, 0x3a, 0xa3, 0x9e, 0x89, 0x43, 0x51, 0xd3, 0xce, 0x25, 0x09, 0x7d, 0x02,
	0xdb, 0x2c, 0x60, 0x82, 0x11, 0xcf, 0xf1, 0x49, 0x38, 0x66, 0x81, 0x09, 0xc5, 0x96, 0xa1, 0x76,
	0x15, 0x11, 0x3d, 0x03, 0xe4, 0x72, 0xcf, 0x23, 0x82, 0x86, 0xc4, 0x73, 0x42, 0xea, 0x51, 0x12,
	0x51, 0x73, 0x9b, 0x95, 0x39, 0x07, 0x6b, 0x86, 0xfd, 0x35, 0x94, 0xb5, 0x60, 0x93, 0x78, 0x6e,
	0xec, 0xc9, 0xde, 0x8f, 0x7e, 0x0e, 0xa5, 0x48, 0x9b, 0xe7, 0xe8, 0x30, 0x27, 0x77, 0xfc, 0xc0,
	0xdc, 0xf1, 0x82, 0xed, 0x78, 0x3b, 0x5a, 0xd8, 0xdb, 0xef, 0x72, 0x80, 0xa4, 0xab, 0xe4, 0xca,
	0xa3, 0x99, 0x2a, 0x7e, 0x0e, 0xc0, 0xd2, 0x9d, 0x39, 0xb0, 0xbc, 0x5c, 0x8f, 0x38, 0x83, 0x41,
	0x4d, 0xa8, 0x68, 0x4f, 0x1d, 0x37, 0x35, 0x4e, 0x39, 0x2d, 0x3b, 0xa3, 0x12, 0x5c, 0x36, 0x1d,
	0x97, 0xfd, 0x65, 0x67, 0xba, 0xb0, 0xe3, 0xf1, 0xb1, 0x13, 0xa8, 0x3a, 0x70, 0x54, 0x3d, 0xfa,
	0x32, 0xff, 0x4c, 0x75, 0x57, 0x97, 0x2a, 0x29, 0x4d, 0xf0, 0xb3, 0x15, 0x8c, 0xbc, 0xdb, 0x35,
	0xdd, 0x84, 0x4a, 0xa4, 0x92, 0x38, 0x7b, 0x14, 0x55, 0x47, 0xed, 0x64, 0x2b, 0x20, 0x7b, 0x4e,
	0x29, 0x5a, 0x24, 0x35, 0x36, 0x01, 0xe6, 0xd2, 0xf6, 0xef, 0x00, 0x4e, 0x29, 0x4d, 0x32, 0xe1,
	0x11, 0x14, 0x7c, 0x32, 0xa1, 0xa1, 0x73, 0x4d, 0xe9, 0xfc, 0xbd, 0x99, 0xd0, 0xf0, 0x94, 0x52,
	0x79, 0xb9, 0x2c, 0xb8, 0x0e, 0x89, 0x0c, 0x91, 0x2b, 0xbb, 0x90, 0x42, 0xe9, 0x3e, 0x58, 0x59,
	0xe4, 0x48, 0xf8, 0x53, 0xd8, 0xf2, 0xd8, 0xeb, 0x98, 0x8d, 0x64, 0xd2, 0x4a, 0xa4, 0xee, 0x8e,
	0x9b, 0x29, 0xf1, 0x94, 0x52, 0xfb, 0x04, 0xf2, 0xa7, 0x94, 0x46, 0xe8, 0xc7, 0xb0, 0xbe, 0x78,
	0xdb, 0xe6, 0x72, 0xe6, 0xb6, 0xe1, 0x04, 0x60, 0xff, 0xd5, 0x82, 0x5d, 0xd5, 0xdc, 0xbb, 0x3c,
	0x60, 0x82, 0x87, 0x2c, 0x18, 0x0f, 0x43, 0x36, 0x1e, 0xd3, 0x10, 0x1d, 0xc0, 0xfa, 0x2b, 0x1e,
	0xb2, 0xb7, 0xc9, 0x00, 0xd0, 0x58, 0xfb, 0xf0, 0xbe, 0x96, 0x2b, 0xaf, 0xe0, 0x84, 0x8c, 0x3e,
	0x87, 0x62, 0xa6, 0x2c, 0x74, 0x16, 0xeb, 0x0a, 0x7a, 0x91, 0x54, 0xd0, 0x17, 0x69, 0x05, 0x65,
	0xa1, 0xe8, 0x25, 0x54, 0x88, 0x1e, 0x38, 0x1c, 0xfa, 0x46, 0xd0, 0x40, 0xb6, 0x4d, 0xe5, 0xd3,
	0x5c, 0x4b, 0xd9, 0x00, 0xda, 0x09, 0xdf, 0xbe, 0x84, 0x87, 0x4b, 0xa6, 0xa6, 0x9d, 0x36, 0x42,
	0x9f, 0xc3, 0x86, 0xd0, 0x86, 0xeb, 0x17, 0xa8, 0x78, 0xf2, 0x58, 0x7b, 0x7d, 0xb7, 0x77, 0x38,
	0x45, 0xdb, 0xbf, 0xb7, 0x60, 0x6f, 0x09, 0x34, 0xa0, 0x42, 0xb0, 0x60, 0x1c, 0xa1, 0x2f, 0x01,
	0xd2, 0x56, 0x9f, 0x44, 0xb3, 0x76, 0xe7, 0xb9, 0x73, 0x53, 0x70, 0x46, 0x44, 0xce, 0x15, 0xf1,
	0x74, 0x44, 0x04, 0x75, 0xae, 0x43, 0xfa, 0x3a, 0xa6, 0x81, 0xab, 0xe3, 0xb4, 0x8a, 0x4b, 0x9a,
	0x7e, 0x9a, 0x90, 0xed, 0xbf, 0x5b, 0xf0, 0xe4, 0x3c, 0xb9, 0xcf, 0x3b, 0x7d, 0x1c, 0xc0, 0x9e,
	0x20, 0xe1, 0x98, 0x0a, 0x27, 0x12, 0x64, 0x42, 0x9d, 0x5b, 0xa6, 0x3d, 0xd2, 0xa6, 0x0d, 0x15,
	0x68, 0x20, 0x31, 0x19, 0xb3, 0x76, 0xc4, 0x5d, 0x64, 0x54, 0x87, 0xb2, 0x09, 0x85, 0x6c, 0x13,
	0x6a, 0xa8, 0xca, 0xde, 0xe4, 0x1d, 0xbd, 0xb0, 0x34, 0xc7, 0x63, 0x09, 0xb7, 0x67, 0xb0, 0x73,
	0xa7, 0x4a, 0xf4, 0xff, 0x50, 0x14, 0xcc, 0xa7, 0xce, 0x0d, 0x0b, 0x46, 0xfc, 0x66, 0x29, 0x8d,
	0x40, 0xb2, 0xbe, 0x51, 0x1c, 0xf4, 0x29, 0x6c, 0x2f, 0x36, 0x2a, 0x63, 0x82, 0x6a, 0xe5, 0x69,
	0x32, 0xe1, 0xad, 0x85, 0x06, 0x65, 0xff, 0x67, 0x03, 0xd6, 0xba, 0x6a, 0x48, 0xbe, 0x35, 0x59,
	0x74, 0xe0, 0xbe, 0x30, 0x9d, 0xcb, 0xc9, 0x34, 0xab, 0x5c, 0xb6, 0x55, 0xdc, 0x6e, 0x6d, 0x18,
	0x89, 0xdb, 0xed, 0xee, 0x13, 0xd8, 0x1e, 0x51, 0x97, 0xc9, 0xa6, 0x33, 0xf5, 0x88, 0x4b, 0xf5,
	0xd3, 0x9d, 0xc7, 0x5b, 0x86, 0x7a, 0xa1, 0x88, 0xe8, 0x23, 0xc8, 0x5f, 0x53, 0x1a, 0x99, 0xf9,
	0x04, 0xd2, 0x92, 0x8b, 0xb0, 0xa2, 0xa3, 0x5f, 0x40, 0x89, 0x4f, 0x69, 0x20, 0x5d, 0x34, 0x99,
	0x6d, 0x66, 0x43, 0xd3, 0x6d, 0x96, 0x06, 0x70, 0xbc, 0x6d, 0xd0, 0x86, 0x8e, 0xbe, 0x00, 0x70,
	0xd3, 0xe1, 0xda, 0xf4, 0x3c, 0xf3, 0x54, 0xdf, 0x1a, 0xba, 0xcf, 0x56, 0x70, 0x06, 0x8c, 0x5e,
	0xc2, 0xc6, 0xc8, 0x4c, 0xd9, 0x8b, 0x1d, 0x6e, 0x69, 0xf6, 0x3e, 0x5b, 0xc1, 0x29, 0x10, 0xfd,
	0x1a, 0x1e, 0xea, 0xa9, 0xd0, 0x4f, 0x53, 0xd1, 0x89, 0x4c, 0x5d, 0x98, 0xa1, 0xf4, 0xc9, 0x9d,
	0x95, 0x90, 0x14, 0x0f, 0xde, 0x9b, 0x7e, 0x4f, 0x55, 0x4d, 0xa0, 0x36, 0xef, 0x66, 0x99, 0xe3,
	0x33, 0xf9, 0xbc, 0xae, 0x14, 0x3c, 0x35, 0x3d, 0xfd, 0x87, 0xaa, 0x02, 0x3f, 0xf1, 0x7e, 0xb0,
	0x68, 0x7e, 0x06, 0x9b, 0xe6, 0x89, 0x57, 0x5d, 0xba, 0xba, 0x71, 0x60, 0x1d, 0x6e, 0x27, 0x29,
	0xa0, 0xb3, 0xe7, 0xc8, 0xf8, 0x2f, 0x7b, 0x3a, 0x2e, 0x8a, 0xf9, 0x06, 0x1d, 0xc2, 0xbd, 0x48,
	0x10, 0x41, 0xab, 0x05, 0x25, 0x85, 0x16, 0xa4, 0x06, 0x92, 0x83, 0x35, 0xc0, 0x3c, 0x71, 0x13,
	0x2a, 0x1c, 0x99, 0xd6, 0x91, 0x20, 0xfe, 0x34, 0xaa, 0xc2, 0xd2, 0x13, 0x37, 0xa1, 0x62, 0x98,
	0x72, 0xd5, 0x13, 0xb7, 0x40, 0xb1, 0xff, 0x65, 0xc1, 0x3d, 0x75, 0x2a, 0xda, 0x81, 0xca, 0x60,
	0x58, 0x1f, 0xb6, 0x9d, 0xcb, 0xde, 0xe0, 0xa2, 0xdd, 0xec, 0x9c, 0x76, 0xda, 0xad, 0xf2, 0x0a,
	0x42, 0xb0, 0xad, 0xc9, 0x17, 0xb8, 0x7f, 0xd1, 0x1f, 0xb4, 0x5b, 0x65, 0x6b, 0x4e, 0xc3, 0xed,
	0xaf, 0xda, 0xcd, 0x61, 0xbb, 0x55, 0xce, 0xa1, 0x0a, 0x6c, 0x19, 0x5c, 0xbb, 0xd7, 0xea, 0xf4,
	0x7e, 0x59, 0x5e, 0x45, 0xf7, 0xa1, 0xa4, 0x49, 0xcd, 0x7a, 0xaf, 0xd9, 0x3e, 0x3f, 0x6f, 0xb7,
	0xca, 0x79, 0x54, 0x86, 0x4d, 0x4d, 0xac, 0x37, 0x87, 0x9d, 0x5f, 0xb5, 0xcb, 0xf7, 0xe6, 0xb0,
	0xc1, 0xe5, 0x40, 0x0a, 0xb7, 0x5b, 0xe5, 0xb5, 0x39, 0xac, 0x79, 0xae, 0x94, 0xae, 0xa3, 0xc7,
	0x50, 0xd5, 0x94, 0x21, 0xae, 0x4b, 0x05, 0xce, 0xb0, 0x8d, 0xbb, 0x9d, 0x5e, 0x5d, 0xaa, 0xdf,
	0x98, 0xab, 0x1f, 0xb4, 0x87, 0x43, 0xa9, 0xa9, 0x60, 0xff, 0xcd, 0x82, 0x62, 0x26, 0xcc, 0xf2,
	0x80, 0x44, 0xb4, 0xdb, 0x6f, 0x2d, 0xfb, 0xf9, 0x08, 0xf6, 0x16, 0xb8, 0xcd, 0x7e, 0x6f, 0xd8,
	0xe9, 0x5d, 0xf6, 0x2f, 0x07, 0x65, 0x0b, 0x7d, 0x04, 0xfb, 0x0b, 0xcc, 0x46, 0x7d, 0xd8, 0x3c,
	0x73, 0xea, 0x97, 0xcd, 0x61, 0xa7, 0xdf, 0x2b, 0xe7, 0xd0, 0x01, 0x3c, 0x5e, 0xe0, 0xf7, 0x2f,
	0xda, 0x3d, 0xb9, 0x49, 0x10, 0xab, 0xe8, 0x29, 0xd4, 0x16, 0x10, 0xdd, 0x7e, 0xaf, 0x33, 0xec,
	0xe3, 0x2c, 0x28, 0xdf, 0xd8, 0xd1, 0x2d, 0x24, 0x49, 0x1c, 0xc7, 0xe5, 0xc1, 0x35, 0x1b, 0xdb,
	0xa1, 0x9a, 0xb3, 0x16, 0xee, 0x4d, 0x7e, 0x59, 0xca, 0x6f, 0x27, 0x1e, 0xd1, 0x51, 0xf2, 0xb1,
	0x9c, 0xec, 0x51, 0x15, 0xd6, 0xa7, 0x54, 0x7f, 0xca, 0xe9, 0xc6, 0x9f, 0x6c, 0xe5, 0x97, 0x8e,
	0xac, 0x71, 0xfd, 0xee, 0x61, 0xb5, 0x96, 0x53, 0xbb, 0xeb, 0xf1, 0x48, 0x7f, 0x57, 0xae, 0x62,
	0xbd, 0x69, 0x7c, 0xfc, 0x9b, 0x9a, 0xfc, 0x36, 0x52, 0x79, 0xa4, 0xbe, 0xd8, 0x5d, 0xee, 0x1d,
	0x31, 0x7e, 0x2c, 0xf7, 0xc7, 0x8a, 0x70, 0xb5, 0xa6, 0xfe, 0x5e, 0xfe, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x6c, 0xa6, 0x3c, 0x8b, 0x36, 0x10, 0x00, 0x00,
}
