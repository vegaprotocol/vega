// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import core "vega/core"
import datastore "vega/datastore"
import mock "github.com/stretchr/testify/mock"
import msg "vega/proto"

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderService) CreateOrder(ctx context.Context, order *msg.Order) (bool, error) {
	ret := _m.Called(ctx, order)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *msg.Order) bool); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *msg.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMarket provides a mock function with given fields: ctx, market, limit
func (_m *OrderService) GetByMarket(ctx context.Context, market string, limit uint64) ([]*msg.Order, error) {
	ret := _m.Called(ctx, market, limit)

	var r0 []*msg.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) []*msg.Order); ok {
		r0 = rf(ctx, market, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, market, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMarketAndId provides a mock function with given fields: ctx, market, id
func (_m *OrderService) GetByMarketAndId(ctx context.Context, market string, id string) (*msg.Order, error) {
	ret := _m.Called(ctx, market, id)

	var r0 *msg.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *msg.Order); ok {
		r0 = rf(ctx, market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByParty provides a mock function with given fields: ctx, party, limit
func (_m *OrderService) GetByParty(ctx context.Context, party string, limit uint64) ([]*msg.Order, error) {
	ret := _m.Called(ctx, party, limit)

	var r0 []*msg.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) []*msg.Order); ok {
		r0 = rf(ctx, party, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*msg.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, party, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPartyAndId provides a mock function with given fields: ctx, market, id
func (_m *OrderService) GetByPartyAndId(ctx context.Context, market string, id string) (*msg.Order, error) {
	ret := _m.Called(ctx, market, id)

	var r0 *msg.Order
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *msg.Order); ok {
		r0 = rf(ctx, market, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, market, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkets provides a mock function with given fields: ctx
func (_m *OrderService) GetMarkets(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBookDepth provides a mock function with given fields: ctx, market
func (_m *OrderService) GetOrderBookDepth(ctx context.Context, market string) (*msg.OrderBookDepth, error) {
	ret := _m.Called(ctx, market)

	var r0 *msg.OrderBookDepth
	if rf, ok := ret.Get(0).(func(context.Context, string) *msg.OrderBookDepth); ok {
		r0 = rf(ctx, market)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msg.OrderBookDepth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, market)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: vega, orderStore
func (_m *OrderService) Init(vega *core.Vega, orderStore datastore.OrderStore) {
	_m.Called(vega, orderStore)
}
