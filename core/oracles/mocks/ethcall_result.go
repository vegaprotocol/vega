// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/oracles (interfaces: EthCallResult)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEthCallResult is a mock of EthCallResult interface.
type MockEthCallResult struct {
	ctrl     *gomock.Controller
	recorder *MockEthCallResultMockRecorder
}

// MockEthCallResultMockRecorder is the mock recorder for MockEthCallResult.
type MockEthCallResultMockRecorder struct {
	mock *MockEthCallResult
}

// NewMockEthCallResult creates a new mock instance.
func NewMockEthCallResult(ctrl *gomock.Controller) *MockEthCallResult {
	mock := &MockEthCallResult{ctrl: ctrl}
	mock.recorder = &MockEthCallResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthCallResult) EXPECT() *MockEthCallResultMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockEthCallResult) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockEthCallResultMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockEthCallResult)(nil).Bytes))
}

// Normalised mocks base method.
func (m *MockEthCallResult) Normalised() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Normalised")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Normalised indicates an expected call of Normalised.
func (mr *MockEthCallResultMockRecorder) Normalised() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Normalised", reflect.TypeOf((*MockEthCallResult)(nil).Normalised))
}

// PassesFilters mocks base method.
func (m *MockEthCallResult) PassesFilters() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PassesFilters")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PassesFilters indicates an expected call of PassesFilters.
func (mr *MockEthCallResultMockRecorder) PassesFilters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassesFilters", reflect.TypeOf((*MockEthCallResult)(nil).PassesFilters))
}

// Values mocks base method.
func (m *MockEthCallResult) Values() ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Values indicates an expected call of Values.
func (mr *MockEthCallResultMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockEthCallResult)(nil).Values))
}
