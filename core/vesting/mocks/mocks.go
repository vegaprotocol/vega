// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/vesting (interfaces: Collateral,ActivityStreakVestingMultiplier,Broker,Assets)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	assets "code.vegaprotocol.io/vega/core/assets"
	events "code.vegaprotocol.io/vega/core/events"
	types "code.vegaprotocol.io/vega/core/types"
	num "code.vegaprotocol.io/vega/libs/num"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockCollateral is a mock of Collateral interface.
type MockCollateral struct {
	ctrl     *gomock.Controller
	recorder *MockCollateralMockRecorder
}

// MockCollateralMockRecorder is the mock recorder for MockCollateral.
type MockCollateralMockRecorder struct {
	mock *MockCollateral
}

// NewMockCollateral creates a new mock instance.
func NewMockCollateral(ctrl *gomock.Controller) *MockCollateral {
	mock := &MockCollateral{ctrl: ctrl}
	mock.recorder = &MockCollateralMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollateral) EXPECT() *MockCollateralMockRecorder {
	return m.recorder
}

// GetAllVestingQuantumBalance mocks base method.
func (m *MockCollateral) GetAllVestingQuantumBalance(arg0 string) *num.Uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVestingQuantumBalance", arg0)
	ret0, _ := ret[0].(*num.Uint)
	return ret0
}

// GetAllVestingQuantumBalance indicates an expected call of GetAllVestingQuantumBalance.
func (mr *MockCollateralMockRecorder) GetAllVestingQuantumBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVestingQuantumBalance", reflect.TypeOf((*MockCollateral)(nil).GetAllVestingQuantumBalance), arg0)
}

// GetVestingAccounts mocks base method.
func (m *MockCollateral) GetVestingAccounts() []*types.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVestingAccounts")
	ret0, _ := ret[0].([]*types.Account)
	return ret0
}

// GetVestingAccounts indicates an expected call of GetVestingAccounts.
func (mr *MockCollateralMockRecorder) GetVestingAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVestingAccounts", reflect.TypeOf((*MockCollateral)(nil).GetVestingAccounts))
}

// GetVestingRecovery mocks base method.
func (m *MockCollateral) GetVestingRecovery() map[string]map[string]*num.Uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVestingRecovery")
	ret0, _ := ret[0].(map[string]map[string]*num.Uint)
	return ret0
}

// GetVestingRecovery indicates an expected call of GetVestingRecovery.
func (mr *MockCollateralMockRecorder) GetVestingRecovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVestingRecovery", reflect.TypeOf((*MockCollateral)(nil).GetVestingRecovery))
}

// TransferVestedRewards mocks base method.
func (m *MockCollateral) TransferVestedRewards(arg0 context.Context, arg1 []*types.Transfer) ([]*types.LedgerMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferVestedRewards", arg0, arg1)
	ret0, _ := ret[0].([]*types.LedgerMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferVestedRewards indicates an expected call of TransferVestedRewards.
func (mr *MockCollateralMockRecorder) TransferVestedRewards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferVestedRewards", reflect.TypeOf((*MockCollateral)(nil).TransferVestedRewards), arg0, arg1)
}

// MockActivityStreakVestingMultiplier is a mock of ActivityStreakVestingMultiplier interface.
type MockActivityStreakVestingMultiplier struct {
	ctrl     *gomock.Controller
	recorder *MockActivityStreakVestingMultiplierMockRecorder
}

// MockActivityStreakVestingMultiplierMockRecorder is the mock recorder for MockActivityStreakVestingMultiplier.
type MockActivityStreakVestingMultiplierMockRecorder struct {
	mock *MockActivityStreakVestingMultiplier
}

// NewMockActivityStreakVestingMultiplier creates a new mock instance.
func NewMockActivityStreakVestingMultiplier(ctrl *gomock.Controller) *MockActivityStreakVestingMultiplier {
	mock := &MockActivityStreakVestingMultiplier{ctrl: ctrl}
	mock.recorder = &MockActivityStreakVestingMultiplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityStreakVestingMultiplier) EXPECT() *MockActivityStreakVestingMultiplierMockRecorder {
	return m.recorder
}

// GetRewardsVestingMultiplier mocks base method.
func (m *MockActivityStreakVestingMultiplier) GetRewardsVestingMultiplier(arg0 string) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardsVestingMultiplier", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// GetRewardsVestingMultiplier indicates an expected call of GetRewardsVestingMultiplier.
func (mr *MockActivityStreakVestingMultiplierMockRecorder) GetRewardsVestingMultiplier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardsVestingMultiplier", reflect.TypeOf((*MockActivityStreakVestingMultiplier)(nil).GetRewardsVestingMultiplier), arg0)
}

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockBroker) Send(arg0 events.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send.
func (mr *MockBrokerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBroker)(nil).Send), arg0)
}

// MockAssets is a mock of Assets interface.
type MockAssets struct {
	ctrl     *gomock.Controller
	recorder *MockAssetsMockRecorder
}

// MockAssetsMockRecorder is the mock recorder for MockAssets.
type MockAssetsMockRecorder struct {
	mock *MockAssets
}

// NewMockAssets creates a new mock instance.
func NewMockAssets(ctrl *gomock.Controller) *MockAssets {
	mock := &MockAssets{ctrl: ctrl}
	mock.recorder = &MockAssetsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssets) EXPECT() *MockAssetsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAssets) Get(arg0 string) (*assets.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*assets.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAssetsMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAssets)(nil).Get), arg0)
}
