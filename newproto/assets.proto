syntax = "proto3";

package vega;
option go_package = "code.vegaprotocol.io/vega/proto";

// The Vega representation of an external asset.
message Asset {

  // Internal identifier of the asset.
  string ID = 1;
  // Name of the asset (e.g: Great British Pound).
  string name = 2;
  // Symbol of the asset (e.g: GBP).
  string symbol = 3;
  // Total circulating supply for the asset.
  string totalSupply = 4;
  // Number of decimals / precision handled by this asset.
  uint64 decimals = 5;
  // The definition of the external source for this asset
  AssetSource source = 7;
}

// Asset source definition.
message AssetSource {

  // The source.
  oneof source {
    // A built-in asset.
    BuiltinAsset builtinAsset = 1;
    // An Ethereum ERC20 asset.
    ERC20 erc20 = 2;
  }
}

// A Vega internal asset.
message BuiltinAsset {

  // Name of the asset (e.g: Great British Pound).
  string name = 1;
  // Symbol of the asset (e.g: GBP).
  string symbol = 2;
  // Total circulating supply for the asset.
  string totalSupply = 3;
  // Number of decimal / precision handled by this asset.
  uint64 decimals = 4;
  // Maximum amount that can be requested by a party through the built-in asset faucet at a time.
  string maxFaucetAmountMint = 5;
}

// An ERC20 token based asset, living on the ethereum network.
message ERC20 {

  // The address of the contract for the token, on the ethereum network
  string contractAddress = 1;
}

// Dev assets are for use in development networks only.
message DevAssets {

  // Asset sources for development networks.
  repeated AssetSource sources = 1;
}