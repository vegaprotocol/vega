{
  "swagger": "2.0",
  "info": {
    "title": "proto/api/trading.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/assets": {
      "get": {
        "summary": "Get a list of all assets on Vega.",
        "operationId": "Assets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAssetsResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/assets/{ID}": {
      "get": {
        "summary": "Get an asset by its identifier.",
        "operationId": "AssetByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAssetByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "description": "Asset identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/assets/{asset}/infrastructureFeeAccount": {
      "get": {
        "summary": "Get the list of infrastructure fees accounts filter eventually by assets",
        "operationId": "FeeInfrastructureAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiFeeInfrastructureAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "asset",
            "description": "Asset identifier. Required field.\nSet to an empty string to return all accounts.\nSet to an asset ID to return a single infrastructure fee account for a given asset.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/deposits/party/{partyID}": {
      "get": {
        "summary": "Get withdrawals for a party",
        "operationId": "Deposits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDepositsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "The party to get the deposits for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/deposits/{ID}": {
      "get": {
        "summary": "Get a deposit by its ID",
        "operationId": "Deposit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDepositResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "description": "The id of the withdrawal",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/governance/prepare/proposal": {
      "post": {
        "summary": "Prepare a governance proposal",
        "operationId": "PrepareProposal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareProposalResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPrepareProposalRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/governance/prepare/vote": {
      "post": {
        "summary": "Prepare a governance vote",
        "operationId": "PrepareVote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareVoteResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPrepareVoteRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/liquidity-provisions": {
      "get": {
        "operationId": "PrepareLiquidityProvision2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareLiquidityProvisionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "submission.marketID",
            "description": "Market identifier for the order. Required field.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "submission.commitmentAmount",
            "description": "Specified as a unitless number that represents the amount of settlement asset of the market.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "submission.fee",
            "description": "nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/liquidity-provisions/prepare/submit": {
      "post": {
        "operationId": "PrepareLiquidityProvision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareLiquidityProvisionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPrepareLiquidityProvisionRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/markets": {
      "get": {
        "summary": "Get a list of Markets",
        "operationId": "Markets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketsResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets-data": {
      "get": {
        "summary": "Get a list of Market Data",
        "operationId": "MarketsData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketsDataResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets-data/{marketID}": {
      "get": {
        "summary": "Get Market Data by MarketID",
        "operationId": "MarketDataByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketDataByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}": {
      "get": {
        "summary": "Get a Market by ID",
        "operationId": "MarketByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/accounts": {
      "get": {
        "summary": "Get a list of Accounts by Market",
        "operationId": "MarketAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "asset",
            "description": "Asset identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/candles": {
      "get": {
        "summary": "Get a list of Candles by Market",
        "operationId": "Candles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCandlesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sinceTimestamp",
            "description": "Timestamp to retrieve candles since, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`. Required field.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "interval",
            "description": "Time interval for the candles. Required field.\n\n - INTERVAL_UNSPECIFIED: Default value, always invalid.\n - INTERVAL_I1M: 1 minute.\n - INTERVAL_I5M: 5 minutes.\n - INTERVAL_I15M: 15 minutes.\n - INTERVAL_I1H: 1 hour.\n - INTERVAL_I6H: 6 hours.\n - INTERVAL_I1D: 1 day.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "INTERVAL_UNSPECIFIED",
              "INTERVAL_I1M",
              "INTERVAL_I5M",
              "INTERVAL_I15M",
              "INTERVAL_I1H",
              "INTERVAL_I6H",
              "INTERVAL_I1D"
            ],
            "default": "INTERVAL_UNSPECIFIED"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/depth": {
      "get": {
        "summary": "Get Market Depth",
        "operationId": "MarketDepth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarketDepthResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxDepth",
            "description": "Max depth limits the number of levels returned. Default is 0, which returns all levels.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/orders": {
      "get": {
        "summary": "Get a list of Orders by Market",
        "operationId": "OrdersByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrdersByMarketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified. Default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified. Default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned.\nDefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/orders/{orderID}": {
      "get": {
        "summary": "Get an Order by Market and OrderID",
        "operationId": "OrderByMarketAndID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderByMarketAndIdResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderID",
            "description": "Order identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Market",
        "operationId": "TradesByMarket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByMarketResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified. Default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified. Default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned.\nDefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/markets/{marketID}/trades/latest": {
      "get": {
        "summary": "Get latest Trade",
        "operationId": "LastTrade",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLastTradeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "marketID",
            "description": "Market identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/network/parameters": {
      "get": {
        "summary": "Get the network parameters",
        "operationId": "NetworkParameters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiNetworkParametersResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/fee/estimate": {
      "post": {
        "summary": "Get an estimate for the fee to be paid for a given order",
        "operationId": "EstimateFee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEstimateFeeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEstimateFeeRequest"
            }
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/margins/estimate": {
      "post": {
        "summary": "Get an estimate for the margin required for a new order",
        "operationId": "EstimateMargin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEstimateMarginResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiEstimateMarginRequest"
            }
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/prepare/amend": {
      "post": {
        "summary": "Prepare an amend order request",
        "operationId": "PrepareAmendOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareAmendOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAmendOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/prepare/cancel": {
      "post": {
        "summary": "Prepare a cancel order request",
        "operationId": "PrepareCancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareCancelOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCancelOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/prepare/submit": {
      "post": {
        "summary": "Prepare a submit order request",
        "operationId": "PrepareSubmitOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareSubmitOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSubmitOrderRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/orders/{orderID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Order",
        "operationId": "TradesByOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByOrderResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "orderID",
            "description": "Order identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/{orderID}/versions": {
      "get": {
        "summary": "Get all versions of the order by its orderID",
        "operationId": "OrderVersionsByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderVersionsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "orderID",
            "description": "Order identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified. Default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified. Default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned.\nDefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/orders/{reference}": {
      "get": {
        "summary": "Get an Order by Pending Order reference (UUID)",
        "operationId": "OrderByReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrderByReferenceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "reference",
            "description": "Unique reference. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties": {
      "get": {
        "summary": "Get a list of Parties",
        "operationId": "Parties",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartiesResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/prepare/withdraw": {
      "post": {
        "summary": "Request a withdrawal",
        "operationId": "PrepareWithdraw",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPrepareWithdrawResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPrepareWithdrawRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/parties/{partyID}": {
      "get": {
        "summary": "Get a Party by ID",
        "operationId": "PartyByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartyByIDResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "Party identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/accounts": {
      "get": {
        "summary": "Get a list of Accounts by Party",
        "operationId": "PartyAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPartyAccountsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "Party identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "description": "Market identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Account type. Required field.\n\n - ACCOUNT_TYPE_UNSPECIFIED: Default value.\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market.\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market.\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain margin funds for a party and each party will\nhave multiple margin accounts, one for each market they have traded in.\n\nMargin account funds will alter as margin requirements on positions change.\n - ACCOUNT_TYPE_GENERAL: General accounts contains general funds for a party. A party will\nhave multiple general accounts, one for each asset they want\nto trade with.\n\nGeneral accounts are where funds are initially deposited or withdrawn from.\nIt is also the account where funds are taken to fulfil fees and initial margin requirements.\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega.\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets.\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade.\nThese fees reward traders who provide the best priced liquidity that actually allows trading to take place.\n - ACCOUNT_TYPE_LOCK_WITHDRAW: This account is created to lock funds to be withdrawn by parties\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACCOUNT_TYPE_UNSPECIFIED",
              "ACCOUNT_TYPE_INSURANCE",
              "ACCOUNT_TYPE_SETTLEMENT",
              "ACCOUNT_TYPE_MARGIN",
              "ACCOUNT_TYPE_GENERAL",
              "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
              "ACCOUNT_TYPE_FEES_LIQUIDITY",
              "ACCOUNT_TYPE_FEES_MAKER",
              "ACCOUNT_TYPE_LOCK_WITHDRAW",
              "ACCOUNT_TYPE_BOND"
            ],
            "default": "ACCOUNT_TYPE_UNSPECIFIED"
          },
          {
            "name": "asset",
            "description": "Asset identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/markets/{marketID}/margin": {
      "get": {
        "summary": "Get Margin Levels by PartyID",
        "operationId": "MarginLevels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiMarginLevelsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "Party identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "description": "Market identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/orders": {
      "get": {
        "summary": "Get a list of Orders by Party",
        "operationId": "OrdersByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrdersByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "Party identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified. Default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified. Default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned.\nDefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/positions": {
      "get": {
        "summary": "Get a list of Positions by Party",
        "operationId": "PositionsByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPositionsByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "Party identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "description": "Market identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/proposals": {
      "get": {
        "summary": "Get governance data (proposals and votes) for proposals by party authoring them",
        "operationId": "GetProposalsByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetProposalsByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "Party identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "selectInState.value",
            "description": "Proposal state value.\n\n - STATE_UNSPECIFIED: Default value, always invalid.\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed.\n - STATE_OPEN: Proposal is open for voting.\n - STATE_PASSED: Proposal has gained enough support to be executed.\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements).\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level).\n - STATE_ENACTED: Proposal enacted.\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_FAILED",
              "STATE_OPEN",
              "STATE_PASSED",
              "STATE_REJECTED",
              "STATE_DECLINED",
              "STATE_ENACTED",
              "STATE_WAITING_FOR_NODE_VOTE"
            ],
            "default": "STATE_UNSPECIFIED"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/parties/{partyID}/trades": {
      "get": {
        "summary": "Get a list of Trades by Party",
        "operationId": "TradesByParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTradesByPartyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "Party identifier. Required field.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "marketID",
            "description": "Market identifier.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.skip",
            "description": "Skip the number of records specified. Default is 0.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "Limit the number of returned records to the value specified. Default is 50.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.descending",
            "description": "Descending reverses the order of the records returned.\nDefault is true, if false the results will be returned in ascending order.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/statistics": {
      "get": {
        "summary": "Get Statistics",
        "operationId": "Statistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/vegaStatistics"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/time": {
      "get": {
        "summary": "Get Time",
        "operationId": "GetVegaTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiVegaTimeResponse"
            }
          }
        },
        "tags": [
          "trading_data"
        ]
      }
    },
    "/transaction": {
      "post": {
        "summary": "Submit a signed transaction",
        "operationId": "SubmitTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSubmitTransactionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSubmitTransactionRequest"
            }
          }
        ],
        "tags": [
          "trading"
        ]
      }
    },
    "/withdrawals/party/{partyID}": {
      "get": {
        "summary": "Get withdrawals for a party",
        "operationId": "Withdrawals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiWithdrawalsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "partyID",
            "description": "The party to get the withdrawals for",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/withdrawals/{ID}": {
      "get": {
        "summary": "Get a withdrawal by its ID",
        "operationId": "Withdrawal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiWithdrawalResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "ID",
            "description": "The id of the withdrawal",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    },
    "/withdrawals/{withdrawalID}/approval/erc20": {
      "get": {
        "summary": "Get the bundle approval for an ERC20 withdrawal\nthese data are being used to bundle the call to the smart contract on the ethereum bridge",
        "operationId": "ERC20WithdrawalApproval",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiERC20WithdrawalApprovalResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "withdrawalID",
            "description": "The ID of the withdrawal",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "trading_data"
        ]
      }
    }
  },
  "definitions": {
    "OrderTimeInForce": {
      "type": "string",
      "enum": [
        "TIF_UNSPECIFIED",
        "TIF_GTC",
        "TIF_GTT",
        "TIF_IOC",
        "TIF_FOK",
        "TIF_GFA",
        "TIF_GFN"
      ],
      "default": "TIF_UNSPECIFIED",
      "description": "Time in Force for an order.\nSee [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.\n\n - TIF_UNSPECIFIED: Default value for TimeInForce, can be valid for an amend.\n - TIF_GTC: Good until cancelled.\n - TIF_GTT: Good until specified time.\n - TIF_IOC: Immediate or cancel.\n - TIF_FOK: Fill or kill.\n - TIF_GFA: good for auction\n - TIF_GFN: good for normal"
    },
    "ProposalState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_FAILED",
        "STATE_OPEN",
        "STATE_PASSED",
        "STATE_REJECTED",
        "STATE_DECLINED",
        "STATE_ENACTED",
        "STATE_WAITING_FOR_NODE_VOTE"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "Proposal state transition:\nOpen -\u003e\n  - Passed -\u003e Enacted.\n  - Passed -\u003e Failed.\n  - Declined\nRejected\nProposal can enter Failed state from any other state.\n\n - STATE_UNSPECIFIED: Default value, always invalid.\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed.\n - STATE_OPEN: Proposal is open for voting.\n - STATE_PASSED: Proposal has gained enough support to be executed.\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements).\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level).\n - STATE_ENACTED: Proposal enacted.\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal"
    },
    "VoteValue": {
      "type": "string",
      "enum": [
        "VALUE_UNSPECIFIED",
        "VALUE_NO",
        "VALUE_YES"
      ],
      "default": "VALUE_UNSPECIFIED",
      "description": "Vote value.\n\n - VALUE_UNSPECIFIED: Default value, always invalid.\n - VALUE_NO: A vote against the proposal.\n - VALUE_YES: A vote in favour of the proposal."
    },
    "apiAmendOrderRequest": {
      "type": "object",
      "properties": {
        "amendment": {
          "$ref": "#/definitions/vegaOrderAmendment",
          "description": "An order amendment."
        }
      },
      "description": "Request to amend an existing order."
    },
    "apiAssetByIDResponse": {
      "type": "object",
      "properties": {
        "asset": {
          "$ref": "#/definitions/vegaAsset",
          "description": "An asset record, if found."
        }
      },
      "description": "Response for an asset given an asset identifier."
    },
    "apiAssetsResponse": {
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAsset"
          },
          "description": "A list of 0 or more assets."
        }
      },
      "description": "Response for a list of all assets enabled on Vega."
    },
    "apiCancelOrderRequest": {
      "type": "object",
      "properties": {
        "cancellation": {
          "$ref": "#/definitions/vegaOrderCancellation",
          "description": "An order cancellation."
        }
      },
      "description": "Request to cancel an existing order."
    },
    "apiCandlesResponse": {
      "type": "object",
      "properties": {
        "candles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaCandle"
          },
          "description": "A list of 0 or more candles."
        }
      },
      "description": "Response for a list of candles for a market at an interval."
    },
    "apiDepositResponse": {
      "type": "object",
      "properties": {
        "deposit": {
          "$ref": "#/definitions/vegaDeposit",
          "title": "The deposit matching the ID from the request"
        }
      },
      "title": "A response for a deposit"
    },
    "apiDepositsResponse": {
      "type": "object",
      "properties": {
        "deposits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaDeposit"
          },
          "title": "The list of deposits for the specified party"
        }
      },
      "title": "The response for a list of deposits"
    },
    "apiERC20WithdrawalApprovalResponse": {
      "type": "object",
      "properties": {
        "assetSource": {
          "type": "string",
          "title": "The address of asset on ethereum"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be withdrawn"
        },
        "expiry": {
          "type": "string",
          "format": "int64",
          "title": "The expiry / until what time the request is valid"
        },
        "nonce": {
          "type": "string",
          "title": "The nonce, which is actually the internal reference for the withdrawal"
        },
        "signatures": {
          "type": "string",
          "title": "The signatures bundle as hex encoded data, forward by 0x\ne.g: 0x + sig1 + sig2 + ... + sixN"
        }
      },
      "title": "The response with all information required to bundle the call\nto finalize the withdrawal on the erc20 bridge\nfunction withdraw_asset(address asset_source, uint256 asset_id, uint256 amount, uint256 expiry, uint256 nonce, bytes memory signatures)"
    },
    "apiEstimateFeeRequest": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "Order to estimate fees for\nthe following fields in the order are required:\nMarketID (used to specify the fee factors)\nPrice (the price at which the order could trade)\nSize (the size at which the order could eventually trade)"
        }
      },
      "title": "Request to fetch the estimated fee if an order were to trade immediately"
    },
    "apiEstimateFeeResponse": {
      "type": "object",
      "properties": {
        "fee": {
          "$ref": "#/definitions/vegaFee",
          "title": "Summary of the estimated fees for this order if it were to trade now"
        }
      },
      "title": "Response to a EstimateFeeRequest, containing the estimated fees for a given order"
    },
    "apiEstimateMarginRequest": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "Order to estimate fees for"
        }
      },
      "title": "Request to fetch the estimated MarginLevels if an order were to trade immediately"
    },
    "apiEstimateMarginResponse": {
      "type": "object",
      "properties": {
        "marginLevels": {
          "$ref": "#/definitions/vegaMarginLevels",
          "title": "Summary of the estimated margins for this order if it were to trade now"
        }
      },
      "title": "Response to a EstimateMarginRequest, containing the estimated marginLevels for a given order"
    },
    "apiFeeInfrastructureAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          },
          "description": "A list of 0 or more infrastructure fee accounts."
        }
      },
      "description": "Response for a list of infrastructure fee accounts."
    },
    "apiGetNetworkParametersProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "description": "A list of 0 or more governance data."
        }
      },
      "description": "Response for a list of network parameter proposals."
    },
    "apiGetNewAssetProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "description": "A list of 0 or more governance data."
        }
      },
      "description": "Response for a list of new asset proposals."
    },
    "apiGetNewMarketProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "description": "A list of 0 or more governance data."
        }
      },
      "description": "Response for a list of new market proposals."
    },
    "apiGetNodeSignaturesAggregateResponse": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaNodeSignature"
          },
          "description": "A list of 0 or more signatures."
        }
      },
      "description": "Response to specify the identifier of the resource we want to retrieve aggregated signatures for."
    },
    "apiGetProposalByIDResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData",
          "description": "Governance data, if found."
        }
      },
      "description": "Response for a governance proposal given a proposal identifier."
    },
    "apiGetProposalByReferenceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/vegaGovernanceData",
          "description": "Governance data, if found."
        }
      },
      "description": "Response for a governance proposal given a proposal reference."
    },
    "apiGetProposalsByPartyResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "description": "A list of 0 or more governance data."
        }
      },
      "description": "Response for a list of proposals for a party."
    },
    "apiGetProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "description": "A list of 0 or more governance data."
        }
      },
      "description": "Response for a list of proposals."
    },
    "apiGetUpdateMarketProposalsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaGovernanceData"
          },
          "description": "A list of 0 or more governance data."
        }
      },
      "description": "Response for a list of update market proposals."
    },
    "apiGetVotesByPartyResponse": {
      "type": "object",
      "properties": {
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "description": "A list of 0 or more votes."
        }
      },
      "description": "Response for a list of votes for a party."
    },
    "apiLastTradeResponse": {
      "type": "object",
      "properties": {
        "trade": {
          "$ref": "#/definitions/vegaTrade",
          "description": "A trade, if found."
        }
      },
      "description": "Response for the latest trade that occurred on Vega for a given market."
    },
    "apiLiquidityProvisionsResponse": {
      "type": "object",
      "properties": {
        "liquidityProvisions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityProvision"
          }
        }
      },
      "title": "A response containing all of the\nvega liquidity provisions orders"
    },
    "apiMarginLevelsResponse": {
      "type": "object",
      "properties": {
        "marginLevels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarginLevels"
          },
          "description": "A list of 0 or more margin levels."
        }
      },
      "description": "Response for margin levels for a party."
    },
    "apiMarketAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          },
          "description": "A list of 0 or more accounts."
        }
      },
      "description": "Response for a list of accounts for a market."
    },
    "apiMarketByIDResponse": {
      "type": "object",
      "properties": {
        "market": {
          "$ref": "#/definitions/vegaMarket",
          "description": "A market, if found."
        }
      },
      "description": "Response for a market given a market identifier."
    },
    "apiMarketDataByIDResponse": {
      "type": "object",
      "properties": {
        "marketData": {
          "$ref": "#/definitions/vegaMarketData",
          "description": "Market data, if found."
        }
      },
      "description": "Response for market data for a market."
    },
    "apiMarketDepthResponse": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "description": "Market identifier."
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "description": "Zero or more price levels for the buy side of the market depth data."
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "description": "Zero or more price levels for the sell side of the market depth data."
        },
        "lastTrade": {
          "$ref": "#/definitions/vegaTrade",
          "description": "Last trade recorded on Vega at the time of retrieving the `MarketDepthResponse`."
        },
        "sequenceNumber": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence number incremented after each update"
        }
      },
      "description": "Response for the market depth/order book price levels on a market."
    },
    "apiMarketsDataResponse": {
      "type": "object",
      "properties": {
        "marketsData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarketData"
          },
          "description": "A list of 0 or more market data."
        }
      },
      "description": "Response for market data."
    },
    "apiMarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaMarket"
          },
          "description": "A list of 0 or more markets."
        }
      },
      "description": "Response for a list of markets on Vega."
    },
    "apiNetworkParametersResponse": {
      "type": "object",
      "properties": {
        "networkParameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaNetworkParameter"
          }
        }
      },
      "title": "A response containing all of the\nvega network parameters"
    },
    "apiObserveEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaBusEvent"
          },
          "title": "One or more events"
        }
      },
      "title": "Response to a subscribed stream of events from the Vega event bus"
    },
    "apiOptionalProposalState": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProposalState",
          "description": "Proposal state value."
        }
      },
      "description": "Optional proposal state."
    },
    "apiOrderByMarketAndIdResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "description": "An order, if found."
        }
      },
      "description": "Response for an order on a market given an order identifier."
    },
    "apiOrderByReferenceResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "description": "An order, if found."
        }
      },
      "description": "Response for an order given an order reference."
    },
    "apiOrderVersionsResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          },
          "description": "A list of 0 or more orders (list will contain the same order but with different versions, if it has been amended)."
        }
      },
      "description": "Response to a request for a list of all versions of an order."
    },
    "apiOrdersByMarketResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          },
          "description": "A list of 0 or more orders."
        }
      },
      "description": "Response for a list of orders for a market."
    },
    "apiOrdersByPartyResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          },
          "description": "A list of 0 or more orders."
        }
      },
      "description": "Response for a list of orders for a party."
    },
    "apiOrdersStream": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaOrder"
          },
          "description": "A list of 0 or more orders."
        }
      },
      "description": "A stream of orders."
    },
    "apiPagination": {
      "type": "object",
      "properties": {
        "skip": {
          "type": "string",
          "format": "uint64",
          "description": "Skip the number of records specified. Default is 0."
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "description": "Limit the number of returned records to the value specified. Default is 50."
        },
        "descending": {
          "type": "boolean",
          "format": "boolean",
          "description": "Descending reverses the order of the records returned.\nDefault is true, if false the results will be returned in ascending order."
        }
      },
      "description": "Pagination controls."
    },
    "apiPartiesResponse": {
      "type": "object",
      "properties": {
        "parties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaParty"
          },
          "description": "A list of 0 or more parties."
        }
      },
      "description": "Response to a request for a list of parties."
    },
    "apiPartyAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaAccount"
          },
          "description": "A list of 0 or more accounts."
        }
      },
      "description": "Response for a list of accounts for a party."
    },
    "apiPartyByIDResponse": {
      "type": "object",
      "properties": {
        "party": {
          "$ref": "#/definitions/vegaParty",
          "description": "A party, if found."
        }
      },
      "description": "Response for a party given a party identifier."
    },
    "apiPositionsByPartyResponse": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPosition"
          },
          "description": "A list of 0 or more positions."
        }
      },
      "description": "Response for a list of positions for a party."
    },
    "apiPrepareAmendOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte",
          "description": "blob is an encoded representation of the order amendment ready to sign using the Vega Wallet and then submit as a transaction."
        }
      },
      "description": "Response for preparing an order amendment."
    },
    "apiPrepareCancelOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte",
          "description": "blob is an encoded representation of the order cancellation ready to sign using the Vega Wallet and then submit as a transaction."
        }
      },
      "description": "Response for preparing an order cancellation."
    },
    "apiPrepareLiquidityProvisionRequest": {
      "type": "object",
      "properties": {
        "submission": {
          "$ref": "#/definitions/vegaLiquidityProvisionSubmission"
        }
      }
    },
    "apiPrepareLiquidityProvisionResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiPrepareProposalRequest": {
      "type": "object",
      "properties": {
        "partyID": {
          "type": "string",
          "description": "Party identifier. Required field."
        },
        "reference": {
          "type": "string",
          "description": "Unique reference."
        },
        "proposal": {
          "$ref": "#/definitions/vegaProposalTerms",
          "description": "Proposal terms. Required field."
        }
      },
      "description": "Request to prepare a governance proposal."
    },
    "apiPrepareProposalResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte",
          "description": "blob is an encoded representation of the proposal ready to sign using the Vega Wallet and then submit as a transaction."
        },
        "pendingProposal": {
          "$ref": "#/definitions/vegaProposal",
          "description": "A copy of the prepared proposal."
        }
      },
      "description": "Response to prepare a governance proposal."
    },
    "apiPrepareSubmitOrderResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte",
          "description": "blob is an encoded representation of the order submission ready to sign using the Vega Wallet and then submit as a transaction."
        },
        "submitID": {
          "type": "string",
          "description": "Submission identifier (order reference)."
        }
      },
      "description": "Response for preparing an order submission."
    },
    "apiPrepareVoteRequest": {
      "type": "object",
      "properties": {
        "vote": {
          "$ref": "#/definitions/vegaVote",
          "description": "Vote. Required field."
        }
      },
      "description": "Request to prepare a governance vote."
    },
    "apiPrepareVoteResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte",
          "description": "blob is an encoded representation of the vote ready to sign using the Vega Wallet and then submit as a transaction."
        },
        "vote": {
          "$ref": "#/definitions/vegaVote",
          "description": "A copy of the prepared vote."
        }
      },
      "description": "Response to prepare a governance vote."
    },
    "apiPrepareWithdrawRequest": {
      "type": "object",
      "properties": {
        "withdraw": {
          "$ref": "#/definitions/vegaWithdrawSubmission",
          "description": "An asset withdrawal."
        }
      },
      "description": "Request for preparing a withdrawal."
    },
    "apiPrepareWithdrawResponse": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "format": "byte",
          "description": "blob is an encoded representation of the withdrawal ready to sign using the Vega Wallet and then submit as a transaction."
        }
      },
      "description": "Response for preparing a withdrawal."
    },
    "apiPropagateChainEventResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean",
          "description": "Success will be true if the event was accepted by the node.\nImportant - success does not mean that the event is confirmed by consensus."
        }
      },
      "description": "Response for a new event sent by the blockchain queue to be propagated on Vega."
    },
    "apiSubmitOrderRequest": {
      "type": "object",
      "properties": {
        "submission": {
          "$ref": "#/definitions/vegaOrderSubmission",
          "description": "An order submission."
        }
      },
      "description": "Request to submit a new order."
    },
    "apiSubmitTransactionRequest": {
      "type": "object",
      "properties": {
        "tx": {
          "$ref": "#/definitions/vegaSignedBundle",
          "description": "A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain."
        }
      },
      "description": "Request for submitting a transaction on Vega."
    },
    "apiSubmitTransactionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean",
          "description": "Success will be true if the transaction was accepted by the node.\nImportant - success does not mean that the transaction is confirmed by consensus."
        }
      },
      "description": "Response for submitting a transaction on Vega."
    },
    "apiTradesByMarketResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          },
          "description": "A list of 0 or more trades."
        }
      },
      "description": "Response for a list of trades on a market."
    },
    "apiTradesByOrderResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          },
          "description": "A list of 0 or more trades."
        }
      },
      "description": "Response for a list of trades related to an order."
    },
    "apiTradesByPartyResponse": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          },
          "description": "A list of 0 or more trades."
        }
      },
      "description": "Response for a list of trades relating to a party."
    },
    "apiTradesStream": {
      "type": "object",
      "properties": {
        "trades": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTrade"
          },
          "description": "A list of 0 or more trades."
        }
      },
      "description": "A stream of trades."
    },
    "apiVegaTimeResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp representation of current VegaTime.\nNanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`"
        }
      },
      "description": "Response for the current consensus coordinated time on the Vega network, referred to as \"VegaTime\"."
    },
    "apiWithdrawalResponse": {
      "type": "object",
      "properties": {
        "withdrawal": {
          "$ref": "#/definitions/vegaWithdrawal",
          "title": "The withdrawal matching the ID from the request"
        }
      },
      "title": "A response for a withdrawal"
    },
    "apiWithdrawalsResponse": {
      "type": "object",
      "properties": {
        "withdrawals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaWithdrawal"
          },
          "title": "The list of withdrawals for the specified party"
        }
      },
      "title": "The response for a list of withdrawals"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique account identifier (used internally by Vega)."
        },
        "owner": {
          "type": "string",
          "description": "The party that the account belongs to. Special values include `network`, which represents the Vega network and is\nmost commonly seen during liquidation of distressed trading positions."
        },
        "balance": {
          "type": "string",
          "format": "uint64",
          "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places. Balances cannot be negative."
        },
        "asset": {
          "type": "string",
          "description": "Asset identifier for the account."
        },
        "marketID": {
          "type": "string",
          "description": "Market identifier for the account. If [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty."
        },
        "type": {
          "$ref": "#/definitions/vegaAccountType",
          "description": "The account type related to this account."
        }
      },
      "description": "Represents an account for an asset on Vega for a particular owner or party."
    },
    "vegaAccountType": {
      "type": "string",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_INSURANCE",
        "ACCOUNT_TYPE_SETTLEMENT",
        "ACCOUNT_TYPE_MARGIN",
        "ACCOUNT_TYPE_GENERAL",
        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
        "ACCOUNT_TYPE_FEES_LIQUIDITY",
        "ACCOUNT_TYPE_FEES_MAKER",
        "ACCOUNT_TYPE_LOCK_WITHDRAW",
        "ACCOUNT_TYPE_BOND"
      ],
      "default": "ACCOUNT_TYPE_UNSPECIFIED",
      "description": "Various collateral/account types as used by Vega.\n\n - ACCOUNT_TYPE_UNSPECIFIED: Default value.\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market.\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market.\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain margin funds for a party and each party will\nhave multiple margin accounts, one for each market they have traded in.\n\nMargin account funds will alter as margin requirements on positions change.\n - ACCOUNT_TYPE_GENERAL: General accounts contains general funds for a party. A party will\nhave multiple general accounts, one for each asset they want\nto trade with.\n\nGeneral accounts are where funds are initially deposited or withdrawn from.\nIt is also the account where funds are taken to fulfil fees and initial margin requirements.\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega.\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets.\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade.\nThese fees reward traders who provide the best priced liquidity that actually allows trading to take place.\n - ACCOUNT_TYPE_LOCK_WITHDRAW: This account is created to lock funds to be withdrawn by parties\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments"
    },
    "vegaAddValidator": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/vegaIdentifier",
          "description": "The identifier of the validator."
        }
      },
      "description": "A message to notify when a new validator is being added to the Vega network."
    },
    "vegaAsset": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "Internal identifier of the asset."
        },
        "name": {
          "type": "string",
          "description": "Name of the asset (e.g: Great British Pound)."
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the asset (e.g: GBP)."
        },
        "totalSupply": {
          "type": "string",
          "description": "Total circulating supply for the asset."
        },
        "decimals": {
          "type": "string",
          "format": "uint64",
          "description": "Number of decimals / precision handled by this asset."
        },
        "source": {
          "$ref": "#/definitions/vegaAssetSource",
          "title": "The definition of the external source for this asset"
        }
      },
      "description": "The Vega representation of an external asset."
    },
    "vegaAssetSource": {
      "type": "object",
      "properties": {
        "builtinAsset": {
          "$ref": "#/definitions/vegaBuiltinAsset",
          "description": "A built-in asset."
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20",
          "description": "An Ethereum ERC20 asset."
        }
      },
      "description": "Asset source definition."
    },
    "vegaAuctionDuration": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "int64",
          "description": "Duration of the auction in seconds."
        },
        "volume": {
          "type": "string",
          "format": "uint64",
          "description": "Target uncrossing trading volume."
        }
      },
      "description": "An auction duration is used to configure 3 auction periods:\n1. `duration \u003e 0`, `volume == 0`:\n  The auction will last for at least N seconds.\n2. `duration == 0`, `volume \u003e 0`:\n  The auction will end once we can close with given traded volume.\n3. `duration \u003e 0`, `volume \u003e 0`:\n  The auction will take at least N seconds, but can end sooner if we can trade a certain volume."
    },
    "vegaAuctionEvent": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "openingAuction": {
          "type": "boolean",
          "format": "boolean",
          "title": "True if the event indicates an auction opening and False otherwise"
        },
        "leave": {
          "type": "boolean",
          "format": "boolean",
          "title": "True if the event indicates leaving auction mode and False otherwise"
        },
        "start": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing the start time for an auction"
        },
        "end": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing the end time for an auction"
        },
        "trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "the reason this market is/was in auction"
        }
      },
      "title": "An auction event indicating a change in auction state, for example starting or ending an auction"
    },
    "vegaAuctionTrigger": {
      "type": "string",
      "enum": [
        "AUCTION_TRIGGER_UNSPECIFIED",
        "AUCTION_TRIGGER_BATCH",
        "AUCTION_TRIGGER_OPENING",
        "AUCTION_TRIGGER_PRICE",
        "AUCTION_TRIGGER_LIQUIDITY"
      ],
      "default": "AUCTION_TRIGGER_UNSPECIFIED",
      "description": "- AUCTION_TRIGGER_UNSPECIFIED: No auction triggered\n - AUCTION_TRIGGER_BATCH: Batch auction\n - AUCTION_TRIGGER_OPENING: Opening auction\n - AUCTION_TRIGGER_PRICE: Price monitoring trigger\n - AUCTION_TRIGGER_LIQUIDITY: liquidity monitoring trigger",
      "title": "What triggered an auction (if any)"
    },
    "vegaBTCDeposit": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "description": "The Vega network internal identifier of the asset."
        },
        "sourceBTCAddress": {
          "type": "string",
          "description": "The BTC wallet initiating the deposit."
        },
        "targetPartyId": {
          "type": "string",
          "description": "The Vega party identifier (pub-key) which is the target of the deposit."
        }
      },
      "description": "A Bitcoin deposit into Vega."
    },
    "vegaBTCEvent": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64",
          "description": "The index of the transaction."
        },
        "block": {
          "type": "string",
          "format": "uint64",
          "description": "The block in which the transaction happened."
        },
        "deposit": {
          "$ref": "#/definitions/vegaBTCDeposit",
          "description": "Deposit BTC asset."
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaBTCWithdrawal",
          "description": "Withdraw BTC asset."
        }
      },
      "description": "An event from the Bitcoin network."
    },
    "vegaBTCWithdrawal": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "description": "The vega network internal identifier of the asset."
        },
        "sourcePartyId": {
          "type": "string",
          "description": "The party identifier (pub-key) initiating the withdrawal."
        },
        "targetBTCAddress": {
          "type": "string",
          "description": "Target Bitcoin wallet address."
        },
        "referenceNonce": {
          "type": "string",
          "description": "The nonce reference of the transaction."
        }
      },
      "description": "A Bitcoin withdrawal from Vega."
    },
    "vegaBitcoinAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "A Bitcoin address."
        }
      },
      "description": "Used as a wrapper for a Bitcoin address (wallet)."
    },
    "vegaBuiltinAsset": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the asset (e.g: Great British Pound)."
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the asset (e.g: GBP)."
        },
        "totalSupply": {
          "type": "string",
          "description": "Total circulating supply for the asset."
        },
        "decimals": {
          "type": "string",
          "format": "uint64",
          "description": "Number of decimal / precision handled by this asset."
        },
        "maxFaucetAmountMint": {
          "type": "string",
          "description": "Maximum amount that can be requested by a party through the built-in asset faucet at a time."
        }
      },
      "description": "A Vega internal asset."
    },
    "vegaBuiltinAssetDeposit": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "description": "A Vega network internal asset identifier."
        },
        "partyID": {
          "type": "string",
          "title": "A Vega party identifier (pub-key)"
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "The amount to be deposited."
        }
      },
      "description": "A deposit for a Vega built-in asset."
    },
    "vegaBuiltinAssetEvent": {
      "type": "object",
      "properties": {
        "deposit": {
          "$ref": "#/definitions/vegaBuiltinAssetDeposit",
          "description": "Built-in asset deposit."
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaBuiltinAssetWithdrawal",
          "description": "Built-in asset withdrawal."
        }
      },
      "description": "An event related to a Vega built-in asset."
    },
    "vegaBuiltinAssetWithdrawal": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "description": "A Vega network internal asset identifier."
        },
        "partyID": {
          "type": "string",
          "title": "A Vega network party identifier (pub-key)"
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "The amount to be withdrawn."
        }
      },
      "description": "A withdrawal for a Vega built-in asset."
    },
    "vegaBusEvent": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "title": "A unique event identifier for the message"
        },
        "block": {
          "type": "string",
          "title": "The batch (or block) of transactions that the events relate to"
        },
        "type": {
          "$ref": "#/definitions/vegaBusEventType",
          "title": "The type of bus event (one of the list below)"
        },
        "timeUpdate": {
          "$ref": "#/definitions/vegaTimeUpdate",
          "title": "Time update events, see [TimeUpdate](#vega.TimeUpdate)"
        },
        "transferResponses": {
          "$ref": "#/definitions/vegaTransferResponses",
          "title": "Transfer responses update events, see [TransferResponses](#vega.TransferResponses)"
        },
        "positionResolution": {
          "$ref": "#/definitions/vegaPositionResolution",
          "title": "Position resolution events, see [PositionResolution](#vega.PositionResolution)"
        },
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "Order events"
        },
        "account": {
          "$ref": "#/definitions/vegaAccount",
          "title": "Account events"
        },
        "party": {
          "$ref": "#/definitions/vegaParty",
          "title": "Party events"
        },
        "trade": {
          "$ref": "#/definitions/vegaTrade",
          "title": "Trade events"
        },
        "marginLevels": {
          "$ref": "#/definitions/vegaMarginLevels",
          "title": "Margin level update events"
        },
        "proposal": {
          "$ref": "#/definitions/vegaProposal",
          "title": "Proposal events (for governance)"
        },
        "vote": {
          "$ref": "#/definitions/vegaVote",
          "title": "Vote events (for governance)"
        },
        "marketData": {
          "$ref": "#/definitions/vegaMarketData",
          "title": "Market data events"
        },
        "nodeSignature": {
          "$ref": "#/definitions/vegaNodeSignature",
          "title": "Node signature events"
        },
        "lossSocialization": {
          "$ref": "#/definitions/vegaLossSocialization",
          "title": "Loss socialization events, see [LossSocialization](#vega.LossSocialization)"
        },
        "settlePosition": {
          "$ref": "#/definitions/vegaSettlePosition",
          "title": "Position settlement events, see [SettlePosition](#vega.SettlePosition)"
        },
        "settleDistressed": {
          "$ref": "#/definitions/vegaSettleDistressed",
          "title": "Position distressed events, see [SettleDistressed](#vega.SettleDistressed)"
        },
        "marketCreated": {
          "$ref": "#/definitions/vegaMarket",
          "title": "Market created events"
        },
        "asset": {
          "$ref": "#/definitions/vegaAsset",
          "title": "Asset events"
        },
        "marketTick": {
          "$ref": "#/definitions/vegaMarketTick",
          "title": "Market tick events, see [MarketTick](#vega.MarketTick)"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaWithdrawal",
          "title": "Withdrawal events"
        },
        "deposit": {
          "$ref": "#/definitions/vegaDeposit",
          "title": "Deposit events"
        },
        "auction": {
          "$ref": "#/definitions/vegaAuctionEvent",
          "title": "Auction events, see [AuctionEvent](#vega.AuctionEvent)"
        },
        "riskFactor": {
          "$ref": "#/definitions/vegaRiskFactor",
          "title": "Risk factor events"
        },
        "networkParameter": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "Network parameter events"
        },
        "liquidityProvision": {
          "$ref": "#/definitions/vegaLiquidityProvision",
          "title": "LiquidityProvision  events"
        },
        "market": {
          "$ref": "#/definitions/vegaMarketEvent",
          "title": "Market tick events, see [MarketEvent](#vega.MarketEvent)"
        },
        "txErrEvent": {
          "$ref": "#/definitions/vegaTxErrorEvent",
          "title": "Transaction error events - separate category, not included in ALL events"
        }
      },
      "title": "A bus event is a container for event bus events emitted by Vega"
    },
    "vegaBusEventType": {
      "type": "string",
      "enum": [
        "BUS_EVENT_TYPE_UNSPECIFIED",
        "BUS_EVENT_TYPE_ALL",
        "BUS_EVENT_TYPE_TIME_UPDATE",
        "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
        "BUS_EVENT_TYPE_POSITION_RESOLUTION",
        "BUS_EVENT_TYPE_ORDER",
        "BUS_EVENT_TYPE_ACCOUNT",
        "BUS_EVENT_TYPE_PARTY",
        "BUS_EVENT_TYPE_TRADE",
        "BUS_EVENT_TYPE_MARGIN_LEVELS",
        "BUS_EVENT_TYPE_PROPOSAL",
        "BUS_EVENT_TYPE_VOTE",
        "BUS_EVENT_TYPE_MARKET_DATA",
        "BUS_EVENT_TYPE_NODE_SIGNATURE",
        "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
        "BUS_EVENT_TYPE_SETTLE_POSITION",
        "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
        "BUS_EVENT_TYPE_MARKET_CREATED",
        "BUS_EVENT_TYPE_ASSET",
        "BUS_EVENT_TYPE_MARKET_TICK",
        "BUS_EVENT_TYPE_WITHDRAWAL",
        "BUS_EVENT_TYPE_DEPOSIT",
        "BUS_EVENT_TYPE_AUCTION",
        "BUS_EVENT_TYPE_RISK_FACTOR",
        "BUS_EVENT_TYPE_NETWORK_PARAMETER",
        "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
        "BUS_EVENT_TYPE_MARKET",
        "BUS_EVENT_TYPE_TX_ERROR"
      ],
      "default": "BUS_EVENT_TYPE_UNSPECIFIED",
      "description": "- BUS_EVENT_TYPE_UNSPECIFIED: Default value, always invalid\n - BUS_EVENT_TYPE_ALL: Events of ALL event types, used when filtering stream from event bus\n - BUS_EVENT_TYPE_TIME_UPDATE: Event for blockchain time updates\n - BUS_EVENT_TYPE_TRANSFER_RESPONSES: Event for when a transfer happens internally, contains the transfer information\n - BUS_EVENT_TYPE_POSITION_RESOLUTION: Event indicating position resolution has occurred\n - BUS_EVENT_TYPE_ORDER: Event for order updates, both new and existing orders\n - BUS_EVENT_TYPE_ACCOUNT: Event for account updates\n - BUS_EVENT_TYPE_PARTY: Event for party updates\n - BUS_EVENT_TYPE_TRADE: Event indicating a new trade has occurred\n - BUS_EVENT_TYPE_MARGIN_LEVELS: Event indicating margin levels have changed for a party\n - BUS_EVENT_TYPE_PROPOSAL: Event for proposal updates (for governance)\n - BUS_EVENT_TYPE_VOTE: Event indicating a new vote has occurred (for governance)\n - BUS_EVENT_TYPE_MARKET_DATA: Event for market data updates\n - BUS_EVENT_TYPE_NODE_SIGNATURE: Event for a new signature for a Vega node\n - BUS_EVENT_TYPE_LOSS_SOCIALIZATION: Event indicating loss socialisation occurred for a party\n - BUS_EVENT_TYPE_SETTLE_POSITION: Event for when a position is being settled\n - BUS_EVENT_TYPE_SETTLE_DISTRESSED: Event for when a position is distressed\n - BUS_EVENT_TYPE_MARKET_CREATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ASSET: Event for when an asset is added to Vega\n - BUS_EVENT_TYPE_MARKET_TICK: Event indicating a market tick event\n - BUS_EVENT_TYPE_WITHDRAWAL: Event for when a withdrawal occurs\n - BUS_EVENT_TYPE_DEPOSIT: Event for when a deposit occurs\n - BUS_EVENT_TYPE_AUCTION: Event indicating a change in auction state, for example starting or ending an auction\n - BUS_EVENT_TYPE_RISK_FACTOR: Event indicating a risk factor has been updated\n - BUS_EVENT_TYPE_NETWORK_PARAMETER: Event indicating a network parameter has been added or updated\n - BUS_EVENT_TYPE_LIQUIDITY_PROVISION: Event indicating a liquidity provision has been created or updated\n - BUS_EVENT_TYPE_MARKET: Event indicating a market related event, for example when a market opens\n - BUS_EVENT_TYPE_TX_ERROR: Event used to report failed transactions back to a user - excluded from the ALL type",
      "title": "An (event) bus event type is used to specify a type of event\nIt has 2 styles of event:\nSingle values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item\nGroup values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items"
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for the point in time when the candle was initially created/opened, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "datetime": {
          "type": "string",
          "description": "An ISO-8601 datetime with nanosecond precision for when the candle was last updated."
        },
        "high": {
          "type": "string",
          "format": "uint64",
          "description": "Highest price for trading during the candle interval."
        },
        "low": {
          "type": "string",
          "format": "uint64",
          "description": "Lowest price for trading during the candle interval."
        },
        "open": {
          "type": "string",
          "format": "uint64",
          "description": "Open trade price."
        },
        "close": {
          "type": "string",
          "format": "uint64",
          "description": "Closing trade price."
        },
        "volume": {
          "type": "string",
          "format": "uint64",
          "description": "Total trading volume during the candle interval."
        },
        "interval": {
          "$ref": "#/definitions/vegaInterval",
          "description": "Time interval for the candle. See [`Interval`](#vega.Interval)."
        }
      },
      "description": "Represents the high, low, open, and closing prices for an interval of trading,\nreferred to commonly as a candlestick or candle."
    },
    "vegaChainEvent": {
      "type": "object",
      "properties": {
        "txID": {
          "type": "string",
          "description": "The identifier of the transaction in which the events happened, usually a hash."
        },
        "nonce": {
          "type": "string",
          "format": "uint64",
          "description": "Arbitrary one-time integer used to prevent replay attacks."
        },
        "builtin": {
          "$ref": "#/definitions/vegaBuiltinAssetEvent",
          "description": "Built-in asset event."
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20Event",
          "description": "Ethereum ERC20 event."
        },
        "btc": {
          "$ref": "#/definitions/vegaBTCEvent",
          "description": "Bitcoin BTC event."
        },
        "validator": {
          "$ref": "#/definitions/vegaValidatorEvent",
          "description": "Validator event."
        }
      },
      "description": "An event forwarded to the Vega network to provide information on events happening on other networks."
    },
    "vegaChainStatus": {
      "type": "string",
      "enum": [
        "CHAIN_STATUS_UNSPECIFIED",
        "CHAIN_STATUS_DISCONNECTED",
        "CHAIN_STATUS_REPLAYING",
        "CHAIN_STATUS_CONNECTED"
      ],
      "default": "CHAIN_STATUS_UNSPECIFIED",
      "description": "The Vega blockchain status as reported by the node the caller is connected to.\n\n - CHAIN_STATUS_UNSPECIFIED: Default value, always invalid.\n - CHAIN_STATUS_DISCONNECTED: Blockchain is disconnected.\n - CHAIN_STATUS_REPLAYING: Blockchain is replaying historic transactions.\n - CHAIN_STATUS_CONNECTED: Blockchain is connected and receiving transactions."
    },
    "vegaContinuousTrading": {
      "type": "object",
      "properties": {
        "tickSize": {
          "type": "string",
          "description": "Tick size."
        }
      },
      "description": "Continuous trading."
    },
    "vegaDeposit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The ID of the deposit"
        },
        "status": {
          "$ref": "#/definitions/vegaDepositStatus",
          "title": "Status of the deposit"
        },
        "partyID": {
          "type": "string",
          "title": "The party initiating the deposit"
        },
        "asset": {
          "type": "string",
          "title": "The vega asset targeted by this deposit"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be deposited"
        },
        "txHash": {
          "type": "string",
          "title": "The hash of the transaction from the foreign chain"
        },
        "creditedTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "The time where the vega account got updated with the deposit"
        },
        "createdTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "The time the deposit has been created in the vega network"
        }
      },
      "title": "The representation of a deposit in the vega network"
    },
    "vegaDepositStatus": {
      "type": "string",
      "enum": [
        "DEPOSIT_STATUS_UNSPECIFIED",
        "DEPOSIT_STATUS_OPEN",
        "DEPOSIT_STATUS_CANCELLED",
        "DEPOSIT_STATUS_FINALIZED"
      ],
      "default": "DEPOSIT_STATUS_UNSPECIFIED",
      "description": "- DEPOSIT_STATUS_UNSPECIFIED: Default value, always invalid.\n - DEPOSIT_STATUS_OPEN: The deposit is being processed by the network\n - DEPOSIT_STATUS_CANCELLED: The deposit has been cancelled by the network\n - DEPOSIT_STATUS_FINALIZED: The deposit has been finalized and accounts have been updated",
      "title": "The status of the deposit"
    },
    "vegaDiscreteTrading": {
      "type": "object",
      "properties": {
        "durationNs": {
          "type": "string",
          "format": "int64",
          "title": "Duration in nanoseconds, maximum 1 month (2592000000000000 ns)"
        },
        "tickSize": {
          "type": "string",
          "description": "Tick size."
        }
      },
      "description": "Discrete trading."
    },
    "vegaERC20": {
      "type": "object",
      "properties": {
        "contractAddress": {
          "type": "string",
          "title": "The address of the contract for the token, on the ethereum network"
        }
      },
      "description": "An ERC20 token based asset, living on the ethereum network."
    },
    "vegaERC20AssetDelist": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "description": "The Vega network internal identifier of the asset."
        }
      },
      "description": "An asset black-listing for an ERC20 token."
    },
    "vegaERC20AssetList": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "description": "The Vega network internal identifier of the asset."
        }
      },
      "description": "An asset white-listing for an ERC20 token."
    },
    "vegaERC20Deposit": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "description": "The vega network internal identifier of the asset."
        },
        "sourceEthereumAddress": {
          "type": "string",
          "description": "The Ethereum wallet that initiated the deposit."
        },
        "targetPartyID": {
          "type": "string",
          "description": "The Vega party identifier (pub-key) which is the target of the deposit."
        }
      },
      "description": "An asset deposit for an ERC20 token."
    },
    "vegaERC20Event": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "Index of the transaction"
        },
        "block": {
          "type": "string",
          "format": "uint64",
          "title": "The block in which the transaction was added"
        },
        "assetList": {
          "$ref": "#/definitions/vegaERC20AssetList",
          "description": "List an ERC20 asset."
        },
        "assetDelist": {
          "$ref": "#/definitions/vegaERC20AssetDelist",
          "description": "De-list an ERC20 asset."
        },
        "deposit": {
          "$ref": "#/definitions/vegaERC20Deposit",
          "description": "Deposit ERC20 asset."
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaERC20Withdrawal",
          "description": "Withdraw ERC20 asset."
        }
      },
      "description": "An event related to an ERC20 token."
    },
    "vegaERC20Withdrawal": {
      "type": "object",
      "properties": {
        "vegaAssetID": {
          "type": "string",
          "description": "The Vega network internal identifier of the asset."
        },
        "targetEthereumAddress": {
          "type": "string",
          "description": "The target Ethereum wallet address."
        },
        "referenceNonce": {
          "type": "string",
          "description": "The reference nonce used for the transaction."
        }
      },
      "description": "An asset withdrawal for an ERC20 token."
    },
    "vegaErc20WithdrawExt": {
      "type": "object",
      "properties": {
        "receiverAddress": {
          "type": "string",
          "title": "The address into which the bridge will release the funds"
        }
      },
      "title": "An extension of data required for the withdraw submissions"
    },
    "vegaEthereumAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "An Ethereum address."
        }
      },
      "description": "Used as a wrapper for an Ethereum address (wallet/contract)."
    },
    "vegaEthereumEvent": {
      "type": "object",
      "properties": {
        "contractID": {
          "type": "string",
          "description": "Ethereum contract identifier."
        },
        "event": {
          "type": "string",
          "description": "Event."
        },
        "value": {
          "type": "string",
          "format": "uint64",
          "description": "Value."
        }
      },
      "description": "Ethereum event (for oracles)."
    },
    "vegaFee": {
      "type": "object",
      "properties": {
        "makerFee": {
          "type": "string",
          "format": "uint64",
          "description": "Fee amount paid to the non-aggressive party of the trade."
        },
        "infrastructureFee": {
          "type": "string",
          "format": "uint64",
          "description": "Fee amount paid for maintaining the Vega infrastructure."
        },
        "liquidityFee": {
          "type": "string",
          "format": "uint64",
          "description": "Fee amount paid to market makers."
        }
      },
      "description": "Represents any fees paid by a party, resulting from a trade."
    },
    "vegaFeeFactors": {
      "type": "object",
      "properties": {
        "makerFee": {
          "type": "string",
          "description": "Maker fee."
        },
        "infrastructureFee": {
          "type": "string",
          "description": "Infrastructure fee."
        },
        "liquidityFee": {
          "type": "string",
          "description": "Liquidity fee."
        }
      },
      "description": "Fee factors definition."
    },
    "vegaFees": {
      "type": "object",
      "properties": {
        "factors": {
          "$ref": "#/definitions/vegaFeeFactors",
          "description": "Fee factors."
        }
      },
      "description": "Fees definition."
    },
    "vegaFuture": {
      "type": "object",
      "properties": {
        "maturity": {
          "type": "string",
          "description": "The maturity for the future."
        },
        "asset": {
          "type": "string",
          "description": "The asset for the future."
        },
        "ethereumEvent": {
          "$ref": "#/definitions/vegaEthereumEvent",
          "description": "Ethereum events."
        }
      },
      "description": "Future product definition."
    },
    "vegaFutureProduct": {
      "type": "object",
      "properties": {
        "maturity": {
          "type": "string",
          "description": "Future product maturity (ISO8601/RFC3339 timestamp)."
        },
        "asset": {
          "type": "string",
          "description": "Product asset name."
        }
      },
      "description": "Future product configuration."
    },
    "vegaGovernanceData": {
      "type": "object",
      "properties": {
        "proposal": {
          "$ref": "#/definitions/vegaProposal",
          "description": "Proposal."
        },
        "yes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "description": "All \"yes\" votes in favour of the proposal above."
        },
        "no": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVote"
          },
          "description": "All \"no\" votes against the proposal above."
        },
        "yesParty": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All latest YES votes by party (guaranteed to be unique).\nkey (string) is the party ID (public key)\nvalue (Vote) is the vote cast by the given party"
        },
        "noParty": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/vegaVote"
          },
          "title": "All latest NO votes by party (guaranteed to be unique).\nkey (string) is the party ID (public key)\nvalue (Vote) is the vote cast by the given party"
        }
      },
      "description": "Governance data."
    },
    "vegaIdentifier": {
      "type": "object",
      "properties": {
        "ethereumAddress": {
          "$ref": "#/definitions/vegaEthereumAddress",
          "description": "Ethereum network."
        },
        "bitcoinAddress": {
          "$ref": "#/definitions/vegaBitcoinAddress",
          "description": "Bitcoin network."
        }
      },
      "description": "Used as a wrapper type on any possible network address supported by Vega."
    },
    "vegaInstrument": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Instrument identifier."
        },
        "code": {
          "type": "string",
          "description": "Code for the instrument."
        },
        "name": {
          "type": "string",
          "description": "Name of the instrument."
        },
        "quoteName": {
          "type": "string",
          "description": "Quote name of the instrument."
        },
        "metadata": {
          "$ref": "#/definitions/vegaInstrumentMetadata",
          "description": "A collection of instrument meta-data."
        },
        "initialMarkPrice": {
          "type": "string",
          "format": "uint64",
          "description": "An initial mark price for the instrument."
        },
        "future": {
          "$ref": "#/definitions/vegaFuture",
          "description": "Future."
        }
      },
      "description": "Instrument definition."
    },
    "vegaInstrumentConfiguration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Instrument name."
        },
        "code": {
          "type": "string",
          "description": "Instrument code."
        },
        "quoteName": {
          "type": "string",
          "description": "Quote (secondary) security."
        },
        "future": {
          "$ref": "#/definitions/vegaFutureProduct",
          "description": "Futures."
        }
      },
      "description": "Instrument configuration."
    },
    "vegaInstrumentMetadata": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of 0 or more tags."
        }
      },
      "description": "Instrument metadata definition."
    },
    "vegaInterval": {
      "type": "string",
      "enum": [
        "INTERVAL_UNSPECIFIED",
        "INTERVAL_I1M",
        "INTERVAL_I5M",
        "INTERVAL_I15M",
        "INTERVAL_I1H",
        "INTERVAL_I6H",
        "INTERVAL_I1D"
      ],
      "default": "INTERVAL_UNSPECIFIED",
      "description": "Represents a set of time intervals that are used when querying for candle-stick data.\n\n - INTERVAL_UNSPECIFIED: Default value, always invalid.\n - INTERVAL_I1M: 1 minute.\n - INTERVAL_I5M: 5 minutes.\n - INTERVAL_I15M: 15 minutes.\n - INTERVAL_I1H: 1 hour.\n - INTERVAL_I6H: 6 hours.\n - INTERVAL_I1D: 1 day."
    },
    "vegaLedgerEntry": {
      "type": "object",
      "properties": {
        "fromAccount": {
          "type": "string",
          "description": "One or more accounts to transfer from."
        },
        "toAccount": {
          "type": "string",
          "description": "One or more accounts to transfer to."
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "description": "An amount to transfer."
        },
        "reference": {
          "type": "string",
          "description": "A reference for auditing purposes."
        },
        "type": {
          "type": "string",
          "description": "Type of ledger entry."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        }
      },
      "description": "Represents a ledger entry on Vega."
    },
    "vegaLiquidityOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference"
        },
        "proportion": {
          "type": "integer",
          "format": "int64"
        },
        "offset": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaLiquidityOrderReference": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "title": "The ID of the pegged order generated by the core to fullfill this liquidityOrder"
        },
        "liquidityOrder": {
          "$ref": "#/definitions/vegaLiquidityOrder",
          "title": "The liquidity order from the original submission"
        }
      },
      "title": "A pair of a liquidity order and the id of the generated order by the core"
    },
    "vegaLiquidityProvision": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "LiquidityProvision identifier"
        },
        "partyID": {
          "type": "string",
          "title": "Party who created the provision"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for when the order was created at, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for when the order was updated at, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "marketID": {
          "type": "string",
          "description": "Market identifier for the order. Required field."
        },
        "commitmentAmount": {
          "type": "string",
          "format": "uint64",
          "description": "Specified as a unitless number that represents the amount of settlement asset of the market."
        },
        "fee": {
          "type": "string",
          "description": "nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers."
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrderReference"
          },
          "description": "a set of liquidity sell orders to meet the liquidity provision obligation, see MM orders spec."
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrderReference"
          },
          "description": "a set of liquidity buy orders to meet the liquidity provision obligation, see MM orders spec."
        },
        "version": {
          "type": "string",
          "title": "version of this LiquidityProvision order"
        },
        "status": {
          "$ref": "#/definitions/vegaLiquidityProvisionStatus",
          "title": "the status of this liquidity provision"
        }
      },
      "title": "An Liquidity provider commitment"
    },
    "vegaLiquidityProvisionStatus": {
      "type": "string",
      "enum": [
        "LIQUIDITY_PROVISION_STATUS_UNSPECIFIED",
        "LIQUIDITY_PROVISION_STATUS_ACTIVE",
        "LIQUIDITY_PROVISION_STATUS_STOPPED",
        "LIQUIDITY_PROVISION_STATUS_CANCELLED"
      ],
      "default": "LIQUIDITY_PROVISION_STATUS_UNSPECIFIED",
      "description": "- LIQUIDITY_PROVISION_STATUS_UNSPECIFIED: The default value\n - LIQUIDITY_PROVISION_STATUS_ACTIVE: The liquidity provision is active\n - LIQUIDITY_PROVISION_STATUS_STOPPED: The liquidity provision was stopped by the network\n - LIQUIDITY_PROVISION_STATUS_CANCELLED: The liquidity provision was cancelled by the MM.",
      "title": "the status of a liquidity provision order"
    },
    "vegaLiquidityProvisionSubmission": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "description": "Market identifier for the order. Required field."
        },
        "commitmentAmount": {
          "type": "string",
          "format": "uint64",
          "description": "Specified as a unitless number that represents the amount of settlement asset of the market."
        },
        "fee": {
          "type": "string",
          "description": "nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per seeting fees and rewarding liquidity providers."
        },
        "Sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "description": "a set of liquidity sell orders to meet the liquidity provision obligation, see MM orders spec."
        },
        "Buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "description": "a set of liquidity buy orders to meet the liquidity provision obligation, see MM orders spec."
        }
      }
    },
    "vegaLogNormalModelParams": {
      "type": "object",
      "properties": {
        "mu": {
          "type": "number",
          "format": "double",
          "description": "Mu param."
        },
        "r": {
          "type": "number",
          "format": "double",
          "description": "R param."
        },
        "sigma": {
          "type": "number",
          "format": "double",
          "description": "Sigma param."
        }
      },
      "description": "Risk model parameters for log normal."
    },
    "vegaLogNormalRiskModel": {
      "type": "object",
      "properties": {
        "riskAversionParameter": {
          "type": "number",
          "format": "double",
          "description": "Risk Aversion Parameter."
        },
        "tau": {
          "type": "number",
          "format": "double",
          "description": "Tau."
        },
        "params": {
          "$ref": "#/definitions/vegaLogNormalModelParams",
          "description": "Risk model parameters for log normal."
        }
      },
      "description": "Risk model for log normal."
    },
    "vegaLossSocialization": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "partyID": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "Amount distributed"
        }
      },
      "title": "A loss socialization event contains details on the amount of wins unable to be distributed"
    },
    "vegaMarginCalculator": {
      "type": "object",
      "properties": {
        "scalingFactors": {
          "$ref": "#/definitions/vegaScalingFactors",
          "description": "Scaling factors for margin calculation."
        }
      },
      "description": "Margin Calculator definition."
    },
    "vegaMarginLevels": {
      "type": "object",
      "properties": {
        "maintenanceMargin": {
          "type": "string",
          "format": "uint64",
          "description": "Maintenance margin value."
        },
        "searchLevel": {
          "type": "string",
          "format": "uint64",
          "description": "Search level value."
        },
        "initialMargin": {
          "type": "string",
          "format": "uint64",
          "description": "Initial margin value."
        },
        "collateralReleaseLevel": {
          "type": "string",
          "format": "uint64",
          "description": "Collateral release level value."
        },
        "partyID": {
          "type": "string",
          "description": "Party identifier."
        },
        "marketID": {
          "type": "string",
          "description": "Market identifier."
        },
        "asset": {
          "type": "string",
          "description": "Asset identifier."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        }
      },
      "description": "Represents the margin levels for a party on a market at a given time."
    },
    "vegaMarket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier."
        },
        "tradableInstrument": {
          "$ref": "#/definitions/vegaTradableInstrument",
          "description": "Tradable instrument configuration."
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "Number of decimal places that a price must be shifted by in order to get a\ncorrect price denominated in the currency of the market. For example:\n`realPrice = price / 10^decimalPlaces`"
        },
        "fees": {
          "$ref": "#/definitions/vegaFees",
          "description": "Fees configuration."
        },
        "openingAuction": {
          "$ref": "#/definitions/vegaAuctionDuration",
          "description": "Auction duration specifies how long the opening auction will run (minimum\nduration and optionally a minimum traded volume)."
        },
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading",
          "description": "Continuous."
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading",
          "description": "Discrete."
        },
        "priceMonitoringSettings": {
          "$ref": "#/definitions/vegaPriceMonitoringSettings",
          "description": "PriceMonitoringSettings for the market."
        }
      },
      "description": "Market definition."
    },
    "vegaMarketData": {
      "type": "object",
      "properties": {
        "markPrice": {
          "type": "string",
          "format": "uint64",
          "description": "Mark price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places."
        },
        "bestBidPrice": {
          "type": "string",
          "format": "uint64",
          "description": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places."
        },
        "bestBidVolume": {
          "type": "string",
          "format": "uint64",
          "description": "Aggregated volume being bid at the best bid price."
        },
        "bestOfferPrice": {
          "type": "string",
          "format": "uint64",
          "description": "Lowest price level on an order book for offer orders."
        },
        "bestOfferVolume": {
          "type": "string",
          "format": "uint64",
          "description": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly\n // formatted price of `1.23456` assuming market configured to 5 decimal places."
        },
        "midPrice": {
          "type": "string",
          "format": "uint64",
          "description": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly\n // formatted price of `1.23456` assuming market configured to 5 decimal places."
        },
        "market": {
          "type": "string",
          "description": "Market identifier for the data."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "openInterest": {
          "type": "string",
          "format": "uint64",
          "description": "The sum of the size of all positions greater than 0 on the market."
        },
        "auctionEnd": {
          "type": "string",
          "format": "int64",
          "description": "Time in seconds until the end of the auction (0 if currently not in auction period)."
        },
        "auctionStart": {
          "type": "string",
          "format": "int64",
          "description": "Time until next auction (used in FBA's) - currently always 0."
        },
        "indicativePrice": {
          "type": "string",
          "format": "uint64",
          "title": "indicative price (zero if not in auction)"
        },
        "indicativeVolume": {
          "type": "string",
          "format": "uint64",
          "title": "indicative volume (zero if not in auction)"
        },
        "marketState": {
          "$ref": "#/definitions/vegaMarketState",
          "title": "the current state of the market"
        },
        "trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "if the market is in auction state, this field indicates what triggered the auction"
        },
        "targetStake": {
          "type": "string",
          "title": "the targeted stake for the given market"
        },
        "suppliedStake": {
          "type": "string",
          "title": "the available stake fo the given market"
        }
      },
      "description": "Represents data generated by a market when open."
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "description": "Market identifier."
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "description": "Collection of price levels for the buy side of the book."
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "description": "Collection of price levels for the sell side of the book."
        },
        "sequenceNumber": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence number for the market depth dump"
        }
      },
      "description": "Represents market depth or order book data for the specified market on Vega."
    },
    "vegaMarketDepthUpdate": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "description": "Market identifier."
        },
        "buy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "description": "Collection of updated price levels for the buy side of the book."
        },
        "sell": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceLevel"
          },
          "description": "Collection of updated price levels for the sell side of the book."
        },
        "sequenceNumber": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence number for the market depth update"
        }
      },
      "title": "Represents the changed market depth since the last update"
    },
    "vegaMarketEvent": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "payload": {
          "type": "string",
          "description": "Payload is a unique information string."
        }
      },
      "title": "MarketEvent - the common denominator for all market events\ninterface has a method to return a string for logging"
    },
    "vegaMarketState": {
      "type": "string",
      "enum": [
        "MARKET_STATE_UNSPECIFIED",
        "MARKET_STATE_CONTINUOUS",
        "MARKET_STATE_BATCH_AUCTION",
        "MARKET_STATE_OPENING_AUCTION",
        "MARKET_STATE_MONITORING_AUCTION"
      ],
      "default": "MARKET_STATE_UNSPECIFIED",
      "description": "What mode is the market currently running, also known as market state.\n\n - MARKET_STATE_UNSPECIFIED: Default value, this is invalid\n - MARKET_STATE_CONTINUOUS: Normal trading\n - MARKET_STATE_BATCH_AUCTION: Auction trading (FBA)\n - MARKET_STATE_OPENING_AUCTION: Opening auction\n - MARKET_STATE_MONITORING_AUCTION: Auction triggered by monitoring"
    },
    "vegaMarketTick": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "time": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing latest update from Vega blockchain aka Vega-time"
        }
      },
      "title": "A market ticket event contains the time value for when a particular market was last processed on Vega"
    },
    "vegaNetworkParameter": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "vegaNewAsset": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaAssetSource",
          "description": "Asset configuration."
        }
      },
      "description": "New asset on Vega."
    },
    "vegaNewMarket": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNewMarketConfiguration",
          "description": "Configuration."
        }
      },
      "description": "New market on Vega."
    },
    "vegaNewMarketConfiguration": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrumentConfiguration",
          "description": "New market instrument configuration."
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64",
          "description": "Decimal places used for the new market."
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional new market meta data, tags."
        },
        "openingAuctionDuration": {
          "type": "string",
          "format": "int64",
          "description": "Time duration for the opening auction to last."
        },
        "PriceMonitoringParameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "price monitoring configuration"
        },
        "simple": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
        },
        "logNormal": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
        },
        "continuous": {
          "$ref": "#/definitions/vegaContinuousTrading",
          "description": "Continuous trading."
        },
        "discrete": {
          "$ref": "#/definitions/vegaDiscreteTrading",
          "description": "Discrete trading."
        }
      },
      "description": "Configuration for a new market on Vega."
    },
    "vegaNodeSignature": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "The identifier of the resource being signed."
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "description": "The signature."
        },
        "kind": {
          "$ref": "#/definitions/vegaNodeSignatureKind",
          "description": "The kind of resource being signed."
        }
      },
      "description": "Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network."
    },
    "vegaNodeSignatureKind": {
      "type": "string",
      "enum": [
        "NODE_SIGNATURE_KIND_UNSPECIFIED",
        "NODE_SIGNATURE_KIND_ASSET_NEW",
        "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL"
      ],
      "default": "NODE_SIGNATURE_KIND_UNSPECIFIED",
      "description": "The kind of the signature created by a node, for example, whitelisting a new asset, withdrawal etc.\n\n - NODE_SIGNATURE_KIND_UNSPECIFIED: represents a unspecified / missing value from the input\n - NODE_SIGNATURE_KIND_ASSET_NEW: represents a signature for a new asset whitelisting\n - NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL: represents a signature for a asset withdrawal"
    },
    "vegaOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order (set by the system after consensus)."
        },
        "marketID": {
          "type": "string",
          "description": "Market identifier for the order."
        },
        "partyID": {
          "type": "string",
          "description": "Party identifier for the order."
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side)."
        },
        "price": {
          "type": "string",
          "format": "uint64",
          "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places."
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "description": "Size for the order, for example, in a futures market the size equals the number of contracts."
        },
        "remaining": {
          "type": "string",
          "format": "uint64",
          "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED."
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce",
          "description": "Time in force indicates how long an order will remain active before it is executed or expires.\nSee [`Order.TimeInForce`](#vega.Order.TimeInForce)."
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "description": "Type for the order. See [`Order.Type`](#vega.Order.Type)."
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for when the order was created at, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "status": {
          "$ref": "#/definitions/vegaOrderStatus",
          "description": "The current status for the order. See [`Order.Status`](#vega.Order.Status).\nFor detail on `STATUS_REJECTED` please check the [`OrderError`](#vega.OrderError) value given in the `reason` field."
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for when the order will expire, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`. Valid only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIF_GTT`."
        },
        "reference": {
          "type": "string",
          "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus. Currently\nset internally by the node to return a unique reference identifier for the order submission."
        },
        "reason": {
          "$ref": "#/definitions/vegaOrderError",
          "description": "If the Order `status` is `STATUS_REJECTED` then an [`OrderError`](#vega.OrderError) reason will be specified.\nThe default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors."
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for when the Order was last updated, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "The version for the order, initial value is version 1 and is incremented after each successful amend"
        },
        "batchID": {
          "type": "string",
          "format": "uint64",
          "description": "Batch identifier for the order, used internally for orders submitted during auctions\nto keep track of the auction batch this order falls under (required for fees calculation)."
        },
        "peggedOrder": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "title": "If this order represents a pegged order, the details are supplied here"
        }
      },
      "description": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties."
    },
    "vegaOrderAmendment": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "description": "Order identifier, this is required to find the order and will not be updated. Required field."
        },
        "marketID": {
          "type": "string",
          "description": "Market identifier, this is required to find the order and will not be updated."
        },
        "price": {
          "$ref": "#/definitions/vegaPrice",
          "description": "Amend the price for the order, if the Price value is set, otherwise price will remain unchanged. See [`Price`](#vega.Price)."
        },
        "sizeDelta": {
          "type": "string",
          "format": "int64",
          "description": "Amend the size for the order by the delta specified.\nTo reduce the size from the current value set a negative integer value.\nTo increase the size from the current value, set a positive integer value.\nTo leave the size unchanged set a value of zero."
        },
        "expiresAt": {
          "$ref": "#/definitions/vegaTimestamp",
          "description": "Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce",
          "description": "Amend the time in force for the order, set to TIF_UNSPECIFIED to remain unchanged.\nSee [`TimeInForce`](#api.VegaTimeResponse).`timestamp`."
        }
      },
      "description": "An order amendment is a request to amend or update an existing order on Vega."
    },
    "vegaOrderCancellation": {
      "type": "object",
      "properties": {
        "orderID": {
          "type": "string",
          "title": "Unique identifier for the order (set by the system after consensus)"
        },
        "marketID": {
          "type": "string",
          "title": "Market identifier for the order"
        }
      },
      "description": "An order cancellation is a request to cancel an existing order on Vega."
    },
    "vegaOrderError": {
      "type": "string",
      "enum": [
        "ORDER_ERROR_NONE",
        "ORDER_ERROR_INVALID_MARKET_ID",
        "ORDER_ERROR_INVALID_ORDER_ID",
        "ORDER_ERROR_OUT_OF_SEQUENCE",
        "ORDER_ERROR_INVALID_REMAINING_SIZE",
        "ORDER_ERROR_TIME_FAILURE",
        "ORDER_ERROR_REMOVAL_FAILURE",
        "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
        "ORDER_ERROR_INVALID_ORDER_REFERENCE",
        "ORDER_ERROR_EDIT_NOT_ALLOWED",
        "ORDER_ERROR_AMEND_FAILURE",
        "ORDER_ERROR_NOT_FOUND",
        "ORDER_ERROR_INVALID_PARTY_ID",
        "ORDER_ERROR_MARKET_CLOSED",
        "ORDER_ERROR_MARGIN_CHECK_FAILED",
        "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
        "ORDER_ERROR_INTERNAL_ERROR",
        "ORDER_ERROR_INVALID_SIZE",
        "ORDER_ERROR_INVALID_PERSISTENCE",
        "ORDER_ERROR_INVALID_TYPE",
        "ORDER_ERROR_SELF_TRADING",
        "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
        "ORDER_ERROR_INCORRECT_MARKET_TYPE",
        "ORDER_ERROR_INVALID_TIME_IN_FORCE",
        "ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION",
        "ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING",
        "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
        "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
        "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
        "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
        "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
        "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
        "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
        "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
        "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
        "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
        "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
        "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
        "ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO",
        "ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO",
        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
        "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
        "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
        "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER"
      ],
      "default": "ORDER_ERROR_NONE",
      "description": "OrderError codes are returned in the `[Order](#vega.Order).reason` field.\nIf there is an issue with an order during it's life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`.\n\n - ORDER_ERROR_NONE: Default value, no error reported.\n - ORDER_ERROR_INVALID_MARKET_ID: Order was submitted for a market that does not exist.\n - ORDER_ERROR_INVALID_ORDER_ID: Order was submitted with an invalid identifier.\n - ORDER_ERROR_OUT_OF_SEQUENCE: Order was amended with a sequence number that was not previous version + 1.\n - ORDER_ERROR_INVALID_REMAINING_SIZE: Order was amended with an invalid remaining size (e.g. remaining greater than total size).\n - ORDER_ERROR_TIME_FAILURE: Node was unable to get Vega (blockchain) time.\n - ORDER_ERROR_REMOVAL_FAILURE: Failed to remove an order from the book.\n - ORDER_ERROR_INVALID_EXPIRATION_DATETIME: An order with `TimeInForce.TIF_GTT` was submitted or amended\nwith an expiration that was badly formatted or otherwise invalid.\n - ORDER_ERROR_INVALID_ORDER_REFERENCE: Order was submitted or amended with an invalid reference field.\n - ORDER_ERROR_EDIT_NOT_ALLOWED: Order amend was submitted for an order field that cannot not be amended (e.g. order identifier).\n - ORDER_ERROR_AMEND_FAILURE: Amend failure because amend details do not match original order.\n - ORDER_ERROR_NOT_FOUND: Order not found in an order book or store.\n - ORDER_ERROR_INVALID_PARTY_ID: Order was submitted with an invalid or missing party identifier.\n - ORDER_ERROR_MARKET_CLOSED: Order was submitted for a market that has closed.\n - ORDER_ERROR_MARGIN_CHECK_FAILED: Order was submitted, but the party did not have enough collateral to cover the order.\n - ORDER_ERROR_MISSING_GENERAL_ACCOUNT: Order was submitted, but the party did not have an account for this asset.\n - ORDER_ERROR_INTERNAL_ERROR: Unspecified internal error.\n - ORDER_ERROR_INVALID_SIZE: Order was submitted with an invalid or missing size (e.g. 0).\n - ORDER_ERROR_INVALID_PERSISTENCE: Order was submitted with an invalid persistence for its type.\n - ORDER_ERROR_INVALID_TYPE: Order was submitted with an invalid type field.\n - ORDER_ERROR_SELF_TRADING: Order was stopped as it would have traded with another order submitted from the same party.\n - ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES: Order was submitted, but the party did not have enough collateral to cover the fees for the order.\n - ORDER_ERROR_INCORRECT_MARKET_TYPE: Order was submitted with an incorrect or invalid market type.\n - ORDER_ERROR_INVALID_TIME_IN_FORCE: Order was submitted with invalid time in force\n - ORDER_ERROR_GFN_ORDER_DURING_AN_AUCTION: A GFN order has got to the market when it is in auction mode\n - ORDER_ERROR_GFA_ORDER_DURING_CONTINUOUS_TRADING: A GFA order has got to the market when it is in continuous trading mode\n - ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT: Attempt to amend order to GTT without ExpiryAt\n - ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT: Attempt to amend ExpiryAt to a value before CreatedAt\n - ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT: Attempt to amend to GTC without an ExpiryAt value\n - ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC: Amending to FOK or IOC is invalid\n - ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN: Amending to GFA or GFN is invalid\n - ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN: Amending from GFA or GFN is invalid\n - ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION: IOC orders are not allowed during auction\n - ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION: FOK orders are not allowed during auction\n - ORDER_ERROR_MUST_BE_LIMIT_ORDER: Pegged orders must be LIMIT orders\n - ORDER_ERROR_MUST_BE_GTT_OR_GTC: Pegged orders can only have TIF GTC or GTT\n - ORDER_ERROR_WITHOUT_REFERENCE_PRICE: Pegged order must have a reference price\n - ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE: Buy pegged order cannot reference best ask price\n - ORDER_ERROR_OFFSET_MUST_BE_LESS_OR_EQUAL_TO_ZERO: Pegged order offset must be \u003c= 0\n - ORDER_ERROR_OFFSET_MUST_BE_LESS_THAN_ZERO: Pegged order offset must be \u003c 0\n - ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO: Pegged order offset must be \u003e= 0\n - ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE: Sell pegged order cannot reference best bid price\n - ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO: Pegged order offset must be \u003e zero\n - ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE: The party have an insufficient balance, or don't have\na general account to submit the order (no deposits made\nfor the required asset).\n - ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER: We are unable to reprice a pegged order because a market price is unavailable"
    },
    "vegaOrderStatus": {
      "type": "string",
      "enum": [
        "STATUS_INVALID",
        "STATUS_ACTIVE",
        "STATUS_EXPIRED",
        "STATUS_CANCELLED",
        "STATUS_STOPPED",
        "STATUS_FILLED",
        "STATUS_REJECTED",
        "STATUS_PARTIALLY_FILLED",
        "STATUS_PARKED"
      ],
      "default": "STATUS_INVALID",
      "description": "Status values for an order.\nSee resulting status in [What order types are available to trade on Vega?](https://docs.vega.xyz/docs/trading-questions/#what-order-types-are-available-to-trade-on-vega) for more detail.\n\n - STATUS_INVALID: Default value, always invalid.\n - STATUS_ACTIVE: Used for active unfilled or partially filled orders.\n - STATUS_EXPIRED: Used for expired GTT orders.\n - STATUS_CANCELLED: Used for orders cancelled by the party that created the order.\n - STATUS_STOPPED: Used for unfilled FOK or IOC orders, and for orders that were stopped by the network.\n - STATUS_FILLED: Used for closed fully filled orders.\n - STATUS_REJECTED: Used for orders when not enough collateral was available to fill the margin requirements.\n - STATUS_PARTIALLY_FILLED: Used for closed partially filled IOC orders.\n - STATUS_PARKED: The order ha been removed from the book and has been parked, applies to pegged order only"
    },
    "vegaOrderSubmission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order (set by the system after consensus)."
        },
        "marketID": {
          "type": "string",
          "description": "Market identifier for the order. Required field."
        },
        "price": {
          "type": "string",
          "format": "uint64",
          "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places.\nRequired field for Limit orders, however it is not required for market orders."
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "description": "Size for the order, for example, in a futures market the size equals the number of contracts. Cannot be negative."
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "description": "Side for the order, e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side). Required field."
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce",
          "description": "Time in force indicates how long an order will remain active before it is executed or expires.\nSee [`Order.TimeInForce`](#vega.Order.TimeInForce). Required field."
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for when the order will expire, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`.\nRequired field only for [`Order.TimeInForce`](#vega.Order.TimeInForce)`.TIF_GTT`."
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "description": "Type for the order. See [`Order.Type`](#vega.Order.Type). Required field."
        },
        "reference": {
          "type": "string",
          "description": "Reference given for the order, this is typically used to retrieve an order submitted through consensus. Currently\nset internally by the node to return a unique reference identifier for the order submission."
        },
        "peggedOrder": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "title": "Pegged order details. If this sub message is supplied then the fields are used to configure a pegged order"
        }
      },
      "description": "An order submission is a request to submit or create a new order on Vega."
    },
    "vegaOrderType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LIMIT",
        "TYPE_MARKET",
        "TYPE_NETWORK"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Type values for an order.\n\n - TYPE_UNSPECIFIED: Default value, always invalid.\n - TYPE_LIMIT: Used for Limit orders.\n - TYPE_MARKET: Used for Market orders.\n - TYPE_NETWORK: Used for orders where the initiating party is the network (with distressed traders)."
    },
    "vegaParty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for the party, typically represented by a public key."
        }
      },
      "description": "A party represents an entity who wishes to trade on or query a Vega network."
    },
    "vegaPeggedOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "Which price point are we linked to"
        },
        "offset": {
          "type": "string",
          "format": "int64",
          "title": "Offset from the price reference"
        }
      }
    },
    "vegaPeggedReference": {
      "type": "string",
      "enum": [
        "PEGGED_REFERENCE_UNSPECIFIED",
        "PEGGED_REFERENCE_MID",
        "PEGGED_REFERENCE_BEST_BID",
        "PEGGED_REFERENCE_BEST_ASK"
      ],
      "default": "PEGGED_REFERENCE_UNSPECIFIED",
      "description": "- PEGGED_REFERENCE_UNSPECIFIED: No reference given\n - PEGGED_REFERENCE_MID: MID price\n - PEGGED_REFERENCE_BEST_BID: BEST BID price\n - PEGGED_REFERENCE_BEST_ASK: BEST ASK price",
      "title": "Which price point is the pegged order linked to"
    },
    "vegaPosition": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "description": "Market identifier."
        },
        "partyID": {
          "type": "string",
          "description": "Party identifier."
        },
        "openVolume": {
          "type": "string",
          "format": "int64",
          "description": "Open volume for the position. Value is signed +ve for long and -ve for short."
        },
        "realisedPNL": {
          "type": "string",
          "format": "int64",
          "description": "Realised profit and loss for the position. Value is signed +ve for long and -ve for short."
        },
        "unrealisedPNL": {
          "type": "string",
          "format": "int64",
          "description": "Unrealised profit and loss for the position. Value is signed +ve for long and -ve for short."
        },
        "averageEntryPrice": {
          "type": "string",
          "format": "uint64",
          "description": "Average entry price for the position, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places."
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "last time the position was updated"
        }
      },
      "description": "Represents position data for a party on the specified market on Vega."
    },
    "vegaPositionResolution": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "distressed": {
          "type": "string",
          "format": "int64",
          "title": "Number of distressed traders"
        },
        "closed": {
          "type": "string",
          "format": "int64",
          "title": "Number of close outs"
        },
        "markPrice": {
          "type": "string",
          "format": "uint64",
          "title": "Mark price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        }
      },
      "title": "A position resolution event contains information on distressed trades"
    },
    "vegaPrice": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "uint64",
          "description": "Price value, given as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places."
        }
      }
    },
    "vegaPriceLevel": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "format": "uint64",
          "description": "Price for the price level, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places."
        },
        "numberOfOrders": {
          "type": "string",
          "format": "uint64",
          "description": "Number of orders at the price level."
        },
        "volume": {
          "type": "string",
          "format": "uint64",
          "description": "Volume at the price level."
        }
      },
      "description": "Represents a price level from market depth or order book data."
    },
    "vegaPriceMonitoringParameters": {
      "type": "object",
      "properties": {
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceMonitoringTrigger"
          }
        }
      },
      "description": "PriceMonitoringParameters contain a collection of triggers to be used for a given market."
    },
    "vegaPriceMonitoringSettings": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Specifies PriceMonitoringParameters to be used for price monitoring purposes"
        },
        "updateFrequency": {
          "type": "string",
          "format": "int64",
          "description": "Specifies how often (expressed in seconds) the price monitoring bounds should be updated."
        }
      }
    },
    "vegaPriceMonitoringTrigger": {
      "type": "object",
      "properties": {
        "horizon": {
          "type": "string",
          "format": "int64",
          "description": "Price monitoring projection horizon τ in seconds."
        },
        "probability": {
          "type": "number",
          "format": "double",
          "description": "Price monitoirng probability level p."
        },
        "auctionExtension": {
          "type": "string",
          "format": "int64",
          "description": "Price monitoring auction extension duration in seconds should the price\nbreach it's theoretical level over the specified horizon at the specified\nprobability level."
        }
      },
      "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
    },
    "vegaProposal": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string",
          "description": "Unique proposal identifier."
        },
        "reference": {
          "type": "string",
          "description": "Proposal reference."
        },
        "partyID": {
          "type": "string",
          "description": "Party identifier of the author (the party submitting the proposal)."
        },
        "state": {
          "$ref": "#/definitions/ProposalState",
          "description": "Proposal state (see (Proposal.State)[#vega.Proposal.State] definition)."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network."
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "description": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted."
        },
        "reason": {
          "$ref": "#/definitions/vegaProposalError",
          "description": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses."
        }
      },
      "description": "Governance proposal."
    },
    "vegaProposalError": {
      "type": "string",
      "enum": [
        "PROPOSAL_ERROR_UNSPECIFIED",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
        "PROPOSAL_ERROR_NO_PRODUCT",
        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP",
        "PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED",
        "PROPOSAL_ERROR_NO_TRADING_MODE",
        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
        "PROPOSAL_ERROR_INVALID_ASSET",
        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE"
      ],
      "default": "PROPOSAL_ERROR_UNSPECIFIED",
      "description": "A list of possible errors that can cause a proposal to be in state rejected or failed.\n\n - PROPOSAL_ERROR_UNSPECIFIED: Default value.\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON: The specified close time is too early base on network parameters.\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE: The specified close time is too late based on network parameters.\n - PROPOSAL_ERROR_ENACT_TIME_TOO_SOON: The specified enact time is too early based on network parameters.\n - PROPOSAL_ERROR_ENACT_TIME_TOO_LATE: The specified enact time is too late based on network parameters.\n - PROPOSAL_ERROR_INSUFFICIENT_TOKENS: The proposer for this proposal as insufficient tokens.\n - PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY: The instrument quote name and base name were the same.\n - PROPOSAL_ERROR_NO_PRODUCT: The proposal has no product.\n - PROPOSAL_ERROR_UNSUPPORTED_PRODUCT: The specified product is not supported.\n - PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT_TIMESTAMP: Invalid future maturity timestamp (expect RFC3339).\n - PROPOSAL_ERROR_PRODUCT_MATURITY_IS_PASSED: The product maturity is past.\n - PROPOSAL_ERROR_NO_TRADING_MODE: The proposal has no trading mode.\n - PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE: The proposal has an unsupported trading mode.\n - PROPOSAL_ERROR_NODE_VALIDATION_FAILED: The proposal failed node validation.\n - PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD: A field is missing in a builtin asset source.\n - PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS: The contract address is missing in the ERC20 asset source.\n - PROPOSAL_ERROR_INVALID_ASSET: The asset id refer to no assets in vega.\n - PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS: Proposal terms timestamps are not compatible (Validation \u003c Closing \u003c Enactment).\n - PROPOSAL_ERROR_NO_RISK_PARAMETERS: No risk parameteres were specified\n - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY: Invalid key in update network parameter proposal\n - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE: Invalid valid in update network parameter proposal\n - PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED: Validation failed for network parameter proposal\n - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL: Opening auction duration is less than the network minimum opening auction time\n - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE: Opening auction duration is more than the network minimum opening auction time"
    },
    "vegaProposalTerms": {
      "type": "object",
      "properties": {
        "closingTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (Unix time in seconds) when voting closes for this proposal.\nConstrained by `minCloseInSeconds` and `maxCloseInSeconds` network parameters."
        },
        "enactmentTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed).\nConstrained by `minEnactInSeconds` and `maxEnactInSeconds` network parameters."
        },
        "validationTimestamp": {
          "type": "string",
          "format": "int64",
          "description": "Validation timestamp (Unix time in seconds)."
        },
        "updateMarket": {
          "$ref": "#/definitions/vegaUpdateMarket",
          "description": "Proposal change for modifying an existing market on Vega."
        },
        "newMarket": {
          "$ref": "#/definitions/vegaNewMarket",
          "description": "Proposal change for creating new market on Vega."
        },
        "updateNetworkParameter": {
          "$ref": "#/definitions/vegaUpdateNetworkParameter",
          "description": "Proposal change for updating Vega network parameters."
        },
        "newAsset": {
          "$ref": "#/definitions/vegaNewAsset",
          "description": "Proposal change for creating new assets on Vega."
        }
      },
      "description": "Terms for a governance proposal on Vega."
    },
    "vegaRemoveValidator": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/vegaIdentifier",
          "description": "The identifier of the validator."
        }
      },
      "description": "A message to notify when a validator is being removed from the Vega network."
    },
    "vegaRiskFactor": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string",
          "description": "Market ID that relates to this risk factor."
        },
        "short": {
          "type": "number",
          "format": "double",
          "description": "Short Risk factor value."
        },
        "long": {
          "type": "number",
          "format": "double",
          "description": "Long Risk factor value."
        }
      },
      "description": "Risk factors are used to calculate the current risk associated with orders trading on a given market."
    },
    "vegaScalingFactors": {
      "type": "object",
      "properties": {
        "searchLevel": {
          "type": "number",
          "format": "double",
          "description": "Search level."
        },
        "initialMargin": {
          "type": "number",
          "format": "double",
          "description": "Initial margin level."
        },
        "collateralRelease": {
          "type": "number",
          "format": "double",
          "description": "Collateral release level."
        }
      },
      "description": "Scaling Factors (for use in margin calculation)."
    },
    "vegaSettleDistressed": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "partyID": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "margin": {
          "type": "string",
          "format": "uint64",
          "title": "Margin value as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "price": {
          "type": "string",
          "format": "uint64",
          "title": "Price as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        }
      },
      "title": "A settle distressed event contains information on distressed trading parties who are closed out"
    },
    "vegaSettlePosition": {
      "type": "object",
      "properties": {
        "marketID": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "partyID": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "price": {
          "type": "string",
          "format": "uint64",
          "title": "Price of settlement as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "tradeSettlements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTradeSettlement"
          },
          "title": "A collection of 1 or more trade settlements"
        }
      },
      "title": "A settle position event contains position settlement information for a party"
    },
    "vegaSide": {
      "type": "string",
      "enum": [
        "SIDE_UNSPECIFIED",
        "SIDE_BUY",
        "SIDE_SELL"
      ],
      "default": "SIDE_UNSPECIFIED",
      "description": "A side relates to the direction of an order, to Buy, or Sell.\n\n - SIDE_UNSPECIFIED: Default value, always invalid.\n - SIDE_BUY: Buy order.\n - SIDE_SELL: Sell order."
    },
    "vegaSignature": {
      "type": "object",
      "properties": {
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "The bytes of the signature"
        },
        "algo": {
          "type": "string",
          "title": "The algorithm used to create the signature"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "The version of the signature used to create the signature"
        }
      },
      "title": "A signature to be authenticate a transaction\nand to be verified by the vega network"
    },
    "vegaSignedBundle": {
      "type": "object",
      "properties": {
        "tx": {
          "type": "string",
          "format": "byte",
          "description": "Transaction payload (proto marshalled)."
        },
        "sig": {
          "$ref": "#/definitions/vegaSignature",
          "description": "The signature authenticating the transaction."
        }
      },
      "description": "A bundle of a transaction and it's signature."
    },
    "vegaSimpleModelParams": {
      "type": "object",
      "properties": {
        "factorLong": {
          "type": "number",
          "format": "double",
          "description": "Pre-defined risk factor value for long."
        },
        "factorShort": {
          "type": "number",
          "format": "double",
          "description": "Pre-defined risk factor value for short."
        },
        "maxMoveUp": {
          "type": "number",
          "format": "double",
          "description": "Pre-defined maximum price move up that the model considers as valid."
        },
        "minMoveDown": {
          "type": "number",
          "format": "double",
          "description": "Pre-defined minimum price move down that the model considers as valid."
        },
        "probabilityOfTrading": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined constant probability of trading"
        }
      },
      "description": "Risk model parameters for simple modelling."
    },
    "vegaSimpleRiskModel": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "description": "Risk model params for simple modelling."
        }
      },
      "description": "Risk model for simple modelling."
    },
    "vegaStatistics": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64",
          "description": "Current block height as reported by the Vega blockchain."
        },
        "backlogLength": {
          "type": "string",
          "format": "uint64",
          "description": "Current backlog length (number of transactions) that are waiting to be included in a block."
        },
        "totalPeers": {
          "type": "string",
          "format": "uint64",
          "description": "Total number of connected peers to this node."
        },
        "genesisTime": {
          "type": "string",
          "description": "Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision."
        },
        "currentTime": {
          "type": "string",
          "description": "Current system date and time formatted in ISO-8601 datetime format with nanosecond precision."
        },
        "vegaTime": {
          "type": "string",
          "description": "Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision."
        },
        "status": {
          "$ref": "#/definitions/vegaChainStatus",
          "description": "Status of the connection to the Vega blockchain.\nSee [`ChainStatus`](#vega.ChainStatus)."
        },
        "txPerBlock": {
          "type": "string",
          "format": "uint64",
          "description": "Transactions per block."
        },
        "averageTxBytes": {
          "type": "string",
          "format": "uint64",
          "description": "Average transaction size in bytes."
        },
        "averageOrdersPerBlock": {
          "type": "string",
          "format": "uint64",
          "description": "Average orders per block."
        },
        "tradesPerSecond": {
          "type": "string",
          "format": "uint64",
          "description": "Trades emitted per second."
        },
        "ordersPerSecond": {
          "type": "string",
          "format": "uint64",
          "description": "Orders affected per second."
        },
        "totalMarkets": {
          "type": "string",
          "format": "uint64",
          "description": "Total markets on this Vega network."
        },
        "totalAmendOrder": {
          "type": "string",
          "format": "uint64",
          "description": "Total number of order amendments since genesis (on all markets)."
        },
        "totalCancelOrder": {
          "type": "string",
          "format": "uint64",
          "description": "Total number of order cancellations since genesis (on all markets)."
        },
        "totalCreateOrder": {
          "type": "string",
          "format": "uint64",
          "description": "Total number of order submissions since genesis (on all markets)."
        },
        "totalOrders": {
          "type": "string",
          "format": "uint64",
          "description": "Total number of orders affected since genesis (on all markets)."
        },
        "totalTrades": {
          "type": "string",
          "format": "uint64",
          "description": "Total number of trades emitted since genesis (on all markets)."
        },
        "orderSubscriptions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of stream subscribers to order data."
        },
        "tradeSubscriptions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of stream subscribers to trade data."
        },
        "candleSubscriptions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of stream subscribers to candle-stick data."
        },
        "marketDepthSubscriptions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of stream subscribers to market depth data."
        },
        "positionsSubscriptions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of stream subscribers to positions data."
        },
        "accountSubscriptions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of stream subscribers to account data."
        },
        "marketDataSubscriptions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of stream subscribers to market data."
        },
        "appVersionHash": {
          "type": "string",
          "description": "The version hash of the Vega node software."
        },
        "appVersion": {
          "type": "string",
          "description": "The version of the Vega node software."
        },
        "chainVersion": {
          "type": "string",
          "description": "The version of the underlying Vega blockchain."
        },
        "blockDuration": {
          "type": "string",
          "format": "uint64",
          "description": "Current block duration, in nanoseconds."
        },
        "uptime": {
          "type": "string",
          "description": "Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision."
        },
        "chainID": {
          "type": "string",
          "description": "Unique identifier for the underlying Vega blockchain."
        },
        "marketDepthUpdatesSubscriptions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of stream subscribers to market depth update data."
        }
      },
      "description": "Vega domain specific statistics as reported by the node the caller is connected to."
    },
    "vegaTimeUpdate": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing latest update from Vega blockchain aka Vega-time"
        }
      },
      "title": "A time update event contains the latest time update from Vega blockchain"
    },
    "vegaTimestamp": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp value."
        }
      },
      "description": "A timestamp in nanoseconds since epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
    },
    "vegaTradableInstrument": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrument",
          "description": "Instrument details."
        },
        "marginCalculator": {
          "$ref": "#/definitions/vegaMarginCalculator",
          "description": "Margin calculator for the instrument."
        },
        "logNormalRiskModel": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "description": "Log normal."
        },
        "simpleRiskModel": {
          "$ref": "#/definitions/vegaSimpleRiskModel",
          "description": "Simple."
        }
      },
      "description": "Tradable Instrument definition."
    },
    "vegaTrade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the trade (generated by Vega)."
        },
        "marketID": {
          "type": "string",
          "description": "Market identifier (the market that the trade occurred on)."
        },
        "price": {
          "type": "string",
          "format": "uint64",
          "description": "Price for the trade, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places."
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "description": "Size filled for the trade."
        },
        "buyer": {
          "type": "string",
          "description": "Unique party identifier for the buyer."
        },
        "seller": {
          "type": "string",
          "description": "Unique party identifier for the seller."
        },
        "aggressor": {
          "$ref": "#/definitions/vegaSide",
          "description": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL. See [`Side`](#vega.Side)."
        },
        "buyOrder": {
          "type": "string",
          "description": "Identifier of the order from the buy side."
        },
        "sellOrder": {
          "type": "string",
          "description": "Identifier of the order from the sell side."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp for when the trade occurred, in nanoseconds since the epoch.\nSee [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`."
        },
        "type": {
          "$ref": "#/definitions/vegaTradeType",
          "description": "Type for the trade. See [`Trade.Type`](#vega.Trade.Type)."
        },
        "buyerFee": {
          "$ref": "#/definitions/vegaFee",
          "description": "Fee amount charged to the buyer party for the trade."
        },
        "sellerFee": {
          "$ref": "#/definitions/vegaFee",
          "description": "Fee amount charged to the seller party for the trade."
        },
        "buyerAuctionBatch": {
          "type": "string",
          "format": "uint64",
          "description": "Auction batch number that the buy side order was placed in."
        },
        "sellerAuctionBatch": {
          "type": "string",
          "format": "uint64",
          "description": "Auction batch number that the sell side order was placed in."
        }
      },
      "description": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega."
    },
    "vegaTradeSettlement": {
      "type": "object",
      "properties": {
        "size": {
          "type": "string",
          "format": "int64",
          "title": "Size of trade settlement"
        },
        "price": {
          "type": "string",
          "format": "uint64",
          "title": "Price of settlement as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        }
      },
      "title": "A trade settlement is part of the settle position event"
    },
    "vegaTradeType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_DEFAULT",
        "TYPE_NETWORK_CLOSE_OUT_GOOD",
        "TYPE_NETWORK_CLOSE_OUT_BAD"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Type values for a trade.\n\n - TYPE_UNSPECIFIED: Default value, always invalid.\n - TYPE_DEFAULT: Normal trading between two parties.\n - TYPE_NETWORK_CLOSE_OUT_GOOD: Trading initiated by the network with another party on the book,\nwhich helps to zero-out the positions of one or more distressed parties.\n - TYPE_NETWORK_CLOSE_OUT_BAD: Trading initiated by the network with another party off the book,\nwith a distressed party in order to zero-out the position of the party."
    },
    "vegaTransferBalance": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccount",
          "title": "The account relating to the transfer"
        },
        "balance": {
          "type": "string",
          "format": "uint64",
          "title": "The balance relating to the transfer"
        }
      },
      "description": "Represents the balance for an account during a transfer."
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "transfers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLedgerEntry"
          },
          "description": "One or more ledger entries representing the transfers."
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTransferBalance"
          },
          "description": "One or more account balances."
        }
      },
      "description": "Represents the response from a transfer."
    },
    "vegaTransferResponses": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaTransferResponse"
          },
          "title": "1 or more entries containing internal transfer information"
        }
      },
      "title": "A transfer responses event contains a collection of transfer information"
    },
    "vegaTxErrorEvent": {
      "type": "object",
      "properties": {
        "PartyID": {
          "type": "string",
          "title": "the party who had a tx fail"
        },
        "errMsg": {
          "type": "string",
          "title": "error message describing what went wrong"
        },
        "orderSubmission": {
          "$ref": "#/definitions/vegaOrderSubmission"
        },
        "orderAmendment": {
          "$ref": "#/definitions/vegaOrderAmendment"
        },
        "orderCancellation": {
          "$ref": "#/definitions/vegaOrderCancellation"
        },
        "proposal": {
          "$ref": "#/definitions/vegaProposal"
        },
        "vote": {
          "$ref": "#/definitions/vegaVote"
        }
      }
    },
    "vegaUpdateMarket": {
      "type": "object",
      "description": "Update an existing market on Vega."
    },
    "vegaUpdateNetworkParameter": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "The network parameter to update"
        }
      },
      "description": "Update network configuration on Vega."
    },
    "vegaValidatorEvent": {
      "type": "object",
      "properties": {
        "sourceID": {
          "type": "string",
          "description": "The source identifier of the event."
        },
        "add": {
          "$ref": "#/definitions/vegaAddValidator",
          "description": "Add a new validator."
        },
        "rm": {
          "$ref": "#/definitions/vegaRemoveValidator",
          "description": "Remove an existing validator."
        }
      },
      "description": "An event related to validator management with foreign networks."
    },
    "vegaVote": {
      "type": "object",
      "properties": {
        "partyID": {
          "type": "string",
          "description": "Voter's party identifier."
        },
        "value": {
          "$ref": "#/definitions/VoteValue",
          "description": "Actual vote."
        },
        "proposalID": {
          "type": "string",
          "description": "Identifier of the proposal being voted on."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network."
        }
      },
      "description": "Governance vote."
    },
    "vegaWithdrawExt": {
      "type": "object",
      "properties": {
        "erc20": {
          "$ref": "#/definitions/vegaErc20WithdrawExt"
        }
      }
    },
    "vegaWithdrawSubmission": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "format": "uint64",
          "title": "The amount to be withdrawn"
        },
        "asset": {
          "type": "string",
          "title": "The asset we want to withdraw"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "foreign chain specifics"
        }
      },
      "title": "A request for withdrawing funds from a trader"
    },
    "vegaWithdrawal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The id of the withdrawal"
        },
        "partyID": {
          "type": "string",
          "title": "The party initiating the withdrawal"
        },
        "amount": {
          "type": "string",
          "format": "uint64",
          "title": "The amount to be withdrawn"
        },
        "asset": {
          "type": "string",
          "title": "The asset we want to withdraw funds from"
        },
        "status": {
          "$ref": "#/definitions/vegaWithdrawalStatus",
          "title": "The status of this withdrawal"
        },
        "ref": {
          "type": "string",
          "title": "The reference which is used by the foreign chain\nto refer to this withdrawal"
        },
        "expiry": {
          "type": "string",
          "format": "int64",
          "title": "The time until when the withdrawal is valid"
        },
        "txHash": {
          "type": "string",
          "title": "The hash of the foreign chain for this transaction"
        },
        "createdTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "The time at which the network started to process this withdrawal"
        },
        "withdrawnTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "The time at which the withdrawal was finalized by the network"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "foreign chain specifis"
        }
      },
      "title": "The representation of a withdrawal in the vega network"
    },
    "vegaWithdrawalStatus": {
      "type": "string",
      "enum": [
        "WITHDRAWAL_STATUS_UNSPECIFIED",
        "WITHDRAWAL_STATUS_OPEN",
        "WITHDRAWAL_STATUS_CANCELLED",
        "WITHDRAWAL_STATUS_FINALIZED"
      ],
      "default": "WITHDRAWAL_STATUS_UNSPECIFIED",
      "description": "- WITHDRAWAL_STATUS_UNSPECIFIED: The default value\n - WITHDRAWAL_STATUS_OPEN: The withdrawal is open and being processed by the network\n - WITHDRAWAL_STATUS_CANCELLED: The withdrawal have been cancelled\n - WITHDRAWAL_STATUS_FINALIZED: The withdrawal went through and is fully finalized (funds remove from the\nvega network, and unlocked from the foreign chain bridge)",
      "title": "The status of the withdrawal"
    }
  },
  "x-stream-definitions": {
    "apiObserveEventsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiObserveEventsResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiObserveEventsResponse"
    },
    "apiOrdersStream": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiOrdersStream"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiOrdersStream"
    },
    "apiTradesStream": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/apiTradesStream"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of apiTradesStream"
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaAccount"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaAccount"
    },
    "vegaCandle": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaCandle"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaCandle"
    },
    "vegaGovernanceData": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaGovernanceData"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaGovernanceData"
    },
    "vegaMarginLevels": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarginLevels"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarginLevels"
    },
    "vegaMarketData": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketData"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketData"
    },
    "vegaMarketDepth": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketDepth"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketDepth"
    },
    "vegaMarketDepthUpdate": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaMarketDepthUpdate"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaMarketDepthUpdate"
    },
    "vegaPosition": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaPosition"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaPosition"
    },
    "vegaTransferResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaTransferResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaTransferResponse"
    },
    "vegaVote": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/vegaVote"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of vegaVote"
    }
  }
}
