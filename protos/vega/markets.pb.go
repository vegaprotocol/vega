// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vega/markets.proto

package vega

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Current state of the market
type Market_State int32

const (
	// Default value, invalid
	Market_STATE_UNSPECIFIED Market_State = 0
	// Governance proposal valid and accepted
	Market_STATE_PROPOSED Market_State = 1
	// Outcome of governance votes is to reject the market
	Market_STATE_REJECTED Market_State = 2
	// Governance vote passes/wins
	Market_STATE_PENDING Market_State = 3
	// Market triggers cancellation condition or governance
	// votes to close before market becomes Active
	Market_STATE_CANCELLED Market_State = 4
	// Enactment date reached and usual auction exit checks pass
	Market_STATE_ACTIVE Market_State = 5
	// Price monitoring or liquidity monitoring trigger
	Market_STATE_SUSPENDED Market_State = 6
	// Governance vote to close (Not currently implemented)
	Market_STATE_CLOSED Market_State = 7
	// Defined by the product (i.e. from a product parameter,
	// specified in market definition, giving close date/time)
	Market_STATE_TRADING_TERMINATED Market_State = 8
	// Settlement triggered and completed as defined by product
	Market_STATE_SETTLED Market_State = 9
)

// Enum value maps for Market_State.
var (
	Market_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_PROPOSED",
		2: "STATE_REJECTED",
		3: "STATE_PENDING",
		4: "STATE_CANCELLED",
		5: "STATE_ACTIVE",
		6: "STATE_SUSPENDED",
		7: "STATE_CLOSED",
		8: "STATE_TRADING_TERMINATED",
		9: "STATE_SETTLED",
	}
	Market_State_value = map[string]int32{
		"STATE_UNSPECIFIED":        0,
		"STATE_PROPOSED":           1,
		"STATE_REJECTED":           2,
		"STATE_PENDING":            3,
		"STATE_CANCELLED":          4,
		"STATE_ACTIVE":             5,
		"STATE_SUSPENDED":          6,
		"STATE_CLOSED":             7,
		"STATE_TRADING_TERMINATED": 8,
		"STATE_SETTLED":            9,
	}
)

func (x Market_State) Enum() *Market_State {
	p := new(Market_State)
	*p = x
	return p
}

func (x Market_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Market_State) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_markets_proto_enumTypes[0].Descriptor()
}

func (Market_State) Type() protoreflect.EnumType {
	return &file_vega_markets_proto_enumTypes[0]
}

func (x Market_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Market_State.Descriptor instead.
func (Market_State) EnumDescriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{20, 0}
}

// Trading mode the market is currently running, also referred to as 'market state'
type Market_TradingMode int32

const (
	// Default value, this is invalid
	Market_TRADING_MODE_UNSPECIFIED Market_TradingMode = 0
	// Normal trading
	Market_TRADING_MODE_CONTINUOUS Market_TradingMode = 1
	// Auction trading (FBA)
	Market_TRADING_MODE_BATCH_AUCTION Market_TradingMode = 2
	// Opening auction
	Market_TRADING_MODE_OPENING_AUCTION Market_TradingMode = 3
	// Auction triggered by monitoring
	Market_TRADING_MODE_MONITORING_AUCTION Market_TradingMode = 4
	// No trading is allowed
	Market_TRADING_MODE_NO_TRADING Market_TradingMode = 5
)

// Enum value maps for Market_TradingMode.
var (
	Market_TradingMode_name = map[int32]string{
		0: "TRADING_MODE_UNSPECIFIED",
		1: "TRADING_MODE_CONTINUOUS",
		2: "TRADING_MODE_BATCH_AUCTION",
		3: "TRADING_MODE_OPENING_AUCTION",
		4: "TRADING_MODE_MONITORING_AUCTION",
		5: "TRADING_MODE_NO_TRADING",
	}
	Market_TradingMode_value = map[string]int32{
		"TRADING_MODE_UNSPECIFIED":        0,
		"TRADING_MODE_CONTINUOUS":         1,
		"TRADING_MODE_BATCH_AUCTION":      2,
		"TRADING_MODE_OPENING_AUCTION":    3,
		"TRADING_MODE_MONITORING_AUCTION": 4,
		"TRADING_MODE_NO_TRADING":         5,
	}
)

func (x Market_TradingMode) Enum() *Market_TradingMode {
	p := new(Market_TradingMode)
	*p = x
	return p
}

func (x Market_TradingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Market_TradingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_vega_markets_proto_enumTypes[1].Descriptor()
}

func (Market_TradingMode) Type() protoreflect.EnumType {
	return &file_vega_markets_proto_enumTypes[1]
}

func (x Market_TradingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Market_TradingMode.Descriptor instead.
func (Market_TradingMode) EnumDescriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{20, 1}
}

// Auction duration is used to configure 3 auction periods:
//  1. `duration > 0`, `volume == 0`:
//     The auction will last for at least N seconds
//  2. `duration == 0`, `volume > 0`:
//     The auction will end once the given volume will match at uncrossing
//  3. `duration > 0`, `volume > 0`:
//     The auction will take at least N seconds, but can end sooner if the market can trade a certain volume
type AuctionDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration of the auction in seconds.
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// Target uncrossing trading volume.
	Volume uint64 `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *AuctionDuration) Reset() {
	*x = AuctionDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionDuration) ProtoMessage() {}

func (x *AuctionDuration) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionDuration.ProtoReflect.Descriptor instead.
func (*AuctionDuration) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{0}
}

func (x *AuctionDuration) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AuctionDuration) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Spot product definition
type Spot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Underlying base asset for the spot.
	BaseAsset string `protobuf:"bytes,1,opt,name=base_asset,json=baseAsset,proto3" json:"base_asset,omitempty"`
	// Underlying quote asset name for the spot.
	QuoteAsset string `protobuf:"bytes,2,opt,name=quote_asset,json=quoteAsset,proto3" json:"quote_asset,omitempty"`
}

func (x *Spot) Reset() {
	*x = Spot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spot) ProtoMessage() {}

func (x *Spot) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spot.ProtoReflect.Descriptor instead.
func (*Spot) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{1}
}

func (x *Spot) GetBaseAsset() string {
	if x != nil {
		return x.BaseAsset
	}
	return ""
}

func (x *Spot) GetQuoteAsset() string {
	if x != nil {
		return x.QuoteAsset
	}
	return ""
}

// Future product definition
type Future struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Underlying asset for the future.
	SettlementAsset string `protobuf:"bytes,1,opt,name=settlement_asset,json=settlementAsset,proto3" json:"settlement_asset,omitempty"`
	// Quote name of the instrument.
	QuoteName string `protobuf:"bytes,2,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	// Data source specification that describes the settlement data source filter.
	DataSourceSpecForSettlementData *DataSourceSpec `protobuf:"bytes,3,opt,name=data_source_spec_for_settlement_data,json=dataSourceSpecForSettlementData,proto3" json:"data_source_spec_for_settlement_data,omitempty"`
	// Data source specification that describes the trading termination data source filter.
	DataSourceSpecForTradingTermination *DataSourceSpec `protobuf:"bytes,4,opt,name=data_source_spec_for_trading_termination,json=dataSourceSpecForTradingTermination,proto3" json:"data_source_spec_for_trading_termination,omitempty"`
	// Binding between the data spec and the data source.
	DataSourceSpecBinding *DataSourceSpecToFutureBinding `protobuf:"bytes,5,opt,name=data_source_spec_binding,json=dataSourceSpecBinding,proto3" json:"data_source_spec_binding,omitempty"`
}

func (x *Future) Reset() {
	*x = Future{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Future) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Future) ProtoMessage() {}

func (x *Future) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Future.ProtoReflect.Descriptor instead.
func (*Future) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{2}
}

func (x *Future) GetSettlementAsset() string {
	if x != nil {
		return x.SettlementAsset
	}
	return ""
}

func (x *Future) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *Future) GetDataSourceSpecForSettlementData() *DataSourceSpec {
	if x != nil {
		return x.DataSourceSpecForSettlementData
	}
	return nil
}

func (x *Future) GetDataSourceSpecForTradingTermination() *DataSourceSpec {
	if x != nil {
		return x.DataSourceSpecForTradingTermination
	}
	return nil
}

func (x *Future) GetDataSourceSpecBinding() *DataSourceSpecToFutureBinding {
	if x != nil {
		return x.DataSourceSpecBinding
	}
	return nil
}

// DataSourceSpecToFutureBinding describes which property of the data source data is to be
// used as settlement data and which to use as the trading terminated trigger
type DataSourceSpecToFutureBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the property in the source data that should be used as settlement data.
	// If it is set to "prices.BTC.value", then the Future will use the value of
	// this property as settlement data.
	SettlementDataProperty string `protobuf:"bytes,1,opt,name=settlement_data_property,json=settlementDataProperty,proto3" json:"settlement_data_property,omitempty"`
	// Name of the property in the data source data that signals termination of trading.
	TradingTerminationProperty string `protobuf:"bytes,2,opt,name=trading_termination_property,json=tradingTerminationProperty,proto3" json:"trading_termination_property,omitempty"`
}

func (x *DataSourceSpecToFutureBinding) Reset() {
	*x = DataSourceSpecToFutureBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceSpecToFutureBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSpecToFutureBinding) ProtoMessage() {}

func (x *DataSourceSpecToFutureBinding) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSpecToFutureBinding.ProtoReflect.Descriptor instead.
func (*DataSourceSpecToFutureBinding) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{3}
}

func (x *DataSourceSpecToFutureBinding) GetSettlementDataProperty() string {
	if x != nil {
		return x.SettlementDataProperty
	}
	return ""
}

func (x *DataSourceSpecToFutureBinding) GetTradingTerminationProperty() string {
	if x != nil {
		return x.TradingTerminationProperty
	}
	return ""
}

// Instrument metadata definition
type InstrumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of 0 or more tags.
	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *InstrumentMetadata) Reset() {
	*x = InstrumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentMetadata) ProtoMessage() {}

func (x *InstrumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentMetadata.ProtoReflect.Descriptor instead.
func (*InstrumentMetadata) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{4}
}

func (x *InstrumentMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Instrument definition
type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique instrument ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Code for the instrument.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Name of the instrument.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Collection of instrument meta-data.
	Metadata *InstrumentMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Product the instrument is composed of.
	//
	// Types that are assignable to Product:
	//
	//	*Instrument_Future
	//	*Instrument_Spot
	Product isInstrument_Product `protobuf_oneof:"product"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{5}
}

func (x *Instrument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instrument) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetMetadata() *InstrumentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *Instrument) GetProduct() isInstrument_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (x *Instrument) GetFuture() *Future {
	if x, ok := x.GetProduct().(*Instrument_Future); ok {
		return x.Future
	}
	return nil
}

func (x *Instrument) GetSpot() *Spot {
	if x, ok := x.GetProduct().(*Instrument_Spot); ok {
		return x.Spot
	}
	return nil
}

type isInstrument_Product interface {
	isInstrument_Product()
}

type Instrument_Future struct {
	// Future.
	Future *Future `protobuf:"bytes,100,opt,name=future,proto3,oneof"`
}

type Instrument_Spot struct {
	// Spot.
	Spot *Spot `protobuf:"bytes,101,opt,name=spot,proto3,oneof"`
}

func (*Instrument_Future) isInstrument_Product() {}

func (*Instrument_Spot) isInstrument_Product() {}

// Risk model for log normal
type LogNormalRiskModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Risk Aversion Parameter.
	RiskAversionParameter float64 `protobuf:"fixed64,1,opt,name=risk_aversion_parameter,json=riskAversionParameter,proto3" json:"risk_aversion_parameter,omitempty"`
	// Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall
	// calculation to obtain the maintenance margin, must be a strictly non-negative real number.
	Tau float64 `protobuf:"fixed64,2,opt,name=tau,proto3" json:"tau,omitempty"`
	// Risk model parameters for log normal.
	Params *LogNormalModelParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *LogNormalRiskModel) Reset() {
	*x = LogNormalRiskModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogNormalRiskModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogNormalRiskModel) ProtoMessage() {}

func (x *LogNormalRiskModel) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogNormalRiskModel.ProtoReflect.Descriptor instead.
func (*LogNormalRiskModel) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{6}
}

func (x *LogNormalRiskModel) GetRiskAversionParameter() float64 {
	if x != nil {
		return x.RiskAversionParameter
	}
	return 0
}

func (x *LogNormalRiskModel) GetTau() float64 {
	if x != nil {
		return x.Tau
	}
	return 0
}

func (x *LogNormalRiskModel) GetParams() *LogNormalModelParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Risk model parameters for log normal
type LogNormalModelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mu parameter, annualised growth rate of the underlying asset.
	Mu float64 `protobuf:"fixed64,1,opt,name=mu,proto3" json:"mu,omitempty"`
	// R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number.
	R float64 `protobuf:"fixed64,2,opt,name=r,proto3" json:"r,omitempty"`
	// Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number.
	Sigma float64 `protobuf:"fixed64,3,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *LogNormalModelParams) Reset() {
	*x = LogNormalModelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogNormalModelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogNormalModelParams) ProtoMessage() {}

func (x *LogNormalModelParams) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogNormalModelParams.ProtoReflect.Descriptor instead.
func (*LogNormalModelParams) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{7}
}

func (x *LogNormalModelParams) GetMu() float64 {
	if x != nil {
		return x.Mu
	}
	return 0
}

func (x *LogNormalModelParams) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *LogNormalModelParams) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

// Risk model for simple modelling
type SimpleRiskModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Risk model params for simple modelling.
	Params *SimpleModelParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *SimpleRiskModel) Reset() {
	*x = SimpleRiskModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRiskModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRiskModel) ProtoMessage() {}

func (x *SimpleRiskModel) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRiskModel.ProtoReflect.Descriptor instead.
func (*SimpleRiskModel) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{8}
}

func (x *SimpleRiskModel) GetParams() *SimpleModelParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Risk model parameters for simple modelling
type SimpleModelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pre-defined risk factor value for long.
	FactorLong float64 `protobuf:"fixed64,1,opt,name=factor_long,json=factorLong,proto3" json:"factor_long,omitempty"`
	// Pre-defined risk factor value for short.
	FactorShort float64 `protobuf:"fixed64,2,opt,name=factor_short,json=factorShort,proto3" json:"factor_short,omitempty"`
	// Pre-defined maximum price move up that the model considers as valid.
	MaxMoveUp float64 `protobuf:"fixed64,3,opt,name=max_move_up,json=maxMoveUp,proto3" json:"max_move_up,omitempty"`
	// Pre-defined minimum price move down that the model considers as valid.
	MinMoveDown float64 `protobuf:"fixed64,4,opt,name=min_move_down,json=minMoveDown,proto3" json:"min_move_down,omitempty"`
	// Pre-defined constant probability of trading.
	ProbabilityOfTrading float64 `protobuf:"fixed64,5,opt,name=probability_of_trading,json=probabilityOfTrading,proto3" json:"probability_of_trading,omitempty"`
}

func (x *SimpleModelParams) Reset() {
	*x = SimpleModelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleModelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleModelParams) ProtoMessage() {}

func (x *SimpleModelParams) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleModelParams.ProtoReflect.Descriptor instead.
func (*SimpleModelParams) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{9}
}

func (x *SimpleModelParams) GetFactorLong() float64 {
	if x != nil {
		return x.FactorLong
	}
	return 0
}

func (x *SimpleModelParams) GetFactorShort() float64 {
	if x != nil {
		return x.FactorShort
	}
	return 0
}

func (x *SimpleModelParams) GetMaxMoveUp() float64 {
	if x != nil {
		return x.MaxMoveUp
	}
	return 0
}

func (x *SimpleModelParams) GetMinMoveDown() float64 {
	if x != nil {
		return x.MinMoveDown
	}
	return 0
}

func (x *SimpleModelParams) GetProbabilityOfTrading() float64 {
	if x != nil {
		return x.ProbabilityOfTrading
	}
	return 0
}

// Scaling Factors (for use in margin calculation)
type ScalingFactors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collateral search level. If collateral dips below this value,
	// the system will search for collateral to release.
	SearchLevel float64 `protobuf:"fixed64,1,opt,name=search_level,json=searchLevel,proto3" json:"search_level,omitempty"`
	// Initial margin level. This is the minimum amount of collateral
	// required to open a position in a market that requires margin.
	InitialMargin float64 `protobuf:"fixed64,2,opt,name=initial_margin,json=initialMargin,proto3" json:"initial_margin,omitempty"`
	// Collateral release level. If a trader has collateral above this level,
	// the system will release collateral to a trader's general collateral account
	// for the asset.
	CollateralRelease float64 `protobuf:"fixed64,3,opt,name=collateral_release,json=collateralRelease,proto3" json:"collateral_release,omitempty"`
}

func (x *ScalingFactors) Reset() {
	*x = ScalingFactors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalingFactors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalingFactors) ProtoMessage() {}

func (x *ScalingFactors) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalingFactors.ProtoReflect.Descriptor instead.
func (*ScalingFactors) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{10}
}

func (x *ScalingFactors) GetSearchLevel() float64 {
	if x != nil {
		return x.SearchLevel
	}
	return 0
}

func (x *ScalingFactors) GetInitialMargin() float64 {
	if x != nil {
		return x.InitialMargin
	}
	return 0
}

func (x *ScalingFactors) GetCollateralRelease() float64 {
	if x != nil {
		return x.CollateralRelease
	}
	return 0
}

// Margin Calculator definition
type MarginCalculator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scaling factors for margin calculation.
	ScalingFactors *ScalingFactors `protobuf:"bytes,1,opt,name=scaling_factors,json=scalingFactors,proto3" json:"scaling_factors,omitempty"`
}

func (x *MarginCalculator) Reset() {
	*x = MarginCalculator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginCalculator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginCalculator) ProtoMessage() {}

func (x *MarginCalculator) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginCalculator.ProtoReflect.Descriptor instead.
func (*MarginCalculator) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{11}
}

func (x *MarginCalculator) GetScalingFactors() *ScalingFactors {
	if x != nil {
		return x.ScalingFactors
	}
	return nil
}

// Tradable Instrument definition
type TradableInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details for the underlying instrument.
	Instrument *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Margin calculator for the instrument.
	MarginCalculator *MarginCalculator `protobuf:"bytes,2,opt,name=margin_calculator,json=marginCalculator,proto3" json:"margin_calculator,omitempty"`
	// Risk model for use by the instrument.
	//
	// Types that are assignable to RiskModel:
	//
	//	*TradableInstrument_LogNormalRiskModel
	//	*TradableInstrument_SimpleRiskModel
	RiskModel isTradableInstrument_RiskModel `protobuf_oneof:"risk_model"`
}

func (x *TradableInstrument) Reset() {
	*x = TradableInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradableInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradableInstrument) ProtoMessage() {}

func (x *TradableInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradableInstrument.ProtoReflect.Descriptor instead.
func (*TradableInstrument) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{12}
}

func (x *TradableInstrument) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *TradableInstrument) GetMarginCalculator() *MarginCalculator {
	if x != nil {
		return x.MarginCalculator
	}
	return nil
}

func (m *TradableInstrument) GetRiskModel() isTradableInstrument_RiskModel {
	if m != nil {
		return m.RiskModel
	}
	return nil
}

func (x *TradableInstrument) GetLogNormalRiskModel() *LogNormalRiskModel {
	if x, ok := x.GetRiskModel().(*TradableInstrument_LogNormalRiskModel); ok {
		return x.LogNormalRiskModel
	}
	return nil
}

func (x *TradableInstrument) GetSimpleRiskModel() *SimpleRiskModel {
	if x, ok := x.GetRiskModel().(*TradableInstrument_SimpleRiskModel); ok {
		return x.SimpleRiskModel
	}
	return nil
}

type isTradableInstrument_RiskModel interface {
	isTradableInstrument_RiskModel()
}

type TradableInstrument_LogNormalRiskModel struct {
	// Log normal.
	LogNormalRiskModel *LogNormalRiskModel `protobuf:"bytes,100,opt,name=log_normal_risk_model,json=logNormalRiskModel,proto3,oneof"`
}

type TradableInstrument_SimpleRiskModel struct {
	// Simple.
	SimpleRiskModel *SimpleRiskModel `protobuf:"bytes,101,opt,name=simple_risk_model,json=simpleRiskModel,proto3,oneof"`
}

func (*TradableInstrument_LogNormalRiskModel) isTradableInstrument_RiskModel() {}

func (*TradableInstrument_SimpleRiskModel) isTradableInstrument_RiskModel() {}

// Fee factors definition
type FeeFactors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market maker fee charged network wide.
	MakerFee string `protobuf:"bytes,1,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	// Infrastructure fee charged network wide for staking and governance.
	InfrastructureFee string `protobuf:"bytes,2,opt,name=infrastructure_fee,json=infrastructureFee,proto3" json:"infrastructure_fee,omitempty"`
	// Liquidity fee applied per market for market making.
	LiquidityFee string `protobuf:"bytes,3,opt,name=liquidity_fee,json=liquidityFee,proto3" json:"liquidity_fee,omitempty"`
}

func (x *FeeFactors) Reset() {
	*x = FeeFactors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeFactors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeFactors) ProtoMessage() {}

func (x *FeeFactors) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeFactors.ProtoReflect.Descriptor instead.
func (*FeeFactors) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{13}
}

func (x *FeeFactors) GetMakerFee() string {
	if x != nil {
		return x.MakerFee
	}
	return ""
}

func (x *FeeFactors) GetInfrastructureFee() string {
	if x != nil {
		return x.InfrastructureFee
	}
	return ""
}

func (x *FeeFactors) GetLiquidityFee() string {
	if x != nil {
		return x.LiquidityFee
	}
	return ""
}

// Fees definition
type Fees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee factors.
	Factors *FeeFactors `protobuf:"bytes,1,opt,name=factors,proto3" json:"factors,omitempty"`
}

func (x *Fees) Reset() {
	*x = Fees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fees) ProtoMessage() {}

func (x *Fees) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fees.ProtoReflect.Descriptor instead.
func (*Fees) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{14}
}

func (x *Fees) GetFactors() *FeeFactors {
	if x != nil {
		return x.Factors
	}
	return nil
}

// PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration
type PriceMonitoringTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price monitoring projection horizon τ in seconds.
	Horizon int64 `protobuf:"varint,1,opt,name=horizon,proto3" json:"horizon,omitempty"`
	// Price monitoring probability level p.
	Probability string `protobuf:"bytes,2,opt,name=probability,proto3" json:"probability,omitempty"`
	// Price monitoring auction extension duration in seconds should the price
	// breach its theoretical level over the specified horizon at the specified
	// probability level.
	AuctionExtension int64 `protobuf:"varint,3,opt,name=auction_extension,json=auctionExtension,proto3" json:"auction_extension,omitempty"`
}

func (x *PriceMonitoringTrigger) Reset() {
	*x = PriceMonitoringTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitoringTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitoringTrigger) ProtoMessage() {}

func (x *PriceMonitoringTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitoringTrigger.ProtoReflect.Descriptor instead.
func (*PriceMonitoringTrigger) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{15}
}

func (x *PriceMonitoringTrigger) GetHorizon() int64 {
	if x != nil {
		return x.Horizon
	}
	return 0
}

func (x *PriceMonitoringTrigger) GetProbability() string {
	if x != nil {
		return x.Probability
	}
	return ""
}

func (x *PriceMonitoringTrigger) GetAuctionExtension() int64 {
	if x != nil {
		return x.AuctionExtension
	}
	return 0
}

// PriceMonitoringParameters contains a collection of triggers to be used for a given market
type PriceMonitoringParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Triggers []*PriceMonitoringTrigger `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (x *PriceMonitoringParameters) Reset() {
	*x = PriceMonitoringParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitoringParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitoringParameters) ProtoMessage() {}

func (x *PriceMonitoringParameters) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitoringParameters.ProtoReflect.Descriptor instead.
func (*PriceMonitoringParameters) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{16}
}

func (x *PriceMonitoringParameters) GetTriggers() []*PriceMonitoringTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

// PriceMonitoringSettings contains the settings for price monitoring
type PriceMonitoringSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies price monitoring parameters to be used for price monitoring purposes.
	Parameters *PriceMonitoringParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *PriceMonitoringSettings) Reset() {
	*x = PriceMonitoringSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitoringSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitoringSettings) ProtoMessage() {}

func (x *PriceMonitoringSettings) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitoringSettings.ProtoReflect.Descriptor instead.
func (*PriceMonitoringSettings) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{17}
}

func (x *PriceMonitoringSettings) GetParameters() *PriceMonitoringParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// LiquidityMonitoringParameters contains settings used for liquidity monitoring
type LiquidityMonitoringParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies parameters related to target stake calculation.
	TargetStakeParameters *TargetStakeParameters `protobuf:"bytes,1,opt,name=target_stake_parameters,json=targetStakeParameters,proto3" json:"target_stake_parameters,omitempty"`
	// Specifies the triggering ratio for entering liquidity auction.
	TriggeringRatio string `protobuf:"bytes,2,opt,name=triggering_ratio,json=triggeringRatio,proto3" json:"triggering_ratio,omitempty"`
	// Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction.
	AuctionExtension int64 `protobuf:"varint,3,opt,name=auction_extension,json=auctionExtension,proto3" json:"auction_extension,omitempty"`
}

func (x *LiquidityMonitoringParameters) Reset() {
	*x = LiquidityMonitoringParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityMonitoringParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityMonitoringParameters) ProtoMessage() {}

func (x *LiquidityMonitoringParameters) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityMonitoringParameters.ProtoReflect.Descriptor instead.
func (*LiquidityMonitoringParameters) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{18}
}

func (x *LiquidityMonitoringParameters) GetTargetStakeParameters() *TargetStakeParameters {
	if x != nil {
		return x.TargetStakeParameters
	}
	return nil
}

func (x *LiquidityMonitoringParameters) GetTriggeringRatio() string {
	if x != nil {
		return x.TriggeringRatio
	}
	return ""
}

func (x *LiquidityMonitoringParameters) GetAuctionExtension() int64 {
	if x != nil {
		return x.AuctionExtension
	}
	return 0
}

// TargetStakeParameters contains parameters used in target stake calculation
type TargetStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies length of time window expressed in seconds for target stake calculation.
	TimeWindow int64 `protobuf:"varint,1,opt,name=time_window,json=timeWindow,proto3" json:"time_window,omitempty"`
	// Specifies scaling factors used in target stake calculation.
	ScalingFactor float64 `protobuf:"fixed64,2,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
}

func (x *TargetStakeParameters) Reset() {
	*x = TargetStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetStakeParameters) ProtoMessage() {}

func (x *TargetStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetStakeParameters.ProtoReflect.Descriptor instead.
func (*TargetStakeParameters) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{19}
}

func (x *TargetStakeParameters) GetTimeWindow() int64 {
	if x != nil {
		return x.TimeWindow
	}
	return 0
}

func (x *TargetStakeParameters) GetScalingFactor() float64 {
	if x != nil {
		return x.ScalingFactor
	}
	return 0
}

// Market definition
type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for the market.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tradable instrument configuration.
	TradableInstrument *TradableInstrument `protobuf:"bytes,2,opt,name=tradable_instrument,json=tradableInstrument,proto3" json:"tradable_instrument,omitempty"`
	// Number of decimal places that a price must be shifted by in order to get a
	// correct price denominated in the currency of the market, for example:
	// `realPrice = price / 10^decimalPlaces`.
	DecimalPlaces uint64 `protobuf:"varint,3,opt,name=decimal_places,json=decimalPlaces,proto3" json:"decimal_places,omitempty"`
	// Fees configuration that apply to the market.
	Fees *Fees `protobuf:"bytes,4,opt,name=fees,proto3" json:"fees,omitempty"`
	// Auction duration specifies how long the opening auction will run (minimum
	// duration and optionally a minimum traded volume).
	OpeningAuction *AuctionDuration `protobuf:"bytes,5,opt,name=opening_auction,json=openingAuction,proto3" json:"opening_auction,omitempty"`
	// PriceMonitoringSettings for the market.
	PriceMonitoringSettings *PriceMonitoringSettings `protobuf:"bytes,6,opt,name=price_monitoring_settings,json=priceMonitoringSettings,proto3" json:"price_monitoring_settings,omitempty"`
	// LiquidityMonitoringParameters for the market.
	LiquidityMonitoringParameters *LiquidityMonitoringParameters `protobuf:"bytes,7,opt,name=liquidity_monitoring_parameters,json=liquidityMonitoringParameters,proto3" json:"liquidity_monitoring_parameters,omitempty"`
	// Current mode of execution of the market.
	TradingMode Market_TradingMode `protobuf:"varint,8,opt,name=trading_mode,json=tradingMode,proto3,enum=vega.Market_TradingMode" json:"trading_mode,omitempty"`
	// Current state of the market.
	State Market_State `protobuf:"varint,9,opt,name=state,proto3,enum=vega.Market_State" json:"state,omitempty"`
	// Timestamps for when the market state changes.
	MarketTimestamps *MarketTimestamps `protobuf:"bytes,10,opt,name=market_timestamps,json=marketTimestamps,proto3" json:"market_timestamps,omitempty"`
	// The number of decimal places for a position.
	PositionDecimalPlaces int64 `protobuf:"varint,11,opt,name=position_decimal_places,json=positionDecimalPlaces,proto3" json:"position_decimal_places,omitempty"`
	// Percentage move up and down from the mid price which specifies the range of
	// price levels over which automated liquidity provision orders will be deployed.
	LpPriceRange string `protobuf:"bytes,12,opt,name=lp_price_range,json=lpPriceRange,proto3" json:"lp_price_range,omitempty"`
	// Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
	LinearSlippageFactor string `protobuf:"bytes,13,opt,name=linear_slippage_factor,json=linearSlippageFactor,proto3" json:"linear_slippage_factor,omitempty"`
	// Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
	QuadraticSlippageFactor string `protobuf:"bytes,14,opt,name=quadratic_slippage_factor,json=quadraticSlippageFactor,proto3" json:"quadratic_slippage_factor,omitempty"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{20}
}

func (x *Market) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Market) GetTradableInstrument() *TradableInstrument {
	if x != nil {
		return x.TradableInstrument
	}
	return nil
}

func (x *Market) GetDecimalPlaces() uint64 {
	if x != nil {
		return x.DecimalPlaces
	}
	return 0
}

func (x *Market) GetFees() *Fees {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *Market) GetOpeningAuction() *AuctionDuration {
	if x != nil {
		return x.OpeningAuction
	}
	return nil
}

func (x *Market) GetPriceMonitoringSettings() *PriceMonitoringSettings {
	if x != nil {
		return x.PriceMonitoringSettings
	}
	return nil
}

func (x *Market) GetLiquidityMonitoringParameters() *LiquidityMonitoringParameters {
	if x != nil {
		return x.LiquidityMonitoringParameters
	}
	return nil
}

func (x *Market) GetTradingMode() Market_TradingMode {
	if x != nil {
		return x.TradingMode
	}
	return Market_TRADING_MODE_UNSPECIFIED
}

func (x *Market) GetState() Market_State {
	if x != nil {
		return x.State
	}
	return Market_STATE_UNSPECIFIED
}

func (x *Market) GetMarketTimestamps() *MarketTimestamps {
	if x != nil {
		return x.MarketTimestamps
	}
	return nil
}

func (x *Market) GetPositionDecimalPlaces() int64 {
	if x != nil {
		return x.PositionDecimalPlaces
	}
	return 0
}

func (x *Market) GetLpPriceRange() string {
	if x != nil {
		return x.LpPriceRange
	}
	return ""
}

func (x *Market) GetLinearSlippageFactor() string {
	if x != nil {
		return x.LinearSlippageFactor
	}
	return ""
}

func (x *Market) GetQuadraticSlippageFactor() string {
	if x != nil {
		return x.QuadraticSlippageFactor
	}
	return ""
}

// Time stamps for important times about creating, enacting etc the market
type MarketTimestamps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time when the market is first proposed.
	Proposed int64 `protobuf:"varint,1,opt,name=proposed,proto3" json:"proposed,omitempty"`
	// Time when the market has been voted in and began its opening auction.
	Pending int64 `protobuf:"varint,2,opt,name=pending,proto3" json:"pending,omitempty"`
	// Time when the market has left the opening auction and is ready to accept trades.
	Open int64 `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
	// Time when the market closed.
	Close int64 `protobuf:"varint,4,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *MarketTimestamps) Reset() {
	*x = MarketTimestamps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vega_markets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTimestamps) ProtoMessage() {}

func (x *MarketTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_vega_markets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTimestamps.ProtoReflect.Descriptor instead.
func (*MarketTimestamps) Descriptor() ([]byte, []int) {
	return file_vega_markets_proto_rawDescGZIP(), []int{21}
}

func (x *MarketTimestamps) GetProposed() int64 {
	if x != nil {
		return x.Proposed
	}
	return 0
}

func (x *MarketTimestamps) GetPending() int64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

func (x *MarketTimestamps) GetOpen() int64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *MarketTimestamps) GetClose() int64 {
	if x != nil {
		return x.Close
	}
	return 0
}

var File_vega_markets_proto protoreflect.FileDescriptor

var file_vega_markets_proto_rawDesc = []byte{
	0x0a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x76, 0x65, 0x67, 0x61, 0x1a, 0x16, 0x76, 0x65, 0x67, 0x61,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x04, 0x53, 0x70, 0x6f,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x22, 0x82, 0x03, 0x0a, 0x06, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x24, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x1f, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x28, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x23, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x54, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x15, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x54, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x22, 0x28, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xcf,
	0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x06, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x73, 0x70, 0x6f, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x22, 0x92, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69,
	0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x72, 0x69, 0x73, 0x6b, 0x41, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x61,
	0x75, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x4a, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x6d, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d, 0x75, 0x12, 0x0c, 0x0a,
	0x01, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x69, 0x67, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d,
	0x61, 0x22, 0x42, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x43, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x6f, 0x67,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x7d, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x16,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x55, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x5f, 0x0a, 0x15, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0xd8, 0x09, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x59, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6b, 0x0a, 0x1f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x1d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43,
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x6c, 0x69, 0x70,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x71, 0x75, 0x61, 0x64, 0x72,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x71, 0x75, 0x61, 0x64,
	0x72, 0x61, 0x74, 0x69, 0x63, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xd8, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x22, 0xcc,
	0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x22, 0x72, 0x0a,
	0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x27, 0x5a, 0x25, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_vega_markets_proto_rawDescOnce sync.Once
	file_vega_markets_proto_rawDescData = file_vega_markets_proto_rawDesc
)

func file_vega_markets_proto_rawDescGZIP() []byte {
	file_vega_markets_proto_rawDescOnce.Do(func() {
		file_vega_markets_proto_rawDescData = protoimpl.X.CompressGZIP(file_vega_markets_proto_rawDescData)
	})
	return file_vega_markets_proto_rawDescData
}

var file_vega_markets_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_vega_markets_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_vega_markets_proto_goTypes = []interface{}{
	(Market_State)(0),                     // 0: vega.Market.State
	(Market_TradingMode)(0),               // 1: vega.Market.TradingMode
	(*AuctionDuration)(nil),               // 2: vega.AuctionDuration
	(*Spot)(nil),                          // 3: vega.Spot
	(*Future)(nil),                        // 4: vega.Future
	(*DataSourceSpecToFutureBinding)(nil), // 5: vega.DataSourceSpecToFutureBinding
	(*InstrumentMetadata)(nil),            // 6: vega.InstrumentMetadata
	(*Instrument)(nil),                    // 7: vega.Instrument
	(*LogNormalRiskModel)(nil),            // 8: vega.LogNormalRiskModel
	(*LogNormalModelParams)(nil),          // 9: vega.LogNormalModelParams
	(*SimpleRiskModel)(nil),               // 10: vega.SimpleRiskModel
	(*SimpleModelParams)(nil),             // 11: vega.SimpleModelParams
	(*ScalingFactors)(nil),                // 12: vega.ScalingFactors
	(*MarginCalculator)(nil),              // 13: vega.MarginCalculator
	(*TradableInstrument)(nil),            // 14: vega.TradableInstrument
	(*FeeFactors)(nil),                    // 15: vega.FeeFactors
	(*Fees)(nil),                          // 16: vega.Fees
	(*PriceMonitoringTrigger)(nil),        // 17: vega.PriceMonitoringTrigger
	(*PriceMonitoringParameters)(nil),     // 18: vega.PriceMonitoringParameters
	(*PriceMonitoringSettings)(nil),       // 19: vega.PriceMonitoringSettings
	(*LiquidityMonitoringParameters)(nil), // 20: vega.LiquidityMonitoringParameters
	(*TargetStakeParameters)(nil),         // 21: vega.TargetStakeParameters
	(*Market)(nil),                        // 22: vega.Market
	(*MarketTimestamps)(nil),              // 23: vega.MarketTimestamps
	(*DataSourceSpec)(nil),                // 24: vega.DataSourceSpec
}
var file_vega_markets_proto_depIdxs = []int32{
	24, // 0: vega.Future.data_source_spec_for_settlement_data:type_name -> vega.DataSourceSpec
	24, // 1: vega.Future.data_source_spec_for_trading_termination:type_name -> vega.DataSourceSpec
	5,  // 2: vega.Future.data_source_spec_binding:type_name -> vega.DataSourceSpecToFutureBinding
	6,  // 3: vega.Instrument.metadata:type_name -> vega.InstrumentMetadata
	4,  // 4: vega.Instrument.future:type_name -> vega.Future
	3,  // 5: vega.Instrument.spot:type_name -> vega.Spot
	9,  // 6: vega.LogNormalRiskModel.params:type_name -> vega.LogNormalModelParams
	11, // 7: vega.SimpleRiskModel.params:type_name -> vega.SimpleModelParams
	12, // 8: vega.MarginCalculator.scaling_factors:type_name -> vega.ScalingFactors
	7,  // 9: vega.TradableInstrument.instrument:type_name -> vega.Instrument
	13, // 10: vega.TradableInstrument.margin_calculator:type_name -> vega.MarginCalculator
	8,  // 11: vega.TradableInstrument.log_normal_risk_model:type_name -> vega.LogNormalRiskModel
	10, // 12: vega.TradableInstrument.simple_risk_model:type_name -> vega.SimpleRiskModel
	15, // 13: vega.Fees.factors:type_name -> vega.FeeFactors
	17, // 14: vega.PriceMonitoringParameters.triggers:type_name -> vega.PriceMonitoringTrigger
	18, // 15: vega.PriceMonitoringSettings.parameters:type_name -> vega.PriceMonitoringParameters
	21, // 16: vega.LiquidityMonitoringParameters.target_stake_parameters:type_name -> vega.TargetStakeParameters
	14, // 17: vega.Market.tradable_instrument:type_name -> vega.TradableInstrument
	16, // 18: vega.Market.fees:type_name -> vega.Fees
	2,  // 19: vega.Market.opening_auction:type_name -> vega.AuctionDuration
	19, // 20: vega.Market.price_monitoring_settings:type_name -> vega.PriceMonitoringSettings
	20, // 21: vega.Market.liquidity_monitoring_parameters:type_name -> vega.LiquidityMonitoringParameters
	1,  // 22: vega.Market.trading_mode:type_name -> vega.Market.TradingMode
	0,  // 23: vega.Market.state:type_name -> vega.Market.State
	23, // 24: vega.Market.market_timestamps:type_name -> vega.MarketTimestamps
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_vega_markets_proto_init() }
func file_vega_markets_proto_init() {
	if File_vega_markets_proto != nil {
		return
	}
	file_vega_data_source_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vega_markets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Future); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceSpecToFutureBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogNormalRiskModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogNormalModelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRiskModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleModelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalingFactors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginCalculator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradableInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeFactors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitoringTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitoringParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitoringSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityMonitoringParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vega_markets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketTimestamps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vega_markets_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Instrument_Future)(nil),
		(*Instrument_Spot)(nil),
	}
	file_vega_markets_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*TradableInstrument_LogNormalRiskModel)(nil),
		(*TradableInstrument_SimpleRiskModel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vega_markets_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vega_markets_proto_goTypes,
		DependencyIndexes: file_vega_markets_proto_depIdxs,
		EnumInfos:         file_vega_markets_proto_enumTypes,
		MessageInfos:      file_vega_markets_proto_msgTypes,
	}.Build()
	File_vega_markets_proto = out.File
	file_vega_markets_proto_rawDesc = nil
	file_vega_markets_proto_goTypes = nil
	file_vega_markets_proto_depIdxs = nil
}
