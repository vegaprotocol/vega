syntax = "proto3";

package vega.data.v1;
option go_package = "code.vegaprotocol.io/vega/protos/vega/data/v1";

import "vega/data/v1/data.proto";

message DataSourceDefinition {
  oneof type {
    InternalDataSourceDefinition internal = 1;
    ExternalDataSourceDefinition external = 2;
  }
}

message InternalDataSourceDefinition {
  // Types of internal data sources
  oneof type {
    TimeDataSourceDefinition time = 1;
  }
}

// TimeDataSource is the internal data source used for emitting timestamps.
message TimeDataSourceDefinition {
  // Conditions that the timestamps should meet in order to be considered.
  repeated Condition conditions = 1;
}

message ExternalDataSourceDefinition {
  // Types of External data sources
  oneof type {
    DataSourceSpecConfiguration oracle = 1;
  }
}

// All types of external data sources use the same configuration set for meeting requirements
// in order for the data to be useful for Vega - valid signatures and matching filters.
message DataSourceSpecConfiguration {
  // signers is the list of authorized signatures that signed the data for this
  // source. All the signatures in the data source data should be contained in this
  // external source. All the signatures in the data should be contained in this list.
  repeated Signer signers = 1;

  // filters describes which source data are considered of interest or not for
  // the product (or the risk model).
  repeated Filter filters = 2;
}

// A data source spec describes the data source base that a product (or a risk model)
// wants to get from the data source engine.
// This message contains additional information used by the API.
message DataSourceSpec {
  // id is a hash generated from the DataSpec data.
  string id = 1;
  // Creation Date time
  int64 created_at = 2;
  // Last Updated timestamp
  int64 updated_at = 3;

  DataSourceSpecConfiguration config = 4;

  // status describes the status of the data source spec
  Status status = 5;

  // Status describe the status of the data source spec
  enum Status {
    // The default value.
    STATUS_UNSPECIFIED = 0;
    // STATUS_ACTIVE describes an active data source spec.
    STATUS_ACTIVE = 1;
    // STATUS_DEACTIVATED describes an data source spec that is not listening to data
    // anymore.
    STATUS_DEACTIVATED = 2;
  }
}

// Filter describes the conditions under which a data source data is considered of
// interest or not.
message Filter {
  // key is the data source data property key targeted by the filter.
  PropertyKey key = 1;
  // conditions are the conditions that should be matched by the data to be
  // considered of interest.
  repeated Condition conditions = 2;
}

// PropertyKey describes the property key contained in an data source data.
message PropertyKey {
  // name is the name of the property.
  string name = 1;
  // type is the type of the property.
  Type type = 2;
  // Type describes the type of properties that are supported by the data source
  // engine.
  enum Type {
    // The default value.
    TYPE_UNSPECIFIED = 0;
    // Any type.
    TYPE_EMPTY = 1;
    // Integer type.
    TYPE_INTEGER = 2;
    // String type.
    TYPE_STRING = 3;
    // Boolean type.
    TYPE_BOOLEAN = 4;
    // Any floating point decimal type.
    TYPE_DECIMAL = 5;
    // Timestamp date type.
    TYPE_TIMESTAMP = 6;
  }
}

// Condition describes the condition that must be validated by the network
message Condition {
  // comparator is the type of comparison to make on the value.
  Operator operator = 1;
  // value is used by the comparator.
  string value = 2;
  // Comparator describes the type of comparison.
  enum Operator {
    // The default value
    OPERATOR_UNSPECIFIED = 0;
    // Verify if the property values are strictly equal or not.
    OPERATOR_EQUALS = 1;
    // Verify if the data source data value is greater than the Condition value.
    OPERATOR_GREATER_THAN = 2;
    // Verify if the data source data value is greater than or equal to the Condition
    // value.
    OPERATOR_GREATER_THAN_OR_EQUAL = 3;
    // Verify if the data source data value is less than the Condition value.
    OPERATOR_LESS_THAN = 4;
    // Verify if the data source data value is less or equal to than the Condition
    // value.
    OPERATOR_LESS_THAN_OR_EQUAL = 5;
  }
}

message ExternalDataSourceSpec {
  DataSourceSpec spec = 1;
}

// An oracle spec contains an embedded data source spec.
// Will be generated by the compiler as: OracleSpec_ExternalDataSourceSpec_*
message OracleSpec {
  ExternalDataSourceSpec  external_data_source_spec = 1;
}
