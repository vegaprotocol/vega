// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/api (interfaces: MarketService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	vega "code.vegaprotocol.io/protos/vega"
	gomock "github.com/golang/mock/gomock"
)

// MockMarketService is a mock of MarketService interface.
type MockMarketService struct {
	ctrl     *gomock.Controller
	recorder *MockMarketServiceMockRecorder
}

// MockMarketServiceMockRecorder is the mock recorder for MockMarketService.
type MockMarketServiceMockRecorder struct {
	mock *MockMarketService
}

// NewMockMarketService creates a new mock instance.
func NewMockMarketService(ctrl *gomock.Controller) *MockMarketService {
	mock := &MockMarketService{ctrl: ctrl}
	mock.recorder = &MockMarketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketService) EXPECT() *MockMarketServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockMarketService) GetAll(arg0 context.Context) ([]*vega.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*vega.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMarketServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMarketService)(nil).GetAll), arg0)
}

// GetByID mocks base method.
func (m *MockMarketService) GetByID(arg0 context.Context, arg1 string) (*vega.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*vega.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMarketServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMarketService)(nil).GetByID), arg0, arg1)
}

// GetDepth mocks base method.
func (m *MockMarketService) GetDepth(arg0 context.Context, arg1 string, arg2 uint64) (*vega.MarketDepth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepth", arg0, arg1, arg2)
	ret0, _ := ret[0].(*vega.MarketDepth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepth indicates an expected call of GetDepth.
func (mr *MockMarketServiceMockRecorder) GetDepth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepth", reflect.TypeOf((*MockMarketService)(nil).GetDepth), arg0, arg1, arg2)
}

// GetMarketDataByID mocks base method.
func (m *MockMarketService) GetMarketDataByID(arg0 string) (vega.MarketData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketDataByID", arg0)
	ret0, _ := ret[0].(vega.MarketData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketDataByID indicates an expected call of GetMarketDataByID.
func (mr *MockMarketServiceMockRecorder) GetMarketDataByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketDataByID", reflect.TypeOf((*MockMarketService)(nil).GetMarketDataByID), arg0)
}

// GetMarketDataSubscribersCount mocks base method.
func (m *MockMarketService) GetMarketDataSubscribersCount() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketDataSubscribersCount")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetMarketDataSubscribersCount indicates an expected call of GetMarketDataSubscribersCount.
func (mr *MockMarketServiceMockRecorder) GetMarketDataSubscribersCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketDataSubscribersCount", reflect.TypeOf((*MockMarketService)(nil).GetMarketDataSubscribersCount))
}

// GetMarketDepthSubscribersCount mocks base method.
func (m *MockMarketService) GetMarketDepthSubscribersCount() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketDepthSubscribersCount")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetMarketDepthSubscribersCount indicates an expected call of GetMarketDepthSubscribersCount.
func (mr *MockMarketServiceMockRecorder) GetMarketDepthSubscribersCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketDepthSubscribersCount", reflect.TypeOf((*MockMarketService)(nil).GetMarketDepthSubscribersCount))
}

// GetMarketsData mocks base method.
func (m *MockMarketService) GetMarketsData() []vega.MarketData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketsData")
	ret0, _ := ret[0].([]vega.MarketData)
	return ret0
}

// GetMarketsData indicates an expected call of GetMarketsData.
func (mr *MockMarketServiceMockRecorder) GetMarketsData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketsData", reflect.TypeOf((*MockMarketService)(nil).GetMarketsData))
}

// ObserveDepth mocks base method.
func (m *MockMarketService) ObserveDepth(arg0 context.Context, arg1 int, arg2 string) (<-chan *vega.MarketDepth, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveDepth", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan *vega.MarketDepth)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// ObserveDepth indicates an expected call of ObserveDepth.
func (mr *MockMarketServiceMockRecorder) ObserveDepth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDepth", reflect.TypeOf((*MockMarketService)(nil).ObserveDepth), arg0, arg1, arg2)
}

// ObserveDepthUpdates mocks base method.
func (m *MockMarketService) ObserveDepthUpdates(arg0 context.Context, arg1 int, arg2 string) (<-chan *vega.MarketDepthUpdate, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveDepthUpdates", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan *vega.MarketDepthUpdate)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// ObserveDepthUpdates indicates an expected call of ObserveDepthUpdates.
func (mr *MockMarketServiceMockRecorder) ObserveDepthUpdates(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDepthUpdates", reflect.TypeOf((*MockMarketService)(nil).ObserveDepthUpdates), arg0, arg1, arg2)
}

// ObserveMarketsData mocks base method.
func (m *MockMarketService) ObserveMarketsData(arg0 context.Context, arg1 int, arg2 string) (<-chan []vega.MarketData, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveMarketsData", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan []vega.MarketData)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// ObserveMarketsData indicates an expected call of ObserveMarketsData.
func (mr *MockMarketServiceMockRecorder) ObserveMarketsData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveMarketsData", reflect.TypeOf((*MockMarketService)(nil).ObserveMarketsData), arg0, arg1, arg2)
}
