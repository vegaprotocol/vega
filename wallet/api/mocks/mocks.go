// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/wallet/api (interfaces: WalletStore,NetworkStore,Interactor,ServiceStore,TokenStore,TimeProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	api "code.vegaprotocol.io/vega/wallet/api"
	session "code.vegaprotocol.io/vega/wallet/api/session"
	network "code.vegaprotocol.io/vega/wallet/network"
	service "code.vegaprotocol.io/vega/wallet/service"
	wallet "code.vegaprotocol.io/vega/wallet/wallet"
	gomock "github.com/golang/mock/gomock"
)

// MockWalletStore is a mock of WalletStore interface.
type MockWalletStore struct {
	ctrl     *gomock.Controller
	recorder *MockWalletStoreMockRecorder
}

// MockWalletStoreMockRecorder is the mock recorder for MockWalletStore.
type MockWalletStoreMockRecorder struct {
	mock *MockWalletStore
}

// NewMockWalletStore creates a new mock instance.
func NewMockWalletStore(ctrl *gomock.Controller) *MockWalletStore {
	mock := &MockWalletStore{ctrl: ctrl}
	mock.recorder = &MockWalletStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletStore) EXPECT() *MockWalletStoreMockRecorder {
	return m.recorder
}

// DeleteWallet mocks base method.
func (m *MockWalletStore) DeleteWallet(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockWalletStoreMockRecorder) DeleteWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockWalletStore)(nil).DeleteWallet), arg0, arg1)
}

// GetWallet mocks base method.
func (m *MockWalletStore) GetWallet(arg0 context.Context, arg1, arg2 string) (wallet.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0, arg1, arg2)
	ret0, _ := ret[0].(wallet.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletStoreMockRecorder) GetWallet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletStore)(nil).GetWallet), arg0, arg1, arg2)
}

// GetWalletPath mocks base method.
func (m *MockWalletStore) GetWalletPath(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletPath", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWalletPath indicates an expected call of GetWalletPath.
func (mr *MockWalletStoreMockRecorder) GetWalletPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletPath", reflect.TypeOf((*MockWalletStore)(nil).GetWalletPath), arg0)
}

// ListWallets mocks base method.
func (m *MockWalletStore) ListWallets(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWallets", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWallets indicates an expected call of ListWallets.
func (mr *MockWalletStoreMockRecorder) ListWallets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWallets", reflect.TypeOf((*MockWalletStore)(nil).ListWallets), arg0)
}

// RenameWallet mocks base method.
func (m *MockWalletStore) RenameWallet(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameWallet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameWallet indicates an expected call of RenameWallet.
func (mr *MockWalletStoreMockRecorder) RenameWallet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameWallet", reflect.TypeOf((*MockWalletStore)(nil).RenameWallet), arg0, arg1, arg2)
}

// SaveWallet mocks base method.
func (m *MockWalletStore) SaveWallet(arg0 context.Context, arg1 wallet.Wallet, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWallet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWallet indicates an expected call of SaveWallet.
func (mr *MockWalletStoreMockRecorder) SaveWallet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWallet", reflect.TypeOf((*MockWalletStore)(nil).SaveWallet), arg0, arg1, arg2)
}

// WalletExists mocks base method.
func (m *MockWalletStore) WalletExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletExists indicates an expected call of WalletExists.
func (mr *MockWalletStoreMockRecorder) WalletExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletExists", reflect.TypeOf((*MockWalletStore)(nil).WalletExists), arg0, arg1)
}

// MockNetworkStore is a mock of NetworkStore interface.
type MockNetworkStore struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkStoreMockRecorder
}

// MockNetworkStoreMockRecorder is the mock recorder for MockNetworkStore.
type MockNetworkStoreMockRecorder struct {
	mock *MockNetworkStore
}

// NewMockNetworkStore creates a new mock instance.
func NewMockNetworkStore(ctrl *gomock.Controller) *MockNetworkStore {
	mock := &MockNetworkStore{ctrl: ctrl}
	mock.recorder = &MockNetworkStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkStore) EXPECT() *MockNetworkStoreMockRecorder {
	return m.recorder
}

// DeleteNetwork mocks base method.
func (m *MockNetworkStore) DeleteNetwork(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockNetworkStoreMockRecorder) DeleteNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockNetworkStore)(nil).DeleteNetwork), arg0)
}

// GetNetwork mocks base method.
func (m *MockNetworkStore) GetNetwork(arg0 string) (*network.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", arg0)
	ret0, _ := ret[0].(*network.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockNetworkStoreMockRecorder) GetNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockNetworkStore)(nil).GetNetwork), arg0)
}

// GetNetworkPath mocks base method.
func (m *MockNetworkStore) GetNetworkPath(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPath", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetworkPath indicates an expected call of GetNetworkPath.
func (mr *MockNetworkStoreMockRecorder) GetNetworkPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPath", reflect.TypeOf((*MockNetworkStore)(nil).GetNetworkPath), arg0)
}

// ListNetworks mocks base method.
func (m *MockNetworkStore) ListNetworks() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworks")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockNetworkStoreMockRecorder) ListNetworks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockNetworkStore)(nil).ListNetworks))
}

// NetworkExists mocks base method.
func (m *MockNetworkStore) NetworkExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkExists indicates an expected call of NetworkExists.
func (mr *MockNetworkStoreMockRecorder) NetworkExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkExists", reflect.TypeOf((*MockNetworkStore)(nil).NetworkExists), arg0)
}

// SaveNetwork mocks base method.
func (m *MockNetworkStore) SaveNetwork(arg0 *network.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNetwork indicates an expected call of SaveNetwork.
func (mr *MockNetworkStoreMockRecorder) SaveNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNetwork", reflect.TypeOf((*MockNetworkStore)(nil).SaveNetwork), arg0)
}

// MockInteractor is a mock of Interactor interface.
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor.
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance.
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockInteractor) Log(arg0 context.Context, arg1 string, arg2 api.LogType, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", arg0, arg1, arg2, arg3)
}

// Log indicates an expected call of Log.
func (mr *MockInteractorMockRecorder) Log(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockInteractor)(nil).Log), arg0, arg1, arg2, arg3)
}

// NotifyError mocks base method.
func (m *MockInteractor) NotifyError(arg0 context.Context, arg1 string, arg2 api.ErrorType, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyError", arg0, arg1, arg2, arg3)
}

// NotifyError indicates an expected call of NotifyError.
func (mr *MockInteractorMockRecorder) NotifyError(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyError", reflect.TypeOf((*MockInteractor)(nil).NotifyError), arg0, arg1, arg2, arg3)
}

// NotifyFailedTransaction mocks base method.
func (m *MockInteractor) NotifyFailedTransaction(arg0 context.Context, arg1, arg2, arg3 string, arg4 error, arg5 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyFailedTransaction", arg0, arg1, arg2, arg3, arg4, arg5)
}

// NotifyFailedTransaction indicates an expected call of NotifyFailedTransaction.
func (mr *MockInteractorMockRecorder) NotifyFailedTransaction(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyFailedTransaction", reflect.TypeOf((*MockInteractor)(nil).NotifyFailedTransaction), arg0, arg1, arg2, arg3, arg4, arg5)
}

// NotifyInteractionSessionBegan mocks base method.
func (m *MockInteractor) NotifyInteractionSessionBegan(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyInteractionSessionBegan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyInteractionSessionBegan indicates an expected call of NotifyInteractionSessionBegan.
func (mr *MockInteractorMockRecorder) NotifyInteractionSessionBegan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyInteractionSessionBegan", reflect.TypeOf((*MockInteractor)(nil).NotifyInteractionSessionBegan), arg0, arg1)
}

// NotifyInteractionSessionEnded mocks base method.
func (m *MockInteractor) NotifyInteractionSessionEnded(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyInteractionSessionEnded", arg0, arg1)
}

// NotifyInteractionSessionEnded indicates an expected call of NotifyInteractionSessionEnded.
func (mr *MockInteractorMockRecorder) NotifyInteractionSessionEnded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyInteractionSessionEnded", reflect.TypeOf((*MockInteractor)(nil).NotifyInteractionSessionEnded), arg0, arg1)
}

// NotifySuccessfulRequest mocks base method.
func (m *MockInteractor) NotifySuccessfulRequest(arg0 context.Context, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifySuccessfulRequest", arg0, arg1, arg2)
}

// NotifySuccessfulRequest indicates an expected call of NotifySuccessfulRequest.
func (mr *MockInteractorMockRecorder) NotifySuccessfulRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySuccessfulRequest", reflect.TypeOf((*MockInteractor)(nil).NotifySuccessfulRequest), arg0, arg1, arg2)
}

// NotifySuccessfulTransaction mocks base method.
func (m *MockInteractor) NotifySuccessfulTransaction(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifySuccessfulTransaction", arg0, arg1, arg2, arg3, arg4, arg5)
}

// NotifySuccessfulTransaction indicates an expected call of NotifySuccessfulTransaction.
func (mr *MockInteractorMockRecorder) NotifySuccessfulTransaction(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySuccessfulTransaction", reflect.TypeOf((*MockInteractor)(nil).NotifySuccessfulTransaction), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RequestPassphrase mocks base method.
func (m *MockInteractor) RequestPassphrase(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPassphrase", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPassphrase indicates an expected call of RequestPassphrase.
func (mr *MockInteractorMockRecorder) RequestPassphrase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPassphrase", reflect.TypeOf((*MockInteractor)(nil).RequestPassphrase), arg0, arg1, arg2)
}

// RequestPermissionsReview mocks base method.
func (m *MockInteractor) RequestPermissionsReview(arg0 context.Context, arg1, arg2, arg3 string, arg4 map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPermissionsReview", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPermissionsReview indicates an expected call of RequestPermissionsReview.
func (mr *MockInteractorMockRecorder) RequestPermissionsReview(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPermissionsReview", reflect.TypeOf((*MockInteractor)(nil).RequestPermissionsReview), arg0, arg1, arg2, arg3, arg4)
}

// RequestTransactionReviewForSending mocks base method.
func (m *MockInteractor) RequestTransactionReviewForSending(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTransactionReviewForSending", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestTransactionReviewForSending indicates an expected call of RequestTransactionReviewForSending.
func (mr *MockInteractorMockRecorder) RequestTransactionReviewForSending(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTransactionReviewForSending", reflect.TypeOf((*MockInteractor)(nil).RequestTransactionReviewForSending), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// RequestTransactionReviewForSigning mocks base method.
func (m *MockInteractor) RequestTransactionReviewForSigning(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTransactionReviewForSigning", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestTransactionReviewForSigning indicates an expected call of RequestTransactionReviewForSigning.
func (mr *MockInteractorMockRecorder) RequestTransactionReviewForSigning(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTransactionReviewForSigning", reflect.TypeOf((*MockInteractor)(nil).RequestTransactionReviewForSigning), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// RequestWalletConnectionReview mocks base method.
func (m *MockInteractor) RequestWalletConnectionReview(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWalletConnectionReview", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWalletConnectionReview indicates an expected call of RequestWalletConnectionReview.
func (mr *MockInteractorMockRecorder) RequestWalletConnectionReview(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWalletConnectionReview", reflect.TypeOf((*MockInteractor)(nil).RequestWalletConnectionReview), arg0, arg1, arg2)
}

// RequestWalletSelection mocks base method.
func (m *MockInteractor) RequestWalletSelection(arg0 context.Context, arg1, arg2 string, arg3 []string) (api.SelectedWallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWalletSelection", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(api.SelectedWallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWalletSelection indicates an expected call of RequestWalletSelection.
func (mr *MockInteractorMockRecorder) RequestWalletSelection(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWalletSelection", reflect.TypeOf((*MockInteractor)(nil).RequestWalletSelection), arg0, arg1, arg2, arg3)
}

// MockServiceStore is a mock of ServiceStore interface.
type MockServiceStore struct {
	ctrl     *gomock.Controller
	recorder *MockServiceStoreMockRecorder
}

// MockServiceStoreMockRecorder is the mock recorder for MockServiceStore.
type MockServiceStoreMockRecorder struct {
	mock *MockServiceStore
}

// NewMockServiceStore creates a new mock instance.
func NewMockServiceStore(ctrl *gomock.Controller) *MockServiceStore {
	mock := &MockServiceStore{ctrl: ctrl}
	mock.recorder = &MockServiceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceStore) EXPECT() *MockServiceStoreMockRecorder {
	return m.recorder
}

// GetRsaKeys mocks base method.
func (m *MockServiceStore) GetRsaKeys() (*service.RSAKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRsaKeys")
	ret0, _ := ret[0].(*service.RSAKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRsaKeys indicates an expected call of GetRsaKeys.
func (mr *MockServiceStoreMockRecorder) GetRsaKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRsaKeys", reflect.TypeOf((*MockServiceStore)(nil).GetRsaKeys))
}

// RSAKeysExists mocks base method.
func (m *MockServiceStore) RSAKeysExists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSAKeysExists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RSAKeysExists indicates an expected call of RSAKeysExists.
func (mr *MockServiceStoreMockRecorder) RSAKeysExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSAKeysExists", reflect.TypeOf((*MockServiceStore)(nil).RSAKeysExists))
}

// SaveRSAKeys mocks base method.
func (m *MockServiceStore) SaveRSAKeys(arg0 *service.RSAKeys) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRSAKeys", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRSAKeys indicates an expected call of SaveRSAKeys.
func (mr *MockServiceStoreMockRecorder) SaveRSAKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRSAKeys", reflect.TypeOf((*MockServiceStore)(nil).SaveRSAKeys), arg0)
}

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// DeleteToken mocks base method.
func (m *MockTokenStore) DeleteToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockTokenStoreMockRecorder) DeleteToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockTokenStore)(nil).DeleteToken), arg0)
}

// GetToken mocks base method.
func (m *MockTokenStore) GetToken(arg0 string) (session.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0)
	ret0, _ := ret[0].(session.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenStoreMockRecorder) GetToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenStore)(nil).GetToken), arg0)
}

// ListTokens mocks base method.
func (m *MockTokenStore) ListTokens() ([]session.TokenSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens")
	ret0, _ := ret[0].([]session.TokenSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens.
func (mr *MockTokenStoreMockRecorder) ListTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockTokenStore)(nil).ListTokens))
}

// SaveToken mocks base method.
func (m *MockTokenStore) SaveToken(arg0 session.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveToken indicates an expected call of SaveToken.
func (mr *MockTokenStoreMockRecorder) SaveToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToken", reflect.TypeOf((*MockTokenStore)(nil).SaveToken), arg0)
}

// TokenExists mocks base method.
func (m *MockTokenStore) TokenExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenExists indicates an expected call of TokenExists.
func (mr *MockTokenStoreMockRecorder) TokenExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenExists", reflect.TypeOf((*MockTokenStore)(nil).TokenExists), arg0)
}

// MockTimeProvider is a mock of TimeProvider interface.
type MockTimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTimeProviderMockRecorder
}

// MockTimeProviderMockRecorder is the mock recorder for MockTimeProvider.
type MockTimeProviderMockRecorder struct {
	mock *MockTimeProvider
}

// NewMockTimeProvider creates a new mock instance.
func NewMockTimeProvider(ctrl *gomock.Controller) *MockTimeProvider {
	mock := &MockTimeProvider{ctrl: ctrl}
	mock.recorder = &MockTimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeProvider) EXPECT() *MockTimeProviderMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeProvider) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeProviderMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeProvider)(nil).Now))
}
