syntax = "proto3";

package vega;

import "vega/assets.proto";
import "vega/data_source.proto";
import "vega/markets.proto";
import "vega/vega.proto";

option go_package = "code.vegaprotocol.io/vega/protos/vega";

// Spot product configuration
message SpotProduct {
  // Base asset ID.
  string base_asset = 1;
  // Quote asset ID.
  string quote_asset = 2;
  // Product name.
  string name = 3;
}

// Future product configuration
message FutureProduct {
  // Asset ID for the product's settlement asset.
  string settlement_asset = 1;
  // Product quote name.
  string quote_name = 2;
  // Data source spec describing the data source for settlement.
  vega.DataSourceDefinition data_source_spec_for_settlement_data = 3;
  // The external data source spec describing the data source of trading termination.
  vega.DataSourceDefinition data_source_spec_for_trading_termination = 4;
  // Binding between the data source spec and the settlement data.
  DataSourceSpecToFutureBinding data_source_spec_binding = 5;
}

// Perpetual product configuration
message PerpetualProduct {
  // Asset ID for the product's settlement asset.
  string settlement_asset = 1;
  // Product quote name.
  string quote_name = 2;
  // Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1].
  string margin_funding_factor = 3;
  // Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1].
  string interest_rate = 4;
  // Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
  string clamp_lower_bound = 5;
  // Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
  string clamp_upper_bound = 6;
  // Data source spec describing the data source for settlement schedule.
  vega.DataSourceDefinition data_source_spec_for_settlement_schedule = 7;
  // Data source spec describing the data source for settlement.
  vega.DataSourceDefinition data_source_spec_for_settlement_data = 8;
  // Binding between the data source spec and the settlement data.
  DataSourceSpecToPerpetualBinding data_source_spec_binding = 9;
  // Factor applied to funding-rates. This scales the impact that spot price deviations have on funding payments.
  optional string funding_rate_scaling_factor = 10;
  // Lower bound for the funding-rate such that the funding-rate will never be lower than this value.
  optional string funding_rate_lower_bound = 11;
  // Upper bound for the funding-rate such that the funding-rate will never be higher than this value.
  optional string funding_rate_upper_bound = 12;
}

// Instrument configuration
message InstrumentConfiguration {
  // Instrument name.
  string name = 1;
  // Instrument code, human-readable shortcode used to describe the instrument.
  string code = 2;
  // Product specification.
  oneof product {
    // Future.
    FutureProduct future = 100;
    // Spot.
    SpotProduct spot = 101;
    // Perpetual.
    PerpetualProduct perpetual = 102;
  }
}

// Configuration for a new spot market on Vega
message NewSpotMarketConfiguration {
  // New spot market instrument configuration.
  InstrumentConfiguration instrument = 1;
  // Decimal places used for the new spot market, sets the smallest price increment on the book.
  uint64 decimal_places = 2;
  // Optional new spot market metadata, tags.
  repeated string metadata = 3;
  // Price monitoring parameters.
  PriceMonitoringParameters price_monitoring_parameters = 4;
  // Specifies parameters related to target stake calculation.
  TargetStakeParameters target_stake_parameters = 5;
  // New spot market risk model parameters.
  oneof risk_parameters {
    // Simple risk model parameters, valid only if MODEL_SIMPLE is selected.
    SimpleModelParams simple = 100;
    // Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.
    LogNormalRiskModel log_normal = 101;
  }
  // Decimal places for order sizes, sets what size the smallest order / position on the spot market can be.
  int64 position_decimal_places = 6;
  // Specifies the liquidity provision SLA parameters.
  LiquiditySLAParameters sla_params = 7;
  // Specifies how the liquidity fee for the market will be calculated.
  LiquidityFeeSettings liquidity_fee_settings = 8;
}

// Configuration for a new futures market on Vega
message NewMarketConfiguration {
  // New futures market instrument configuration.
  InstrumentConfiguration instrument = 1;
  // Decimal places used for the new futures market, sets the smallest price increment on the book.
  uint64 decimal_places = 2;
  // Optional new futures market metadata, tags.
  repeated string metadata = 3;
  // Price monitoring parameters.
  PriceMonitoringParameters price_monitoring_parameters = 4;
  // Liquidity monitoring parameters.
  LiquidityMonitoringParameters liquidity_monitoring_parameters = 5;
  // New futures market risk model parameters.
  oneof risk_parameters {
    // Simple risk model parameters, valid only if MODEL_SIMPLE is selected.
    SimpleModelParams simple = 100;
    // Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.
    LogNormalRiskModel log_normal = 101;
  }
  // Decimal places for order sizes, sets what size the smallest order / position on the futures market can be.
  int64 position_decimal_places = 6;
  // DEPRECATED: Use liquidity SLA parameters instead.
  // Percentage move up and down from the mid price which specifies the range of
  // price levels over which automated liquidity provisions will be deployed.
  optional string lp_price_range = 8;
  // Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
  string linear_slippage_factor = 9;
  // Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
  string quadratic_slippage_factor = 10 [deprecated = true];
  // Successor configuration. If this proposal is meant to succeed a given market, then this should be set.
  optional SuccessorConfiguration successor = 11;
  // Liquidity SLA parameters
  LiquiditySLAParameters liquidity_sla_parameters = 12;
  // Specifies how the liquidity fee for the market will be calculated.
  LiquidityFeeSettings liquidity_fee_settings = 13;
  // Liquidation strategy for this market.
  LiquidationStrategy liquidation_strategy = 14;
}

// New spot market on Vega
message NewSpotMarket {
  // Configuration of the new spot market.
  NewSpotMarketConfiguration changes = 1;
}

// Configuration required to turn a new market proposal in to a successor market proposal.
message SuccessorConfiguration {
  // ID of the market that the successor should take over from.
  string parent_market_id = 1;
  // A decimal value between or equal to 0 and 1, specifying the fraction of the insurance pool balance that is carried over from the parent market to the successor.
  string insurance_pool_fraction = 2;
}

// New market on Vega
message NewMarket {
  // Configuration of the new market.
  NewMarketConfiguration changes = 1;
}

// Update an existing market on Vega
message UpdateMarket {
  // Market ID the update is for.
  string market_id = 1;
  // Updated configuration of the futures market.
  UpdateMarketConfiguration changes = 2;
}

// Update an existing spot market on Vega
message UpdateSpotMarket {
  // Market ID the update is for.
  string market_id = 1;
  // Updated configuration of the spot market.
  UpdateSpotMarketConfiguration changes = 2;
}

// Configuration to update a futures market on Vega
message UpdateMarketConfiguration {
  // Updated futures market instrument configuration.
  UpdateInstrumentConfiguration instrument = 1;
  // Optional futures market metadata, tags.
  repeated string metadata = 2;
  // Price monitoring parameters.
  PriceMonitoringParameters price_monitoring_parameters = 3;
  // Liquidity monitoring parameters.
  LiquidityMonitoringParameters liquidity_monitoring_parameters = 4;
  // Updated futures market risk model parameters.
  oneof risk_parameters {
    // Simple risk model parameters, valid only if MODEL_SIMPLE is selected.
    SimpleModelParams simple = 100;
    // Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.
    LogNormalRiskModel log_normal = 101;
  }
  // DEPRECATED: Use liquidity SLA parameters instead.
  // Percentage move up and down from the mid price which specifies the range of
  // price levels over which automated liquidity provisions will be deployed.
  optional string lp_price_range = 5;
  // Linear slippage factor is used to cap the slippage component of maintenance margin - it is applied to the slippage volume.
  string linear_slippage_factor = 6;
  // Quadratic slippage factor is used to cap the slippage component of maintenance margin - it is applied to the square of the slippage volume.
  string quadratic_slippage_factor = 7 [deprecated = true];
  // Liquidity SLA parameters
  LiquiditySLAParameters liquidity_sla_parameters = 8;
  // Specifies how the liquidity fee for the market will be calculated.
  LiquidityFeeSettings liquidity_fee_settings = 9;
  // Liquidation strategy parameters
  LiquidationStrategy liquidation_strategy = 10;
}

// Configuration to update a spot market on Vega
message UpdateSpotMarketConfiguration {
  // Optional spot market metadata, tags.
  repeated string metadata = 1;
  // Price monitoring parameters.
  PriceMonitoringParameters price_monitoring_parameters = 2;
  // Specifies parameters related to target stake calculation.
  TargetStakeParameters target_stake_parameters = 3;
  // Update spot market risk model parameters.
  oneof risk_parameters {
    // Simple risk model parameters, valid only if MODEL_SIMPLE is selected.
    SimpleModelParams simple = 100;
    // Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected.
    LogNormalRiskModel log_normal = 101;
  }
  // Specifies the liquidity provision SLA parameters.
  LiquiditySLAParameters sla_params = 4;
  // Specifies how the liquidity fee for the market will be calculated.
  LiquidityFeeSettings liquidity_fee_settings = 5;
}

// Instrument configuration
message UpdateInstrumentConfiguration {
  // Instrument code, human-readable shortcode used to describe the instrument.
  string code = 1;
  // Product specification.
  oneof product {
    // Future.
    UpdateFutureProduct future = 100;
    // Perpetual.
    UpdatePerpetualProduct perpetual = 101;
  }
}

// Future product configuration
message UpdateFutureProduct {
  // Human-readable name/abbreviation of the quote name.
  string quote_name = 1;
  // The data source spec describing the data of settlement data.
  vega.DataSourceDefinition data_source_spec_for_settlement_data = 2;
  // The data source spec describing the data source for trading termination.
  vega.DataSourceDefinition data_source_spec_for_trading_termination = 3;
  // The binding between the data source spec and the settlement data.
  DataSourceSpecToFutureBinding data_source_spec_binding = 4;
}

// Perpetual product configuration
message UpdatePerpetualProduct {
  // Human-readable name/abbreviation of the quote name.
  string quote_name = 1;
  // Controls how much the upcoming funding payment liability contributes to party's margin, in the range [0, 1].
  string margin_funding_factor = 2;
  // Continuously compounded interest rate used in funding rate calculation, in the range [-1, 1].
  string interest_rate = 3;
  // Lower bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
  string clamp_lower_bound = 4;
  // Upper bound for the clamp function used as part of the funding rate calculation, in the range [-1, 1].
  string clamp_upper_bound = 5;
  // Data source spec describing the data source for settlement schedule.
  vega.DataSourceDefinition data_source_spec_for_settlement_schedule = 6;
  // Data source spec describing the data source for settlement.
  vega.DataSourceDefinition data_source_spec_for_settlement_data = 7;
  // Binding between the data source spec and the settlement data.
  DataSourceSpecToPerpetualBinding data_source_spec_binding = 8;
  // Factor applied to funding-rates. This scales the impact that spot price deviations have on funding payments.
  optional string funding_rate_scaling_factor = 9;
  // Lower bound for the funding-rate such that the funding-rate will never be lower than this value.
  optional string funding_rate_lower_bound = 10;
  // Upper bound for the funding-rate such that the funding-rate will never be higher than this value.
  optional string funding_rate_upper_bound = 11;
}

// Update network configuration on Vega
message UpdateNetworkParameter {
  // The network parameter to update.
  NetworkParameter changes = 1;
}

// New asset on Vega
message NewAsset {
  // Configuration of the new asset.
  AssetDetails changes = 1;
}

// Update an existing asset on Vega
message UpdateAsset {
  // Asset ID the update is for.
  string asset_id = 1;
  // Changes to apply on an existing asset.
  AssetDetailsUpdate changes = 2;
}

// Freeform proposal
// This message is just used as a placeholder to sort out the nature of the
// proposal once parsed.
message NewFreeform {}

// Terms for a governance proposal on Vega
message ProposalTerms {
  // Timestamp as Unix time in seconds when voting closes for this proposal,
  // constrained by `minClose` and `maxClose` network parameters.
  int64 closing_timestamp = 1;
  // Timestamp as Unix time in seconds when proposal gets enacted if passed,
  // constrained by `minEnact` and `maxEnact` network parameters.
  int64 enactment_timestamp = 2;
  // Validation timestamp as Unix time in seconds.
  int64 validation_timestamp = 3;
  // Changes being proposed.
  oneof change {
    // Proposal change for modifying an existing futures market on Vega.
    UpdateMarket update_market = 101;
    // Proposal change for creating new futures market on Vega.
    NewMarket new_market = 102;
    // Proposal change for updating Vega network parameters.
    UpdateNetworkParameter update_network_parameter = 103;
    // Proposal change for creating new assets on Vega.
    NewAsset new_asset = 104;
    // Proposal change for a freeform request, which can be voted on but does not change the behaviour of the system,
    // and can be used to gauge community sentiment.
    NewFreeform new_freeform = 105;
    // Proposal change for updating an asset.
    UpdateAsset update_asset = 106;
    // Proposal change for creating new spot market on Vega.
    NewSpotMarket new_spot_market = 107;
    // Proposal change for modifying an existing spot market on Vega.
    UpdateSpotMarket update_spot_market = 108;
    // Proposal change for a governance transfer.
    NewTransfer new_transfer = 109;
    // Cancel a governance transfer.
    CancelTransfer cancel_transfer = 110;
    // Proposal change for updating the state of a market.
    UpdateMarketState update_market_state = 111;
    // Proposal change for updating the referral program.
    UpdateReferralProgram update_referral_program = 112;
    // Proposal change for updating the volume discount program.
    UpdateVolumeDiscountProgram update_volume_discount_program = 113;
  }
}

// Terms change for a batch governance proposal
message BatchProposalTermsChange {
  // Timestamp as Unix time in seconds when proposal terms gets enacted if proposal passed the vote,
  // constrained by `minEnact` and `maxEnact` network parameters.
  int64 enactment_timestamp = 1;
  // Changes being proposed.
  oneof change {
    // Proposal change for modifying an existing futures market.
    UpdateMarket update_market = 101;
    // Proposal change for creating new futures market.
    NewMarket new_market = 102;
    // Proposal change for updating Vega network parameters.
    UpdateNetworkParameter update_network_parameter = 103;
    // Proposal change for a freeform request, which can be voted on but does not change the behaviour of the system,
    // and can be used to gauge community sentiment.
    NewFreeform new_freeform = 104;
    // Proposal change for updating an asset.
    UpdateAsset update_asset = 105;
    // Proposal change for creating new spot market.
    NewSpotMarket new_spot_market = 106;
    // Proposal change for modifying an existing spot market.
    UpdateSpotMarket update_spot_market = 107;
    // Proposal change for a governance initiated transfer.
    NewTransfer new_transfer = 108;
    // Proposal change to cancel a governance initiated transfe.
    CancelTransfer cancel_transfer = 109;
    // Proposal change for updating the state of a market.
    UpdateMarketState update_market_state = 110;
    // Proposal change for updating the referral program.
    UpdateReferralProgram update_referral_program = 111;
    // Proposal change for updating the volume discount program.
    UpdateVolumeDiscountProgram update_volume_discount_program = 112;
  }
}

message ProposalParameters {
  // Represents the minimum time before a proposal can be closed for voting.
  int64 min_close = 1;
  // Represents the maximum time that a proposal can be open for voting.
  int64 max_close = 2;
  // Represents the minimum time before an enacted proposal takes effect.
  int64 min_enact = 3;
  // Represents the maximum time before an enacted proposal must take effect.
  int64 max_enact = 4;
  // Specifies the required percentage of eligible participants that must partake in the proposal for it to be valid.
  string required_participation = 5;
  // Specifies the required percentage of votes a proposal needs to be approved.
  string required_majority = 6;
  // Specifies the minimum governance token balance a proposer must hold to initiate a proposal.
  string min_proposer_balance = 7;
  // Specifies the minimum governance token balance a voter must hold to participate in voting.
  string min_voter_balance = 8;
  // Specifies the required percentage of participation from liquidity providers for the proposal to be valid.
  string required_participation_lp = 9;
  // Specifies the required majority percentage from liquidity providers for a proposal to be approved.
  string required_majority_lp = 10;
  // Specifies the minimum share that is akin to equity, which a participant must hold for their vote to be eligible.
  string min_equity_like_share = 11;
}

// Terms for a batch governance proposal on Vega
message BatchProposalTerms {
  // Closing timestamp in Unix time; adheres to `minClose` and `maxClose` limits.
  int64 closing_timestamp = 1;
  // Specific parameters defining the proposal's characteristics used for validation.
  ProposalParameters proposal_params = 2;
  // List of individual changes included in the batch proposal.
  repeated BatchProposalTermsChange changes = 3;
}

// Rationale behind a proposal.
message ProposalRationale {
  reserved 2, 3;
  // Description to show a short title / something in case the link goes offline.
  // This is to be between 0 and 20k unicode characters.
  // This is mandatory for all proposals.
  string description = 1;
  // Title to be used to give a short description of the proposal in lists.
  // This is to be between 0 and 100 unicode characters.
  // This is mandatory for all proposals.
  string title = 4;
}

// Governance data
message GovernanceData {
  // Governance proposal that is being voted on.
  Proposal proposal = 1;
  // All YES votes in favour of the proposal above.
  repeated Vote yes = 2;
  // All NO votes against the proposal above.
  repeated Vote no = 3;
  // All latest YES votes by party which is guaranteed to be unique,
  // where key (string) is the party ID i.e. public key and
  // value (Vote) is the vote cast by the given party.
  map<string, Vote> yes_party = 4;
  // All latest NO votes by party which is guaranteed to be unique,
  // where key (string) is the party ID i.e. public key and
  // value (Vote) is the vote cast by the given party.
  map<string, Vote> no_party = 5;
}

// Governance proposal
message Proposal {
  // Proposal state transition:
  // Open ->
  //   - Passed -> Enacted.
  //   - Passed -> Failed.
  //   - Declined
  // Rejected
  // Proposal can enter Failed state from any other state
  enum State {
    // Default value, always invalid
    STATE_UNSPECIFIED = 0;
    // Proposal enactment has failed - even though proposal has passed, its execution could not be performed
    STATE_FAILED = 1;
    // Proposal is open for voting
    STATE_OPEN = 2;
    // Proposal has gained enough support to be executed
    STATE_PASSED = 3;
    // Proposal wasn't accepted i.e. proposal terms failed validation due to wrong configuration or failed to meet network requirements.
    STATE_REJECTED = 4;
    // Proposal didn't get enough votes, e.g. either failed to gain required participation or majority level.
    STATE_DECLINED = 5;
    // Proposal enacted.
    STATE_ENACTED = 6;
    // Waiting for node validation of the proposal
    STATE_WAITING_FOR_NODE_VOTE = 7;

    // Note: If adding an enum value, add a matching entry in:
    //       - gateway/graphql/helpers_enum.go
    //       - gateway/graphql/schema.graphql (enum ProposalState)
  }

  // Unique proposal ID.
  string id = 1;
  // Proposal reference.
  string reference = 2;
  // Party ID i.e. public key of the party submitting the proposal.
  string party_id = 3;
  // Current state of the proposal, i.e. open, passed, failed etc.
  State state = 4;
  // Proposal timestamp for date and time as Unix time in nanoseconds when proposal was submitted to the network.
  int64 timestamp = 5;
  // Proposal configuration and the actual change that is meant to be executed when proposal is enacted.
  // Single proposal term.
  optional ProposalTerms terms = 6;
  // Reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses.
  optional ProposalError reason = 7;
  // Detailed error associated to the reason.
  optional string error_details = 8;
  // Rationale behind a proposal.
  ProposalRationale rationale = 9;
  // Required vote participation for this proposal.
  string required_participation = 10;
  // Required majority for this proposal.
  string required_majority = 11;
  // Required participation from liquidity providers, optional but is required for market update proposal.
  optional string required_liquidity_provider_participation = 12;
  // Required majority from liquidity providers, optional but is required for market update proposal.
  optional string required_liquidity_provider_majority = 13;
  // Batch proposal terms.
  optional BatchProposalTerms batch_terms = 14;
  // ID of a batch proposal that this proposal is part of.
  optional string batch_id = 15;
}

// List of possible errors that can cause a proposal to be in state rejected or failed
enum ProposalError {
  // Default value
  PROPOSAL_ERROR_UNSPECIFIED = 0;
  // Specified close time is too early based on network parameters
  PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON = 1;
  // Specified close time is too late based on network parameters
  PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE = 2;
  // Specified enactment time is too early based on network parameters
  PROPOSAL_ERROR_ENACT_TIME_TOO_SOON = 3;
  // Specified enactment time is too late based on network parameters
  PROPOSAL_ERROR_ENACT_TIME_TOO_LATE = 4;
  // Proposer for this proposal has insufficient tokens
  PROPOSAL_ERROR_INSUFFICIENT_TOKENS = 5;
  // Instrument quote name and base name were the same
  PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY = 6;
  // Proposal has no product
  PROPOSAL_ERROR_NO_PRODUCT = 7;
  // Specified product is not supported
  PROPOSAL_ERROR_UNSUPPORTED_PRODUCT = 8;
  // Proposal has no trading mode
  PROPOSAL_ERROR_NO_TRADING_MODE = 11;
  // Proposal has an unsupported trading mode
  PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE = 12;
  // Proposal failed node validation
  PROPOSAL_ERROR_NODE_VALIDATION_FAILED = 13;
  // Field is missing in a builtin asset source
  PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD = 14;
  // Contract address is missing in the ERC20 asset source
  PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS = 15;
  // Asset ID is invalid or does not exist on the Vega network
  PROPOSAL_ERROR_INVALID_ASSET = 16;
  // Proposal terms timestamps are not compatible (Validation < Closing < Enactment)
  PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS = 17;
  // No risk parameters were specified
  PROPOSAL_ERROR_NO_RISK_PARAMETERS = 18;
  // Invalid key in update network parameter proposal
  PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY = 19;
  // Invalid value in update network parameter proposal
  PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE = 20;
  // Validation failed for network parameter proposal
  PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED = 21;
  // Opening auction duration is less than the network minimum opening auction time
  PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL = 22;
  // Opening auction duration is more than the network minimum opening auction time
  PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE = 23;
  // Market proposal market could not be instantiated in execution
  PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET = 25;
  // Market proposal market contained invalid product definition
  PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT = 26;
  // Market proposal has invalid risk parameter
  PROPOSAL_ERROR_INVALID_RISK_PARAMETER = 30;
  // Proposal was declined because vote didn't reach the majority threshold required
  PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED = 31;
  // Proposal declined because the participation threshold was not reached
  PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED = 32;
  // Asset proposal has invalid asset details
  PROPOSAL_ERROR_INVALID_ASSET_DETAILS = 33;
  // Proposal is an unknown type
  PROPOSAL_ERROR_UNKNOWN_TYPE = 34;
  // Proposal has an unknown risk parameter type
  PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE = 35;
  // Validation failed for freeform proposal
  PROPOSAL_ERROR_INVALID_FREEFORM = 36;
  // Party doesn't have enough equity-like share to propose an update on the market
  // targeted by the proposal
  PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE = 37;
  // Market targeted by the proposal does not exist or is not eligible for modification
  PROPOSAL_ERROR_INVALID_MARKET = 38;
  // Market proposal decimal place is higher than the market settlement asset decimal places
  PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES = 39;
  // Market proposal contains too many price monitoring triggers
  PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS = 40;
  // Market proposal contains too many price monitoring triggers
  PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE = 41;
  // LP price range must be larger than 0
  PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE = 42;
  // LP price range must not be larger than 100
  PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE = 43;
  // Linear slippage factor is out of range, either negative or too large
  PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE = 44;
  // Quadratic slippage factor is out of range, either negative or too large
  PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE = 45;
  // Validation failed for spot proposal
  PROPOSAL_ERROR_INVALID_SPOT = 46;
  // Spot trading not enabled
  PROPOSAL_ERROR_SPOT_PRODUCT_DISABLED = 47;
  // Market proposal is invalid, either invalid insurance pool fraction, or it specifies a parent market that it can't succeed.
  PROPOSAL_ERROR_INVALID_SUCCESSOR_MARKET = 48;
  // Governance transfer proposal is invalid
  PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_FAILED = 49;
  // Governance transfer proposal failed
  PROPOSAL_ERROR_GOVERNANCE_TRANSFER_PROPOSAL_INVALID = 50;
  // Proposal for cancelling transfer is invalid, check proposal ID
  PROPOSAL_ERROR_GOVERNANCE_CANCEL_TRANSFER_PROPOSAL_INVALID = 51;
  // Proposal for updating market state is invalid
  PROPOSAL_ERROR_INVALID_MARKET_STATE_UPDATE = 52;
  // Liquidity provision SLA parameters are invalid
  PROPOSAL_ERROR_INVALID_SLA_PARAMS = 53;
  // Mandatory liquidity provision SLA parameters are missing
  PROPOSAL_ERROR_MISSING_SLA_PARAMS = 54;
  // Perpetual market proposal contained invalid product definition
  PROPOSAL_ERROR_INVALID_PERPETUAL_PRODUCT = 55;
  // Referral program proposal is invalid
  PROPOSAL_ERROR_INVALID_REFERRAL_PROGRAM = 56;
  // Volume discount program proposal is invalid
  PROPOSAL_ERROR_INVALID_VOLUME_DISCOUNT_PROGRAM = 57;
  // One or more proposals in a batch has been rejected
  PROPOSAL_ERROR_PROPOSAL_IN_BATCH_REJECTED = 58;
  // One or more proposals in a batch has been declined
  PROPOSAL_ERROR_PROPOSAL_IN_BATCH_DECLINED = 59;
}

// Governance vote
message Vote {
  // Vote value
  enum Value {
    // Default value, always invalid
    VALUE_UNSPECIFIED = 0;
    // Vote against the proposal
    VALUE_NO = 1;
    // Vote in favour of the proposal
    VALUE_YES = 2;

    // Note: If adding an enum value, add a matching entry in:
    //       - gateway/graphql/helpers_enum.go
    //       - gateway/graphql/schema.graphql (enum VoteValue)
  }

  // Voter's party ID.
  string party_id = 1;
  // Which way the party voted.
  Value value = 2;
  // Proposal ID being voted on.
  string proposal_id = 3;
  // Timestamp in Unix nanoseconds when the vote was acknowledged by the network.
  int64 timestamp = 4;
  // Total number of governance token for the party that cast the vote.
  string total_governance_token_balance = 5;
  // The weight of this vote based on the total number of governance tokens.
  string total_governance_token_weight = 6;
  // The weight of the vote compared to the total amount of equity-like share on the market.
  string total_equity_like_share_weight = 7;
}

message UpdateVolumeDiscountProgram {
  // Configuration for a change to update a volume discount program
  VolumeDiscountProgramChanges changes = 1;
}

message VolumeDiscountProgramChanges {
  // Defined benefit tiers in increasing order. First element will give Tier 1,
  // second element will give Tier 2, and so on. Determines the level of
  // benefit a party can expect based on performance criteria.
  repeated VolumeBenefitTier benefit_tiers = 1;
  // Timestamp as Unix time in seconds, after which when the current epoch
  // ends, the program will end and benefits will be disabled.
  int64 end_of_program_timestamp = 2;
  // Number of epochs over which to evaluate a referral set's running volume.
  uint64 window_length = 3;
}

message UpdateReferralProgram {
  // Configuration for change to update a referral program.
  ReferralProgramChanges changes = 1;
}

message ReferralProgramChanges {
  // Defined benefit tiers in increasing order. First element will give Tier 1,
  // second element will give Tier 2, and so on. Determines the level of
  // benefit a party can expect based on performance criteria.
  repeated BenefitTier benefit_tiers = 1;
  // Timestamp as Unix time in seconds, after which when the current epoch
  // ends, the program will end and benefits will be disabled.
  int64 end_of_program_timestamp = 2;
  // Number of epochs over which to evaluate a referral set's running volume.
  uint64 window_length = 3;
  // Defined staking tiers in increasing order. First element will give Tier 1,
  // second element will give Tier 2, and so on. Determines the level of
  // benefit a party can expect based on their staking.
  repeated StakingTier staking_tiers = 4;
}

message UpdateMarketState {
  // Configuration for governance-initiated change of a market's state
  UpdateMarketStateConfiguration changes = 1;
}

enum MarketStateUpdateType {
  // Default value, always invalid
  MARKET_STATE_UPDATE_TYPE_UNSPECIFIED = 0;
  // Request to terminate a market via governance
  MARKET_STATE_UPDATE_TYPE_TERMINATE = 1;
  // Request to suspend a market via governance
  MARKET_STATE_UPDATE_TYPE_SUSPEND = 2;
  // Request to resume a market via governance
  MARKET_STATE_UPDATE_TYPE_RESUME = 3;
}

message UpdateMarketStateConfiguration {
  // ID of the market
  string market_id = 1;
  // Type of the market update
  MarketStateUpdateType update_type = 2;
  // Settlement price, relevant only for market termination for futures markets
  optional string price = 3;
}

message CancelTransfer {
  // Configuration for cancellation of a governance-initiated transfer
  CancelTransferConfiguration changes = 1;
}

message CancelTransferConfiguration {
  // ID of the governance transfer proposal.
  string transfer_id = 1;
}

// New governance transfer
message NewTransfer {
  // Configuration for a new transfer.
  NewTransferConfiguration changes = 1;
}

enum GovernanceTransferType {
  GOVERNANCE_TRANSFER_TYPE_UNSPECIFIED = 0;
  GOVERNANCE_TRANSFER_TYPE_ALL_OR_NOTHING = 1;
  GOVERNANCE_TRANSFER_TYPE_BEST_EFFORT = 2;
}

message NewTransferConfiguration {
  // Source account type, such as network treasury, market insurance pool
  vega.AccountType source_type = 1;
  // If network treasury, field is empty, otherwise uses the market ID
  string source = 2;
  // "All or nothing" or "best effort":
  // All or nothing: Transfers the specified amount or does not transfer anything
  // Best effort: Transfers the specified amount or the max allowable amount if this is less than the specified amount
  GovernanceTransferType transfer_type = 3;
  // Maximum amount to transfer
  string amount = 4;
  // ID of asset to transfer
  string asset = 5;
  // Maximum fraction of the source account's balance to transfer as a decimal - i.e. 0.1 = 10% of the balance
  string fraction_of_balance = 6;
  // Specifies the account type to transfer to: reward pool, party, network insurance pool, market insurance pool
  vega.AccountType destination_type = 7;
  // Specifies the account to transfer to, depending on the account type:
  // Network treasury: leave empty
  // Party: party's public key
  // Market insurance pool: market ID
  string destination = 8;
  // Specific details of the transfer.
  oneof kind {
    OneOffTransfer one_off = 101;
    RecurringTransfer recurring = 102;
  }
}

// Specific details for a one off transfer
message OneOffTransfer {
  // Timestamp in Unix nanoseconds for when the transfer should be delivered into the receiver's account.
  int64 deliver_on = 1;
}

// Specific details for a recurring transfer
message RecurringTransfer {
  // First epoch from which this transfer shall be paid.

  uint64 start_epoch = 1;
  // Last epoch at which this transfer shall be paid.
  optional uint64 end_epoch = 2;
  // Optional parameter defining how a transfer is dispatched.
  optional vega.DispatchStrategy dispatch_strategy = 3;
}
