// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: markets.proto

package golang

import (
	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An auction duration is used to configure 3 auction periods:
// 1. `duration > 0`, `volume == 0`:
//   The auction will last for at least N seconds.
// 2. `duration == 0`, `volume > 0`:
//   The auction will end once we can close with given traded volume.
// 3. `duration > 0`, `volume > 0`:
//   The auction will take at least N seconds, but can end sooner if we can trade a certain volume.
type AuctionDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration of the auction in seconds.
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	//Target uncrossing trading volume.
	Volume uint64 `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *AuctionDuration) Reset() {
	*x = AuctionDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionDuration) ProtoMessage() {}

func (x *AuctionDuration) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionDuration.ProtoReflect.Descriptor instead.
func (*AuctionDuration) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{0}
}

func (x *AuctionDuration) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AuctionDuration) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Continuous trading.
type ContinuousTrading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tick size.
	TickSize string `protobuf:"bytes,1,opt,name=tick_size,json=tickSize,proto3" json:"tick_size,omitempty"`
}

func (x *ContinuousTrading) Reset() {
	*x = ContinuousTrading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousTrading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousTrading) ProtoMessage() {}

func (x *ContinuousTrading) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousTrading.ProtoReflect.Descriptor instead.
func (*ContinuousTrading) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{1}
}

func (x *ContinuousTrading) GetTickSize() string {
	if x != nil {
		return x.TickSize
	}
	return ""
}

// Discrete trading.
type DiscreteTrading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration in nanoseconds, maximum 1 month (2592000000000000 ns)
	DurationNs int64 `protobuf:"varint,1,opt,name=duration_ns,json=durationNs,proto3" json:"duration_ns,omitempty"`
	// Tick size.
	TickSize string `protobuf:"bytes,2,opt,name=tick_size,json=tickSize,proto3" json:"tick_size,omitempty"`
}

func (x *DiscreteTrading) Reset() {
	*x = DiscreteTrading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscreteTrading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscreteTrading) ProtoMessage() {}

func (x *DiscreteTrading) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscreteTrading.ProtoReflect.Descriptor instead.
func (*DiscreteTrading) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{2}
}

func (x *DiscreteTrading) GetDurationNs() int64 {
	if x != nil {
		return x.DurationNs
	}
	return 0
}

func (x *DiscreteTrading) GetTickSize() string {
	if x != nil {
		return x.TickSize
	}
	return ""
}

// Future product definition.
type Future struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maturity for the future.
	Maturity string `protobuf:"bytes,1,opt,name=maturity,proto3" json:"maturity,omitempty"`
	// The asset for the future.
	Asset string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// Oracle configuration.
	//
	// Types that are assignable to Oracle:
	//	*Future_EthereumEvent
	Oracle isFuture_Oracle `protobuf_oneof:"oracle"`
}

func (x *Future) Reset() {
	*x = Future{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Future) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Future) ProtoMessage() {}

func (x *Future) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Future.ProtoReflect.Descriptor instead.
func (*Future) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{3}
}

func (x *Future) GetMaturity() string {
	if x != nil {
		return x.Maturity
	}
	return ""
}

func (x *Future) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (m *Future) GetOracle() isFuture_Oracle {
	if m != nil {
		return m.Oracle
	}
	return nil
}

func (x *Future) GetEthereumEvent() *EthereumEvent {
	if x, ok := x.GetOracle().(*Future_EthereumEvent); ok {
		return x.EthereumEvent
	}
	return nil
}

type isFuture_Oracle interface {
	isFuture_Oracle()
}

type Future_EthereumEvent struct {
	// Ethereum events.
	EthereumEvent *EthereumEvent `protobuf:"bytes,100,opt,name=ethereumEvent,proto3,oneof"`
}

func (*Future_EthereumEvent) isFuture_Oracle() {}

// Ethereum event (for oracles).
type EthereumEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum contract identifier.
	ContractID string `protobuf:"bytes,1,opt,name=contractID,proto3" json:"contractID,omitempty"`
	// Event.
	Event string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// Value.
	Value uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EthereumEvent) Reset() {
	*x = EthereumEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumEvent) ProtoMessage() {}

func (x *EthereumEvent) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumEvent.ProtoReflect.Descriptor instead.
func (*EthereumEvent) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{4}
}

func (x *EthereumEvent) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *EthereumEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *EthereumEvent) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Instrument metadata definition.
type InstrumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of 0 or more tags.
	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *InstrumentMetadata) Reset() {
	*x = InstrumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentMetadata) ProtoMessage() {}

func (x *InstrumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentMetadata.ProtoReflect.Descriptor instead.
func (*InstrumentMetadata) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{5}
}

func (x *InstrumentMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Instrument definition.
type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Code for the instrument.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Name of the instrument.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Quote name of the instrument.
	QuoteName string `protobuf:"bytes,4,opt,name=quoteName,proto3" json:"quoteName,omitempty"`
	// A collection of instrument meta-data.
	Metadata *InstrumentMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// An initial mark price for the instrument.
	InitialMarkPrice uint64 `protobuf:"varint,6,opt,name=initialMarkPrice,proto3" json:"initialMarkPrice,omitempty"`
	// The product the instrument is composed of.
	//
	// Types that are assignable to Product:
	//	*Instrument_Future
	Product isInstrument_Product `protobuf_oneof:"product"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{6}
}

func (x *Instrument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instrument) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *Instrument) GetMetadata() *InstrumentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Instrument) GetInitialMarkPrice() uint64 {
	if x != nil {
		return x.InitialMarkPrice
	}
	return 0
}

func (m *Instrument) GetProduct() isInstrument_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (x *Instrument) GetFuture() *Future {
	if x, ok := x.GetProduct().(*Instrument_Future); ok {
		return x.Future
	}
	return nil
}

type isInstrument_Product interface {
	isInstrument_Product()
}

type Instrument_Future struct {
	// Future.
	Future *Future `protobuf:"bytes,100,opt,name=future,proto3,oneof"`
}

func (*Instrument_Future) isInstrument_Product() {}

// Risk model for log normal.
type LogNormalRiskModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Risk Aversion Parameter.
	RiskAversionParameter float64 `protobuf:"fixed64,1,opt,name=riskAversionParameter,proto3" json:"riskAversionParameter,omitempty"`
	// Tau.
	Tau float64 `protobuf:"fixed64,2,opt,name=tau,proto3" json:"tau,omitempty"`
	// Risk model parameters for log normal.
	Params *LogNormalModelParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *LogNormalRiskModel) Reset() {
	*x = LogNormalRiskModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogNormalRiskModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogNormalRiskModel) ProtoMessage() {}

func (x *LogNormalRiskModel) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogNormalRiskModel.ProtoReflect.Descriptor instead.
func (*LogNormalRiskModel) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{7}
}

func (x *LogNormalRiskModel) GetRiskAversionParameter() float64 {
	if x != nil {
		return x.RiskAversionParameter
	}
	return 0
}

func (x *LogNormalRiskModel) GetTau() float64 {
	if x != nil {
		return x.Tau
	}
	return 0
}

func (x *LogNormalRiskModel) GetParams() *LogNormalModelParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Risk model parameters for log normal.
type LogNormalModelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mu param.
	Mu float64 `protobuf:"fixed64,1,opt,name=mu,proto3" json:"mu,omitempty"`
	// R param.
	R float64 `protobuf:"fixed64,2,opt,name=r,proto3" json:"r,omitempty"`
	// Sigma param.
	Sigma float64 `protobuf:"fixed64,3,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *LogNormalModelParams) Reset() {
	*x = LogNormalModelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogNormalModelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogNormalModelParams) ProtoMessage() {}

func (x *LogNormalModelParams) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogNormalModelParams.ProtoReflect.Descriptor instead.
func (*LogNormalModelParams) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{8}
}

func (x *LogNormalModelParams) GetMu() float64 {
	if x != nil {
		return x.Mu
	}
	return 0
}

func (x *LogNormalModelParams) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *LogNormalModelParams) GetSigma() float64 {
	if x != nil {
		return x.Sigma
	}
	return 0
}

// Risk model for simple modelling.
type SimpleRiskModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Risk model params for simple modelling.
	Params *SimpleModelParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *SimpleRiskModel) Reset() {
	*x = SimpleRiskModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRiskModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRiskModel) ProtoMessage() {}

func (x *SimpleRiskModel) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRiskModel.ProtoReflect.Descriptor instead.
func (*SimpleRiskModel) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{9}
}

func (x *SimpleRiskModel) GetParams() *SimpleModelParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Risk model parameters for simple modelling.
type SimpleModelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pre-defined risk factor value for long.
	FactorLong float64 `protobuf:"fixed64,1,opt,name=factorLong,proto3" json:"factorLong,omitempty"`
	// Pre-defined risk factor value for short.
	FactorShort float64 `protobuf:"fixed64,2,opt,name=factorShort,proto3" json:"factorShort,omitempty"`
	// Pre-defined maximum price move up that the model considers as valid.
	MaxMoveUp float64 `protobuf:"fixed64,3,opt,name=maxMoveUp,proto3" json:"maxMoveUp,omitempty"`
	// Pre-defined minimum price move down that the model considers as valid.
	MinMoveDown float64 `protobuf:"fixed64,4,opt,name=minMoveDown,proto3" json:"minMoveDown,omitempty"`
	// Pre-defined constant probability of trading
	ProbabilityOfTrading float64 `protobuf:"fixed64,5,opt,name=probabilityOfTrading,proto3" json:"probabilityOfTrading,omitempty"`
}

func (x *SimpleModelParams) Reset() {
	*x = SimpleModelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleModelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleModelParams) ProtoMessage() {}

func (x *SimpleModelParams) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleModelParams.ProtoReflect.Descriptor instead.
func (*SimpleModelParams) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{10}
}

func (x *SimpleModelParams) GetFactorLong() float64 {
	if x != nil {
		return x.FactorLong
	}
	return 0
}

func (x *SimpleModelParams) GetFactorShort() float64 {
	if x != nil {
		return x.FactorShort
	}
	return 0
}

func (x *SimpleModelParams) GetMaxMoveUp() float64 {
	if x != nil {
		return x.MaxMoveUp
	}
	return 0
}

func (x *SimpleModelParams) GetMinMoveDown() float64 {
	if x != nil {
		return x.MinMoveDown
	}
	return 0
}

func (x *SimpleModelParams) GetProbabilityOfTrading() float64 {
	if x != nil {
		return x.ProbabilityOfTrading
	}
	return 0
}

// Scaling Factors (for use in margin calculation).
type ScalingFactors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search level.
	SearchLevel float64 `protobuf:"fixed64,1,opt,name=searchLevel,proto3" json:"searchLevel,omitempty"`
	// Initial margin level.
	InitialMargin float64 `protobuf:"fixed64,2,opt,name=initialMargin,proto3" json:"initialMargin,omitempty"`
	// Collateral release level.
	CollateralRelease float64 `protobuf:"fixed64,3,opt,name=collateralRelease,proto3" json:"collateralRelease,omitempty"`
}

func (x *ScalingFactors) Reset() {
	*x = ScalingFactors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalingFactors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalingFactors) ProtoMessage() {}

func (x *ScalingFactors) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalingFactors.ProtoReflect.Descriptor instead.
func (*ScalingFactors) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{11}
}

func (x *ScalingFactors) GetSearchLevel() float64 {
	if x != nil {
		return x.SearchLevel
	}
	return 0
}

func (x *ScalingFactors) GetInitialMargin() float64 {
	if x != nil {
		return x.InitialMargin
	}
	return 0
}

func (x *ScalingFactors) GetCollateralRelease() float64 {
	if x != nil {
		return x.CollateralRelease
	}
	return 0
}

// Margin Calculator definition.
type MarginCalculator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scaling factors for margin calculation.
	ScalingFactors *ScalingFactors `protobuf:"bytes,1,opt,name=scalingFactors,proto3" json:"scalingFactors,omitempty"`
}

func (x *MarginCalculator) Reset() {
	*x = MarginCalculator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarginCalculator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarginCalculator) ProtoMessage() {}

func (x *MarginCalculator) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarginCalculator.ProtoReflect.Descriptor instead.
func (*MarginCalculator) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{12}
}

func (x *MarginCalculator) GetScalingFactors() *ScalingFactors {
	if x != nil {
		return x.ScalingFactors
	}
	return nil
}

// Tradable Instrument definition.
type TradableInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument details.
	Instrument *Instrument `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Margin calculator for the instrument.
	MarginCalculator *MarginCalculator `protobuf:"bytes,2,opt,name=marginCalculator,proto3" json:"marginCalculator,omitempty"`
	// Risk model for use by the instrument.
	//
	// Types that are assignable to RiskModel:
	//	*TradableInstrument_LogNormalRiskModel
	//	*TradableInstrument_SimpleRiskModel
	RiskModel isTradableInstrument_RiskModel `protobuf_oneof:"riskModel"`
}

func (x *TradableInstrument) Reset() {
	*x = TradableInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradableInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradableInstrument) ProtoMessage() {}

func (x *TradableInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradableInstrument.ProtoReflect.Descriptor instead.
func (*TradableInstrument) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{13}
}

func (x *TradableInstrument) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *TradableInstrument) GetMarginCalculator() *MarginCalculator {
	if x != nil {
		return x.MarginCalculator
	}
	return nil
}

func (m *TradableInstrument) GetRiskModel() isTradableInstrument_RiskModel {
	if m != nil {
		return m.RiskModel
	}
	return nil
}

func (x *TradableInstrument) GetLogNormalRiskModel() *LogNormalRiskModel {
	if x, ok := x.GetRiskModel().(*TradableInstrument_LogNormalRiskModel); ok {
		return x.LogNormalRiskModel
	}
	return nil
}

func (x *TradableInstrument) GetSimpleRiskModel() *SimpleRiskModel {
	if x, ok := x.GetRiskModel().(*TradableInstrument_SimpleRiskModel); ok {
		return x.SimpleRiskModel
	}
	return nil
}

type isTradableInstrument_RiskModel interface {
	isTradableInstrument_RiskModel()
}

type TradableInstrument_LogNormalRiskModel struct {
	// Log normal.
	LogNormalRiskModel *LogNormalRiskModel `protobuf:"bytes,100,opt,name=logNormalRiskModel,proto3,oneof"`
}

type TradableInstrument_SimpleRiskModel struct {
	// Simple.
	SimpleRiskModel *SimpleRiskModel `protobuf:"bytes,101,opt,name=simpleRiskModel,proto3,oneof"`
}

func (*TradableInstrument_LogNormalRiskModel) isTradableInstrument_RiskModel() {}

func (*TradableInstrument_SimpleRiskModel) isTradableInstrument_RiskModel() {}

// Fee factors definition.
type FeeFactors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maker fee.
	MakerFee string `protobuf:"bytes,1,opt,name=makerFee,proto3" json:"makerFee,omitempty"`
	// Infrastructure fee.
	InfrastructureFee string `protobuf:"bytes,2,opt,name=infrastructureFee,proto3" json:"infrastructureFee,omitempty"`
	// Liquidity fee.
	LiquidityFee string `protobuf:"bytes,3,opt,name=liquidityFee,proto3" json:"liquidityFee,omitempty"`
}

func (x *FeeFactors) Reset() {
	*x = FeeFactors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeFactors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeFactors) ProtoMessage() {}

func (x *FeeFactors) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeFactors.ProtoReflect.Descriptor instead.
func (*FeeFactors) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{14}
}

func (x *FeeFactors) GetMakerFee() string {
	if x != nil {
		return x.MakerFee
	}
	return ""
}

func (x *FeeFactors) GetInfrastructureFee() string {
	if x != nil {
		return x.InfrastructureFee
	}
	return ""
}

func (x *FeeFactors) GetLiquidityFee() string {
	if x != nil {
		return x.LiquidityFee
	}
	return ""
}

// Fees definition.
type Fees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee factors.
	Factors *FeeFactors `protobuf:"bytes,1,opt,name=factors,proto3" json:"factors,omitempty"`
}

func (x *Fees) Reset() {
	*x = Fees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fees) ProtoMessage() {}

func (x *Fees) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fees.ProtoReflect.Descriptor instead.
func (*Fees) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{15}
}

func (x *Fees) GetFactors() *FeeFactors {
	if x != nil {
		return x.Factors
	}
	return nil
}

// PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration
type PriceMonitoringTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price monitoring projection horizon τ in seconds.
	Horizon int64 `protobuf:"varint,1,opt,name=horizon,proto3" json:"horizon,omitempty"`
	// Price monitoirng probability level p.
	Probability float64 `protobuf:"fixed64,2,opt,name=probability,proto3" json:"probability,omitempty"`
	// Price monitoring auction extension duration in seconds should the price
	// breach it's theoretical level over the specified horizon at the specified
	// probability level.
	AuctionExtension int64 `protobuf:"varint,3,opt,name=auctionExtension,proto3" json:"auctionExtension,omitempty"`
}

func (x *PriceMonitoringTrigger) Reset() {
	*x = PriceMonitoringTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitoringTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitoringTrigger) ProtoMessage() {}

func (x *PriceMonitoringTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitoringTrigger.ProtoReflect.Descriptor instead.
func (*PriceMonitoringTrigger) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{16}
}

func (x *PriceMonitoringTrigger) GetHorizon() int64 {
	if x != nil {
		return x.Horizon
	}
	return 0
}

func (x *PriceMonitoringTrigger) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *PriceMonitoringTrigger) GetAuctionExtension() int64 {
	if x != nil {
		return x.AuctionExtension
	}
	return 0
}

// PriceMonitoringParameters contain a collection of triggers to be used for a given market.
type PriceMonitoringParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Triggers []*PriceMonitoringTrigger `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
}

func (x *PriceMonitoringParameters) Reset() {
	*x = PriceMonitoringParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitoringParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitoringParameters) ProtoMessage() {}

func (x *PriceMonitoringParameters) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitoringParameters.ProtoReflect.Descriptor instead.
func (*PriceMonitoringParameters) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{17}
}

func (x *PriceMonitoringParameters) GetTriggers() []*PriceMonitoringTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

type PriceMonitoringSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies PriceMonitoringParameters to be used for price monitoring purposes
	Parameters *PriceMonitoringParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Specifies how often (expressed in seconds) the price monitoring bounds should be updated.
	UpdateFrequency int64 `protobuf:"varint,2,opt,name=updateFrequency,proto3" json:"updateFrequency,omitempty"`
}

func (x *PriceMonitoringSettings) Reset() {
	*x = PriceMonitoringSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceMonitoringSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceMonitoringSettings) ProtoMessage() {}

func (x *PriceMonitoringSettings) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceMonitoringSettings.ProtoReflect.Descriptor instead.
func (*PriceMonitoringSettings) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{18}
}

func (x *PriceMonitoringSettings) GetParameters() *PriceMonitoringParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *PriceMonitoringSettings) GetUpdateFrequency() int64 {
	if x != nil {
		return x.UpdateFrequency
	}
	return 0
}

// TargetStakeParameters contains parameters used in target stake calculation
type TargetStakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies length of time window expressed in seconds for target stake calculation
	TimeWindow int64 `protobuf:"varint,1,opt,name=timeWindow,proto3" json:"timeWindow,omitempty"`
	// Specifies scaling factors used in target stake calculation
	ScalingFactor float64 `protobuf:"fixed64,2,opt,name=scalingFactor,proto3" json:"scalingFactor,omitempty"`
}

func (x *TargetStakeParameters) Reset() {
	*x = TargetStakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetStakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetStakeParameters) ProtoMessage() {}

func (x *TargetStakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetStakeParameters.ProtoReflect.Descriptor instead.
func (*TargetStakeParameters) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{19}
}

func (x *TargetStakeParameters) GetTimeWindow() int64 {
	if x != nil {
		return x.TimeWindow
	}
	return 0
}

func (x *TargetStakeParameters) GetScalingFactor() float64 {
	if x != nil {
		return x.ScalingFactor
	}
	return 0
}

// Market definition.
type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tradable instrument configuration.
	TradableInstrument *TradableInstrument `protobuf:"bytes,2,opt,name=tradableInstrument,proto3" json:"tradableInstrument,omitempty"`
	// Number of decimal places that a price must be shifted by in order to get a
	// correct price denominated in the currency of the market. For example:
	// `realPrice = price / 10^decimalPlaces`
	DecimalPlaces uint64 `protobuf:"varint,3,opt,name=decimalPlaces,proto3" json:"decimalPlaces,omitempty"`
	// Fees configuration.
	Fees *Fees `protobuf:"bytes,4,opt,name=fees,proto3" json:"fees,omitempty"`
	// Auction duration specifies how long the opening auction will run (minimum
	// duration and optionally a minimum traded volume).
	OpeningAuction *AuctionDuration `protobuf:"bytes,5,opt,name=openingAuction,proto3" json:"openingAuction,omitempty"`
	// Trading mode for the market.
	//
	// Types that are assignable to TradingMode:
	//	*Market_Continuous
	//	*Market_Discrete
	TradingMode isMarket_TradingMode `protobuf_oneof:"tradingMode"`
	// PriceMonitoringSettings for the market.
	PriceMonitoringSettings *PriceMonitoringSettings `protobuf:"bytes,6,opt,name=priceMonitoringSettings,proto3" json:"priceMonitoringSettings,omitempty"`
	// TargetStakeParameters for the market
	TargetStakeParameters *TargetStakeParameters `protobuf:"bytes,7,opt,name=targetStakeParameters,proto3" json:"targetStakeParameters,omitempty"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_markets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_markets_proto_rawDescGZIP(), []int{20}
}

func (x *Market) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Market) GetTradableInstrument() *TradableInstrument {
	if x != nil {
		return x.TradableInstrument
	}
	return nil
}

func (x *Market) GetDecimalPlaces() uint64 {
	if x != nil {
		return x.DecimalPlaces
	}
	return 0
}

func (x *Market) GetFees() *Fees {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *Market) GetOpeningAuction() *AuctionDuration {
	if x != nil {
		return x.OpeningAuction
	}
	return nil
}

func (m *Market) GetTradingMode() isMarket_TradingMode {
	if m != nil {
		return m.TradingMode
	}
	return nil
}

func (x *Market) GetContinuous() *ContinuousTrading {
	if x, ok := x.GetTradingMode().(*Market_Continuous); ok {
		return x.Continuous
	}
	return nil
}

func (x *Market) GetDiscrete() *DiscreteTrading {
	if x, ok := x.GetTradingMode().(*Market_Discrete); ok {
		return x.Discrete
	}
	return nil
}

func (x *Market) GetPriceMonitoringSettings() *PriceMonitoringSettings {
	if x != nil {
		return x.PriceMonitoringSettings
	}
	return nil
}

func (x *Market) GetTargetStakeParameters() *TargetStakeParameters {
	if x != nil {
		return x.TargetStakeParameters
	}
	return nil
}

type isMarket_TradingMode interface {
	isMarket_TradingMode()
}

type Market_Continuous struct {
	// Continuous.
	Continuous *ContinuousTrading `protobuf:"bytes,100,opt,name=continuous,proto3,oneof"`
}

type Market_Discrete struct {
	// Discrete.
	Discrete *DiscreteTrading `protobuf:"bytes,101,opt,name=discrete,proto3,oneof"`
}

func (*Market_Continuous) isMarket_TradingMode() {}

func (*Market_Discrete) isMarket_TradingMode() {}

var File_markets_proto protoreflect.FileDescriptor

var file_markets_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x76, 0x65, 0x67, 0x61, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a,
	0x0f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x60, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x10, 0x00, 0x18, 0x80, 0x80, 0x88, 0xba, 0x90, 0xad, 0xcd, 0x04, 0x52,
	0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x06, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x22, 0x5b, 0x0a, 0x0d,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x65, 0x67,
	0x61, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x90, 0x01,
	0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x69, 0x73, 0x6b, 0x41, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x72, 0x69, 0x73, 0x6b, 0x41, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x61, 0x75, 0x12, 0x32, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x4a, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6d, 0x75, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x22, 0x42, 0x0a, 0x0f,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0xff, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x4d,
	0x6f, 0x76, 0x65, 0x55, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xe2, 0xdf, 0x1f,
	0x09, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d,
	0x6f, 0x76, 0x65, 0x55, 0x70, 0x12, 0x2f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x4d, 0x6f, 0x76, 0x65,
	0x44, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09,
	0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4d, 0x6f,
	0x76, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x4a, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x3c, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xa6, 0x02,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x6c, 0x6f,
	0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x4c, 0x6f,
	0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x48, 0x00, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x69, 0x73,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x69, 0x73,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x69, 0x73,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x7a, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x65,
	0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x07, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x31, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x10, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52,
	0x10, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x55, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38,
	0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x74, 0x0a, 0x15, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x33, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x31, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x92, 0x04, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
	0x65, 0x67, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x12,
	0x57, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x65, 0x67, 0x61, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x65, 0x67, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_markets_proto_rawDescOnce sync.Once
	file_markets_proto_rawDescData = file_markets_proto_rawDesc
)

func file_markets_proto_rawDescGZIP() []byte {
	file_markets_proto_rawDescOnce.Do(func() {
		file_markets_proto_rawDescData = protoimpl.X.CompressGZIP(file_markets_proto_rawDescData)
	})
	return file_markets_proto_rawDescData
}

var file_markets_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_markets_proto_goTypes = []interface{}{
	(*AuctionDuration)(nil),           // 0: vega.AuctionDuration
	(*ContinuousTrading)(nil),         // 1: vega.ContinuousTrading
	(*DiscreteTrading)(nil),           // 2: vega.DiscreteTrading
	(*Future)(nil),                    // 3: vega.Future
	(*EthereumEvent)(nil),             // 4: vega.EthereumEvent
	(*InstrumentMetadata)(nil),        // 5: vega.InstrumentMetadata
	(*Instrument)(nil),                // 6: vega.Instrument
	(*LogNormalRiskModel)(nil),        // 7: vega.LogNormalRiskModel
	(*LogNormalModelParams)(nil),      // 8: vega.LogNormalModelParams
	(*SimpleRiskModel)(nil),           // 9: vega.SimpleRiskModel
	(*SimpleModelParams)(nil),         // 10: vega.SimpleModelParams
	(*ScalingFactors)(nil),            // 11: vega.ScalingFactors
	(*MarginCalculator)(nil),          // 12: vega.MarginCalculator
	(*TradableInstrument)(nil),        // 13: vega.TradableInstrument
	(*FeeFactors)(nil),                // 14: vega.FeeFactors
	(*Fees)(nil),                      // 15: vega.Fees
	(*PriceMonitoringTrigger)(nil),    // 16: vega.PriceMonitoringTrigger
	(*PriceMonitoringParameters)(nil), // 17: vega.PriceMonitoringParameters
	(*PriceMonitoringSettings)(nil),   // 18: vega.PriceMonitoringSettings
	(*TargetStakeParameters)(nil),     // 19: vega.TargetStakeParameters
	(*Market)(nil),                    // 20: vega.Market
}
var file_markets_proto_depIdxs = []int32{
	4,  // 0: vega.Future.ethereumEvent:type_name -> vega.EthereumEvent
	5,  // 1: vega.Instrument.metadata:type_name -> vega.InstrumentMetadata
	3,  // 2: vega.Instrument.future:type_name -> vega.Future
	8,  // 3: vega.LogNormalRiskModel.params:type_name -> vega.LogNormalModelParams
	10, // 4: vega.SimpleRiskModel.params:type_name -> vega.SimpleModelParams
	11, // 5: vega.MarginCalculator.scalingFactors:type_name -> vega.ScalingFactors
	6,  // 6: vega.TradableInstrument.instrument:type_name -> vega.Instrument
	12, // 7: vega.TradableInstrument.marginCalculator:type_name -> vega.MarginCalculator
	7,  // 8: vega.TradableInstrument.logNormalRiskModel:type_name -> vega.LogNormalRiskModel
	9,  // 9: vega.TradableInstrument.simpleRiskModel:type_name -> vega.SimpleRiskModel
	14, // 10: vega.Fees.factors:type_name -> vega.FeeFactors
	16, // 11: vega.PriceMonitoringParameters.triggers:type_name -> vega.PriceMonitoringTrigger
	17, // 12: vega.PriceMonitoringSettings.parameters:type_name -> vega.PriceMonitoringParameters
	13, // 13: vega.Market.tradableInstrument:type_name -> vega.TradableInstrument
	15, // 14: vega.Market.fees:type_name -> vega.Fees
	0,  // 15: vega.Market.openingAuction:type_name -> vega.AuctionDuration
	1,  // 16: vega.Market.continuous:type_name -> vega.ContinuousTrading
	2,  // 17: vega.Market.discrete:type_name -> vega.DiscreteTrading
	18, // 18: vega.Market.priceMonitoringSettings:type_name -> vega.PriceMonitoringSettings
	19, // 19: vega.Market.targetStakeParameters:type_name -> vega.TargetStakeParameters
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_markets_proto_init() }
func file_markets_proto_init() {
	if File_markets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_markets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousTrading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscreteTrading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Future); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogNormalRiskModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogNormalModelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRiskModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleModelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalingFactors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarginCalculator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradableInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeFactors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitoringTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitoringParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceMonitoringSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetStakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_markets_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Future_EthereumEvent)(nil),
	}
	file_markets_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Instrument_Future)(nil),
	}
	file_markets_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*TradableInstrument_LogNormalRiskModel)(nil),
		(*TradableInstrument_SimpleRiskModel)(nil),
	}
	file_markets_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Market_Continuous)(nil),
		(*Market_Discrete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_markets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_markets_proto_goTypes,
		DependencyIndexes: file_markets_proto_depIdxs,
		MessageInfos:      file_markets_proto_msgTypes,
	}.Build()
	File_markets_proto = out.File
	file_markets_proto_rawDesc = nil
	file_markets_proto_goTypes = nil
	file_markets_proto_depIdxs = nil
}
